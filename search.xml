<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>DBeaver Enterprise Edition 22.0 企业版破解方法</title>
    <url>/2023/05/08/DBeaver%20Enterprise%20Edition%2022.0%20%E4%BC%81%E4%B8%9A%E7%89%88%E7%A0%B4%E8%A7%A3%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="下载方式二选一"><a href="#下载方式二选一" class="headerlink" title="下载方式二选一"></a>下载方式二选一</h1><h2 id="百度云网盘-所有文件一齐下载"><a href="#百度云网盘-所有文件一齐下载" class="headerlink" title="百度云网盘:所有文件一齐下载"></a>百度云网盘:所有文件一齐下载</h2><p>链接：<a href="https://pan.baidu.com/s/1b9XilYsxIL40Uk9_27unFA?pwd=2023">https://pan.baidu.com/s/1b9XilYsxIL40Uk9_27unFA?pwd=2023</a><br>提取码：2023 </p>
<h2 id="官网下载"><a href="#官网下载" class="headerlink" title="官网下载"></a>官网下载</h2><h3 id="1、DBeaver-EE-22-0"><a href="#1、DBeaver-EE-22-0" class="headerlink" title="1、DBeaver EE 22.0"></a>1、DBeaver EE 22.0</h3><p>DBeaver EE官网地址：<a href="https://dbeaver.com/download/enterprise/">Download Dbeaver Enterprise Edition</a></p>
<h3 id="2、JDK11"><a href="#2、JDK11" class="headerlink" title="2、JDK11"></a>2、JDK11</h3><p>JDK11官网地址：<a href="https://www.oracle.com/java/technologies/downloads/#java11-windows">Download JDK11</a></p>
<h3 id="3、javaagent"><a href="#3、javaagent" class="headerlink" title="3、javaagent"></a>3、javaagent</h3><p>百度云网盘下载：</p>
<p>链接：<a href="https://pan.baidu.com/s/1WVyatIk08D_F-BhBh2zfwA?pwd=2023">https://pan.baidu.com/s/1WVyatIk08D_F-BhBh2zfwA?pwd=2023</a><br>提取码：2023 </p>
<h2 id="破解步骤"><a href="#破解步骤" class="headerlink" title="破解步骤"></a>破解步骤</h2><p>1、安装DBeaver Enterprise Edition，并记下安装路径</p>
<p>2、安装JDK11，并记下安装路径</p>
<p>3、设置JDK11环境变量，具体操作步骤为：此电脑-右键-属性-高级系统设置-环境变量-在系统变量出找到Path变量双击-点击新建-将JDK11安装目录路径粘贴上去（具体到<code>/bin</code>的位置），参考路径如下：<img src="/2023/05/08/DBeaver%20Enterprise%20Edition%2022.0%20%E4%BC%81%E4%B8%9A%E7%89%88%E7%A0%B4%E8%A7%A3%E6%96%B9%E6%B3%95/1.png" alt></p>
<p>4、以管理员身份运行cmd，并切换到JDK11安装目录，如本文中JDK11安装目录为<code>E:\Java\jdk-11\bin</code>中，执行下面命令生成jar包：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">jlink.exe --module-path jmods --add-modules java.desktop --output jre<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>5、打开JDK11安装目录<code>E:\Java\jdk-11\bin</code>，复制生成的jar包，打开DBeaver EE软件安装目录，删除目录中的jre文件夹，并粘贴刚刚生成的jre文件夹；将网盘中下载的<code>dbeaver-agent.jar</code>破解包粘贴到DBeaver EE软件安装目录中</p>
<p><img src="/2023/05/08/DBeaver%20Enterprise%20Edition%2022.0%20%E4%BC%81%E4%B8%9A%E7%89%88%E7%A0%B4%E8%A7%A3%E6%96%B9%E6%B3%95/2.png" alt></p>
<p>6、在DBeaver EE软件安装目录中，使用记事本打开<code>dbeaver.ini</code>文件，添加jdk11和dbeaver-agent.jar路径如下：</p>
<p><img src="/2023/05/08/DBeaver%20Enterprise%20Edition%2022.0%20%E4%BC%81%E4%B8%9A%E7%89%88%E7%A0%B4%E8%A7%A3%E6%96%B9%E6%B3%95/3.png" alt></p>
<p>至此，DBeaver Enterprise Edition 22.0 企业版破解已成功激活，可以正常开始使用了</p>
]]></content>
      <categories>
        <category>数据库工具</category>
      </categories>
      <tags>
        <tag>数据库工具</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS3动画详解</title>
    <url>/2023/12/25/CSS3%E5%8A%A8%E7%94%BB%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>css中有两种形式实现动画效果：过渡动画<code>transition</code>和自定义动画<code>animation</code>。其中，animation动画可以循环多次执行，而过渡动画transition只执行一遍。</p>
<h1 id="transition"><a href="#transition" class="headerlink" title="transition"></a>transition</h1><p>若通过用户的交互直接改变css样式，呈现的形式是立即转变。若希望这个变化是有过渡效果的，便需要使用到过渡动画<code>transition</code>。使用transition的例子如下：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;
  &lt;div&gt;
    &lt;button @click&#x3D;&quot;toggleVisibility&quot;&gt;切换元素&lt;&#x2F;button&gt;
    &lt;transition name&#x3D;&quot;fade&quot;&gt;
      &lt;div v-if&#x3D;&quot;isVisible&quot; key&#x3D;&quot;myElement&quot; class&#x3D;&quot;fade-element&quot;&gt;
        这是一个会淡入淡出的元素
      &lt;&#x2F;div&gt;
    &lt;&#x2F;transition&gt;
  &lt;&#x2F;div&gt;
&lt;&#x2F;template&gt;

&lt;script&gt;
export default &#123;
  data() &#123;
    return &#123;
      isVisible: true,
    &#125;;
  &#125;,
  methods: &#123;
    toggleVisibility() &#123;
      this.isVisible &#x3D; !this.isVisible;
    &#125;,
  &#125;,
&#125;;
&lt;&#x2F;script&gt;

&lt;style&gt;
.fade-enter-active, .fade-leave-active &#123;
  transition: opacity 0.5s;
&#125;

.fade-enter, .fade-leave-to &#123;
  opacity: 0;
&#125;
&lt;&#x2F;style&gt;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="transition简写方式"><a href="#transition简写方式" class="headerlink" title="transition简写方式"></a>transition简写方式</h2><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">transition</span><span class="token punctuation">:</span> 使用过渡效果的属性名称  过渡时间 过渡方式<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="常见属性"><a href="#常见属性" class="headerlink" title="常见属性"></a>常见属性</h2><h3 id="transition-property：指定使用过渡效果的css属性"><a href="#transition-property：指定使用过渡效果的css属性" class="headerlink" title="transition-property：指定使用过渡效果的css属性"></a>transition-property：指定使用过渡效果的css属性</h3><p>默认值为all，即<strong>所有能够被transition支持的属性都会有过渡效果</strong>。在实际使用时最好<strong>指定具体生效的属性</strong>，如只改变字体大小便设置为<code>transition-property：font-size</code>。</p>
<p><strong>目前transition不支持的过渡项有：<code>z-index</code>、<code>display</code></strong>。</p>
<h3 id="transition-duration：动画过渡时间"><a href="#transition-duration：动画过渡时间" class="headerlink" title="transition-duration：动画过渡时间"></a>transition-duration：动画过渡时间</h3><p>定义动画过渡时间，<strong>默认为0秒</strong></p>
<h3 id="transition-timing-function：动画过渡方式"><a href="#transition-timing-function：动画过渡方式" class="headerlink" title="transition-timing-function：动画过渡方式"></a>transition-timing-function：动画过渡方式</h3><p>定义动画的事件函数，控制动画速度，可以配置动画随时间变化的运动速率和轨迹。</p>
<p>可选值：</p>
<ul>
<li>linear：动画的速度从头到尾都是相同的</li>
<li>ease（缓解）：默认是动画从低速开始，然后加快，在结束前变慢</li>
<li>ease-in：动画以低速开始</li>
<li>ease-out：动画以低速结束</li>
<li>ease-in-out：动画以低速开始和结束</li>
<li>cubic-bezier(n,n,n,n)：贝塞尔曲线（自定义数组），可到<a href="https://cubic-bezier.com/#.17,.67,.83,.67">网站 cubic-bezier.com</a>进行可视化配置</li>
</ul>
<h3 id="transition-delay：-动画延迟时间"><a href="#transition-delay：-动画延迟时间" class="headerlink" title="transition-delay： 动画延迟时间"></a><strong>transition-delay：</strong> 动画延迟时间</h3><p>设置动画延时时间，单位为秒。</p>
<p>若想要立即触发动画，只在恢复时延迟过渡，可以在动画触发时重新设置<code>transition-delay：0s</code>。这样动画一旦触发就会应用对应的样式表，动画执行完毕后延时0秒恢复原样式。</p>
<p>当同时使用多个动画时，可依次定义每个动画的延迟执行时间，依次来区分每一个动画。</p>
<h3 id="多属性累加"><a href="#多属性累加" class="headerlink" title="多属性累加"></a>多属性累加</h3><p>需要对每个属性的过渡效果分别设置时，可以使用逗号<code>,</code>来分隔开。</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">transition-property</span><span class="token punctuation">:</span> width<span class="token punctuation">,</span> heitht<span class="token punctuation">,</span> color <span class="token punctuation">;</span>
<span class="token property">trnasition-duration</span><span class="token punctuation">:</span> 1s<span class="token punctuation">,</span> 1.5s<span class="token punctuation">,</span> 2s <span class="token punctuation">;</span>
<span class="token property">transition-timing-function</span><span class="token punctuation">:</span> ease<span class="token punctuation">,</span> linear<span class="token punctuation">,</span> ease-in-out <span class="token punctuation">;</span>
<span class="token property">transition-delay</span><span class="token punctuation">:</span> 0s<span class="token punctuation">,</span> 1s<span class="token punctuation">,</span> 0s <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>以上代码也可以使用<strong>简写方式</strong>来分隔，如：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">transition</span><span class="token punctuation">:</span> width 1s ease <span class="token punctuation">,</span>heitht 1.5s linear 1s<span class="token punctuation">,</span> color 2s ease-in-out <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h1 id="animation"><a href="#animation" class="headerlink" title="animation"></a>animation</h1><p>自定义动画通过<code>@keyframes</code>来设置关键帧动画。可以对每一帧动画进行设置动画名称、时长、缓动函数、循环函数等信息。其语法如下：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@keyframes</span> animationName</span> <span class="token punctuation">&#123;</span>
  <span class="token selector">0%</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">/* 样式定义 */</span>
    <span class="token property">width</span><span class="token punctuation">:</span>50px<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span>50px<span class="token punctuation">;</span>      
  <span class="token punctuation">&#125;</span>
  <span class="token selector">50%</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">/* 样式定义 */</span>
    <span class="token property">width</span><span class="token punctuation">:</span>100px<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span>100px<span class="token punctuation">;</span>      
  <span class="token punctuation">&#125;</span>
  <span class="token selector">100%</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">/* 样式定义 */</span>
    <span class="token property">width</span><span class="token punctuation">:</span>50px<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span>50px<span class="token punctuation">;</span>      
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/* 应用动画 */</span>
<span class="token selector">.element</span> <span class="token punctuation">&#123;</span>
  <span class="token property">animation</span><span class="token punctuation">:</span> animationName 3s ease-in-out infinite<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>其中，使用百分比来<code>%</code>指定变化时的状态，<code>0%</code>和<code>100%</code>代表首尾帧，也可分别使用<code>from</code>和<code>to</code>来替代。</p>
<p><strong>注意</strong>：若自定义<strong>动画没有自定义首尾帧</strong>，首尾帧将会应用<strong>元素原有的样式</strong>。</p>
<p>例如：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@keyframes</span> animationName</span> <span class="token punctuation">&#123;</span>
  <span class="token selector">from</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">/* 样式定义 */</span>
    <span class="token property">width</span><span class="token punctuation">:</span>50px<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span>50px<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token selector">50%</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">/* 样式定义 */</span>
    <span class="token property">width</span><span class="token punctuation">:</span>100px<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span>100px<span class="token punctuation">;</span>      
  <span class="token punctuation">&#125;</span>
  <span class="token selector">to</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">/* 样式定义 */</span>
    <span class="token property">width</span><span class="token punctuation">:</span>50px<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span>50px<span class="token punctuation">;</span>      
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/* 将动画应用到元素上 */</span>
<span class="token selector">.element</span> <span class="token punctuation">&#123;</span>
  <span class="token property">animation</span><span class="token punctuation">:</span> animationName 3s ease-in-out infinite<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="animation简写方式"><a href="#animation简写方式" class="headerlink" title="animation简写方式"></a>animation简写方式</h2><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">animation</span><span class="token punctuation">:</span> 动画持续时间  延迟时间 执行关键帧名称 运动方式 循环次数 结束状态 动画执行顺序<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><strong>最简方式：</strong>（其中执行时间和延迟时间顺序不可调整）</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">animation</span><span class="token punctuation">:</span> 动画执行时间 执行关键帧名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="常见属性-1"><a href="#常见属性-1" class="headerlink" title="常见属性"></a>常见属性</h2><h3 id="animation-name-指定使用的-keyframes-名称"><a href="#animation-name-指定使用的-keyframes-名称" class="headerlink" title="animation-name:指定使用的 @keyframes 名称"></a>animation-name:指定使用的 <code>@keyframes</code> 名称</h3><p>若元素想要使用对应名称的动画，则需要配置animation-name。</p>
<h3 id="animation-duration：-动画持续时间"><a href="#animation-duration：-动画持续时间" class="headerlink" title="animation-duration： 动画持续时间"></a><strong>animation-duration：</strong> 动画持续时间</h3><p>定义动画持续时间，<strong>默认为0秒</strong></p>
<h3 id="animation-iteration-count：-动画循环次数"><a href="#animation-iteration-count：-动画循环次数" class="headerlink" title="animation-iteration-count： 动画循环次数"></a><strong>animation-iteration-count：</strong> 动画循环次数</h3><p>定义动画迭代次数/执行次数，<strong>默认为1次</strong></p>
<h3 id="animation-timing-function：-动画运动方式"><a href="#animation-timing-function：-动画运动方式" class="headerlink" title="animation-timing-function： 动画运动方式"></a><strong>animation-timing-function：</strong> 动画运动方式</h3><p>定义动画的缓动函数，控制动画速度，可以配置动画随时间变化的运动速率和轨迹。</p>
<p>可选值：</p>
<ul>
<li>linear：动画的速度从头到尾都是相同的</li>
<li>ease（缓解）：默认是动画从低速开始，然后加快，在结束前变慢</li>
<li>ease-in：动画以低速开始</li>
<li>ease-out：动画以低速结束</li>
<li>ease-in-out：动画以低速开始和结束</li>
<li>cubic-bezier(n,n,n,n)：贝塞尔曲线（自定义数组），可到<a href="https://cubic-bezier.com/#.17,.67,.83,.67">网站 cubic-bezier.com</a>进行可视化配置</li>
</ul>
<h3 id="animation-delay：-动画延迟时间"><a href="#animation-delay：-动画延迟时间" class="headerlink" title="animation-delay： 动画延迟时间"></a><strong>animation-delay：</strong> 动画延迟时间</h3><p>设置动画延时时间，单位为秒。</p>
<p>当同时使用多个动画时，可依次定义每个动画的延迟执行时间，依次来区分每一个动画。</p>
<h3 id="animation-direction：-动画执行顺序（播放方向）"><a href="#animation-direction：-动画执行顺序（播放方向）" class="headerlink" title="animation-direction： 动画执行顺序（播放方向）"></a><strong>animation-direction：</strong> 动画执行顺序（播放方向）</h3><p>设置动画执行的方向。</p>
<p>可选值：</p>
<ul>
<li>normal：默认值，动画按正常播放</li>
<li>reverse：动画反向播放</li>
<li>alternate(交替的)：动画正反（正向-&gt;反向）交替执行</li>
<li>alternate-reverse：动画反正（反向-&gt;正向）交替执行</li>
<li>inherit：从父元素继承该属性</li>
</ul>
<h3 id="animation-fill-mode：动画结束状态"><a href="#animation-fill-mode：动画结束状态" class="headerlink" title="animation-fill-mode：动画结束状态"></a>animation-fill-mode：动画结束状态</h3><p>设置动画的填充模式</p>
<p>可选值：</p>
<ul>
<li>none：默认值，动画在动画执行前后，不会应用任何样式到目标元素。</li>
<li>forwards：在动画结束后（<strong>由 animation-iteration-count 决定</strong>），目标元素将保持应用<strong>最后帧</strong>动画。</li>
<li>backwards：在动画结束后（<strong>由 animation-iteration-count 决定</strong>），目标元素将保持应用<strong>起始帧</strong>动画。</li>
</ul>
<h3 id="animation-play-state：动画执行状态"><a href="#animation-play-state：动画执行状态" class="headerlink" title="animation-play-state：动画执行状态"></a>animation-play-state：动画执行状态</h3><p>设置动画的执行状态</p>
<p>可选值：</p>
<ul>
<li>running：允许</li>
<li>paused：暂停。动画将停止执行</li>
</ul>
<h3 id="多动画累加"><a href="#多动画累加" class="headerlink" title="多动画累加"></a>多动画累加</h3><p>若元素应用多个动画时，可以通过给animation属性分别不同值来分别控制各个动画的属性。各个值之间使用逗号<code>,</code>来分隔开。</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">animation-name</span><span class="token punctuation">:</span> bgcolor<span class="token punctuation">,</span> bodera<span class="token punctuation">,</span> rotat<span class="token punctuation">;</span>
<span class="token property">animation-duration</span><span class="token punctuation">:</span> 2s<span class="token punctuation">,</span> 2s<span class="token punctuation">,</span> 3s<span class="token punctuation">;</span>
<span class="token property">animation-iteration-count</span><span class="token punctuation">:</span> 2<span class="token punctuation">,</span> 2<span class="token punctuation">,</span> 1<span class="token punctuation">;</span>
<span class="token property">animation-direction</span><span class="token punctuation">:</span> reverse<span class="token punctuation">,</span> normal<span class="token punctuation">,</span> normal<span class="token punctuation">;</span>
<span class="token property">animation-fill-mode</span><span class="token punctuation">:</span> forwards<span class="token punctuation">,</span> forwards<span class="token punctuation">,</span> forwards<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>应用多个动画时，所有动画是并发执行的，因此<strong>计算动画结束事件只需要知道执行时间最长的动画</strong>即可，<strong>执行时间 x 单次执行时间=动画总时间</strong>。因此上述代码的最大时间=max(2x2,2x2,3x1=4s。</p>
<h2 id="animation用法示例"><a href="#animation用法示例" class="headerlink" title="animation用法示例"></a>animation用法示例</h2><p>播放时长为2秒的浮动动画的Vue代码示例如下：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">&lt;template>
  &lt;div :class="&#123; 'custom-animation': isAnimating &#125;">&lt;/div>
&lt;/template>

&lt;script>
export default</span> <span class="token punctuation">&#123;</span>
  <span class="token selector">data()</span> <span class="token punctuation">&#123;</span>
    <span class="token selector">return</span> <span class="token punctuation">&#123;</span>
      <span class="token property">isAnimating</span><span class="token punctuation">:</span> true<span class="token punctuation">,</span> // 根据需要设置是否启用动画
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
&lt;/script>

&lt;style>
<span class="token atrule"><span class="token rule">@keyframes</span> customAnimation</span> <span class="token punctuation">&#123;</span>
  <span class="token selector">0%, 100%</span> <span class="token punctuation">&#123;</span>
    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token selector">50%</span> <span class="token punctuation">&#123;</span>
    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-30px<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token selector">.custom-animation</span> <span class="token punctuation">&#123;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>
  <span class="token property">animation</span><span class="token punctuation">:</span> customAnimation 2s ease-in-out infinite<span class="token punctuation">;</span> <span class="token comment">/* 设置动画名称、时长、缓动函数和循环次数 */</span>
<span class="token punctuation">&#125;</span>
&lt;/style><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="常见错误及解决方案"><a href="#常见错误及解决方案" class="headerlink" title="常见错误及解决方案"></a>常见错误及解决方案</h2><h3 id="keyframes不能实现突变的状态变化"><a href="#keyframes不能实现突变的状态变化" class="headerlink" title="@keyframes不能实现突变的状态变化"></a><code>@keyframes</code>不能实现突变的状态变化</h3><p><code>@keyframes</code>是将样式从一个状态慢慢转变为另一个状态，因此不能实现突变的状态，例如：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">div</span> <span class="token punctuation">&#123;</span>
    <span class="token property">animation</span><span class="token punctuation">:</span> appear 2s<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token atrule"><span class="token rule">@keyframes</span> appear</span> <span class="token punctuation">&#123;</span>
    <span class="token selector">from</span> <span class="token punctuation">&#123;</span> <span class="token property">display</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token selector">to</span>   <span class="token punctuation">&#123;</span> <span class="token property">display</span><span class="token punctuation">:</span>block<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上述代码中<code>display:none;</code>是将div不占空间地隐藏，而<code>display:block;</code>是显示div并占用空间。这里从<code>display:none;</code>到<code>display:block;</code>的状态是突变的，因此<code>@keyframes</code>无法实现上述的状态变化</p>
<p><strong>替代方法：</strong></p>
<ul>
<li><p>占据空间的隐藏：使用visibility来代替display。</p>
  <pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">div</span> <span class="token punctuation">&#123;</span>
    <span class="token property">animation</span><span class="token punctuation">:</span> appear 2s<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token atrule"><span class="token rule">@keyframes</span> appear</span> <span class="token punctuation">&#123;</span>
    <span class="token selector">from</span> <span class="token punctuation">&#123;</span> 
        <span class="token property">opacity</span><span class="token punctuation">:</span>1<span class="token punctuation">;</span>
        <span class="token property">visibility</span><span class="token punctuation">:</span>visible<span class="token punctuation">;</span> 
    <span class="token punctuation">&#125;</span>
    <span class="token selector">to</span>   <span class="token punctuation">&#123;</span> 
        <span class="token property">opacity</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>
        <span class="token property">visibility</span><span class="token punctuation">:</span>hidden<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>不占据空间地隐藏：使用绝对定位+visibility组合，其中绝对定位使元素脱离文档流，搭配z-index层级关系来使他出现或消失。</p>
  <pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">div</span> <span class="token punctuation">&#123;</span>
    <span class="token property">position</span><span class="token punctuation">:</span>absolute<span class="token punctuation">;</span>
    <span class="token property">top</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>
    <span class="token property">left</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>
    <span class="token property">animation</span><span class="token punctuation">:</span> appear 2s<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token atrule"><span class="token rule">@keyframes</span> appear</span> <span class="token punctuation">&#123;</span>
    <span class="token selector">from</span> <span class="token punctuation">&#123;</span> 
        <span class="token property">opacity</span><span class="token punctuation">:</span>1<span class="token punctuation">;</span>
        <span class="token property">visibility</span><span class="token punctuation">:</span>visible<span class="token punctuation">;</span> 
        <span class="token property">z-index</span><span class="token punctuation">:</span>10<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">to</span>   <span class="token punctuation">&#123;</span> 
        <span class="token property">opacity</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>
        <span class="token property">visibility</span><span class="token punctuation">:</span>hidden<span class="token punctuation">;</span>
         <span class="token property">z-index</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>消失前占据空间但消失后不占空间：使用setTimeout和visibility组合。</p>
  <pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;
  &lt;div&gt;
    &lt;button @click&#x3D;&quot;hideElement&quot;&gt;隐藏元素&lt;&#x2F;button&gt;
    &lt;div :class&#x3D;&quot;&#123; &#39;fade-out&#39;: isVisible, &#39;hidden&#39;: !isVisible &#125;&quot;&gt;
      这是一个会消失的元素
    &lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
&lt;&#x2F;template&gt;

&lt;script&gt;
export default &#123;
  data() &#123;
    return &#123;
      isVisible: true,
    &#125;;
  &#125;,
  methods: &#123;
    hideElement() &#123;
      this.isVisible &#x3D; false;
      &#x2F;&#x2F; 使用 setTimeout 设置一定的延迟，确保元素在消失前渲染一段时间
      setTimeout(() &#x3D;&gt; &#123;
        this.isVisible &#x3D; true;
      &#125;, 500); &#x2F;&#x2F; 设置的时间可以根据需要调整
    &#125;,
  &#125;,
&#125;;
&lt;&#x2F;script&gt;

&lt;style&gt;
.fade-out &#123;
  visibility: visible;
  opacity: 1;
  transition: opacity 0.5s ease-in-out;
&#125;

.hidden &#123;
  visibility: hidden;
  opacity: 0;
&#125;
&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h3 id="keyframes会增添-覆盖属性"><a href="#keyframes会增添-覆盖属性" class="headerlink" title="@keyframes会增添/覆盖属性"></a><code>@keyframes</code>会增添/覆盖属性</h3><p>以下为覆盖属性的例子：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/*
* div 在2s内下移200px
*/</span>
<span class="token selector">div</span> <span class="token punctuation">&#123;</span>
    <span class="token property">position</span><span class="token punctuation">:</span>absolute<span class="token punctuation">;</span>
    <span class="token property">top</span><span class="token punctuation">:</span>0px<span class="token punctuation">;</span>
    <span class="token property">animation</span><span class="token punctuation">:</span> move 2s<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token atrule"><span class="token rule">@keyframes</span> move</span> <span class="token punctuation">&#123;</span>
    <span class="token selector">from</span> <span class="token punctuation">&#123;</span> <span class="token property">top</span><span class="token punctuation">:</span>20px<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token selector">to</span>   <span class="token punctuation">&#123;</span> <span class="token property">top</span><span class="token punctuation">:</span>200px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在例子里，div的初始状态是 <code>top:0px;</code>，在动画启动前，<code>@keyframes</code>先用<code>top:20px;</code>覆盖原属性，然后再开始播放动画</p>
]]></content>
      <categories>
        <category>CSS3</category>
        <category>大屏设计</category>
      </categories>
      <tags>
        <tag>CSS3</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 7之关于网络管理的那些知识</title>
    <url>/2022/11/16/CentOS%207%E4%B9%8B%E5%85%B3%E4%BA%8E%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E7%9A%84%E9%82%A3%E4%BA%9B%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h1 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h1><h2 id="Linux常见目录"><a href="#Linux常见目录" class="headerlink" title="Linux常见目录"></a>Linux常见目录</h2><div class="table-container">
<table>
<thead>
<tr>
<th>目录参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>/</td>
<td>根目录，文件的最顶端，/etc、/bin、/dev、/lib、/sbin应和根目录放置在一个分区中，而类似/usr/local可以单独位于另一个分区</td>
</tr>
<tr>
<td>/bin</td>
<td>存放系统所需的重要命令，如文件或目录操作的命令ls、cp、mkdir等。/usr/bin也存放了一些系统命令，这些命令对于的文件都是可执行的，普通用户可以使用大部分的命令</td>
</tr>
<tr>
<td>/boot</td>
<td>存放Linux启动时内核及引导系统程序所需要的核心文件，内核文件和grub系统引导管理器都位于此目录</td>
</tr>
<tr>
<td>/dev</td>
<td>存放Linux系统下的设备文件，如光驱、磁盘等。访问该目录下的文件相当于访问某个硬件设备，常用于挂载光驱</td>
</tr>
<tr>
<td>/etc</td>
<td>存放系统的配置文件，作为一些软件启动时默认配置文件读取的目录，如/etc/fstab存放系统分区信息</td>
</tr>
<tr>
<td>/home</td>
<td>系统默认的用户主目录。若添加用户时不指定用户的主目录，默认在/home下创建与用户名同名的文件夹。代码中可以用HOME环境变量表示当前用户的主目录</td>
</tr>
<tr>
<td>/lib</td>
<td>64位系统有/lib64文件夹，主要存放动态链接库，类似的目录还有/usr/lib、/usr/local/lib等</td>
</tr>
<tr>
<td>/lost+found</td>
<td>存放一些当系统意外崩溃或机器意外关机时产生的文件碎片</td>
</tr>
<tr>
<td>/mnt</td>
<td>存放挂载储存设备的挂载目录，如光驱等</td>
</tr>
<tr>
<td>/proc</td>
<td>存放操作系统运行时的运行信息，如进程信息、内核信息、网络信息等。此目录的内容存在于内存中，实际不占用磁盘空间。如/etc/cpuinfo存放CPU相关信息</td>
</tr>
<tr>
<td>/root</td>
<td>Linux超级权限用户root的主目录</td>
</tr>
<tr>
<td>/sbin</td>
<td>存放一些系统管理的命令，一般只能由超级权限用户root执行。大多数命令普通用户一般无权执行，如/sbin/ifconfig，普通用户使用绝对路径也可执行，用于查看当前系统网络配置，如/usr/sbin、/usr/local/sbin</td>
</tr>
<tr>
<td>/tmp</td>
<td>临时文件目录，任何人都可以访问。系统软件或用户运行程序时产生的临时文件存放到这里。此目录数据需要定期清除，重要数据不能放在该目录下，其目录空间也不能过小</td>
</tr>
<tr>
<td>/usr:</td>
<td>应用程序存放目录，如命令、帮助文件等。安装Linux软件包时默认安装到/usr/local目录下，如/usr/share/fonts存放系统字体，/usr/share/man存放帮助文档，/usr/include存放软件的头文件等。建议将/usr/local目录单独分区并设置较大的磁盘空间</td>
</tr>
<tr>
<td>/var</td>
<td>/var/log存放系统日志，/var/lib存放系统库文件。目录内容会经常变动</td>
</tr>
<tr>
<td>/sys</td>
<td>与/proc类似，是一个虚拟的文件系统，主要记录与系统核心相关的信息，如系统已经载入的模块信息等，该目录实际不占硬盘容量</td>
</tr>
</tbody>
</table>
</div>
<h2 id="网络管理协议"><a href="#网络管理协议" class="headerlink" title="网络管理协议"></a>网络管理协议</h2><h3 id="TCP-IP协议"><a href="#TCP-IP协议" class="headerlink" title="TCP/IP协议"></a>TCP/IP协议</h3><h4 id="TCP-IP协议体系"><a href="#TCP-IP协议体系" class="headerlink" title="TCP/IP协议体系"></a>TCP/IP协议体系</h4><p>TCP/IP协议主要包含传输控制协议（TCP）和网际协议（IP）。</p>
<p>TCP/IP体系是一种分层结构，由基于硬件层次上的4个概念层次构成，从上往下看，即为应用层、传输层、网际互联层和网络接口层。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>TCP/IP层次</th>
<th>功能及作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>应用层</td>
<td>为用户提供所需要的各自应用服务，如FTP、Telnet、DNS、SMTP等</td>
</tr>
<tr>
<td>传输层</td>
<td>为应用层提供端到端的通信功能，同时提供流量控制，确保数据完整和正确。TCP协议位于该层，提供一种可靠的、面向连接的数据传输服务，对之对应的是UDP协议，提供不可靠的、无连接的数据报传输服务</td>
</tr>
<tr>
<td>网际互联层</td>
<td>解决主机到主机之间的通信问题。其主要协议有：网际协议（IP）、地址解析协议（ARP）、反向地址解析协议（RARP）和互联网控制报文协议（ICMP）</td>
</tr>
<tr>
<td>网络接口层</td>
<td>为上层提供服务，完成链路控制等功能</td>
</tr>
</tbody>
</table>
</div>
<h4 id="包（packet）"><a href="#包（packet）" class="headerlink" title="包（packet）"></a>包（packet）</h4><p>包（packet）是网络上传输的数据片段，也称为分组或IP数据报。用户数据按照规定划分为大小适中的若干组，每个组加上包头构成一个包，该过程便称为封装。网络上使用包为单位进行数据传输。</p>
<p>包是一种统称，在不同的层次，包有不同的名字。如TCP/IP中称作帧，而IP层称之为IP数据报，TCP层称之为TCP报文等。</p>
<h4 id="网络字节顺序"><a href="#网络字节顺序" class="headerlink" title="网络字节顺序"></a>网络字节顺序</h4><p>TCP/IP协议定义了一种所有机器在互联网分组的二进制字段中必须使用的网络标准字节顺序，与之对应的是主机字节顺序，主机字节顺序和各个主机密切相关。</p>
<p>传输时需遵循以下转换规则：<strong>主机字节顺序→网络字节顺序→主机字节顺序</strong>。</p>
<p>即发送方将主机字节顺序的整数转换为网络字节顺序后发送出去，接收方收到数据后将网络字节顺序的整数转换为自己的主机字节顺序，然后再进行处理。</p>
<h4 id="地址解析协议（ARP）"><a href="#地址解析协议（ARP）" class="headerlink" title="地址解析协议（ARP）"></a>地址解析协议（ARP）</h4><p>TCP/IP网络使用IP地址进行寻址，IP包在IP层实现路由选择，但IP包在网络接口层的传输却需要知道设备的物理地址，此时便需要一种IP地址到物理地址的转换协议ARP。</p>
<p>ARP协议是一种在以太网这种有广播能力的网络中解决地址转换问题的方法，该方法允许在不重新编译代码、不需维护一个集中式数据库的情况下，在网络中动态增加新机器。</p>
<p>其原理为：当主机A想转换某一IP地址时，通过向网络中广播一个专门的报文分组，要求具有该IP地址的机器以其物理地址做出应答。所有主机都将收到这个请求，但只有符合条件的主机才辨认该IP地址，同时发回一个包括其物理地址的应答。主机A收到应答时便知道该IP地址对应的物理地址，并使用这个地址将数据分组发过去。</p>
<h3 id="UDP协议"><a href="#UDP协议" class="headerlink" title="UDP协议"></a>UDP协议</h3><p>UDP是一种无连接的传输层协议，主要用于不要求分组顺序到达的传输中。其优点为资源消耗小、处理速度快。由于其不提供数据包分组、组装和不能对数据包进行排序的缺点，当报文发送后，无法得知其是否安全完整到达的，因此UDP协议丢包会比较严重。</p>
<h3 id="ICMP协议"><a href="#ICMP协议" class="headerlink" title="ICMP协议"></a>ICMP协议</h3><p>ICMP协议是Internet控制报文协议，属于TCP/IP协议族的一个子协议，用于在IP主机、路由器之间传递控制信息。控制信息是指网络是否通畅、主机是否可达、路由是否可用等网络本身的信息，<strong>其唯一的功能是报告问题</strong>，而不是纠正错误，纠错的任务由发送方完成。</p>
<h1 id="网络管理命令"><a href="#网络管理命令" class="headerlink" title="网络管理命令"></a>网络管理命令</h1><h2 id="Ping：检查网络连接速度及网络是否通畅"><a href="#Ping：检查网络连接速度及网络是否通畅" class="headerlink" title="Ping：检查网络连接速度及网络是否通畅"></a>Ping：检查网络连接速度及网络是否通畅</h2><p>ping常用于测试与目标主机或域名是否可达。ping的结果通常是可信的（部分服务器设置了禁止ping的除外）</p>
<p>ping命令不会自动终止，需要按”ctrl+c”终止，或是用参数”<code>-c</code>“指定要求完成的回应次数。</p>
<p>在CenOS 7中，ping的常用命令如下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#ping目的ip地址如192.168.3.100
ping 192.168.3.100

#ping外网域名如www.baidu.com
ping www.baidu.com

#ping目的ip地址n次，下面命令中的n为次数
ping -c n 192.168.3.100

#以0.01s的时间间隔来ping目的ip地址3次，下面命令中的0.01为指定的时间间隔0.01秒
ping -c 3 -i 0.01 192.168.3.100<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="ifconfig-配置网络或显示当前网络接口状态"><a href="#ifconfig-配置网络或显示当前网络接口状态" class="headerlink" title="ifconfig:配置网络或显示当前网络接口状态"></a>ifconfig:配置网络或显示当前网络接口状态</h2><p>ifonfig命令可以用于查看、配置、启用或禁用指定网络接口，如配置网卡的IP地址、掩码、广播地址、网关等。</p>
<p>在CenOS 7中，查看网卡基本信息：</p>
<p><img src="/2022/11/16/CentOS%207%E4%B9%8B%E5%85%B3%E4%BA%8E%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E7%9A%84%E9%82%A3%E4%BA%9B%E7%9F%A5%E8%AF%86/1.png" alt></p>
<p>查看指定网络接口ens33的信息：</p>
<p><img src="/2022/11/16/CentOS%207%E4%B9%8B%E5%85%B3%E4%BA%8E%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E7%9A%84%E9%82%A3%E4%BA%9B%E7%9F%A5%E8%AF%86/2.png" alt></p>
<p>其中：</p>
<ul>
<li><p>第一行：UP表示该网络接口为启用状态。RUNNING表示网卡设备已连接，MULTICAST表示组播，mtu为数据包最大传输单元</p>
</li>
<li><p>第二行：网卡IP、子网掩码、广播地址</p>
</li>
<li>第三行：IPv6地址</li>
<li>第四行：ether为网卡的MAC地址，Ethernet表示连接类型</li>
<li>第五行：接收数据包个数、大小统计信息</li>
<li>第六行：异常接收数据包的数量，如丢包量、错误等</li>
<li>第七行：发送数据包个数、大小统计信息</li>
<li>第八行：产生错误数据包的数量，如丢包量，错误等</li>
</ul>
<p>ifconfig的常用命令如下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#关闭ens33网卡
ifconfig ens33 down

#开启ens33网卡
ifconfig ens33 up

#配置ip地址
ifconfig ens33:1 192.168.100.100

#配置ip地址和子网掩码
ifconfig ens33:1 192.168.100.100 netmask 255.255.255.0

#配置ip地址、子网掩码和广播地址
ifconfig ens33:1 192.168.100.100 netmask 255.255.255.0 broadcast 192.168.1.255

#删除ip地址
ifconfig ens33 del 192.168.1.100

#启用arp协议
ifconfig ens33 arp

#禁用arp协议
ifconfig ens33 -arp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="route：显示添加或修改路由表"><a href="#route：显示添加或修改路由表" class="headerlink" title="route：显示添加或修改路由表"></a>route：显示添加或修改路由表</h2><p>route命令用于查看或编辑计算机的IP路由表。</p>
<p>route的常用命令如下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#显示所有路由表
route -n
#添加一条路由：发往192.168.60.0网段的全部要经过网关192.168.19.1
route add -net 192.168.18.0 netmask 255.255.255.0 gw 192.168.18.2
#删除一条路由：删除时不需要网关
route del -net 192.168.18.0 netmask 255.255.255.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="scp：Linux系统之间复制文件和目录"><a href="#scp：Linux系统之间复制文件和目录" class="headerlink" title="scp：Linux系统之间复制文件和目录"></a>scp：Linux系统之间复制文件和目录</h2><p>scp可以将本地文件传送到远程主机或从远程主机拉取文件到本地。注意由于各发行版本不同，scp语法也不同。</p>
<p>scp使用方法如下所示：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#将本地&#x2F;root&#x2F;lk目录下所有文件传输到远程主机192.168.3.100的&#x2F;home&#x2F;lk&#x2F;cpfile目录下：
scp -r &#x2F;root&#x2F;lk root@192.168.3.100:&#x2F;home&#x2F;lk&#x2F;cpfile

#将远程主机192.168.3.100的&#x2F;home&#x2F;lk&#x2F;目录下所有文件全部复制到本地的&#x2F;root目录下：
scp -r root@192.168.3.100:&#x2F;home&#x2F;lk &#x2F;root

#使用端口号4588将本地文件test.py传送至远程主机198.168.3.100的&#x2F;usr目录下：
scp -P 4588 test.py root@192.168.3.100:&#x2F;usr

#使用端口号4588将远程主机198.168.3.100的&#x2F;etc&#x2F;1.txt文件复制到本地的&#x2F;root目录下：
scp -P 4588 root@192.168.3.100:&#x2F;etc&#x2F;1.txt &#x2F;root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="rsync：数据镜像备份工具"><a href="#rsync：数据镜像备份工具" class="headerlink" title="rsync：数据镜像备份工具"></a>rsync：数据镜像备份工具</h2><p>rsync是Linux系统下常用的数据镜像备份工具，用于在不同的主机之间同步文件。除了单个文件外，rsync还可以保存整个目录树和文件系统，可以增量同步，并保持文件原来的属性，数据传输过程是加密的，保证数据的安全。</p>
<p><strong>rsync不仅可以远程同步数据，还可以本地同步数据</strong>。与cp或scp不同的是，<strong>使用rsync备份数据时不会直接覆盖已经存在的数据</strong>，而是先判断已经存在的数据和新数据的差异，只有数据不同时才会把不相同的部分覆盖。</p>
<p>rsync使用方法如下所示：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#将本地&#x2F;etc&#x2F;passwd文件同步到本地的&#x2F;tmp&#x2F;目录下，并改名为1.txt
rsync -av &#x2F;etc&#x2F;passwd &#x2F;tmp&#x2F;1.txt

#将本地&#x2F;etc&#x2F;passwd文件备份到远程主机192.168.3.100的&#x2F;tmp&#x2F;目录下，并改名为1.txt
rsync -av &#x2F;etc&#x2F;passwd 192.168.3.100:&#x2F;tmp&#x2F;1.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="netstat：显示网络连接、路由表或接口状态"><a href="#netstat：显示网络连接、路由表或接口状态" class="headerlink" title="netstat：显示网络连接、路由表或接口状态"></a>netstat：显示网络连接、路由表或接口状态</h2><p>netstat命令用于监控系统网络配置和工作状况，可以显示内核路由表、活动的网络状态以及每个网络接口有用的统计数字。</p>
<p>netstat的常用命令如下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#显示所有端口，包含UDP和TCP端口
netstat -a|head -4
#显示所有TCP端口
netstat -at
#显示所有UDP端口
netstat -au
#显示所有处于监听状态的端口并以数字方式显示而非服务名
netstat -ln
#显示所有TCP端口并显示对应的进程名称或进程号
netstat -plnt
#显示核心路由信息
netstat -r
#显示网络接口列表
netstat -i
#统计各个TCP连接的各个状态对应的数量
netstat -plinta|sed &#39;1,2d&#39;|awk &#39;&#123;print $6&#125;&#39;|sort|uniq -c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="traceroute：探测至目的地址的路由信息"><a href="#traceroute：探测至目的地址的路由信息" class="headerlink" title="traceroute：探测至目的地址的路由信息"></a>traceroute：探测至目的地址的路由信息</h2><p>traceroute跟踪数据包到达网络主机所经过的路由，其原理是试图以最小的TTL发出探测包来跟踪数据包到达目标主机所经过的网关，然后监听一个来自网关ICMP的应答。</p>
<p>traceroute的常用命令如下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#先检查主机与www.baidu.com之间的网络是否通畅
ping www.baidu.com
#显示本地主机到www.baidu.com所经过的路由信息
traceroute -n www.baidu.com
#运行结果的每行记录对应一跳，每跳表示一个网关，最大30跳。每行有3个时间，单位是ms。星号则表示ICMP信息没有返回<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="telnet：测试、登录或控制远程主机"><a href="#telnet：测试、登录或控制远程主机" class="headerlink" title="telnet：测试、登录或控制远程主机"></a>telnet：测试、登录或控制远程主机</h2><p>telnet通常用来远程登录。在客户端使用telnet在程序中输入命令，可以在本地控制服务器。由于telnet采用明文传送报文，安全性较差。telnet可以确定远程服务端口的状态，以便确认服务是否正常。</p>
<p>telnet常用命令如下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#检查198.168.3.100对应的56789端口服务是否正常
telnet 198.168.3.100 56789
#检查www.pjp.net对应的80端口服务是否正常
telnet www.php.net 80<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="wget：下载网络文件"><a href="#wget：下载网络文件" class="headerlink" title="wget：下载网络文件"></a>wget：下载网络文件</h2><p>wget可以断点续传，同时支持FTP或HTTP协议下载，并可以设置代理服务器。</p>
<p>wgett常用命令如下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#下载文件http:&#x2F;&#x2F;ftp.gnu.org&#x2F;gnu&#x2F;wget&#x2F;wget-1.14.tar.gz
wget http:&#x2F;&#x2F;ftp.gnu.org&#x2F;gnu&#x2F;wget&#x2F;wget-1.14.tar.gz
#断点续传
wget -c http:&#x2F;&#x2F;ftp.gnu.org&#x2F;gnu&#x2F;wget&#x2F;wget-1.14.tar.gz
#批量下载，其中download.txt文件里是一系列网址
wget -i download.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="Linux网络配置"><a href="#Linux网络配置" class="headerlink" title="Linux网络配置"></a>Linux网络配置</h1><p>与Linux网络配置相关的文件主要有以下这些：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>目录</th>
<th>功能及作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>/etc/hostname</td>
<td>主要用于修改主机名称</td>
</tr>
<tr>
<td>/etc/sysconfig/network-scrips/ifcfg-enoN</td>
<td>设置网卡参数的文件，如IP地址、子网掩码、广播地址、网关等，N为一串数字</td>
</tr>
<tr>
<td>/etc/resolv.conf</td>
<td>设置DNS相关的信息，用于将域名解析到IP</td>
</tr>
<tr>
<td>/etc/hosts</td>
<td>计算机IP对应的主机名称或域名对应的IP地址</td>
</tr>
<tr>
<td>/etc/nsswitch.conf</td>
<td>规定通过哪些途径、按照什么顺序通过这些途径来查找特定类型的信息。通过修改选项可以选择是DNS解析优先还是本地设置优先</td>
</tr>
</tbody>
</table>
</div>
<h2 id="配置Linux系统的IP地址"><a href="#配置Linux系统的IP地址" class="headerlink" title="配置Linux系统的IP地址"></a>配置Linux系统的IP地址</h2><p>可以通过终端命令直接设置主机的IP地址，如想设置在系统重启后依然生效，可以通过设置对应的网络端口文件。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">oot@localhost admin]# cat &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens33

TYPE&#x3D;&quot;Ethernet&quot;  #设备连接类型，此处为以太网
PROXY_METHOD&#x3D;&quot;none&quot;  
BROWSER_ONLY&#x3D;&quot;no&quot;
BOOTPROTO&#x3D;&quot;dhcp&quot;  #使用动态IP
DEFROUTE&#x3D;&quot;yes&quot;  #是否为默认路由
IPV4_FAILURE_FATAL&#x3D;&quot;no&quot;
IPV6INIT&#x3D;&quot;yes&quot;
IPV6_AUTOCONF&#x3D;&quot;yes&quot;
IPV6_DEFROUTE&#x3D;&quot;yes&quot;
IPV6_FAILURE_FATAL&#x3D;&quot;no&quot;
IPV6_ADDR_GEN_MODE&#x3D;&quot;stable-privacy&quot;
NAME&#x3D;&quot;ens33&quot;
UUID&#x3D;&quot;cc581056-9262-44ab-877f-645d0b306352&quot;
DEVICE&#x3D;&quot;ens33&quot;
ONBOOT&#x3D;&quot;yes&quot;  #系统启动时是否设置此网络接口
 
#可以使用命令
vim &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens33
#将BOOTPROTO&#x3D;&quot;dhcp&quot; 修改为BOOTPROTO&#x3D;none 后，增加以下字段。按i键即可输入，输入完成后按下Esc键，输入冒号：和wq将更改保存后退出

IPADDR0&#x3D;设定的ip地址
PREFIX0&#x3D;设定的子网掩码
GATEWAT0&#x3D;设定的网关
DNS1&#x3D;DNS服务器地址1
DNS2&#x3D;DNS服务器地址2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>设置完接口文件后，需要重启网络服务才能生效，重启后使用ifconfig查看设置是否生效：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">service network restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>同一个网络接口可以使用子接口的方式设置多个IP地址：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#配置网络接口ens33子接口1的ip地址和子网掩码
ifconfig ens33:1 192.168.100.100 netmask 255.255.255.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>当服务器重启或网络服务重启后，子接口的配置将消失。若需要重启后仍生效，可以将配置子接口命令加入/etc/rc.local文件中。</p>
<h2 id="使用hostname设置主机名"><a href="#使用hostname设置主机名" class="headerlink" title="使用hostname设置主机名"></a>使用hostname设置主机名</h2><p>主机名是识别某个计算机在网络中的标识。在单机情况下，主机名可任意设置。执行以下命令修改主机名，重新登录后可以发现主机名已改变。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hostname mycomputername<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>如要修改重启后依然生效，可以将主机名写入文件/etc/hostname中。</p>
<h2 id="设置默认网关"><a href="#设置默认网关" class="headerlink" title="设置默认网关"></a>设置默认网关</h2><p>设置好IP地址后，若要访问其他的子网或Internet，用户还需要设置路由，这里采用设置默认网关的方法来设置路由。</p>
<p>在Linux中，设置默认网关有两种方法：</p>
<ul>
<li><p>第一种是直接使用route命令。在设置默认网关之前，先用<code>route -n</code> 命令查看路由表，而后执行下面命令设置网关：</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">route add default gw 192.168.10.254<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  若不想每次开机都执行route命令，则应把要执行的命令写入/etc/rc.d/re.local文件中。</p>
</li>
<li><p>第二种是在/ect/sysconfig/network-scripts/ifcfg-接口文件中添加如下字段：</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">GATEWAY&#x3D;192.168.10.254<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  然后重启网络服务来使设置生效。</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">service network restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
</ul>
<h2 id="设置DNS服务器"><a href="#设置DNS服务器" class="headerlink" title="设置DNS服务器"></a>设置DNS服务器</h2><p>设置DNS服务器只需修改/etc/resolv.conf文件即可：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@localhost admin]# cat &#x2F;etc&#x2F;resolv.conf

# Generated by NetworkManager
search localdomain
nameserver 192.168.18.2  #第一名字服务器

#如需添加DNS服务器，直接在下面添加nameserver即可，注意nameserver指定的DNS服务器只有前三条生效
#resolv.conf文件还有其他参数如下：
option rotate  #在这DNS server之间轮询
option timeout:1  #表示解析超时时间1s（默认为5s）
attempts:2  #表示解析域名尝试的次数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="FTP服务器"><a href="#FTP服务器" class="headerlink" title="FTP服务器"></a>FTP服务器</h1><h2 id="FTP服务概述"><a href="#FTP服务概述" class="headerlink" title="FTP服务概述"></a>FTP服务概述</h2><p>FTP文件共享基于TCP/IP协议，是一种通用性比较强的网络文件共享方式。FTP是仅基于TCP的服务，不支持UDP。FTP使用两个端口，一个数据端口和一个命令端口（控制端口）。通常这两个端口是21（命令端口）和20（数据端口）。由于FTP工作方式的不同，数据端口并不总是20，分为主动FTP和被动FTP。</p>
<ul>
<li><p>主动FTP</p>
<ul>
<li>主动模式是从服务器向客户端发起连接。主动模式下，服务端开启的是20和21端口，客户端开启的是1024以上的端口</li>
</ul>
</li>
<li><p>被动FTP</p>
<ul>
<li>被动模式是客户端向服务端发起连接。被动模式下，服务端开启的是21命令端口和大于1024的数据连接端口，客户端开启的是大于1024的两个端口</li>
</ul>
</li>
</ul>
<p>两者的共同点是都使用21端口进行用户验证及管理，差别在于传送数据的方式不同。</p>
<h2 id="vsftp的安装与配置"><a href="#vsftp的安装与配置" class="headerlink" title="vsftp的安装与配置"></a>vsftp的安装与配置</h2><p>在Linux系统下，vsftp是一款应用比较广泛的FTP软件，其特点是小巧轻快、安全易用。</p>
<h3 id="vsftp安装"><a href="#vsftp安装" class="headerlink" title="vsftp安装"></a>vsftp安装</h3><p>使用yum工具安装vsftp：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#使用yum工具下载vsftp
yum install -y vsftpd
#使用rpm安装vsftp
rpm -qa|grep vsftp
#安装依赖的库文件
yum install -y libcap libcap-devel<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="匿名FTP设置"><a href="#匿名FTP设置" class="headerlink" title="匿名FTP设置"></a>匿名FTP设置</h3><p>这种运行匿名用户访问并上传文件，配置文件路径一般为<code>/etc/vsftpd.conf</code>，若是使用rpm包安装，则配置文件位于<code>/etc/vsftpd/vsftpd.conf</code>。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#将默认目录赋予用户ftp权限以便可以上传文件
[root@localhost admin]# chown -R ftp.users &#x2F;var&#x2F;ftp&#x2F;pub&#x2F;
#取消配置文件中的注释并显示有效行
[root@localhost admin]# grep -v ^# &#x2F;etc&#x2F;vsftpd&#x2F;vsftpd.conf
anonymous_enable&#x3D;YES  #允许匿名用户登录和上传
local_enable&#x3D;YES  
write_enable&#x3D;YES  #允许写
local_umask&#x3D;022  
dirmessage_enable&#x3D;YES
xferlog_enable&#x3D;YES
connect_from_port_20&#x3D;YES
xferlog_std_format&#x3D;YES
listen&#x3D;NO #是否允许在监听
listen_ipv6&#x3D;YES #是否允许IPv6上的监听

pam_service_name&#x3D;vsftpd
userlist_enable&#x3D;YES
tcp_wrappers&#x3D;YES

#配置文件使用vim &#x2F;etc&#x2F;vsftpd&#x2F;vsftpd.conf修改为如下：
anonymous_enable&#x3D;YES
local_enable&#x3D;YES
write_enable&#x3D;YES
local_umask&#x3D;022
anon_upload_enable&#x3D;YES
dirmessage_enable&#x3D;YES
xferlog_enable&#x3D;YES
connect_from_port_20&#x3D;YES
xferlog_std_format&#x3D;YES
listen&#x3D;YES
listen_ipv6&#x3D;NO

pam_service_name&#x3D;vsftpd
userlist_enable&#x3D;YES
tcp_wrappers&#x3D;YES<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="启动FTP服务"><a href="#启动FTP服务" class="headerlink" title="启动FTP服务"></a>启动FTP服务</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#启动vsftpd
[root@localhost admin]# systemctl start vsftpd
#检查是否启动成功，默认配置文件位于&#x2F;etc&#x2F;vsftpd&#x2F;vsftpd.conf
[root@localhost admin]# ps -ef|grep vsftp
root      60170      1  0 00:55 ?        00:00:00 &#x2F;usr&#x2F;sbin&#x2F;vsftpd &#x2F;etc&#x2F;vsftpd&#x2F;vsftpd.conf
root      60223  54792  0 00:56 pts&#x2F;0    00:00:00 grep --color&#x3D;auto vsftp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="匿名用户登录测试"><a href="#匿名用户登录测试" class="headerlink" title="匿名用户登录测试"></a>匿名用户登录测试</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#登录ftp
[root@localhost admin]# ftp 192.168.18.128 21
Connected to 192.168.18.128 (192.168.18.128).
220 (vsFTPd 3.0.2)
#输入匿名用户名
Name (192.168.18.128:root): anonymous
331 Please specify the password.
#密码为空
Password:
#登录成功
230 Login successful.
Remote system type is UNIX.
Using binary mode to transfer files.
ftp&gt; 
#切换目录
ftp&gt; cd pub
250 Directory successfully changed.

#查看当前目录下的文件
ftp&gt; !ls -l
总用量 3048
drwxr-xr-x. 2 admin admin       6 10月 12 05:13 Desktop
drwxr-xr-x. 2 admin admin      19 11月 16 01:18 Documents
drwxr-xr-x. 2 admin admin       6 10月 12 05:13 Downloads
drwxr-xr-x. 2 admin admin       6 10月 12 05:13 Music
drwxr-xr-x. 2 admin admin       6 10月 12 05:13 Pictures
drwxr-xr-x. 2 admin admin       6 10月 12 05:13 Public
drwxr-xr-x. 2 admin admin       6 10月 12 05:13 Templates
drwxr-xr-x. 2 admin admin       6 10月 12 05:13 Videos
-rw-r--r--. 1 root  root  3118130 8月   5 2012 wget-1.14.tar.gz
#上传文件测试
ftp&gt; put wget-1.14.tar.gz
local: wget-1.14.tar.gz remote: wget-1.14.tar.gz
227 Entering Passive Mode (192,168,18,128,72,253).
553 Could not create file.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上述上传文件时，遇到了553 Could not create file错误。解决方式如下：</p>
<ul>
<li><p>输入quit退出vsftpd，在ftp的目录创建一个目录，然后设置权限为777：</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@localhost admin]# mkdir &#x2F;var&#x2F;ftp&#x2F;write
[root@localhost admin]# chmod -R 777 &#x2F;var&#x2F;ftp&#x2F;write
[root@localhost admin]# vim &#x2F;etc&#x2F;vsftpd&#x2F;vsftpd.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>然后修改位于/etc/vsftpd/vsftpd.conf的配置文件，在文件最后加上以下代码：</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">local_root&#x3D;&#x2F;var&#x2F;ftp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>杀死vsftpd进程，然后重启vsftpd服务器程序：</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#杀死vsftpd进程
[root@localhost admin]# pkill vsftpd
#查看是否还有vsftpd进程
[root@localhost admin]# pgrep vsftpd
#启动vsftpd服务器
[root@localhost admin]# &#x2F;usr&#x2F;sbin&#x2F;vsftpd &amp;
[1] 61422
#查看是否有vsftpd进程
[root@localhost admin]# pgrep vsftpd
61418<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>然后再试试登录ftp上传文件：</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#上传文件测试
ftp&gt; put wget-1.14.tar.gz
local: wget-1.14.tar.gz remote: wget-1.14.tar.gz
227 Entering Passive Mode (192,168,18,128,122,212).
150 Ok to send data.
226 Transfer complete.
3118130 bytes sent in 0.00845 secs (368834.88 Kbytes&#x2F;sec)
#上传文件成功退出ftp
ftp&gt; quit
221 Goodbye.
#查看上传后的文件信息，文件属于ftp用户
[root@localhost admin]# ll &#x2F;var&#x2F;ftp&#x2F;pub&#x2F;
总用量 3048
-rw-------. 1 ftp ftp 3118130 11月 16 01:29 wget-1.14.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h3 id="实名FTP设置"><a href="#实名FTP设置" class="headerlink" title="实名FTP设置"></a>实名FTP设置</h3><p>除了配置匿名FTP服务外，vsftp还可以配置实名FTP服务器，以便实现更精确的权限控制。</p>
<p>实名需要的用户认证信息位于/etc/vsftpd/目录下，用户启动时可以单独指定其他的配置文件。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#配置文件使用vim &#x2F;etc&#x2F;vsftpd&#x2F;vsftpd.conf修改为如下：
[root@localhost admin]# grep -v ^# &#x2F;etc&#x2F;vsftpd&#x2F;vsftpd.conf
anonymous_enable&#x3D;NO  #禁止匿名用户登录
local_enable&#x3D;YES    #允许本地用户访问，默认为YES
write_enable&#x3D;YES  #允许写入
local_umask&#x3D;022  #上传后的文件默认的权限掩码
anon_upload_enable&#x3D;NO  #匿名用户上传权限 
anon_mkdir_write_enable&#x3D;NO  #匿名用户创建目录的同时上传文件
anon_other_write_enable&#x3D;NO  #匿名用户删除权限
chroot_local_user&#x3D;YES #禁止本地用户离开自己的ftp主目录
chroot_list_enable&#x3D;NO   #禁止ftp用户离开自己的ftp主目录
chroot_list_file&#x3D;&#x2F;etc&#x2F;vsftpd.chroot_list  #虚拟用户列表，每行一个用户名
listen&#x3D;YES
listen_address&#x3D;192.168.18.128  #绑定本机ip

pam_service_name&#x3D;vsftpd.vu  #验证方式
local_root&#x3D;&#x2F;var&#x2F;ftp  #

guest_enable&#x3D;YES  #开启虚拟用户功能
guest_username&#x3D;ftp  #虚拟用户的宿主目录
virtual_use_local_privs&#x3D;YES  #用户登录后操作主目录和本地用户具有同样的权限
user_config_dir&#x3D;&#x2F;etc&#x2F;vsftpd&#x2F;vconf  #虚拟用户主目录设置文件

#新建&#x2F;etc&#x2F;vsftpd.chroot_list文件
[root@localhost admin]# touch &#x2F;etc&#x2F;vsftpd.chroot_list
#编辑&#x2F;etc&#x2F;vsftpd.chroot_list如下，每行一个用户名
[root@localhost admin]# vim &#x2F;etc&#x2F;vsftpd.chroot_list
[root@localhost admin]# cat &#x2F;etc&#x2F;vsftpd.chroot_list
user1
user2

#增加用户并指定主目录
[root@localhost admin]# mkdir &#x2F;data
[root@localhost admin]# mkdir &#x2F;data&#x2F;user1
[root@localhost admin]# mkdir &#x2F;data&#x2F;user2
[root@localhost admin]# chmod -R 775 &#x2F;data&#x2F;user1 &#x2F;data&#x2F;user2

#设置用户名密码数据库
[root@localhost admin]# echo -e &quot;user1\npass1\nuser2\npass2&quot;&gt;&#x2F;etc&#x2F;vsftpd&#x2F;vusers.list
[root@localhost admin]# cd &#x2F;etc&#x2F;vsftpd
[root@localhost vsftpd]# db_load -T -t hash -f vusers.list vusers.db
[root@localhost vsftpd]# chmod 600 vusers.*
#指定认证方式
[root@localhost vsftpd]# echo -e &quot;#%PAM-1.0\n\nauth required pam_userdb.so db&#x3D;&#x2F;etc&#x2F;vsftpd&#x2F;vusers\naccount required pam_userdb.so db&#x3D;&#x2F;etc&#x2F;vsftpd&#x2F;vusers&quot;&gt;&#x2F;etc&#x2F;pam.d&#x2F;vsftpd.vu
[root@localhost vsftpd]# mkdir -p &#x2F;etc&#x2F;vsftpd&#x2F;vconf
[root@localhost vsftpd]# cd &#x2F;etc&#x2F;vsftpd&#x2F;vconf
[root@localhost vconf]# ls
[root@localhost vconf]# touch user1
[root@localhost vconf]# touch user2
[root@localhost vconf]# ls
user1  user2

#编辑用户的用户名文件，指定主目录
[root@localhost vconf]# vim user1
[root@localhost vconf]# cat user1
local_root&#x3D;&#x2F;data&#x2F;user1
[root@localhost vconf]# vim user2
[root@localhost vconf]# cat user2
local_root&#x3D;&#x2F;data&#x2F;user2
#创建标识文件
[root@localhost vconf]# touch &#x2F;data&#x2F;user1&#x2F;user1
[root@localhost vconf]# touch &#x2F;data&#x2F;user2&#x2F;user2

#若连接ftp显示连接被拒绝，重启vsftpd服务后即可解决
[root@localhost vconf]# ftp 192.168.18.128 21
Connected to 192.168.18.128 (192.168.18.128).
220 (vsFTPd 3.0.2)
#输入用户名user1
Name (192.168.18.128:root): user1
331 Please specify the password.
#密码为之前设置的pass1
Password:
230 Login successful.
Remote system type is UNIX.
Using binary mode to transfer files.
#查看文件
ftp&gt; ls
227 Entering Passive Mode (192,168,18,128,47,84).
150 Here comes the directory listing.
-rw-r--r--    1 0        0               0 Nov 17 01:53 user1
226 Directory send OK.
#退出vsftpd
ftp&gt; quit
221 Goodbye.

#测试用户user2
[root@localhost vconf]# ftp 192.168.18.128 21
Connected to 192.168.18.128 (192.168.18.128).
220 (vsFTPd 3.0.2)
Name (192.168.18.128:root): user2
331 Please specify the password.
Password:
230 Login successful.
Remote system type is UNIX.
Using binary mode to transfer files.
ftp&gt; ls
227 Entering Passive Mode (192,168,18,128,75,91).
150 Here comes the directory listing.
-rw-r--r--    1 0        0               0 Nov 17 01:53 user2
226 Directory send OK.
#退出vsftpd
ftp&gt; quit
221 Goodbye.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Linux</category>
        <category>操作系统</category>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>CentOS 7</tag>
        <tag>Linux</tag>
        <tag>网络管理</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask Web开发学习笔记（三）</title>
    <url>/2022/10/21/Flask%20Web%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[<h1 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h1><h2 id="Jinja配置"><a href="#Jinja配置" class="headerlink" title="Jinja配置"></a>Jinja配置</h2><p>Jinja2默认配置为：</p>
<ul>
<li><p>所有扩展名为<code>.html</code>、<code>.htm</code>、<code>.xml</code>以及<code>.xhtml</code>的模板会开启自动转义</p>
</li>
<li><p>模板可以利用</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&#123;% autoescape %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>标签选择自动转义的开关</p>
</li>
<li><p>Flask在Jinja2上下文中插入了几个全局函数和助手，另外还有一些目前默认的值。</p>
</li>
</ul>
<h2 id="标准上下文"><a href="#标准上下文" class="headerlink" title="标准上下文"></a>标准上下文</h2><p>默认在Jinja2模板中可用的全局变量有：</p>
<p><strong>config：</strong> 当前的配置对象(flask.config)。</p>
<p><strong>request：</strong> 当前的请求对象(flask.request) 。当模板不是在活动的请求上下文中渲染时，这个变量不可用。</p>
<p><strong>session：</strong> 当前的会话对象(flask.session)。当模板不是在活动的请求上下文中渲染时，这个变量不可用。</p>
<p><strong>g：</strong> 请求相关的全局变量(flask.g)。当模板不是在活动的请求上下文中渲染时，这个变量不可用。</p>
<p><strong>url_for()：</strong> flask.url_for()函数。</p>
<p><strong>get_flashed_messages()： </strong>flask.get_flashed_messages()函数。</p>
<h3 id="Jinja上下文行为"><a href="#Jinja上下文行为" class="headerlink" title="Jinja上下文行为"></a>Jinja上下文行为</h3><p>这些变量被添加到了请求的上下文中，而非全局变量。其区别在于，默认不会在导入模板的上下文中出现。这样一方面是考虑到性能，另一方面是为了让事情显式透明。</p>
<p>若想要导入一个需要访问请求对象的宏，有两种方法：</p>
<ul>
<li>显式地传入请求或请求对象的属性作为宏的参数</li>
<li>与上下文一起导入宏，其方式如下：</li>
</ul>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">&#123;% from &#39;_helpers.html&#39; import my_macro with contexr %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="标准过滤器"><a href="#标准过滤器" class="headerlink" title="标准过滤器"></a>标准过滤器</h2><p><code>tojson()</code>函数把给定的对象转换为JSON表示。例如动态生成JavaScript：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>text/javascript</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
    <span class="token function">doSomethingWith</span><span class="token punctuation">(</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#123;</span>user<span class="token punctuation">.</span>username<span class="token operator">|</span>tojson<span class="token operator">|</span>safe <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token operator">|</span>safe禁用转义<span class="token operator">--</span><span class="token operator">></span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="控制自动转义"><a href="#控制自动转义" class="headerlink" title="控制自动转义"></a>控制自动转义</h2><p>自动转义的概念是自动转义特殊字符。HTML（或XML）意义下的特殊字符是<code>&amp;</code>、<code>&gt;</code>、<code>&lt;</code>、<code>&quot;</code>、<code>&#39;</code>。</p>
<p>控制自动转义可以有三种方法：</p>
<ul>
<li>在传递到模板之前，用Markup对象封装HTML字符串。一般推荐这个方法。 </li>
<li>在模板中，使用<code>|safe</code>过滤器显式地标记一个字符串为安全的HTML(<code>myvariable|safe</code>)。</li>
<li>临时地完全禁用自动转移系统，其方式如下：</li>
</ul>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&#123;% autoescape false %&#125;
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>autoescaping is disabled here
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>&#123; &#123; wii_not_be_escaped &#125; &#125;
&#123;% endautoescape %&#125;	<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="注册过滤器"><a href="#注册过滤器" class="headerlink" title="注册过滤器"></a>注册过滤器</h2><p>若要在Jinja2中注册过滤器，可以把它们手动添加到应用的jinja_env或使用template_filter()装饰器：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">#使用template_filter()装饰器
@app.template_filter(&#39;reverse&#39;)
def reverse_filter(s):
    return s[::-1]

#手动添加到应用的jinja_env
def reverse_filter(s):
    return s[::-1]
app.jinja_env.filters[&#39;reverse&#39;]&#x3D;reverse_filter<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在使用装饰器的情况下，若想以函数名作为过滤器名，参数是可选的。注册之后，可以在模板中使用过。例如在上下文中有一个名为mylist的Python列表：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&#123;% for x in mylist | reverse %&#125;
&#123;% endfor %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="上下文处理器"><a href="#上下文处理器" class="headerlink" title="上下文处理器"></a>上下文处理器</h2><p>Flask上下文处理器自动向模板的上下文中插入新变量。上下文处理器在模板渲染之前运行，并且可以在模板上下文中插入新值。上下文处理器是一个返回字典的函数，这个字典的键值最终将传入应用中所有模板的上下文。：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">#上下文处理器
@app.context_processor
def inject_user():
    return dict(user&#x3D;g.user)#模板可以使用一个名为user，值为g.user的变量

@app.context_processor
def utility_processor():
    def format_price(amount,currency&#x3D;u&#39;$&#39;):
        return u&#39;&#123;0:.2f&#125; &#123;1&#125;.format(amount,currency)
    return dict(format_price&#x3D;format_price)#format_price函数在所有模板中可用
#调用format_price函数
&#123; &#123;format_price(0.33)&#125; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>由于Python允许传递函数，其变量不仅仅限于值，上下文处理器也可以使某个函数在模板中可用。</p>
<h1 id="即插视图"><a href="#即插视图" class="headerlink" title="即插视图"></a>即插视图</h1><p>即插视图主要目的是可以替换已实现的部分，并且这个方式可以定制即插视图。</p>
<h2 id="基本原则"><a href="#基本原则" class="headerlink" title="基本原则"></a>基本原则</h2><p>若有一个从数据库载入一个对象列表并渲染到视图的函数：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">@app.route(&#39;&#x2F;users&#x2F;&#39;)
def show_users(page):
    users&#x3D;User.query.all()
    return render_template(&#39;user.html&#39;,users&#x3D;users)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>这是简单而灵活的实现，但若想要用一种通用的，同样可以适应其他模型和模板的方式来提供这个视图，会需要更大的灵活性，而这就是基于类的即插视图所做的。</p>
<p>第一步，把它转换为基于类的视图：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">from flask.views import View
class ShowUsers(View):#创建flask.views.View的子类
    def dispatch_request(self):
        users&#x3D;User.query.all()
        return render_template(&#39;users.html&#39;,objects&#x3D;users)
app.add_url_rule(&#39;&#x2F;users&#x2F;&#39;,ShowUsers.as_view(&#39;show_users&#39;))#as_view把类转换到实际的视图<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上面实现的方法还不够有效，因此需要重构一下代码：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">from flask.views import View
class ListView(View):
	def get_template_name(self):#self无论何时请求被调度都会创建这个类的新实例
        raise NotImplementedError()
    def render_template(self,context):
        return render_template(self.get_template_name(),**context)
    def dispatch_request(self):#以URL规则为参数调用
        context&#x3D;&#123; &#39;objects&#39;:self.get_objects() &#125;
        return self.render_template(context)
class UserView(ListView):
    def get_template_name(self):
        return &#39;user.html&#39;
    def get_objects(self):
        return User.query.all()
#将类实例化并进行注册
app.add_url_rule(&#39;&#x2F;about&#39;,view_func&#x3D;RenderTemplateView.as_view(
	&#39;about_page&#39;,template_name&#x3D;&#39;about.html&#39;))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="方法提示"><a href="#方法提示" class="headerlink" title="方法提示"></a>方法提示</h2><p>即插视图可以像常规函数一样用route()或更好的add_url_rule()附加到应用中。而当进行附加时，必须提供HTTP方法的名称。为了将这个信息加入到类中，可以提供methods属性类承载它：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">class MyView(View):
    methods&#x3D;[&#39;GET&#39;,&#39;POST&#39;]
    def dispatch_request(self):
        if request_method&#x3D;&#x3D;&#39;POST&#39;:
            pass
app.add_url_rule(&#39;&#x2F;myview&#39;,view_func&#x3D;MyView.as_view(&#39;myview&#39;))        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="基于调度的方法"><a href="#基于调度的方法" class="headerlink" title="基于调度的方法"></a>基于调度的方法</h2><p>对于每个HTTP方法执行不同的函数，对RESTfulAPI非常有用。可以通过flask.views.MethodView实现。每个HTTP方法映射到同名函数中（只有名称为小写的）：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">from flask.views import MethodView
class UserAPI(MethodView):
	def get(self):
		users&#x3D;User.query.all()
        pass
    def post(self):
        user&#x3D;User.from_form_data(request.form)
        pass
app.add_url_rule(&#39;&#x2F;users&#x2F;&#39;,view_func&#x3D;UserAPI.as_view(&#39;users&#39;))    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如此便可以不提供method属性，其会自动按照类中定义的方法来设置。</p>
<h2 id="装饰视图"><a href="#装饰视图" class="headerlink" title="装饰视图"></a>装饰视图</h2><p>视图类自己不是加入到路由系统的视图函数，那么就没有必要去装饰视图类，但可以手动装饰as_view()的返回值：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">def user_required(f):
    #检查用户是否登录，若没登录返回401错误
    def decorator(*args,**kwargs):
        if not g.user:
            abort(401)
        return f(*args,**kwargs)
    return decorator
view&#x3D;user_required(UserAPI.as_view(&#39;users&#39;))
app.add_url_rule(&#39;&#x2F;users&#x2F;&#39;,view_func&#x3D;view)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>从Flask0.8开始，增加了另一种在类声明中设定一个装饰器列表的方法：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">class UserAPI(MethodView):
    decorators&#x3D;[user_required]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>由于从调用者的视角来看self是不明确的，因此<strong>不能在单独的视图方法上使用常规的视图装饰器。</strong></p>
<h2 id="用于API的方法视图"><a href="#用于API的方法视图" class="headerlink" title="用于API的方法视图"></a>用于API的方法视图</h2><p>WebAPI的工作通常与HTTP动词紧密相关，因此API需要不同的URL规则来访问相同的方法视图。</p>
<p>若要在web上暴露一个用户对象：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>URL</th>
<th>HTTP 方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>/users/</code></td>
<td><code>GET</code></td>
<td>获得全部用户的列表</td>
</tr>
<tr>
<td><code>/users/</code></td>
<td><code>POST</code></td>
<td>创建一个新用户</td>
</tr>
<tr>
<td><code>/users/&lt;id&gt;</code></td>
<td><code>GET</code></td>
<td>显示某个用户</td>
</tr>
<tr>
<td><code>/users/&lt;id&gt;</code></td>
<td><code>PUT</code></td>
<td>更新某个用户</td>
</tr>
<tr>
<td><code>/users/&lt;id&gt;</code></td>
<td><code>DELETE</code></td>
<td>删除某个用户</td>
</tr>
</tbody>
</table>
</div>
<p>可以利用MethodView对相同的视图提供多个规则，此时的视图为：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">class UserAPI(MethodView):
    def get(self,user_id):
        if user_id is None:
            #返回全部用户列表
            pass
        else:
            #显示一个用户
            pass
    def post(self):
        #创建一个新用户
        pass
    def delete(self,user_id):
        #删除一个用户
        pass
    def put(self,user_id):
        #更新一个用户
        pass<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>添加两条规则，并为每条规则显式地指出HTTP方法，将它挂载到路由系统中：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">user_view&#x3D;UserAPI.as_view(&#39;user_api&#39;)
app.add_url_rule(&#39;&#x2F;users&#x2F;&#39;,default&#x3D;&#123;&#39;user_id&#39;:None&#125;,
                view_func&#x3D;user_view,methods&#x3D;[&#39;GET&#39;,])
app.add_url_rule(&#39;&#x2F;users&#x2F;&#39;,view_func&#x3D;user_view,methods&#x3D;[&#39;POST&#39;,])
app.add_url_rule(&#39;&#x2F;users&#x2F;&lt;int:user_id&gt;&#39;,view_func&#x3D;user_view,
                methods&#x3D;[&#39;GET&#39;,&#39;PUT&#39;,&#39;DELETE&#39;])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>若有很多类似的API，可以重构上述的注册代码：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">def register_api(view,endpoint,url,pk&#x3D;&#39;id&#39;,pk_type&#x3D;&#39;int&#39;):
    view_func&#x3D;view.as_view(endpoint)
    app.add_url_rule(url,defaults&#x3D;&#123;pk:None&#125;,
                    view_func&#x3D;view_funv,methods&#x3D;[&#39;GET&#39;,])
    app.add_url_rule(url,view_func&#x3D;view_func,methods&#x3D;[&#39;POST&#39;,])
    app.add_url_rule(&#39;%s &lt; %s : %s &gt; &#39; % (url,pk_type,pk),view_func&#x3D;view_func,methods&#x3D;[&#39;GET&#39;,&#39;PUT&#39;,&#39;DELETE&#39;])
register_api(UserAPI,&#39;user_api&#39;,&#39;&#x2F;users&#x2F;&#39;,pk&#x3D;&#39;user_id&#39;)    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="用蓝图实现模块化的应用"><a href="#用蓝图实现模块化的应用" class="headerlink" title="用蓝图实现模块化的应用"></a>用蓝图实现模块化的应用</h1><p>一个应用中或跨应用制作应用组件和支持通用的模式称为蓝图。蓝图简化了大型应用的工作方式，并提供给Flask扩展在应用上注册操作的核心方法。一个Blueprint对象与Flask应用对象的工作方式很像，但它确实不是一个应用，而是描述如何构建或扩展应用的蓝图。</p>
<h2 id="为什么使用蓝图"><a href="#为什么使用蓝图" class="headerlink" title="为什么使用蓝图"></a>为什么使用蓝图</h2><p>Flask中的蓝图为这些情况设计：</p>
<ul>
<li>把一个应用分解为一个蓝图的集合。一个项目可以实例化一个应用对象，初始化几个扩展，并注册一集合的蓝图。</li>
<li>以URL前缀和/或子域名，在应用上注册一个蓝图。默认情况下，URL前缀/子域名中的参数即为这个蓝图下的所有视图函数的共同的视图参数。</li>
<li>在一个应用中用不同的URL规则多次注册一个蓝图。</li>
<li>通过蓝图提供模板过滤器、静态文件、模板和其他功能。一个蓝图不一定要实现应用或者视图函数。</li>
<li>初始化一个Flask扩展时，在这些情况中注册一个蓝图。</li>
</ul>
<p>Flask中的蓝图不是即插应用，因为它虽然可以注册，甚至可以多次注册到应用上的操作集合中，但其实际上不是一个应用。可以使用多个应用对象，但应用的配置的分开的，并在WSGI层管理。</p>
<p>蓝图作为Flask层提供分隔的替代，共享应用配置，并且在必要情况下可以更新所注册的应用对象。其缺点是<strong>不能在应用创建后撤销注册一个蓝图而不销毁整个应用对象。</strong></p>
<h2 id="蓝图的设想"><a href="#蓝图的设想" class="headerlink" title="蓝图的设想"></a>蓝图的设想</h2><p>蓝图的基本设想是当它们注册到应用上时，它们记录将会被执行的操作。当分派请求和生成从一个端点到另一个URL时，Flask会关联蓝图中的视图函数。</p>
<h2 id="蓝图的实现"><a href="#蓝图的实现" class="headerlink" title="蓝图的实现"></a>蓝图的实现</h2><p>实现一个简单渲染静态模板的蓝图如下：<br><pre class="line-numbers language-python" data-language="python"><code class="language-python">from flask import Blueprint,render_template,abort
from jinja2 import TemplateNotFound
simple_page&#x3D;Blueprint(&#39;simple_page&#39;,__name__,template_folder&#x3D;&#39;templates&#39;)

@simple_page.route(&#39;&#x2F;&#39;,defaults&#x3D;&#123;&#39;page&#39;:&#39;index&#39;&#125;)#绑定函数
@simple_page.route(&#39;&#x2F;&lt;page&gt;&#39;)
def show(page):
    try:
        return render_template(&#39;pages&#x2F; %s.html&#39; %page)
    except TemplateNotFound:
        abort(404)    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>
<p>当使用@simple_page.route装饰器绑定函数时，在蓝图之后被注册时它会记录把show函数注册到应用上的意图。除此之外还会给函数的端点加上有Blueprint的构造函数中给出的蓝图的名称作为前缀（如上述代码中是simple_page）</p>
<h2 id="注册蓝图"><a href="#注册蓝图" class="headerlink" title="注册蓝图"></a>注册蓝图</h2><p>注册蓝图：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">from flask import Flask
from yourapplicarion.simple_page import simple_page
app&#x3D;Flask(__name__)
app.register_blueprint(simple_page)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>若检查已经注册到应用的规则，会发现这些生成出的规则：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">[ &lt;Rule &#39;&#x2F;static&#x2F;&lt;filename&gt;&#39; (HEAD, OPTIONS, GET) -&gt; static&gt;,#来自应用本身，用于静态文件
  &lt;Rule &#39;&#x2F;&lt;page&gt;&#39; (HEAD, OPTIONS, GET) -&gt; simple_page.show&gt;,#用于simple_page蓝图中的show函数
  &lt;Rule &#39;&#x2F;&#39; (HEAD, OPTIONS, GET) -&gt; simple_page.show&gt; ]#用于simple_page蓝图中的show函数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>蓝图在不同位置挂载时生成的规则也不同，如：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">app.register_blueprint(simple_page,url_prefix&#x3D;&#39;&#x2F;pages&#39;)

#生成的规则如下：
[ &lt;Rule &#39;&#x2F;static&#x2F;&lt;filename&gt;&#39; (HEAD, OPTIONS, GET) -&gt; static&gt;,#来自应用本身，用于静态文件
  &lt;Rule &#39;&#x2F;pages&#x2F;&lt;page&gt;&#39; (HEAD, OPTIONS, GET) -&gt; simple_page.show&gt;,#挂载到pages页下，用于simple_page蓝图中的show函数
  &lt;Rule &#39;&#x2F;pages&#x2F;&#39; (HEAD, OPTIONS, GET) -&gt; simple_page.show&gt; ]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>除此之外还可以多次注册蓝图，但不是每个蓝图都会正确地响应。<strong>实际上蓝图能否被多次挂载，取决于蓝图是怎样实现的。</strong></p>
<h2 id="蓝图资源"><a href="#蓝图资源" class="headerlink" title="蓝图资源"></a>蓝图资源</h2><p>蓝图也可以提供资源。有时候会只为它提供的资源而引入一个蓝图。</p>
<h3 id="蓝图资源文件夹"><a href="#蓝图资源文件夹" class="headerlink" title="蓝图资源文件夹"></a>蓝图资源文件夹</h3><p>蓝图被设想为包含在一个文件夹中。也有多个蓝图源于同一个文件夹的情况，但不推荐这种做法。</p>
<p>这个文件夹会从Blueprint的第二个参数中推断出来，通常是<code>__name__</code>。这个参数决定对应蓝图的是哪个逻辑的Python模块或包。若它指向一个存在的Python包，这个包就是资源文件夹。若是一个模块，模块所在的包就是资源文件夹。可以访问<code>Blueprint.root_path</code>属性来查看资源文件夹是什么，其语句为：<code>simple_page.root_path</code>。</p>
<p>可以使用open_resource()函数来快速从这个文件夹打开源文件：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">with simple_page.open_resource(&#39;static&#x2F;style.css&#39;) as f:
    code&#x3D;f.read()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="静态文件"><a href="#静态文件" class="headerlink" title="静态文件"></a>静态文件</h2><p>一个蓝图可以通过static_folder关键字参数提供一个指向文件系统上文件夹的路径，并以此来暴露一个带有静态文件的文件夹。这可以是一个绝对路径，也可以是相对于蓝图资源文件夹的路径：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">admin&#x3D;Blueprint(&#39;admin&#39;,__name__,static_folfer&#x3D;&#39;static&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>默认情况下，路径最右边的部分就是它在web所暴露的地址。这个static的文件夹会在蓝图+/static的位置上可用，即蓝图为/admin把静态文件夹注册到/admin/static。</p>
<p>最后是用于命名的blueprint_name.static，也可以生成它的URL：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">url_for(&#39;admin.static&#39;,filename&#x3D;&#39;style.css&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="模板-1"><a href="#模板-1" class="headerlink" title="模板"></a>模板</h2><p>若想要蓝图暴露模板，可以通过Blueprint构造函数中的template_folder参数来实现：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">admin&#x3D;Blueprint(&#39;admin&#39;,__name__,template_folder&#x3D;&#39;templates&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>路径可以是绝对的或是相对蓝图资源文件夹的。模板文件夹会被加到模板的搜索路径中，但比实际的应用模板文件夹优先级低，因此可以在实际的应用中覆盖蓝图提供的资源。</p>
<p>因此当有一个<code>yourapplication/admin</code>文件夹中的蓝图并且想要渲染<code>admin/index.html</code>模板时，提供templates作为template_folder，则创建文件的路径为：</p>
<p><code>yourapplication/admin/templates/admin/index.html</code>。</p>
<h2 id="构造URL"><a href="#构造URL" class="headerlink" title="构造URL"></a>构造URL</h2><p>当想要用蓝图从一个页面链接到另一个页面时，可以使用url_for()函数，但要在UTL的末端加上蓝图的名称和一个点（<code>.</code>）来作为前缀。若在一个蓝图的视图函数或是模板中想要从链接到同一蓝图下另一个端点时，可以通过对端点只加上一个点作为前缀来使用相对的重定向：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">url_for(&#39;admin.index&#39;)#链接到admin蓝图的index页面
url_for(&#39;.index&#39;)#链接到同一蓝图下的index页面<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Web框架</category>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Flask Web</tag>
        <tag>后端</tag>
        <tag>Web框架</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker应用部署基础</title>
    <url>/2022/12/06/Docker%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><h2 id="容器简介"><a href="#容器简介" class="headerlink" title="容器简介"></a>容器简介</h2><h3 id="什么是Linux容器"><a href="#什么是Linux容器" class="headerlink" title="什么是Linux容器"></a>什么是Linux容器</h3><p>Linux容器是与系统其他部分隔离开的一系列进程。它在另一个镜像中运行，并由该镜像提供支持进程所需的全部文件。容器提供的镜像包括了应用的所有依赖项，因此在开发到测试再到生产的过程中，容器都具有可移植性和一致性。</p>
<h3 id="容器等同于虚拟化吗"><a href="#容器等同于虚拟化吗" class="headerlink" title="容器等同于虚拟化吗"></a>容器等同于虚拟化吗</h3><p>容器不完全是虚拟化。虚拟化使得许多系统可同时在单个系统上运行，而容器可共享同一个操作系统的内核，将应用进程与系统其他部分隔离开。</p>
<p>这便意味着，即使是让多个操作系统在单个虚拟机监控程序上运行以实现虚拟化，也不能达到和使用容器同等的轻量级效果。Linux容器可从单个操作系统运行，在所有容器中共享该操作系统，因此应用和服务能够保持轻量级，并可以快速运行。</p>
<h3 id="什么是Docker"><a href="#什么是Docker" class="headerlink" title="什么是Docker"></a>什么是Docker</h3><p>IT软件中所说的Docker，是指容器化技术，用于支持创建和使用Linux容器。借助Docker，可将容器当作重量轻、模块化的虚拟机使用，同时还将获得高度的灵活性，从而实现对容器的高效创建、部署及复制，并能将其从一个环境顺利迁移至另一个环境。</p>
<p>Docker技术使用Linux内核和内核功能来分隔进行，以便各进程相互独立运行。</p>
<h3 id="Docker的目标"><a href="#Docker的目标" class="headerlink" title="Docker的目标"></a>Docker的目标</h3><p>Docker的主要目标是构建、运输、处处运行（Build, Ship and Run any App, Angwhere）</p>
<p>构建：做一个Docker镜像</p>
<p>运输：Docker pull</p>
<p>运行：启动一个容器</p>
<p>每个容器都有自己的文件系统rootfs</p>
<h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2><p>在Centos系统中，安装命令如下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#查看当前的内核版本
[root@localhost admin]# uname -r
3.10.0-1160.el7.x86_64

#查看已安装的CentOS版本信息
[root@localhost admin]# cat &#x2F;etc&#x2F;redhat-release
CentOS Linux release 7.9.2009 (Core)

#安装需要的软件包，yum-util提供yum-config-manager功能，另两个是devicemapper驱动依赖
yum install -y yum-utils device-mapper-persistent-data lvm2

#设置yun源，下面两个都可用
#（中央仓库）
yum-config-manager --add-repo http:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo
#（阿里仓库）
yum-config-manager --add-repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo

#查看可用的Docker版本
yum list docker-ce --showduplicates | sort -r
#选择一个Docker版本并安装
yum -y install docker-ce-18.03.1.ce

#启动Docker并设置开机自启
systemctl start docker
systemctl enable docker

#查看Docker相关信息来验证是否正确安装了Docker
docker version
#配置Docker镜像加速
vim &#x2F;etc&#x2F;docker&#x2F;daemon.json
&#123;&quot;registry-mirrors&quot;:[&quot;https:&#x2F;&#x2F;registry.docker-cn.com&quot;]
&#125;
#启动第一个容器
docker run hello-world<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>Docker允许在容器中运行应用程序，使用<code>docker run</code>命令来在容器中运行一个应用程序，输出Hello World如下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@localhost admin]# docker run ubuntu:15.10 &#x2F;bin&#x2F;echo &quot;Hello world&quot;
Hello world
#其中ubuntu:15.10为所指定的要运行的镜像，Docker会首先从本地主机上查找镜像是否存在，若不存在，Dockwe就会从镜像仓库中下载公共镜像
# &#x2F;bin&#x2F;echo &quot;Hello world&quot;为在启动的容器里执行的命令<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="运行交互式的容器"><a href="#运行交互式的容器" class="headerlink" title="运行交互式的容器"></a>运行交互式的容器</h3><p>通过Docker的两个参数<code>-i -t</code>，可以让Docker运行的容器实现交互式对话的能力：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@localhost admin]# docker run -i -t ubuntu:15.10 &#x2F;bin&#x2F;bash
root@7cf8cc6326f7:&#x2F;#
#此时已经进入了一个ubuntu:15.10系统的容器
#查看当前系统的版本信息
root@7cf8cc6326f7:&#x2F;# cat &#x2F;proc&#x2F;version
Linux version 3.10.0-1160.el7.x86_64 (mockbuild@kbuilder.bsys.centos.org) (gcc version 4.8.5 20150623 (Red Hat 4.8.5-44) (GCC) ) #1 SMP Mon Oct 19 16:18:59 UTC 2020
#查看当前目录下的文件列表
root@7cf8cc6326f7:&#x2F;# ls
bin   dev  home  lib64  mnt  proc  run   srv  tmp  var
boot  etc  lib   media  opt  root  sbin  sys  usr
#可以通过运行exit命令或使用Ctrl+D来退出容器
root@7cf8cc6326f7:&#x2F;# exit
exit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="后台模式启动容器"><a href="#后台模式启动容器" class="headerlink" title="后台模式启动容器"></a>后台模式启动容器</h3><p>使用以下命令可以创建一个以进程方式运行的容器：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@localhost admin]# docker run -d ubuntu:15.10 &#x2F;bin&#x2F;sh -c &quot;while true; do echo hello world; sleep 1;done&quot;
#输出的长字符串为容器的ID
a26fa474ed2743ad2413c5e9c828faafa141ab1ec11ba3ffaf424de658b785de<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>容器ID对每个容器来说都是唯一的，可以通过容器ID来查看对应的容器发生了什么。</p>
<p>另外打开一个终端，用<code>docker ps</code>查看容器是否进行：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@localhost admin]# docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
54539564169f        ubuntu:15.10        &quot;&#x2F;bin&#x2F;bash&quot;         31 seconds ago      Up 30 seconds                           nostalgic_jennings

#CONTAINER ID 为容器ID
#IMAGE 为使用的镜像
#COMMAND 为启动容器时运行的命令
#CREATED 为容器的创建时间
#STATUS 为容器状态
#PORTS 为容器的端口信息和使用的连接类型(tcp\udp)
#NAMES 为自动分配的容器名称<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>容器的状态有7种：</p>
<ul>
<li>created（已创建）</li>
<li>restarting（重启中）</li>
<li>running或Up（运行中）</li>
<li>removing（迁移中）</li>
<li>paused（暂停）</li>
<li>exited（停止）</li>
<li>dead（死亡）</li>
</ul>
<h3 id="停止容器"><a href="#停止容器" class="headerlink" title="停止容器"></a>停止容器</h3><p>使用<code>docker stop</code>命令可以使容器停止：</p>
<pre class="line-numbers language-none"><code class="language-none">docker stop 需要停止的容器ID<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="Docker镜像管理"><a href="#Docker镜像管理" class="headerlink" title="Docker镜像管理"></a>Docker镜像管理</h2><h3 id="Docker镜像常用命令"><a href="#Docker镜像常用命令" class="headerlink" title="Docker镜像常用命令"></a>Docker镜像常用命令</h3><p><strong>根据镜像名称获取镜像centos：</strong><code>docker pull centos</code></p>
<p><strong>查看当前主机镜像列表：</strong><code>docker image list</code></p>
<p><strong>查找镜像：</strong><code>docker search 镜像名</code></p>
<p><strong>导入镜像（docker-centos.tar.gz为镜像名）：</strong><code>docker image load -i docker-centos.tar.gz</code></p>
<p><strong>导出镜像centos：</strong><code>docker image save centos &gt; docker-centos.tar.gz</code></p>
<p><strong>删除镜像hello-world：</strong><code>docker rmi hello-world</code></p>
<p><strong>删除镜像centos：</strong><code>docker image rm centos:latest</code></p>
<p><strong>更新镜像</strong>：<code>docker run -t -i ubuntu:15.10 /bin/bash</code></p>
<p><strong>查看镜像的详细信息：</strong><code>docker image inspect centos</code></p>
<h3 id="使用Dockerfile构建镜像"><a href="#使用Dockerfile构建镜像" class="headerlink" title="使用Dockerfile构建镜像"></a>使用Dockerfile构建镜像</h3><p>当从docker镜像仓库中下载的镜像不能满足需求时，可以通过以下两种方式对镜像进行更改：</p>
<ul>
<li>从已经创建的容器中更新镜像，并提交这个镜像</li>
<li>使用Dockerfile命令来创建一个新的镜像</li>
</ul>
<p>首先，使用命令docker build 从零开始创建一个新的镜像，为此需要创建一个Dockerfile文件，其中包含一组指令来告诉Docker如何构建镜像</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@localhost admin]# touch Dockerfile
[root@localhost admin]# vim Dockerfile
FROM    centos:6.7
MAINTAINER      Fisher &quot;fisher@sudops.com&quot;

RUN     &#x2F;bin&#x2F;echo &#39;root:123456&#39; |chpasswd
RUN     useradd runoob
RUN     &#x2F;bin&#x2F;echo &#39;runoob:123456&#39; |chpasswd
RUN     &#x2F;bin&#x2F;echo -e &quot;LANG&#x3D;\&quot;en_US.UTF-8\&quot;&quot; &gt;&#x2F;etc&#x2F;default&#x2F;local
EXPOSE  22
EXPOSE  80
CMD     &#x2F;usr&#x2F;sbin&#x2F;sshd -D<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>每一个指令都会在镜像上创建一个新的层，每一个指令的前缀都必须是大写的。</p>
<p>dockerfile 命令详情如下：</p>
<ul>
<li><p>FROM：镜像从那里来</p>
</li>
<li><p>MAINTAINER：镜像维护者信息</p>
</li>
<li><p>RUN：构建镜像执行的命令，每一次RUN都会构建一层</p>
</li>
<li><p>CMD：容器启动的命令，如果有多个则以最后一个为准，也可以为ENTRYPOINT提供参数</p>
</li>
<li><p>VOLUME：定义数据卷，如果没有定义则使用默认</p>
</li>
<li><p>USER：指定后续执行的用户组和用户</p>
</li>
<li><p>WORKDIR：切换当前执行的工作目录</p>
</li>
<li><p>HEALTHCHECH：健康检测指令</p>
</li>
<li><p>ARG：变量属性值，但不在容器内部起作用</p>
</li>
<li><p>EXPOSE：暴露端口</p>
</li>
<li><p>ENV：变量属性值，容器内部也会起作用</p>
</li>
<li><p>ADD：添加文件，如果是压缩文件也解压</p>
</li>
<li><p>COPY：添加文件，以复制的形式</p>
</li>
<li><p>ENTRYPOINT：容器进入时执行的命令</p>
</li>
</ul>
<p>其中，FROM指令指定只用哪个镜像源，RUN指令告诉docker在镜像内执行命令安装了什么。然后便可以使用Dockerfile 文件通过docker build 命令来构建一个镜像。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@localhost admin]# docker build -t runoob&#x2F;centos:6.7 .
Sending build context to Docker daemon  205.8MB
Step 1&#x2F;9 : FROM    centos:6.7
6.7: Pulling from library&#x2F;centos
cbddbc0189a0: Pull complete 
Digest: sha256:4c952fc7d30ed134109c769387313ab864711d1bd8b4660017f9d27243622df1
Status: Downloaded newer image for centos:6.7
 ---&gt; 9f1de3c6ad53
Step 2&#x2F;9 : MAINTAINER      Fisher &quot;fisher@sudops.com&quot;
 ---&gt; Running in 5eaef1ca03a8
Removing intermediate container 5eaef1ca03a8
 ---&gt; fb3340e270e3
...
Step 9&#x2F;9 : CMD     &#x2F;usr&#x2F;sbin&#x2F;sshd -D
 ---&gt; Running in 5856113fd1c1
Removing intermediate container 5856113fd1c1
 ---&gt; 461a6483b47b
Successfully built 461a6483b47b
Successfully tagged runoob&#x2F;centos:6.7

#其中参数-t为指定要创建的目标镜像名
#参数.为Dockerfile文件所在目录，也可以指定Dockerfile的绝对路径<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>查看创建的镜像runoob/centos 是否已经存在：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@localhost admin]# docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
runoob&#x2F;centos       6.7                 461a6483b47b        12 minutes ago      191MB
nginx               latest              88736fe82739        2 weeks ago         142MB
ubuntu              latest              a8780b506fa4        4 weeks ago         77.8MB
hello-world         latest              feb5d9fea6a5        14 months ago       13.3kB
centos              latest              5d0da3dc9764        14 months ago       231MB
centos              6.7                 9f1de3c6ad53        3 years ago         191MB
ubuntu              15.10               9b9cb95443b5        6 years ago         137MB
training&#x2F;webapp     latest              6fae60ef3446        7 years ago         349MB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>现在可以使用新的镜像来创建容器：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@localhost admin]# docker run -t -i runoob&#x2F;centos:6.7 &#x2F;bin&#x2F;bash
[root@c256ace5a3db &#x2F;]# id runoob
uid&#x3D;500(runoob) gid&#x3D;500(runoob) groups&#x3D;500(runoob)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>可以看到新镜像已经包含创建的用户runoob。</p>
<h3 id="设置镜像标签"><a href="#设置镜像标签" class="headerlink" title="设置镜像标签"></a>设置镜像标签</h3><p>使用docker tag 命令可以为镜像添加一个新的标签：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@localhost admin]# docker tag 461a6483b47b runoob&#x2F;centos:dev
[root@localhost admin]# docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
runoob&#x2F;centos       6.7                 461a6483b47b        21 minutes ago      191MB
runoob&#x2F;centos       dev                 461a6483b47b        21 minutes ago      191MB
nginx               latest              88736fe82739        2 weeks ago         142MB
ubuntu              latest              a8780b506fa4        4 weeks ago         77.8MB
hello-world         latest              feb5d9fea6a5        14 months ago       13.3kB
centos              latest              5d0da3dc9764        14 months ago       231MB
centos              6.7                 9f1de3c6ad53        3 years ago         191MB
ubuntu              15.10               9b9cb95443b5        6 years ago         137MB
training&#x2F;webapp     latest              6fae60ef3446        7 years ago         349MB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="容器的日常管理"><a href="#容器的日常管理" class="headerlink" title="容器的日常管理"></a>容器的日常管理</h2><h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><p>最简单的运行一个容器：<code>docker run nginx</code></p>
<p>使用ubuntu镜像启动一个容器，参数以命令行模式进入该容器：<code>docker run -it ubuntu /bin/bash</code>（<code>-it</code>是指交互式终端）</p>
<p>快速启动容器：<code>docker run  centos:latest  /usr/bin/sleep 20</code></p>
<p><strong>注意：容器内的第一个进程必须一直处于运行的状态，否则这个容器，就会处于退出状态！</strong></p>
<p>查看正在运行的容器：<code>docker container ls</code></p>
<p>查看容器详细信息/id：<code>docker container  inspect  容器名称/id</code></p>
<h3 id="启动已停止运行的容器"><a href="#启动已停止运行的容器" class="headerlink" title="启动已停止运行的容器"></a>启动已停止运行的容器</h3><p>查看所有容器（包括未运行的）：<code>docker ps -a</code></p>
<p>启动一个已停止运行的容器：<code>docker start 容器名称/id</code></p>
<p>自命名启动一个容器：<code>docker run --name ubuntu-test ubuntu /bin/bash</code></p>
<p>让ubuntu-test容器在后台运行：<code>docker run -itd --name ubuntu-test ubuntu /bin/bash</code></p>
<p>停止容器:<code>docker stop 容器名称/id</code>或者<code>docker container kill 容器名称/id</code></p>
<p>重启停止的容器：<code>docker restart 容器名称/id</code> </p>
<h3 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h3><p>在使用<code>-d</code>参数时，容器启动后会进入后台。此时想要进入容器，可以通过以下指令进入：</p>
<ul>
<li><code>docker attach 容器名称/id</code> ：此命令会退出容器终端，且会导致容器停止</li>
<li><code>docker exec -it 容器名称/id /bin/bash</code>：（推荐使用此命令，此命令会退出容器终端，但不会导致容器的停止）</li>
</ul>
<h3 id="导入容器快照"><a href="#导入容器快照" class="headerlink" title="导入容器快照"></a>导入容器快照</h3><p>可以使用docker import 从容器快照文件中再导入为镜像，如将快照文件ubuntu.tar导入到镜像test/ubuntu:v1中：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cat docker &#x2F;ubuntu.tar | docker import - test&#x2F;ubuntu:v1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>也可以通过指定URL或某个目录来导入，如：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker import http:&#x2F;&#x2F;example.com&#x2F;exampleimage.tag example&#x2F;imagerepo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h3><p>使用docker rm 命令可删除容器：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker rm -f 容器名称&#x2F;id<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>清理掉所有处于终止状态的容器：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker container prune<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>删除所有容器：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker rm -f &#96;docker ps -a -q&#96;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="使用docker构建一个web应用程序"><a href="#使用docker构建一个web应用程序" class="headerlink" title="使用docker构建一个web应用程序"></a>使用docker构建一个web应用程序</h3><p>在dockers容器中运行一个Python Flask应用来运行一个web应用：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@localhost admin]# docker pull training&#x2F;webapp
[root@localhost admin]# docker run -d -p 5000:5000 training&#x2F;webapp python app.py

8294ae65cc7397df396f1846582d2c55896646996eab41a26f9be0c01f3270f8

#-d:让容器在后台运行
#-P:将容器内部使用的网络端口随机映射到使用的主机上<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>不同指定的映射方法：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">参数</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>-p hostPort:containerPort</code></td>
<td style="text-align:left">端口映射  -p 8080:80</td>
</tr>
<tr>
<td style="text-align:left"><code>-p ip:hostPort:containerPort</code></td>
<td style="text-align:left">配置监听地址 -p 10.0.0.100:8080:80</td>
</tr>
<tr>
<td style="text-align:left"><code>-p ip::containerPort</code></td>
<td style="text-align:left">随机分配端口 -p 10.0.0.100::80</td>
</tr>
<tr>
<td style="text-align:left"><code>-p hostPort:containerPort:udp</code></td>
<td style="text-align:left">指定协议 -p 8080:80:tcp</td>
</tr>
<tr>
<td style="text-align:left"><code>-p 81:80 –p 443:443</code></td>
<td style="text-align:left">指定多个</td>
</tr>
</tbody>
</table>
</div>
<p>此时使用docker ps来查看正在运行的容器，会发现多了端口信息：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@localhost admin]# docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                     NAMES
8294ae65cc73        training&#x2F;webapp     &quot;python app.py&quot;     49 seconds ago      Up 47 seconds       0.0.0.0:32768-&gt;5000&#x2F;tcp   hardcore_brown<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>从端口信息中可知，Docker开放了5000端口（默认Python Flask端口）映射到主机端口32768上，此时可以通过浏览器访问WEB应用：(路径为主机ip:32768端口)</p>
<p><img src="/2022/12/06/Docker%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2%E5%9F%BA%E7%A1%80/1.png" alt></p>
<p>可以通过参数<code>-p</code>来设置不一样的端口，如将容器内部的5000端口映射到本地主机的5000端口上：</p>
<pre class="line-numbers language-none"><code class="language-none">[root@localhost admin]# docker run -d -p 5000:5000 training&#x2F;webapp python app.py
743a62b49b70f9575690e2b85d4ea1eed94dd19fe9f6074f1d7069d977a2ecc8
[root@localhost admin]# docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                     NAMES
743a62b49b70        training&#x2F;webapp     &quot;python app.py&quot;     22 seconds ago      Up 21 seconds       0.0.0.0:5000-&gt;5000&#x2F;tcp    infallible_allen
8294ae65cc73        training&#x2F;webapp     &quot;python app.py&quot;     10 minutes ago      Up 10 minutes       0.0.0.0:32768-&gt;5000&#x2F;tcp   hardcore_brown<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="网络端口的快捷方式"><a href="#网络端口的快捷方式" class="headerlink" title="网络端口的快捷方式"></a>网络端口的快捷方式</h3><p>使用docker port 可以查看指定（ID或名字）容器的某个确定端口映射到宿主机的端口号。</p>
<p>查看容器端口情况可用：<code>docker port 容器名称/id</code>，如：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@localhost admin]# docker port 743a62b49b70
5000&#x2F;tcp -&gt; 0.0.0.0:5000
[root@localhost admin]# docker port infallible_allen
5000&#x2F;tcp -&gt; 0.0.0.0:5000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="查看WEB应用程序日志"><a href="#查看WEB应用程序日志" class="headerlink" title="查看WEB应用程序日志"></a>查看WEB应用程序日志</h3><p>查看容器内部的标准输出，可以查看端口信息和应用程序的访问日志：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@localhost admin]# docker logs -f 743a62b49b70
 * Running on http:&#x2F;&#x2F;0.0.0.0:5000&#x2F; (Press CTRL+C to quit)
192.168.18.129 - - [06&#x2F;Dec&#x2F;2022 01:43:49] &quot;GET &#x2F; HTTP&#x2F;1.1&quot; 200 -
192.168.18.129 - - [06&#x2F;Dec&#x2F;2022 01:43:49] &quot;GET &#x2F;favicon.ico HTTP&#x2F;1.1&quot; 404 -<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="检查WEB应用程序"><a href="#检查WEB应用程序" class="headerlink" title="检查WEB应用程序"></a>检查WEB应用程序</h3><p>使用docker inspect来查看Docker的底层信息，它会返回一个JSON文件记录着Docker容器的配置和状态信息：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@localhost admin]# docker inspect 743a62b49b70
[
    &#123;
        &quot;Id&quot;: &quot;743a62b49b70f9575690e2b85d4ea1eed94dd19fe9f6074f1d7069d977a2ecc8&quot;,
        &quot;Created&quot;: &quot;2022-12-06T01:42:44.255608149Z&quot;,
        &quot;Path&quot;: &quot;python&quot;,
        &quot;Args&quot;: [
            &quot;app.py&quot;
        ],
        &quot;State&quot;: &#123;
            &quot;Status&quot;: &quot;running&quot;,
            &quot;Running&quot;: true,
            &quot;Paused&quot;: false,
            &quot;Restarting&quot;: false,
            &quot;OOMKilled&quot;: false,
            &quot;Dead&quot;: false,
            &quot;Pid&quot;: 17733,
            &quot;ExitCode&quot;: 0,
            &quot;Error&quot;: &quot;&quot;,
            &quot;StartedAt&quot;: &quot;2022-12-06T01:42:45.331479678Z&quot;,
            &quot;FinishedAt&quot;: &quot;0001-01-01T00:00:00Z&quot;
        &#125;,
        ......
]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="停止WEB应用容器"><a href="#停止WEB应用容器" class="headerlink" title="停止WEB应用容器"></a>停止WEB应用容器</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@localhost admin]# docker stop 743a62b49b70
743a62b49b70<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="重启WEB应用容器"><a href="#重启WEB应用容器" class="headerlink" title="重启WEB应用容器"></a>重启WEB应用容器</h3><p>已经停止的容器可以使用命令docker start来启动：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@localhost admin]# docker start 743a62b49b70
743a62b49b70
[root@localhost admin]# docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                     NAMES
743a62b49b70        training&#x2F;webapp     &quot;python app.py&quot;     14 minutes ago      Up 14 seconds       0.0.0.0:5000-&gt;5000&#x2F;tcp    infallible_allen
8294ae65cc73        training&#x2F;webapp     &quot;python app.py&quot;     24 minutes ago      Up 24 minutes       0.0.0.0:32768-&gt;5000&#x2F;tcp   hardcore_brown<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="移除WEB应用容器"><a href="#移除WEB应用容器" class="headerlink" title="移除WEB应用容器"></a>移除WEB应用容器</h3><p>使用docker rm 命令来删除不需要的容器：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#删除容器时，容器必须是停止状态，否则会报以下错误
[root@localhost admin]# docker rm 743a62b49b70
Error response from daemon: You cannot remove a running container 743a62b49b70f9575690e2b85d4ea1eed94dd19fe9f6074f1d7069d977a2ecc8. Stop the container before attempting removal or force remove

t@localhost admin]# docker stop 743a62b49b70
743a62b49b70
[root@localhost admin]# docker rm 743a62b49b70
743a62b49b70
[root@localhost admin]# docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                     NAMES
8294ae65cc73        training&#x2F;webapp     &quot;python app.py&quot;     26 minutes ago      Up 26 minutes       0.0.0.0:32768-&gt;5000&#x2F;tcp   hardcore_brown<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="Docker数据卷的管理"><a href="#Docker数据卷的管理" class="headerlink" title="Docker数据卷的管理"></a>Docker数据卷的管理</h2><h3 id="挂载时创建卷"><a href="#挂载时创建卷" class="headerlink" title="挂载时创建卷"></a>挂载时创建卷</h3><p>挂载卷：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@localhost admin]# docker run -d -p 80:80 -v &#x2F;data:&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html nginx:latest
5f2530020849d15287b8bfd4dd2274945c0fd07078ab281a17e47bf2243ea113

#&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html为容器内站点目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>在宿主机写入数据，查看：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@localhost admin]# echo &quot;http:&#x2F;&#x2F;www.nmtui.com&quot; &gt;&#x2F;data&#x2F;index.html
[root@localhost admin]# curl 192.168.18.129
http:&#x2F;&#x2F;www.nmtui.com

#192.168.18.129为宿主机的ip地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>设置共享卷，使用同一个卷启动一个新的容器：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@localhost admin]# docker run -d -p 8080:80 -v &#x2F;data:&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html nginx:latest
ad8ef6db5021d356f6b56a62d6aaa584ad8be7b8c8cac73cc7bd08369acf41d4
[root@localhost admin]# curl 192.168.18.129:8080
http:&#x2F;&#x2F;www.nmtui.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>查看卷列表：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@localhost admin]# docker volume ls
DRIVER              VOLUME NAME<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="创建卷后挂载"><a href="#创建卷后挂载" class="headerlink" title="创建卷后挂载"></a>创建卷后挂载</h3><p>创建一个卷：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@localhost admin]# docker volume create
8bbaf77b6495bbc8e50e75dfbd945badc0fdd2d2aced2359dc8d97308fa08d92
[root@localhost admin]# docker volume ls
DRIVER              VOLUME NAME
local               8bbaf77b6495bbc8e50e75dfbd945badc0fdd2d2aced2359dc8d97308fa08d92<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>指定卷名：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@localhost admin]# docker volume create --name clsn
clsn
[root@localhost admin]# docker volume ls
DRIVER              VOLUME NAME
local               8bbaf77b6495bbc8e50e75dfbd945badc0fdd2d2aced2359dc8d97308fa08d92
local               clsn<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>查看卷路径：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@localhost admin]# docker volume inspect clsn
[
    &#123;
        &quot;CreatedAt&quot;: &quot;2022-12-06T00:50:33-08:00&quot;,
        &quot;Driver&quot;: &quot;local&quot;,
        &quot;Labels&quot;: &#123;&#125;,
        &quot;Mountpoint&quot;: &quot;&#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;clsn&#x2F;_data&quot;,
        &quot;Name&quot;: &quot;clsn&quot;,
        &quot;Options&quot;: &#123;&#125;,
        &quot;Scope&quot;: &quot;local&quot;
    &#125;
]
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>使用卷创建：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@localhost admin]# docker run -d -p 9000:80 -v clsn:&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html nginx:latest
3d4e986ad050c199740ec6a2a4f38d0ba54ad78715cb72d21df396e0774f705f
#宿主机测试
[root@localhost admin]# echo &#39;blog.nmtui.com&#39; &gt;&#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;clsn&#x2F;_data&#x2F;index.html
[root@localhost admin]# curl 192.168.18.129:9000
blog.nmtui.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>设置卷：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@localhost admin]# docker run -d -P --volumes-from 5f2530020849d15287b8bfd4dd2274945c0fd07078ab281a17e47bf2243ea113 nginx:latest
5e9a1d7ea93ea7b7fb2d6918cf1cc8805aff41daa21b7e7656be1a14b2662e94<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>查看使用的端口：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@localhost admin]# netstat -lntup
Active Internet connections (only servers)
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID&#x2F;Program name    
tcp        0      0 0.0.0.0:111             0.0.0.0:*               LISTEN      595&#x2F;rpcbind         
tcp        0      0 192.168.122.1:53        0.0.0.0:*               LISTEN      1320&#x2F;dnsmasq        
tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      1074&#x2F;sshd           
tcp        0      0 127.0.0.1:631           0.0.0.0:*               LISTEN      1069&#x2F;cupsd          
tcp        0      0 127.0.0.1:25            0.0.0.0:*               LISTEN      1352&#x2F;master         
tcp6       0      0 :::9000                 :::*                    LISTEN      4270&#x2F;docker-proxy   
tcp6       0      0 :::111                  :::*                    LISTEN      595&#x2F;rpcbind         
tcp6       0      0 :::8080                 :::*                    LISTEN      3992&#x2F;docker-proxy   
tcp6       0      0 :::80                   :::*                    LISTEN      3794&#x2F;docker-proxy   
tcp6       0      0 :::22                   :::*                    LISTEN      1074&#x2F;sshd           
tcp6       0      0 ::1:631                 :::*                    LISTEN      1069&#x2F;cupsd          
tcp6       0      0 ::1:25                  :::*                    LISTEN      1352&#x2F;master         
tcp6       0      0 :::32768                :::*                    LISTEN      4388&#x2F;docker-proxy   
[root@localhost admin]# curl 192.168.18.129:32768
http:&#x2F;&#x2F;www.nmtui.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="手动将容器保存为镜像"><a href="#手动将容器保存为镜像" class="headerlink" title="手动将容器保存为镜像"></a>手动将容器保存为镜像</h3><p>启动一个centos6.8的镜像：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@localhost admin]# docker pull centos:6.8
[root@localhost admin]# docker run -it -p 1022:22 centos:6.8 &#x2F;bin&#x2F;bash
#在容器中安装sshd服务并修改系统密码
[root@4d61bc1e379d &#x2F;]# yum install openssh-server -y
[root@4d61bc1e379d yum.repos.d]# echo &quot;root:123456&quot; |chpasswd
[root@4d61bc1e379d yum.repos.d]# &#x2F;etc&#x2F;init.d&#x2F;sshd start
Generating SSH2 RSA host key:                              [  OK  ]
Generating SSH1 RSA host key:                              [  OK  ]
Generating SSH2 DSA host key:                              [  OK  ]
Starting sshd:                                             [  OK  ]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>启动完成后镜像进行ssh连接测试。</p>
<p>将容器提交为镜像：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@localhost admin]# docker commit 4d61bc1e379d centos6-ssh
sha256:9591270dae2dda5a96c94c47e291aae0eeab7599ada3cdf44701c4dfd72e8cee<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>使用新的镜像启动容器：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@localhost admin]# docker run -d -p 1122:22 centos6-ssh:latest &#x2F;usr&#x2F;sbin&#x2F;sshd -D
0019e8bb73550eec2526a101a19814ec92dfb045dd2fdca4d36175005e63ba20
[root@localhost admin]# docker ps
CONTAINER ID        IMAGE                COMMAND                  CREATED             STATUS              PORTS                   NAMES
0019e8bb7355        centos6-ssh:latest   &quot;&#x2F;usr&#x2F;sbin&#x2F;sshd -D&quot;      30 seconds ago      Up 28 seconds       0.0.0.0:1122-&gt;22&#x2F;tcp    blissful_albattani
5e9a1d7ea93e        nginx:latest         &quot;&#x2F;docker-entrypoint.…&quot;   2 hours ago         Up 2 hours          0.0.0.0:32768-&gt;80&#x2F;tcp   xenodochial_kare
3d4e986ad050        nginx:latest         &quot;&#x2F;docker-entrypoint.…&quot;   2 hours ago         Up 2 hours          0.0.0.0:9000-&gt;80&#x2F;tcp    vibrant_bhabha
ad8ef6db5021        nginx:latest         &quot;&#x2F;docker-entrypoint.…&quot;   2 hours ago         Up 2 hours          0.0.0.0:8080-&gt;80&#x2F;tcp    awesome_jang
5f2530020849        nginx:latest         &quot;&#x2F;docker-entrypoint.…&quot;   2 hours ago         Up 2 hours          0.0.0.0:80-&gt;80&#x2F;tcp      pensive_lumiere
76cf3b4dce49        ubuntu               &quot;&#x2F;bin&#x2F;bash&quot;              8 hours ago         Up 2 hours                                  test2
58bbd5afb8bf        ubuntu               &quot;&#x2F;bin&#x2F;bash&quot;              8 hours ago         Up 2 hours                                  test1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>进入到容器内，在容器里安装httpd服务：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@localhost admin]# docker exec -it 0019e8bb7355 &#x2F;bin&#x2F;bash
[root@0019e8bb7355 &#x2F;]# yum install https -y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>编写启动脚本：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@0019e8bb7355 &#x2F;]# touch init.sh
[root@0019e8bb7355 &#x2F;]# vi init.sh
#!&#x2F;bin&#x2F;bash 
&#x2F;etc&#x2F;init.d&#x2F;httpd start 
&#x2F;usr&#x2F;sbin&#x2F;sshd -D
[root@0019e8bb7355 &#x2F;]# chmod +x init.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>再次提交为新的镜像：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@localhost admin]# docker commit 0019e8bb7355 centos6-httpd
sha256:bd9f5c339cd8494f82b8cb06396446143824f819c59c9b971687f6a9193c718a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>启动镜像，做好端口映射。并在浏览器中输入宿主机的ip地址进行测试访问：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@localhost admin]# docker run -d -p 1222:22 -p 88:88 centos6-httpd &#x2F;init.sh
ecbc482a781975538e7c83763fb1573af811a5baf2bc7c93de176ebd5576f407
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p><img src="/2022/12/06/Docker%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2%E5%9F%BA%E7%A1%80/2.png" alt></p>
<h2 id="Docker容器连接"><a href="#Docker容器连接" class="headerlink" title="Docker容器连接"></a>Docker容器连接</h2><p>容器中可以运行一些网络应用，要让外部也可以访问这些应用，可以通过<code>-p</code>或<code>-P</code>参数来指定端口映射。下面来实现通过端口连接到一个docker容器。</p>
<h3 id="网络端口映射"><a href="#网络端口映射" class="headerlink" title="网络端口映射"></a>网络端口映射</h3><p>使用-P绑定端口号后，使用docker ps可以看到容器端口5000绑定主机端口32770</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@localhost admin]# docker run -d -p 32770:5000 training&#x2F;webapp python app.py
14a465d810df4e782f84c4e1ade99fd56f5e237c3de80d8f0c77dc7c3e642696
[root@localhost admin]# docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                     NAMES
14a465d810df        training&#x2F;webapp     &quot;python app.py&quot;     13 seconds ago      Up 12 seconds       0.0.0.0:32770-&gt;5000&#x2F;tcp   angry_bassi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>此外，还可以指定容器绑定的网络地址，如绑定127.0.0.1。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@localhost admin]# docker run -d -p 127.0.0.1:5001:5000 training&#x2F;webapp python app.py
6124b2108719c7e18b8b35992a06b3f66036ad0b951744bcfc1ca17158c2b6e3
[root@localhost admin]# docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                      NAMES
6124b2108719        training&#x2F;webapp     &quot;python app.py&quot;     6 seconds ago       Up 4 seconds        127.0.0.1:5001-&gt;5000&#x2F;tcp   keen_sammet
998f4a68770c        training&#x2F;webapp     &quot;python app.py&quot;     4 minutes ago       Up 4 minutes        0.0.0.0:32770-&gt;5000&#x2F;tcp    angry_bassi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这样便可以通过访问127.0.0.1:5001来访问容器的5000端口。这里默认都是绑定tcp端口，<strong>若要绑定UDP端口，则需要在端口后面加上/udp。</strong></p>
<h3 id="Docker容器互联"><a href="#Docker容器互联" class="headerlink" title="Docker容器互联"></a>Docker容器互联</h3><p>端口映射并不是唯一把docker连接到另一个容器的方法。docker有一个连接系统允许将多个容器连接在一起，共享连接信息。docker连接会创建一个父子关系，其中父容器可以看到子容器的信息。</p>
<h4 id="容器命名"><a href="#容器命名" class="headerlink" title="容器命名"></a>容器命名</h4><p>当要创建一个容器时，docker会自动对他进行命名，此外也可以使用—name标识来命名容器。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@localhost admin]# docker run -d -P --name runoob training&#x2F;webapp python app.py
561d0028ee9aafe9d014340ad8cecbaf7f5e395f05432e3bd149c797e5dd5f13
[root@localhost admin]# docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                      NAMES
561d0028ee9a        training&#x2F;webapp     &quot;python app.py&quot;     5 seconds ago       Up 4 seconds        0.0.0.0:32771-&gt;5000&#x2F;tcp    runoob<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="link参数连接容器"><a href="#link参数连接容器" class="headerlink" title="--link参数连接容器"></a><code>--link参数</code>连接容器</h4><p>使用<code>--link</code>参数可以让容器之间安全的进行交互。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#创建一个新的数据库容器
[root@localhost admin]# docker run -d --name db training&#x2F;postgres
Unable to find image &#39;training&#x2F;postgres:latest&#39; locally
latest: Pulling from training&#x2F;postgres
a3ed95caeb02: Pull complete 
6e71c809542e: Pull complete 
2978d9af87ba: Pull complete 
e1bca35b062f: Pull complete 
500b6decf741: Pull complete 
74b14ef2151f: Pull complete 
7afd5ed3826e: Pull complete 
3c69bb244f5e: Pull complete 
d86f9ec5aedf: Pull complete 
010fabf20157: Pull complete 
Digest: sha256:a945dc6dcfbc8d009c3d972931608344b76c2870ce796da00a827bd50791907e
Status: Downloaded newer image for training&#x2F;postgres:latest
ef6af7333f0af9302cc6935d48be863ba2db0fdb2c56eacf42c074aa62982b12
#然后创建一个新的web容器，并将他连接到db容器
[root@localhost admin]# docker run -d -P --name web --link db:db training&#x2F;webapp python app.py
62888e6365e6551d2ceb6a6ddf7afcd39e861119f97b691b5116dba8e250e444
[root@localhost admin]# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>此时db容器和web容器建立了互联关系。</p>
<p><code>--link</code>参数的格式为<code>--link name:alias</code>,其中<code>name</code>是要链接的容器的名称，<code>alias</code>是这个连接的别名。</p>
<p>此时使用<code>docker ps</code>来查看容器的连接：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@localhost admin]# docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                     NAMES
62888e6365e6        training&#x2F;webapp     &quot;python app.py&quot;          4 minutes ago       Up 4 minutes        0.0.0.0:32769-&gt;5000&#x2F;tcp   web
ef6af7333f0a        training&#x2F;postgres   &quot;su postgres -c &#39;&#x2F;us…&quot;   7 minutes ago       Up 7 minutes        5432&#x2F;tcp                  db<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>Docker在两个互联的容器之间创建了一个安全隧道，而且不用映射他们的端口到宿主主机上、在启动db容器的时候并没有使用<code>-p</code>和<code>-P</code>标记，从而避免了暴露数据库端口到外部网络上的可能。</p>
<p>Docker通过2种方式为容器公开连接信息：</p>
<ul>
<li>环境变量</li>
<li>更新<code>/etc/hosts</code>文件</li>
</ul>
<p>使用<code>env</code>命令来查看web容器的环境变量：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@localhost admin]# docker run --rm --name web2 --link db:db training&#x2F;webapp env
PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;sbin:&#x2F;bin
HOSTNAME&#x3D;1621d6dd6804
DB_PORT&#x3D;tcp:&#x2F;&#x2F;172.17.0.2:5432
DB_PORT_5432_TCP&#x3D;tcp:&#x2F;&#x2F;172.17.0.2:5432
DB_PORT_5432_TCP_ADDR&#x3D;172.17.0.2
DB_PORT_5432_TCP_PORT&#x3D;5432
DB_PORT_5432_TCP_PROTO&#x3D;tcp
DB_NAME&#x3D;&#x2F;web2&#x2F;db
DB_ENV_PG_VERSION&#x3D;9.3
HOME&#x3D;&#x2F;root

#DB_开头的环境变量是供web容器连接db容器使用，前缀采用大写的连接别名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>除了环境变量，Docker还添加host信息到父容器的<code>/etc/hosts</code>的文件。下面是父容器web的hosts文件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@localhost admin]# docker run -t -i --rm --link db:db training&#x2F;webapp &#x2F;bin&#x2F;bash
root@5f57b7dcc730:&#x2F;opt&#x2F;webapp# cat &#x2F;etc&#x2F;hosts
127.0.0.1	localhost
::1	localhost ip6-localhost ip6-loopback
fe00::0	ip6-localnet
ff00::0	ip6-mcastprefix
ff02::1	ip6-allnodes
ff02::2	ip6-allrouters
172.17.0.2	db ef6af7333f0a
172.17.0.4	5f57b7dcc730

#这里有2个host，第一个是web容器，web容器用id作为它的主机名。第二个是db容器的ip和主机名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在web容器中安装ping命令来测试是否跟db容器的连通：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@5f57b7dcc730:&#x2F;opt&#x2F;webapp# apt-get install -yqq inetutils-ping
root@5f57b7dcc730:&#x2F;opt&#x2F;webapp# ping db
PING db (172.17.0.2): 56 data bytes
64 bytes from 172.17.0.2: icmp_seq&#x3D;0 ttl&#x3D;64 time&#x3D;0.740 ms
64 bytes from 172.17.0.2: icmp_seq&#x3D;1 ttl&#x3D;64 time&#x3D;0.089 ms
64 bytes from 172.17.0.2: icmp_seq&#x3D;2 ttl&#x3D;64 time&#x3D;0.075 ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>用ping来测试db容器，它会解析成172.17.0.2。</p>
<p>注意：官方的Ubuntu镜像默认没有安装ping，因此需要自行安装。</p>
<p>用户可以链接多个父容器到子容器，比如可以链接多个web到db容器上。</p>
<h4 id="通过局域网络连接容器"><a href="#通过局域网络连接容器" class="headerlink" title="通过局域网络连接容器"></a>通过局域网络连接容器</h4><p>由于 centos-ssh镜像已失效，因此，上述步骤更新为如下：</p>
<ul>
<li><p>创建名为t-net的网络</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@localhost admin]# docker network create -d bridge t-net 
#其中-d表示网络类型，默认为bridge
# 列出当前主机下所有网络
[root@localhost admin]# docker network ls
NETWORK ID     NAME               DRIVER    SCOPE

fee646ecddfa   t-net              bridge    local
ebdcdb71d1ba   test-net           bridge    local<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>打开一个终端，基于镜像centos:7启动容器app1，并将容器app1加入到网络t-net中，进入到容器app1里：</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@localhost admin]# docker run -it --name app1 --network t-net centos:7
Unable to find image &#39;centos:7&#39; locally
7: Pulling from library&#x2F;centos
2d473b07cdd5: Pull complete 
Digest: sha256:9d4bcbbb213dfd745b58be38b13b996ebb5ac315fe75711bd618426a630e0987
Status: Downloaded newer image for centos:7
[root@0ab7505ff23e &#x2F;]# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>另外打开一个终端，基于镜像centos:7启动容器app2，并将容器app2也加入到网络t-net中，进入到容器app2里：</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@localhost admin]# docker run -it --name app2 --network t-net centos:7
[root@6a32efbb3dbe &#x2F;]# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>在容器app1中<code>ping app2</code>,在容器app2中<code>ping app1</code>（注意区分两个终端）：</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@0ab7505ff23e &#x2F;]# ping app2
PING app2 (172.20.0.3) 56(84) bytes of data.
64 bytes from app2.t-net (172.20.0.3): icmp_seq&#x3D;1 ttl&#x3D;64 time&#x3D;0.045 ms
64 bytes from app2.t-net (172.20.0.3): icmp_seq&#x3D;2 ttl&#x3D;64 time&#x3D;0.064 ms
^C
--- app2 ping statistics ---
2 packets transmitted, 2 received, 0% packet loss, time 1000ms
rtt min&#x2F;avg&#x2F;max&#x2F;mdev &#x3D; 0.045&#x2F;0.054&#x2F;0.064&#x2F;0.012 ms

[root@6a32efbb3dbe &#x2F;]# ping app1
PING app1 (172.20.0.2) 56(84) bytes of data.
64 bytes from app1.t-net (172.20.0.2): icmp_seq&#x3D;1 ttl&#x3D;64 time&#x3D;0.092 ms
64 bytes from app1.t-net (172.20.0.2): icmp_seq&#x3D;2 ttl&#x3D;64 time&#x3D;0.214 ms
64 bytes from app1.t-net (172.20.0.2): icmp_seq&#x3D;3 ttl&#x3D;64 time&#x3D;0.077 ms
^C
--- app1 ping statistics ---
3 packets transmitted, 3 received, 0% packet loss, time 2002ms
rtt min&#x2F;avg&#x2F;max&#x2F;mdev &#x3D; 0.077&#x2F;0.127&#x2F;0.214&#x2F;0.062 ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><strong>以上结果则表示0丢包，容器之间能够正常通讯。</strong></p>
</li>
</ul>
<h2 id="Docker仓库管理"><a href="#Docker仓库管理" class="headerlink" title="Docker仓库管理"></a>Docker仓库管理</h2><p>仓库是集中存放镜像的地方，目前Docker官方维护了一个公共仓库Docker Hub，大部分需求的镜像都可以通过在Docker Hub中直接找到。</p>
<h3 id="登录和登出"><a href="#登录和登出" class="headerlink" title="登录和登出"></a>登录和登出</h3><p>若还没有Docker账号，可在 <a href="https://hub.docker.com/">https://hub.docker.com</a> 上免费注册一个。然后输入用户名和密码登录，登录成功后便可以从Docker hub上拉去自己账号下的全部镜像。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@localhost admin]# docker login
Login with your Docker ID to push and pull images from Docker Hub. If you don&#39;t have a Docker ID, head over to https:&#x2F;&#x2F;hub.docker.com to create one.
Username: tangmenjue
Password: 
Login Succeeded<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>使用<code>docker logout</code>命令可以登出Docker hub。</p>
<h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><p>使用<code>docker search</code>命令可以查找官方仓库中的镜像，并利用<code>docker pull</code>命令将其下载到本地，例如要下载ubuntu镜像，操作如下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@localhost admin]# docker search ubuntu
NAME                             DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED
ubuntu                           Ubuntu is a Debian-based Linux operating sys…   15312               [OK]                
websphere-liberty                WebSphere Liberty multi-architecture images …   290                 [OK]                
ubuntu-upstart                   DEPRECATED, as is Upstart (find other proces…   112                 [OK]                
neurodebian                      NeuroDebian provides neuroscience research s…   97                  [OK]                
ubuntu&#x2F;nginx                     Nginx, a high-performance reverse proxy &amp; we…   69                                      
open-liberty                     Open Liberty multi-architecture images based…   56                  [OK]                
ubuntu&#x2F;apache2                   Apache, a secure &amp; extensible open-source HT…   50                                      
ubuntu-debootstrap               DEPRECATED; use &quot;ubuntu&quot; instead                49                  [OK]                
...
[root@localhost admin]# docker pull ubuntu
Using default tag: latest
latest: Pulling from library&#x2F;ubuntu
7b1a6ab2e44d: Pull complete 
Digest: sha256:626ffe58f6e7566e00254b638eb7e0f3b11d4da9675088f4781a50ae288f3322
Status: Downloaded newer image for ubuntu:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="推送镜像"><a href="#推送镜像" class="headerlink" title="推送镜像"></a>推送镜像</h3><p>用户登录后，可以通过<code>docker push</code>命令将自己的镜像推送到Docker Hub，如：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#查看目前已有的镜像
root@localhost admin]# docker image ls
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
centos              latest              5d0da3dc9764        14 months ago       231MB
centos              6.7                 9f1de3c6ad53        3 years ago         191MB
centos              6.8                 82f3b5f3c58f        3 years ago         195MB
ubuntu              15.10               9b9cb95443b5        6 years ago         137MB
training&#x2F;webapp     latest              6fae60ef3446        7 years ago         349MB
training&#x2F;postgres   latest              6fa973bb3c26        8 years ago         365MB
#给ubuntu:15.10镜像打上标签，以下的tangmenjue都要替换成自己的Docker账号用户名
[root@localhost admin]# docker tag ubuntu:15.10 tangmenjue&#x2F;ubuntu:15.10
#查看镜像的变化
[root@localhost admin]# docker image ls
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
centos              latest              5d0da3dc9764        14 months ago       231MB
centos              6.7                 9f1de3c6ad53        3 years ago         191MB
centos              6.8                 82f3b5f3c58f        3 years ago         195MB
ubuntu              15.10               9b9cb95443b5        6 years ago         137MB
tangmenjue&#x2F;ubuntu   15.10               9b9cb95443b5        6 years ago         137MB
training&#x2F;webapp     latest              6fae60ef3446        7 years ago         349MB
training&#x2F;postgres   latest

#将自己的镜像推送到Docker Hub

[root@localhost admin]# docker push tangmenjue&#x2F;ubuntu:15.10
The push refers to repository [docker.io&#x2F;tangmenjue&#x2F;ubuntu]
98d59071f692: Pushed 
af288f00b8a7: Pushed 
4b955941a4d0: Mounted from library&#x2F;ubuntu 
f121afdbbd5d: Pushed 
15.10: digest: sha256:cc56b237986f2b9282f058cc7875ff5e9d0d9081934c8982ea1ec21288eeefeb size: 1150
[root@localhost admin]# docker search tangmenjue&#x2F;ubuntu
NAME                DESCRIPTION         STARS               OFFICIAL            AUTOMATED
tangmenjue&#x2F;ubuntu                       0                               <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Docker</category>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>应用部署</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask Web开发学习笔记（一）</title>
    <url>/2022/10/18/Flask%20Web%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="安装部署"><a href="#安装部署" class="headerlink" title="安装部署"></a>安装部署</h1><h2 id="创建环境"><a href="#创建环境" class="headerlink" title="创建环境"></a>创建环境</h2><p>使用pip分别安装virtualenv、simplejson、flask、sqlalchemy模块，其命令用法为：<code>pip install 安装的模块名</code>。</p>
<p>virtualenv安装完毕后，新建一个项目文件夹myproject，打开cmd，使用cd切换到myproject目录，通过下列命令来创建虚拟环境venv，命令完成后会在myproject文件夹里生成一个venv文件夹。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cd myproject
virtualenv venv <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="激活venv环境"><a href="#激活venv环境" class="headerlink" title="激活venv环境"></a>激活venv环境</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">venv\scripts\activate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="激活virtualenv中的Flask"><a href="#激活virtualenv中的Flask" class="headerlink" title="激活virtualenv中的Flask"></a>激活virtualenv中的Flask</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip install Flask<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h1 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h1><h2 id="一个最小的应用"><a href="#一个最小的应用" class="headerlink" title="一个最小的应用"></a>一个最小的应用</h2><p>在一个.py文件中输入以下代码，并运行，可以得到一个最小的Flask应用。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">from flask import Flask #导出Flask类
# 创建了该类的实例，第一个参数为应用模块名，单一模块使用__name__
app&#x3D;Flask(__name__)

@app.route(&#39;&#x2F;&#39;)# 使用装饰器告诉Flask什么样的URL能触发函数
def hello_world():
    return &#39;Hello World!&#39;
if __name__&#x3D;&#x3D;&#39;__main__&#39;:
    app.run()# run函数让应用运行在本地服务器上<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>运行代码后访问<a href="http://127.0.0.1:5000，可以在页面中看到Hello">http://127.0.0.1:5000，可以在页面中看到Hello</a> World!的问候。</p>
<h2 id="外部可访问的服务器："><a href="#外部可访问的服务器：" class="headerlink" title="外部可访问的服务器："></a>外部可访问的服务器：</h2><p>若运行这个服务器时，会发现它只能从本地的计算机上访问，网络中其他的用户都不能访问。在调试模式下，用户可以在本地计算机上执行任意Python代码。因此这个行为是默认的。</p>
<p>若禁用了debug或信任所在网络的用户，可以修改调用run()方法来使服务器是公开可用的：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">app.run(host&#x3D;&#39;0.0.0.0&#39;)# 让操作系统监听所有公网IP<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="调试模式"><a href="#调试模式" class="headerlink" title="调试模式"></a>调试模式</h2><p>若启动了调试支持，服务器会在代码修改后自动重新载入，并在发送错误时提供一个相对有用的调试器。</p>
<h3 id="方法一启动调试模式："><a href="#方法一启动调试模式：" class="headerlink" title="方法一启动调试模式："></a>方法一启动调试模式：</h3><p>直接在应用对象上设置：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">app.debug&#x3D;True
app.run()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="方法二启动调试模式："><a href="#方法二启动调试模式：" class="headerlink" title="方法二启动调试模式："></a>方法二启动调试模式：</h3><p>作为run方法的一个参数传入：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">app.run(debug&#x3D;True)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><strong>注意：交互式调试器绝对不能用于生产环境。</strong></p>
<h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><p>Web应用的URL易于人们辨识记忆，对于面向使用低速网络连接移动设备访问的应用特别有用。用route()装饰器把一个函数绑定到对于的URL上，可以实现不访问索引页，直接访问想要的页面。例如：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">from flask import Flask 
app&#x3D;Flask(__name__)

@app.route(&#39;&#x2F;&#39;)
def index():
    return &#39;Index Page&#39;

@app.route(&#39;&#x2F;hello&#39;)    
def hello_world():
    return &#39;Hello World!&#39;

if __name__&#x3D;&#x3D;&#39;__main__&#39;:
    app.run()
#运行结果如下：
默认页面 Index Page
输入127.0.0.1:5000&#x2F;hello路由时，跳转到Hello World!的页面<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>不仅如此，还可以构造含有动态部分的URL，也可以在一个函数上附着多个规则。</p>
<h2 id="变量规则"><a href="#变量规则" class="headerlink" title="变量规则"></a>变量规则</h2><p>给URL添加变量部分，可以把这些特殊的字段标记为<code>&lt;variable_name&gt;</code>，这个部分将会作为命名参数传递到函数中。规则可以用<code>&lt;converter:variable_name&gt;</code>指定一个可选的转换器。例如：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">from flask import Flask 
app&#x3D;Flask(__name__)

@app.route(&#39;&#x2F;&#39;)
def index():
    return &#39;Index Page&#39;

@app.route(&#39;&#x2F;user&#x2F;&lt;username&gt;&#39;)    
def show_user_profile(username):
    return &#39;User %s&#39; % username

@app.route(&#39;&#x2F;post&#x2F;&lt;int:post_id&gt;&#39;)
def show_post(post_id):
    return &#39;Post %d&#39; % post_id
if __name__&#x3D;&#x3D;&#39;__main__&#39;:
    app.run()
#运行结果如下：
默认页面 Index Page
输入127.0.0.1:5000&#x2F;user&#x2F;ok路由时，跳转到User ok的页面
输入127.0.0.1:5000&#x2F;post&#x2F;8080路由时，跳转到Post 8080的页面    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>转换器有下面几种：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center"><strong>int</strong></th>
<th style="text-align:center"><strong>接受整数</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong>float</strong></td>
<td style="text-align:center"><strong>同 int ，但是接受浮点数</strong></td>
</tr>
<tr>
<td style="text-align:center"><strong>path</strong></td>
<td style="text-align:center"><strong>和默认的相似，但也接受斜线</strong></td>
</tr>
</tbody>
</table>
</div>
<h2 id="唯一URL-重定向行为："><a href="#唯一URL-重定向行为：" class="headerlink" title="唯一URL/重定向行为："></a>唯一URL/重定向行为：</h2><p>Flack的URL规则基于Werkzeug的路由模块，该模块基于Apache以及更早的HTTP服务器主张的先例，保证优雅且唯一的URL。例如：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">from flask import Flask 
app&#x3D;Flask(__name__)

@app.route(&#39;&#x2F;&#39;)
def index():
    return &#39;Index Page&#39;

@app.route(&#39;&#x2F;projects&#x2F;&#39;)
def projects():
    return &#39;The project page&#39;
@app.route(&#39;&#x2F;about&#39;)    
def about():
    return &#39;The about page&#39;
if __name__&#x3D;&#x3D;&#39;__main__&#39;:
    app.run()
#运行结果如下：
默认页面 Index Page  
输入127.0.0.1:5000&#x2F;projects&#x2F;路由时，跳转到The project page的页面
输入127.0.0.1:5000&#x2F;projects路由时，跳转到The project page的页面
输入127.0.0.1:5000&#x2F;about路由时，跳转到The about page的页面    
输入127.0.0.1:5000&#x2F;about&#x2F;路由时，跳转到404 Not Found的页面      <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如此可见，指向projects的规范带结尾斜线，访问结尾不带斜线的URL会被Flask重定向到带斜线的规范URL中。而指向about的规范不带结尾斜线，访问结尾带斜线的URL会产生一个404”Not Found”错误。</p>
<p>这一行为使得在遗忘结尾斜线时，允许关联的URL接任工作，同时也保证了URL的唯一，有助于避免搜索引擎索引同一个页面两次。</p>
<h2 id="构造URL"><a href="#构造URL" class="headerlink" title="构造URL"></a>构造URL</h2><p>FLask不仅可以匹配URL，还可以用<code>url_for()</code>来给指定的函数构造URL。它接收函数名作为第一个参数，也接受对于URL规则的变量部分的命名函数。位置变量部分会添加到URL末尾作为查询函数。例如：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">from flask import Flask,url_for
app&#x3D;Flask(__name__)

@app.route(&#39;&#x2F;&#39;)
def index():
    return &#39;The index page&#39;
@app.route(&#39;&#x2F;login&#39;)
def login():
    return &#39;The login page&#39;

@app.route(&#39;&#x2F;user&#x2F;&lt;username&gt;&#39;)
def profile(username):
    return &#39;The profile page&#39;

with app.test_request_context():
    print(url_for(&#39;index&#39;))
    print(url_for(&#39;login&#39;))
    print(url_for(&#39;login&#39;,next&#x3D;&#39;&#x2F;&#39;))
    print(url_for(&#39;profile&#39;,username&#x3D;&#39;Bob&#39;))

if __name__&#x3D;&#x3D;&#39;__main__&#39;:
    app.run()

#运行结果如下：
默认页面 Index Page  
输入127.0.0.1:5000&#x2F;login路由时，跳转到The login page的页面
输入127.0.0.1:5000&#x2F;login?next&#x3D;路由时，跳转到The login page的页面
输入127.0.0.1:5000&#x2F;user&#x2F;Bob路由时，跳转到The profile page的页面    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>构建URL而非在模板中硬编码的理由：</strong></p>
<ul>
<li>反向构建通常比硬编码的描述性更好，它允许一次性修改URL，而不是到处边找边改</li>
<li>URL构建会转义特殊字符和Unicode数据</li>
<li>若应用不位于URL的根路径，url_for()会妥善处理这个问题</li>
</ul>
<h2 id="HTTP方法"><a href="#HTTP方法" class="headerlink" title="HTTP方法"></a>HTTP方法</h2><p>HTTP方法告知服务器，客户端想对请求的页面做些什么，下面是<strong>常见的HTTP方法</strong>：</p>
<h3 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h3><p>浏览器告知服务器：只获取页面上的信息并发给我。</p>
<h3 id="HEAD"><a href="#HEAD" class="headerlink" title="HEAD"></a>HEAD</h3><p>浏览器告诉服务器：欲获取信息，但是只关心消息头。应用应像处理GET请求一样来处理它，但不分发实际内容。在Flask中完全无需人工干预。</p>
<h3 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h3><p>浏览器告诉服务器：想在URL上发布新消息。并且服务器必须确保数据已存储且只存储一次。这是HTML表通常发送数据到服务器的方法。</p>
<h3 id="PUT"><a href="#PUT" class="headerlink" title="PUT"></a>PUT</h3><p>类似于POST但服务器可能触发了存储过程多次，多次覆盖掉旧值。考虑到传输中连接可能会丢失，在这种情况下浏览器和服务器之间的系统可能安全地第二次接收请求，而不破坏其他东西。</p>
<h3 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h3><p>删除给定位置的信息。</p>
<h3 id="OPTIONS"><a href="#OPTIONS" class="headerlink" title="OPTIONS"></a>OPTIONS</h3><p>给客户端提供一个途径来弄清这个URL支持哪些HTTP方法。</p>
<p>HTTP有许多不同的访问URL方法。默认情况下，路由只回应GET请求，但是通过route()装饰器传递methods参数可以改变这个行为。例如：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">@app.route(&#39;login&#39;,methods&#x3D;[&#39;GET&#39;,&#39;POST&#39;])
def login():
    if request.method&#x3D;&#x3D;&#39;POST&#39;:
        de_the_login()
    else:
        show_the_login_form()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>若存在GET，会自动添加HEAD，无需干预，确保遵照HTTP协议处理HEAD请求。</p>
<h2 id="静态文件"><a href="#静态文件" class="headerlink" title="静态文件"></a>静态文件</h2><p>动态web应用也会需要静态文件，通常是CSS和JavaScript文件。理想状况下，已经配置好Web服务器来提供静态文件，但在开发中，Flask也可以做到。只要在包中或是，模块所在的目录中创建一个名为static的文件夹，在应用中使用<code>/static</code>即可访问。</p>
<p>给静态文件生成URL，使用特殊的<code>static</code>端，所生成的文件应该存储在<code>static/style.css</code>：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">url_for(&#39;static&#39;,filename&#x3D;&#39;style.css&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="模板渲染"><a href="#模板渲染" class="headerlink" title="模板渲染"></a>模板渲染</h2><p>Flask配备了Jinja2模板引擎来生成HTML，可以使用render_template()方法来渲染模板，将模板名和关键字参数传入模板的变量。例如：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">from flask import render_template
@app.route(&#39;&#x2F;hello&#x2F;&#39;)
@app.route(&#39;hello&#x2F;&lt;name&gt;&#39;)
def hello(name&#x3D;None):
    return render_template(&#39;hello.html&#39;,name&#x3D;name)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>Flask会在templates文件夹里寻找模板，若应用是个模块，则该文件夹与模块通缉，它是个包，则该文件夹作为包的子目录：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">#应用是个模块
&#x2F;application.py
&#x2F;templates
    &#x2F;hello.html
#应用是个包    
&#x2F;application.py
    &#x2F;__init__.py
    &#x2F;templates
        &#x2F;hello.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>自动转义功能在<code>.html</code>、<code>.htm</code>、<code>.xml</code>、<code>xhtml</code>扩展名的模板中是默认是开启的，若name包含HTML，它将会被自动转义。从字符串加载的模板禁用自动转义。若信任一个变量，并且知道它是安全的，可以用Markup类或<code>|safe</code>过滤器在模板中把它标记为安全的。</p>
<h2 id="访问请求数据"><a href="#访问请求数据" class="headerlink" title="访问请求数据"></a>访问请求数据</h2><p>对于Web应用，与客户端发送给服务端的数据交互至关重要。在Flask中由全局的request对象来提供这些信息。环境作用域保证了对象是全局的情况下，线程也是安全的。</p>
<h3 id="环境局部变量"><a href="#环境局部变量" class="headerlink" title="环境局部变量"></a>环境局部变量</h3><p>依赖于一段请求对象的代码，因没有请求对象无法正常运行，需要自行创建一个请求对象并把它绑定到环境中。做单元测试最简单的解决方案是：用test_request_context()环境管理器，结合with声明，绑定一个测试请求使之能进行交互。例如：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">from flask import request 
with app.test_request_context(&#39;&#x2F;hello&#39;,method&#x3D;&#39;POST&#39;):
    assert request.path&#x3D;&#x3D;&#39;&#x2F;hello&#39;
    assert request.method&#x3D;&#x3D;&#39;POST&#39;
#或者传递整个WSGI环境给request_context()方法
with app.request_context(environ):
    assert request.method&#x3D;&#x3D;&#39;POST&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="请求对象"><a href="#请求对象" class="headerlink" title="请求对象"></a>请求对象</h3><p>当前请求的HTTP方法可通过method属性来访问，通过request.form属性来访问表单数据。例如：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">@app.route(&#39;login&#39;,methods&#x3D;[&#39;GET&#39;,&#39;POST&#39;])
def login():
    error&#x3D;None
    if request.method&#x3D;&#x3D;&#39;POST&#39;:
        if valid_login(request.form[&#39;username&#39;],request.form[&#39;password&#39;]):
            return log_the_user_in(request.form[&#39;username&#39;])
    else:
        error&#x3D;&#39;Invalid username&#x2F;password&#39;
    return render_template(&#39;login.html&#39;,error&#x3D;error)  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>当访问form属性中不存在的键时会抛出一个特殊的KeyError异常，可以想捕获标准的KeyError一样来捕获它，若对其不做处理，他会显示一个HTTP 400 Bad Request页面。</p>
<p>可以通过args属性来访问URL中 提交的参数，可以用get参数或捕获KeyError。：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">searchword&#x3D;request.args.get(&#39;q&#39;,&#39;&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p>上传文件需要先在HTML表单中设置`enctype=”multipart/form-data”属性。已上传的文件存储在内存或者是临时文件夹里，可以通过请求对象的files属性访问它们。每个上传的文件都会存储在这个字典里，可以通过save()方法把文件保存到服务器的文件系统上。例如：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">from flask import request
@app.route(&#39;&#x2F;upload&#39;,methods&#x3D;[&#39;GET&#39;,&#39;POST&#39;])
def upload_file():
    if request.method&#x3D;&#x3D;&#39;POST&#39;:
        f&#x3D;request.files[&#39;the file&#39;]
        f.save(&#x2F;var&#x2F;www&#x2F;uploads&#x2F;uploaded_file.txt)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>若想知道上传前文件在客户端的文件名是什么，可以访问filename属性，但由于这个值是可以伪造的，故不要信任这个值。若要把文件按客户端提供的文件名存储在服务器上，可以把它传递给Werkzrug提供的secure_filename()函数：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">from flask import request
from werkzeug import secure_filename

@app.route(&#39;&#x2F;upload&#39;,methods&#x3D;[&#39;GET&#39;,&#39;POST&#39;])
def upload_file():
    if request.method&#x3D;&#x3D;&#39;POST&#39;:
        f&#x3D;request.files[&#39;the file&#39;]
        f.save(&#39;&#x2F;var&#x2F;www&#x2F;uploads&#x2F;&#39;+secure_filename(f.filename))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="Cookies"><a href="#Cookies" class="headerlink" title="Cookies"></a>Cookies</h2><p>可以通过<code>cookies</code>属性来访问Cookies，用响应对象的<code>set_cookie</code>方法来设置Cookies。请求对象的<code>cookies</code>属性是一个内容为客户端提交的所有Cookies的字典。</p>
<p><strong>读取Cookies:</strong></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">from flask import request
@app.route(&#39;&#x2F;&#39;)
def index():
    username&#x3D;request.cookies.get(&#39;username&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>存储Cookies：</strong></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">from flask import request
@app.route(&#39;&#x2F;&#39;)
def index():
    resp&#x3D;make_response(render_template(...))
    resp.set_cookie(&#39;username&#39;,&#39;the username&#39;)
    return resp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>Cookie是设置在响应对象上的。由于通常视图函数只是返回字符串，之后Flask将字符串转换为响应对象。若要显式地转换，可以使用<code>make_response()</code>函数然后再进行修改。</p>
<h2 id="重定向和错误"><a href="#重定向和错误" class="headerlink" title="重定向和错误"></a>重定向和错误</h2><p>用redirect()函数把用户重定向到其他地方。用abort()函数放弃请求并返回错误代码。例如：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">from flask import Flask,request
app&#x3D;Flask(__name__)

@app.route(&#39;&#x2F;&#39;)
def index():
    return redirect(url_for(&#39;login&#39;))

@app.route(&#39;&#x2F;login&#39;)    
def login():
    abort(401)
    this_is_never_executed()
if __name__&#x3D;&#x3D;&#39;__main__&#39;:
    app.run()    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>默认情况下，错误代码会显示一个黑白的错误页面。可以用errorhandler()装饰器来定制错误页面：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">from flask import render_template
@app.errorhandler(404)    
def page_not_found(error):
    return render_template(&#39;page_not_found.html&#39;),404
#404即告诉Flask该页的错误代码是404，即没有找到，默认为200，即一切正常<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="关于响应"><a href="#关于响应" class="headerlink" title="关于响应"></a>关于响应</h2><p>视图函数的返回值会被自动转换为一个响应对象。若返回值是一个字符串，它 被转换为该字符串为主体的、状态码为<code>200 OK</code>，MIME类型是<code>text/html</code>的响应对象。</p>
<p>Flask把返回值转换为响应对象的逻辑如下：</p>
<ol>
<li>若返回的是一个合法的响应对象，它会从视图直接返回。</li>
<li>若返回的是一个字符串，响应对象会用字符串数据和默认参数创建。</li>
<li>若返回的是一个元组且元组中的元素可以提供额外的信息。这样的元组必须是<code>(response,status,headers)</code>的形式，且至少包含一个元素。status值会覆盖状态代码，headers可以是一个列表或字典，作为额外的消息标头值。</li>
<li>若上述条件都不满足，、Flask会假设返回值是一个合法的WSGI应用程序，并转换为一个请求对象。</li>
<li>若想再视图里操纵上述步骤结果的响应对象，可以使用make_response()函数。</li>
</ol>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">#假设有以下视图
@app.errorhandler(404)    
def not_found(error):
    return render_template(&#39;error.html&#39;),404
#只需要把返回值表达式传递给make_response()，获取结果对象并修改，然后再返回它
@app.errorhandler(404)    
def not_found(error):
    resp&#x3D;make_response(render_template(&#39;error.html&#39;),404)
    resp.headers[&#39;X-Somthing&#39;]&#x3D;&#39;A value&#39;
    return resp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h2><p>除请求对象外，还有一个会话（session）对象。它允许在不同请求间存储特定用户的信息。他说在Cookies的基础上实现的，并且对Cookies进行密钥签名。这意味着用户可以查看Cookies内容但由于没有签名的密钥不能修改它。会话工作的例子如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">from flask import Flask,session,redirect,url_for,escape,request
app&#x3D;Flask(__name__)

@app.route(&#39;&#x2F;&#39;)
def index():
    if &#39;username&#39; in session:
        return &#39;Logged in as %s&#39; % escape(session[&#39;username&#39;])
    return &#39;You are not logged in&#39;

@app.route(&#39;&#x2F;login&#39;,methods&#x3D;[&#39;GET&#39;,&#39;POST&#39;])    
def login():
    if request.method&#x3D;&#x3D;&#39;POST&#39;:
        session[&#39;username&#39;]&#x3D;request.form[&#39;username&#39;]
        return redirect(url_for(&#39;index&#39;))
    return &#39;&#39;&#39;
        &lt;form action&#x3D;&quot;&quot; method&#x3D;&quot;post&quot;&gt;
            &lt;p&gt;&lt;input type&#x3D;text name&#x3D;username&gt;
            &lt;p&gt;&lt;input type&#x3D;submit value&#x3D;Login&gt;
        &lt;&#x2F;form&gt;
    &#39;&#39;&#39;
@app.route(&#39;&#x2F;logout&#39;)
def logout():
    session.pop(&#39;username&#39;,None)
    return redirect(url_for(&#39;index&#39;))
app.secret_kry&#x3D;&#39;A0Zr98j&#x2F;3yX R~XHH!jmN]LWX&#x2F;,?R&#39;    
if __name__&#x3D;&#x3D;&#39;__main__&#39;:
    app.run()    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>生成强密钥：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">import os    
print(os.urandom(24))
#运行结果如下
b&#39;\x9b\xc9@\x9bN]\xd9]H\xd6,\xfam\x9c\x90\xddu\x19^\x14COG\x93&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>使用基于cookie的会话需注意：Flask会将放进会话对象的值序列化值Cookies。若发现某些值在请求之间没有持久存在，而Cookies已经启用且没有明显的错误信息。此时应检查页面响应中Cookies的大小，并与Web浏览器所支持的大小对比。</p>
<h2 id="消息闪现"><a href="#消息闪现" class="headerlink" title="消息闪现"></a>消息闪现</h2><p>Flask提供了消息闪现系统，可以简单地给用户返回。消息闪现系统通常会在请求结束时记录信息，并在下一个（且仅在下一个）请求中访问记录的信息。展现这些信息通常要结果模板布局。使用flash()方法可以闪现一条消息，在模板中也可以使用。</p>
<h2 id="日志记录"><a href="#日志记录" class="headerlink" title="日志记录"></a>日志记录</h2><p>Flask预置了日志系统，附带的logger是一个标准日志类Logger：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">app.logger.debug(&#39;A value for debugging&#39;)
app.logger.warning(&#39;A warning occurred (%d apples)&#39;,42)
app.logger.error(&#39;An error occurred&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="整合WSGI中间件"><a href="#整合WSGI中间件" class="headerlink" title="整合WSGI中间件"></a>整合WSGI中间件</h2><p>若想给应用添加WSGI中间件，可以封装内部WSGI应用。如想用Werkzrug包中的某个中间件来应付lighttpd中的bugs：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">from werkzeug.contrib.fixers import LighttpdCGIRootFix
app.wsgi_app&#x3D;LighttpdCGIRootFix(app.wsgi_app)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Web框架</category>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Flask Web</tag>
        <tag>后端</tag>
        <tag>Web框架</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker应用部署实战</title>
    <url>/2022/12/15/Docker%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2%E5%AE%9E%E6%88%98/</url>
    <content><![CDATA[<h1 id="Centos部署应用步骤"><a href="#Centos部署应用步骤" class="headerlink" title="Centos部署应用步骤"></a>Centos部署应用步骤</h1><h2 id="配置代码运行环境"><a href="#配置代码运行环境" class="headerlink" title="配置代码运行环境"></a>配置代码运行环境</h2><h3 id="nginx下载及配置"><a href="#nginx下载及配置" class="headerlink" title="nginx下载及配置"></a>nginx下载及配置</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#centos下载apache
[root@localhost admin]# yum install httpd 

#centos下载nginx
[root@localhost admin]# yum install epel-release
[root@localhost httpd]# yum install -y update
[root@localhost httpd]# yum install -y nginx

#打开防火墙端口80和443
[root@localhost httpd]# firewall-cmd --permanent --zone&#x3D;public --add-service&#x3D;http
[root@localhost httpd]# firewall-cmd --permanent --zone&#x3D;public --add-service&#x3D;https
[root@localhost httpd]# firewall-cmd --reload

#启动nignx服务
[root@localhost httpd]# systemctl start nginx

#查看nignx进程的状态
[root@localhost admin]# systemctl status nginx
● nginx.service - The nginx HTTP and reverse proxy server
   Loaded: loaded (&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;nginx.service; disabled; vendor preset: disabled)
   Active: active (running) since 日 2022-12-11 18:32:09 PST; 1min 10s ago
  Process: 5678 ExecStart&#x3D;&#x2F;usr&#x2F;sbin&#x2F;nginx (code&#x3D;exited, status&#x3D;0&#x2F;SUCCESS)
  Process: 5675 ExecStartPre&#x3D;&#x2F;usr&#x2F;sbin&#x2F;nginx -t (code&#x3D;exited, status&#x3D;0&#x2F;SUCCESS)
  Process: 5670 ExecStartPre&#x3D;&#x2F;usr&#x2F;bin&#x2F;rm -f &#x2F;run&#x2F;nginx.pid (code&#x3D;exited, status&#x3D;0&#x2F;SUCCESS)
 Main PID: 5680 (nginx)
    Tasks: 2
   CGroup: &#x2F;system.slice&#x2F;nginx.service
           ├─5680 nginx: master process &#x2F;usr&#x2F;sbin&#x2F;nginx
           └─5683 nginx: worker process

12月 11 18:32:09 localhost.localdomain systemd[1]: Starting The nginx HTTP a...
12月 11 18:32:09 localhost.localdomain nginx[5675]: nginx: the configuration...
12月 11 18:32:09 localhost.localdomain nginx[5675]: nginx: configuration fil...
12月 11 18:32:09 localhost.localdomain systemd[1]: Started The nginx HTTP an...
Hint: Some lines were ellipsized, use -l to show in full.

#设置nignx服务开机自启动
[root@localhost httpd]# systemctl enable nginx
Created symlink from &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;multi-user.target.wants&#x2F;nginx.service to &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;nginx.service.

#进入conf.d目录新建文件并填入以下内容
[root@localhost httpd]# cd &#x2F;etc&#x2F;nginx&#x2F;conf.d
[root@localhost conf.d]# ls
[root@localhost conf.d]# touch flask_test.conf
[root@localhost conf.d]# vi flask_test.conf
server &#123;
    listen       80;
    server_name  localhost;

    # api代理转发
    location &#x2F; &#123;
        proxy_redirect  off;
        proxy_set_header    Host $host;
        proxy_set_header    X-Real-IP            $remote_addr;
        proxy_set_header    X-Forwarded-For      $proxy_add_x_forwarded_for;
        proxy_set_header    X-Forwarded-Proto    $scheme;
        proxy_pass http:&#x2F;&#x2F;127.0.0.1:8000;
    &#125;
&#125;

#重启nginx
[root@localhost conf.d]# systemctl reload nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="pgsql下载及配置"><a href="#pgsql下载及配置" class="headerlink" title="pgsql下载及配置"></a>pgsql下载及配置</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#centos下载pgsql
[root@localhost httpd]# yum install https:&#x2F;&#x2F;download.postgresql.org&#x2F;pub&#x2F;repos&#x2F;yum&#x2F;reporpms&#x2F;EL-7-x86_64&#x2F;pgdg-redhat-repo-latest.noarch.rpm
[root@localhost httpd]# yum install postgresql12-server

#启动pgsql服务
[root@localhost httpd]# postgresql-12-setup initdb
Initializing database ... OK
[root@localhost httpd]# systemctl start postgresql-12

#设置pgsql服务开机自启动
[root@localhost httpd]# systemctl enable postgresql-12
Created symlink from &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;multi-user.target.wants&#x2F;postgresql-12.service to &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;postgresql-12.service.

#配置pgsql
[root@localhost bin]# su - postgres
-bash-4.2$ psql
psql (12.13)
Type &quot;help&quot; for help.
postgres&#x3D;# alter user postgres with password &#39;123456&#39;
postgres-# \q
-bash-4.2$ exit
logout
[root@localhost bin]# find &#x2F; -name postgresql.conf
find: ‘&#x2F;run&#x2F;user&#x2F;1000&#x2F;gvfs’: 权限不够
&#x2F;var&#x2F;lib&#x2F;pgsql&#x2F;12&#x2F;data&#x2F;postgresql.conf

#配置远程访问
[root@localhost bin]# vi &#x2F;var&#x2F;lib&#x2F;pgsql&#x2F;12&#x2F;data&#x2F;postgresql.conf
listen_addressses&#x3D;&quot;*&quot;
port &#x3D; 5432 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="node-js安装"><a href="#node-js安装" class="headerlink" title="node.js安装"></a>node.js安装</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#安装node.js
[root@localhost admin]# wget https:&#x2F;&#x2F;nodejs.org&#x2F;dist&#x2F;v16.16.0&#x2F;node-v16.16.0-linux-x64.tar.xz
[root@localhost admin]# tar -xvf node-v16.16.0-linux-x64.tar.xz
[root@localhost admin]# mv node-v16.16.0-linux-x64  node.js

#查找node.js路径
[root@localhost admin]# find &#x2F; -name node.js
find: ‘&#x2F;run&#x2F;user&#x2F;1000&#x2F;gvfs’: 权限不够
&#x2F;home&#x2F;admin&#x2F;node.js
&#x2F;home&#x2F;admin&#x2F;node.js&#x2F;lib&#x2F;node_modules&#x2F;npm&#x2F;node_modules&#x2F;debug&#x2F;src&#x2F;node.js
&#x2F;home&#x2F;admin&#x2F;node.js&#x2F;lib&#x2F;node_modules&#x2F;npm&#x2F;node_modules&#x2F;@npmcli&#x2F;arborist&#x2F;lib&#x2F;node.js
&#x2F;home&#x2F;admin&#x2F;node.js&#x2F;lib&#x2F;node_modules&#x2F;npm&#x2F;node_modules&#x2F;@npmcli&#x2F;fs&#x2F;lib&#x2F;common&#x2F;node.js
&#x2F;home&#x2F;admin&#x2F;node.js&#x2F;lib&#x2F;node_modules&#x2F;npm&#x2F;node_modules&#x2F;util-deprecate&#x2F;node.js
#检查node版本
[root@localhost admin]# cd &#x2F;home&#x2F;admin&#x2F;node.js&#x2F;bin
[root@localhost bin]# .&#x2F;node -v
v16.16.0

#添加node.js的环境变量：
[root@localhost bin]# vi &#x2F;etc&#x2F;profile
#在文件末尾加上两句代码如下：
#NODE_HOME为实际中node的安装位置目录
export NODE_HOME&#x3D;&#x2F;home&#x2F;admin&#x2F;node.js
export PATH&#x3D;$NODE_HOME&#x2F;bin:$PATH
#按ESC+:+wq退出vim模式，输入以下命令使配置生效
[root@localhost bin]# source &#x2F;etc&#x2F;profile

#配置软连接将环境配置放到开机自启动的脚本中
[root@localhost bin]# ln -s &#x2F;usr&#x2F;local&#x2F;node.js&#x2F;bin&#x2F;node &#x2F;usr&#x2F;local&#x2F;bin&#x2F;node
[root@localhost bin]# ln -s &#x2F;usr&#x2F;local&#x2F;node.js&#x2F;bin&#x2F;npm &#x2F;usr&#x2F;local&#x2F;bin&#x2F;npm
#查看虚拟机ip
[root@localhost admin]# ifconfig
ens33: flags&#x3D;4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500
        inet 192.168.60.129  netmask 255.255.255.0  broadcast 192.168.60.255
        inet6 fe80::b659:fb9c:695f:5eff  prefixlen 64  scopeid 0x20&lt;link&gt;
        ether 00:0c:29:b0:6f:2a  txqueuelen 1000  (Ethernet)
        RX packets 491682  bytes 725762513 (692.1 MiB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 49960  bytes 3119454 (2.9 MiB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

lo: flags&#x3D;73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536
        inet 127.0.0.1  netmask 255.0.0.0
        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;
        loop  txqueuelen 1000  (Local Loopback)
        RX packets 1411  bytes 485777 (474.3 KiB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 1411  bytes 485777 (474.3 KiB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

virbr0: flags&#x3D;4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500
        inet 192.168.122.1  netmask 255.255.255.0  broadcast 192.168.122.255
        ether 52:54:00:42:aa:9d  txqueuelen 1000  (Ethernet)
        RX packets 0  bytes 0 (0.0 B)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 0  bytes 0 (0.0 B)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="部署应用"><a href="#部署应用" class="headerlink" title="部署应用"></a>部署应用</h2><h3 id="应用代码传输"><a href="#应用代码传输" class="headerlink" title="应用代码传输"></a>应用代码传输</h3><p>在window系统中下载xftp并安装，官网地址如下：<a href="https://www.xshell.com/zh/free-for-home-school/">家庭/学校免费 - NetSarang Website (xshell.com)</a>，安装好后打开，点击新建，在主机一栏填上虚拟机的ip地址：192.168.60.129，用户名填root，密码填虚拟机的密码，其他默认，点击连接如下所示：</p>
<p><img src="/2022/12/15/Docker%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2%E5%AE%9E%E6%88%98/1.png" alt></p>
<p>左侧窗口为本地目录，右侧窗口为虚拟机目录。选中左侧文件后右键，点击传输便可将文件从本地的windows系统传输到Linux虚拟机中。</p>
<p><img src="/2022/12/15/Docker%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2%E5%AE%9E%E6%88%98/2.png" alt></p>
<h3 id="应用前端部署"><a href="#应用前端部署" class="headerlink" title="应用前端部署"></a>应用前端部署</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#切换到前端代码目录
[root@localhost bin]# cd &#x2F;root&#x2F;WeChat_exercise&#x2F;front-end

#下载vue及vue cli、加载项目所需的配置文件
[root@localhost front-end]# npm install vue
[root@localhost front-end]# npm install --global @vue&#x2F;cli
[root@localhost front-end]# npm install yarn
[root@localhost front-end]# npm install

#运行前端项目
[root@localhost front-end]# npm run serve
 DONE  Compiled successfully in 51145ms                                                                               01:47:08
  App running at:
  - Local:   http:&#x2F;&#x2F;localhost:8080 
  - Network: http:&#x2F;&#x2F;192.168.60.129:8080

  Note that the development build is not optimized.
  To create a production build, run yarn build.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="后端环境部署"><a href="#后端环境部署" class="headerlink" title="后端环境部署"></a>后端环境部署</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#编译安装python3
[root@localhost admin]# wget https:&#x2F;&#x2F;www.Python.org&#x2F;ftp&#x2F;python&#x2F;3.6.1&#x2F;Python-3.6.1.tar.xz
[root@localhost admin]# tar xJf  Python-3.6.1.tar.xz
[root@localhost admin]# cd  Python-3.6.1
[root@localhost Python-3.6.1]# .&#x2F;configure  --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;python3 &amp;&amp; make &amp;&amp; make install

#创建软链接
[root@localhost Python-3.6.1]# ln -s &#x2F;usr&#x2F;local&#x2F;python3&#x2F;bin&#x2F;python3 &#x2F;usr&#x2F;bin&#x2F;python3
[root@localhost Python-3.6.1]# ln -s &#x2F;usr&#x2F;local&#x2F;python3&#x2F;bin&#x2F;pip3 &#x2F;usr&#x2F;bin&#x2F;pip3

#更换pip源
[root@localhost ~]# mkdir ~&#x2F;.pip
[root@localhost ~]#  vi ~&#x2F;.pip&#x2F;pip.conf

[global]
index-url &#x3D; http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;pypi&#x2F;simple&#x2F;
[install]
trusted-host&#x3D;mirrors.aliyun.com

#切换到后端项目目录，安装virtualenv
[root@localhost ~]# cd &#x2F;root&#x2F;WeChat_exercise&#x2F;back-end
ot@localhost back-end]# yum install python-virtualenv

#创建虚拟环境venv并激活
[root@localhost back-end]# python3 -m venv venv
[root@localhost back-end]# . venv&#x2F;bin&#x2F;activate
[root@localhost back-end]# yum install postgresql-devel

#安装Flask和项目所需环境
(venv) [root@localhost back-end]# pip3 install --upgrade pip setuptools wheel
(venv) [root@localhost back-end]# pip install Flask
(venv) [root@localhost back-end]# pip install -r requirements.txt
(venv) [root@localhost back-end]# pip install psycopg2
#运行Flask项目
(venv) [root@localhost back-end]#flask run<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="docker容器部署应用"><a href="#docker容器部署应用" class="headerlink" title="docker容器部署应用"></a>docker容器部署应用</h1><p>这一部分先手动启动Pgsql、Python、Nginx等容器，然后再使用Docker Compose来编排容器。</p>
<h2 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#安装并启动docker
[root@localhost admin]# curl -sSL https:&#x2F;&#x2F;get.daocloud.io&#x2F;docker | sh
[root@localhost admin]# systemctl start docker
[root@localhost admin]# systemctl enable docker
Created symlink from &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;multi-user.target.wants&#x2F;docker.service to &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;docker.service.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="构建PgSQL容器"><a href="#构建PgSQL容器" class="headerlink" title="构建PgSQL容器"></a>构建PgSQL容器</h2><ul>
<li><p>安装镜像</p>
 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@localhost admin]# docker pull postgres<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>创建配置文件夹，可以看到postgres镜像创建的容器是将数据保存在<code>/var/lib/postgresql/data</code>位置下的：</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@localhost admin]# cd &#x2F;home
[root@localhost home]# mkdir -p &#x2F;home&#x2F;docker
[root@localhost home]# mkdir -p &#x2F;home&#x2F;docker&#x2F;postgresql
[root@localhost home]# mkdir -p &#x2F;home&#x2F;docker&#x2F;postgresql&#x2F;data
[root@localhost home]# docker image inspect postgres
[
    &#123;
        &quot;Id&quot;: &quot;sha256:a26eb6069868e4bfd0095788e541bb40711861bdfb2a8252103dea85cc0758aa&quot;,
        &quot;RepoTags&quot;: [
            &quot;postgres:latest&quot;
        ],
        &quot;RepoDigests&quot;: [
            &quot;postgres@sha256:f4cd32e7a418d9c9ba043e7d561243388202b654c740bcc85ca40b41d9fb4f1e&quot;
        ],
        &quot;Parent&quot;: &quot;&quot;,
        &quot;Comment&quot;: &quot;&quot;,
        &quot;Created&quot;: &quot;2022-12-22T23:19:59.856808957Z&quot;,
        &quot;Container&quot;: &quot;938c729969fbf6312f6563590395ed0bb4cbc982b039598c38ffa539c86a5df5&quot;,
        &quot;ContainerConfig&quot;: &#123;
            &quot;Hostname&quot;: &quot;938c729969fb&quot;,
            &quot;Domainname&quot;: &quot;&quot;,
            &quot;User&quot;: &quot;&quot;,
            &quot;AttachStdin&quot;: false,
            &quot;AttachStdout&quot;: false,
            &quot;AttachStderr&quot;: false,
            &quot;ExposedPorts&quot;: &#123;
                &quot;5432&#x2F;tcp&quot;: &#123;&#125;
            &#125;,
            &quot;Tty&quot;: false,
            &quot;OpenStdin&quot;: false,
            &quot;StdinOnce&quot;: false,
            &quot;Env&quot;: [
                &quot;PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;sbin:&#x2F;bin:&#x2F;usr&#x2F;lib&#x2F;postgresql&#x2F;15&#x2F;bin&quot;,
                &quot;GOSU_VERSION&#x3D;1.14&quot;,
                &quot;LANG&#x3D;en_US.utf8&quot;,
                &quot;PG_MAJOR&#x3D;15&quot;,
                &quot;PG_VERSION&#x3D;15.1-1.pgdg110+1&quot;,
                &quot;PGDATA&#x3D;&#x2F;var&#x2F;lib&#x2F;postgresql&#x2F;data&quot;
            ],<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>执行以下命令创建并启动PgSQL容器，自定义命名为<code>my-postgres</code>：</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@localhost home]# docker run -p 5432:5432 -v &#x2F;home&#x2F;docker&#x2F;postgresql&#x2F;data:&#x2F;var&#x2F;lib&#x2F;postgresql&#x2F;data -e POSTGRES_PASSWORD&#x3D;123456 -e TZ&#x3D;PRC -d --name&#x3D;my-postgres postgres
165c63929bf341497816b85f28a060a2c6f75b7d9144627a560547b9ca92f9f4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>现在便可以用<code>docker ps -a</code>查看容器是否已经运行：</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@localhost home]# docker ps
CONTAINER ID   IMAGE               COMMAND                  CREATED              STATUS                          PORTS                                       NAMES
165c63929bf3   postgres            &quot;docker-entrypoint.s…&quot;   About a minute ago   Up About a minute               0.0.0.0:5432-&gt;5432&#x2F;tcp, :::5432-&gt;5432&#x2F;tcp   my-postgres
4c1699cdc854   flask-test:latest   &quot;&#x2F;bin&#x2F;sh -c &#39;gunicor…&quot;   9 days ago           Restarting (1) 45 seconds ago                                               flask_test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h2 id="构建Flask-API镜像"><a href="#构建Flask-API镜像" class="headerlink" title="构建Flask API镜像"></a>构建Flask API镜像</h2><ul>
<li><p>由于有多条命令，不方便直接写到Dockerfile中的CMD子命令中，因此在后端项目目录下新建boot.sh</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#切换到后端项目目录
[root@localhost home]# cd &#x2F;root&#x2F;WeChat_exercise&#x2F;back-end
[root@localhost back-end]# ls
app  config.py  invoke  migrations  package.json  __pycache__  Python.gitignore  requirements.txt  venv  weixin.py
[root@localhost back-end]# touch boot.sh
[root@localhost back-end]# vi boot.sh
#内容如下
#!&#x2F;bin&#x2F;sh

while true; do
    flask db upgrade
    if [[ &quot;$?&quot; &#x3D;&#x3D; &quot;0&quot; ]]; then
        break
    fi
    echo Failed to apply the migration to the database, retrying in 3 secs...
    sleep 3
done
flask deploy
exec gunicorn -w 3 -b 0.0.0.0:5000 --access-logfile - --error-logfile - weixin:app
#授予可执行权限
[root@localhost back-end]# chmod +x boot.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>新建一个Dockerfile</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@localhost back-end]# touch Dockerfile
[root@localhost back-end]# vi Dockerfile

[root@CentOS www]# vim back-end&#x2F;Dockerfile
内容如下：

FROM python:3.6-alpine

COPY .&#x2F;back-end &#x2F;usr&#x2F;src&#x2F;app
WORKDIR &#x2F;usr&#x2F;src&#x2F;app
RUN pip --no-cache-dir install  -i https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;pypi&#x2F;simple&#x2F; --upgrade pip
RUN pip install -r requirements.txt -i https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;pypi&#x2F;simple&#x2F; \ 
  &amp;&amp; pip install gunicorn
ENV FLASK_APP weixin.py
EXPOSE 5000
ENTRYPOINT [&quot;.&#x2F;boot.sh&quot;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>开始构建后端Flask API镜像</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@localhost back-end]# cd ..&#x2F;
[root@localhost WeChat_exercise]# docker build -f back-end&#x2F;Dockerfile -t weixin-api:0.0.1 .
Sending build context to Docker daemon    573MB.2MB
Step 1&#x2F;8 : FROM python:3.6-alpine
 ---&gt; 3a9e80fa4606
Step 2&#x2F;8 : COPY .&#x2F;back-end &#x2F;usr&#x2F;src&#x2F;app
 ---&gt; f5a2a7ecb4cf
...
Step 6&#x2F;8 : ENV FLASK_APP weixin.py
 ---&gt; Running in e9f4ebef3d13
Removing intermediate container e9f4ebef3d13
 ---&gt; 7317d7be0b13
Step 7&#x2F;8 : EXPOSE 5000
 ---&gt; Running in c544718548e6
Removing intermediate container c544718548e6
 ---&gt; c6e683ab97ff
Step 8&#x2F;8 : ENTRYPOINT [&quot;.&#x2F;boot.sh&quot;]
 ---&gt; Running in c8e11997efb0
Removing intermediate container c8e11997efb0
 ---&gt; 64f072fbbbe5
Successfully built 64f072fbbbe5
Successfully tagged weixin-api:0.0.1
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>启动Flask API容器</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@localhost WeChat_exercise]# docker run -d --name weixin-api --link my-postgres:postgres -e DATABASE_URL&#x3D;postgresql:&#x2F;&#x2F;postgres:123456@localhost:5432&#x2F;postgres -p 5000:5000 --rm weixin-api:0.0.1
2b58b6f9a4984649df15eda6c7b5b849697b3fc6f9cdfd906009e52814763f19<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
</ul>
<h2 id="构建Nginx容器"><a href="#构建Nginx容器" class="headerlink" title="构建Nginx容器"></a>构建Nginx容器</h2><ul>
<li><p>修改WeChat_exercise/front-end/src/main.js文件，增加以下代码，其中192.168.60:131为虚拟机ip</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Vue.use(ElementUI);
if (process.env.NODE_ENV&#x3D;&#x3D;&#x3D;&#39;production&#39;)&#123;
  axios.defaults.baseURL&#x3D;&#39;http:&#x2F;&#x2F;192.168.60:131:5000&#39;
&#125;else &#123;
  axios.defaults.baseURL &#x3D; &#39;http:&#x2F;&#x2F;127.0.0.1:5000&#39;;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>将打包后的静态文件，拷贝到 <code>../docker/nginx/data</code> 目录中，后续映射到 <code>Nginx</code> 容器中去</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@localhost home]# cd &#x2F;root&#x2F;WeChat_exercise&#x2F;front-end
[root@localhost front-end]# npm install
[root@localhost front-end]# npm run build
[root@localhost front-end]# mkdir -p ..&#x2F;docker&#x2F;nginx&#x2F;data
[root@localhost front-end]# cp -a dist&#x2F;* ..&#x2F;docker&#x2F;nginx&#x2F;data
[root@localhost front-end]# cd ..
[root@localhost WeChat_exercise]# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>启动Nginx容器</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@localhost WeChat_exercise]# docker run -d --name nginx -p 18080:80 --rm -v $PWD&#x2F;docker&#x2F;nginx&#x2F;data:&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html nginx
50f66f6ad75ec19220e37fe510724b70448b462a7e7c6b335f42de4893f44944<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>浏览器访问<code>http://192.168.60.131:18080/#/ping</code>，前端应用能够正常访问到后端API接口：</p>
<p>  <img src="/2022/12/15/Docker%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2%E5%AE%9E%E6%88%98/3.png" alt></p>
</li>
</ul>
<h2 id="使用Docker-Compose编排容器"><a href="#使用Docker-Compose编排容器" class="headerlink" title="使用Docker Compose编排容器"></a>使用Docker Compose编排容器</h2><ul>
<li><p>安装docker-compose</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@localhost WeChat_exercise]# cd back-end
[root@localhost back-end]# curl -L https:&#x2F;&#x2F;get.daocloud.io&#x2F;docker&#x2F;compose&#x2F;releases&#x2F;download&#x2F;v2.4.1&#x2F;docker-compose-&#96;uname -s&#96;-&#96;uname -m&#96; &gt; &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose
[root@localhost back-end]# chmod +x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose
[root@localhost back-end]# ln -s &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose &#x2F;usr&#x2F;bin&#x2F;docker-compose
[root@localhost back-end]# docker-compose version
Docker Compose version v2.4.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>创建并编写docker-compose.yaml文件</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@localhost back-end]# touch docker-compose.yaml
[root@localhost back-end]# vi docker-compose.yaml
#内容如下：

version: &quot;3.7&quot;
services:
    my-postgres:
        image: postgres
        privileged: true
        # 权限要加，不然启动会告错
        environment:
          POSTGRES_PASSWORD: 123456
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
          TZ: Asia&#x2F;Shanghai
        ports:
          - 5432:5432
        volumes:
          - &#x2F;home&#x2F;docker&#x2F;postgresql&#x2F;data:&#x2F;var&#x2F;lib&#x2F;postgresql&#x2F;data
        restart: always

    weixin-api:
        image: weixin-api:0.0.1
        build:
            context: .
            dockerfile: Dockerfile
        restart: always
        ports:
            - &quot;5000:5000&quot;
        depends_on:
            - my-postgres

    nginx:
        image: nginx
        ports:
           - &quot;18080:80&quot;
        volumes:
           - &quot;$PWD&#x2F;docker&#x2F;nginx&#x2F;data:&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>查看正在运行的容器并使它们全部停止运行</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#查看正在运行的容器
[root@localhost back-end]# docker ps 
CONTAINER ID   IMAGE               COMMAND                  CREATED          STATUS                          PORTS                                       NAMES
2b58b6f9a498   weixin-api:0.0.1    &quot;.&#x2F;boot.sh&quot;              47 minutes ago   Up 47 minutes                   0.0.0.0:5000-&gt;5000&#x2F;tcp, :::5000-&gt;5000&#x2F;tcp   weixin-api
50f66f6ad75e   nginx               &quot;&#x2F;docker-entrypoint.…&quot;   2 hours ago      Up 2 hours                      0.0.0.0:18080-&gt;80&#x2F;tcp, :::18080-&gt;80&#x2F;tcp     nginx
165c63929bf3   postgres            &quot;docker-entrypoint.s…&quot;   2 hours ago      Up 2 hours                      0.0.0.0:5432-&gt;5432&#x2F;tcp, :::5432-&gt;5432&#x2F;tcp   my-postgres
4c1699cdc854   flask-test:latest   &quot;&#x2F;bin&#x2F;sh -c &#39;gunicor…&quot;   9 days ago       Restarting (1) 14 seconds ago                                               flask_test

#停止所有正在运行的容器
[root@localhost back-end]# docker stop $(docker ps -a -q)
27ddc44b2109
a0704302049b
d5e616940191
2b58b6f9a498
2d86579808e5
bb1794163d8e
be6acf36f0d6
50f66f6ad75e
165c63929bf3
4a78c412395d
80b4b9b47652
4c1699cdc854
d140e8d466d0

#检查是否还有容器正在运行
[root@localhost back-end]# docker ps 
CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>使用Docker Compose启动应用所需的所有容器，’-d’ 选项表示在后台运行 compose，否则在前台输出日志</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#启动所有容器
[root@localhost back-end]# docker-compose up -d

[+] Running 3&#x2F;3
 ⠿ Container back-end-nginx-1        Started                                                                                                                                                                  6.0s
 ⠿ Container back-end-my-postgres-1  Started                                                                                                                                                                  6.1s
 ⠿ Container back-end-weixin-api-1   Started                                                                                                                                                                 11.0s

#查看容器状态
[root@localhost back-end]# docker-compose ps
NAME                     COMMAND                  SERVICE             STATUS              PORTS
back-end-my-postgres-1   &quot;docker-entrypoint.s…&quot;   my-postgres         running             0.0.0.0:5432-&gt;5432&#x2F;tcp, :::5432-&gt;5432&#x2F;tcp
back-end-nginx-1         &quot;&#x2F;docker-entrypoint.…&quot;   nginx               running             0.0.0.0:18080-&gt;80&#x2F;tcp, :::18080-&gt;80&#x2F;tcp
back-end-weixin-api-1    &quot;.&#x2F;boot.sh&quot;              weixin-api          running             0.0.0.0:5000-&gt;5000&#x2F;tcp, :::5000-&gt;5000&#x2F;tcp

#查看各容器的运行日志，若含有&#39;-f&#39; 选项则持续输出
[root@localhost back-end]# docker-compose logs
#停止全部容器
[root@localhost back-end]# docker-compose stop
[+] Running 3&#x2F;3
 ⠿ Container back-end-weixin-api-1   Stopped                                                                                                                                                                 16.3s
 ⠿ Container back-end-nginx-1        Stopped                                                                                                                                                                  4.0s
 ⠿ Container back-end-my-postgres-1  Stopped  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h1 id="端口被占用解决方法"><a href="#端口被占用解决方法" class="headerlink" title="端口被占用解决方法"></a>端口被占用解决方法</h1><p>在docker部署的过程中，若端口被占用，如80端口，可使用以下命令解除端口占用：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#查看占用80端口的进程
[root@localhost back-end]# netstat -lnp | grep 80
tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      1159&#x2F;nginx: master  
tcp6       0      0 :::80                   :::*                    LISTEN      1159&#x2F;nginx: master  
#杀死占用端口的进程
[root@localhost back-end]# kill -9 1159
#查看是否还有进程占用端口，若有，则继续杀死进程，若无，则端口占用已解除
[root@localhost back-end]# netstat -lnp | grep 80
tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      1160&#x2F;nginx: worker  
tcp6       0      0 :::80                   :::*                    LISTEN      1160&#x2F;nginx: worker  
[root@localhost back-end]# kill -9 1160
[root@localhost back-end]# netstat -lnp | grep 80<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Docker</category>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>应用部署</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask Web开发学习笔记（二）</title>
    <url>/2022/10/20/Flask%20Web%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h1 id="创建应用教程"><a href="#创建应用教程" class="headerlink" title="创建应用教程"></a>创建应用教程</h1><h2 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h2><p>先创建应用所需的文件夹，接下来会直接把数据库模式和主模块放在这个目录中。用户可以通过HTTP访问static文件夹中的文件，即存放css和javascript文件的地方：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">&#x2F;tutorweb
    &#x2F;static
    &#x2F;templates<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="创建数据库模式"><a href="#创建数据库模式" class="headerlink" title="创建数据库模式"></a>创建数据库模式</h2><p>创建schema.sql文件，文件里编写以下内容，放到tutorweb文件中：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">drop table if exists entries;
create table entries(
	id integer primary key autoincrement,
	title string not null,
	text string not null
);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>该模式包含一个名为entries的表，该表中的每行都包含一个id、一个title和一个text。id是一个自增的整数，也是主键，其余的两个是字符串且不允许为空。</p>
<h2 id="应用设置代码"><a href="#应用设置代码" class="headerlink" title="应用设置代码"></a>应用设置代码</h2><h3 id="创建应用模块"><a href="#创建应用模块" class="headerlink" title="创建应用模块"></a>创建应用模块</h3><p>创建应用的模块tutorweb.py并放置在tutorweb目录下。从添加所需的导入语句和添加配置部分开始。对于小型应用，可以直接把配置放在主模块里，但更简洁的方案是创建独立的<code>.ini</code>或<code>.py</code>文件，并载入里面的值。</p>
<p>首先在tutorweb.py里导入内容：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">#导入所有模块
import os
import sqlite3
from flask import Flask,request,session,g,redirect,url_for,abort,\
    render_template,flash

#配置文件
DATABASE&#x3D;&#39;.&#x2F;sqlite_db&#39;
USERNAME&#x3D;&#39;admin&#39;
PASSWORD&#x3D;&#39;default&#39;
DEBUG&#x3D;True

#创建应用
app&#x3D;Flask(__name__)
app.config.from_object(__name__)
app.secret_key&#x3D;&#39;develop key&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="数据库路径"><a href="#数据库路径" class="headerlink" title="数据库路径"></a>数据库路径</h3><p>操作系统有进程当前工作目录的概念，但由于在Web应用中相同的进程运用多个应用，因此不能依赖此概念。Flask提供了<code>app.root_path</code>属性以获取应用的路径，配合<code>os.path</code>模块的使用，可以轻松到达任意文件。在本例中，数据库放在根目录下。</p>
<p>通常只能加载一个单独的、环境特定的配置文件。Flask中使用<code>from_envvar()</code>方法可以实现允许导入多份配置文件，并使用最后的导入的设置。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">app.config.from_envvar(&#39;FLASKR_SETTINGS&#39;,slient&#x3D;True)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>只需要设置一个名为<code>FLASKR_SETTINGS</code>的环境变量指向要加载的配置文件，启动静默模式告诉Flask在没有设置该环境变量的情况下噤声。</p>
<p>此外还可以使用配置对象上的<code>from_object()</code>方法，并传递一个模块的导入名作为参数。Flask会从这个模块初始化变量，注意<strong>只有名称全为大写字母的变量才会被采用</strong>。</p>
<p><code>secret_key</code>是保证客户端会话安全的重要所在。尽量选择一个尽可能难猜测、尽可能复杂的密钥。</p>
<p>调试标志关系交互式调试器的开启。永远<strong>不要在生产系统中激活调试模式</strong>，因为它将允许用户在服务器上执行代码。</p>
<p>添加一个连接到指定数据的方法是，用于请求时开启一个数据库连接，并在交互式Python shell和脚本中也能使用。在tutorweb.py文件中创建一个简单的SQLite数据库的连接，并让它用sqlite3.Row表示数据库中的行，使得可以通过字典而不是元组的形式访问行：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">def connect_db():
    #连接特定的数据库      
    rv&#x3D;sqlite3.connect(app.config[&#39;DATABASE&#39;])
    rv.row_factory&#x3D;sqlite3.Row
    return rv<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>最后，若想要把这个文件当作独立应用来运行，只需在可启动服务器文件tutorweb.py的末尾加上这行代码即可运行这个应用：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">if __name__&#x3D;&#x3D;&#39;__main__&#39;:
    app.run()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>此时在浏览器中访问服务器会遇到404 page not found错误，这是因为还没有创建任何视图的缘故。在创建视图之前，应该先让数据库工作起来。</p>
<h2 id="数据库连接"><a href="#数据库连接" class="headerlink" title="数据库连接"></a>数据库连接</h2><p>Flask提供了两种环境：应用环境和请求环境。不同环境有不同的特殊变量。例如request变量与当前请求的请求对象有关，而g是当前应用环境有关的通用变量。</p>
<p>在tutorweb.py文件中可以写一个辅助函数把数据库连接存放在g对象上。这个函数首次调用时会为当前的函数创建一个数据库连接，调用成功后返回已经建立好的连接：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">def get_db():
    #打开一个新数据库连接
    if not hasattr(g,&#39;sqlite_db&#39;):
        g.sqlite_db&#x3D;connect_db()
        return g.sqlite_db    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>Flask提供了<code>teardown_appcontext()</code>装饰器来断开数据库连接，它将在每次应用环境销毁时执行：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">@app.teardown_appcontext
def close_db(error):
    #断开数据库连接
    if hasattr(g,&#39;sqlite_db&#39;):
        g.sqlite_db.close()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>本质上，应用环境在请求传入前创建，每当请求结束时销毁。销毁有两种原因：一切正常（错误参数是None）或发送异常，后者错误会被传递给销毁函数。</p>
<h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><p>Flask是一个由关系数据库驱动的应用。关系数据库系统需要一个模式来决定存储信息的方式。</p>
<h3 id="创建模式"><a href="#创建模式" class="headerlink" title="创建模式"></a>创建模式</h3><p>可以通过管道把schema.sql作为sqlite3命令的输入来创建这个模式：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">sqlite3 &#x2F;tmp&#x2F;flaskr.db &lt; schema.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这种方法的缺点是需要安装sqlite3命令，且必须提供数据库的路径，否则会报错。因此比较推荐使用函数来初始化数据库。</p>
<p>创建一个名为init_db的函数来初始化数据库，只需要把这个函数放在tutorweb.py里的connect_db函数后面并调用<code>init_db()</code>函数来创建数据库：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">def init_db():
#建立应用环境，在with内部，g对象与app关联，在语句结束出会释放这个关联并执行所有销毁函数，即数据库连接会在提交后断开
    with app.app_context():   
        db&#x3D;get_db()
        #open_resource可以打开应用提供的资源，在tutorweb文件夹打开文件并允许读取它，用它来在数据库连接上执行脚本
        with app.open_resource(&#39;schema.sql&#39;,mode&#x3D;&#39;r&#39;) as f:
            db.cursor().executescript(f.read())
        db.commit()       
init_db() <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>应用环境在每次请求传入时创建，这里并没有请求，故需要手动创建一个应用环境。g在应用环境外无法获知它属于哪个应用，因为可能会有多个应用同时存在。</p>
<p>SQLite的数据库连接对象提供了一个游标对象，游标上有一个方法可以执行完整的脚本。最后只需提交变更，SQLite3和其他支持事务的数据库只会在显示提交的时候提交。</p>
<h2 id="视图函数"><a href="#视图函数" class="headerlink" title="视图函数"></a>视图函数</h2><p>数据库连接正常工作后，共需要写四个视图函数。</p>
<h3 id="显示条目"><a href="#显示条目" class="headerlink" title="显示条目"></a>显示条目</h3><p>这个视图显示数据库中存储的所有条目，它绑定在应用的根地址，并从数据库查询出文章的标题和正文。id值最大的条目（最新的条目）会显示在最上方。从指针返回的行是按select语句中声明的列组织元组。</p>
<p>视图函数会将条目作为字典传递给<code>show_entries.html</code>模板，并返回渲染结果：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">@app.route(&#39;&#x2F;&#39;) 
def show_entries():
    #显示条目
    g.db&#x3D;get_db()
    cur&#x3D;g.db.execute(&#39;select title, text from entries order by id desc&#39;)
    entries&#x3D;[dict(title&#x3D;row[0],text&#x3D;row[1]) for row in cur.fetchall()]
    return render_template(&#39;show_entries.html&#39;,entries&#x3D;entries)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="添加条目"><a href="#添加条目" class="headerlink" title="添加条目"></a>添加条目</h2><p>这个视图允许已登入的用户添加新条目，并只响应POST请求，实际的表单显示在<code>show_entries</code>页。若一切工作正常，用flash()向下一次请求发送提示消息，并重定向回<code>show_entries</code>页：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">@app.route(&#39;&#x2F;add&#39;,methods&#x3D;[&#39;POST&#39;])
def add_entry():
    #添加条目
    g.db&#x3D;get_db()
    if not session.get(&#39;logged_in&#39;):
        abort(401)
    g.db.execute(&#39;insert into entries (title,text) values (?,?)&#39;,
                    [request.form[&#39;title&#39;],request.form[&#39;text&#39;]])       
    g.db.commit()
    flash(&#39;New entry was successfully posted&#39;)                 
    return redirect(url_for(&#39;show_entries&#39;))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>注意这里的用户登入检查（logged_in键在会话中存在且为True）</p>
<h3 id="安全提示："><a href="#安全提示：" class="headerlink" title="安全提示："></a>安全提示：</h3><p>确保像上面代码一样使用问号标记来构建SQL语句。否则当使用格式化字符串构建SQL语句时，所建立的应用容易遭受SQL注入。</p>
<h2 id="登入和登出"><a href="#登入和登出" class="headerlink" title="登入和登出"></a>登入和登出</h2><p>这个函数用来让用户登入。登入通过与配置文件中的数据比较检查用户名和密码，并设定会话中的<code>logged_in</code>键值。若用户成功登入，这个键值会被设为True，并跳转回<code>show_entries</code>页。此外还会有信息闪现来提示用户登入成功。如果发生一个错误，模板会通知并提示重新登录。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">@app.route(&#39;&#x2F;login&#39;,methods&#x3D;[&#39;GET&#39;,&#39;POST&#39;])    
def login():
    #登入和登出
    error&#x3D;None
    if request.method&#x3D;&#x3D;&#39;POST&#39;:
        if request.form[&#39;username&#39;]!&#x3D;app.config[&#39;USERNAME&#39;]:
            error&#x3D;&#39;Invalid username&#39;
        elif request.form[&#39;password&#39;]!&#x3D;app.config[&#39;PASSWORD&#39;]:
            error&#x3D;&#39;Invalid password&#39;
        else:
            session[&#39;logged_in&#39;]&#x3D;True
            flash(&#39;You were logged in&#39;)
            return redirect(url_for(&#39;show_entries&#39;))
    return render_template(&#39;login.html&#39;,error&#x3D;error)            <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这个函数用来让用户登出。从会话中删除<code>logged_in</code>键。使用字典的pop()方法并传入第二个参数（默认），以从字典删除这个键，若这个键不存在则什么都不做。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">@app.route(&#39;&#x2F;logout&#39;)
def logout():
    #登出
    session.pop(&#39;logged_in&#39;,None)
    flash(&#39;You were logged out&#39;)
    return redirect(url_for(&#39;show_entries&#39;))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><p>若现在请求URL，只会得到Flask无法找到模板的异常。模板使用Jinja2语法并默认开启自动转义。这意味着除非使用Markup标记或在模板中使用<code>|safe</code>过滤器，否则Jinja2会确保特殊字符，比如<code>&lt;</code>或<code>&gt;</code>被转义为等价的XML实体。</p>
<h3 id="layout-html"><a href="#layout-html" class="headerlink" title="layout.html"></a>layout.html</h3><p>将下面的模板放进templates文件夹里。这个模板包含HTML主体结构、标题和一个登入链接（用户已登入则提供登出）。若有，它会显示闪现消息。</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&#123;% block body %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>模块可以被子模版中相同名字的块（body）替换。</p>
<p>session字典在模板中也是可用的，可以用它来检查用户是否已登入。在Jinja中你<strong>可以访问不存在的对象、字典属性或成员</strong>。</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">doctype</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>tutorweb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>stylesheet</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>text/css</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123;url_for(<span class="token punctuation">'</span>static<span class="token punctuation">'</span>,filename=<span class="token punctuation">'</span>style.css<span class="token punctuation">'</span>)&#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>page</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>tutorweb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>metanav</span><span class="token punctuation">></span></span>
  &#123;% if not session.logged_in %&#125;
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123;url_for(<span class="token punctuation">'</span>login<span class="token punctuation">'</span>)&#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>log in<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
  &#123;% else %&#125;
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123;url_for(<span class="token punctuation">'</span>logout<span class="token punctuation">'</span>)&#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>log out<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
  &#123;% endif %&#125;        
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  &#123;% for message in get_flashed_messages() %&#125;
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>flash</span><span class="token punctuation">></span></span>&#123;&#123;message&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  &#123;% endfor %&#125;
  &#123;% block body %&#125;&#123;% endblock %&#125;
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="show-entries-html"><a href="#show-entries-html" class="headerlink" title="show_entries.html"></a>show_entries.html</h3><p>这个模板继承了上面的<code>layout.html</code>模板来显示消息。注意for循环会遍历并输出所有<code>render_template()</code>函数传入的消息。还告诉表单使用HTTP的POST方法提交信息到<code>add_entry</code>函数：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&#123;% extends "layout.html" %&#125;<span class="token comment">&lt;!--模板继承，继承layout.html的内容--></span>
&#123;% block body %&#125;
  &#123;% if session.logged_in %&#125;<span class="token comment">&lt;!--初次登录，session.logged_in为假，下面的内容不显示--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123;url_for(<span class="token punctuation">'</span>add_entry<span class="token punctuation">'</span>)&#125;&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>post</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>add-entry</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dl</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span>Title:
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>text</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>30</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>title</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span>Text 
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>text</span> <span class="token attr-name">rows</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>5</span> <span class="token attr-name">cols</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>40</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>submit</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>Share</span><span class="token punctuation">></span></span>  
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dl</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>
  &#123;% endif %&#125;
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>entries</span><span class="token punctuation">></span></span>
  &#123;% for entry in entries %&#125;
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>&#123;&#123;entry.title&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>&#123;&#123;entry.text|safe&#125;&#125;
  &#123;% else %&#125;<span class="token comment">&lt;!--此次登录默认显示以下内容--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">></span></span>Unbelievable. No entries here so far<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">></span></span>
  &#123;% endfor %&#125;
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>                        
&#123;% endblock %&#125;           <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="login-html"><a href="#login-html" class="headerlink" title="login.html"></a>login.html</h3><p>最后是登入模板，简单地显示一个允许用户登入的表单：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&#123;% extends "layout.html" %&#125;<span class="token comment">&lt;!--模板继承layout.html的内容--></span>
&#123;% block body %&#125;<span class="token comment">&lt;!--重载--></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>Login<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>
  <span class="token comment">&lt;!--error不为None时显示出错误原因--></span>
  &#123;% if error %&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>error</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span>Error:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span>&#123;&#123;error&#125;&#125;&#123;% endif %&#125;
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123;url_for(<span class="token punctuation">'</span>login<span class="token punctuation">'</span>)&#125;&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>post</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--action后是form表单提交的地址--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dl</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span>Username:
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>text</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>username</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span>Password 
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>password</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>password</span><span class="token punctuation">></span></span>  
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>submit</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>Login</span><span class="token punctuation">></span></span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dl</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>                     
&#123;% endblock %&#125;          <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="添加样式"><a href="#添加样式" class="headerlink" title="添加样式"></a>添加样式</h2><p>现在其他的一切都可以正常工作，是时候给应用添加样式了。只需在static文件夹中创建一个名为style.css的样式表即可：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body</span><span class="token punctuation">&#123;</span>
    <span class="token property">font-family</span><span class="token punctuation">:</span>sans-serif<span class="token punctuation">;</span>
    <span class="token property">background</span><span class="token punctuation">:</span>#eee<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token selector">a,h1,h2</span><span class="token punctuation">&#123;</span>
    <span class="token property">color</span><span class="token punctuation">:</span>#377BAB<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">h1,h2</span><span class="token punctuation">&#123;</span>
    <span class="token property">font-family</span><span class="token punctuation">:</span><span class="token string">'Georgia'</span><span class="token punctuation">,</span>serif<span class="token punctuation">;</span>
    <span class="token property">margin</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">h1</span><span class="token punctuation">&#123;</span>
    <span class="token property">border-bottom</span><span class="token punctuation">:</span>2px solid #eee<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">h2</span><span class="token punctuation">&#123;</span>
    <span class="token property">font-size</span><span class="token punctuation">:</span>1.2em<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">.page</span><span class="token punctuation">&#123;</span>
    <span class="token property">margin</span><span class="token punctuation">:</span>2em auto<span class="token punctuation">;</span>
    <span class="token property">width</span><span class="token punctuation">:</span>35em<span class="token punctuation">;</span>
    <span class="token property">border</span><span class="token punctuation">:</span>5px solid #ccc<span class="token punctuation">;</span>
    <span class="token property">padding</span><span class="token punctuation">:</span>0.8em<span class="token punctuation">;</span>
    <span class="token property">background</span><span class="token punctuation">:</span>white<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">.entries</span><span class="token punctuation">&#123;</span>
    <span class="token property">list-style</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span>
    <span class="token property">margin</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>
    <span class="token property">padding</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">.entries li</span><span class="token punctuation">&#123;</span>
    <span class="token property">margin</span><span class="token punctuation">:</span>0.8em 1.2em<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">.entries li h2</span><span class="token punctuation">&#123;</span>
    <span class="token property">margin-left</span><span class="token punctuation">:</span>-1em<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">.add-entry</span><span class="token punctuation">&#123;</span>
    <span class="token property">font-size</span><span class="token punctuation">:</span>0.9em<span class="token punctuation">;</span>
    <span class="token property">border-bottom</span><span class="token punctuation">:</span>1px solid #ccc<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">.add-entry dl</span><span class="token punctuation">&#123;</span>
    <span class="token property">font-weight</span><span class="token punctuation">:</span>bold<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">.metanav</span><span class="token punctuation">&#123;</span>
    <span class="token property">text-align</span><span class="token punctuation">:</span>right<span class="token punctuation">;</span>
    <span class="token property">font-size</span><span class="token punctuation">:</span>0.8em<span class="token punctuation">;</span>
    <span class="token property">padding</span><span class="token punctuation">:</span>0.3em<span class="token punctuation">;</span>
    <span class="token property">margin-bottom</span><span class="token punctuation">:</span>1em<span class="token punctuation">;</span>
    <span class="token property">background</span><span class="token punctuation">:</span>#fafafa<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">.toturweb</span><span class="token punctuation">&#123;</span>
    <span class="token property">background</span><span class="token punctuation">:</span>#CEE5F5<span class="token punctuation">;</span>
    <span class="token property">padding</span><span class="token punctuation">:</span>0.5em<span class="token punctuation">;</span><span class="token punctuation">;</span>
    <span class="token property">border</span><span class="token punctuation">:</span>1px solid #AACBE2<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">.error</span><span class="token punctuation">&#123;</span>
    <span class="token property">background</span><span class="token punctuation">:</span>#F0D6D6<span class="token punctuation">;</span>
    <span class="token property">padding</span><span class="token punctuation">:</span>0.5em<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>最后运行tutorweb.py程序即可在<code>127.0.0.0:5000</code>上看到创建的应用。</p>
]]></content>
      <categories>
        <category>Web框架</category>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Flask Web</tag>
        <tag>后端</tag>
        <tag>Web框架</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask实战：搭建博客后端</title>
    <url>/2022/10/24/Flask%E5%AE%9E%E6%88%98%EF%BC%9A%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%90%8E%E7%AB%AF/</url>
    <content><![CDATA[<h1 id="创建一个Flask-RESTful-API"><a href="#创建一个Flask-RESTful-API" class="headerlink" title="创建一个Flask RESTful API"></a>创建一个Flask RESTful API</h1><p>本节的目的为搭建Flask应用，并提供一个测试API，客户端访问<code>/ping</code>后会返回<code>pong!</code>响应。</p>
<h2 id="配置Flask"><a href="#配置Flask" class="headerlink" title="配置Flask"></a>配置Flask</h2><p>确保python3已安装后，在合适的位置新建<code>tutorproject</code>项目目录，在<code>tutorproject</code>里新建<code>back-end</code>目录，作为后端API应用所在的位置。在<code>C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end</code>的目录下右键，选择在终端打开后，按照以下步骤搭建Flask所需的环境。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#创建虚拟环境venv
PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end&gt;python -m venv venv
#激活环境venv
PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end&gt;venv\Scripts\activate
#虚拟环境中导入flask模块
(venv) PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end&gt;pip install flask
#把系统环境信息写到txt中
(venv) PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end&gt;pip freeze &gt;requirements.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="应用工厂"><a href="#应用工厂" class="headerlink" title="应用工厂"></a>应用工厂</h2><p>创建<code>tutorweb</code>目录，并在<code>tutorweb</code>目录下新建<code>__init__.py</code>文件，在<code>__init__.py</code>中，使用应用工厂函数来创建Flask应用：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">from flask import Flask
from config import Config

def create_app(config_class&#x3D;Config):
    app&#x3D;Flask(__name__)
    app.config.from_object(config_class)

    #注册blueprint
    from tutorweb.api import bp as api_bp
    app.register_blueprint(api_bp,url_prefix&#x3D;&#39;&#x2F;api&#39;)
    
    return app  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>创建<code>tutorweb/api</code>目录，并在<code>api</code>目录下新建<code>__init__.py</code>文件，定义蓝图：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">from flask import Blueprint
bp&#x3D;Blueprint(&#39;api&#39;,__name__)
#防止循环导入ping.py文件
from tutorweb.api import ping<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>在<code>api</code>目录下新建<code>ping.py</code>文件，定义路由函数，当客户端访问<code>/ping</code>时返回包含<code>JSON</code>的数据：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">from flask import jsonify
from tutorweb.api import bp

@bp.route(&#39;&#x2F;ping&#39;,methods&#x3D;[&#39;GET&#39;])
def ping():
    #vue.js用来测试与后端Flask API的连通性
    return jsonify(&#39;Pong!&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="应用启动文件"><a href="#应用启动文件" class="headerlink" title="应用启动文件"></a>应用启动文件</h2><p>在<code>back-end</code>目录下新建<code>madblog.py</code>文件：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">from tutorweb import create_app

app&#x3D;create_app()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>在<code>back-end</code>目录下新建<code>config.py</code>文件：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">import os 
from dotenv import load_dotenv

basedir&#x3D;os.path.abspath(os.path.dirname(__file__))
load_dotenv(os.path.join(basedir,&#39;.env&#39;),encoding&#x3D;&#39;utf-8&#39;)

class Config(object):
    pass<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="读取环境变量信息"><a href="#读取环境变量信息" class="headerlink" title="读取环境变量信息"></a>读取环境变量信息</h2><p>将Flask应用所需的系统环境变量写到<code>back-end/.env</code>中，可先使用<code>python-dotenv</code>这个包来读取环境变量信息，再把系统环境写到txt中：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">(venv) PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end&gt;pip install python-dotenv
(venv) PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end&gt;pip freeze &gt;requirements.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>在<code>back-end</code>目录下新建<code>.env</code>文件，用记事本打开后写入以下信息保存：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">FLASK_APP&#x3D;madblog.py
FLASK_DEBUG&#x3D;1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="启动应用"><a href="#启动应用" class="headerlink" title="启动应用"></a>启动应用</h2><p>输入flask run即可启动应用：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">(venv) PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end&gt;flask run 

 * Serving Flask app &#39;madblog.py&#39;
 * Debug mode: on
WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.
 * Running on http:&#x2F;&#x2F;127.0.0.1:5000
Press CTRL+C to quit
 * Restarting with stat
 * Debugger is active!
 * Debugger PIN: 354-979-609<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>启动应用后，打开浏览器，访问<code>http://127.0.0.1:5000/api/ping</code>，若出现<code>Pong!</code>则说明所定义的<code>Ping-Pong</code>测试路由正常。</p>
<p><img src="/2022/10/24/Flask%E5%AE%9E%E6%88%98%EF%BC%9A%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%90%8E%E7%AB%AF/1.png" alt></p>
<p>在cmd页面按下ctrl+c即可停止应用运行。</p>
<p><strong>此时的目录结构如下：</strong></p>
<p><img src="/2022/10/24/Flask%E5%AE%9E%E6%88%98%EF%BC%9A%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%90%8E%E7%AB%AF/2.png" alt></p>
<h1 id="Flask设计User用户相关API"><a href="#Flask设计User用户相关API" class="headerlink" title="Flask设计User用户相关API"></a>Flask设计User用户相关API</h1><p>本节的内容为：Flask后端针对“用户资源”提供部分RESTful API，基于token认证，支持添加用户、查看单个或多个用户、修改用户，使用HTTPie或Postman测试API通过。</p>
<h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><h3 id="ORM：SQLAlchemy"><a href="#ORM：SQLAlchemy" class="headerlink" title="ORM：SQLAlchemy"></a>ORM：SQLAlchemy</h3><p>安装<code>Flask-SQLAlchemy</code>插件和数据表结构有变化后进行迁移的<code>Flask-Migrate</code>插件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">(venv) PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end&gt;pip install flask-sqlalchemy flask-migrate
(venv) PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end&gt;pip freeze &gt; requirements.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>修改配置文件<code>back-end/config.py</code>，默认使用<code>SQLite</code>数据库：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">import os 
from dotenv import load_dotenv

basedir&#x3D;os.path.abspath(os.path.dirname(__file__))
load_dotenv(os.path.join(basedir,&#39;.env&#39;),encoding&#x3D;&#39;utf-8&#39;)

class Config(object):
    SQLALCHEMY_DATABASE_URI&#x3D;os.environ.get(&#39;DATABASE_URL&#39;) or \
        &#39;sqlite:&#x2F;&#x2F;&#x2F;&#39;+os.path.join(basedir,&#39;tutorweb.db&#39;)
    SQLALCHEMY_TRACK_MODIFICATIONS&#x3D;False<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>修改<code>tutorweb/__init__.py</code>，引入并初始化插件：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">from flask import Flask
from flask_cors import CORS
from flask_sqlalchemy import SQLAlchemy
from flask_migrate import Migrate
from config import Config

#定义Flack_SQLAlchemy
db&#x3D;SQLAlchemy()

#定义Flack_Migrate 
migrate&#x3D;Migrate()

def create_app(config_class&#x3D;Config):
    app&#x3D;Flask(__name__)
    app.config.from_object(config_class)

    #启用CORS
    CORS(app)
    #初始化Flack_SQLAlchemy
    db.init_app(app)
    #初始化Flack_Migrate 
    migrate.init_app(app,db)

    #注册blueprint
    from tutorweb.api import bp as api_bp
    app.register_blueprint(api_bp,url_prefix&#x3D;&#39;&#x2F;api&#39;)
    
    return app   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在<code>back-end</code>目录下新建tutorweb.db文件作为数据库文件，修改<code>back-end</code>目录下的<code>madblog.py</code>文件如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">from tutorweb import create_app,db

app&#x3D;create_app()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="定义User用户数据模型"><a href="#定义User用户数据模型" class="headerlink" title="定义User用户数据模型"></a>定义User用户数据模型</h3><p>创建<code>tutorweb/models.py</code>:</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">from tutorweb import db

class User(db.Model):
    id&#x3D;db.Column(db.Integer,primary_key&#x3D;True)
    username&#x3D;db.Column(db.String(64),index&#x3D;True,unique&#x3D;True)
    email&#x3D;db.Column(db.String(120),index&#x3D;True,unique&#x3D;True)
    password_hash&#x3D;db.Column(db.String(128))#不保留原始密码

    def __repr__(self):
        return &#39;&lt;User &#123;&#125;&gt;&#39;.format(self.username)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>修改<code>tutorweb/__init__.py</code>，在文件末尾添加：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">from tutorweb import models<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="第一次数据库迁移"><a href="#第一次数据库迁移" class="headerlink" title="第一次数据库迁移"></a>第一次数据库迁移</h3><p>创建迁移数据库：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">(venv) PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end&gt;flask db init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>生成迁移脚本：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">(venv) PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end&gt;flask db migrate -m &quot;add users table&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>将迁移脚本应用到数据库中：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">(venv) PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end&gt;flask db upgrade<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>若要回滚上次的迁移，可用<code>flask db downgrade</code>命令回滚。</p>
<p>存储用户密码的hash值：</p>
<p>使用<code>werkzeug.security</code>库的<code>generate_password_hash</code>和<code>check_password_hash</code>来创建哈希密码和验证密码的hash是否一致：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">(venv) PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end&gt; python
Python 3.10.5 (tags&#x2F;v3.10.5:f377153, Jun  6 2022, 16:14:13) [MSC v.1929 64 bit (AMD64)] on win32
Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.
&gt;&gt;&gt; from werkzeug.security import generate_password_hash, check_password_hash
&gt;&gt;&gt; hash &#x3D; generate_password_hash(&#39;123&#39;)
&gt;&gt;&gt; hash
&#39;pbkdf2:sha256:260000$RBvmqvkVP61YXGy0$52d3ea1ae76f51d284ba66d2665c8bcfdd069b47cdff7e3211e46d5d98a9d01a&#39;
&gt;&gt;&gt; check_password_hash(hash, &#39;foobar&#39;)
False
&gt;&gt;&gt; check_password_hash(hash, &#39;123&#39;)
True<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>注意：</strong>使用<code>generate_password_hash</code>生成不同的3个’123’哈希值，并复制其值保存下来备用，以作为后面用户密码使用。</p>
<p>修改<code>tutorweb/models.py</code>，增加创建密码和验证密码两个方法：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">from werkzeug.security import generate_password_hash,check_password_hash
from tutorweb import db

class User(db.Model):
    id&#x3D;db.Column(db.Integer,primary_key&#x3D;True)
    username&#x3D;db.Column(db.String(64),index&#x3D;True,unique&#x3D;True)
    email&#x3D;db.Column(db.String(120),index&#x3D;True,unique&#x3D;True)
    password_hash&#x3D;db.Column(db.String(128))#不保留原始密码

    def __repr__(self):
        return &#39;&lt;User &#123;&#125;&gt;&#39;.format(self.username)

    def set_password(self,password):
        self.password_hash&#x3D;generate_password_hash(password) 

    def check_password(self,password):
        return check_password_hash(self.password_hash,password)
   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>配置Flask Shell上下文环境：</p>
<p><code>flask shell</code>命令是继<code>flask run</code>后被实现的第二个“核心”命令，其目的是启动一个python解释器包含应用的上下文：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">(venv) PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end&gt; flask shell
Python 3.10.5 (tags&#x2F;v3.10.5:f377153, Jun  6 2022, 16:14:13) [MSC v.1929 64 bit (AMD64)] on win32
App: tutorweb
Instance: C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end\instance
&gt;&gt;&gt; tutorweb
Traceback (most recent call last):
  File &quot;&lt;console&gt;&quot;, line 1, in &lt;module&gt;
NameError: name &#39;tutorweb&#39; is not defined
&gt;&gt;&gt; app
&lt;Flask &#39;tutorweb&#39;&gt;
&gt;&gt;&gt; db
&lt;SQLAlchemy sqlite:&#x2F;&#x2F;&#x2F;C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end\tutorweb.db&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>修改<code>back-end/madblog.py</code>，添加一个方法：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">from tutorweb import create_app,db
from tutorweb.models import User

app&#x3D;create_app()

@app.shell_context_processor
def make_shell_context():
    return &#123;&#39;db&#39;:db,&#39;User&#39;:User&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>再次运行<code>flask shell</code>命令：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">(venv) PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end&gt; flask shell
Python 3.10.5 (tags&#x2F;v3.10.5:f377153, Jun  6 2022, 16:14:13) [MSC v.1929 64 bit (AMD64)] on win32
App: tutorweb
Instance: C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end\instance
&gt;&gt;&gt; app
&lt;Flask &#39;tutorweb&#39;&gt;
&gt;&gt;&gt; db
&lt;SQLAlchemy sqlite:&#x2F;&#x2F;&#x2F;C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end\tutorweb.db&gt;
&gt;&gt;&gt; User
&lt;class &#39;tutorweb.models.User&#39;&gt;
&gt;&gt;&gt; u&#x3D;User(username&#x3D;&#39;tom&#39;,email&#x3D;&#39;tom@163.com&#39;)
&gt;&gt;&gt; u.set_password(&#39;123456&#39;)
&gt;&gt;&gt; u.check_password(&#39;123456&#39;)
True
&gt;&gt;&gt; u.check_password(&#39;654321&#39;)
False<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="RESTful-API设计"><a href="#RESTful-API设计" class="headerlink" title="RESTful API设计"></a>RESTful API设计</h2><p>用户资源暂时提供以下几个API：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">HTTP方法</th>
<th style="text-align:left">资源URL</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>GET</code></td>
<td style="text-align:left"><code>/api/users</code></td>
<td style="text-align:left">返回所有用户的集合</td>
</tr>
<tr>
<td style="text-align:left"><code>POST</code></td>
<td style="text-align:left"><code>/api/users</code></td>
<td style="text-align:left">注册一个新用户</td>
</tr>
<tr>
<td style="text-align:left"><code>GET</code></td>
<td style="text-align:left"><code>/api/users/&lt;id&gt;</code></td>
<td style="text-align:left">返回一个用户</td>
</tr>
<tr>
<td style="text-align:left"><code>PUT</code></td>
<td style="text-align:left"><code>/api/users/&lt;id&gt;</code></td>
<td style="text-align:left">修改一个用户</td>
</tr>
<tr>
<td style="text-align:left"><code>DELETE</code></td>
<td style="text-align:left"><code>/api/users/&lt;id&gt;</code></td>
<td style="text-align:left">删除一个用户</td>
</tr>
</tbody>
</table>
</div>
<p>创建<code>tutorweb/api/users.py</code>：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">from tutorweb.api import bp

@bp.route(&#39;&#x2F;users&#39;, methods&#x3D;[&#39;POST&#39;])
def create_user():
    &#39;&#39;&#39;注册一个新用户&#39;&#39;&#39;
    pass

@bp.route(&#39;&#x2F;users&#39;, methods&#x3D;[&#39;GET&#39;])
def get_users():
    &#39;&#39;&#39;返回所有用户的集合&#39;&#39;&#39;
    pass

@bp.route(&#39;&#x2F;users&#x2F;&lt;int:id&gt;&#39;, methods&#x3D;[&#39;GET&#39;])
def get_user(id):
    &#39;&#39;&#39;返回一个用户&#39;&#39;&#39;
    pass

@bp.route(&#39;&#x2F;users&#x2F;&lt;int:id&gt;&#39;, methods&#x3D;[&#39;PUT&#39;])
def update_user(id):
    &#39;&#39;&#39;修改一个用户&#39;&#39;&#39;
    pass

@bp.route(&#39;&#x2F;users&#x2F;&lt;int:id&gt;&#39;, methods&#x3D;[&#39;DELETE&#39;])
def delete_user(id):
    &#39;&#39;&#39;删除一个用户&#39;&#39;&#39;
    pass<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>修改 <code>tutorweb/api/__init__.py</code>，在末尾添加：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">from tutorweb.api import ping,users<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="用户对象转换成JSON"><a href="#用户对象转换成JSON" class="headerlink" title="用户对象转换成JSON"></a>用户对象转换成JSON</h3><p>Flask使用的都是User实例对象，返回响应给前端时，需要传递<code>JSON</code>对象。</p>
<p>修改 <code>tutorweb/models.py</code>，给 User 数据模型添加 <code>to_dict</code> 方法：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">from flask import url_for
...

class User(db.Model):
    ...
    def to_dict(self, include_email&#x3D;False):
        data &#x3D; &#123;
            &#39;id&#39;: self.id,
            &#39;username&#39;: self.username,
            &#39;_links&#39;: &#123;
                &#39;self&#39;: url_for(&#39;api.get_user&#39;, id&#x3D;self.id)
            &#125;
        &#125;
        if include_email:
            data[&#39;email&#39;] &#x3D; self.email
        return data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>只有当用户请求自己的数据时才包含 <code>email</code>，使用 <code>include_email</code> 标志来确定该字段是否包含在字典中。<strong>调用该方法返回字典，再用 <code>flask.jsonify</code> 将字典转换成 JSON 响应</strong></p>
<h3 id="用户集合转换成JSON"><a href="#用户集合转换成JSON" class="headerlink" title="用户集合转换成JSON"></a>用户集合转换成JSON</h3><p>API 中有 <code>POST /users</code> 需要返回用户集合，所以还需要添加 <code>to_collection_dict</code> 方法。考虑到后续会创建 <code>Post</code> 等数据模型。</p>
<p>在 <code>tutorweb/models.py</code> 中设计一个通用类 <code>PaginatedAPIMixin</code>，放到User类前：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">class PaginatedAPIMixin(object):
    @staticmethod
    def to_collection_dict(query, page, per_page, endpoint, **kwargs):
        resources &#x3D; query.paginate(page&#x3D;page,per_page&#x3D;per_page,error_out&#x3D;False)
        data &#x3D; &#123;
            &#39;items&#39;: [item.to_dict() for item in resources.items],
            &#39;_meta&#39;: &#123;
                &#39;page&#39;: page,
                &#39;per_page&#39;: per_page,
                &#39;total_pages&#39;: resources.pages,
                &#39;total_items&#39;: resources.total
            &#125;,
            &#39;_links&#39;: &#123;
                &#39;self&#39;: url_for(endpoint, page&#x3D;page, per_page&#x3D;per_page,
                                **kwargs),
                &#39;next&#39;: url_for(endpoint, page&#x3D;page + 1, per_page&#x3D;per_page,
                                **kwargs) if resources.has_next else None,
                &#39;prev&#39;: url_for(endpoint, page&#x3D;page - 1, per_page&#x3D;per_page,
                                **kwargs) if resources.has_prev else None
            &#125;
        &#125;
        return data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>然后，由User类继承这个类：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">class User(PaginatedAPIMixin, db.Model):
    ...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="JSON转换成用户对象"><a href="#JSON转换成用户对象" class="headerlink" title="JSON转换成用户对象"></a>JSON转换成用户对象</h3><p>前端发送过来 JSON 对象，需要转换成 User 对象：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">def from_dict(self, data, new_user&#x3D;False):
    for field in [&#39;username&#39;, &#39;email&#39;]:
        if field in data:
            setattr(self, field, data[field])
    if new_user and &#39;password&#39; in data:
        self.set_password(data[&#39;password&#39;])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><p>创建 <code>tutorweb/api/errors.py</code>：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">from flask import jsonify
from werkzeug.http import HTTP_STATUS_CODES

def error_response(status_code, message&#x3D;None):
    payload &#x3D; &#123;&#39;error&#39;: HTTP_STATUS_CODES.get(status_code, &#39;Unknown error&#39;)&#125;
    if message:
        payload[&#39;message&#39;] &#x3D; message
    response &#x3D; jsonify(payload)
    response.status_code &#x3D; status_code
    return response

def bad_request(message):
    #最常用的错误：400：错误的请求
    return error_response(400, message)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="注册新用户"><a href="#注册新用户" class="headerlink" title="注册新用户"></a>注册新用户</h3><p>修改<code>tutorweb/api/users.py</code>：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">import re 
from flask import request,jsonify,url_for
from tutorweb import db
from tutorweb.api import bp
from tutorweb.api.errors import bad_request
from tutorweb.models import User

@bp.route(&#39;&#x2F;users&#39;,methods&#x3D;[&#39;POST&#39;])
def create_user():
    #注册一个新用户
    data&#x3D;request.get_json()
    if not data:
        return bad_request(&#39;You must post JSON data.&#39;)

    message&#x3D;&#123;&#125;
    if &#39;username&#39; not in data or not data.get(&#39;username&#39;, None):
        message[&#39;username&#39;] &#x3D; &#39;Please provide a valid username.&#39;
    pattern &#x3D; &#39;^(([^&lt;&gt;()\[\]\\.,;:\s@&quot;]+(\.[^&lt;&gt;()\[\]\\.,;:\s@&quot;]+)*)|(&quot;.+&quot;))@((\[[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]&#123;2,&#125;))$&#39;
    if &#39;email&#39; not in data or not re.match(pattern, data.get(&#39;email&#39;, None)):
        message[&#39;email&#39;] &#x3D; &#39;Please provide a valid email address.&#39;
    if &#39;password&#39; not in data or not data.get(&#39;password&#39;, None):
        message[&#39;password&#39;] &#x3D; &#39;Please provide a valid password.&#39;

    if User.query.filter_by(username&#x3D;data.get(&#39;username&#39;, None)).first():
        message[&#39;username&#39;] &#x3D; &#39;Please use a different username.&#39;
    if User.query.filter_by(email&#x3D;data.get(&#39;email&#39;, None)).first():
        message[&#39;email&#39;] &#x3D; &#39;Please use a different email address.&#39;
    if message:
        return bad_request(message)      

    user&#x3D;User()
    user.from_dict(data,new_user&#x3D;True)
    db.session.add(user)
    db.session.commit()
    response&#x3D;jsonify(user.to_dict())
    response.status_code&#x3D;201
    #HTTP协议要求201响应包含一个值为新资源URL的Location头部
    response.headers[&#39;Location&#39;]&#x3D;url_for(&#39;api.get_user&#39;,id&#x3D;user.id)
    return response<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在<code>C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end</code>的目录下右键，选择在终端打开后，运行应用：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end&gt; venv\Scripts\activate
(venv) PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end&gt; pip install --upgrade httpie
(venv) PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end&gt; flask run

 * Serving Flask app &#39;madblog.py&#39;
WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.
 * Running on http:&#x2F;&#x2F;127.0.0.1:5000
Press CTRL+C to quit
 * Restarting with stat
 * Debugger is active!
 * Debugger PIN: 354-979-609<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>保持应用处于运行的状态后，打开另一个终端并激活环境。使用HTTPie或Postman测试API接口：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">(venv) PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end&gt; http POST http:&#x2F;&#x2F;localhost:5000&#x2F;api&#x2F;users username&#x3D;lisi password&#x3D;123 email&#x3D;lisi@163.com

HTTP&#x2F;1.1 201 CREATED
Access-Control-Allow-Origin: *
Connection: close
Content-Length: 82
Content-Type: application&#x2F;json
Date: Mon, 24 Oct 2022 03:12:01 GMT
Location: &#x2F;api&#x2F;users&#x2F;5
Server: Werkzeug&#x2F;2.2.2 Python&#x2F;3.10.5

&#123;
    &quot;_links&quot;: &#123;
        &quot;self&quot;: &quot;&#x2F;api&#x2F;users&#x2F;5&quot;
    &#125;,
    &quot;id&quot;: 5,
    &quot;username&quot;: &quot;lisi&quot;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>若应用没有运行，会报错：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">(venv) PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end&gt; http POST http:&#x2F;&#x2F;localhost:5000&#x2F;api&#x2F;users username&#x3D;lisi password&#x3D;123 email&#x3D;lisi@163.com

http: error: ConnectionError: HTTPConnectionPool(host&#x3D;&#39;localhost&#39;, port&#x3D;5000): Max retries exceeded with url: &#x2F;api&#x2F;users (Caused by NewConnectionError(&#39;&lt;urllib3.connection.HTTPConnection object at 0x0000022A6C404550&gt;: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。&#39;)) while doing a POST request to URL: http:&#x2F;&#x2F;localhost:5000&#x2F;api&#x2F;users<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="检索单个用户"><a href="#检索单个用户" class="headerlink" title="检索单个用户"></a>检索单个用户</h3><p>修改<code>tutorweb/api/users.py</code>：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">@bp.route(&#39;&#x2F;users&#x2F;&lt;int:id&gt;&#39;, methods&#x3D;[&#39;GET&#39;])
def get_user(id):
    #返回一个用户
    return jsonify(User.query.get_or_404(id).to_dict())<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>保持应用处于运行的状态后，在另一个终端检索用户：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">(venv) PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end&gt; http GET http:&#x2F;&#x2F;localhost:5000&#x2F;api&#x2F;users&#x2F;4 

HTTP&#x2F;1.1 200 OK
Access-Control-Allow-Origin: *
Connection: close
Content-Type: application&#x2F;json
Date: Mon, 24 Oct 2022 03:16:47 GMT
Server: Werkzeug&#x2F;2.2.2 Python&#x2F;3.10.5

&#123;
    &quot;_links&quot;: &#123;
        &quot;self&quot;: &quot;&#x2F;api&#x2F;users&#x2F;4&quot;
    &#125;,
    &quot;id&quot;: 4,
    &quot;username&quot;: &quot;zhangsan&quot;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>若查询的用户id不存在，返回404错误</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">(venv) PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end&gt; http GET http:&#x2F;&#x2F;localhost:5000&#x2F;api&#x2F;users&#x2F;7 

HTTP&#x2F;1.1 404 NOT FOUND
Access-Control-Allow-Origin: *
Connection: close
Content-Length: 207
Content-Type: text&#x2F;html; charset&#x3D;utf-8
Date: Mon, 24 Oct 2022 03:19:48 GMT
Server: Werkzeug&#x2F;2.2.2 Python&#x2F;3.10.5

&lt;!doctype html&gt;
&lt;html lang&#x3D;en&gt;
&lt;title&gt;404 Not Found&lt;&#x2F;title&gt;
&lt;h1&gt;Not Found&lt;&#x2F;h1&gt;
&lt;p&gt;The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.&lt;&#x2F;p&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>修改<code>tutorweb/api/errors.py</code>，设置返回JSON错误信息</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">from tutorweb import db
from tutorweb.api import bp
...

@bp.app_errorhandler(404)
def not_found_error(error):
    return error_response(404)

@bp.app_errorhandler(500)  
def internal_error(error):
    db.session.rollback()
    return error_response(500)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>若查询的用户id不存在，此时返回404错误信息为：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">(venv) PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end&gt; http GET http:&#x2F;&#x2F;localhost:5000&#x2F;api&#x2F;users&#x2F;7
HTTP&#x2F;1.1 404 NOT FOUND
Access-Control-Allow-Origin: *
Connection: close
Content-Length: 27
Content-Type: application&#x2F;json
Date: Mon, 24 Oct 2022 03:17:01 GMT
Server: Werkzeug&#x2F;2.2.2 Python&#x2F;3.10.5

&#123;
    &quot;error&quot;: &quot;Not Found&quot;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="检索用户集合"><a href="#检索用户集合" class="headerlink" title="检索用户集合"></a>检索用户集合</h3><p>修改<code>tutorweb/api/users.py</code>：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">@bp.route(&#39;&#x2F;users&#39;,methods&#x3D;[&#39;GET&#39;])
def get_users():
    #返回所有用户的集合
    page&#x3D;request.args.get(&#39;page&#39;,1,type&#x3D;int)
    per_page&#x3D;min(request.args.get(&#39;per_page&#39;,10,type&#x3D;int),100)
    data&#x3D;User.to_collection_dict(User.query,page,per_page,&#39;api.get_users&#39;)
    return jsonify(data)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>终端测试如下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">(venv) PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end&gt; http GET http:&#x2F;&#x2F;localhost:5000&#x2F;api&#x2F;users 

HTTP&#x2F;1.1 200 OK
Access-Control-Allow-Origin: *
Connection: close
Content-Length: 889
Content-Type: application&#x2F;json
Date: Mon, 24 Oct 2022 06:24:27 GMT
Server: Werkzeug&#x2F;2.2.2 Python&#x2F;3.10.5

&#123;
    &quot;_links&quot;: &#123;
        &quot;next&quot;: null,
        &quot;prev&quot;: null,
        &quot;self&quot;: &quot;&#x2F;api&#x2F;users?page&#x3D;1&amp;per_page&#x3D;10&quot;
    &#125;,
    &quot;_meta&quot;: &#123;
        &quot;page&quot;: 1,
        &quot;per_page&quot;: 10,
        &quot;total_items&quot;: 6,
        &quot;total_pages&quot;: 1
    &#125;,
    &quot;items&quot;: [
        &#123;
            &quot;_links&quot;: &#123;
                &quot;self&quot;: &quot;&#x2F;api&#x2F;users&#x2F;1&quot;
            &#125;,
            &quot;id&quot;: 1,
            &quot;username&quot;: &quot;alice&quot;
        &#125;,
        &#123;
            &quot;_links&quot;: &#123;
                &quot;self&quot;: &quot;&#x2F;api&#x2F;users&#x2F;2&quot;
            &#125;,
            &quot;id&quot;: 2,
            &quot;username&quot;: &quot;bob&quot;
        &#125;,
        &#123;
            &quot;_links&quot;: &#123;
                &quot;self&quot;: &quot;&#x2F;api&#x2F;users&#x2F;3&quot;
            &#125;,
            &quot;id&quot;: 3,
            &quot;username&quot;: &quot;madman&quot;
        &#125;,
        &#123;
            &quot;_links&quot;: &#123;
                &quot;self&quot;: &quot;&#x2F;api&#x2F;users&#x2F;4&quot;
            &#125;,
            &quot;id&quot;: 4,
            &quot;username&quot;: &quot;zhangsan&quot;
        &#125;,
        &#123;
            &quot;_links&quot;: &#123;
                &quot;self&quot;: &quot;&#x2F;api&#x2F;users&#x2F;5&quot;
            &#125;,
            &quot;id&quot;: 5,
            &quot;username&quot;: &quot;lisi&quot;
        &#125;,
        &#123;
            &quot;_links&quot;: &#123;
                &quot;self&quot;: &quot;&#x2F;api&#x2F;users&#x2F;6&quot;
            &#125;,
            &quot;id&quot;: 6,
            &quot;username&quot;: &quot;wangwu&quot;
        &#125;
    ]
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="修改用户"><a href="#修改用户" class="headerlink" title="修改用户"></a>修改用户</h3><p>修改<code>tutorweb/api/users.py</code>：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">@bp.route(&#39;&#x2F;users&#x2F;&lt;int:id&gt;&#39;,methods&#x3D;[&#39;PUT&#39;])
def update_user(id):
    #修改一个用户
    user&#x3D;User.query.get_or_404(id)
    data&#x3D;request.get_json()
    if not data:
        return bad_request(&#39;You must post JSON data.&#39;)

    message&#x3D;&#123;&#125;
    if &#39;username&#39; in data and not data.get(&#39;username&#39;, None):
        message[&#39;username&#39;]&#x3D;&#39;Please provide a valid username.&#39;
    pattern&#x3D;&#39;^(([^&lt;&gt;()\[\]\\.,;:\s@&quot;]+(\.[^&lt;&gt;()\[\]\\.,;:\s@&quot;]+)*)|(&quot;.+&quot;))@((\[[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]&#123;2,&#125;))$&#39;
    if &#39;email&#39; in data and not re.match(pattern, data.get(&#39;email&#39;, None)):
        message[&#39;email&#39;]&#x3D;&#39;Please provide a valid email address.&#39;
    if &#39;username&#39; in data and data[&#39;username&#39;] !&#x3D; user.username and \
            User.query.filter_by(username&#x3D;data[&#39;username&#39;]).first():
        message[&#39;username&#39;]&#x3D;&#39;Please use a different username.&#39;
    if &#39;email&#39; in data and data[&#39;email&#39;] !&#x3D; user.email and \
            User.query.filter_by(email&#x3D;data[&#39;email&#39;]).first():
        message[&#39;email&#39;]&#x3D;&#39;Please use a different email address.&#39;

    if message:
        return bad_request(message) 
        
    user.from_dict(data,new_user&#x3D;False)    
    db.session.commit()
    return jsonify(user.to_dict())<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>终端测试如下：<br><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">(venv) PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end&gt; http PUT http:&#x2F;&#x2F;localhost:5000&#x2F;api&#x2F;users&#x2F;5 email&#x3D;madman@gmail.com 

HTTP&#x2F;1.1 200 OK
Access-Control-Allow-Origin: *
Connection: close
Content-Length: 82
Content-Type: application&#x2F;json
Date: Mon, 24 Oct 2022 05:16:38 GMT
Server: Werkzeug&#x2F;2.2.2 Python&#x2F;3.10.5

&#123;
    &quot;_links&quot;: &#123;
        &quot;self&quot;: &quot;&#x2F;api&#x2F;users&#x2F;5&quot;
    &#125;,
    &quot;id&quot;: 5,
    &quot;username&quot;: &quot;lisi&quot;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>
<h2 id="API认证"><a href="#API认证" class="headerlink" title="API认证"></a>API认证</h2><p>为了简化使用 <code>token</code> 认证时客户端和服务器之间的交互，可以使用 <code>Flask-HTTPAuth</code> 插件</p>
<pre class="line-numbers language-none"><code class="language-none">(venv) PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end&gt;pip install flask-httpauth
(venv) PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end&gt;pip freeze &gt; requirements.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>当客户端想要开始与 API 交互时，它需要使用用户名和密码进行 Basic Auth 验证，然后获得一个临时 token。只要 token 有效，客户端就可以发送附带 token 的 API 请求以通过认证。一旦 token 到期，需要申请新的 token。</p>
<h3 id="User-数据模型添加-token"><a href="#User-数据模型添加-token" class="headerlink" title="User 数据模型添加 token"></a>User 数据模型添加 token</h3><p>修改 <code>tutorweb/models.py</code>：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">import base64
from datetime import datetime, timedelta
import os
...

class User(PaginatedAPIMixin, db.Model):
    ...
    token &#x3D; db.Column(db.String(32), index&#x3D;True, unique&#x3D;True)
    token_expiration &#x3D; db.Column(db.DateTime)
    ...

    def get_token(self, expires_in&#x3D;3600):
        now &#x3D; datetime.utcnow()
        if self.token and self.token_expiration &gt; now + timedelta(seconds&#x3D;60):
            return self.token
        self.token &#x3D; base64.b64encode(os.urandom(24)).decode(&#39;utf-8&#39;)
        self.token_expiration &#x3D; now + timedelta(seconds&#x3D;expires_in)
        db.session.add(self)
        return self.token

    def revoke_token(self):
        self.token_expiration &#x3D; datetime.utcnow() - timedelta(seconds&#x3D;1)

    @staticmethod
    def check_token(token):
        user &#x3D; User.query.filter_by(token&#x3D;token).first()
        if user is None or user.token_expiration &lt; datetime.utcnow():
            return None
        return user<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>创建数据库迁移脚本并应用：</p>
<pre class="line-numbers language-none"><code class="language-none">(venv) PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end&gt;flask db migrate -m &quot;user add tokens&quot;
(venv) PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end&gt;flask db upgrade<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="HTTP-Basic-Authentication"><a href="#HTTP-Basic-Authentication" class="headerlink" title="HTTP Basic Authentication"></a>HTTP Basic Authentication</h3><p>创建 <code>tutorweb/api/auth.py</code>：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">from flask import g
from flask_httpauth import HTTPBasicAuth,HTTPTokenAuth
from tutorweb.models import User
from tutorweb.api.errors import error_response

basic_auth&#x3D;HTTPBasicAuth()

@basic_auth.verify_password
def verify_password(username,password):
    #用于检查用户提供的用户名和密码
    user&#x3D;User.query.filter_by(username&#x3D;username).first()
    if user is None:
        return False
    g.current_user&#x3D;user
    return user.check_password(password)

@basic_auth.error_handler
def basic_auth_error():
    #用于在认证失败情况下返回错误响应
    return error_response(401)   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="客户端申请-Token"><a href="#客户端申请-Token" class="headerlink" title="客户端申请 Token"></a>客户端申请 Token</h3><p>目前已经实现了 Basic Auth 验证的支持，因此可以添加一条 token 检索路由，以便客户端在需要 token 时调用。</p>
<p>创建 <code>tutorweb/api/tokens.py</code>：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">from flask import jsonify,g
from tutorweb import db
from tutorweb.api import bp
from tutorweb.api.auth import basic_auth,token_auth

@bp.route(&#39;&#x2F;tokens&#39;,methods&#x3D;[&#39;POST&#39;])
@basic_auth.login_required

def get_token():
    token&#x3D;g.current_user.get_token()
    db.session.commit()
    return jsonify(&#123;&#39;token&#39;:token&#125;)

@bp.route(&#39;&#x2F;tokens&#39;,methods&#x3D;[&#39;DELETE&#39;])    
@token_auth.login_required
def revoke_token():
    g.current_user.revoke_token()
    db.session.commit()
    return &#39;&#39;,204<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>装饰器 <code>@basic_auth.login_required</code> 将指示 <code>Flask-HTTPAuth</code> 验证身份，当通过 Basic Auth 验证后，才使用用户模型的 <code>get_token()</code> 方法来生成 token，数据库提交在生成 token 后发出，以确保 token 及其到期时间被写回到数据库。</p>
<p>修改 <code>tutorweb/api/__init__.py</code>，在末尾添加：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">from tutorweb.api import ping, users, tokens<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>如果尝试直接向 token API 路由发送 POST 请求，则会发生以下情况：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">(venv) PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end&gt; http POST http:&#x2F;&#x2F;localhost:5000&#x2F;api&#x2F;tokens

HTTP&#x2F;1.1 401 UNAUTHORIZED
Access-Control-Allow-Origin: *
Connection: close
Content-Length: 30
Content-Type: application&#x2F;json
Date: Mon, 24 Oct 2022 04:51:39 GMT
Server: Werkzeug&#x2F;2.2.2 Python&#x2F;3.10.5
WWW-Authenticate: Basic realm&#x3D;&quot;Authentication Required&quot;

&#123;
    &quot;error&quot;: &quot;Unauthorized&quot;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果在 POST 请求附带上了 Basic Auth 需要的凭证：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">(venv) PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end&gt; http --auth madman:123 POST http:&#x2F;&#x2F;localhost:5000&#x2F;api&#x2F;tokens
                
HTTP&#x2F;1.1 200 OK
Access-Control-Allow-Origin: *
Connection: close
Content-Length: 50
Content-Type: application&#x2F;json
Date: Mon, 24 Oct 2022 04:52:22 GMT
Server: Werkzeug&#x2F;2.2.2 Python&#x2F;3.10.5

&#123;
    &quot;token&quot;: &quot;q2L2Umakr5&#x2F;iSrf1L4mglZmYoBD&#x2F;K9Je&quot;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="HTTP-Token-Authentication"><a href="#HTTP-Token-Authentication" class="headerlink" title="HTTP Token Authentication"></a>HTTP Token Authentication</h2><p>用户通过 Basic Auth 拿到 token 后，之后的请求只要附带这个 token 就能够访问其它 API，修改 <code>tutorweb/api/auth.py</code>：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">from flask_httpauth import HTTPBasicAuth,HTTPTokenAuth
...

token_auth&#x3D;HTTPTokenAuth()
...

@token_auth.verify_token
def verify_token(token):
    #用于检查用户请求是否有token,且token真实存在，还在有效期内
    g.current_user&#x3D;User.check_token(token) if token else None
    return g.current_user is not None

@token_auth.error_handler
def token_auth_error():
    #用于在Token Auth认证失败的情况下返回错误响应
    return error_response(401)        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>修改<code>tutorweb/api/users.py</code>，在文件开头导入模块：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">from tutorweb.api.auth import token_auth<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="使用-Token-机制保护-API-路由"><a href="#使用-Token-机制保护-API-路由" class="headerlink" title="使用 Token 机制保护 API 路由"></a>使用 Token 机制保护 API 路由</h3><p>除 <code>create_user()</code> 之外的所有 API 视图函数需要添加 <code>@token_auth.login_required</code> 装饰器， <code>create_user()</code>函数不能使用 token 认证，因为用户不存在时不会有 token 。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">@bp.route(&#39;&#x2F;users&#39;, methods&#x3D;[&#39;GET&#39;])
@token_auth.login_required
def get_users():
    ...

@bp.route(&#39;&#x2F;users&#x2F;&lt;int:id&gt;&#39;, methods&#x3D;[&#39;GET&#39;])
@token_auth.login_required
def get_user(id):
    ...

...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>若直接对上面列出的受 token 保护的 endpoint 发起请求，则会得到一个 <code>401</code> 错误：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">(venv) PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end&gt; http GET http:&#x2F;&#x2F;localhost:5000&#x2F;api&#x2F;users&#x2F;5

HTTP&#x2F;1.1 401 UNAUTHORIZED
Access-Control-Allow-Origin: *
Connection: close
Content-Length: 30
Content-Type: application&#x2F;json
Date: Mon, 24 Oct 2022 04:56:51 GMT
Server: Werkzeug&#x2F;2.2.2 Python&#x2F;3.10.5
WWW-Authenticate: Bearer realm&#x3D;&quot;Authentication Required&quot;

&#123;
    &quot;error&quot;: &quot;Unauthorized&quot;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>为了成功访问，需要添加 <code>Authorization</code> 头部，其值是请求 <code>/api/tokens</code> 获得的 token 的值：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">(venv) PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end&gt; http GET http:&#x2F;&#x2F;localhost:5000&#x2F;api&#x2F;users&#x2F;5 &quot;Authorization:Bearer q2L2Umakr5&#x2F;iSrf1L4mglZmYoBD&#x2F;K9Je&quot;

HTTP&#x2F;1.1 200 OK
Access-Control-Allow-Origin: *
Connection: close
Content-Length: 82
Content-Type: application&#x2F;json
Date: Mon, 24 Oct 2022 04:58:20 GMT
Server: Werkzeug&#x2F;2.2.2 Python&#x2F;3.10.5

&#123;
    &quot;_links&quot;: &#123;
        &quot;self&quot;: &quot;&#x2F;api&#x2F;users&#x2F;5&quot;
    &#125;,
    &quot;id&quot;: 5,
    &quot;username&quot;: &quot;lisi&quot;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="撤销-Token"><a href="#撤销-Token" class="headerlink" title="撤销 Token"></a>撤销 Token</h3><p>修改 <code>tutorweb/api/tokens.py</code>：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">from tutorweb.api.auth import basic_auth,token_auth
...

@bp.route(&#39;&#x2F;tokens&#39;,methods&#x3D;[&#39;DELETE&#39;])    
@token_auth.login_required
def revoke_token():
    g.current_user.revoke_token()
    db.session.commit()
    return &#39;&#39;,204<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>客户端可以向 <code>/api/tokens</code> URL发送 <code>DELETE</code> 请求，以使 token 失效</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">(venv) PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end&gt; http DELETE http:&#x2F;&#x2F;localhost:5000&#x2F;api&#x2F;tokens &quot;Authorization:Bearer QYnLb1pN&#x2F;l4I4j2KwZWzr7+imtyekI66&quot;

HTTP&#x2F;1.1 204 NO CONTENT
Access-Control-Allow-Origin: *
Connection: close
Content-Type: text&#x2F;html; charset&#x3D;utf-8
Date: Mon, 24 Oct 2022 03:31:11 GMT
Server: Werkzeug&#x2F;2.2.2 Python&#x2F;3.10.5

(venv) PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end&gt; http DELETE http:&#x2F;&#x2F;localhost:5000&#x2F;api&#x2F;tokens &quot;Authorization:Bearer QYnLb1pN&#x2F;l4I4j2KwZWzr7+imtyekI66&quot;

HTTP&#x2F;1.1 401 UNAUTHORIZED
Access-Control-Allow-Origin: *
Connection: close
Content-Type: application&#x2F;json
Date: Mon, 24 Oct 2022 03:32:00 GMT
Server: Werkzeug&#x2F;2.2.2 Python&#x2F;3.10.5
WWW-Authenticate: Bearer realm&#x3D;&quot;Authentication Required&quot;

&#123;
    &quot;error&quot;: &quot;Unauthorized&quot;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>至此，Flask后端已成功配置。最终的代码目录如下：</p>
<p><img src="/2022/10/24/Flask%E5%AE%9E%E6%88%98%EF%BC%9A%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%90%8E%E7%AB%AF/3.png" alt></p>
]]></content>
      <categories>
        <category>Web框架</category>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Flask Web</tag>
        <tag>后端</tag>
        <tag>Web框架</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客迁移</title>
    <url>/2025/04/12/Hexo%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/</url>
    <content><![CDATA[<h1 id="迁移博客文件到新电脑"><a href="#迁移博客文件到新电脑" class="headerlink" title="迁移博客文件到新电脑"></a>迁移博客文件到新电脑</h1><p>将旧电脑里blog文件夹下所有文件拷贝到新电脑中，这个过程持续时间比较长，所以先做。</p>
<p>如果想要加快拷贝速度的话，可以把node_modules文件夹删除，在新电脑里通过<code>npm install</code>的命令重新下载回来</p>
<h1 id="配置新电脑基础环境"><a href="#配置新电脑基础环境" class="headerlink" title="配置新电脑基础环境"></a>配置新电脑基础环境</h1><h2 id="Git安装-amp-配置"><a href="#Git安装-amp-配置" class="headerlink" title="Git安装&amp;配置"></a>Git安装&amp;配置</h2><p>由于我使用的是window系统，去官网下载Git客户端安装<a href="https://git-scm.com/downloads/win">Git - Downloading Package</a></p>
<ul>
<li>安装完成后，在桌面右键单击，看到菜单有git相关的选项即为安装成功。</li>
</ul>
<p><img src="/2025/04/12/Hexo%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/4.png" alt></p>
<ul>
<li><p>点击选择 <code>Open Git Bash here</code>打开git终端，输入以下命令将git配置的用户名邮箱设置成github上的用户名与邮箱</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#配置GitHub的用户名与邮箱
git config --global user.name 用户名
git config --global user.email 邮箱
#查看config确认是否配置成功
git config --list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h2 id="SSH生成-amp-amp-配置"><a href="#SSH生成-amp-amp-配置" class="headerlink" title="SSH生成&amp;&amp;配置"></a>SSH生成&amp;&amp;配置</h2><ul>
<li>如果本机没有这个邮箱相关的ssh密钥，输入以下命令生成密钥：</li>
</ul>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#输入命令后一直按回车键，直到生成密钥
ssh-keygen -t rsa -C 邮箱
#显示密钥信息，复制，下一步要用
cat ~&#x2F;.ssh&#x2F;id_rsa.pub<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><p>进入Github的个人设置页面，找到<code>SSH and GPG Keys</code> 选项：</p>
<p><img src="/2025/04/12/Hexo%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/1.png" alt></p>
<p><img src="/2025/04/12/Hexo%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/2.png" alt></p>
</li>
<li><p>新建SSH key，把刚刚复制的ssh key粘贴在Key处，设定key的名字后，点击<code>Add SSH key</code> 。</p>
<p><img src="/2025/04/12/Hexo%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/3.png" alt></p>
</li>
</ul>
<h2 id="安装node"><a href="#安装node" class="headerlink" title="安装node"></a>安装node</h2><ul>
<li><p>去官网上下载node<a href="https://link.zhihu.com/?target=https%3A//nodejs.org/en">nodejs.org/en</a></p>
</li>
<li><p>安装完成后，打开cmd，输入<code>npm -v</code>，看到显示版本号，即表示安装成功</p>
</li>
<li><p>输入以下命令给npm更换镜像源：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#换成淘宝源
npm config set registry https:&#x2F;&#x2F;registry.npmmirror.com
#检查镜像源是否更换成功
npm config get registry<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>待博客文件都迁移完成后，进入到博客文件夹里，鼠标右键后点击选择 <code>Open Git Bash here</code>打开git终端，输入以下命令安装Hexo：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm install hexo-cli -g
npm install hexo-deployer-git --save
# 如果文件迁移时删除了node_modules文件，这里需要再多执行一个命令： npm install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>至此，博客已完成了迁移，可以在新电脑上使用hexo相关命令正常上传博文了</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#清理缓存
hexo clean
#生成文件
hexo g
#预览博客
hexo s
#推送博客
hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes实践：从yaml创建工作负载</title>
    <url>/2023/03/31/Kubernetes%E5%AE%9E%E8%B7%B5%EF%BC%9A%E4%BB%8Eyaml%E5%88%9B%E5%BB%BA%E5%B7%A5%E4%BD%9C%E8%B4%9F%E8%BD%BD/</url>
    <content><![CDATA[<h1 id="Pod"><a href="#Pod" class="headerlink" title="Pod"></a>Pod</h1><p>Pod是Kubernetes中的基本单位。容器本身不会直接分配到主机上，而会封装到名为Pod的对象中。Kubernetes以Pod为最小单位进行调度、伸缩并共享资源、管理生命周期。</p>
<p>Pod通常表示单个应用程序，由一个或多个关系紧密的容器构成，这些容器拥有同样的生命周期，作为一个整体一起编排到Node上。这些容器共享环境、存储卷（volume）和IP空间。尽管Pod基于一个或多个容器，但应将Pod视作一个单一的整体、单独的应用程序。</p>
<h1 id="Pod模板"><a href="#Pod模板" class="headerlink" title="Pod模板"></a>Pod模板</h1><p>在创建Pod时，需要定义一个模板文件（.yml文件），并将其称为Pod模板。可以用Pod模板来定义资源，以下是Pod模板的主要内容及对应说明：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">---
apiVersion: v1 # 使用的API版本，V1表示使用 Kubernetes API的稳定版本
kind: Pod # 要创建的资源对象，这里为关键字Pod
metadata: # 表示该资源对象的元数据，一个资源对象可拥有多个元数据。表示资源的标识信息
  name: String # 元数据，必填，Pod的名字
  namespace: String # 元数据，Pod的命名空间
  labels: # 元数据，标签列表
    - key: value # 元数据，可定义多个标签的键值对 
  annotations: # 元数据，自定义注解列表
    - key: value # 元数据，可定义多个标签的键值对 
spec: # 该资源对象的具体设置，Pod中容器的详细配置，必填
  containers: # Pod中的容器列表，必填，可以有多个容器
  - name: String # 要创建的容器名称，必填                
    image: String # 容器的镜像地址，必填
    imagePullPolicy: [Always|Never|IfNotPresent] # 镜像的下载策略，支持3种模式
    command: [String] # 容器的启动命令列表（不配置则使用镜像内部的命令）
    args: [String] # 启动参数列表
    workingDir: String # 容器的工作目录
    volumeMounts: # 挂载到容器内部的存储卷设置
    - name: String # 为了引用Pod定义的共享存储卷名称，要用volumes[]部分定义的卷名
      mountPath: String # 存储卷在容器内挂载的绝对路径，应少于512个字符
      readOnly: Boolean # 是否为只读模式
    ports: # 容器需要暴露的端口号列表
    - name: String # 端口名称
      containerPort: int # 容器要暴露的端口
      hostPost: int # 容器所在主机监听的端口（把容器暴露的端口映射到宿主机的端口）
      protocol: String # 端口协议，支持TCP和UDP，默认为TCP
    env: # 容器运行前要设置的环境变量列表
    - name: String # 环境变量名称
      value: String # 环境变量值
    resources: # 资源限制和请求的设置
      limits: # 资源限制的设置
        cpu: String # cpu限制，单位为CPU内核数，也可以使用小数，如0.1，0.1等价于表达式100m，表示100milicpu
        memory: String # 内存限制，单位可以为MiB&#x2F;GiB&#x2F;MB&#x2F;GB (1MB&#x3D;1024x1024B&#x3D;1024x1024x1000x1000B)。
      requests: # 资源请求的设置
        cpu: String # cpu请求，容器启动时的初始可用数量
        memory: String # 内存请求，容器启动时的初始可用数量
      livenessProbe: # Pod内容器健康检查的设置，当探测几次无响应后将自动重启该容器。
      # 检查方法有exec、httpGet、tcpSocket，对一个容器只要设置一种方法即可
        exec: # 通过exec方式来检查Pod内各容器的健康情况
          command: [String] # exec方式需要指定的命令或脚本
        httpGet: # 通过httpGet方式来检查Pod内各容器的健康情况，需要指定path、port
          path: String
          port: number
          host: String
          scheme: String
          httpHeaders: 
          - name: String
            value: String
        tcpSocket: # 通过tcpSocket方式来检查Pod内各容器的健康情况
          port: number    
        initialDelaySeconds: 0 # 容器启动完成后，首次探测的时间（单位为秒）
        timeoutSeconds: 0 # 对容器进行健康检查时探测等待响应的超时时间（单位为秒，默认为1s）
        periodSeconds: 0 # 对容器监控检查的定期探测时间设置（单位为秒，默认10s一次）
        successThreshold: 0 
        failureThreshold: 0  
        securityContext: # 安全配置
          privileged: false
      restartPolicy: [Always|Never|OnFailure] # Pod的重启策略，有三种可以选   
      nodeSelector: # 节点选择，设置nodeSelector表示将该Pod调度到包含这个标签的节点上
      - key: value 
      imagePullSecrets: # 拉取镜像时使用的secret名称
      - name: String
      hostNetwork: false # 是否使用主机网络模式，默认为false
    volumes: # 在该Pod上定义的共享存储卷列表
    - name: String # 共享存储卷名称
      emptyDir: &#123;&#125; # 类型为emptyDir的存储卷，与Pod有相同生命周期的一个临时目录，为空值
      hostPath: # 类型为hostPathr的存储卷，将会挂载Pod所在宿主机的目录
        path: String
      secret: #类型为secret的存储卷，在容器内部挂载集群中预定义的secret对象
        secretName: String
        items: 
        - key: String
          path: String
        configMap: #类型为secret的存储卷，挂载预定义的configMap对象到容器内部
          name: String
          items:
          - key: String
            path: String    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="控制器——Pod的管理"><a href="#控制器——Pod的管理" class="headerlink" title="控制器——Pod的管理"></a>控制器——Pod的管理</h1><p>一般来说，用户不会直接创建Pod，而是创建控制器，让控制器来管理Pod。在控制器中定义Pod的部署方式，如有多少个副本、需要在哪种Node上运行等。根据不同的业务场景，Kubernetes提供了多种控制器。</p>
<h2 id="Deployment-控制器（部署）"><a href="#Deployment-控制器（部署）" class="headerlink" title="Deployment 控制器（部署）"></a>Deployment 控制器（部署）</h2><p>Deployment控制器是最常用的工作负载对象之一。</p>
<p>在使用Kubernetes时，通常要管理由多个相同Pod所组成的Pod集合，而不是单个Pod。通过Deployment控制器，可以定义Pod模板，并设置相应控制参数以实现水平伸缩，以调节正在运行的相同Pod数。</p>
<p>Deployment控制器保证在集群中部署的Pod数量和配置中的Pod数量一致。若Pod或主机出现故障，则会自动启用新的Pod进行补充。</p>
<p>创建Deployment 控制器也需要定义一个模板文件（.yml文件）。可以用Deployment控制器的模板来定义资源，以下是模板的主要内容及对应说明：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">---
apiVersion: apps&#x2F;v1 # 使用的API版本，V1表示使用稳定版本
kind: Deployment # 要创建的资源对象，这里为关键字Deployment
metadata: # 表示该资源对象的元数据，一个资源对象可拥有多个元数据。表示资源的标识信息
  name: String # 元数据，必填，Deployment控制器的名字
  namespace: String # 元数据，Deployment控制器的命名空间
  labels: # 元数据，标签列表
    - key: value # 元数据，可定义多个标签的键值对 
  annotations: # 元数据，自定义注解列表
    - key: value # 元数据，可定义多个标签的键值对 
spec: 
  selector: # 必填，用于指定Deployment控制器针对的Pod的标签选择器，需要与template中的标签匹配
    matchLabels:  # 定义需要匹配的标签集合
      key: value # 需要匹配的标签，可定义多个标签的键值对
  template: [PodTemplate] # 必填，Pod模板，它与Pod具有完全相同的结构，不过他是嵌套的，且不需要带apiVersion或kind字段
  replicas: int # 指定所需Pod的数量，默认为1
  strategy: # 更新时替换旧Pod的策略
    type: Recreate&#x2F;RollingUpdate # Recreate表示现有的Pod都会在创建新的Pod之前被终止，RollingUpdate表示以滚动更新方式更新Pod
    rollingUpdate:
      maxSurge: int&#x2F;int% # 在滚动更新时，在所需数量的Pod上允许创建的最大Pod数，也可用百分比形式
      maxUnavailable: int&#x2F;int% # 在滚动更新时，同时存在最大不可用Pod数，也可用百分比形式
  progressDeadlineseconds: int # Deployment控制器处于进行状态时的等待秒数，超过这个时间将会变为失败
  minReadySeconds: int # 指定新创建的Pod应该在没有任何容器崩溃的情况下准备好的最短秒数
  revisionHistoryLimit: int # 指定要保留的允许回滚的旧ReplicaSet数量
  paused: boolean # 默认为false，用于暂停和恢复部署，当暂停部署时，Pod模板中spec属性的任何更改都不会触发新的部署<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="DaemonSet-控制器（有状态副本集）"><a href="#DaemonSet-控制器（有状态副本集）" class="headerlink" title="DaemonSet 控制器（有状态副本集）"></a>DaemonSet 控制器（有状态副本集）</h2><p>DaemonSet 控制器是一种特殊的Pod控制器，会在集群中的各个节点上运行单一的Pod副本。它非常适合部署那些为节点本身提供服务或执行维护的Pod。如对于日志收集和转发、监控以及运行以增加节点本身功能为目的的服务都使用DaemonSet 控制器。</p>
<p>DaemonSet 控制器的一些典型用法包括但不限于以下几种：</p>
<ul>
<li>运行集群存储Daemon控制器，如在每个Node上运行glusterd、ceph。</li>
<li>在每个Node上运行日志收集Daemon控制器，如Fluentd、logstash。</li>
<li>在每个Node上运行监控Daemon控制器，如Prometheus Node Exporter、collectd、Datadog代理、New Relic代理或Ganglia gmond。</li>
</ul>
<p>创建DaemonSet 控制器的模板与Deployment控制器的模板相同</p>
<h2 id="Job与CronJob控制器"><a href="#Job与CronJob控制器" class="headerlink" title="Job与CronJob控制器"></a>Job与CronJob控制器</h2><h3 id="Job工作负载"><a href="#Job工作负载" class="headerlink" title="Job工作负载"></a>Job工作负载</h3><p>Job的工作负载对象基于某一特定任务而运行，当运行任务的容器完成工作后，就会成功退出。若需要执行一次性任务，而非提供连续的服务，则适合创建job工作负载。</p>
<p>Job控制器可以执行3种类型的任务：</p>
<ul>
<li><p>一次性任务：通常只会启动一个Pod（除非Pod失败）。一旦Pod成功终止，Job就算完成了。其模板如下：</p>
  <pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">---
apiVersion: batch&#x2F;v1 # 使用的API版本，V1表示使用稳定版本
kind: Job # 要创建的资源对象，这里为关键字Job
metadata: # 表示该资源对象的元数据，一个资源对象可拥有多个元数据。表示资源的标识信息
  name: String # 元数据，必填，Job工作负载的名字
spec: 
  template:  # 必填，Pod模板，它与Pod具有完全相同的结构，不过他是嵌套的，且不需要带apiVersion或kind字段
    spec:
      activeDeadlineSeconds: int # 指定执行任务的上限时间（单位为秒），超时时任务将强制终止并删除
      ttlSecondsAfterFinished: int # 用于确定在所有任务执行完成后，需要等待多少秒才可删除Job，默认关闭
      restartPolicy: [Never|OnFailure] 
      containers:
      - name: String
        image: String
        imagePullPolicy: 
        command: [String]
          - --feature-gates&#x3D;TTLSecondsAfterFinished&#x3D;true # 手动开启自动删除Job功能
        args: [String] <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>串行式任务：连续、多次地执行某一任务。当上一个任务完成时，接着执行下一个任务，直到全部任务执行完，可以通过spec.completions属性指定执行次数。其模板如下：</p>
  <pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">---
apiVersion: batch&#x2F;v1 # 使用的API版本，V1表示使用稳定版本
kind: Job # 要创建的资源对象，这里为关键字Job
metadata: # 表示该资源对象的元数据，一个资源对象可拥有多个元数据。表示资源的标识信息
  name: String # 元数据，必填，Job工作负载的名字
spec: 
  activeDeadlineSeconds: int # 指定执行任务的上限时间（单位为秒），超时时任务将强制终止并删除
  completions: int # 设置任务执行次数
  template:  # 必填，Pod模板，它与Pod具有完全相同的结构，不过他是嵌套的，且不需要带apiVersion或kind字段
    spec:
      restartPolicy: [Never|OnFailure] 
      containers:
      - name: String
        image: String
        imagePullPolicy: 
        command: [String] 
        args: [String] 
  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>并行式任务：同一时间并发多次执行任务。可以通过spec.parallelism属性指定并发数，也可以配合spec.completions属性指定总任务的执行次数。其模板如下：</p>
  <pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">---
apiVersion: batch&#x2F;v1 # 使用的API版本，V1表示使用稳定版本
kind: Job # 要创建的资源对象，这里为关键字Job
metadata: # 表示该资源对象的元数据，一个资源对象可拥有多个元数据。表示资源的标识信息
  name: String # 元数据，必填，Job工作负载的名字
spec: 
  activeDeadlineSeconds: int # 指定执行任务的上限时间（单位为秒），超时时任务将强制终止并删除
  completions: int # 设置任务执行次数
  parallelism: int # 设置任务并行数 
  template:  # 必填，Pod模板，它与Pod具有完全相同的结构，不过他是嵌套的，且不需要带apiVersion或kind字段
    spec:
      restartPolicy: [Never|OnFailure] 
      containers:
      - name: String
        image: String
        imagePullPolicy: 
        command: [String] 
        args: [String] 
  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h3 id="CronJob控制器"><a href="#CronJob控制器" class="headerlink" title="CronJob控制器"></a>CronJob控制器</h3><p>CronJob控制器是在Job的基础上增加了时间调度，可以在给定的时间点运行一个任务，也可以定期地运行。</p>
<p>通过CronJob控制器，可以实现以下类型的Job：</p>
<ul>
<li>在未来的某个指定时间执行一次Job，例如某项临时任务</li>
<li>周期性地运行Job，例如，定期备份，发送邮件等</li>
</ul>
<p>CronJob控制器的模板如下所示：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">---
apiVersion: batch&#x2F;v1betal # CronJob控制器目前只存在betal版本中
kind: CronJob # 要创建的资源对象，这里为关键字CronJob
metadata: # 表示该资源对象的元数据，一个资源对象可拥有多个元数据。表示资源的标识信息
  name: String # 元数据，必填，CronJob控制器的名字
  namespace: String # 元数据，CronJob控制器的命名空间
  labels: # 元数据，标签列表
    - key: value # 元数据，可定义多个标签的键值对 
  annotations: # 元数据，自定义注解列表
    - key: value # 元数据，可定义多个标签的键值对 
spec: 
  schedule: String # 必填，指定任务运行周期，格式同Cron
  jobTemplate: [JobTemplate] # 必填，Job模板
  startingDeadlineSeconds: int # 启动Job的期限（秒）。若执行时间超时，Job将被任务是失败的。若没有指定，则没有期限
  concurrencyPolicy: [Allow|Forbid|Replace]
  # 若上一个周期的Job没执行完，而下一个周期已开始，在这种并发场景下默认采用Allow策略，允许并发运行Job
  # Forbid表示禁止并发运行，若上一个周期的Job没执行完，则下一个周期会被忽略并不再执行
  # Replace表示取消当前正在运行的Job，用一个新的来替换
  suspend: boolean # 若设置为true，而上一个周期的Job没执行完，而下一个周期已开始，则后续所有执行都会被挂起
  successfulJobsHistoryLimit: int # 保留多少条执行成功的Job记录，默认为3
  failedJobsHistoryLimit: int # 保留多少条执行失败的Job记录，默认为1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle Sql语句查库</title>
    <url>/2023/02/21/Oracle%20Sql%E8%AF%AD%E5%8F%A5%E6%9F%A5%E5%BA%93/</url>
    <content><![CDATA[<h1 id="数据库连接工具：DBeaver"><a href="#数据库连接工具：DBeaver" class="headerlink" title="数据库连接工具：DBeaver"></a>数据库连接工具：DBeaver</h1><p>本文中使用的数据库连接工具是DBeaver，其是一款免费且跨平台的数据库连接工具。其优势是会在首次链接数据库时，下载所需驱动，解决了数据库版本不兼容的问题。</p>
<p>该工具的下载地址为：<a href="https://dbeaver.io/download/">Download | DBeaver Community</a>，直接根据安装指示点击下一步即可完成安装。</p>
<p>安装好后打开软件，点击左上角的图标新建连接：<img src="/2023/02/21/Oracle%20Sql%E8%AF%AD%E5%8F%A5%E6%9F%A5%E5%BA%93/1.png" alt></p>
<p>在弹出的窗口里选择Oracle，填好相应的信息后，点击完成。然后会弹出下载驱动文件的页面，点击下载驱动：<img src="/2023/02/21/Oracle%20Sql%E8%AF%AD%E5%8F%A5%E6%9F%A5%E5%BA%93/2.png" alt></p>
<p>在左方便可看到已连接的数据库，右键数据库名字-SQL编辑器-SQL编辑器便可打开一个可以编写sql语句的脚本编辑器，其他模块的使用方法与pgAdmin 、Navicat等工具的相同。</p>
<h1 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h1><p>查询test_table表中名字含有“张三”的数据：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">select * from test_table
WHERE name like &#39;%张三%&#39;
-- %张三，表示匹配结尾为张三的数据
-- 张三%，表示匹配开头为张三的数据
-- %张三%，表示匹配任意位置含有张三的数据<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="查询语句中含有变量"><a href="#查询语句中含有变量" class="headerlink" title="查询语句中含有变量"></a>查询语句中含有变量</h1><p>查询test_table表中年龄等于参数year值的数据，其中year参数的值在运行sql语句时输入：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">select * from test_table a
WHERE a.old&#x3D;:year
-- test_table a，即设置表格test_table的别名为a，后续可用a来代替表格test_table
-- :year，表示变量year<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>查询test_table表中名字含有参数search值的数据，其中search参数的值在运行sql语句时输入：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">select * from test_table
WHERE name like &#39;%&#39;||:search||&#39;%&#39;
-- :search，表示变量search
-- ||:search||中，||为连接符，类似于Python中print里的+号，即&#39;%&#39;||:search||&#39;%&#39;等价于Python中的print里的(&#39;%&#39;+search+&#39;%&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>查询test_table表中学号为参数num值的名字，其中num参数的值在运行sql语句时输入:</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">select distinct name from test_table a
WHERE a.snum&#x3D;to_char(:num)
-- to_char函数用来将数组转为字符串
-- distinct参数用来去除重复数据<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>查询test_table表中名字为参数search值的数据，所查询的结果中含有参数值的数据排在前面：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">select  * from test_table
WHERE name like &#39;%&#39;||:search||&#39;%&#39;
order by (case when name like &#39;%&#39;||:search||&#39;%&#39; then 0 end)
-- case 条件 then 0 end，表示满足条件的数据排在第0位，即满足条件的数据优先显示<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="左连接查询"><a href="#左连接查询" class="headerlink" title="左连接查询"></a>左连接查询</h1><p>进行左连接(Left join)时，查询将左边表格T1中的每一行都与右边表格T2中的行进行比较，返回的结果会有以下三种情况：</p>
<ul>
<li>若T1中的某条记录在T2中刚好只有一条记录可以匹配，则返回的结果中会生成一个新的行</li>
<li>若T1中的某条记录在T2中有N条记录可以匹配，则返回的结果中也会生成N个新的行，这些行所包含的T1的字段值是重复的</li>
<li>若T1中的某条记录在T2中没有可以匹配的记录，则返回的结果中会生成一个新的行，该行所包含的T2的字段值是NULL</li>
</ul>
<p>例如，左表为T1，其有如下数据：<img src="/2023/02/21/Oracle%20Sql%E8%AF%AD%E5%8F%A5%E6%9F%A5%E5%BA%93/3.png" alt>右表为T2，其有如下数据：<img src="/2023/02/21/Oracle%20Sql%E8%AF%AD%E5%8F%A5%E6%9F%A5%E5%BA%93/4.png" alt></p>
<p>将两者进行左连接查询，即需要返回左表中所有行的数据以及右表中包含number行的数据：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">select * from T1 
left join T2 
on T1.num&#x3D;T2.number
-- T1的num列引用T2表中的number列。其中num列的部分值是无效的
-- 若要过滤掉所有name为NULL的记录，可以增加以下where子句
where number is not null<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>查询结果如下：<img src="/2023/02/21/Oracle%20Sql%E8%AF%AD%E5%8F%A5%E6%9F%A5%E5%BA%93/5.png" alt></p>
<p>去除NULL记录后的查询结果如下：<img src="/2023/02/21/Oracle%20Sql%E8%AF%AD%E5%8F%A5%E6%9F%A5%E5%BA%93/6.png" alt></p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>Lottie动效设计指南：（一）Bodymovin插件的安装及初步使用</title>
    <url>/2023/11/30/Lottie%E5%8A%A8%E6%95%88%E8%AE%BE%E8%AE%A1%E6%8C%87%E5%8D%97%EF%BC%9A%EF%BC%88%E4%B8%80%EF%BC%89Bodymovin%E6%8F%92%E4%BB%B6%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E5%88%9D%E6%AD%A5%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="Lottie是什么"><a href="#Lottie是什么" class="headerlink" title="Lottie是什么"></a>Lottie是什么</h1><p>Lottie是Airbnb开源的一个动画渲染库，同时支持Android、iOS、React Native平台。Lottie支持渲染播放AE动画。通过AE插件bodymovie导出json文件作为动画数据。Airbnb的开发者打造了一个社区<a href="https://github.com/lottiefiles">LottieFiles · GitHub</a>来与设计师、开发者进行交流。</p>
<p><strong>Lottie应用场景与原理</strong></p>
<ul>
<li>loading动画</li>
<li>动态图标</li>
<li>加载动画</li>
<li>动态banner</li>
</ul>
<p><strong>Lottie支持的AE属性</strong></p>
<p>Lottie虽然能够满足多种场景的需要，但并非支持所有的AE效果。因此在设计动效时，需要考虑该效果是否被Lottie支持。否则会导致出错或所使用的效果无效。<img src="/2023/11/30/Lottie%E5%8A%A8%E6%95%88%E8%AE%BE%E8%AE%A1%E6%8C%87%E5%8D%97%EF%BC%9A%EF%BC%88%E4%B8%80%EF%BC%89Bodymovin%E6%8F%92%E4%BB%B6%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E5%88%9D%E6%AD%A5%E4%BD%BF%E7%94%A8/1.webp" alt></p>
<h1 id="Lottie动效制作准备"><a href="#Lottie动效制作准备" class="headerlink" title="Lottie动效制作准备"></a>Lottie动效制作准备</h1><h2 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h2><ul>
<li><p>下载AE 2020，从本文中下载的AE 2020直接按提示安装即可直接使用。下载链接如下：<a href="https://pan.baidu.com/s/1dKbqVgQXFqbwTqYr-j0tzg?pwd=ke69">Adobe_After_Effects_2020破解版下载</a></p>
<ul>
<li>AE全套插件一键安装包，有需要的可以下载。下载链接如下：<a href="https://pan.baidu.com/s/1lfL9rF5ZYNA59UDZZVreIw?pwd=weya">AE 2020 全套插件一键安装包</a></li>
</ul>
</li>
<li><p>下载并安装ZXP Installer软件，用于将ZXP文件安装到AE，下载链接如下：<a href="https://aescripts.com/learn/zxp-installer/">ZXP Installer 官网下载</a></p>
</li>
<li><p>下载Bodymovin插件，将动画输出成json文件。该插件版本非常多，由于前端使用的Bodymovin解析包可能无法解析用最新版Bodymovin插件输出的json文件，因此要<strong>注意Bodymovin插件版本和所使用的lottie版本相对应</strong>。插件各版本的地址如下：<a href="https://github.com/airbnb/lottie-web/tags">airbnb/lottie-web</a></p>
<p>  <strong>寻找Bodymovin插件和所使用的lottie版本对应操作示例</strong></p>
<p>  比如vue2中使用使用1.2.1版本的<code>lottie-web-vue</code>库来渲染lottie动画，操作如下：</p>
<ul>
<li>打开<code>lottie-web-vue</code>库的源代码查看<code>package.json</code>文件中<code>lottie-web</code>的版本号<a href="https://github.com/garbit/lottie-web-vue/blob/v1.2.1/package.json">lottie-web-vue/package.json at v1.2.1</a></li>
<li>找到<code>lottie-web</code>的版本号为5.7.4。<img src="/2023/11/30/Lottie%E5%8A%A8%E6%95%88%E8%AE%BE%E8%AE%A1%E6%8C%87%E5%8D%97%EF%BC%9A%EF%BC%88%E4%B8%80%EF%BC%89Bodymovin%E6%8F%92%E4%BB%B6%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E5%88%9D%E6%AD%A5%E4%BD%BF%E7%94%A8/2.png" alt></li>
<li>转到Bodymovin插件下载页面，找到与<code>lottie-web</code>版本号匹配的版本下载<a href="https://github.com/airbnb/lottie-web/releases/tag/v5.7.4">Release v5.7.4 · airbnb/lottie-web · GitHub</a></li>
</ul>
</li>
</ul>
<h2 id="AE插件安装步骤"><a href="#AE插件安装步骤" class="headerlink" title="AE插件安装步骤"></a>AE插件安装步骤</h2><ul>
<li><p>Bodymovin插件下载后解压，在解压文件夹的<code>lottie-web-5.7.4\build\extension</code>目录下找到<code>bodymovin.zxp</code>文件，记下文件路径<img src="/2023/11/30/Lottie%E5%8A%A8%E6%95%88%E8%AE%BE%E8%AE%A1%E6%8C%87%E5%8D%97%EF%BC%9A%EF%BC%88%E4%B8%80%EF%BC%89Bodymovin%E6%8F%92%E4%BB%B6%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E5%88%9D%E6%AD%A5%E4%BD%BF%E7%94%A8/5.png" alt></p>
<ul>
<li>打开ZXP Installer软件，点击file-open菜单项，通过上述的文件路径选择<code>bodymovin.zxp</code>文件来载入插件包，ZXP installer会自动开始安装。安装完成后的软件主页面如下图所示。<img src="/2023/11/30/Lottie%E5%8A%A8%E6%95%88%E8%AE%BE%E8%AE%A1%E6%8C%87%E5%8D%97%EF%BC%9A%EF%BC%88%E4%B8%80%EF%BC%89Bodymovin%E6%8F%92%E4%BB%B6%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E5%88%9D%E6%AD%A5%E4%BD%BF%E7%94%A8/6.png" alt></li>
</ul>
</li>
<li><p>打开AE，在编辑-首选项-常规-脚本和表达式中选中允许脚本写入文件和访问网络，点击确定。<img src="/2023/11/30/Lottie%E5%8A%A8%E6%95%88%E8%AE%BE%E8%AE%A1%E6%8C%87%E5%8D%97%EF%BC%9A%EF%BC%88%E4%B8%80%EF%BC%89Bodymovin%E6%8F%92%E4%BB%B6%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E5%88%9D%E6%AD%A5%E4%BD%BF%E7%94%A8/7.png" alt></p>
</li>
<li>点击窗口-扩展，可以看到导入的插件，点击插件名就能打开指定的插件界面使用插件了。<img src="/2023/11/30/Lottie%E5%8A%A8%E6%95%88%E8%AE%BE%E8%AE%A1%E6%8C%87%E5%8D%97%EF%BC%9A%EF%BC%88%E4%B8%80%EF%BC%89Bodymovin%E6%8F%92%E4%BB%B6%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E5%88%9D%E6%AD%A5%E4%BD%BF%E7%94%A8/8.png" alt><img src="/2023/11/30/Lottie%E5%8A%A8%E6%95%88%E8%AE%BE%E8%AE%A1%E6%8C%87%E5%8D%97%EF%BC%9A%EF%BC%88%E4%B8%80%EF%BC%89Bodymovin%E6%8F%92%E4%BB%B6%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E5%88%9D%E6%AD%A5%E4%BD%BF%E7%94%A8/9.png" alt></li>
</ul>
<h1 id="AE插件的初步使用"><a href="#AE插件的初步使用" class="headerlink" title="AE插件的初步使用"></a>AE插件的初步使用</h1><ul>
<li>在一个新的项目中，新建一个名为<code>test</code>的合成，并制作一段简单的动画：<img src="/2023/11/30/Lottie%E5%8A%A8%E6%95%88%E8%AE%BE%E8%AE%A1%E6%8C%87%E5%8D%97%EF%BC%9A%EF%BC%88%E4%B8%80%EF%BC%89Bodymovin%E6%8F%92%E4%BB%B6%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E5%88%9D%E6%AD%A5%E4%BD%BF%E7%94%A8/10.png" alt></li>
<li>打开Bodymovin插件窗口，可以发现<code>test</code>出现在了下面的列表中。<img src="/2023/11/30/Lottie%E5%8A%A8%E6%95%88%E8%AE%BE%E8%AE%A1%E6%8C%87%E5%8D%97%EF%BC%9A%EF%BC%88%E4%B8%80%EF%BC%89Bodymovin%E6%8F%92%E4%BB%B6%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E5%88%9D%E6%AD%A5%E4%BD%BF%E7%94%A8/11.png" alt></li>
<li>选中<code>test</code>，设置好json文件输出位置，点击Render。<img src="/2023/11/30/Lottie%E5%8A%A8%E6%95%88%E8%AE%BE%E8%AE%A1%E6%8C%87%E5%8D%97%EF%BC%9A%EF%BC%88%E4%B8%80%EF%BC%89Bodymovin%E6%8F%92%E4%BB%B6%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E5%88%9D%E6%AD%A5%E4%BD%BF%E7%94%A8/12.png" alt></li>
<li><p>显示以下界面则表示json文件生成完成，点击红框处的按钮，可以预览json文件导出的动画。<img src="/2023/11/30/Lottie%E5%8A%A8%E6%95%88%E8%AE%BE%E8%AE%A1%E6%8C%87%E5%8D%97%EF%BC%9A%EF%BC%88%E4%B8%80%EF%BC%89Bodymovin%E6%8F%92%E4%BB%B6%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E5%88%9D%E6%AD%A5%E4%BD%BF%E7%94%A8/13.png" alt><img src="/2023/11/30/Lottie%E5%8A%A8%E6%95%88%E8%AE%BE%E8%AE%A1%E6%8C%87%E5%8D%97%EF%BC%9A%EF%BC%88%E4%B8%80%EF%BC%89Bodymovin%E6%8F%92%E4%BB%B6%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E5%88%9D%E6%AD%A5%E4%BD%BF%E7%94%A8/14.png" alt></p>
</li>
<li><p>将生成的json复制到vue2项目中即可在vue2项目里使用刚刚制作的Lotttie动画。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>大屏设计</category>
        <category>可视化</category>
        <category>Lottie</category>
      </categories>
      <tags>
        <tag>可视化</tag>
        <tag>大屏设计</tag>
        <tag>Lottie</tag>
      </tags>
  </entry>
  <entry>
    <title>MinIO 配置及使用</title>
    <url>/2024/07/01/MinIO%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>MinIO是一个对象存储系统，它适合用于存储大容量非结构化的数据。</p>
<p>对象存储对比传统文件存储方式的<strong>优点</strong>：</p>
<ul>
<li><strong>可扩展性和灵活性高</strong>:基于分布式架构设计，可以轻松地水平扩展存储容量，无需担心容量限制问题，适合数据量快速增长的场景</li>
<li><strong>高耐用性与容错性</strong>:通过数据复制或分布式冗余存储策略，提供高数据持久性和故障恢复能力</li>
<li>简易管理:对象存储<strong>通过API接口</strong>访问，简化了数据的管理和访问过程，无需关心文件系统的层级结构</li>
<li>支持元数据:每个对象都可以携带丰富的元数据信息，便于进行标签化管理和搜索</li>
</ul>
<p>对象存储对比传统文件存储方式的<strong>缺点</strong>：</p>
<ul>
<li><strong>访问延迟较高</strong>:主要通过http协议读写，相比直接挂载的文件系统，对象存储的读写操作会有更高的延迟</li>
<li>不支持文件系统语义:如文件锁定、目录级权限控制等传统文件系统特性，在对象存储中不直接提供</li>
<li><strong>不适合低延迟、高I/o操作</strong>:对于需要频繁修改和随机访问的应用场景，对象存储不是最佳选择，比如系统日志之类</li>
</ul>
<p><strong>适用场景</strong>:</p>
<ul>
<li>大数据存储与分析:面对PB级乃至EB级的数据存储需求，如<strong>历史日志存储</strong>、数据分析、机器学习训练数据等</li>
<li>内容分发网络(CDN)与媒体存储:<strong>视频、图片等多媒体文件的存储与快速分发</strong></li>
<li><strong>备份与归档</strong>:数据备份、灾难恢复和长期数据归档</li>
<li>Web应用与移动应用:特别是那些需要在全球范围内<strong>快速访问静态资源</strong>的应用</li>
<li>云原生应用:微服务架构、容器化应用中，<strong>作为无状态服务的数据存储层</strong></li>
</ul>
<h1 id="配置MinIO"><a href="#配置MinIO" class="headerlink" title="配置MinIO"></a>配置MinIO</h1><p>本机可以通过地址+端口直接访问MinIO console管理页面</p>
<ul>
<li><p>登录管理页面，创建存储桶（create Bucket）<img src="/2024/07/01/MinIO%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%BD%BF%E7%94%A8/1.png" alt></p>
</li>
<li><p>进入桶内，点击<code>Access Policy</code>，将存储桶的设置为私有（Private）<img src="/2024/07/01/MinIO%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%BD%BF%E7%94%A8/2.png" alt><img src="/2024/07/01/MinIO%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%BD%BF%E7%94%A8/3.png" alt></p>
</li>
<li><p>点击侧栏的Policies，点击<code>Create Policy</code>新建一个策略<img src="/2024/07/01/MinIO%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%BD%BF%E7%94%A8/4.png" alt><img src="/2024/07/01/MinIO%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%BD%BF%E7%94%A8/5.png" alt>，例如这里的策略名叫<code>testPolicy</code>，具体的策略配置如下，只需要将<code>testPolicy</code>更换成对应的策略名即可：</p>
  <pre class="line-numbers language-none"><code class="language-none">&#123;
    &quot;Version&quot;: &quot;2012-10-17&quot;,
    &quot;Statement&quot;: [
        &#123;
            &quot;Effect&quot;: &quot;Allow&quot;,
            &quot;Action&quot;: [
                &quot;s3:*&quot;
            ],
            &quot;Resource&quot;: [
                &quot;arn:aws:s3:::test&quot;
            ]
        &#125;,
        &#123;
            &quot;Effect&quot;: &quot;Allow&quot;,
            &quot;Action&quot;: [
                &quot;s3:*&quot;
            ],
            &quot;Resource&quot;: [
                &quot;arn:aws:s3:::test&#x2F;*&quot;
            ]
        &#125;
    ]
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<ul>
<li>设置好管理策略后，设置ak（access_key）和sk（secret_key）。<img src="/2024/07/01/MinIO%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%BD%BF%E7%94%A8/6.png" alt>请记下这里的buckey_name，ak和sk，后续在<code>config.yml</code>里会用到这一部分信息：<img src="/2024/07/01/MinIO%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%BD%BF%E7%94%A8/7.png" alt></li>
</ul>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">minio:
  buckey_name: 自定义的桶名称
  endpoint: minio地址
  access_key: 创建的ak
  secret_key: 根据ak自动生成的sk<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><p>在后端项目终端中输入<code>pip install minio</code>下载所需依赖</p>
</li>
<li><p>在后端框架的<code>services</code>目录下创建<code>fileUploader.py</code>文件，完成Minio的基础配置：</p>
  <pre class="line-numbers language-python" data-language="python"><code class="language-python">from config import config
from minio import Minio

__all__ &#x3D; [
  &#39;minioClient&#39;,
]

minioClient&#x3D;Minio(config[&#39;minio&#39;][&#39;endpoint&#39;],
                  access_key&#x3D;config[&#39;minio&#39;][&#39;access_key&#39;],
                  secret_key&#x3D;config[&#39;minio&#39;][&#39;secret_key&#39;],
                  secure&#x3D;False,
                  cert_check&#x3D;False
                  )<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>完成这个配置后，若需要用到该模块，只需要输入以下语句引用即可</p>
  <pre class="line-numbers language-python" data-language="python"><code class="language-python">from services.fileUploader import minioClient<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
</ul>
<h1 id="MinIO用法"><a href="#MinIO用法" class="headerlink" title="MinIO用法"></a>MinIO用法</h1><p>下面以几个常用语法为例，讲解MinIO语法的使用，除了下文列出来的函数，更多的MinIO语法请参照MinIO SDK文档：<a href="https://www.bookstack.cn/read/miniocookbookzh/24.md#Python Client API文档">Minio SDKs - Python Client API文档 - 《Minio Cookbook 中文版》 - 书栈网 · BookStack</a></p>
<p><strong>注意：MinIO使用文件名作为文件的唯一标识，上传同名文件时是直接覆盖文件而不是加后缀区分，因此在上传文件时，尽量使用uuid生成唯一的文件名。</strong></p>
<h2 id="put-object-将文件以二进制的形式上传到指定存储桶中-适用于请求次数较少的情况"><a href="#put-object-将文件以二进制的形式上传到指定存储桶中-适用于请求次数较少的情况" class="headerlink" title="put_object:将文件以二进制的形式上传到指定存储桶中-适用于请求次数较少的情况"></a>put_object:将文件以二进制的形式上传到指定存储桶中-适用于请求次数较少的情况</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">  minioClient.put_object(bucket_name&#x3D;config.config[&#39;minio&#39;][&#39;buckey_name&#39;], object_name&#x3D;object_name, data&#x3D;data,length&#x3D;length)
# 参数详情如下：
# bucket_name：存储桶名称-（一般固定不变），string类型
# object_name：上传文件的名称，string类型（注：如果需要将文件上传到文件夹里，这里的文件名称可以填写 “文件夹名&#x2F;文件名称”）
# data：文件的二进制数据，string类型。python中可以取request.files[&#39;file&#39;].stream的值
# length：对象的总长度，int类型，如len(file.read())
# content_type：对象的content_type（选填，默认为&quot;application&#x2F;octet-stream&quot;），string类型
# metadata：其他元数据（选填，默认为None），dict类型<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="fput-object-将本地文件上传到指定存储桶中-适用于请求次数较多、多并发的情况"><a href="#fput-object-将本地文件上传到指定存储桶中-适用于请求次数较多、多并发的情况" class="headerlink" title="fput_object:将本地文件上传到指定存储桶中-适用于请求次数较多、多并发的情况"></a>fput_object:将本地文件上传到指定存储桶中-适用于请求次数较多、多并发的情况</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">  minioClient.fput_object(bucket_name&#x3D;config.config[&#39;minio&#39;][&#39;buckey_name&#39;], object_name&#x3D;object_name, file_path&#x3D;file_path)
# 参数详情如下：
# bucket_name：存储桶名称-（一般固定不变），string类型
# object_name：上传文件的名称，string类型（注：如果需要将文件上传到文件夹里，这里的文件名称可以填写 “文件夹名&#x2F;文件名称”）
# file_path：上传文件所在的路径，string类型
# content_type：对象的content_type（选填，默认为&quot;application&#x2F;octet-stream&quot;），string类型
# metadata：其他元数据（选填，默认为None），dict类型<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="get-object：从指定存储桶中下载文件-适用于请求次数较少的情况"><a href="#get-object：从指定存储桶中下载文件-适用于请求次数较少的情况" class="headerlink" title="get_object：从指定存储桶中下载文件-适用于请求次数较少的情况"></a>get_object：从指定存储桶中下载文件-适用于请求次数较少的情况</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">minioClient.get_object(bucket_name&#x3D;config.config[&#39;minio&#39;][&#39;buckey_name&#39;], object_name&#x3D;object_name)
# 参数详情如下：
# bucket_name：存储桶名称-（一般固定不变），string类型
# object_name：下载文件的名称，string类型。（注：如果需要从文件夹里下载文件，这里的文件名称可以填写 “文件夹名&#x2F;文件名称”）
# request_headers: 额外的请求头信息（选填，默认为None），dict类型<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="fget-object：从指定存储桶中下载文件并保存到本地-适用于请求次数较多、多并发的情况"><a href="#fget-object：从指定存储桶中下载文件并保存到本地-适用于请求次数较多、多并发的情况" class="headerlink" title="fget_object：从指定存储桶中下载文件并保存到本地-适用于请求次数较多、多并发的情况"></a>fget_object：从指定存储桶中下载文件并保存到本地-适用于请求次数较多、多并发的情况</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">minioClient.fget_object(bucket_name&#x3D;config.config[&#39;minio&#39;][&#39;buckey_name&#39;], object_name&#x3D;object_name, file_path&#x3D;file_path)
# 参数详情如下：
# bucket_name：存储桶名称-（一般固定不变），string类型
# object_name：下载文件的名称，string类型（注：如果需要从文件夹里下载文件，这里的文件名称可以填写 “文件夹名&#x2F;文件名称”）
# file_path：下载文件保存到本地的路径，string类型
# request_headers: 额外的请求头信息（选填，默认为None），dict类型<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="list-objects：列出指定存储桶中所有文件"><a href="#list-objects：列出指定存储桶中所有文件" class="headerlink" title="list_objects：列出指定存储桶中所有文件"></a>list_objects：列出指定存储桶中所有文件</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">minioClient.list_objects(bucket_name&#x3D;config[&#39;minio&#39;][&#39;buckey_name&#39;])
# 参数详情如下：
# bucket_name：存储桶名称-（一般固定不变），string类型
# prefix: 用来过滤的文件名前缀，默认为None，string类型
# recursive：是否递归查找，（选填，默认值为False），bool类型（True代表递归查找，False代表类似文件夹查找，以&#39;&#x2F;&#39;分隔，不查子文件夹。）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="remove-object：删除指定文件"><a href="#remove-object：删除指定文件" class="headerlink" title="remove_object：删除指定文件"></a>remove_object：删除指定文件</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">minioClient.remove_object(bucket_name&#x3D;config[&#39;minio&#39;][&#39;buckey_name&#39;],object_name&#x3D;object_name)
# 参数详情如下：
# bucket_name：存储桶名称-（一般固定不变），string类型
# object_name：需要删除文件的名称，string类型（注：如果需要从文件夹里删除文件，这里的文件名称可以填写 “文件夹名&#x2F;文件名称”）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="remove-objects：删除存储桶中的多个文件"><a href="#remove-objects：删除存储桶中的多个文件" class="headerlink" title="remove_objects：删除存储桶中的多个文件"></a>remove_objects：删除存储桶中的多个文件</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">minioClient.remove_objects(bucket_name&#x3D;config[&#39;minio&#39;][&#39;buckey_name&#39;],objects_iter)
# 参数详情如下：
# bucket_name：存储桶名称-（一般固定不变），string类型
# objects_iter：多个对象名称的列表数据，list, tuple or iterator类型<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="list-objects-amp-remove-objects-组合：删除指定目录"><a href="#list-objects-amp-remove-objects-组合：删除指定目录" class="headerlink" title="list_objects &amp; remove_objects 组合：删除指定目录"></a>list_objects &amp; remove_objects 组合：删除指定目录</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"># 导入DeleteObject类，用来表示在执行批量删除对象操作时单个对象删除的请求，包含了对象的key和版本id信息
from minio.deleteobjects import DeleteObject
delete_object_list &#x3D; [DeleteObject(x.object_name) for x in minioClient.list_objects(bucket_name&#x3D;config[&#39;minio&#39;][&#39;buckey_name&#39;], prefix&#x3D;prefix, recursive&#x3D;True)]
minioClientt.remove_objects(bucket_name&#x3D;config[&#39;minio&#39;][&#39;buckey_name&#39;], delete_object_list)
# 参数详情如下：
# bucket_name：存储桶名称-（一般固定不变），string类型
# prefix: 用来过滤的文件名前缀，默认为None，string类型
# recursive：是否递归查找，（选填，默认值为False），bool类型（True代表递归查找，False代表类似文件夹查找，以&#39;&#x2F;&#39;分隔，不查子文件夹。）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="copy-object-amp-remove-object-组合：移动文件"><a href="#copy-object-amp-remove-object-组合：移动文件" class="headerlink" title="copy_object &amp; remove_object 组合：移动文件"></a>copy_object &amp; remove_object 组合：移动文件</h2><p>copy_object的作用是从存储桶A中复制指定文件到存储桶B里，通过先将文件复制到存储桶B，再把存储桶A中的文件删除，以达到在不同存储桶内迁移文件的目的</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">minioClient.copy_object(bucket_name&#x3D;config[&#39;minio&#39;][&#39;buckey_nameB&#39;],object_name&#x3D;object_name,object_source&#x3D;object_source,copy_conditions&#x3D;copy_conditions)
minioClient.remove_object(bucket_name&#x3D;config[&#39;minio&#39;][&#39;buckey_nameA&#39;],object_name&#x3D;object_name)
# copy_object中的参数详情如下：
# bucket_name：存储桶名称B-（一般固定不变），string类型
# object_name：文件粘贴到存储桶B后的名字，string类型（注：如果需要将文件粘贴到文件夹里，这里的文件名称可以填写 “文件夹名&#x2F;文件名称”）
# object_source：需要复制的文件所在存储桶名称A+需要复制的文件名，string类型
# copy_conditions：复制文件操作时所应当满足的条件（选填，默认为None）

# remove_object中的参数详情如下：
# bucket_name：存储桶名称A-（一般固定不变），string类型
# object_name：需要删除的文件名，string类型（注：如果需要从文件夹里删除文件，这里的文件名称可以填写 “文件夹名&#x2F;文件名称”）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="文件上传示例"><a href="#文件上传示例" class="headerlink" title="文件上传示例"></a>文件上传示例</h1><p><strong>put_object：文件以二进制的形式上传</strong></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">import os
import uuid
from io import BytesIO

file &#x3D; request.files.get(&#39;file&#39;)
file_id&#x3D;uuid.uuid1().hex
suffix&#x3D;os.path.splitext(file.filename)[1].lower()
file_content&#x3D;file.read()
file_size &#x3D; len(file_content)
file_stream&#x3D;BytesIO(file_content)
with file_stream as stream:
  minioClient.put_object(bucket_name&#x3D;config.config[&#39;minio&#39;][&#39;buckey_name&#39;], object_name&#x3D;file_id+suffix, data&#x3D;stream,length&#x3D;file_size)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>fput_object：上传本地文件</strong></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">import os
from flask import request

# 文件保存在&#x2F;files的路径下
path &#x3D; os.path.join(os.path.dirname(os.getcwd()),&#39;files&#39;)
file &#x3D; request.files.get(&#39;file&#39;)
origin_name &#x3D; file.filename
file_abolutepath &#x3D; os.path.join(path, filename)
minipath &#x3D; &#39;images&#x2F;public&#x2F;&#39;+filename
minioClient.fput_object(bucket_name&#x3D;config.config[&#39;minio&#39;][&#39;buckey_name&#39;], object_name&#x3D;minipath, file_path&#x3D;file_abolutepath)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>MinIO</category>
      </categories>
      <tags>
        <tag>MinIO</tag>
      </tags>
  </entry>
  <entry>
    <title>Prompt设计技巧</title>
    <url>/2025/04/06/Prompt%E8%AE%BE%E8%AE%A1%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>通常我们在使用大语言模型（LLM）时，都是通过输入指令的形式，让LLM完成指定的任务。</p>
<p>在用户指令输入后，LLM首先会将文本指令做分词处理（以BPE分词为例）：</p>
<ul>
<li><strong>LLM训练阶段</strong>：会将数据集中的文本拆分成一个个小的子词单元（即Token），然后通过统计每个词出现频率来构建词汇表。然后合并频率最高的词汇形成新的词汇，反复迭代后就形成词汇表。</li>
<li><strong>用户输入阶段</strong>：LLM用训练阶段生成的词汇表对输入的指令进行分词，将文本转换为模型可识别的子词单元（即Token），然后把这些Token作为模型的输入</li>
<li><strong>模型输出阶段</strong>：模型将每个Token转化为一个固定长度的向量，然后通过Transformer架构做上下文处理后，生成输出对应的文案。</li>
</ul>
<p>因此<strong>数据集和分词的质量</strong>直接影响到模型对输入文本的理解和处理效果。如果数据集中没有对应的知识，或者说数据集的知识是错的，LLM生成的结果就容易不符合预期。</p>
<p><strong>示例：</strong></p>
<p>这是一个简单的Prompt:</p>
<pre class="line-numbers language-none"><code class="language-none">让AI补充以下词汇，原（）（）动：<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>AI一般的回答都是：<strong>原（封）（不）动</strong>、<strong>原（始）（冲）动</strong></p>
<p>如果给他一个背景呢？</p>
<pre class="line-numbers language-none"><code class="language-none">你是一名原神玩家，请补充以下词汇，原（）（）动：<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这时AI的回答就是：<strong>原（神）（启）动</strong></p>
<h1 id="什么是Prompt？"><a href="#什么是Prompt？" class="headerlink" title="什么是Prompt？"></a>什么是Prompt？</h1><p>提示词（Prompt）一种是给大模型（LLM）的文本指令，引导大模型解决指定的问题或完成指定的任务。也就是说，大语言模型通过<strong><code>提示词+用户输入</code></strong>的方式来理解用户需求并生成准确答案。因此 prompt 的好坏，直接决定了大模型生成结果是否符合预期。</p>
<p>举个例子，这是一个简单的Prompt:</p>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">请介绍大语言模型，字数控制在100个字符以内<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>AI就会基于这个提示词，通过特定的算法模型生成下面的内容：</p>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">大语言模型是基于海量文本训练的人工智能系统，能理解并生成自然语言文本，广泛应用于写作、翻译、问答等领域，为人们提供高效便捷的语言处理服务，推动人工智能发展。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h1 id="Prompt设计的陷阱及优化"><a href="#Prompt设计的陷阱及优化" class="headerlink" title="Prompt设计的陷阱及优化"></a>Prompt设计的陷阱及优化</h1><p>针对不同业务场景设计不同Prompt时，经常踩到各种各样的坑里，下面是对一些遇到的坑进行归纳总结：</p>
<h2 id="AI产生幻觉"><a href="#AI产生幻觉" class="headerlink" title="AI产生幻觉"></a>AI产生幻觉</h2><p>AI生成与事实不符的信息或凭空捏造不存在内容等胡编乱造的行为，称之为“AI幻觉”。</p>
<p>示例Prompt：</p>
<pre class="line-numbers language-none"><code class="language-none">请告诉我中国第一位女性宇航员的名字。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>AI乱答：</p>
<pre class="line-numbers language-none"><code class="language-none">中国第一位女性宇航员是李娜，她在 2008 年乘坐神舟七号进入太空。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="优化：要求AI说明信息来源"><a href="#优化：要求AI说明信息来源" class="headerlink" title="优化：要求AI说明信息来源"></a>优化：要求AI说明信息来源</h3><p>当 AI 被要求提供信息来源时，它会更加谨慎地筛选数据，因为需要对信息的出处负责。</p>
<p>优化后的Prompt：</p>
<pre class="line-numbers language-none"><code class="language-none">请告诉我中国第一位女性宇航员的名字，并说明数据来源。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>AI回答：</p>
<pre class="line-numbers language-none"><code class="language-none">中国第一位女性宇航员是刘洋，她于2012年6月16日成功进入太空。这一信息来源于百度百科，该页面详细介绍了刘洋的生平、教育背景、工作经历以及她成为宇航员的过程<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="优化：使用限定词，引导AI仅在已知信息范围内作答"><a href="#优化：使用限定词，引导AI仅在已知信息范围内作答" class="headerlink" title="优化：使用限定词，引导AI仅在已知信息范围内作答"></a>优化：使用限定词，引导AI仅在已知信息范围内作答</h3><p>在Prompt加上这一句：</p>
<pre class="line-numbers language-none"><code class="language-none">如果你不确定答案，请回答 “我不知道”，而不要编造信息。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这一策略能有效避免 AI 在知识盲区随意编造答案。让 AI 没有确切把握回答时回复 “我不知道”，而不是给出错误引导，保障用户获取信息的准确性。</p>
<h3 id="优化：让AI以多种方式验证答案"><a href="#优化：让AI以多种方式验证答案" class="headerlink" title="优化：让AI以多种方式验证答案"></a>优化：让AI以多种方式验证答案</h3><p>在Prompt加上这一句：</p>
<pre class="line-numbers language-none"><code class="language-none">请提供你刚才回答的三个独立信息来源，并进行交叉验证。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>AI 可能会通过多个数据库、书籍以及他人观点等多个渠道验证信息来源，进而确保信息的准确性。</p>
<h3 id="优化：使用反向Prompt让AI质疑自己的回答"><a href="#优化：使用反向Prompt让AI质疑自己的回答" class="headerlink" title="优化：使用反向Prompt让AI质疑自己的回答"></a>优化：使用反向Prompt让AI质疑自己的回答</h3><p>在Prompt加上这一句：</p>
<pre class="line-numbers language-none"><code class="language-none">你刚才的回答可能有错误。请重新检查，并说明你为何认为这个答案是正确的。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>促使 AI 重新审视答案，避免因初始判断失误而给出错误信息。</p>
<h2 id="信息可信度低"><a href="#信息可信度低" class="headerlink" title="信息可信度低"></a>信息可信度低</h2><h3 id="优化：按特定格式输出答案"><a href="#优化：按特定格式输出答案" class="headerlink" title="优化：按特定格式输出答案"></a>优化：按特定格式输出答案</h3><p>为方便用户快速评估信息质量与可靠性，可以让AI采用结构化格式输出答案</p>
<p>例如：</p>
<pre class="line-numbers language-none"><code class="language-none">请按照以下格式回答：
问题：
答案：
数据来源：
可信度（1-10）：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>当用户问题为“中国第一位女性宇航员是谁”时，AI输出如下：</p>
<pre class="line-numbers language-none"><code class="language-none">问题：中国第一位女性宇航员是谁？
答案：刘洋，她于 2012 年随神舟九号进入太空。
数据来源：新华社、百度百科
可信度：9&#x2F;10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="优化：限制回答范围"><a href="#优化：限制回答范围" class="headerlink" title="优化：限制回答范围"></a>优化：限制回答范围</h3><p>如果问题涉及复杂领域，可以让AI只回答它有信心的内容。</p>
<p>例如，在Prompt加上这一句：</p>
<pre class="line-numbers language-none"><code class="language-none">你只能基于 2023 年的数据回答问题，不要使用推测信息。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这种方式可以减少 AI 乱编数据的情况，确保信息的可信度。</p>
<h2 id="AI自带偏见"><a href="#AI自带偏见" class="headerlink" title="AI自带偏见"></a>AI自带偏见</h2><p>AI可能会因为训练数据的刻板印象而带有偏见，例如：</p>
<ul>
<li>性别偏见：“医生通常是男性，护士通常是女性。”</li>
<li>文化偏见：“成功的企业家通常来自发达国家。”</li>
<li>政治偏见</li>
<li>其他偏见：如数据计算、常识判断等，例如9.11比9.9大、3个月按半年算等经典问题</li>
</ul>
<h3 id="优化：要求使用中立语言"><a href="#优化：要求使用中立语言" class="headerlink" title="优化：要求使用中立语言"></a>优化：要求使用中立语言</h3><p>在Prompt加上这一句：</p>
<pre class="line-numbers language-none"><code class="language-none">请提供多个不同角度的观点，并保持中立态度。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>让AI使用中立语言客观分析，避免因倾向性语言导致片面结论。</p>
<h3 id="优化：避免出现暗示性字眼"><a href="#优化：避免出现暗示性字眼" class="headerlink" title="优化：避免出现暗示性字眼"></a>优化：避免出现暗示性字眼</h3><p>检查设计的Prompt中是否带有“…比…更好”、“…优于…”的字眼</p>
<h3 id="优化：让AI自己检查偏见"><a href="#优化：让AI自己检查偏见" class="headerlink" title="优化：让AI自己检查偏见"></a>优化：让AI自己检查偏见</h3><p>在Prompt加上这一句：</p>
<pre class="line-numbers language-none"><code class="language-none">你的回答是否可能包含性别、种族或文化偏见？请重新检查并调整。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>让AI 通过自我检查修正潜在偏见，确保不出现误解或偏见性描述</p>
<h3 id="优化：适当补充示例"><a href="#优化：适当补充示例" class="headerlink" title="优化：适当补充示例"></a>优化：适当补充示例</h3><p>在Prompt中补充对结果影响比较大的其他偏见示例，例如加上以下示例语句：</p>
<pre class="line-numbers language-none"><code class="language-none">示例1、某AI统计工龄时，认为3个月&#x3D;半年：
用户工作了5年2个月，其中的2个月没有超过6个月，不能按半年计算，所以其工龄应该是5年

示例2、AI认为9.11比9.9大：
比较小数大小时，先比较小数的整数部分，将小数点后的位数转换为相同的位数后，再去比较小数点后的位数。如9.11和9.9的整数部分都是9，将两个数转换为相同位数后，9.9可以写成9.90，此时和9.11比较，显然是9.90比9.11大。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="回答前后矛盾"><a href="#回答前后矛盾" class="headerlink" title="回答前后矛盾"></a>回答前后矛盾</h2><p>在多轮对话中，如果AI没有启用记忆功能，用户先问“畅享卡有哪些套餐”，再接着问“你确定吗？”。就可能会因为没有保持上下文一致性或者是在不同轮次调用了不同的数据集从而得到不同的回复。</p>
<h3 id="优化：强制AI记住上下文"><a href="#优化：强制AI记住上下文" class="headerlink" title="优化：强制AI记住上下文"></a>优化：强制AI记住上下文</h3><p>强制AI记住上下文，在Prompt加上这一句：</p>
<pre class="line-numbers language-none"><code class="language-none">请确保后续回答与之前保持一致。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="优化：让-AI-复述自己的回答"><a href="#优化：让-AI-复述自己的回答" class="headerlink" title="优化：让 AI 复述自己的回答"></a>优化：让 AI 复述自己的回答</h3><p>在Prompt加上这一句：</p>
<pre class="line-numbers language-none"><code class="language-none">你能用不同的表述方式重复你的答案吗？<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="优化：固定输出格式"><a href="#优化：固定输出格式" class="headerlink" title="优化：固定输出格式"></a>优化：固定输出格式</h3><p>在Prompt加上这一句：</p>
<pre class="line-numbers language-none"><code class="language-none">你需要始终按照“事实+证据”的格式回答问题。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="无法控制AI生成的内容长度"><a href="#无法控制AI生成的内容长度" class="headerlink" title="无法控制AI生成的内容长度"></a>无法控制AI生成的内容长度</h2><h3 id="优化：回答过于简略，需要限制最少字数"><a href="#优化：回答过于简略，需要限制最少字数" class="headerlink" title="优化：回答过于简略，需要限制最少字数"></a>优化：回答过于简略，需要限制最少字数</h3><p>Prompt里限制最少字数及其要点</p>
<pre class="line-numbers language-none"><code class="language-none">你的回答必须至少包含 50 个字，并提供具体理由。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="优化：避免回答过于冗长，需要限制最多字数"><a href="#优化：避免回答过于冗长，需要限制最多字数" class="headerlink" title="优化：避免回答过于冗长，需要限制最多字数"></a>优化：避免回答过于冗长，需要限制最多字数</h3><p>Prompt里限制最多字数及其要点</p>
<pre class="line-numbers language-none"><code class="language-none">你的回答不能超过3句话，并且要直截了当<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h1 id="Prompt结构化模板"><a href="#Prompt结构化模板" class="headerlink" title="Prompt结构化模板"></a>Prompt结构化模板</h1><p>尽管 AI 具备强大的语言理解能力，但其输出质量仍然受到 Prompt 设计的影响。如果 Prompt 过于模糊或不够具体，AI 可能会给出偏差较大的答案。因此，优化 Prompt 是提升 AI 交互体验的关键。</p>
<h2 id="常用的-Prompt-文字模板"><a href="#常用的-Prompt-文字模板" class="headerlink" title="常用的 Prompt 文字模板"></a>常用的 Prompt 文字模板</h2><h3 id="关键点"><a href="#关键点" class="headerlink" title="关键点"></a>关键点</h3><p>常用的Prompt模板通常包含以下几个关键点：</p>
<ul>
<li>背景信息：提供相关背景信息，让AI可以更准确地理解问题含义</li>
<li>任务说明：明确清晰地告诉AI需要完成什么任务</li>
<li>约束条件：限制AI的输出，包括且不限于格式、字数、风格等</li>
<li>示例参考：通过具体示例引导AI产生符合预期的输出，例子数量不能太多，控制在1-2个即可</li>
</ul>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>举个例子，这是一个普通的Prompt：</p>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">你是一位健身教练，介绍一款热门的健身APP。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>根据上面的Prompt，AI生成以下结果：</p>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">这款健身APP非常受欢迎，它提供了多种健身课程，包括瑜伽、力量训练和有氧运动。用户可以根据自己的目标选择合适的课程，比如减脂、增肌或提高柔韧性。APP还支持自定义训练计划，用户可以设置自己的健身目标和时间，APP会生成个性化的训练方案。此外，它还有社区功能，用户可以分享自己的健身成果，互相激励。总的来说，这款APP功能强大，界面友好，适合各种水平的健身爱好者。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>但如果我用了Prompt模板后再去实现同一功能呢？下面是套用模板后的Prompt：</p>
<pre class="line-numbers language-none"><code class="language-none">背景信息&amp;&amp;约束条件：你是一位健身教练，需要为你的客户介绍一款热门的健身APP。请根据提供的APP名称和功能描述，撰写一段详细的介绍文本。确保介绍内容包括APP的主要功能、特色、适用人群以及使用建议。这款健身APP必须是一个真实存在的应用，应用的介绍内容需是真实有效的，不得自行编造。
任务说明：
1. 首先，简要介绍APP的名称和主要功能。
2. 接着，详细描述APP的特色功能，如个性化训练计划、饮食建议、社区互动等。
3. 然后，说明这款APP适合哪些人群使用，例如初学者、进阶者或特定健身目标的人群。
4. 最后，给出使用这款APP的一些建议，比如如何开始使用、如何设置目标等。
5. 确保输出内容流畅、专业，能够吸引并帮助目标用户。
示例参考1：
APP名称: Keep
功能描述: Keep是一款提供个性化训练计划、饮食建议和社区互动的健身APP。
Keep是一款非常受欢迎的健身APP，它提供了个性化的训练计划，帮助用户根据自己的健身目标制定合适的锻炼方案。此外，Keep还提供了丰富的饮食建议，帮助用户更好地控制饮食，达到理想的健身效果。对于喜欢社交互动的用户，Keep还设有社区功能，用户可以在这里分享自己的健身成果，互相鼓励，共同进步。这款APP适合所有健身水平的人群使用，无论是初学者还是进阶者，都能在这里找到适合自己的训练计划。建议用户在开始使用Keep之前，先设定一个明确的健身目标，这样可以更有针对性地选择训练计划和饮食建议。
示例参考2：
APP名称: Nike Training Club
功能描述: Nike Training Club是一款提供专业训练视频、个性化训练计划和社区互动的健身APP。
Nike Training Club是一款由耐克公司推出的健身APP，它提供了大量的专业训练视频，涵盖了从基础到高级的各种训练课程。用户可以根据自己的健身水平和目标选择合适的训练视频进行学习和练习。此外，Nike Training Club还提供了个性化的训练计划，帮助用户制定科学的锻炼方案。对于喜欢社交互动的用户，这款APP还设有社区功能，用户可以在这里分享自己的训练成果，与其他用户交流心得。Nike Training Club适合所有健身水平的人群使用，无论是初学者还是进阶者，都能在这里找到适合自己的训练课程。建议用户在开始使用Nike Training Club之前，先设定一个明确的健身目标，这样可以更有针对性地选择训练计划和饮食建议。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>根据这个的Prompt，AI生成以下结果：<img src="/2025/04/06/Prompt%E8%AE%BE%E8%AE%A1%E6%8A%80%E5%B7%A7/3.png" alt></p>
<h2 id="常用的-Prompt-XML模板-在dify中使用最佳"><a href="#常用的-Prompt-XML模板-在dify中使用最佳" class="headerlink" title="常用的 Prompt XML模板(在dify中使用最佳)"></a>常用的 Prompt XML模板(在dify中使用最佳)</h2><p>在编写Prompt时，使用 XML 标签可以保证Prompt的清晰度、准确性、灵活性及可解析性。其不仅能帮助更好地组织和结构化信息，还能提高 AI 模型的理解能力和响应质量。</p>
<h3 id="常用XML标签"><a href="#常用XML标签" class="headerlink" title="常用XML标签"></a>常用XML标签</h3><h4 id="lt-instruction-gt"><a href="#lt-instruction-gt" class="headerlink" title="&lt;instruction&gt;"></a><strong><code>&lt;instruction&gt;</code></strong></h4><ul>
<li><p><strong>用途：</strong>提供给AI的具体指令，明确模型需要执行的任务。</p>
</li>
<li><p><strong>示例：</strong></p>
</li>
</ul>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>instructions</span><span class="token punctuation">></span></span>
  请将以下文本翻译成西班牙语。
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>instructions</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h4 id="lt-context-gt"><a href="#lt-context-gt" class="headerlink" title="&lt;context&gt;"></a><strong><code>&lt;context&gt;</code></strong></h4><ul>
<li><strong>用途</strong>：提供任务的背景信息或上下文，帮助 AI 更好地理解指令。</li>
<li><strong>示例</strong>：</li>
</ul>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context</span><span class="token punctuation">></span></span>
  这段文本摘自一本关于机器学习的书籍，用于展示基础概念。
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h4 id="lt-examples-gt"><a href="#lt-examples-gt" class="headerlink" title="&lt;examples&gt;"></a><strong><code>&lt;examples&gt;</code></strong></h4><ul>
<li><strong>用途</strong>：提供示例来指导 AI 的响应风格和格式。多个示例可以帮助模型更好地理解指令意图。</li>
<li><strong>示例</strong>：</li>
</ul>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>examples</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>example</span><span class="token punctuation">></span></span>
    英文: Hello
    西班牙语: Hola
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>example</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>example</span><span class="token punctuation">></span></span>
    英文: Thank you
    西班牙语: Gracias
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>example</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>examples</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="lt-user-input-gt"><a href="#lt-user-input-gt" class="headerlink" title="&lt;user_input&gt;"></a><strong><code>&lt;user_input&gt;</code></strong></h4><ul>
<li><strong>用途</strong>：包含用户输入的内容，通常用作提示的动态部分。</li>
<li><strong>示例</strong>：</li>
</ul>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user_input</span><span class="token punctuation">></span></span>
  请输入您想翻译的内容。
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user_input</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h4 id="lt-output-gt"><a href="#lt-output-gt" class="headerlink" title="&lt;output&gt;"></a><strong><code>&lt;output&gt;</code></strong></h4><ul>
<li><strong>用途</strong>：指定 AI 应该生成的输出格式或样式，确保输出内容与预期一致。</li>
<li><strong>示例</strong>：</li>
</ul>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>output</span><span class="token punctuation">></span></span>
  生成的翻译应为西班牙语，并保持语法正确性。
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>output</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="标签顺序"><a href="#标签顺序" class="headerlink" title="标签顺序"></a>标签顺序</h3><p>标签的位置和先后顺序能够显著提升AI模型对提示的解析效果，进而提高其响应质量。</p>
<p>推荐的标签顺序如下：</p>
<ol>
<li><code>&lt;instructions&gt;</code>: 描述AI应遵循的具体指令。</li>
<li><code>&lt;context&gt;</code>: 提供任务背景信息，便于AI理解上下文。</li>
<li><code>&lt;examples&gt;</code>: 通过示例引导AI如何准确生成响应。</li>
<li><code>&lt;user_input&gt;</code>: 包含用户的输入内容。</li>
<li><code>&lt;output&gt;</code>: 定义AI应该输出的格式或样式。</li>
</ol>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul>
<li><strong>标签名称的一致性</strong>：XML 标签区分大小写，因此请确保标签字母大小写的一致性，如 <code>&lt;Tag&gt;</code> 与 <code>&lt;tag&gt;</code> 是不同的元素。</li>
<li><strong>格式正确性</strong>：确保 XML 文档格式正确，所有标签都必须闭合，且标签间的嵌套关系需符合 XML 规范。</li>
<li><strong>安全性考虑</strong>：当提示中包含用户输入时，建议对用户输入进行转义处理，以防止潜在的安全问题，例如代码注入或无效的标签解析。</li>
</ul>
<h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><p>将常用的Prompt文字模板例子中的Prompt使用xml模板将改写成以下格式：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">``xml
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>instruction</span><span class="token punctuation">></span></span>
你是一位健身教练，需要为你的客户介绍一款热门的健身APP。请根据提供的APP名称和功能描述，撰写一段详细的介绍文本。确保介绍内容包括APP的主要功能、特色、适用人群以及使用建议。这款健身APP必须是一个真实存在的应用，应用的介绍内容需是真实有效的，不得自行编造。
1. 首先，简要介绍APP的名称和主要功能。
2. 接着，详细描述APP的特色功能，如个性化训练计划、饮食建议、社区互动等。
3. 然后，说明这款APP适合哪些人群使用，例如初学者、进阶者或特定健身目标的人群。
4. 最后，给出使用这款APP的一些建议，比如如何开始使用、如何设置目标等。
5. 确保输出内容流畅、专业，能够吸引并帮助目标用户。
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>instruction</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>examples</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>example</span><span class="token punctuation">></span></span>
APP名称: Keep
功能描述: Keep是一款提供个性化训练计划、饮食建议和社区互动的健身APP。
输出:
Keep是一款非常受欢迎的健身APP，它提供了个性化的训练计划，帮助用户根据自己的健身目标制定合适的锻炼方案。此外，Keep还提供了丰富的饮食建议，帮助用户更好地控制饮食，达到理想的健身效果。对于喜欢社交互动的用户，Keep还设有社区功能，用户可以在这里分享自己的健身成果，互相鼓励，共同进步。这款APP适合所有健身水平的人群使用，无论是初学者还是进阶者，都能在这里找到适合自己的训练计划。建议用户在开始使用Keep之前，先设定一个明确的健身目标，这样可以更有针对性地选择训练计划和饮食建议。
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>example</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>example</span><span class="token punctuation">></span></span>
APP名称: Nike Training Club
功能描述: Nike Training Club是一款提供专业训练视频、个性化训练计划和社区互动的健身APP。
输出:
Nike Training Club是一款由耐克公司推出的健身APP，它提供了大量的专业训练视频，涵盖了从基础到高级的各种训练课程。用户可以根据自己的健身水平和目标选择合适的训练视频进行学习和练习。此外，Nike Training Club还提供了个性化的训练计划，帮助用户制定科学的锻炼方案。对于喜欢社交互动的用户，这款APP还设有社区功能，用户可以在这里分享自己的训练成果，与其他用户交流心得。Nike Training Club适合所有健身水平的人群使用，无论是初学者还是进阶者，都能在这里找到适合自己的训练课程。建议用户在开始使用Nike Training Club之前，先设定一个明确的健身目标，这样可以更有针对性地选择训练计划和饮食建议。
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>example</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>examples</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>根据这个的Prompt，AI生成以下结果：</p>
<p><img src="/2025/04/06/Prompt%E8%AE%BE%E8%AE%A1%E6%8A%80%E5%B7%A7/4.png" alt></p>
<h2 id="编写Prompt工具推荐"><a href="#编写Prompt工具推荐" class="headerlink" title="编写Prompt工具推荐"></a>编写Prompt工具推荐</h2><ul>
<li><p><strong>使用dify自带的提示词优化器</strong>：输入具体的需求可以一键生成xml格式的prompt</p>
<p><img src="/2025/04/06/Prompt%E8%AE%BE%E8%AE%A1%E6%8A%80%E5%B7%A7/1.png" alt></p>
<p><img src="/2025/04/06/Prompt%E8%AE%BE%E8%AE%A1%E6%8A%80%E5%B7%A7/2.png" alt></p>
</li>
<li><p><strong>让AI帮忙优化</strong>：使用kimi、豆包、腾讯元宝、通义千问等AI工具，输入<code>请参照常用的prompt模板，帮我优化以下prompt：具体的需求</code>就能生成较为规范的prompt</p>
</li>
<li><p><strong>提示词优化器</strong>：<a href="https://prompt.always200.com/">提示词优化器</a> 输入自己写好的prompt后，使用优化器进行优化（需要配模型api）</p>
</li>
</ul>
<h1 id="高阶Prompt设计技巧"><a href="#高阶Prompt设计技巧" class="headerlink" title="高阶Prompt设计技巧"></a>高阶Prompt设计技巧</h1><h2 id="示例驱动Prompt"><a href="#示例驱动Prompt" class="headerlink" title="示例驱动Prompt"></a>示例驱动Prompt</h2><p>示例驱动Prompt通过提供示例，引导AI按照特定风格或格式输出结果。</p>
<p>示例1，生成一个关于冒险的故事：</p>
<pre class="line-numbers language-none"><code class="language-none">请生成一个关于冒险的故事。  
示例：  
在蒙德城的酒馆里，旅行者听到了一个关于“风龙废墟”的传说。据说废墟深处藏有巴巴托斯遗留的风元素神瞳。旅行者与派蒙一同前往探索，途中遇到了丘丘人设下的陷阱，还与风魔龙瓦格纳展开了激战。最终，他们解开了机关，获得了神瞳，并发现了巴巴托斯的古老笔记，记录着提瓦特大陆的隐秘历史。  
现在，请生成一个类似的故事。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>那么AI会参照示例里的格式输出：</p>
<pre class="line-numbers language-none"><code class="language-none">在璃月的清泉镇，旅行者得知了“归乡之玉”的传说。这块玉器据说能指引失散的亲人重逢。旅行者与钟离一同前往玉京台遗迹，在途中遭遇了愚人众执行官的阻挠，还解开了岩元素机关唤醒了守护灵猴。最终，他们找到了归乡之玉，却发现它与旅行者失散的亲人有着神秘的联系……  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>示例2，编写一个计算角色伤害的函数：</p>
<pre class="line-numbers language-none"><code class="language-none">请编写一个计算角色伤害的函数。  
**示例**：  
输入：旅行者攻击力为1000，敌人防御力为200，元素反应为“超载”（伤害提升50%）。  
输出：总伤害 &#x3D; (1000 - 200) * 1.5 &#x3D; 1200  
**现在，请编写这个函数。**  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>那么AI会参照示例里的格式输出：</p>
<pre class="line-numbers language-none"><code class="language-none">def calculate_damage(atk, defense, elemental_reaction&#x3D;None):  
    base_damage &#x3D; max(1, atk - defense)  # 基础伤害  
    if elemental_reaction &#x3D;&#x3D; &quot;超载&quot;:  
        return base_damage * 1.5  
    elif elemental_reaction &#x3D;&#x3D; &quot;融化&quot;:  
        return base_damage * 2.0  
    else:  
        return base_damage  

# 测试示例  
print(calculate_damage(1000, 200, &quot;超载&quot;))  # 输出：1200  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>该技巧的适用场景如下：</strong></p>
<ul>
<li>根据指定格式生成文案</li>
<li>故事创作：提供角色、地点和任务框架</li>
<li>信息提取：明确输入输出格式</li>
<li>代码实现：通过示例设定逻辑规则</li>
</ul>
<h2 id="链式思维Prompt"><a href="#链式思维Prompt" class="headerlink" title="链式思维Prompt"></a>链式思维Prompt</h2><p>链式思维Prompt是指，通过逐步引导模型进行推理和探索，将复杂任务分解为多个步骤，逐步完善输出，特别适合需要逻辑推理和逐步深入的场景。</p>
<p>一般Prompt可能会让AI直接给出答案，而链式思维Prompt会要求AI详细推理出答案的过程。就像是qwen模型和deepseek模型回答问题的区别。</p>
<p>例如，在计算数学问题时，可以要求AI按步骤计算，而不是直接给出答案。</p>
<p>示例1，一般Prompt计算25*48：</p>
<pre class="line-numbers language-none"><code class="language-none">计算25*48的结果*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>AI会直接回答：<code>1200</code></p>
<p>使用链式思维Prompt：</p>
<pre class="line-numbers language-none"><code class="language-none">计算25*48的结果，请逐步拆解计算过程，并给出最终答案<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>AI会则会回答：</p>
<pre class="line-numbers language-none"><code class="language-none">25 × 48 &#x3D; 25 × (50 - 2)
&#x3D; (25 × 50) - (25 × 2)
&#x3D; 1250 - 50
&#x3D; 1200<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>示例2，生成一个关于冒险的故事：</p>
<p>单轮的Prompt：</p>
<pre class="line-numbers language-none"><code class="language-none">请为我规划一次提瓦特大陆的旅行，包括主要景点和活动。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>使用链式思维Prompt：</p>
<pre class="line-numbers language-none"><code class="language-none">确定主题：
请为我规划一次提瓦特大陆的旅行，包括主要景点和活动。
选择地点：
如果旅行主题是冒险，你会推荐哪些地点？
细化活动：
每个地点有哪些具体的冒险活动？
安全提示：
旅行中需要注意哪些安全事项？<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>该技巧的适用场景如下：</strong></p>
<ul>
<li>数学计算</li>
<li>复杂逻辑推理</li>
<li>代码调试与优化</li>
<li>业务决策分析</li>
<li>逐步推理与验证</li>
</ul>
<h2 id="反向Prompt"><a href="#反向Prompt" class="headerlink" title="反向Prompt"></a>反向Prompt</h2><p>反向Prompt就是通过提供错误或不理想的示例，引导模型避免这些错误并输出更符合预期结果。</p>
<p>示例1，让AI生成一个关于冒险的故事 ：</p>
<pre class="line-numbers language-none"><code class="language-none">请生成一个关于《原神》的冒险故事，确保包含具体角色、地点和冲突。
反向示例：
以下是一个模糊的冒险故事：
从前有一个冒险家，他踏上了一段旅程，经历了许多困难，最终找到了宝藏。
问题：这个故事过于笼统，没有具体细节和角色背景。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>示例2，让AI生成计算角色伤害的函数：</p>
<pre class="line-numbers language-none"><code class="language-none">请编写一个计算《原神》角色伤害的函数，确保包含元素反应的加成逻辑。
反向示例：
以下是一个过于简单的实现：
def calculate_damage(atk, defense):
return atk * (1 - defense &#x2F; 100)
问题：这个函数忽略了元素反应的加成效果。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>该技巧的适用场景如下：</strong></p>
<ul>
<li>修正模糊输出</li>
<li>修正不完整信息</li>
<li>修正逻辑错误</li>
</ul>
<h2 id="多轮交互Prompt"><a href="#多轮交互Prompt" class="headerlink" title="多轮交互Prompt"></a>多轮交互Prompt</h2><p>多轮交互Prompt是指，通过多轮对话逐步引导模型输出更精准的内容，适合需要逐步细化的场景。在某些情况下，一次性提供完整的Prompt不一定能得到最佳答案，这时候就需要通过多轮的交互来优化AI的响应。</p>
<p>示例1，一般Prompt：</p>
<pre class="line-numbers language-none"><code class="language-none">请写一篇关于人工智能的文章。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>AI会直接给出一篇关于人工智能的文章。</p>
<p>使用多轮交互Prompt：</p>
<pre class="line-numbers language-none"><code class="language-none">用户：我想写一篇关于人工智能的文章，你能帮我吗？
AI：当然！请问你希望文章的重点是什么？是介绍 AI 的基本概念，还是探讨 AI 的未来发展？

用户：主要是 AI 在医疗领域的应用。
AI：好的，我会围绕 AI 在医疗诊断、药物研发、手术辅助等方面的应用展开。请问你希望文章的风格是学术性还是通俗易懂？

用户：通俗易懂，并举一些实际案例。
AI：以下是一篇关于人工智能在医疗领域应用的文章，重点突出通俗易懂的风格，并结合了实际案例：
人工智能：医疗领域的“超级助手”
在当今的医疗领域，人工智能（AI）正像一位神奇的“超级助手”，悄然改变着医疗服务的方方面面。它不仅让医生的工作变得更加高效，也让患者享受到了更精准、更便捷的医疗服务。下面，就让我们一起走进人工智能在医疗领域的奇妙世界，看看它都发挥了哪些重要作用。
一、精准诊断：让疾病无处遁形
在传统的医疗诊断中，医生主要依靠自己的经验和对检查结果的解读来判断病情，但这种方式难免会受到主观因素的影响，有时会出现误诊或漏诊的情况。而人工智能的出现，就像为医生配备了一双“火眼金睛”，能够更精准地发现疾病。
（一）医学影像分析
医学影像（如X光、CT、MRI等）是医生诊断疾病的重要依据之一。人工智能通过深度学习技术，可以对这些影像进行快速且精准的分析。比如，DeepMind开发的AI系统能够自动检测乳腺X射线图像中的潜在癌症病变，将漏诊率降低了5.7%，诊断准确率超过了传统放射科医生。在北京协和医院，部署的AI系统可以秒级识别肺结节，敏感度高达97%。这意味着，那些微小的、容易被忽略的病灶，很难逃过AI的“法眼”，从而帮助医生更早地发现疾病，提高患者的治愈率。
（二）病理切片识别
病理切片是诊断疾病的重要手段，但传统的病理分析需要病理学家花费大量时间和精力进行观察和判断。现在，上海瑞金医院发布的“瑞智病理大模型”能够实现百万级数字切片的自动化分析，准确率超过98%。这不仅大大提高了工作效率，还减少了人为因素导致的误差，让病理诊断更加准确可靠。
......(省略后续的n个字)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>示例2，我想要让AI为我规划一次提瓦特大陆的旅行：</p>
<pre class="line-numbers language-none"><code class="language-none">用户：请为我规划一次提瓦特大陆的旅行。
AI：好的！以下是一份详细的提瓦特大陆旅行规划，涵盖蒙德、璃月、稻妻、须弥、枫丹、纳塔、至冬等主要区域的主要景点和活动，希望对你有所帮助！
一、蒙德
主要景点
蒙德城：蒙德的中心区域，有冒险家协会等重要机构。城内建筑风格独特，充满欧式风情，可以在这里感受蒙德的历史与文化。
风起地：全蒙德唯一一处地势较平坦的原野，中央有棵庞大的橡树。
鹰翔海滩：可以闲逛欣赏风景。
低语森林：安柏非常熟悉的地方。
明冠峡：风景秀丽的峡谷。
龙脊雪山：蒙德的著名地标之一，景色壮观，但需注意保暖和安全。
特色活动
风花节：蒙德的特色节日，有各种浪漫的活动，如放风筝、制作花饰等。
探索与解谜：在蒙德的各个角落寻找隐藏的宝藏和解谜元素，如开启风神瞳等。
美食之旅：品尝蒙德的特色美食，如风神杂烩汤等。
......(省略后续的n个字)

用户：如果旅行主题是冒险，你会推荐哪些地点？
AI：如果旅行主题是冒险，提瓦特大陆上有许多充满挑战和神秘的地方，以下是一些推荐的冒险地点：
一、蒙德
龙脊雪山：
冒险亮点：雪山环境恶劣，有极寒天气和暴风雪，需要携带抗寒装备。雪山中有许多隐藏的宝藏和解谜元素，如古老的遗迹、冰封的洞穴等。
挑战：雪山中有强大的怪物，如冰元素的丘丘人、冰史莱姆等。此外，还需要小心雪崩和冰裂缝等自然危险。
奖励：开启雪山中的风神瞳可以获得丰厚的奖励，还能找到珍贵的材料和宝藏。
深林之底：
冒险亮点：位于蒙德的森林深处，环境幽暗且充满危险。这里有古老的遗迹和神秘的力量，适合喜欢探险的旅行者。
挑战：森林中有许多危险的生物，如风龙特瓦林的遗迹和强大的风元素怪物。此外，森林中迷雾重重，容易迷路。
奖励：探索深林之底可以获得稀有的风元素材料和宝藏，还能解锁隐藏的剧情。
......(省略后续的n个字)

用户：每个地点有哪些具体的冒险活动？
AI：以下是一份以冒险为主题的提瓦特大陆旅行规划，涵盖各地区的具体冒险活动：
蒙德
龙脊雪山：
冒险活动：
雪山大勘测：与NPC艾斯特尔对话后，前往雪山各处寻找特定物品，解开雪山的谜团。
雪山迷踪：与乔尔交谈，探索雪山深处的遗迹，解开隐藏的机关。
低温预警：进入雪山的严寒区域，帮助玉霞研究低温现象，应对恶劣环境。
冒险亮点：雪山环境恶劣，有极寒天气和暴风雪，需要携带抗寒装备，同时应对强大的冰元素怪物。
达达乌帕谷：
冒险活动：
探索剑冢封印：找到利文斯通博士，解开剑冢的封印，探索其中的秘密。
冒险亮点：剑冢封印区域有强大的敌人和复杂的机关，需要智慧和勇气。
......(省略后续的n个字)

用户：旅行中需要注意哪些安全事项？
AI：在提瓦特大陆的冒险旅行中，安全至关重要。以下是一些需要注意的安全事项，确保你的旅程既刺激又安全：
一、环境安全
恶劣天气：
龙脊雪山：雪山环境恶劣，有极寒天气和暴风雪。建议携带抗寒装备，如抗寒药剂、保暖衣物等。在暴风雪中，尽量避免长时间暴露在外，寻找避风处。
稻妻：稻妻经常有雷暴天气，建议携带抗雷装备，如抗雷药剂、绝缘手套等。在雷暴中，尽量避免站在高处或靠近金属物体。
层岩巨渊：地下区域可能有塌方和落石的危险，建议携带照明工具和防塌方装备，如矿工头盔等。
地形危险：
绝云间：地形复杂，有悬崖和深谷，建议小心行走，避免失足。攀爬时要确保装备牢固。
清籁岛：地形多变，有沼泽和险峻的山地，建议携带防滑鞋和探路工具。
层岩巨渊：地下区域有复杂的洞穴和狭窄的通道，建议携带地图和指南针，避免迷路。
......(省略后续的n个字)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>该技巧的适用场景如下：</strong></p>
<ul>
<li>产品设计</li>
<li>内容创作</li>
<li>心理咨询</li>
</ul>
<h2 id="层级Prompt"><a href="#层级Prompt" class="headerlink" title="层级Prompt"></a>层级Prompt</h2><p>层级Prompt是指通过分层结构逐步引导模型输出，适合需要分步骤完成的复杂任务。在处理复杂问题时，将问题分解成多个子问题，让AI逐步回答。</p>
<p>示例1，我想要让AI为我规划一次提瓦特大陆的旅行。应用层级Prompt的用例如下：</p>
<pre class="line-numbers language-none"><code class="language-none">顶层Prompt(第一次提问)：
请为我规划一次提瓦特大陆的旅行，包括主要景点和活动。
子层级Prompt（AI拆解问题后发出第二次提问）：
如果旅行主题是冒险，你会推荐哪些地点？
每个地点有哪些具体的冒险活动？
旅行中需要注意哪些安全事项？<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>AI最终生成的回答如下：</p>
<pre class="line-numbers language-none"><code class="language-none">旅行主题：冒险探索  

推荐地点与活动：  
1. 龙脊雪山：  
   活动：攀登雪山，寻找被冰封的遗迹，挑战冰龙瓦格纳。  
   注意事项：携带保暖装备，小心雪崩和低温陷阱。  

2. 清泉镇（璃月）：  
   活动：探索“归乡之玉”遗迹，与守护灵猴互动。  
   注意事项：避开愚人众巡逻队，携带岩元素武器破解机关。  

3. 稻妻踏鞴砂：  
   活动：挑战“影打刀”试炼，收集雷元素神瞳。  
   注意事项：注意雷暴天气，避免被雷龙袭击。  

旅行建议：  
提前与当地冒险家协会联系获取最新情报。  
准备足够的治疗道具和元素反应材料。  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>示例2，我想要让AI生成一个关于 2024 年全球新能源市场趋势的分析报告。应用层级Prompt的用例如下：</p>
<pre class="line-numbers language-none"><code class="language-none">顶层Prompt(第一次提问)：
我需要一个关于 2024 年全球新能源市场趋势的分析报告，请从市场规模、技术发展、政策影响、竞争格局四个方面分别分析，并提供数据支持。
子层级Prompt（AI拆解问题后发出第二次提问）：
市场规模：全球新能源市场的增长率、市场份额等数据。
技术发展：当前主流新能源技术及其突破点。
政策影响：各国政府的新能源补贴政策、环保法规等。
竞争格局：主要新能源企业的市场占有率、竞争策略等。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>AI让将这个复杂的问题拆分成4个小的问题，逐步分析解答，最后再汇总。</p>
<p><strong>该技巧的适用场景如下：</strong></p>
<ul>
<li>报告撰写</li>
<li>系统设计</li>
<li>商业分析</li>
<li>语料生成</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li><strong>链式思维Prompt</strong>：逐步推理和探索，适合复杂任务分解。</li>
<li><strong>示例驱动Prompt</strong>：通过示例引导风格和格式，适合个性化输出。</li>
<li><strong>反向Prompt</strong>：通过错误示例避免常见问题，适合修正错误。</li>
<li><strong>多轮交互Prompt</strong>：通过多轮对话逐步细化输出，适合逐步细化的任务。</li>
<li><strong>层级Prompt</strong>：通过分层结构逐步引导输出，适合复杂任务分解。</li>
</ul>
]]></content>
      <categories>
        <category>LLM</category>
        <category>人工智能</category>
      </categories>
      <tags>
        <tag>LLM</tag>
        <tag>人工智能</tag>
      </tags>
  </entry>
  <entry>
    <title>PgSQL数据库学习笔记（一）</title>
    <url>/2022/10/14/PgSQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="写在前头"><a href="#写在前头" class="headerlink" title="写在前头"></a>写在前头</h1><p><strong>本笔记前两篇主要列出PgSQL的常用命令和数据类型。具体的实操命令从第三篇开始讲解。</strong></p>
<p><strong>Windows上安装PostgreSQL</strong></p>
<p>使用EnterpriseDB来下载安装，根据安装指引安装即可。下载地址：<a href="https://www.enterprisedb.com/downloads/postgres-postgresql-downloads">Download PostgreSQL (enterprisedb.com)</a></p>
<p><strong>PostgreSQL语法</strong></p>
<p>默认情况下PostgreSQL安装完成后，自带了个命令行工具SQL Shell(psql)。</p>
<p>进入命令行工具，可以使用<code>\help 命令</code>来查看各个命令的语法。</p>
<p>若要查看具体命令的用法，可到PostgreSQL的API文档中查看。<a href="https://runebook.dev/zh-CN/docs/postgresql/-index-">PostgreSQL 14.3 中文 (runebook.dev)</a></p>
<h1 id="PostgreSQL语句"><a href="#PostgreSQL语句" class="headerlink" title="PostgreSQL语句"></a>PostgreSQL语句</h1><h2 id="常用语句"><a href="#常用语句" class="headerlink" title="常用语句"></a>常用语句</h2><h3 id="在表和文件之间拷贝数据：copy"><a href="#在表和文件之间拷贝数据：copy" class="headerlink" title="在表和文件之间拷贝数据：copy"></a><strong>在表和文件之间拷贝数据：</strong>copy</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 使用竖线（|）作为域定界符把一个表复制到客户端
copy country to stdout (delimiter &#39;|&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="定义访问权限：grant"><a href="#定义访问权限：grant" class="headerlink" title="定义访问权限：grant"></a><strong>定义访问权限：</strong>grant</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 把表films上的插入特权授予给所有用户
grant insert on films to public;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="从一个查询的结果中定义一个新表：select-into"><a href="#从一个查询的结果中定义一个新表：select-into" class="headerlink" title="从一个查询的结果中定义一个新表：select into"></a><strong>从一个查询的结果中定义一个新表：</strong>select into</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 创建一个只由来自films的最近项构成的 新表films_recent
select * into films_recent from films where date_prod &gt;&#x3D; &#39;2002-01-01&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="清空一个或一组表：truncate"><a href="#清空一个或一组表：truncate" class="headerlink" title="清空一个或一组表：truncate"></a><strong>清空一个或一组表：</strong>truncate</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 清除 COMPANY 表
w3cschooldb&#x3D;# truncate table company;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="修改运行时参数：set"><a href="#修改运行时参数：set" class="headerlink" title="修改运行时参数：set"></a><strong>修改运行时参数：</strong>set</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">exec sql set descriptor indesc count &#x3D; 1;
exec sql set descriptor indesc value 1 data &#x3D; 2;
exec sql set descriptor indesc value 1 data &#x3D; :val1;
exec sql set descriptor indesc value 2 indicator &#x3D; :val1, data &#x3D; &#39;some string&#39;;
exec sql set descriptor indesc value 2 indicator &#x3D; :val2null, data &#x3D; :val2;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="把一个运行时参数值恢复为默认值：reset"><a href="#把一个运行时参数值恢复为默认值：reset" class="headerlink" title="把一个运行时参数值恢复为默认值：reset"></a><strong>把一个运行时参数值恢复为默认值：</strong>reset</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 把timezone配置变量设置为默认值
reset timezone;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="显示运行时的参数值：show"><a href="#显示运行时的参数值：show" class="headerlink" title="显示运行时的参数值：show"></a><strong>显示运行时的参数值：</strong>show</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 显示参数DateStyle的当前设置
show datestyle;
 datestyle<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="更新一个表中的行：update"><a href="#更新一个表中的行：update" class="headerlink" title="更新一个表中的行：update"></a><strong>更新一个表中的行：</strong>update</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 把表films的列kind 中的单词Drama改成Dramatic
update films set kind &#x3D; &#39;dramatic&#39; where kind &#x3D; &#39;drama&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="创建一个准备好的查询：prepare"><a href="#创建一个准备好的查询：prepare" class="headerlink" title="创建一个准备好的查询：prepare"></a><strong>创建一个准备好的查询：</strong>prepare</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 提交由事务标识符foobar标识的事务
commit prepared &#39;foobar&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="执行一个准备好的查询：execute"><a href="#执行一个准备好的查询：execute" class="headerlink" title="执行一个准备好的查询：execute"></a><strong>执行一个准备好的查询：</strong>execute</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">execute query(100, 200);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="显示一个语句的执行规则：explain"><a href="#显示一个语句的执行规则：explain" class="headerlink" title="显示一个语句的执行规则：explain"></a><strong>显示一个语句的执行规则：</strong>explain</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 有一个具有单个integer列和 10000 行的表，要显示在其上的一个简单查询的计划
explain select * from foo;

                       query plan<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="在表中创建新行：insert"><a href="#在表中创建新行：insert" class="headerlink" title="在表中创建新行：insert"></a><strong>在表中创建新行：</strong>insert</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 向films中插入一行
insert into films values
    (&#39;ua502&#39;, &#39;bananas&#39;, 105, &#39;1971-07-13&#39;, &#39;comedy&#39;, &#39;82 minutes&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="重建索引：reindex"><a href="#重建索引：reindex" class="headerlink" title="重建索引：reindex"></a><strong>重建索引：</strong>reindex</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 重建单个索引
reindex index my_index;
-- 重建表my_table上的所有索引
reindex table my_table;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="收集与数据库有关的统计：analyze"><a href="#收集与数据库有关的统计：analyze" class="headerlink" title="收集与数据库有关的统计：analyze"></a><strong>收集与数据库有关的统计：</strong>analyze</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">analyze;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="生成一个通知：notify"><a href="#生成一个通知：notify" class="headerlink" title="生成一个通知：notify"></a><strong>生成一个通知：</strong>notify</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 从psql配置和执行一个监听&#x2F;通知序列
listen virtual;
notify virtual;
asynchronous notification &quot;virtual&quot; received from server process with pid 8448.
notify virtual, &#39;this is the payload&#39;;
asynchronous notification &quot;virtual&quot; with payload &quot;this is the payload&quot; received from server process with pid 8448.

listen foo;
select pg_notify(&#39;fo&#39; || &#39;o&#39;, &#39;pay&#39; || &#39;load&#39;);
asynchronous notification &quot;foo&quot; with payload &quot;payload&quot; received from server process with pid 14728.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="监听一个通知：listen"><a href="#监听一个通知：listen" class="headerlink" title="监听一个通知：listen"></a><strong>监听一个通知：</strong>listen</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 从psql中配置并执行一个监听&#x2F;通知序列
listen virtual;
notify virtual;
asynchronous notification &quot;virtual&quot; received from server process with pid 8448.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="停止监听通知信息：unlisten"><a href="#停止监听通知信息：unlisten" class="headerlink" title="停止监听通知信息：unlisten"></a><strong>停止监听通知信息：</strong>unlisten</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 做一次注册
listen virtual;
notify virtual;
asynchronous notification &quot;virtual&quot; received from server process with pid 8448.
-- 一旦执行了UNLISTEN，进一步的NOTIFY 消息将被忽略
unlisten virtual;
notify virtual;
-- no notify event is received<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="锁定一个表：lock"><a href="#锁定一个表：lock" class="headerlink" title="锁定一个表：lock"></a><strong>锁定一个表：</strong>lock</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 将数据库中的 COMPANY 表锁定为 ACCESS EXCLUSIVE 模式
lock table company1 in access exclusive mode;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="根据一个索引聚簇一个表：cluster"><a href="#根据一个索引聚簇一个表：cluster" class="headerlink" title="根据一个索引聚簇一个表：cluster"></a><strong>根据一个索引聚簇一个表：</strong>cluster</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 基于索引employees_ind聚簇表 employees
cluster employees using employees_ind;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="定义或者改变一个对象的注释：comment"><a href="#定义或者改变一个对象的注释：comment" class="headerlink" title="定义或者改变一个对象的注释：comment"></a><strong>定义或者改变一个对象的注释：</strong>comment</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 为表mytable附加一段注释
comment on table mytable is &#39;this is my table.&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="垃圾收集以及可选地分析一个数据库：vacuum"><a href="#垃圾收集以及可选地分析一个数据库：vacuum" class="headerlink" title="垃圾收集以及可选地分析一个数据库：vacuum"></a><strong>垃圾收集以及可选地分析一个数据库：</strong>vacuum</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 清理单一表onek，为优化器分析它并且打印出详细的清理活动报告
vacuum (verbose, analyze) onek;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="为当前会话设置会话用户标识符和当前用户标识符：set-session-authorization"><a href="#为当前会话设置会话用户标识符和当前用户标识符：set-session-authorization" class="headerlink" title="为当前会话设置会话用户标识符和当前用户标识符：set session authorization"></a><strong>为当前会话设置会话用户标识符和当前用户标识符：</strong>set session authorization</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">set session authorization &#39;paul&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="删除访问权限：revoke"><a href="#删除访问权限：revoke" class="headerlink" title="删除访问权限：revoke"></a><strong>删除访问权限：</strong>revoke</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 从 public 收回表films上的插入特权
revoke insert on films from public;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="事务相关命令"><a href="#事务相关命令" class="headerlink" title="事务相关命令"></a>事务相关命令</h2><h3 id="开始一个事务：begin"><a href="#开始一个事务：begin" class="headerlink" title="开始一个事务：begin"></a><strong>开始一个事务：</strong>begin</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">begin;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="提交当前事务：commit"><a href="#提交当前事务：commit" class="headerlink" title="提交当前事务：commit"></a><strong>提交当前事务：</strong>commit</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 要提交当前事务并且让所有更改持久化
commit;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="提交当前事务：end"><a href="#提交当前事务：end" class="headerlink" title="提交当前事务：end"></a><strong>提交当前事务：</strong>end</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 提交当前事务并且让所有更改持久化
end;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="强制一个事务日志检查点：checkpoint"><a href="#强制一个事务日志检查点：checkpoint" class="headerlink" title="强制一个事务日志检查点：checkpoint"></a><strong>强制一个事务日志检查点：</strong>checkpoint</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">checkpoint;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="中止当前事务：rollback"><a href="#中止当前事务：rollback" class="headerlink" title="中止当前事务：rollback"></a><strong>中止当前事务：</strong>rollback</h3><p>回滚当前事务并且导致该事务所作的所有更新都被抛弃。具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 中止所有更改
rollback;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="中止当前事务：abort"><a href="#中止当前事务：abort" class="headerlink" title="中止当前事务：abort"></a><strong>中止当前事务：</strong>abort</h3><p>回滚当前事务并且导致由该事务所作的所有更新被丢弃。具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">abort;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="开始一个事务块：set-transaction"><a href="#开始一个事务块：set-transaction" class="headerlink" title="开始一个事务块：set transaction"></a><strong>开始一个事务块：</strong>set transaction</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 要用一个已经存在的事务的同一快照开始一个新事务，首先要从该现有 事务导出快照。这将会返回快照标识符
begin transaction isolation level repeatable read;
select pg_export_snapshot();
 pg_export_snapshot<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="开始一个事务块：start-transaction"><a href="#开始一个事务块：start-transaction" class="headerlink" title="开始一个事务块：start transaction"></a><strong>开始一个事务块：</strong>start transaction</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 中止所有更改
rollback;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="在当前事务里定义一个新的保存点：savepoint"><a href="#在当前事务里定义一个新的保存点：savepoint" class="headerlink" title="在当前事务里定义一个新的保存点：savepoint"></a><strong>在当前事务里定义一个新的保存点：</strong>savepoint</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 建立一个保存点并且后来撤销在它建立之后执行的所有命令的效果
begin;
    insert into table1 values (1);
    savepoint my_savepoint;
    insert into table1 values (2);
    rollback to savepoint my_savepoint;
    insert into table1 values (3);
commit;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="回滚到一个保存点：rollback-to-savepoint"><a href="#回滚到一个保存点：rollback-to-savepoint" class="headerlink" title="回滚到一个保存点：rollback to savepoint"></a><strong>回滚到一个保存点：</strong>rollback to savepoint</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 撤销在my_savepoint建立后执行的命令的效果
rollback to savepoint my_savepoint;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="删除一个前面定义的保存点：release-savepoint"><a href="#删除一个前面定义的保存点：release-savepoint" class="headerlink" title="删除一个前面定义的保存点：release savepoint"></a><strong>删除一个前面定义的保存点：</strong>release savepoint</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 建立并且销毁一个保存点
begin;
    insert into table1 values (3);
    savepoint my_savepoint;
    insert into table1 values (4);
    release savepoint my_savepoint;
commit;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="游标相关命令"><a href="#游标相关命令" class="headerlink" title="游标相关命令"></a>游标相关命令</h2><h3 id="定义一个游标：declare"><a href="#定义一个游标：declare" class="headerlink" title="定义一个游标：declare"></a><strong>定义一个游标：</strong>declare</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 声明一个游标
declare liahona cursor for select * from films;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="定位一个游标：move"><a href="#定位一个游标：move" class="headerlink" title="定位一个游标：move"></a><strong>定位一个游标：</strong>move</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">BEGIN WORK;
DECLARE liahona CURSOR FOR SELECT * FROM films;

-- 跳过前 5 行：
MOVE FORWARD 5 IN liahona;
MOVE 5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="用游标从查询中抓取行：fetch"><a href="#用游标从查询中抓取行：fetch" class="headerlink" title="用游标从查询中抓取行：fetch"></a><strong>用游标从查询中抓取行：</strong>fetch</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 在游标 liahona 中取出前 5 行：
FETCH FORWARD 5 FROM liahona;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="关闭游标：close"><a href="#关闭游标：close" class="headerlink" title="关闭游标：close"></a><strong>关闭游标：</strong>close</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 关闭游标liahona
close liahona;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="alter修改命令"><a href="#alter修改命令" class="headerlink" title="alter修改命令"></a>alter修改命令</h2><h3 id="修改一个聚集函数的定义：alter-aggregate"><a href="#修改一个聚集函数的定义：alter-aggregate" class="headerlink" title="修改一个聚集函数的定义：alter aggregate"></a><strong>修改一个聚集函数的定义：</strong>alter aggregate</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">alter aggregate myavg(integer) rename to my_average;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="修改一个排序规则定义：alter-collation"><a href="#修改一个排序规则定义：alter-collation" class="headerlink" title="修改一个排序规则定义：alter collation"></a><strong>修改一个排序规则定义</strong>：alter collation</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 把排序规则de_DE重命名为german
alter collation &quot;de_de&quot; rename to german;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="修改一个编码转换的定义：alter-conversion"><a href="#修改一个编码转换的定义：alter-conversion" class="headerlink" title="修改一个编码转换的定义：alter conversion"></a><strong>修改一个编码转换的定义：</strong>alter conversion</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 把转换iso_8859_1_to_utf8的拥有者改成joe
alter conversion iso_8859_1_to_utf8 owner to joe;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="修改一个数据库：alter-database"><a href="#修改一个数据库：alter-database" class="headerlink" title="修改一个数据库：alter database"></a><strong>修改一个数据库：</strong>alter database</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 在数据库test中默认禁用索引扫描
alter database test set enable_indexscan to off;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="定义默认的访问权限：alter-default-privileges"><a href="#定义默认的访问权限：alter-default-privileges" class="headerlink" title="定义默认的访问权限：alter default privileges"></a><strong>定义默认的访问权限：</strong>alter default privileges</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 在模式myschema中创建的所有表（和视图）授予 SELECT 特权，并且也允许角色webuser向它们之中 INSERT 数据
alter default privileges in schema myschema grant select on tables to public;
alter default privileges in schema myschema grant insert on tables to webuser;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="修改一个域的定义：alter-domain"><a href="#修改一个域的定义：alter-domain" class="headerlink" title="修改一个域的定义：alter domain"></a><strong>修改一个域的定义：</strong>alter domain</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 把一个NOT NULL约束加到一个域
alter domain zipcode set not null;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="修改一个函数的定义：alter-function"><a href="#修改一个函数的定义：alter-function" class="headerlink" title="修改一个函数的定义：alter function"></a><strong>修改一个函数的定义：</strong>alter function</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 把用于类型integer的函数sqrt 重命名为square_root
alter function sqrt(integer) rename to square_root;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="修改角色名称或成员关系：alter-group"><a href="#修改角色名称或成员关系：alter-group" class="headerlink" title="修改角色名称或成员关系：alter group"></a><strong>修改角色名称或成员关系：</strong>alter group</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 向一个组增加用户
alter group staff add user karl, john;
-- 从一个组移除一个用户
alter group workers drop user beth;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="修改一个索引的定义：alter-index"><a href="#修改一个索引的定义：alter-index" class="headerlink" title="修改一个索引的定义：alter index"></a><strong>修改一个索引的定义：</strong>alter index</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 把一个索引移动到一个不同的表空间
alter index distributors set tablespace fasttablespace;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="修改一个操作符的定义：alter-operator"><a href="#修改一个操作符的定义：alter-operator" class="headerlink" title="修改一个操作符的定义：alter operator"></a><strong>修改一个操作符的定义：</strong>alter operator</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 更改类型text的一个自定义操作符a @@ b 的拥有者
alter operator @@ (text, text) owner to joe;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="修改一个模式的定义：alter-schema"><a href="#修改一个模式的定义：alter-schema" class="headerlink" title="修改一个模式的定义：alter schema"></a><strong>修改一个模式的定义：</strong>alter schema</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 把一个索引移动到一个不同的表空间
alter index distributors set tablespace fasttablespace;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="修改一个数据库角色：alter-role"><a href="#修改一个数据库角色：alter-role" class="headerlink" title="修改一个数据库角色：alter role"></a><strong>修改一个数据库角色：</strong>alter role</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 更改一个角色
alter role davide with password &#39;hu8jmn3&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="修改一个序列生成器的定义：alter-sequence"><a href="#修改一个序列生成器的定义：alter-sequence" class="headerlink" title="修改一个序列生成器的定义：alter sequence"></a><strong>修改一个序列生成器的定义：</strong>alter sequence</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 在 105 重启一个被称为serial的序列
alter sequence serial restart with 105;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="修改表的定义：alter-table"><a href="#修改表的定义：alter-table" class="headerlink" title="修改表的定义：alter table"></a><strong>修改表的定义：</strong>alter table</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 向一个表增加一个类型为varchar的列
alter table distributors add column address varchar(30);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="修改一个表空间：alter-tablespace"><a href="#修改一个表空间：alter-tablespace" class="headerlink" title="修改一个表空间：alter tablespace"></a><strong>修改一个表空间：</strong>alter tablespace</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 将表空间index_space重命名为fast_raid
alter tablespace index_space rename to fast_raid;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="修改一个事件触发器的定义：alter-event-trigger"><a href="#修改一个事件触发器的定义：alter-event-trigger" class="headerlink" title="修改一个事件触发器的定义：alter event trigger"></a><strong>修改一个事件触发器的定义：</strong>alter event trigger</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 重命名一个现有的触发器
alter event trigger name rename to new_name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="修改一个类型的定义：alter-type"><a href="#修改一个类型的定义：alter-type" class="headerlink" title="修改一个类型的定义：alter type"></a><strong>修改一个类型的定义：</strong>alter type</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 重命名一个数据类型
alter type electronic_mail rename to email;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="create定义命令"><a href="#create定义命令" class="headerlink" title="create定义命令"></a>create定义命令</h2><h3 id="定义一个新的约束触发器：constraint-trigger"><a href="#定义一个新的约束触发器：constraint-trigger" class="headerlink" title="定义一个新的约束触发器：constraint trigger"></a><strong>定义一个新的约束触发器：</strong>constraint trigger</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 只要表accounts的一行即将要被更新时会执行函数check_account_update
create trigger check_update
    before update on accounts
    for each row
    execute function check_account_update();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="定义一个新的编码转换：create-conversion"><a href="#定义一个新的编码转换：create-conversion" class="headerlink" title="定义一个新的编码转换：create conversion"></a><strong>定义一个新的编码转换：</strong>create conversion</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 使用myfunc创建一个从编码UTF8到 LATIN1的转换
create conversion myconv for &#39;utf8&#39; to &#39;latin1&#39; from myfunc;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="创建一个新数据库：create-database"><a href="#创建一个新数据库：create-database" class="headerlink" title="创建一个新数据库：create database"></a><strong>创建一个新数据库：</strong>create database</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 创建一个新数据库
create database lusiadas;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="定义一个新域：create-domain"><a href="#定义一个新域：create-domain" class="headerlink" title="定义一个新域：create domain"></a><strong>定义一个新域：</strong>create domain</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 创建us_postal_code数据类型并且把它用在 一个表定义中。一个正则表达式测试被用来验证值是否看起来像一个 合法的 US 邮政编码
create domain us_postal_code as text
check(
   value ~ &#39;^\d&#123;5&#125;$&#39;
or value ~ &#39;^\d&#123;5&#125;-\d&#123;4&#125;$&#39;
);

create table us_snail_addy (
  address_id serial primary key,
  street1 text not null,
  street2 text,
  street3 text,
  city text not null,
  postal us_postal_code not null
);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="定义一个新函数：create-function"><a href="#定义一个新函数：create-function" class="headerlink" title="定义一个新函数：create function"></a><strong>定义一个新函数：</strong>create function</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">create function add(integer, integer) returns integer
    as &#39;select $1 + $2;&#39;
    language sql
    immutable
    returns null on null input;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="定义一个新索引：create-index"><a href="#定义一个新索引：create-index" class="headerlink" title="定义一个新索引：create index"></a><strong>定义一个新索引：</strong>create index</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 在表films中的列title上创建一个 B-树索引
create unique index title_idx on films (title);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="定义一种新的过程语言：create-language"><a href="#定义一种新的过程语言：create-language" class="headerlink" title="定义一种新的过程语言：create  language"></a><strong>定义一种新的过程语言：</strong>create  language</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 创建新的过程语言的最小顺序
create function plsample_call_handler() returns language_handler
    as &#39;$libdir&#x2F;plsample&#39;
    language c;
create language plsample
    handler plsample_call_handler;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="定义一个新的操作符：create-operator"><a href="#定义一个新的操作符：create-operator" class="headerlink" title="定义一个新的操作符：create operator"></a><strong>定义一个新的操作符：</strong>create operator</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 为数据类型box定义一种新的操作符--面积相等
create operator &#x3D;&#x3D;&#x3D; (
    leftarg &#x3D; box,
    rightarg &#x3D; box,
    function &#x3D; area_equal_function,
    commutator &#x3D; &#x3D;&#x3D;&#x3D;,
    negator &#x3D; !&#x3D;&#x3D;,
    restrict &#x3D; area_restriction_function,
    join &#x3D; area_join_function,
    hashes, merges
);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="定义一个新的操作符表：create-operator-class"><a href="#定义一个新的操作符表：create-operator-class" class="headerlink" title="定义一个新的操作符表：create operator class"></a><strong>定义一个新的操作符表：</strong>create operator class</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 为数据类型_int4（int4数组） 定义了一个 GiST 索引操作符
create operator class gist__int_ops
    default for type _int4 using gist as
        operator        3       &amp;&amp;,
        operator        6       &#x3D; (anyarray, anyarray),
        operator        7       @&gt;,
        operator        8       &lt;@,
        operator        20      @@ (_int4, query_int),
        function        1       g_int_consistent (internal, _int4, smallint, oid, internal),
        function        2       g_int_union (internal, internal),
        function        3       g_int_compress (internal),
        function        4       g_int_decompress (internal),
        function        5       g_int_penalty (internal, internal, internal),
        function        6       g_int_picksplit (internal, internal),
        function        7       g_int_same (_int4, _int4, internal);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="定义一个新的数据库角色：create-role"><a href="#定义一个新的数据库角色：create-role" class="headerlink" title="定义一个新的数据库角色：create role"></a><strong>定义一个新的数据库角色：</strong>create role</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 创建一个有口令的角色
create user davide with password &#39;jw8s0f4&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="定义一个新重写规则：create-rule"><a href="#定义一个新重写规则：create-rule" class="headerlink" title="定义一个新重写规则：create rule"></a><strong>定义一个新重写规则：</strong>create rule</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">create rule notify_me as on update to mytable do also notify mytable;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="定义一个新模式：create-schema"><a href="#定义一个新模式：create-schema" class="headerlink" title="定义一个新模式：create schema"></a><strong>定义一个新模式：</strong>create schema</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 创建一个模式
create schema myschema;
-- 为用户joe创建一个模式，该模式也将被命名为 joe
create schema authorization joe;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="定义一个新的外部服务器：create-server"><a href="#定义一个新的外部服务器：create-server" class="headerlink" title="定义一个新的外部服务器：create server"></a><strong>定义一个新的外部服务器：</strong>create server</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 创建使用外部数据包装器postgres_fdw 的服务器myserver
create server myserver foreign data wrapper postgres_fdw options (host &#39;foo&#39;, dbname &#39;foodb&#39;, port &#39;5432&#39;);
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="定义一个新序列发生器：create-sequence"><a href="#定义一个新序列发生器：create-sequence" class="headerlink" title="定义一个新序列发生器：create sequence"></a><strong>定义一个新序列发生器：</strong>create sequence</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 创建一个称作serial的上升序列，从 101 开始
create sequence serial start 101;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="定义一个新表：create-table"><a href="#定义一个新表：create-table" class="headerlink" title="定义一个新表：create table"></a><strong>定义一个新表：</strong>create table</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 创建表distributors
create table distributors (
     did    integer primary key generated by default as identity,
     name   varchar(40) not null check (name  &#39;&#39;)
);
-- 创建有一个二维数组的表
create table array_int (
    vector  int[][]
);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="从一条查询的结果中创建一个新表：create-table-as"><a href="#从一条查询的结果中创建一个新表：create-table-as" class="headerlink" title="从一条查询的结果中创建一个新表：create table as"></a><strong>从一条查询的结果中创建一个新表：</strong>create table as</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 创建一个新表films_recent，它只由表 films中最近的项组成
create table films_recent as
  select * from films where date_prod &gt;&#x3D; &#39;2002-01-01&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="定义一个新的表空间：create-tablespace"><a href="#定义一个新的表空间：create-tablespace" class="headerlink" title="定义一个新的表空间：create tablespace"></a><strong>定义一个新的表空间：</strong>create tablespace</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 要在文件系统位置&#x2F;data&#x2F;dbs创建表空间dbspace，请首先使用操作系统工具创建目录并设置正确的所有权
mkdir &#x2F;data&#x2F;dbs
chown postgres:postgres &#x2F;data&#x2F;dbs

-- 然后在内部发出表空间创建命令 PostgreSQL
--create tablespace dbspace location &#39;&#x2F;data&#x2F;dbs&#39;;

-- 要创建由不同数据库用户拥有的表空间
create tablespace indexspace owner genevieve location &#39;&#x2F;data&#x2F;indexes&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="定义一个新的触发器：create-trigger"><a href="#定义一个新的触发器：create-trigger" class="headerlink" title="定义一个新的触发器：create trigger"></a><strong>定义一个新的触发器：</strong>create trigger</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 禁止执行任何DDL命令
create or replace function abort_any_command()
  returns event_trigger
 language plpgsql
  as $$
begin
  raise exception &#39;command % is disabled&#39;, tg_tag;
end;
$$;

create event trigger abort_ddl on ddl_command_start
   execute function abort_any_command();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="定义一个新的数据类型：create-type"><a href="#定义一个新的数据类型：create-type" class="headerlink" title="定义一个新的数据类型：create type"></a><strong>定义一个新的数据类型：</strong>create type</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 创建一个枚举类型并且将其用在一个表定义中
create type bug_status as enum (&#39;new&#39;, &#39;open&#39;, &#39;closed&#39;);

create table bug (
    id serial,
    description text,
    status bug_status
);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="定义一个视图：create-view"><a href="#定义一个视图：create-view" class="headerlink" title="定义一个视图：create view"></a><strong>定义一个视图：</strong>create view</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 创建一个由所有喜剧电影组成的视图
create view comedies as
    select *
    from films
    where kind &#x3D; &#39;comedy&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="drop删除命令"><a href="#drop删除命令" class="headerlink" title="drop删除命令"></a>drop删除命令</h2><h3 id="删除一个表中的行：delete"><a href="#删除一个表中的行：delete" class="headerlink" title="删除一个表中的行：delete"></a><strong>删除一个表中的行：</strong>delete</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 删除所有电影，但音乐剧除外
delete from films where kind  &#39;musical&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="删除一个用户定义的聚类函数：drop-aggregate"><a href="#删除一个用户定义的聚类函数：drop-aggregate" class="headerlink" title="删除一个用户定义的聚类函数：drop aggregate"></a><strong>删除一个用户定义的聚类函数：</strong>drop aggregate</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 为类型integer移除聚集函数myavg
drop aggregate myavg(integer);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="删除一个用户定义的类型转换：drop-cast"><a href="#删除一个用户定义的类型转换：drop-cast" class="headerlink" title="删除一个用户定义的类型转换：drop cast"></a><strong>删除一个用户定义的类型转换：</strong>drop cast</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 移除从类型text到类型int的类型
drop cast (text as int);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="删除一个用户定义的编码转换：drop-conversion"><a href="#删除一个用户定义的编码转换：drop-conversion" class="headerlink" title="删除一个用户定义的编码转换：drop conversion"></a><strong>删除一个用户定义的编码转换：</strong>drop conversion</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 删除名为myname的转换
drop conversion myname;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="删除一个数据库：drop-database"><a href="#删除一个数据库：drop-database" class="headerlink" title="删除一个数据库：drop database"></a><strong>删除一个数据库：</strong>drop database</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 删除名为myname的数据库
drop database myname;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="删除一个用户定义的域：drop-domain"><a href="#删除一个用户定义的域：drop-domain" class="headerlink" title="删除一个用户定义的域：drop domain"></a><strong>删除一个用户定义的域：</strong>drop domain</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 移除域box
drop domain box;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="删除一个函数：drop-function"><a href="#删除一个函数：drop-function" class="headerlink" title="删除一个函数：drop function"></a><strong>删除一个函数：</strong>drop function</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 移除域box
drop domain box;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="删除一个索引：drop-index"><a href="#删除一个索引：drop-index" class="headerlink" title="删除一个索引：drop index"></a><strong>删除一个索引：</strong>drop index</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 移除索引title_idx
drop index title_idx;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="删除一个过程语言：drop-language"><a href="#删除一个过程语言：drop-language" class="headerlink" title="删除一个过程语言：drop language"></a><strong>删除一个过程语言：</strong>drop language</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 移除过程语言plsample
drop language plsample;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="删除一个操作符：drop-operator"><a href="#删除一个操作符：drop-operator" class="headerlink" title="删除一个操作符：drop operator"></a><strong>删除一个操作符：</strong>drop operator</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 为类型integer移除幂操作符 a^b
drop operator ^ (integer, integer);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="删除一个操作符表：drop-operator-class"><a href="#删除一个操作符表：drop-operator-class" class="headerlink" title="删除一个操作符表：drop operator class"></a><strong>删除一个操作符表：</strong>drop operator class</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 移除 B-树操作符类widget_ops
drop operator class widget_ops using btree;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="删除一个数据库角色：drop-role"><a href="#删除一个数据库角色：drop-role" class="headerlink" title="删除一个数据库角色：drop role"></a><strong>删除一个数据库角色：</strong>drop role</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 删除一个角色
drop role jonathan;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="删除一个重写规则：drop-rule"><a href="#删除一个重写规则：drop-rule" class="headerlink" title="删除一个重写规则：drop rule"></a><strong>删除一个重写规则：</strong>drop rule</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 删除重写规则newrule
drop rule newrule on mytable;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="删除一个模式：drop-schema"><a href="#删除一个模式：drop-schema" class="headerlink" title="删除一个模式：drop schema"></a><strong>删除一个模式：</strong>drop schema</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 移除序列serial
drop sequence serial;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="删除一个表：drop-table"><a href="#删除一个表：drop-table" class="headerlink" title="删除一个表：drop table"></a><strong>删除一个表：</strong>drop table</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 销毁两个表films和 distributors
drop table films, distributors;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="删除一个表空间：drop-tablespace"><a href="#删除一个表空间：drop-tablespace" class="headerlink" title="删除一个表空间：drop tablespace"></a><strong>删除一个表空间：</strong>drop tablespace</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 从系统移除表空间mystuff
drop tablespace mystuff;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="删除一个触发器定义：drop-trigger"><a href="#删除一个触发器定义：drop-trigger" class="headerlink" title="删除一个触发器定义：drop trigger"></a><strong>删除一个触发器定义：</strong>drop trigger</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 销毁表films上的触发器 if_dist_exists
drop trigger if_dist_exists on films;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="删除一个用户定义数据类型：drop-type"><a href="#删除一个用户定义数据类型：drop-type" class="headerlink" title="删除一个用户定义数据类型：drop type"></a><strong>删除一个用户定义数据类型：</strong>drop type</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 移除数据类型box
drop type box;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="删除一个视图：drop-view"><a href="#删除一个视图：drop-view" class="headerlink" title="删除一个视图：drop view"></a><strong>删除一个视图：</strong>drop view</h3><p>具体语句用法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 将移除名为kinds的视图
drop view kinds;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>PgSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>PgSQL数据库学习笔记（二）</title>
    <url>/2022/10/14/PgSQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h1 id="PostgreSQL数据类型"><a href="#PostgreSQL数据类型" class="headerlink" title="PostgreSQL数据类型"></a>PostgreSQL数据类型</h1><h2 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h2><p>数值类型由 2 字节、4 字节或 8 字节的整数以及 4 字节或 8 字节的浮点数和可选精度的十进制数组成。</p>
<p>下表列出了PgSQL所支持的数值类型：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">名字</th>
<th style="text-align:left">存储长度</th>
<th style="text-align:left">描述</th>
<th style="text-align:left">范围</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">smallint</td>
<td style="text-align:left">2 字节</td>
<td style="text-align:left">小范围整数</td>
<td style="text-align:left">-32768 到 +32767</td>
</tr>
<tr>
<td style="text-align:left">integer</td>
<td style="text-align:left">4 字节</td>
<td style="text-align:left">常用的整数</td>
<td style="text-align:left">-2147483648 到 +2147483647</td>
</tr>
<tr>
<td style="text-align:left">bigint</td>
<td style="text-align:left">8 字节</td>
<td style="text-align:left">大范围整数</td>
<td style="text-align:left">-9223372036854775808 到 +9223372036854775807</td>
</tr>
<tr>
<td style="text-align:left">decimal</td>
<td style="text-align:left">可变长</td>
<td style="text-align:left">用户指定的精度，精确</td>
<td style="text-align:left">小数点前 131072 位；小数点后 16383 位</td>
</tr>
<tr>
<td style="text-align:left">numeric</td>
<td style="text-align:left">可变长</td>
<td style="text-align:left">用户指定的精度，精确</td>
<td style="text-align:left">小数点前 131072 位；小数点后 16383 位</td>
</tr>
<tr>
<td style="text-align:left">real</td>
<td style="text-align:left">4 字节</td>
<td style="text-align:left">可变精度，不精确</td>
<td style="text-align:left">6 位十进制数字精度</td>
</tr>
<tr>
<td style="text-align:left">double precision</td>
<td style="text-align:left">8 字节</td>
<td style="text-align:left">可变精度，不精确</td>
<td style="text-align:left">15 位十进制数字精度</td>
</tr>
<tr>
<td style="text-align:left">smallserial</td>
<td style="text-align:left">2 字节</td>
<td style="text-align:left">自增的小范围整数</td>
<td style="text-align:left">1 到 32767</td>
</tr>
<tr>
<td style="text-align:left">serial</td>
<td style="text-align:left">4 字节</td>
<td style="text-align:left">自增整数</td>
<td style="text-align:left">1 到 2147483647</td>
</tr>
<tr>
<td style="text-align:left">bigserial</td>
<td style="text-align:left">8 字节</td>
<td style="text-align:left">自增的大范围整数</td>
<td style="text-align:left">1 到 9223372036854775807</td>
</tr>
</tbody>
</table>
</div>
<h2 id="货币类型"><a href="#货币类型" class="headerlink" title="货币类型"></a>货币类型</h2><p>money类型存储带有固定小数精度的货币金额。numeric、int和bigint类型的值可以转换为money。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">名字</th>
<th style="text-align:left">存储容量</th>
<th style="text-align:left">描述</th>
<th style="text-align:left">范围</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">money</td>
<td style="text-align:left">8 字节</td>
<td style="text-align:left">货币金额</td>
<td style="text-align:left">-92233720368547758.08 到 +92233720368547758.07</td>
</tr>
</tbody>
</table>
</div>
<h2 id="字符类型"><a href="#字符类型" class="headerlink" title="字符类型"></a>字符类型</h2><p>下表列出了PgSQL所支持的字符类型：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">名字</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">character varying(n),varchar(n)</td>
<td style="text-align:left">变长，有长度限制</td>
</tr>
<tr>
<td style="text-align:left">character(n), char(n)</td>
<td style="text-align:left">f定长,不足补空白</td>
</tr>
<tr>
<td style="text-align:left">text</td>
<td style="text-align:left">变长，无长度限制</td>
</tr>
</tbody>
</table>
</div>
<h2 id="日期-时间类型"><a href="#日期-时间类型" class="headerlink" title="日期/时间类型"></a>日期/时间类型</h2><p>下表列出了PgSQL所支持的日期和时间类型：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">名字</th>
<th style="text-align:left">存储空间</th>
<th style="text-align:left">描述</th>
<th style="text-align:left">最低值</th>
<th style="text-align:left">最高值</th>
<th style="text-align:left">分辨率</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">timestamp [  ( <em>p</em> )  ]  [ without time zone ]</td>
<td style="text-align:left">8 字节</td>
<td style="text-align:left">日期和时间(无时区)</td>
<td style="text-align:left">4713 BC</td>
<td style="text-align:left">294276 AD</td>
<td style="text-align:left">1 毫秒 / 14 位</td>
</tr>
<tr>
<td style="text-align:left">timestamp [  ( <em>p</em> )  ] with time zone</td>
<td style="text-align:left">8 字节</td>
<td style="text-align:left">日期和时间，有时区</td>
<td style="text-align:left">4713 BC</td>
<td style="text-align:left">294276 AD</td>
<td style="text-align:left">1 毫秒 / 14 位</td>
</tr>
<tr>
<td style="text-align:left">date</td>
<td style="text-align:left">4 字节</td>
<td style="text-align:left">只用于日期</td>
<td style="text-align:left">4713 BC</td>
<td style="text-align:left">5874897 AD</td>
<td style="text-align:left">1 天</td>
</tr>
<tr>
<td style="text-align:left">time [  ( <em>p</em> )  ]  [ without time zone ]</td>
<td style="text-align:left">8 字节</td>
<td style="text-align:left">只用于一日内时间</td>
<td style="text-align:left">00:00:00</td>
<td style="text-align:left">24:00:00</td>
<td style="text-align:left">1 毫秒 / 14 位</td>
</tr>
<tr>
<td style="text-align:left">time [  ( <em>p</em> )  ] with time zone</td>
<td style="text-align:left">12 字节</td>
<td style="text-align:left">只用于一日内时间，带时区</td>
<td style="text-align:left">00:00:00+1459</td>
<td style="text-align:left">24:00:00-1459</td>
<td style="text-align:left">1 毫秒 / 14 位</td>
</tr>
<tr>
<td style="text-align:left">interval [  <em>fields</em>  ] [  ( <em>p</em> )  ]</td>
<td style="text-align:left">12 字节</td>
<td style="text-align:left">时间间隔</td>
<td style="text-align:left">-178000000 年</td>
<td style="text-align:left">178000000 年</td>
<td style="text-align:left">1 毫秒 / 14 位</td>
</tr>
</tbody>
</table>
</div>
<h2 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h2><p>boolean有true或false两个状态，第三种未知状态（unknown）用NULL表示。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">名称</th>
<th style="text-align:left">存储格式</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">boolean</td>
<td style="text-align:left">1 字节</td>
<td style="text-align:left">true/false</td>
</tr>
</tbody>
</table>
</div>
<h2 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h2><p>PgSQL种的枚举类型类似于C语言中的enum类型，包含静态和值的有序集合的数据类型。与其他类型不同的是枚举类型需要使用<code>create type</code>命令创建。枚举类型一旦创建，便可用于变和函数定义。</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">create type mood as enum(&#39;sad&#39;,&#39;ok&#39;,&#39;happy&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="几何类型"><a href="#几何类型" class="headerlink" title="几何类型"></a>几何类型</h2><p>几何类型表示二维的平面物体。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">名字</th>
<th style="text-align:left">存储空间</th>
<th style="text-align:left">说明</th>
<th style="text-align:left">表现形式</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">point</td>
<td style="text-align:left">16 字节</td>
<td style="text-align:left">平面中的点</td>
<td style="text-align:left">(x,y)</td>
</tr>
<tr>
<td style="text-align:left">line</td>
<td style="text-align:left">32 字节</td>
<td style="text-align:left">(无穷)直线(未完全实现)</td>
<td style="text-align:left">( ( x1,y1 ) , ( x2,y2 ) )</td>
</tr>
<tr>
<td style="text-align:left">lseg</td>
<td style="text-align:left">32 字节</td>
<td style="text-align:left">(有限)线段</td>
<td style="text-align:left">( ( x1,y1 ), ( x2,y2 ) )</td>
</tr>
<tr>
<td style="text-align:left">box</td>
<td style="text-align:left">32 字节</td>
<td style="text-align:left">矩形</td>
<td style="text-align:left">( ( x1,y1 ), ( x2,y2 ) )</td>
</tr>
<tr>
<td style="text-align:left">path</td>
<td style="text-align:left">16+16n 字节</td>
<td style="text-align:left">闭合路径(与多边形类似)</td>
<td style="text-align:left">( ( x1,y1 ), … )</td>
</tr>
<tr>
<td style="text-align:left">path</td>
<td style="text-align:left">16+16n 字节</td>
<td style="text-align:left">开放路径</td>
<td style="text-align:left">[ ( x1,y1 ) , … ]</td>
</tr>
<tr>
<td style="text-align:left">polygon</td>
<td style="text-align:left">40+16n 字节</td>
<td style="text-align:left">多边形(与闭合路径相似)</td>
<td style="text-align:left">( ( x1,y1 ) , … )</td>
</tr>
<tr>
<td style="text-align:left">circle</td>
<td style="text-align:left">24 字节</td>
<td style="text-align:left">圆</td>
<td style="text-align:left">&lt; ( x,y ) , r &gt; (圆心和半径)</td>
</tr>
</tbody>
</table>
</div>
<h2 id="网络地址类型"><a href="#网络地址类型" class="headerlink" title="网络地址类型"></a>网络地址类型</h2><p>PgSQL提供用于存储IPv4、IPv6、MAC地址的数据类型。在对inet或cidr数据类型进行排序时，IPv4地址总是排在IPv6前面，包括那些封装或是映射在IPv6地址里的IPv4地址。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">名字</th>
<th style="text-align:left">存储空间</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">cidr</td>
<td style="text-align:left">7 或 19 字节</td>
<td style="text-align:left">IPv4 或 IPv6 网络</td>
</tr>
<tr>
<td style="text-align:left">inet</td>
<td style="text-align:left">7 或 19 字节</td>
<td style="text-align:left">IPv4 或 IPv6 主机和网络</td>
</tr>
<tr>
<td style="text-align:left">macaddr</td>
<td style="text-align:left">6 字节</td>
<td style="text-align:left">MAC 地址</td>
</tr>
</tbody>
</table>
</div>
<h2 id="位串类型"><a href="#位串类型" class="headerlink" title="位串类型"></a>位串类型</h2><p>位串是一串1和0的字符串，可以用于存储和直观化位掩码。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">名字</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">bit(n)</td>
<td style="text-align:left">必须准确匹配长度n(n位正整数)</td>
</tr>
<tr>
<td style="text-align:left">bit var ying(n)</td>
<td style="text-align:left">最长n的变长类型</td>
</tr>
</tbody>
</table>
</div>
<h2 id="文本搜索类型"><a href="#文本搜索类型" class="headerlink" title="文本搜索类型"></a>文本搜索类型</h2><p>全文检索即通过自然语言文档的集合来找到那些匹配一个查询的检索。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">名字</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">tsvector</td>
<td style="text-align:left">其值是一个无重复值的lexemes排序列表，即一些同一个词的不同变种的标准化</td>
</tr>
<tr>
<td style="text-align:left">tsquery</td>
<td style="text-align:left">存储用于检索的词汇，且使用布尔操作符&amp;(AND),\</td>
<td>(OR)和!(NOT)来组合它们，括号用来强调操作符的分组。</td>
</tr>
</tbody>
</table>
</div>
<h2 id="UUID类型"><a href="#UUID类型" class="headerlink" title="UUID类型"></a>UUID类型</h2><p>uuid 数据类型用来存储 RFC 4122，ISO/IEF 9834-8:2005 以及相关标准定义的通用唯一标识符（UUID）。在一些系统里也叫GUID。这个标识符是一个由算法产生的 128 位标识符，使它不可能在已知使用相同算法的模块中和其他方式产生的标识符相同。 其用小写的十六进制数字序列表示。</p>
<h2 id="XML类型"><a href="#XML类型" class="headerlink" title="XML类型"></a>XML类型</h2><p>要使用这个数据类型，编译时必须使用<code>configure --with -libxml</code>。</p>
<p>xmlvalue IS DOCUMENT 表达式可以用来判断一个特定的 xml 值是一个完整的文件还是内容片段。</p>
<p>使用xmlparse来从字符数据产生xml类型的值：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">XMLPARSE (DOCUMENT &#39;&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;&lt;book&gt;&lt;title&gt;Manual&lt;&#x2F;title&gt;&lt;chapter&gt;...&lt;&#x2F;chapter&gt;&lt;&#x2F;book&gt;&#39;)
XMLPARSE (CONTENT &#39;abc&lt;foo&gt;bar&lt;&#x2F;foo&gt;&lt;bar&gt;foo&lt;&#x2F;bar&gt;&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="json类型"><a href="#json类型" class="headerlink" title="json类型"></a>json类型</h2><p>json 数据类型可以用来存储 JSON（JavaScript Object Notation）数据， 这样的数据也可以存储为 text，但是 json 数据类型更有利于检查每个存储的数值是可用的 JSON 值。</p>
<p>此外还有相关的函数来处理 json 数据：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">实例</th>
<th style="text-align:center">实例结果</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>array_to_json(&#39;&#123; &#123;1,5&#125;,&#123;99,100&#125; &#125;&#39;::int[])</code></td>
<td style="text-align:center"><code>[ [1,5],[99,100] ]</code></td>
</tr>
<tr>
<td style="text-align:left"><code>row_to_json(row(1,&#39;foo&#39;))</code></td>
<td style="text-align:center"><code>&#123;&quot;f1&quot;:1,&quot;f2&quot;:&quot;foo&quot;&#125;</code></td>
</tr>
</tbody>
</table>
</div>
<h2 id="数组类型"><a href="#数组类型" class="headerlink" title="数组类型"></a>数组类型</h2><p>数组类型可以是任何基本类型或用户定义类型，枚举类型或复合类型。</p>
<p><strong>声明数组</strong>：</p>
<pre class="line-numbers language-none"><code class="language-none">CREATE TABLE sal_emp (
    name            text,
    pay_by_quarter  integer[],
    schedule        text[][]，
    pay_by_quarter integer ARRAY[4]
);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>插入值：</strong></p>
<p>插入值使用花括号 {}，元素在 {} 使用逗号隔开：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">INSERT INTO sal_emp
    VALUES (&#39;Bill&#39;,
    &#39;&#123;10000, 10000, 10000, 10000&#125;&#39;,
    &#39;&#123; &#123; &quot;meeting&quot;, &quot;lunch&quot; &#125;, &#123; &quot;training&quot;, &quot;presentation&quot; &#125; &#125;&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>访问数组：</strong></p>
<p>数组的下标数字是写在方括号里的。</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">SELECT name FROM sal_emp WHERE pay_by_quarter[1] &lt;&gt; pay_by_quarter[2];<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><strong>修改数组：</strong></p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">UPDATE sal_emp SET pay_by_quarter &#x3D; &#39;&#123;25000,25000,27000,27000&#125;&#39;
    WHERE name &#x3D; &#39;Carol&#39;;
UPDATE sal_emp SET pay_by_quarter &#x3D; ARRAY[25000,25000,27000,27000]
    WHERE name &#x3D; &#39;Carol&#39;;    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>数组中检索：</strong></p>
<p>要搜索一个数组中的数值，就必须检查该数组的每一个值。</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">SELECT * FROM sal_emp WHERE 10000 &#x3D; ALL (pay_by_quarter);

SELECT * FROM
   (SELECT pay_by_quarter,
           generate_subscripts(pay_by_quarter, 1) AS s
      FROM sal_emp) AS foo
 WHERE pay_by_quarter[s] &#x3D; 10000;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="复合类型"><a href="#复合类型" class="headerlink" title="复合类型"></a>复合类型</h2><p>复合类型表示一行或一条记录的结构，它实际上只是一个字段名和它们的数据类型的列表。<strong>复合类型可以实现建表时可以自定义字段</strong>。</p>
<p>声明复合类型的语法类似于<code>create table</code>，只是<strong>这里只可以声明字段名字和类型</strong>，定义类型后就可以用它来创建表：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">CREATE TYPE complex AS (
    r       double precision,
    i       double precision
);

CREATE TYPE inventory_item AS (
    name            text,
    supplier_id     integer,
    price           numeric
);
CREATE TABLE on_hand (
    item      inventory_item,
    count     integer
);
INSERT INTO on_hand VALUES (ROW(&#39;fuzzy dice&#39;, 42, 1.99), 1000);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="复合类型输入"><a href="#复合类型输入" class="headerlink" title="复合类型输入"></a>复合类型输入</h3><p>要用文本常量属性复合类型值，在圆括号里包围字段值并用逗号分隔他们。可以在任何字段周围放上双引号，若<strong>值本身包含逗号或圆括号，则必须要用双引号括起来</strong>。</p>
<p>复合类型常量的一般格式如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">&#39;( value1 , value2 , ... )&#39;
&#39;(&quot;fuzzy dice&quot;,42,1.99)&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="访问复合类型"><a href="#访问复合类型" class="headerlink" title="访问复合类型"></a>访问复合类型</h3><p>若要访问复合类型字段的一个域，则必须要用圆括号把域的名字括起来：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">SELECT (item).name FROM on_hand WHERE (item).price &gt; 9.99;
SELECT (on_hand.item).name FROM on_hand WHERE (on_hand.item).price &gt; 9.99;#需要用到表名时的写法<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="范围类型"><a href="#范围类型" class="headerlink" title="范围类型"></a>范围类型</h2><p>范围类型代表这某一元素类型在一定范围内的值。</p>
<p>PostgreSQL 内置的范围类型有：</p>
<ul>
<li>integer的范围：int4range</li>
<li>bigint的范围：int8range</li>
<li>numeric的范围：numrange </li>
<li>timestamp without time zone的范围：tsrange</li>
<li>timestamp with time zone的范围：tstzrange</li>
<li>date的范围：daterange</li>
</ul>
<p>此外也可以定义自己的范围类型：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">CREATE TABLE reservation (room int, during tsrange);
INSERT INTO reservation VALUES
    (1108, &#39;[2010-01-01 14:30, 2010-01-01 15:30)&#39;);

-- 包含
SELECT int4range(10, 20) @&gt; 3;

-- 重叠
SELECT numrange(11.1, 22.2) &amp;&amp; numrange(20.0, 30.0);

-- 提取上边界
SELECT upper(int8range(15, 25));

-- 计算交叉
SELECT int4range(10, 20) * int4range(15, 25);

-- 范围是否为空
SELECT isempty(numrange(1, 5));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>范围值的输入必须遵循下面的格式：()、(]、[)、[]和空。圆括号或者方括号显示下边界和上边界是不包含的还是包含的。注意最后的格式是 空，代表着一个空的范围（一个不含有值的范围）。</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 包括3，不包括7，并且包括二者之间的所有点
SELECT &#39;[3,7)&#39;::int4range;

-- 不包括3和7，但是包括二者之间所有点
SELECT &#39;(3,7)&#39;::int4range;

-- 只包括单一值4
SELECT &#39;[4,4]&#39;::int4range;

-- 不包括点（被标准化为‘空’）
SELECT &#39;[4,4)&#39;::int4range;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="对象标识符类型"><a href="#对象标识符类型" class="headerlink" title="对象标识符类型"></a>对象标识符类型</h2><p>PgSQL 在内部使用对象标识符(OID)作为各种系统表的主键。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">名字</th>
<th style="text-align:left">引用</th>
<th style="text-align:left">描述</th>
<th style="text-align:left">数值例子</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">oid</td>
<td style="text-align:left">任意</td>
<td style="text-align:left">数字化的对象标识符</td>
<td style="text-align:left">564182</td>
</tr>
<tr>
<td style="text-align:left">regproc</td>
<td style="text-align:left">pg_proc</td>
<td style="text-align:left">函数名字</td>
<td style="text-align:left">sum</td>
</tr>
<tr>
<td style="text-align:left">regprocedure</td>
<td style="text-align:left">pg_proc</td>
<td style="text-align:left">带参数类型的函数</td>
<td style="text-align:left">sum(int4)</td>
</tr>
<tr>
<td style="text-align:left">regoper</td>
<td style="text-align:left">pg_operator</td>
<td style="text-align:left">操作符名</td>
<td style="text-align:left">+</td>
</tr>
<tr>
<td style="text-align:left">regoperator</td>
<td style="text-align:left">pg_operator</td>
<td style="text-align:left">带参数类型的操作符</td>
<td style="text-align:left">*(integer,integer) 或 -(NONE,integer)</td>
</tr>
<tr>
<td style="text-align:left">regclass</td>
<td style="text-align:left">pg_class</td>
<td style="text-align:left">关系名</td>
<td style="text-align:left">pg_type</td>
</tr>
<tr>
<td style="text-align:left">regtype</td>
<td style="text-align:left">pg_type</td>
<td style="text-align:left">数据类型名</td>
<td style="text-align:left">integer</td>
</tr>
<tr>
<td style="text-align:left">regconfig</td>
<td style="text-align:left">pg_ts_config</td>
<td style="text-align:left">文本搜索配置</td>
<td style="text-align:left">english</td>
</tr>
<tr>
<td style="text-align:left">regdictionary</td>
<td style="text-align:left">pg_ts_dict</td>
<td style="text-align:left">文本搜索字典</td>
<td style="text-align:left">simple</td>
</tr>
</tbody>
</table>
</div>
<h2 id="伪类型"><a href="#伪类型" class="headerlink" title="伪类型"></a>伪类型</h2><p>PgSQL类型系统包含一系列特殊用途的条目， 它们按照类别来说叫做伪类型。<strong>伪类型不能作为字段的数据类型</strong>， 但是它<strong>可以用于声明一个函数的参数或者结果类型</strong>。 伪类型<strong>在一个函数不只是简单地接受并返回某种SQL 数据类型的情况下很有用</strong>。</p>
<p>下表列出了所有的伪类型：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">名字</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">any</td>
<td style="text-align:left">表示一个函数接受任何输入数据类型。</td>
</tr>
<tr>
<td style="text-align:left">anyelement</td>
<td style="text-align:left">表示一个函数接受任何数据类型。</td>
</tr>
<tr>
<td style="text-align:left">anyarray</td>
<td style="text-align:left">表示一个函数接受任意数组数据类型。</td>
</tr>
<tr>
<td style="text-align:left">anynonarray</td>
<td style="text-align:left">表示一个函数接受任意非数组数据类型。</td>
</tr>
<tr>
<td style="text-align:left">anyenum</td>
<td style="text-align:left">表示一个函数接受任意枚举数据类型。</td>
</tr>
<tr>
<td style="text-align:left">anyrange</td>
<td style="text-align:left">表示一个函数接受任意范围数据类型。</td>
</tr>
<tr>
<td style="text-align:left">cstring</td>
<td style="text-align:left">表示一个函数接受或者返回一个空结尾的 C 字符串。</td>
</tr>
<tr>
<td style="text-align:left">internal</td>
<td style="text-align:left">表示一个函数接受或者返回一种服务器内部的数据类型。</td>
</tr>
<tr>
<td style="text-align:left">language_handler</td>
<td style="text-align:left">一个过程语言调用处理器声明为返回language_handler。</td>
</tr>
<tr>
<td style="text-align:left">fdw_handler</td>
<td style="text-align:left">一个外部数据封装器声明为返回fdw_handler。</td>
</tr>
<tr>
<td style="text-align:left">record</td>
<td style="text-align:left">标识一个函数返回一个未声明的行类型。</td>
</tr>
<tr>
<td style="text-align:left">trigger</td>
<td style="text-align:left">一个触发器函数声明为返回trigger。</td>
</tr>
<tr>
<td style="text-align:left">void</td>
<td style="text-align:left">表示一个函数不返回数值。</td>
</tr>
<tr>
<td style="text-align:left">opaque</td>
<td style="text-align:left">一个已经过时的类型，以前用于所有上面这些用途。</td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>PgSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>PgSQL数据库学习笔记（三）</title>
    <url>/2022/10/17/PgSQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[<h1 id="PostgreSQL命令"><a href="#PostgreSQL命令" class="headerlink" title="PostgreSQL命令"></a>PostgreSQL命令</h1><p>由于Pgsql数据库的命令在运行时会自动转换为小写英文字母，故命令语句也可以用小写字母编写。</p>
<h2 id="使用pgAdmin工具创建数据库"><a href="#使用pgAdmin工具创建数据库" class="headerlink" title="使用pgAdmin工具创建数据库"></a>使用pgAdmin工具创建数据库</h2><p>右键点击batabases，选择弹出的数据库的菜单。</p>
<p><img src="/2022/10/17/PgSQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/1.png" alt></p>
<h2 id="pgAdmin工具界面语言设成中文"><a href="#pgAdmin工具界面语言设成中文" class="headerlink" title="pgAdmin工具界面语言设成中文"></a>pgAdmin工具界面语言设成中文</h2><p>左键点击File，弹出的Preferences。</p>
<p><img src="/2022/10/17/PgSQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/2.png" alt></p>
<p>选择左下角的User language，点击右上角的箭头，选择Chinese(Simplified)，点击Save保存。在弹出的Refresh required窗口中点击Refresh保存即可。</p>
<p><img src="/2022/10/17/PgSQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/3.png" alt></p>
<h2 id="pgAdmin创建SQL脚本"><a href="#pgAdmin创建SQL脚本" class="headerlink" title="pgAdmin创建SQL脚本"></a>pgAdmin创建SQL脚本</h2><p>在已经创建好的数据库名称中右键点击，选择CREATE 脚本，即可创建SQL脚本。可以在SQL脚本里编写PgSQL语句。</p>
<p><img src="/2022/10/17/PgSQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/4.png" alt></p>
<p><strong>注意：SQL脚本中尽量不要直接点击运行代码。</strong>这样在创建过一次表后，直接点击运行代码时会再次运行建表的语句，会报表格已存在的错。<strong>通常是选中需要运行的代码块后再点击执行按钮。</strong>数据库只运行选中的代码，这样不会重复执行先前写好的代码，若没有选中任何代码，则默认为选中全部。</p>
<h2 id="PgSQL创建数据库"><a href="#PgSQL创建数据库" class="headerlink" title="PgSQL创建数据库"></a>PgSQL创建数据库</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- create database 数据库名
-- 	   with
--     关于数据库的说明
create database postgres
    with
    owner&#x3D;postgres -- 该数据库的拥有者
    encoding&#x3D;&#39;UTF8&#39; -- 数据库中使用的字符集编码
 	lc_collate&#x3D;&#39;Chinese (Simplified)_China.936&#39; -- 在数据库中使用的排序规则顺序
    lc_ctype&#x3D;&#39;Chinese (Simplified)_China.936&#39;-- 在数据库中使用的字符分类
    tablespace&#x3D;pg_default-- 与数据库相关联的表空间名称
    connection limit&#x3D;-1 -- 数据库允许多少并发连接，-1表示没有限制
    is_template&#x3D;false; -- 若为真，则具有CREATEDB特权的用户都可以从 这个数据库克隆。如果为假（默认），则只有超级用户或者该数据库的拥有者 可以克隆它。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="PgSQL的CRUD语句"><a href="#PgSQL的CRUD语句" class="headerlink" title="PgSQL的CRUD语句"></a>PgSQL的CRUD语句</h2><h3 id="create建表"><a href="#create建表" class="headerlink" title="create建表"></a>create建表</h3><p>使用create语句创建表：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- create table 表名(
	-- 属性名 数据类型 条件约束 
-- )
create table rpt_tutorial( 
	id serial primary key not null,-- 建立自增id
	name text not null,-- 建立文本型属性
	age int not null,-- 建立整数型属性
	datetime date not null-- 建立日期型属性
);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="create创建复合类型"><a href="#create创建复合类型" class="headerlink" title="create创建复合类型"></a>create创建复合类型</h2><p>使用create语句创建复合类型：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- create type 复合类型名 as （类型名 数据类型)
create type profession as (profession char(50));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>创建复合类型后，可实现在表中自定义字段名称，其格式为：<code>属性名 复合类型名 条件约束</code></p>
<h3 id="insert插入数据"><a href="#insert插入数据" class="headerlink" title="insert插入数据"></a>insert插入数据</h3><p>使用insert语句查询数据：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">insert into rpt_tutorial(name,age,datetime,prof)
values(&#39;Zhangsan&#39;,30,&#39;2022-10-14&#39;,&#39;(teacher)&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="read读数据"><a href="#read读数据" class="headerlink" title="read读数据"></a>read读数据</h3><p>使用select语句查询数据：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- select 属性名 form 表名 where 条件约束
select * from rpt_tutorial;
select name from rpt_tutorial where age&gt;&#x3D;30;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="update更新数据"><a href="#update更新数据" class="headerlink" title="update更新数据"></a>update更新数据</h3><p>使用update…set语句更新数据：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- update 表名 set 更新的属性名&#x3D;更新的数值 where 条件约束更新的属性名&#x3D;原数值
update rpt_tutorial set datetime&#x3D;&#39;2022-10-17&#39; where datetime&#x3D;&#39;2022-10-14&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="delete-amp-drop删除数据"><a href="#delete-amp-drop删除数据" class="headerlink" title="delete&amp;drop删除数据"></a>delete&amp;drop删除数据</h3><p>使用delete或drop语句删除数据：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 删除表中的记录
-- delete from 表名 
delete from rpt_tutorial
-- 删除表
-- delete table 表名 
drop table rpt_tutorial
-- 删除复合类型
drop type profession
-- 重置自增id为1，删除所有数据
truncate table rpt_tutorial restart identity;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="使用python进行PgSQL数据库连接"><a href="#使用python进行PgSQL数据库连接" class="headerlink" title="使用python进行PgSQL数据库连接"></a>使用python进行PgSQL数据库连接</h2><p>Psycopy是针对python的Postgres数据库的适配模块，安装psycopg2可以整合python和Postgres。可在cmd中输入命令进行安装：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">pip install psycopg2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>导入psycopg2模块，并进行sql操作，其语句格式如下。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">conn&#x3D;psycopg2.connect(database&#x3D;&quot;数据库名&quot;,user&#x3D;&quot;数据库用户名&quot;,password&#x3D;&quot;数据库密码&quot;,host&#x3D;&quot;127.0.0.1&quot;,port&#x3D;&quot;5432&quot;)#127.0.0.1为默认的本地ip地址，port为数据库默认地址
print(&quot;Opened database successfully&quot;)
cur&#x3D;conn.cursor()#创建一个cursor对象
cur.execute(&#39;&#39;&#39;
sql操作语句
);&#39;&#39;&#39;)
conn.commit()
cur.close()
conn.close()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="使用python将csv文本的数据导入导出至pqsql"><a href="#使用python将csv文本的数据导入导出至pqsql" class="headerlink" title="使用python将csv文本的数据导入导出至pqsql"></a>使用python将csv文本的数据导入导出至pqsql</h2><p>方法一：</p>
<p>使用psycopg2模块中的copy语句操作文本，由于csv文件默认以逗号分隔单元格，故导入导出时要注意加上或减去逗号：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">#读csv文件
#resourcefilenames为csv文件地址
#targettablename为要导入的数据库表名
with open(resourcefilenames,&#39;r&#39;,encoding&#x3D;&#39;utf-8&#39;) as f:
    next(f)
    cur.copy_from(f,targettablename,sep&#x3D;&#39;,&#39;,)
    
#写文本
#targetfilenames为导出的csv文件名
write_head&#x3D;True
with open(targetfilenames,&#39;w&#39;,encoding&#x3D;&#39;utf-8&#39;) as f:
    columns&#x3D;[&#39;id&#39;,&#39;name&#39;,&#39;age&#39;,&#39;datetime&#39;]
    if write_head:
        s&#x3D;&#39;&#39;
        for k in columns:
            s+&#x3D;k+&#39;,&#39;
        s&#x3D;s[:-1]
        f.write(s+&#39;\n&#39;)
        write_head&#x3D;False    
    cur.copy_to(f,targettablename,sep&#x3D;&#39;,&#39;,columns&#x3D;columns) 
print(&quot;Export csv successfully&quot;)  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>方法二：</p>
<p>运用xlrd、xlwt模块导入导出数据：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">#导入数据
import xlrd
workbook &#x3D; xlrd.open_workbook(filename&#x3D;&#39;C:&#x2F;文件名&#39;)#仅支持xls文件
# 需要先指定sheet工作表
table &#x3D; workbook.sheet_by_name(sheet_name&#x3D;&#39;sheet表名&#39;)
# 获取行数
rows &#x3D; table.nrows
# 获取列数
cols &#x3D; table.ncols
# 循环获取每行的数据
for row in range(rows):
    for col in range(cols):
        value &#x3D; table.cell_value(row, col)
        print(&#39;第&#123;&#125;行&#123;&#125;列的数据为：&#123;&#125;&#39;.format(row, col, value))
#导出数据
import xlwt
# 创建一个workbook并设置编码
workbook &#x3D; xlwt.Workbook(encoding &#x3D; &#39;utf-8&#39;)
# 添加sheet
worksheet &#x3D; workbook.add_sheet(&#39;text2&#39;)
# 写入excel, 参数对应 行, 列, 值
for row in range(rows):
    for col in range(cols):
        value &#x3D; table.cell_value(row, col)
        worksheet.write(row, col, value)
workbook.save(&#39;text2.csv&#39;)   
#导出数据方法2
def outdata(data,file,sheetname):
    # work_book&#x3D;xlrd.open_workbook(filename&#x3D;file)
    work_book&#x3D;xlwt.Workbook(encoding&#x3D;&#39;utf-8&#39;)
    sheet&#x3D;work_book.add_sheet(sheetname)
    sheet.write(0,0,&#39;id&#39;)
    sheet.write(0,1,&#39;name&#39;)
    sheet.write(0,2,&#39;age&#39;)
    sheet.write(0,3,&#39;datetime&#39;)
    for i in range(len(data)):
        for j in range(len(data[i])):
            sheet.write(i+1,j,&#39;%s&#39; % data[i][j])
    work_book.save(file)              
    print(&quot;Data output successfully&quot;) 
outdata(rows,targetfilenames,&#39;test&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>方法三：</p>
<p>运用csv模块导入导出数据</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">#导入数据
import csv
from re import A
def readfile():
    f &#x3D; open(&#39;文件名&#39;, &#39;r&#39;)
    csv_reader &#x3D; csv.reader(f)
    a&#x3D;[]
    for row_data in csv_reader:
        a.append(row_data)
        print(a)
    f.close()         
    return a
#导出数据    
a&#x3D;readfile()
csvFile3 &#x3D; open(&#39;新文件名&#39;,&#39;w&#39;,encoding&#x3D;&#39;utf-8&#39;,newline&#x3D;&#39;&#39;)
writer2 &#x3D; csv.DictWriter(csvFile3,fieldnames&#x3D;[&#39;属性名&#39;])
key&#x3D;a[0]
for t in range(len(key)):
    writer2 &#x3D; csv.writer(csvFile3)
    writer2.writerow(a[t])
csvFile3.close()  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>PgSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue axios接口异步请求数据并同步返回</title>
    <url>/2023/10/16/Vue%20axios%E6%8E%A5%E5%8F%A3%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE%E5%B9%B6%E5%90%8C%E6%AD%A5%E8%BF%94%E5%9B%9E/</url>
    <content><![CDATA[<p>在实际项目开发中，经常要使用<code>axios</code>来请求数据。</p>
<p><code>axios</code>可以通过<code>async/await</code>来实现同步请求。</p>
<p>其中<code>async</code>用来修饰方法，其声明的方法为异步请求的方法，<code>await</code>只能在异步方法中使用，用于等待指定方法执行完成；<code>await</code>修饰的方法执行完成后，才会执行后续的代码。</p>
<p><code>axios</code>的<code>.then</code>模块前把this赋值给一个变量并在<code>.then</code>中代替<code>this</code>来使用，可以防止<code>this</code>指针发生变化导致引用全局变量无效的问题，如：</p>
<ul>
<li><p>```json<br>  getData() {      </p>
<pre><code>  var _this=this
  axios.get(`https://tangmenjue.top`)
  .then(res =&gt; &#123;
  _this.data = res.data
      &#125;)
  &#125;,
</code></pre>  <pre class="line-numbers language-none"><code class="language-none">
下面将介绍使用**&#96;axios&#96;异步请求数据不同步返回**时的处理方法：

- 定义&#96;getData&#96;方法来发送axois请求，将请求返回值赋值给&#96;this.data&#96;，其中：使用&#96;async&#96;修饰&#96;getData&#96;方法，使用&#96;await&#96;修饰&#96;axios&#96;方法：

	&#96;&#96;&#96;json
	async getData() &#123;      
	    var _this&#x3D;this
	    await axios.get(&#96;https:&#x2F;&#x2F;tangmenjue.top&#96;)
		.then(res &#x3D;&gt; &#123;
	    _this.data &#x3D; res.data
	        &#125;)
	    &#125;,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>定义调用<code>getData</code>的方法<code>handleData</code>，其中：使用<code>async</code>修饰<code>handleData</code>方法，使用<code>await</code>修饰调用的<code>this.getData</code>方法：：</p>
  <pre class="line-numbers language-json" data-language="json"><code class="language-json">async handleData() &#123;      
    await this.getData()
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>根据上述步骤即可实现将<code>axios</code>请求的数据同步传递给全局变量<code>this.data</code>。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 监听兄弟组件数据变化并实时更新数据</title>
    <url>/2023/07/18/Vue%20%E7%9B%91%E5%90%AC%E5%85%84%E5%BC%9F%E7%BB%84%E4%BB%B6%E6%95%B0%E6%8D%AE%E5%8F%98%E5%8C%96%E5%B9%B6%E5%AE%9E%E6%97%B6%E6%9B%B4%E6%96%B0%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<p>在实际项目开发中，有时会遇到组件B需要监听兄弟组件A的数据是否有改动，并根据兄弟组件A的改动来更新自身数据或执行一定操作的需求。下面将介绍实现这一过程的方法：</p>
<ul>
<li><p>在Vue项目的<code>main.js</code>中 添加下面语句：</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json">Vue.prototype.$eventBus &#x3D; new Vue()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>在兄弟组件A中所要监听的事件中添加如下自定义事件的代码<code>this.$eventBus.$emit(&#39;SyncData&#39;)</code>。如需要监听<code>addDataA</code>事件的变化，则组件A中<code>script</code>模块的代码如下所示：</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"> methods: &#123;
  addDataA() &#123;&#x2F;&#x2F;函数内容可自行替换
    axios.post(&#39;testA&#39;)
      .then((res) &#x3D;&gt; &#123;
        console.log(res.data)
        this.$eventBus.$emit(&#39;SyncData&#39;)&#x2F;&#x2F;SyncData为自定义事件名，可修改
      &#125;)
      .catch((err) &#x3D;&gt; &#123;
        console.log(err)
      &#125;)
  &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>在需要实时更新的组件B中添加监听方法的变化，就可以实现实时更新数据。在组件B的<code>script</code>模块中添加以下代码：</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json">mounted()&#123;
  this.$eventBus.$on(&quot;SyncData&quot;,()&#x3D;&gt;&#123;&#x2F;&#x2F;监听自定义事件是否被触发
    this.onLoadDataB()&#x2F;&#x2F;自定义事件被触发时执行该函数
  &#125;)
&#125;,
methods: &#123;
  onLoadDataB() &#123;&#x2F;&#x2F;函数内容可自行替换
    axios.get(&#39;testB&#39;)
      .then((res) &#x3D;&gt; &#123;
       console.log(res.data)
      &#125;)
      .catch((err) &#x3D;&gt; &#123;
        console.log(err)
      &#125;)
  &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>为防止叠加调用<code>EventBus</code>，在组件B的<code>beforDestroy</code>生命钩子中，添加以下代码：</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json">beforDestroy()&#123;
       this.$eventBus.$off(&quot;SyncData&quot;);  &#x2F;&#x2F;当这个组件销毁的时候bus也跟着一起销毁
   &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>至此，当兄弟组件A触发<code>addDataA</code>事件添加数据时，组件B便会触发事件<code>onLoadDataB</code>来加载数据。从而达到组件B随着兄弟组件A数据变化进行实时更新的目的。</p>
</li>
</ul>
<hr>
<h1 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h1><p>使用EventBus的好处在于：</p>
<ul>
<li>可全局使用</li>
<li>灵活性高，哪里需要放哪里，代码量少</li>
<li>跨组件通信，无需使用缓存</li>
</ul>
<p>相较于vuex，使用EventBus的缺点有：</p>
<ul>
<li><code>$EventBus.$emit</code>和<code>$eventBus.$on</code>必须成对出现</li>
<li>由于高灵活性，事件多了后，难以维护事件</li>
<li>在<code>$eventBus.$on</code>的组件里必须手动销毁<code>$eventBus</code>，否则会引发多次执行</li>
<li>复用性较差，需要在多个地方重复写逻辑</li>
</ul>
<p>综合优弊端分析可知：中大型项目不推荐用EventBus，建议用vuex做状态管理以便日后维护；若为小型项目，尤其是涉及多处跨组件通信时推荐使用EventBus</p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 将组件打包并发布到npm仓库</title>
    <url>/2023/11/20/Vue%20%E5%B0%86%E7%BB%84%E4%BB%B6%E6%89%93%E5%8C%85%E5%B9%B6%E5%8F%91%E5%B8%83%E5%88%B0npm%E4%BB%93%E5%BA%93/</url>
    <content><![CDATA[<p>在项目中遇到需要反复使用的代码时，通常会将其封装起来以待下一次的调用。若想要在不同项目里也能使用这些代码时，比较难在众多代码中找到需要的代码。而将组件打包并发布到npm库中，只需要记住相应的包名，便可从npm下载直接安装使用。</p>
<h1 id="全局注册组件"><a href="#全局注册组件" class="headerlink" title="全局注册组件"></a>全局注册组件</h1><ul>
<li><p>在完成对应组件<code>editor.vue</code>的封装后，在组件存放目录下（这里默认为<code>components</code>)新建一个index.js文件用于将封装好的组件注册为全局组件，内容如下：</p>
  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> editor <span class="token keyword">from</span> <span class="token string">'./editor.vue'</span>
<span class="token keyword">const</span> components <span class="token operator">=</span> <span class="token punctuation">[</span>
  editor
<span class="token punctuation">]</span>
<span class="token comment">// 定义 install 方法，接收 Vue 作为参数。如果使用 use 注册插件，则所有的组件都将被注册</span>
<span class="token keyword">const</span> <span class="token function-variable function">install</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">Vue</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token comment">// 遍历注册全局组件</span>
  components<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">component</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span>component<span class="token punctuation">.</span>name<span class="token punctuation">,</span> component<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

  <span class="token comment">// 判断是否是直接引入文件,如果是，就不用调用 Vue.use()</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> window <span class="token operator">!==</span> <span class="token string">'undefined'</span> <span class="token operator">&amp;&amp;</span> window<span class="token punctuation">.</span>Vue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">install</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>Vue<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 导出的对象必须具有 install，才能被 Vue.use() 方法安装</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
  install
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>  index.js文件存放位置如图所示：<img src="/2023/11/20/Vue%20%E5%B0%86%E7%BB%84%E4%BB%B6%E6%89%93%E5%8C%85%E5%B9%B6%E5%8F%91%E5%B8%83%E5%88%B0npm%E4%BB%93%E5%BA%93/1.png" alt></p>
</li>
</ul>
<h1 id="打包组件"><a href="#打包组件" class="headerlink" title="打包组件"></a>打包组件</h1><ul>
<li><p>修改项目中的<code>package.json</code>文件<code>scripts</code>属性中的内容，增加一条<code>package</code>属性，配置打包命令：</p>
  <pre class="line-numbers language-json" data-language="json"><code class="language-json">&quot;scripts&quot;: &#123;
    &quot;serve&quot;: &quot;vue-cli-service serve&quot;,
    &quot;build&quot;: &quot;vue-cli-service build&quot;,
    &quot;lint&quot;: &quot;vue-cli-service lint&quot;,
    &quot;package&quot;: &quot;vue-cli-service build --target lib .&#x2F;src&#x2F;components&#x2F;index.js --name 组件名称 --dest 组件名称&quot;
  &#125;,
&#x2F;&#x2F; package参数详情
&#x2F;&#x2F; 设置--target lib 参数来指定打包的目录
&#x2F;&#x2F; 设置--name 参数来指定打包后的文件名字
&#x2F;&#x2F; 设置--dest 参数来指定打包后的文件夹名称<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>在终端命令行的项目目录处（如<code>F:\el-editor&gt;</code>）执行命令来打包组件：</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm run package<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
</ul>
<p>​        打包完成后可以看到新生成的文件夹（这里为<code>el-editor</code>）<img src="/2023/11/20/Vue%20%E5%B0%86%E7%BB%84%E4%BB%B6%E6%89%93%E5%8C%85%E5%B9%B6%E5%8F%91%E5%B8%83%E5%88%B0npm%E4%BB%93%E5%BA%93/2.png" alt></p>
<h1 id="发布到npm"><a href="#发布到npm" class="headerlink" title="发布到npm"></a>发布到npm</h1><ul>
<li><p>到<a href="https://www.npmjs.com/">npm官网</a>上注册一个账号，记下用户名和密码，若已经有账号可以跳过该步骤</p>
</li>
<li><p>终端进入打包后的文件夹（<code>el-editor</code>），执行以下命令来初始化一个<code>package.json</code>文件：</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cd el-editor
npm init -y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>将npm源设为官方源：</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm config set registry&#x3D;https:&#x2F;&#x2F;registry.npmjs.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>输入以下命令添加npm用户，若之前添加过可以跳过该步骤</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm adduser
&#x2F;&#x2F;这里会让填写用户名和密码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>输入以下命令发布组件包</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm publish<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  如果发布失败可能是名字重复了，改名后重新发布即可。</p>
</li>
</ul>
<h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ul>
<li><p>删除npm上的包，需要隔天才能重新用同样的名字发布</p>
</li>
<li><p>发布包后要注意组件中静态资源<code>public</code>、<code>assets</code>、<code>public</code>的路径是否正确</p>
</li>
<li><p>更新包版本时，可以直接更改版本号，也通过以下命令，将1.0.0版本改为1.0.1版本：</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm version patch -m &#39;[patch]&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue.js实战：博客页面前端</title>
    <url>/2022/11/14/Vue.js%E5%AE%9E%E6%88%98%EF%BC%9A%E5%8D%9A%E5%AE%A2%E9%A1%B5%E9%9D%A2%E5%89%8D%E7%AB%AF/</url>
    <content><![CDATA[<h1 id="基于Vue-cli的前端项目初始化"><a href="#基于Vue-cli的前端项目初始化" class="headerlink" title="基于Vue-cli的前端项目初始化"></a>基于Vue-cli的前端项目初始化</h1><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>Vue-cli环境配置详情见<a href="http://tangmenjue.top/2022/11/03/前端框架之Vue.js（一）/#/使用npm安装">前端框架之Vue.js（一）</a>安装小节里的“<strong>使用npm安装</strong>”内容。</p>
<ul>
<li><p>初始化一个新项目，创建文件夹tutorproject作为项目目录，打开一个终端将切换路径到tutorproject，运行代码以创建front-end文件夹：</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject&gt; vue create front-end

运行结果如下：
Vue CLI v5.0.8
? Please pick a preset: (Use arrow keys)
&gt; first ([Vue 3] babel, eslint)
  ssecond ([Vue 3] babel, eslint)
  Default ([Vue 3] babel, eslint)
  Default ([Vue 2] babel, eslint)
  Manually select features<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>使用方向键选中<code>Default ([Vue 2] babel, eslint)</code>选项后按下键盘上的回车键，然后脚手架工具就开始构建项目，并且安装所需的依赖。</p>
</li>
<li><p>将切换路径到front-end，运行代码以启动Vue应用程序：</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject&gt; cd front-end
PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\front-end&gt; npm run serve<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>打开浏览器输入网址<code>http://localhost:8080/</code>，即可看到应用程序：</p>
<p>  <img src="/2022/11/14/Vue.js%E5%AE%9E%E6%88%98%EF%BC%9A%E5%8D%9A%E5%AE%A2%E9%A1%B5%E9%9D%A2%E5%89%8D%E7%AB%AF/1.png" alt></p>
</li>
</ul>
<h2 id="组件Ping-vue"><a href="#组件Ping-vue" class="headerlink" title="组件Ping.vue"></a>组件Ping.vue</h2><p>将<code>\tutorproject\front-end\src\components</code>目录下的<code>HelloWorld.vue</code>文件删除，并在当前目录下新建文件<code>Ping.vue</code>：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>&#123;&#123;msg&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
  name<span class="token operator">:</span> <span class="token string">'Ping'</span><span class="token punctuation">,</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
      msg<span class="token operator">:</span><span class="token string">'Hello,This is Ping.vue component'</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在<code>tutorproject\front-end\src</code>目录下新建路由文件夹<code>router</code>，并在<code>router</code>文件夹中新建文件<code>index.js</code>：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span>
<span class="token keyword">import</span> Router <span class="token keyword">from</span> <span class="token string">'vue-router'</span>
<span class="token keyword">import</span> Ping <span class="token keyword">from</span> <span class="token string">'@/components/Ping'</span>

Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Router<span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    routes<span class="token operator">:</span><span class="token punctuation">[</span>
        <span class="token punctuation">&#123;</span>
            path<span class="token operator">:</span><span class="token string">'/'</span><span class="token punctuation">,</span>
            name<span class="token operator">:</span><span class="token string">'Ping'</span><span class="token punctuation">,</span>
            component<span class="token operator">:</span>Ping
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>修改<code>front-end\src\App.vue</code>中<code>&lt;script&gt;...&lt;/script&gt;</code>部分的import代码如下：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>
import HelloWorld from './components/Ping.vue'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>修改<code>front-end\vue.config.js</code>文件的代码以关闭语法检查：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> defineConfig <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'@vue/cli-service'</span><span class="token punctuation">)</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  transpileDependencies<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  lintOnSave<span class="token operator">:</span><span class="token boolean">false</span> <span class="token comment">//关闭语法检查</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>此时的代码结构如下：</p>
<p><img src="/2022/11/14/Vue.js%E5%AE%9E%E6%88%98%EF%BC%9A%E5%8D%9A%E5%AE%A2%E9%A1%B5%E9%9D%A2%E5%89%8D%E7%AB%AF/2.png" alt></p>
<p>再次在浏览器中访问<code>http://localhost:8080/</code>，可以看到页面发生了变化：</p>
<p><img src="/2022/11/14/Vue.js%E5%AE%9E%E6%88%98%EF%BC%9A%E5%8D%9A%E5%AE%A2%E9%A1%B5%E9%9D%A2%E5%89%8D%E7%AB%AF/3.png" alt></p>
<h2 id="使用axios与API交互"><a href="#使用axios与API交互" class="headerlink" title="使用axios与API交互"></a>使用axios与API交互</h2><p>在<code>cmd</code>中按下<code>ctrl+c</code>停止应用程序，使用以下命令安装axios:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\front-end&gt; cnpm install axios --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>依赖关系自动写进了<code>front-end\package.json</code>中，在package.json文件的<code>dependencies</code>里可以看到刚安装的axios。</p>
<p>输入<code>npm run serve</code>重新启动<code>Vue</code>。</p>
<p>修改<code>\front-end\src\components\Ping.vue</code>中<code>&lt;script&gt;...&lt;/script&gt;</code>部分的代码如下：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
  name<span class="token operator">:</span> <span class="token string">'Ping'</span><span class="token punctuation">,</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
      msg<span class="token operator">:</span><span class="token string">''</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  methods<span class="token operator">:</span><span class="token punctuation">&#123;</span>
    <span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token keyword">const</span> path<span class="token operator">=</span><span class="token string">'http://localhost:5000/api/ping'</span>
      axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>msg<span class="token operator">=</span>res<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
          console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>另外打开一个终端将切换路径到<code>tutorproject\back-end</code>（博客后端的项目文件），运行代码以运行flask服务端：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end&gt; venv\Scripts\activate
(venv) PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end&gt; flask run<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>此时在浏览器中访问<code>http://localhost:8080/</code>，可以看到页面再次发生了变化：</p>
<p><img src="/2022/11/14/Vue.js%E5%AE%9E%E6%88%98%EF%BC%9A%E5%8D%9A%E5%AE%A2%E9%A1%B5%E9%9D%A2%E5%89%8D%E7%AB%AF/4.png" alt></p>
<p>若没有获取到后端API端口的数据<code>pong!</code>，解决方案如下：</p>
<ul>
<li><p>停止flask的运行，使用pip安装<code>Flask-Cors</code>包</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">(venv) PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end&gt; pip install flask-Cors
(venv) PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end&gt; pip freeze &gt; requirements.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>然后修改<code>tutorproject\back-end\tutorweb\__init__.py</code>：</p>
  <pre class="line-numbers language-python" data-language="python"><code class="language-python">from flask import Flask
from flask_cors import CORS
from flask_sqlalchemy import SQLAlchemy
from flask_migrate import Migrate
from config import Config

#定义Flack_SQLAlchemy
db&#x3D;SQLAlchemy()

#定义Flack_Migrate 
migrate&#x3D;Migrate()

def create_app(config_class&#x3D;Config):
    app&#x3D;Flask(__name__)
    app.config.from_object(config_class)

    #启用CORS
    CORS(app)
    #初始化Flack_SQLAlchemy
    db.init_app(app)
    #初始化Flack_Migrate 
    migrate.init_app(app,db)

    #注册blueprint
    from tutorweb.api import bp as api_bp
    app.register_blueprint(api_bp,url_prefix&#x3D;&#39;&#x2F;api&#39;)
    
    return app 
from tutorweb import models<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>然后再启动flask，访问<code>http://localhost:8080/</code>页面即可。</p>
</li>
</ul>
<h2 id="引入element-UI"><a href="#引入element-UI" class="headerlink" title="引入element-UI"></a>引入element-UI</h2><p>使用<code>cnpm</code>命令安装：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\front-end&gt; cnpm install element-ui -S<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>修改<code>\front-end\src\main.js</code>，引入element-UI样式：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createApp <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>
<span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> ElementUI <span class="token keyword">from</span> <span class="token string">'element-ui'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string">'element-ui/lib/theme-chalk/index.css'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span><span class="token punctuation">;</span>

Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>ElementUI<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>
  <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token parameter">h</span> <span class="token operator">=></span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>修改<code>\front-end\src\components\Ping.vue</code>中<code>&lt;template&gt;...&lt;/template&gt;</code>部分的代码，创建element-UI风格的按钮：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">round</span><span class="token punctuation">></span></span>&#123;&#123;msg&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在浏览器中访问<code>http://localhost:8080/</code>，可以看到element-UI风格的按钮<code>pong!</code>：</p>
<p><img src="/2022/11/14/Vue.js%E5%AE%9E%E6%88%98%EF%BC%9A%E5%8D%9A%E5%AE%A2%E9%A1%B5%E9%9D%A2%E5%89%8D%E7%AB%AF/5.png" alt></p>
<p>至此，博客前端的欢迎页面完成，页面的具体样式可以根据自己的喜好自行更改。</p>
<p>博客后续的登录注册等页面，由于代码过多且繁杂，暂且不表，该部分的后续看心情更新。（除非…评论区呼声高，嗯！）</p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>前端</category>
        <category>前端框架</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 水印自适应窗口方法</title>
    <url>/2023/07/12/Vue%E6%B0%B4%E5%8D%B0%E8%87%AA%E9%80%82%E5%BA%94%E7%AA%97%E5%8F%A3%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>通过使用Vue的生命周期钩子函数和window对象的resize事件来实现水印根据窗口大小适配的功能：</p>
<ol>
<li><p>在Vue文件的<code>script</code>模块中 引入水印组件：</p>
 <pre class="line-numbers language-json" data-language="json"><code class="language-json">import watermark from &#39;@zsit&#x2F;watermark&#39;;  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>在<code>script</code>模块的<code>export default</code>里，通过钩子函数<code>mounted</code>监听窗口大小的变化，并在销毁组件前移除事件监听器：</p>
 <pre class="line-numbers language-json" data-language="json"><code class="language-json">mounted()&#123;
  window.addEventListener(&#39;resize&#39;,this.handleResize)
&#125;,
beforeDestroy()&#123;
  window.removeEventListener(&#39;resize&#39;,this.handleResize)
&#125;,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>在<code>script</code>模块的里，定义<code>handleResize</code>方法来调用水印：</p>
 <pre class="line-numbers language-json" data-language="json"><code class="language-json">methods: &#123;
    handleResize()&#123;
          watermark(&#123;
                    watermark_txt: this.watermark_txt,&#x2F;&#x2F;水印内容
                    watermark_y:80,&#x2F;&#x2F;水印y轴初始位置
                    watermark_y_space: 60,
                    watermark_fontsize: &quot;12px&quot;,
                    watermark_width: 60,
                    watermark_height: 60,
                  &#125;);
        &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p> 至此，所生成的水印可根据窗口的变化而覆盖整个窗口。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue.js实战：todolist待办项目</title>
    <url>/2022/11/05/Vue.js%E5%AE%9E%E6%88%98%EF%BC%9Atodolist%E5%BE%85%E5%8A%9E%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h1 id="初始化一个新项目"><a href="#初始化一个新项目" class="headerlink" title="初始化一个新项目"></a>初始化一个新项目</h1><ul>
<li><p>要初始化一个新项目，创建一个文件夹test作为项目目录，打开一个终端将切换路径到test，运行代码：</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">PS C:\Users\Administrator\Desktop\test&gt; vue create test

运行结果如下：
 Your connection to the default yarn registry seems to be slow.
   Use https:&#x2F;&#x2F;registry.npmmirror.com for faster installation? (Y&#x2F;n)输入Y回车
   Vue CLI v5.0.8
? Please pick a preset: (Use arrow keys)
&gt; Default ([Vue 3] babel, eslint)
  Default ([Vue 2] babel, eslint)
  Manually select features<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>使用方向键选择<code>“ Manually select features”</code>（手动选择）选项后按下键盘上的回车键继续。</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Vue CLI v5.0.8
? Please pick a preset: Manually select features
? Check the features needed for your project: (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection, and
&lt;enter&gt; to proceed)
&gt;(*) Babel
 ( ) TypeScript
 ( ) Progressive Web App (PWA) Support
 ( ) Router
 ( ) Vuex
 ( ) CSS Pre-processors
 (*) Linter &#x2F; Formatter
 ( ) Unit Testing
 ( ) E2E Testing<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>可以看到第一个菜单允许选择想要包含在项目中的功能，确保<code>“Babel”</code>和<code>“Linter / Formatter”</code>这两项是被选中的。若它们没有被选中，使用方向键切换，按空格键来选中它们，若它们被选中，按下回车键继续。</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Vue CLI v5.0.8
? Please pick a preset: Manually select features
? Check the features needed for your project: Babel, Linter
? Choose a version of Vue.js that you want to start the project with (Use arrow keys)
&gt; 3.x
  2.x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>接下来为选择Vue.js版本，使用方向键选中3.x选项后按下键盘上的回车键继续。</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Vue CLI v5.0.8
? Please pick a preset: Manually select features
? Check the features needed for your project: Babel, Linter
? Choose a version of Vue.js that you want to start the project with 3.x
? Pick a linter &#x2F; formatter config: (Use arrow keys)
&gt; ESLint with error prevention only
  ESLint + Airbnb config
  ESLint + Standard config
  ESLint + Prettier<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>接下来为<code>linter / formatter</code>选择一个配置，使用方向键选中<code>&quot;ESLint with error prevention only&quot;</code>选项后按下键盘上的回车键继续。这样可以辅助我们捕获常见的错误。</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Vue CLI v5.0.8
? Please pick a preset: Manually select features
? Check the features needed for your project: Babel, Linter
? Choose a version of Vue.js that you want to start the project with 3.x
? Pick a linter &#x2F; formatter config: Basic
? Pick additional lint features: (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection, and &lt;enter&gt; to
proceed)
&gt;(*) Lint on save
 ( ) Lint and fix on commit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>接下来选择需要哪种自动化的Lint，使用方向键选中<code>&quot;Lint on save&quot;</code>选项后按下键盘上的回车键继续。</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Vue CLI v5.0.8
? Please pick a preset: Manually select features
? Check the features needed for your project: Babel, Linter
? Choose a version of Vue.js that you want to start the project with 3.x
? Pick a linter &#x2F; formatter config: Basic
? Pick additional lint features: (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection, and &lt;enter&gt; to
proceed)
&gt;(*) Lint on save
 ( ) Lint and fix on commit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>接下来选择把配置文件放在哪里。<code>&quot;In dedicated config files&quot;</code>这个选项会把配置文件单独放在一个文件里，另一个选项<code>&quot;In package.json&quot;</code>会把配置文件放仅项目文件<code>package.json</code>里。选择<code>&quot;In dedicated config files&quot;</code>选项后按下键盘上的回车键继续。</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Vue CLI v5.0.8
? Please pick a preset: Manually select features
? Check the features needed for your project: Babel, Linter
? Choose a version of Vue.js that you want to start the project with 3.x
? Pick a linter &#x2F; formatter config: Basic
? Pick additional lint features: Lint on save
? Where do you prefer placing config for Babel, ESLint, etc.? (Use arrow keys)
&gt; In dedicated config files
  In package.json<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>最后选择是否把这次的选择作为未来的预设配置。输入<code>y</code>后按下键盘上的回车键后输入保存的配置名称。然后脚手架工具就开始构建项目，并且安装所需的依赖。</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Vue CLI v5.0.8
? Please pick a preset: Manually select features
? Check the features needed for your project: Babel, Linter
? Choose a version of Vue.js that you want to start the project with 3.x
? Pick a linter &#x2F; formatter config: Basic
? Pick additional lint features: Lint on save
? Where do you prefer placing config for Babel, ESLint, etc.? In dedicated config files
? Save this as a preset for future projects? (y&#x2F;N)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><p>如果前面的步骤都顺利执行的话，脚手架工具已经在项目中创建了一系列的文件和目录，其项目结构如下：</p>
<p><img src="/2022/11/05/Vue.js%E5%AE%9E%E6%88%98%EF%BC%9Atodolist%E5%BE%85%E5%8A%9E%E9%A1%B9%E7%9B%AE/1.png" alt></p>
<ul>
<li><p><code>eslintrc.js</code>：是<code>eslint</code>的配置文件，可以通过它来管理校验规则</p>
</li>
<li><p><code>babel.config.js</code>：是<code>Babel</code>的配置文件，可以在开发中使用JavaScript的新特性，并且将其转换为在生成环境中可以跨浏览器运行的旧语法代码，也可以在这里配置额外的babel插件</p>
</li>
<li><p><code>.browserslistrc</code>：是<code>Browserslist</code>的配置文件，可以通过它来控制需要对哪些浏览器进行支持和优化</p>
</li>
<li><p><code>public</code>：该目录包含一些在<code>Webpack</code>编译过程中没有架构处理过的文件（<code>index.html</code>除外）</p>
<ul>
<li><code>favicon.ico</code>：项目的图标，当前是一个Vue的logo</li>
<li><code>index.html</code>：应用模板文件，Vue应用会通过这个HTML页面来运行，也可以通过<code>lodash</code>这种模板语法在这个文件里插值</li>
</ul>
</li>
<li><p><code>src</code>：Vue应用的核心代码目录</p>
<ul>
<li><code>main.js</code>：应用的入口文件。目前它会初始化Vue应用并指定将应用挂载到index.html文件中的哪个HTML元素上。通常还会做一些注册全局组件或者添加额外的Vue库的操作</li>
<li><code>App.vue</code>：Vue应用的根节点组件</li>
<li><code>components</code>：用来存放自定义组件的目录，当前里面会有一个示例组件</li>
<li><code>assets</code>：用来存放如CSS、图片这类的静态资源，可以用<code>webpack</code>来操作和处理<br>根据创建项目时的配置项不同，可能会有一些其他的预设目录，比如选择了路由配置，会看到一个<code>views</code>文件夹。</li>
</ul>
</li>
</ul>
<h2 id="vue文件（单文件组件）"><a href="#vue文件（单文件组件）" class="headerlink" title=".vue文件（单文件组件）"></a><code>.vue</code>文件（单文件组件）</h2><p>组件是构建Vue应用中非常重要的一部分，其可以把一个很大的应用程序拆分为独立创建和管理的不相干区块，然后彼此按需传递数据。</p>
<p>在其他框架鼓励把模板、逻辑和样式的代码区分成不同文件时，Vue提倡使用单文件组件，把模板、相关脚本和CSS整合到一起放在<code>.vue</code>结尾的单文件中。这些文件最终会通过JS打包工具（如<code>Webpack</code>）处理。</p>
<p>使用Vue CLI创建的项目被配置为开箱即用的情况下，可以在CLI创建项目中的<code>src</code>文件夹里看到第一个<code>.vue</code>文件：<code>App.vue</code>。</p>
<h2 id="App-vue"><a href="#App-vue" class="headerlink" title="App.vue"></a><code>App.vue</code></h2><p>打开<code>App.vue</code>文件，可以看到有<code>&lt;template&gt;</code>、<code>&lt;script&gt;</code>和<code>&lt;style&gt;</code>三部分组成，分别包含了组件的模板、脚本和样式相关的内容。所有单文件组件内的结构都是这种类似的结构。</p>
<p><strong><code>&lt;tamplate&gt;</code>包含了所有的标记结构和组件的展示逻辑。tamplate可以包含任何合法的HTML以及Vue特点的语法。</strong>如通过设置<code>&lt;tamplate lang=&quot;pug&quot;&gt;</code>可以使用Pug模板来替代标准HTML。</p>
<p><strong><code>&lt;script&gt;</code>包含组件中所有的非显示逻辑，<code>&lt;script&gt;</code>标签默认导出一个JS对象。</strong>该对象用于在本地注册组件、定义属性、处理本地状态、定义方法等地方。在构建阶段这个包含<code>&lt;tamplate&gt;</code>的对象会被处理和转换成为一个有<code>render()</code>函数的Vue组件。</p>
<p>对于<code>App.vue</code>，默认导出将组件的名称设置为<code>app</code>，并通过将<code>HelloWorld</code>组件添加到<code>components</code>属性中来注册它。以这种方式注册组件时，意味着就是在本地注册，本地注册的组件只能在注册它们的组件内部使用，因此需要将其导入并注册到使用它们的每个组件文件中。</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> HelloWorld form <span class="token string">'./components/Helloworld.vue'</span>
    
<span class="token keyword">export</span> <span class="token keyword">default</span><span class="token punctuation">&#123;</span>
    name<span class="token operator">:</span><span class="token string">'app'</span><span class="token punctuation">,</span>
    components<span class="token operator">:</span><span class="token punctuation">&#123;</span>
        <span class="token comment">//在这里本地注册组件</span>
        HelloWorld
<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>若想要使用<code>TypeScript</code>语法，可以将<code>&lt;script&gt;</code>标签的<code>lang</code>属性设置为<code>&lt;script lang=&#39;ts&#39;&gt;</code>。</p>
<p>组件的CSS应写在<code>&lt;style&gt;</code>标签里，<strong>若添加了<code>&lt;scoped&gt;</code>属性（如<code>&lt;style scoped&gt;</code>)，Vue会把样式的范围显示在单文件组件的内容里。</strong>设置类似于CSS-in-JS的解决方案，只不过是允许书写纯粹的CSS。</p>
<p><strong>注意：</strong>若通过CLI创建项目是选择了CSS预处理器，则可以将<code>lang</code>属性添加到<code>&lt;style&gt;</code>标签中，以便<code>Webpack</code>可以在构建时处理内容。如<code>&lt;style lang=&quot;scss&quot;&gt;</code>将允许在样式信息中使用SCSS语法。</p>
<h2 id="本地运行程序"><a href="#本地运行程序" class="headerlink" title="本地运行程序"></a>本地运行程序</h2><p>Vue CLI带有内置的开发服务器，因此可以无需自己配置服务器便可在本地运行并测试应用程序。CLI会以npm脚本的形式将<code>serve</code>命令添加到项目的<code>package.json</code>文件中，因此可以轻松地运行它。</p>
<p>在终端中，切换到项目所在的路径，输入<code>npm run serve</code>或者<code>yarn run serve</code>即可运行服务器，此时的终端应输出以下类似的内容：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">PS C:\Users\Administrator\Desktop\test\test&gt; npm run serve

&gt; test@0.1.0 serve
&gt; vue-cli-service serve

 INFO  Starting development server...


 DONE  Compiled successfully in 1995ms                                                                          14:28:36


  App running at:
  - Local:   http:&#x2F;&#x2F;localhost:8080&#x2F;
  - Network: http:&#x2F;&#x2F;10.17.212.3:8080&#x2F;

  Note that the development build is not optimized.
  To create a production build, run yarn build.



 WAIT  Compiling...                                                                                             14:28:36

Compiling...


 DONE  Compiled successfully in 70ms                                                                            14:28:36


  App running at:
  - Local:   http:&#x2F;&#x2F;localhost:8080&#x2F;
  - Network: http:&#x2F;&#x2F;10.17.212.3:8080&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>若在浏览器中打开<code>http://localhost:8080/</code>或<code>http://10.17.212.3:8080/</code>，便可以看到应用程序。当前它应该包含欢迎信息、Vue文档的链接、使用CLI初始化应用程序时添加的插件链接，以及指向Vue社区和生态系统的其他有用链接。</p>
<p><img src="/2022/11/05/Vue.js%E5%AE%9E%E6%88%98%EF%BC%9Atodolist%E5%BE%85%E5%8A%9E%E9%A1%B9%E7%9B%AE/2.png" alt></p>
<h2 id="改动应用"><a href="#改动应用" class="headerlink" title="改动应用"></a>改动应用</h2><p>对应用做出第一步改动，删除Vue logo。打开<code>App.vue</code>文件，在template部分删除<code>&lt;img&gt;</code>元素</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Vue logo<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./assets/logo.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>服务器仍在正常运行时，可以看到logo是即时从之前渲染的页面中消失。接下来再把<code>HelloWorld</code>组件也删掉。</p>
<p>首先删除下面这一行：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> HelloWorld <span class="token keyword">from</span> <span class="token string">'./components/HelloWorld.vue'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>若这时候保存<code>App.vue</code>文件，渲染好的应用会因为找不到<code>HelloWorld</code>组件而抛出一个错误。</p>
<p>在<code>&lt;script&gt;</code>中将引入和注册组件的那几行删掉：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">components<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
  HelloWorld
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>此时渲染好的应用不再显示错误了，只有一个空页面。</p>
<p>接下来来创建一个任务清单的应用。打开<code>App.vue</code>文件，将下列代码删除：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>HelloWorld</span> <span class="token attr-name">msg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Welcome to Your Vue.js App<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>编写代码如下，在<code>&lt;div id=&quot;app&quot;&gt;</code>中新增一个<code>&lt;h1&gt;</code>标签，并将标题文案设为”To-Do List”：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;
  &lt;div id&#x3D;&quot;app&quot;&gt;
    &lt;h1&gt;To-Do List&lt;&#x2F;h1&gt;
  &lt;&#x2F;div&gt;
&lt;&#x2F;template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>此时服务器会展示<code>To-Do List</code>标题。</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>学习至此，我们已经为示例应用程序创建了一些脚手架，使其可以运行，检查并进行了一些初步更改。后续将进一步研究并构建示例应用程序。使之允许存储项目列表，完成后将其选中，并按所有、已完成和未完成待办事项来过滤。</p>
<h1 id="创建第一个Vue组件"><a href="#创建第一个Vue组件" class="headerlink" title="创建第一个Vue组件"></a>创建第一个Vue组件</h1><p>Vue组件是由管理应用程序数据的JavaScript对象和映射到基础DOM结构的基于HTML语法的模板语法组成的。接下来要创建一个组件来表示待办事项列表中的每一个项目。</p>
<h2 id="创建一个ToDoItem组件"><a href="#创建一个ToDoItem组件" class="headerlink" title="创建一个ToDoItem组件"></a>创建一个<code>ToDoItem</code>组件</h2><p><code>ToDoItem</code>组件将用来显示单一的待办事项，用它来建立待办事项列表。</p>
<ul>
<li><p>在<code>test/srx/components</code>目录下，创建一个<code>ToDoItem.vue</code>的新文件并打开</p>
</li>
<li><p>在文件顶部添加<code>&lt;template&gt;&lt;/template&gt;</code>部分来创建组件中的模板部分</p>
</li>
<li><p>在模板部分下面创建一个<code>&lt;script&gt;&lt;/script&gt;</code>部分。在<code>&lt;script&gt;</code>标签内，添加一个默认导出对象<code>export default&#123;&#125;</code>作为组件对象:</p>
  <pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt; &lt;&#x2F;template&gt;
&lt;script&gt;
    export default&#123;&#125;;
&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<p>现在加上为<code>ToDoItem</code>添加实际内容。Vue模板目前只允许一个根元素—一个元素需要包裹模板内的所有内容，因此要为该根元素使用一个<code>&lt;div&gt;</code>。</p>
<ul>
<li><p>在组件模板中添加一个空的<code>&lt;div&gt;</code></p>
</li>
<li><p>在<code>&lt;div&gt;</code>里添加一个<code>checkbox</code>和一个对应的<code>label</code>。给复选框添加一个<code>id</code>，并添加一个<code>for</code>属性，将复选框映射到标签上。</p>
  <pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;
    &lt;div&gt;
        &lt;input type&#x3D;&quot;checkbox&quot; id&#x3D;&quot;todo-item&quot; checked&#x3D;&quot;false&quot; &#x2F;&gt;
        &lt;label for&#x3D;&quot;todo-item&quot;&gt;My Todo Item&lt;&#x2F;label&gt;
    &lt;&#x2F;div&gt;
&lt;&#x2F;template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h2 id="在应用程序中使用TodoItem组件"><a href="#在应用程序中使用TodoItem组件" class="headerlink" title="在应用程序中使用TodoItem组件"></a>在应用程序中使用TodoItem组件</h2><p>​    </p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>前端</category>
        <category>前端框架</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Win10系统edge浏览器出现闪退的解决方法</title>
    <url>/2020/03/30/Win10%E7%B3%BB%E7%BB%9Fedge%E6%B5%8F%E8%A7%88%E5%99%A8%E5%87%BA%E7%8E%B0%E9%97%AA%E9%80%80%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="Win10系统edge浏览器出现闪退的解决方法"><a href="#Win10系统edge浏览器出现闪退的解决方法" class="headerlink" title="Win10系统edge浏览器出现闪退的解决方法"></a>Win10系统edge浏览器出现闪退的解决方法</h1><p>记一个Win10系统edge浏览器出现闪退的解决方法：</p>
<p>第一步：</p>
<p><strong>Win+R</strong> 呼出运行窗口，并在里面输入</p>
<p><code>%USERPROFILE%\AppData\Local\Packages</code>,点击确定按钮</p>
<p><img src="/2020/03/30/Win10%E7%B3%BB%E7%BB%9Fedge%E6%B5%8F%E8%A7%88%E5%99%A8%E5%87%BA%E7%8E%B0%E9%97%AA%E9%80%80%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/1.png" alt></p>
<p>这时可以看到打开了一个文件夹，找到</p>
<p><code>Microsoft.MicrosoftEdge_8wekyb3d8bbwe</code>文件夹，</p>
<p>右键 <strong>删除</strong></p>
<p><img src="/2020/03/30/Win10%E7%B3%BB%E7%BB%9Fedge%E6%B5%8F%E8%A7%88%E5%99%A8%E5%87%BA%E7%8E%B0%E9%97%AA%E9%80%80%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/2.png" alt></p>
<p>第二步：</p>
<p>返回桌面，在 <strong>搜索框</strong> 输入</p>
<p><code>PowerShell</code>搜索，并在搜索结果中选择 <strong>以管理员身份运行</strong> ,划重点 一定要以 <strong>管理员身份</strong><br>运行，如果直接打开出现的后果会在文章最后说明。</p>
<p><img src="/2020/03/30/Win10%E7%B3%BB%E7%BB%9Fedge%E6%B5%8F%E8%A7%88%E5%99%A8%E5%87%BA%E7%8E%B0%E9%97%AA%E9%80%80%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/3.png" alt></p>
<p>第三步：</p>
<p>在打开的<code>Windows PowerShell</code>窗口中输入命令<br><code>Get-AppXPackage -ALLUsers -Name Microsoft.MicrosoftEdge | Foreach &#123;Add-AppxPackage -DisableDevelopmentMode -Register&quot;$($_.InstallLocation)\AppXManifest.*&quot; -verbose&#125;</code><br>看到下图即成功。</p>
<p><img src="/2020/03/30/Win10%E7%B3%BB%E7%BB%9Fedge%E6%B5%8F%E8%A7%88%E5%99%A8%E5%87%BA%E7%8E%B0%E9%97%AA%E9%80%80%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/4.png" alt></p>
<p>当然，如果没出现黄字的提示，看到下面那行的命令行出来时，关闭<code>Windows PowerShell</code><br>窗口后，打开浏览器，出现下图的画面，即表明浏览器闪退问题已解决。</p>
<p><img src="/2020/03/30/Win10%E7%B3%BB%E7%BB%9Fedge%E6%B5%8F%E8%A7%88%E5%99%A8%E5%87%BA%E7%8E%B0%E9%97%AA%E9%80%80%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/5.png" alt></p>
<p>出现报错的情况有：</p>
<p>一、 <strong>Get-AppXPackage</strong> 拒绝访问</p>
<p><img src="/2020/03/30/Win10%E7%B3%BB%E7%BB%9Fedge%E6%B5%8F%E8%A7%88%E5%99%A8%E5%87%BA%E7%8E%B0%E9%97%AA%E9%80%80%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/6.png" alt></p>
<p> 2.Win10 <strong>防火墙</strong> 没有打开</p>
<p>此时应该检查标题栏中的标题是选择 Windows PowerShell 还是选择管理员：Windows PowerShell。如下图：</p>
<p><img src="/2020/03/30/Win10%E7%B3%BB%E7%BB%9Fedge%E6%B5%8F%E8%A7%88%E5%99%A8%E5%87%BA%E7%8E%B0%E9%97%AA%E9%80%80%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/7.png" alt></p>
<p><img src="/2020/03/30/Win10%E7%B3%BB%E7%BB%9Fedge%E6%B5%8F%E8%A7%88%E5%99%A8%E5%87%BA%E7%8E%B0%E9%97%AA%E9%80%80%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/8-1.png" alt></p>
<p>若没有管理员的字样，就是原因1，若已经是以管理员身份运行了，则去 <strong>控制面板</strong> 检查防火墙是否已经打开</p>
<p>检查 <strong>防火墙是否已经打开</strong> 步骤：</p>
<p>此电脑-右键选择属性-在路径栏点击控制面板</p>
<p><img src="/2020/03/30/Win10%E7%B3%BB%E7%BB%9Fedge%E6%B5%8F%E8%A7%88%E5%99%A8%E5%87%BA%E7%8E%B0%E9%97%AA%E9%80%80%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/8.png" alt></p>
<p>在查找方式处，选择大图标</p>
<p><img src="/2020/03/30/Win10%E7%B3%BB%E7%BB%9Fedge%E6%B5%8F%E8%A7%88%E5%99%A8%E5%87%BA%E7%8E%B0%E9%97%AA%E9%80%80%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/9.png" alt></p>
<p><img src="/2020/03/30/Win10%E7%B3%BB%E7%BB%9Fedge%E6%B5%8F%E8%A7%88%E5%99%A8%E5%87%BA%E7%8E%B0%E9%97%AA%E9%80%80%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/10.png" alt></p>
<p>单击Windows Defender 防火墙，若看到下图的情形，则是没有打开防火墙，</p>
<p><img src="/2020/03/30/Win10%E7%B3%BB%E7%BB%9Fedge%E6%B5%8F%E8%A7%88%E5%99%A8%E5%87%BA%E7%8E%B0%E9%97%AA%E9%80%80%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/11.png" alt></p>
<p>此时点击使用推荐配置即可</p>
<p>二、按照所有步骤都执行了，但是浏览器还是闪退</p>
<p>莫慌，来看看你的命令输入是不是和下图的很像？</p>
<p>报错语句截图：</p>
<p><img src="/2020/03/30/Win10%E7%B3%BB%E7%BB%9Fedge%E6%B5%8F%E8%A7%88%E5%99%A8%E5%87%BA%E7%8E%B0%E9%97%AA%E9%80%80%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/12.png" alt></p>
<p><img src="/2020/03/30/Win10%E7%B3%BB%E7%BB%9Fedge%E6%B5%8F%E8%A7%88%E5%99%A8%E5%87%BA%E7%8E%B0%E9%97%AA%E9%80%80%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/13.png" alt></p>
<p>看看你输入的双引号是中文的“”，还是英文的””？看看你的命令语句中的黄字部分与解决方法步骤中的黄字部分是否一致？是不是多打了一个空格？</p>
<p>解决方法：直接解决步骤的第三步复制粘贴命令即可</p>
]]></content>
      <categories>
        <category>edge</category>
      </categories>
      <tags>
        <tag>闪退</tag>
      </tags>
  </entry>
  <entry>
    <title>docker-compose一键部署Elasticsearch Logstash Kibana</title>
    <url>/2023/03/07/docker-compose%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2Elasticsearch%20Logstash%20elasticsearch-head/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>在使用Elasticsearch进行全文搜索时，会使用到Elasticsearch（搜索引擎）、Logstash（数据同步）、Kibana（数据可视化）这三个中间件。在开发或测试环境中部署项目时，常使用docker-compose一键部署项目所需的环境，因此本文记录使用docker-compose一键部署Elasticsearch、Logstash和Kibana的过程。</p>
<h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><h2 id="端口说明"><a href="#端口说明" class="headerlink" title="端口说明"></a>端口说明</h2><ul>
<li>Elasticsearch：9200（HTTP通信）和9300（TCP通信）</li>
<li>Logstash：5044和9600（TCP通信）</li>
<li>Kibana：5601</li>
</ul>
<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><h3 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a><code>docker-compose.yml</code></h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">version: &#39;3&#39;
services:
  elasticsearch:
    image: docker.elastic.co&#x2F;elasticsearch&#x2F;elasticsearch:7.16.2
    container_name: elasticsearch_server
    restart: unless-stopped
    environment:
      - discovery.type&#x3D;single-node
      - discovery.zen.minimum_master_nodes&#x3D;1
      - ES_JAVA_OPTS&#x3D;-Xms3g -Xmx3g
    volumes:
      - &quot;&#x2F;home&#x2F;docker_data&#x2F;myproj&#x2F;elasticsearch&#x2F;data:&#x2F;data&quot;
    ports:
      - 9200:9200
      - 9300:9300 
    networks:
      default:     # 指定使用的网络
      common:
        aliases:
          - elasticsearch     # 该容器的别名，在 elk_net 网络中的其他容器可以通过别名 elasticsearch 来访问到该容器

  kibana:
    image: docker.elastic.co&#x2F;kibana&#x2F;kibana:7.16.2
    depends_on:
      - elasticsearch    
    container_name: kibana_server
    restart: unless-stopped    
    environment:
      - ELASTICSEARCH_URL&#x3D;http:&#x2F;&#x2F;elasticsearch:9200
      - SERVER_NAME&#x3D;kibana    
    # 如需具体配置，可以创建.&#x2F;config&#x2F;kibana.yml，并映射
    volumes:
      - &quot;&#x2F;home&#x2F;docker_data&#x2F;myproj&#x2F;config&#x2F;kibana.yml:&#x2F;config&#x2F;kibana.yml&quot;      
    ports:
      - &quot;5601:5601&quot;
    networks:
      default:
      common:
        aliases:
          - kibana

  logstash:
    image: docker.elastic.co&#x2F;logstash&#x2F;logstash:7.16.2
    depends_on:
      - elasticsearch    
    container_name: logstash_server
    restart: unless-stopped 
    environment:
      - LS_JAVA_OPTS&#x3D;-Xmx256m -Xms256m
    volumes:
      - &quot;&#x2F;home&#x2F;docker_data&#x2F;myproj&#x2F;config&#x2F;logstash.conf:&#x2F;config&#x2F;logstash.conf&quot;      
    networks:
      default:
      common:
        aliases:
          - logstash

    entrypoint:
      - logstash
      - -f
      - &#x2F;config&#x2F;logstash.conf
    logging:
      driver: &quot;json-file&quot;
      options:
        max-size: &quot;200m&quot;
        max-file: &quot;3&quot;

networks:
 common:
  external:
   name: nginx-bridge
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="elasticsearch-yml"><a href="#elasticsearch-yml" class="headerlink" title="elasticsearch.yml"></a><code>elasticsearch.yml</code></h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">cluster.name: &quot;es-server&quot;
network.host: 0.0.0.0
http.cors.enabled: true
http.cors.allow-origin: &quot;*&quot;
http.cors.allow-headers: Authorization
xpack.security.enabled: true
xpack.security.transport.ssl.enabled: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="kibana-yml"><a href="#kibana-yml" class="headerlink" title="kibana.yml"></a><code>kibana.yml</code></h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">server.host: &quot;0.0.0.0&quot;
server.shutdownTimeout: &quot;5s&quot;
elasticsearch.hosts: [ &quot;http:&#x2F;&#x2F;elasticsearch:9200&quot; ]
monitoring.ui.container.elasticsearch.enabled: true
elasticsearch.username: &quot;elastic&quot;
elasticsearch.password: &quot;123456&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="logstash-yml"><a href="#logstash-yml" class="headerlink" title="logstash.yml"></a><code>logstash.yml</code></h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">http.host: &quot;0.0.0.0&quot;
xpack.monitoring.elasticsearch.hosts: [ &quot;http:&#x2F;&#x2F;elasticsearch:9200&quot; ]
xpack.monitoring.enabled: true
xpack.monitoring.elasticsearch.username: logstash_system
xpack.monitoring.elasticsearch.password: 123456<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="logstash-conf"><a href="#logstash-conf" class="headerlink" title="logstash.conf"></a><code>logstash.conf</code></h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">input &#123;
    stdin &#123;
    &#125;
    jdbc &#123;
      # 数据库连接地址
      jdbc_connection_string &#x3D;&gt; &quot;jdbc:postgresql:&#x2F;&#x2F;127.0.0.1:5432&#x2F;postgres&quot;
      # 数据库连接账号密码：
      jdbc_user &#x3D;&gt; &quot;postgres&quot;
      jdbc_password &#x3D;&gt; &quot;123456&quot;
      # Pg依赖包路径
      jdbc_driver_library &#x3D;&gt; &quot;pgsql\postgresql-42.5.1.jar&quot;
      jdbc_driver_class &#x3D;&gt; &quot;org.postgresql.Driver&quot;
      # 开启分页查询，默认为false
      jdbc_paging_enabled &#x3D;&gt; &quot;true&quot;
      # 单次分页查询条数（默认100000，若字段较多且更新频率较高，则建议调低此值）
      jdbc_page_size &#x3D;&gt; &quot;300000&quot;
      use_column_value &#x3D;&gt; &quot;true&quot;
      tracking_column &#x3D;&gt; &quot;id&quot; #根据id字段更新
      # statement为查询数据sql，若sql较复杂，建议通过statement_filepath 配置sql文件的存放路径；
      # statement &#x3D;&gt; &quot;SELECT * FROM public.SystemName&quot;
      statement_filepath &#x3D;&gt; &quot;pgsql\logstash-pgsql1.sql&quot;  #这是要操作的sql 表，下面会提供
          # 同步频率（分时天月年），全*默认为每分钟同步一次。现设置每天凌晨4点执行
          schedule &#x3D;&gt; &quot;* 4 * * *&quot;
          # 多表同步时，表类型区分，建议命名为“库名_表名”，每个jdbc模块需对应一个type；
          type &#x3D;&gt; &quot;postgres_SystemName&quot;
          jdbc_default_timezone &#x3D;&gt;&quot;Asia&#x2F;Shanghai&quot;
    &#125;
    jdbc &#123;
      # 数据库连接地址
      jdbc_connection_string &#x3D;&gt; &quot;jdbc:postgresql:&#x2F;&#x2F;127.0.0.1:5432&#x2F;postgres&quot;
      # 数据库连接账号密码：
      jdbc_user &#x3D;&gt; &quot;postgres&quot;
      jdbc_password &#x3D;&gt; &quot;123456&quot;
      # Pg依赖包路径
      jdbc_driver_library &#x3D;&gt; &quot;pgsql\postgresql-42.5.1.jar&quot;
      jdbc_driver_class &#x3D;&gt; &quot;org.postgresql.Driver&quot;
      # 开启分页查询，默认为false
      jdbc_paging_enabled &#x3D;&gt; &quot;true&quot;
      # 单次分页查询条数（默认100000，若字段较多且更新频率较高，则建议调低此值）
      jdbc_page_size &#x3D;&gt; &quot;300000&quot;
      use_column_value &#x3D;&gt; &quot;true&quot;
      tracking_column &#x3D;&gt; &quot;id&quot; #根据id字段更新
      # statement为查询数据sql，若sql较复杂，建议通过statement_filepath 配置sql文件的存放路径；
      # statement &#x3D;&gt; &quot;SELECT * FROM public.&quot;SystemDetail&quot;&quot;
      statement_filepath &#x3D;&gt; &quot;pgsql\logstash-pgsql2.sql&quot;  #这是要操作的sql 表，下面会提供
          # 同步频率（分时天月年），默认为每分钟同步一次
          schedule &#x3D;&gt; &quot;* 4 * * *&quot;
          # 多表同步时，表类型区分，建议命名为“库名_表名”，每个jdbc模块需对应一个type；
          type &#x3D;&gt; &quot;postgres_SystemDetail&quot;
          jdbc_default_timezone &#x3D;&gt;&quot;Asia&#x2F;Shanghai&quot;
    &#125;
    jdbc &#123;
      # 数据库连接地址
      jdbc_connection_string &#x3D;&gt; &quot;jdbc:postgresql:&#x2F;&#x2F;127.0.0.1:5432&#x2F;postgres&quot;
      # 数据库连接账号密码：
      jdbc_user &#x3D;&gt; &quot;postgres&quot;
      jdbc_password &#x3D;&gt; &quot;123456&quot;
      # Pg依赖包路径
      jdbc_driver_library &#x3D;&gt; &quot;pgsql\postgresql-42.5.1.jar&quot;
      jdbc_driver_class &#x3D;&gt; &quot;org.postgresql.Driver&quot;
      # 开启分页查询，默认为false
      jdbc_paging_enabled &#x3D;&gt; &quot;true&quot;
      # 单次分页查询条数（默认100000，若字段较多且更新频率较高，则建议调低此值）
      jdbc_page_size &#x3D;&gt; &quot;300000&quot;
      use_column_value &#x3D;&gt; &quot;true&quot;
      tracking_column &#x3D;&gt; &quot;id&quot; #根据id字段更新
      # statement为查询数据sql，若sql较复杂，建议通过statement_filepath 配置sql文件的存放路径；
      # statement &#x3D;&gt; &quot;SELECT * FROM public.&quot;ProblemList&quot;&quot;
      statement_filepath &#x3D;&gt; &quot;pgsql\logstash-pgsql3.sql&quot;  #这是要操作的sql 表，下面会提供
          # 同步频率（分时天月年），默认为每分钟同步一次
          schedule &#x3D;&gt; &quot;* 4 * * *&quot;
          # 多表同步时，表类型区分，建议命名为“库名_表名”，每个jdbc模块需对应一个type；
          type &#x3D;&gt; &quot;postgres_ProblemList&quot;
          jdbc_default_timezone &#x3D;&gt;&quot;Asia&#x2F;Shanghai&quot;
    &#125;
&#125;
filter &#123;
    json &#123;
        source &#x3D;&gt; &quot;message&quot;
        remove_field &#x3D;&gt; [&quot;message&quot;]
    &#125;
&#125;
output &#123;
    # output模块的type需和jdbc模块的type一致
    if [type] &#x3D;&#x3D; &quot;postgres_SystemName&quot;&#123;
        elasticsearch &#123;
            # 配置es集群的地址
            hosts &#x3D;&gt; [&quot;localhost:9200&quot;]
            # 索引名称，必须小写
            index &#x3D;&gt; &quot;test&quot;
            # 模板地址
                  template &#x3D;&gt; &quot;pgsql\es-template.json&quot;   #es 索引模板，可不定义
                  template_name &#x3D;&gt; &quot;t-statistic-out-logstash&quot;
                  template_overwrite &#x3D;&gt; true
                  document_type &#x3D;&gt; &quot;text&quot;
            # 数据唯一索引
            document_id &#x3D;&gt; &quot;%&#123;id&#125;&quot;
        &#125;
    &#125;
    if [type] &#x3D;&#x3D; &quot;postgres_SystemDetail&quot;&#123;
        elasticsearch &#123;
            # 配置es集群的地址
            hosts &#x3D;&gt; [&quot;localhost:9200&quot;]
            # 索引名称，必须小写
            index &#x3D;&gt; &quot;test&quot;
            # 模板地址
                  template &#x3D;&gt; &quot;pgsql\es-template.json&quot;   #es 索引模板，可不定义
                  template_name &#x3D;&gt; &quot;t-statistic-out-logstash&quot;
                  template_overwrite &#x3D;&gt; true
                  document_type &#x3D;&gt; &quot;text&quot;
            # 数据唯一索引
            document_id &#x3D;&gt; &quot;%&#123;id&#125;&quot;
        &#125;
    &#125;
    if [type] &#x3D;&#x3D; &quot;postgres_ProblemList&quot;&#123;
        elasticsearch &#123;
            # 配置es集群的地址
            hosts &#x3D;&gt; [&quot;localhost:9200&quot;]
            # 索引名称，必须小写
            index &#x3D;&gt; &quot;test&quot;
            # 模板地址
                  template &#x3D;&gt; &quot;pgsql\es-template.json&quot;   #es 索引模板，可不定义
                  template_name &#x3D;&gt; &quot;t-statistic-out-logstash&quot;
                  template_overwrite &#x3D;&gt; true
                  document_type &#x3D;&gt; &quot;text&quot;
            # 数据唯一索引
            document_id &#x3D;&gt; &quot;%&#123;id&#125;&quot;
        &#125;
    &#125;
    stdout &#123;
        codec &#x3D;&gt; json_lines
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="设置-amp-配置密码"><a href="#设置-amp-配置密码" class="headerlink" title="设置&amp;配置密码"></a>设置&amp;配置密码</h2><h3 id="elasticsearch"><a href="#elasticsearch" class="headerlink" title="elasticsearch"></a>elasticsearch</h3><p>使用上述配置创建容器后，进入容器中执行以下命令，可配置elastic、kibana、logstash_system等账号的密码：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">elasticsearch-setup-passwords interactive<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>设置完成后，登录kibana的账号名是kibana，elasticsearch的账户名为elastic。</p>
<h1 id="一键部署"><a href="#一键部署" class="headerlink" title="一键部署"></a>一键部署</h1><p>梳理好部署目录并创建好对应文件后，执行以下命令启动容器<code>docker-compose up -d</code>。</p>
<p>在内网使用Elasticsearch、Logstash时，可以不设置密码，但kibana需要设置。</p>
]]></content>
      <categories>
        <category>Docker</category>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>应用部署</tag>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>YAML与Redis的基本运用</title>
    <url>/2022/12/16/YAML%E4%B8%8ERedis%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%94%A8/</url>
    <content><![CDATA[<h1 id="YAML"><a href="#YAML" class="headerlink" title="YAML"></a>YAML</h1><p>YAML是一种<strong>数据序列化语言</strong>而不是标记语言，其语法比较简洁直观，特点是使用空格来表达层次结构，其最大的优势是在数据结构的表达上，且能配合大多数编程语言使用，因此YAML更多应用于配置文件的编写，其文件一般以<code>.yml</code>为后缀。</p>
<p>由于其语法的特殊性，没有编辑器可能容易写错，因而在此推荐一个无广告的yaml在线格式化网站：<a href="http://nodeca.github.io/js-yaml/">JS-YAML</a>，其可以直接将yaml转化为json。</p>
<h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><ul>
<li>YAML对大小写敏感</li>
<li>YAML用<code>#</code>表示注释，且<strong>只支持单行注释</strong></li>
<li><p>用缩进表示层级关系</p>
<ul>
<li><strong>缩进只能使用空格</strong>，不能用TAB字符</li>
<li>缩进的空格数量不做要求，但要求<strong>同一层级的元素左侧必须对齐</strong></li>
</ul>
</li>
<li><p>一个文件中可以包含多个文件的内容</p>
<ul>
<li><p>用三个破折号<code>&quot;---&quot;</code>表示一份内容的开始</p>
</li>
<li><p>用三个小数点<code>&quot;...&quot;</code>表示一份内容的结束（非强制）</p>
  <pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">---
# 这是第一份内容
one:1
# 其他内容
...

---
# 这是第二份内容
two:2
# 其他内容

# 第一份内容转换结果如下：
# &#39;one:1&#39;
# 第二份内容转换结果如下：
# &#39;two:2&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
</li>
</ul>
<h2 id="数据结构与类型"><a href="#数据结构与类型" class="headerlink" title="数据结构与类型"></a>数据结构与类型</h2><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p>用来表示以键值对（key:value）形式出现的数据。</p>
<ul>
<li><p>使用“冒号+空格”来分开键与值，对应JSON中的<code>&quot;key&quot;：&quot;value&quot;</code></p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">#yaml
key:value

# 内容转换结果如下： 
# &#39;key:value&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>支持多层嵌套（<strong>用缩进表示层级关系</strong>）</p>
  <pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">key:
  child-key1:value1
  child-key2:value2
  
# 内容转换结果如下：  
# &#123; key: &#39;child-key1:value1 child-key2:value2&#39; &#125;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>支持用<strong>花括号包裹，逗号加空格分隔</strong>的流式风格语法：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">key:&#123; child-key1:value1, child-key2:value2 &#125;

# 内容转换结果如下： 
# &#39;key:&#123; child-key1:value1, child-key2:value2 &#125;&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>用<strong>问号声明一个复杂对象</strong>，且允许使用多个词汇（数组）来组成键：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">?
  - keypart1
  - keypart2
:
  - value1
  - value2
  
# 内容转换结果如下：
# &#123; &#39;keypart1,keypart2&#39;: [ &#39;value1&#39;, &#39;value2&#39; ] &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><ul>
<li><p>一组以<strong>破折号+空格</strong>的区块形式为开头的数据便组成了一个数组：</p>
  <pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">values:
  - value1
  - value2
  - value3
  
# 内容转换结果如下：
# &#123; values: [ &#39;value1&#39;, &#39;value2&#39;, &#39;value3&#39; ] &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>与此同时也支持<strong>用方括号包裹、逗号加空格分隔</strong>的内联格式来表达</p>
  <pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">values:[value1, value2, value3]

# 内容转换结果如下：
# &#39;values:[value1, value2, value3]&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>支持多为数组（用缩进表示层级关系）</p>
  <pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">values:
  -
    - value1
    - value2
  -
    - value3
    - value4
    
# 内容转换结果如下：
# &#123; values: [ [ &#39;value1&#39;, &#39;value2&#39; ], [ &#39;value3&#39;, &#39;value4&#39; ] ] &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h3 id="标量"><a href="#标量" class="headerlink" title="标量"></a>标量</h3><p>表示YAML中最基本的数据类型</p>
<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><ul>
<li><p>字符串一般不需要引号包裹，但是如果字符串中使用了反斜杠<code>&quot;\&quot;</code>开头的转义字符就必须使用引号包裹</p>
  <pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">strings:
  - Hello without quote # 不用引号包裹
  - Hello
   world #拆成多行后会自动在中间添加空格
  - &#39;Hello with single quotes&#39; # 单引号包裹
  - &quot;Hello with double quotes&quot; # 双引号包裹
  - &quot;I am fine. \u263A&quot; # 使用双引号包裹时支持Unicode编码
  - &quot;\x0d\x0a is \r\n&quot; # 使用双引号包裹时还支持Hex编码
  - &#39;He said: &quot;Hello!&quot;&#39; # 单双引号支持嵌套

# 内容转换结果如下：  
# &#123; strings: 
#    [ &#39;Hello without quote&#39;,
#      &#39;Hello world&#39;,
#      &#39;Hello with single quotes&#39;,
#      &#39;Hello with double quotes&#39;,
#      &#39;I am fine. ☺&#39;,
#      &#39;\r\n is \r\n&#39;,
#      &#39;He said: &quot;Hello!&quot;&#39; ] &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>对于多行的文字，YAML提供了两种特殊的语法支持</p>
</li>
<li><p>保留换行</p>
<ul>
<li><p>使用竖线符<code>&quot;|&quot;</code>来表示该语法，每行的缩进和行尾空白都会被去掉，而额外的缩进会被保留</p>
  <pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">lines: |
  我是第一行
  我是第二行
    我是第三行
      我是第四行
  我是第五行  

# 内容转换结果如下：  
# &#123; lines: &#39;我是第一行\n我是第二行\n  我是第三行\n    我是第四行\n我是第五行 \n&#39; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
</li>
<li><p>折叠换行</p>
<ul>
<li><p>使用右尖括号<code>&quot;&gt;&quot;</code>来表示该语法，只有空白行才会被识别为换行，原来的换行符都会被转换成空格</p>
  <pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">lines: &gt;
  我是第一行
  我也是第一行
  我还是第一行
  我仍然是第一行
  
  我是第二行
  我也是第二行
  
# 内容转换结果如下：  
# &#123; lines: &#39;我是第一行 我也是第一行 我还是第一行 我仍然是第一行\n我是第二行 我也是第二行\n&#39; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
</li>
</ul>
<h3 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h3><ul>
<li><p>“true”、”True”、”TRUE”、”yes”、”Yes”和“YES”皆为<strong>真</strong></p>
</li>
<li><p>“false”、”False”、”FALSE”、”no”、”No”和“NO”皆为<strong>假</strong></p>
  <pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">boolean:
  - true # True、TRUE
  - yes # Yes、YES
  - false # False、FALSE
  - no # No、NO
  
# 内容转换结果如下：
# &#123; boolean: [ true, &#39;yes&#39;, false, &#39;no&#39; ] &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h3 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h3><ul>
<li><p>支持二进制表示</p>
  <pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">int:
  - 666
  - 0001_0000 #二进制表示
  
# 内容转换结果如下：
# &#123; int: [ 666, 10000 ] &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h3 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h3><ul>
<li><p>支持科学计数法</p>
  <pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">float:
  - 3.14
  - 6.8523015e+5 # 使用科学计数法
  
# 内容转换结果如下：
# &#123; float: [ 3.14, 685230.15 ] &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h3 id="空值（Null）"><a href="#空值（Null）" class="headerlink" title="空值（Null）"></a>空值（Null）</h3><ul>
<li><p>“null”、”Null”和”~”都是空，不指定值默认也是空</p>
  <pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">nulls:
  - null
  - Null
  - ~
  -

# 内容转换结果如下：
# &#123; nulls: [ null, null, null, null ] &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h3 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a>时间戳</h3><ul>
<li><p>YAML也支持ISO 8601格式的时间数据</p>
  <pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">date1: 2020-05-26
date2: 2020-05-26T01:00:00+08:00
date3: 2020-05-26T02:00:00.10+08:00
date4: 2020-05-26 03:00:00.10 +8

# 内容转换结果如下：
# &#123; date1: Tue May 26 2020 08:00:00 GMT+0800 (中国标准时间),
#   date2: Tue May 26 2020 01:00:00 GMT+0800 (中国标准时间),
#   date3: Tue May 26 2020 02:00:00 GMT+0800 (中国标准时间),
#   date4: Tue May 26 2020 03:00:00 GMT+0800 (中国标准时间) &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><ul>
<li><p>YAML支持使用严格类型标签的双感叹号+目标类型形式，即（”<code>!!</code>“）来强制转换类型</p>
  <pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">a: !!float &#39;666&#39;
b: &#39;666&#39;
c: !!str 666
d: !!str 666.66
e: !!str true
f: !!str yes

# 内容转换结果如下：
# &#123; a: 666, b: &#39;666&#39;, c: &#39;666&#39;, d: &#39;666.66&#39;, e: &#39;true&#39;, f: &#39;yes&#39; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h3 id="其他高级类型"><a href="#其他高级类型" class="headerlink" title="其他高级类型"></a>其他高级类型</h3><p>YAML也可以使用更高级的类型，但不一定兼容所有解析器，包括集合、有序映射、十六进制数据和二进制数据等</p>
<h3 id="数据重用与合并"><a href="#数据重用与合并" class="headerlink" title="数据重用与合并"></a>数据重用与合并</h3><ul>
<li><p>为了避免过多重复的定义，YAML提供了由锚点标签<code>&quot;&amp;&quot;</code>和引用标签<code>&quot;*&quot;</code>组成的语法，凭借此可以快速引用一些相同的数据</p>
  <pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">a: &amp;anchor #设置锚点
  one: 1
  two: 2
  three: 3
b: *anchor #引用锚点 

# 内容转换结果如下：
# &#123; a: &#123; one: 1, two: 2, three: 3 &#125;,
#   b: &#123; one: 1, two: 2, three: 3 &#125; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>配合合并标签<code>&quot;&lt;&lt;&quot;</code>使用可以与任意数据进行合并，以此实现类似于C++中继承的功能</p>
  <pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">human: &amp;base # 添加名为base的锚点
    body: 1
    hair: 999
singer:
    &lt;&lt;: *base # 引用base锚点，实例化时会自动展开
    skill: sing # 添加额外的属性
programer:
    &lt;&lt;: *base # 引用base锚点，实例化时会自动展开
    hair: 6 # 复写base中的属性
    skill: code # 添加额外的属性  

# 内容转换结果如下：
# &#123; human: &#123; body: 1, hair: 999 &#125;,
#   singer: &#123; body: 1, hair: 999, skill: &#39;sing&#39; &#125;,
#   programer: &#123; body: 1, hair: 6, skill: &#39;code&#39; &#125; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><p>Redis是一个用C语言编写的、开源的、基于内存运行并支持持久化的、高性能的NoSQL数据库，具有支持数据持久化、支持多种数据结构、支持数据备份等特点，通常被称为数据结构服务器。</p>
<p>NoSQL数据库泛指非关系型数据库，其去掉了关系数据库的关系型特性，是为了解决大规模数据集合多重数据种类带来的问题而生。</p>
<h2 id="Windows安装"><a href="#Windows安装" class="headerlink" title="Windows安装"></a>Windows安装</h2><p>Redis下载地址：<a href="https://github.com/microsoftarchive/redis/releases">点击前往</a></p>
<p>打开上述的下载地址后，可以在网页下方的Assets处看到目前支持的版本，找到最新的版本下载安装即可。</p>
<p>注：msi格式的为Windows的安装文件，双击即可进行安装，而zip包和tar.gz包则需要先解压再安装。</p>
<p>安装好后，需要<strong>着重关注</strong>以下几个文件：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>文件名</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>redis.windows.conf</td>
<td>Redis 运行的配置文件。</td>
</tr>
<tr>
<td>redis-benchmark.exe</td>
<td>Redis 性能测试的工具。</td>
</tr>
<tr>
<td>redis-check-aof.exe</td>
<td>Redis 的 aof 文件修复的工具。</td>
</tr>
<tr>
<td>redis-check-dump.exe</td>
<td>Redis 的 rdb 文件修复的工具。</td>
</tr>
<tr>
<td>redis-cli.exe</td>
<td>Redis 的客户端。</td>
</tr>
<tr>
<td>redis-server.exe</td>
<td>Redis 的服务端。</td>
</tr>
</tbody>
</table>
</div>
<ul>
<li><h2 id="Redis数据类型"><a href="#Redis数据类型" class="headerlink" title="Redis数据类型"></a>Redis数据类型</h2></li>
</ul>
<p>Redis支持五种数据类型：string（字符串）、hash（哈希）、list（列表）、set（集合）及zset（有序集合）。</p>
<h3 id="String类型"><a href="#String类型" class="headerlink" title="String类型"></a>String类型</h3><p>string是Redis最基本的类型，一个key对应一个value（即键值对）。Redis的string可以包含任何数据，如jpg图片或序列化图像等，其一个键最大可以存储512MB的数据。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#设置website值
127.0.0.1:6379&gt; set website tangmenjue.top
OK

#获取website值
127.0.0.1:6379&gt; get website
&quot;tangmenjue.top&quot;

#删除website值
127.0.0.1:6379&gt; del website
(integer) 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="Hash类型"><a href="#Hash类型" class="headerlink" title="Hash类型"></a>Hash类型</h3><p>hash是一个键值对集合，其是一个string类型的field和value的映射表，适合用于存储对象，每个hash可以存储 4294967295个键值对。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#设置一个对象webinfo，它的键webname对应的值为tangmenjue，键weburl对应的值为tangmenjue.top，webtype对应的类型为it
127.0.0.1:6379&gt; hmset webinfo webname tangmenjue  weburl tangmenjue.top  webtype it
OK

#获取webinfo对象中，weburl、webname、webtype的键值
127.0.0.1:6379&gt; hmget webinfo weburl webname webtype
1) &quot;tangmenjue.top&quot;
2) &quot;tangmenjue&quot;
3) &quot;it&quot;

#删除对象webinfo
127.0.0.1:6379&gt; del webinfo
(integer) 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="List类型"><a href="#List类型" class="headerlink" title="List类型"></a>List类型</h3><p>Redis的list类型是简单的字符串列表，按照插入顺序排序，可以添加一个元素到列表的左边或右边。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#向列表tangmenjue.top里添加Redis、Vue 和Pgsql3个元素
127.0.0.1:6379&gt; lpush tangmenjue.top Redis Vue Pgsql
(integer) 3

#获取列表tangmenjue.top的下标从0到3的数据
127.0.0.1:6379&gt; lrange tangmenjue.top 0 3
1) &quot;Pgsql&quot;
2) &quot;Vue&quot;
3) &quot;Redis&quot;

#删除值
127.0.0.1:6379&gt; del tangmenjue.top
(integer) 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="Set类型"><a href="#Set类型" class="headerlink" title="Set类型"></a>Set类型</h3><p>Redis的Set是string类型的无序集合，集合是通过哈希表来实现的，因此添加、删除、查找的复杂度都是O(1)。每个集合中最大可存储4294967295个成员。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#向集合tangmenjue.top添加Redis、Vue 和Pgsql3个元素
127.0.0.1:6379&gt; sadd tangmenjue.top Redis Vue Pgsql
(integer) 3

#继续向集合tangmenjue.top添加元素Sqlserver，此时返回1表示成功
127.0.0.1:6379&gt; sadd tangmenjue.top Sqlserver
(integer) 1

#继续向集合tangmenjue.top添加元素Redis，此时返回0表示失败。因为集合中已有Redis，不可重复插入
127.0.0.1:6379&gt; sadd tangmenjue.top Redis
(integer) 0

#获取集合tangmenjue.top的所有元素
127.0.0.1:6379&gt; smembers tangmenjue.top
1) &quot;Pgsql&quot;
2) &quot;Sqlserver&quot;
3) &quot;Vue&quot;
4) &quot;Redis&quot;

#删除集合tangmenjue.top
127.0.0.1:6379&gt; del tangmenjue.top
(integer) 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="ZSet类型"><a href="#ZSet类型" class="headerlink" title="ZSet类型"></a>ZSet类型</h3><p>zset和set一样也是string类型元素的集合且不允许成员重复。</p>
<p>与set不同的是，每个元素都会关联一个double类型的分数，通过这个分数来为集合中的成员按从大到小进行排序。zset成员是唯一的，但分数（score）是可以重复的。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#向有序集合tangmenjue.top添加分数为0的Redis值
127.0.0.1:6379&gt; zadd tangmenjue.top 0 Redis
(integer) 1

#向有序集合tangmenjue.top添加分数为1的Vue值
127.0.0.1:6379&gt; zadd tangmenjue.top 1 Vue
(integer) 1

#向有序集合tangmenjue.top添加分数为2的Pgsql值和分数为3的Sqlserver值
127.0.0.1:6379&gt; zadd tangmenjue.top 2 Pgsql 3 Sqlserver
(integer) 2

#获取有序集合tangmenjue.top的所有数据，并打印出分数
127.0.0.1:6379&gt; zrange tangmenjue.top 0 -1 withscores
1) &quot;Redis&quot;
2) &quot;0&quot;
3) &quot;Vue&quot;
4) &quot;1&quot;
5) &quot;Pgsql&quot;
6) &quot;2&quot;
7) &quot;Sqlserver&quot;
8) &quot;3&quot;

#删除有序集合tangmenjue.top
127.0.0.1:6379&gt; del tangmenjue.top
(integer) 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="连接本地Redis"><a href="#连接本地Redis" class="headerlink" title="连接本地Redis"></a>连接本地Redis</h2><p>进入到Redis所在目录，在地址栏输入cmd，此时会在当前目录打开命令行窗口，如下图所示：</p>
<p><img src="/2022/12/16/YAML%E4%B8%8ERedis%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%94%A8/1.png" alt></p>
<ul>
<li><p>在命令行中输入以下命令后回车，启动redis server客户端:</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">E:\Redis&gt;redis-server.exe
[4524] 16 Dec 11:48:29.399 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo
[4524] 16 Dec 11:48:29.399 # Redis version&#x3D;5.0.14.1, bits&#x3D;64, commit&#x3D;ec77f72d, modified&#x3D;0, pid&#x3D;4524, just started
[4524] 16 Dec 11:48:29.399 # Configuration loaded
[4524] 16 Dec 11:48:29.401 # Could not create server TCP listening socket 127.0.0.1:6379: bind: 操作成功完成。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>  此时可以看到redis server的运行信息，说明redis server运行成功。</p>
</li>
<li><p>接下来不要关闭这个Redis server，重新在地址栏输入cmd，打开一个新的命令行。在命令行中输入以下命令后回车，启动redis client端：</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">PS E:\Redis&gt; redis-cli.exe
127.0.0.1:6379&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>  看到127.0.0.1:6379则表明此时已经成功连接上了本地Redis服务器。</p>
</li>
<li><p>在redis client端的cmd上输入以下命令后回车,以此来测试redis-cli客户端是否能连接上redis服务器：</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">127.0.0.1:6379&gt; ping
PONG

#当看到输出PONG时则表示连接成功<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<p><strong>注意：</strong>若是启动redis server客户端时出现以下错误：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">E:\Redis&gt;redis-server.exe
[7976] 16 Dec 11:41:31.720 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo
[7976] 16 Dec 11:41:31.720 # Redis version&#x3D;5.0.14.1, bits&#x3D;64, commit&#x3D;ec77f72d, modified&#x3D;0, pid&#x3D;7976, just started
[7976] 16 Dec 11:41:31.721 # Warning: no config file specified, using the default config. In order to specify a config file use redis-server.exe &#x2F;path&#x2F;to&#x2F;redis.conf
[7976] 16 Dec 11:41:31.724 # Could not create server TCP listening socket *:6379: bind: 在一个非套接字上尝试了一个操作。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>出现这一错误则则可以将启动命令改为如下命令：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">E:\Redis&gt;redis-server.exe redis.windows.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="连接远程Redis"><a href="#连接远程Redis" class="headerlink" title="连接远程Redis"></a>连接远程Redis</h2><p>在Redis根目录下打开cmd，使用redis-cli客户端，连接远程redis服务的语法为：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">redis-cli -h host -p port -a password
#其中：host为服务器所在的ip地址
#port为Redis服务的监听端口
#password为Redis服务的密码，若没有开启认证则不需要这一参数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="Redis配置"><a href="#Redis配置" class="headerlink" title="Redis配置"></a>Redis配置</h2><p>使用redis-cli客户端连接上redis服务器后，可以使用config命令来查看或设置redis的配置，也可以直接修改安装目录下的redis.windows.conf文件来修改配置。</p>
<p>config相关命令如下：</p>
<ul>
<li><code>config get key</code>：获取配置项为key的配置，配置项不存在时返回<code>(empty list or set)</code></li>
<li><code>config get *</code>：获取所有配置</li>
<li><code>config set key &quot;value&quot;</code>：设置配置项key的值为value</li>
</ul>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>YAML</category>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>YAML</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/01/09/hello-world/</url>
    <content><![CDATA[<h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h1><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check<br><a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems<br>when using Hexo, you can find the answer in<br><a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me<br>on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><p>$ hexo new “My New Post”  </p>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><p>$ hexo server  </p>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><p>$ hexo generate  </p>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><p>$ hexo deploy  </p>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>js文件调用vue内的方法并传值</title>
    <url>/2023/11/02/js%E6%96%87%E4%BB%B6%E8%B0%83%E7%94%A8vue%E5%86%85%E7%9A%84%E6%96%B9%E6%B3%95%E5%B9%B6%E4%BC%A0%E5%80%BC/</url>
    <content><![CDATA[<p>在js文件中编写功能函数时，常常要调用vue文件内的方法并传值，下面记录js传值的方法：</p>
<ul>
<li><p>首先在vue页面的<code>mounted</code>模块将要调用的方法注册到window对象上，并引入对应的js文件后：</p>
  <pre class="line-numbers language-json" data-language="json"><code class="language-json">mounted()&#123;
  window.exampleFunction&#x3D;this.exampleFunction
&#125;,
method:&#123;
    exampleFunction(data)&#123;
        console.log(&#39;收到方法调用&#39;)
        console.log(data,&#39;data&#39;)
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>然后在该js文件里直接通过window调用vue的方法</p>
  <pre class="line-numbers language-json" data-language="json"><code class="language-json">export function exampleJsFunction()&#123;
    let data&#x3D;&#39;textData&#39;        
    window.exampleFunction(data)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>完成上述步骤即可实现在js文件内调用vue内的方法并传值的操作，比在Vue中调用不同组件的方法简单。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>python学习笔记（一）</title>
    <url>/2022/10/08/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="基本语句"><a href="#基本语句" class="headerlink" title="基本语句"></a>基本语句</h1><p>输入：<code>input()</code><br>输出：<code>print()</code></p>
<p>注释：<code>#</code></p>
<p>字符串类型：<code>str</code></p>
<p>空值用None表示多行输入：<code>&#39;&#39;&#39;...&#39;&#39;&#39;</code></p>
<p>内部字符默认不转义：<code>r&#39;&#39;&#39;...&#39;&#39;&#39;</code></p>
<p>获取字符的整数表示：<code>ord()</code></p>
<p>将字符编码转化为字符：<code>chr()</code></p>
<p>bytes类型用带b前缀的单引号或双引号表示：<code>b&#39;字符&#39;</code></p>
<p>将str类型数据转为指定的bytesr类型数据：<code>&#39;字符&#39;.encode(&#39;原编码类型&#39;)</code></p>
<p>示例语句如下：</p>
<p><code>print(&#39;a&#39;.encode(&#39;ascii&#39;))</code></p>
<p>注意：python是4个空格缩进的，区分大小写。</p>
<p>含有中文的str类型无法用ASCII编码，在bytes中无法显示ASCII字符的字节，会以\x##代替显示</p>
<p>将bytesr类型数据转为str类型数据：<code>b&#39;字符&#39;.decode(&#39;str的编码类型&#39;)</code></p>
<p>示例语句如下：</p>
<p><code>print(b&#39;a&#39;.decode(&#39;ascii&#39;))</code></p>
<p>注意：若bytes中只有一小部分无效的字节，可用<code>errors=&#39;ignore&#39;</code>语句忽略错误的字节。</p>
<p>计算str的字符数：<code>len()</code></p>
<p>将源代码按UTF-8编码保存：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">#!&#x2F;usr&#x2F;bin&#x2F;env python3

# -*- coding: utf-8 -*-<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>申明UTF-8编码外，必须还要确保文本编辑器正在使用<code>UTF-8 without BOM</code>编码</p>
<h1 id="格式化字符串的三种方法"><a href="#格式化字符串的三种方法" class="headerlink" title="格式化字符串的三种方法"></a>格式化字符串的三种方法</h1><h2 id="占位符格式化字符串："><a href="#占位符格式化字符串：" class="headerlink" title="占位符格式化字符串："></a>占位符格式化字符串：</h2><p>输出整形数据的语句：<code>print(&#39;%d&#39; % 123)</code></p>
<p>输出小数点后2位数的语句：<code>print(&#39;%.2f&#39; % 3.1415926)</code></p>
<h2 id="format-格式化字符串"><a href="#format-格式化字符串" class="headerlink" title="format()格式化字符串"></a>format()格式化字符串</h2><p>例子如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">print(&#39;&#39;&#39;&#123;0&#125;在考试中提升了&#123;1:.2f&#125;%,
&#123;2&#125;在考试中提升了&#123;3:.2f&#125;%&#39;&#39;&#39;.format(&#39;张三&#39;,2.354,&#39;李四&#39;,0.458))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="用f-string格式化字符串"><a href="#用f-string格式化字符串" class="headerlink" title="用f-string格式化字符串"></a>用f-string格式化字符串</h2><p>例子如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">a&#x3D;&#39;张三&#39;
b&#x3D;2.354
c&#x3D;&#39;李四&#39;
d&#x3D;0.458
print(f&#39;&#39;&#39;&#123;a&#125;在考试中提升了&#123;b:.2f&#125;%,
&#123;c&#125;在考试中提升了&#123;d:.2f&#125;%&#39;&#39;&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h2><p>小明的成绩从去年的72分提升到了今年的85分，请计算小明成绩提升的百分点，并用字符串格式化显示出<code>xx.x%</code>，只保留小数点后1位：</p>
<p>代码如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"># -*- coding utf-8 -*-
s1&#x3D;72
s2&#x3D;85
r&#x3D;(s2-s1)&#x2F;s1*100
print(&#39;%.1f%%&#39;%r)
print(&#39;&#123;0:0.1f&#125;%&#39;.format(r))
print(f&#39;&#123;r:0.1f&#125;%&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="列表list和元组tuple"><a href="#列表list和元组tuple" class="headerlink" title="列表list和元组tuple"></a>列表list和元组tuple</h1><h2 id="列表list"><a href="#列表list" class="headerlink" title="列表list"></a>列表list</h2><p>list是一种有序的集合，<strong>可随时增减其中的元素</strong>。</p>
<p>形式如同 <code>name=[&#39;Zhangsan&#39;,&#39;Lisi&#39;,&#39;Wangwu&#39;]</code>，指的是定义一个name列表，name为该列表的名称，与C语言中的数组相似，其区别在于<strong>list中的元素数据类型可以不同</strong>，元素可以是另一个list。</p>
<p>定义一个空列表，其列表名称为name：<code>name()</code></p>
<p><strong>获取列表中元素的个数</strong></p>
<p>如获取name列表元素的个数：<code>len(name)</code></p>
<p><strong>使用索引获取列表中的最后一个元素</strong></p>
<p>如获取name列表中的最后一个元素：<code>name[-1]</code></p>
<p><strong>在列表末尾增加元素</strong></p>
<p>如在name列表末尾追加元素Bob：<code>name.append(&#39;Bob&#39;)</code></p>
<p><strong>将元素插入到列表中的指定位置</strong></p>
<p>如将元素Jack插入到name列表指定的位置，如索引号为1的位置：<code>name.insert(1,Jack)</code></p>
<p><strong>删除列表末尾的元素</strong></p>
<p>如删除name列表末尾的元素：<code>name.pop()</code></p>
<p><strong>删除列表指定位置的元素</strong></p>
<p>如删除name列表中索引号为1的元素：<code>name.pop(1)</code></p>
<p><strong>替换列表中指定位置的元素</strong></p>
<p>如将name列表中索引号为1的元素换成Xiaoming：<code>name[1]=&#39;Xiaoming&#39;</code></p>
<p>列表中的元素包含另一个list时，若想要<strong>取内嵌list元素的值</strong>，可将list看做二维数组来进行取值，如下面取s列表中php的值，可写成：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">s&#x3D;[&#39;python&#39;,&#39;java&#39;,[&#39;asp&#39;, &#39;php&#39;],&#39;scheme&#39;]
print(s[2][1])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="元组tuple"><a href="#元组tuple" class="headerlink" title="元组tuple"></a>元组tuple</h2><p>tuple是一种有序的列表，<strong>元组一旦初始化就不能修改</strong>，tuple一旦被定义，其元素就必须要确定下来。</p>
<p>形式如同<code>name=（&#39;Zhangsan&#39;,&#39;Lisi&#39;,&#39;Wangwu&#39;)</code>，指的是定义一个name元组，name为该元组的名称，与list类似，但tuple没有append()、insert()这类的方法，获取元素的方法与list相同，但不能给元素赋值。</p>
<p><strong>定义空的tuple</strong></p>
<p>如定义空元组name：<code>name=()</code></p>
<p><strong>定义只有1个元素的tuple</strong></p>
<p>如定义只有1个元素的元组name：<code>name=(1,)</code></p>
<p><strong>注意</strong>：将只有1个元素的tuple若误写成name=(1)，<strong>该语句定义的不是元组tuple类型</strong>，其实际是指1经过数学小括号运算后，将结果赋给name。</p>
<p>当元组的元素中含有列表时，可以<strong>改变元组中的列表元素</strong>，此时元组是“可变的”，但其本质上元组没变，改变的是列表。如下列代码改变的是列表中元素的值：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">name&#x3D;(&#39;Zhangsan&#39;,&#39;Lisi&#39;,[&#39;A&#39;,&#39;B&#39;])
name[2][0]&#x3D;&#39;X&#39;
name[2][1]&#x3D;&#39;Y&#39;
print(name)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>此时元组name中的元素变成了<code>(&#39;Zhangsan&#39;, &#39;Lisi&#39;, [&#39;X&#39;, &#39;Y&#39;])</code>，<strong>改变的仅是列表中的元素</strong>。</p>
<h2 id="练习题-1"><a href="#练习题-1" class="headerlink" title="练习题"></a>练习题</h2><p>请用索引取出下面list的指定元素：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"># -*- coding: utf-8 -*-

L &#x3D; [
    [&#39;Apple&#39;, &#39;Google&#39;, &#39;Microsoft&#39;],
    [&#39;Java&#39;, &#39;Python&#39;, &#39;Ruby&#39;, &#39;PHP&#39;],
    [&#39;Adam&#39;, &#39;Bart&#39;, &#39;Lisa&#39;]
]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>代码如下：<br><pre class="line-numbers language-python" data-language="python"><code class="language-python"># 打印Apple:
print(L[0][0])
# 打印Python:
print(L[1][1])
# 打印Lisa:
print(L[2][2])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python学习笔记（七）</title>
    <url>/2022/10/11/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%83%EF%BC%89/</url>
    <content><![CDATA[<h1 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h1><h2 id="获取对象信息"><a href="#获取对象信息" class="headerlink" title="获取对象信息"></a>获取对象信息</h2><h3 id="使用type"><a href="#使用type" class="headerlink" title="使用type()"></a>使用<code>type()</code></h3><p><strong>判断对象类型</strong>：<code>type(对象)</code></p>
<p>用<code>type()</code>来<strong>判断对象是否是函数</strong></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">import types
def fn():
    pass
print(type(fn)&#x3D;&#x3D;types.FunctionType)
print(type(abs)&#x3D;&#x3D;types.BuiltinFunctionType)
print(type(lambda z:z)&#x3D;&#x3D;types.LambdaType)
print(type((x for x in range(10)))&#x3D;&#x3D;types.GeneratorType)
#运行结果如下：
True
True
True
True<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="使用isinstance"><a href="#使用isinstance" class="headerlink" title="使用isinstance()"></a>使用<code>isinstance()</code></h3><p><strong>判断class的类型</strong>：<code>isinstance(变量名,对象名)</code></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">class Person(object):
    def __init__(self,num&#x3D;0,sex&#x3D;&#39;m&#39;):
        self.num&#x3D;num
        self.sex&#x3D;sex
    def getnum(self):
        return self.num
class Student(Person):
    def setnum(self,num):
        self.num&#x3D;num
a&#x3D;Person()
b&#x3D;Student()
print(isinstance(a,Person))
print(isinstance(b,Person))#b继承了a，所以b也是Person类型
print(isinstance(a,Student))#a不是Student类型
#运行结果如下：
True
True
False<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>isinstance</code>也可以用来判断基本类型，形式为：<code>isinstance(判断的对象,类型名)</code></p>
<p><code>isinstance</code>还可以判断一个变量是否是某些类型的一种，例如判断是否是list或tuple：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">print(isinstance([1,2,3],tuple))
print(isinstance((1,2,3),tuple))
print(isinstance([1,2,3],(list,tuple)))
print(isinstance((1,2,3),(list,tuple)))
#运行结果如下：
False
True
True
True<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>因此优先使用isinstance()判断类型，可以将指定类型及其子类”一网打尽“。</p>
<h3 id="使用dir"><a href="#使用dir" class="headerlink" title="使用dir()"></a>使用<code>dir()</code></h3><p>只有在不知道对象信息时，才会用以下函数去获取对象信息。</p>
<p>获得一个对象的所有属性和方法：<code>dir()</code>，其返回一个包含字符串的list。例如：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">print(dir(123))
#运行结果如下：
[&#39;__abs__&#39;, &#39;__add__&#39;, &#39;__and__&#39;,..., &#39;real&#39;, &#39;to_bytes&#39;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><code>__xxx__</code>为有特殊用途的属性和方法，其他的为普通属性和方法。</p>
<p><strong>判断对象是否有某属性或方法：</strong><code>hasattr(指向对象的变量名,属性或方法)</code></p>
<p><strong>设置对象的属性值：</strong><code>setattr(指向对象的变量名,属性,属性值)</code></p>
<p><strong>获取对象的属性或方法：</strong><code>getattr(指向对象的变量名,属性或方法)</code></p>
<h2 id="实例属性和类属性"><a href="#实例属性和类属性" class="headerlink" title="实例属性和类属性"></a>实例属性和类属性</h2><p>通过实例变量或<code>self</code>变量给实例绑定的属性是实例属性，归当前实例所有。</p>
<p>直接在class中定义的属性是<strong>类属性</strong>，归类所有，但类的所有属性都可以访问，用<code>类名.属性名</code>调用。</p>
<p>两者的形式区别如下所示：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">class Person(object):
    num&#x3D;&#39;123&#39;#类属性
    def __init__(self,sex):
        self.sex&#x3D;sex#实例属性<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h3><p>为了统计学生人数，可以给Student类增加一个类属性，每创建一个实例，该属性自动增加：</p>
<p>代码如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">class Student(object):
    count &#x3D; 0
    def __init__(self, name):
        self.name &#x3D; name
        Student.count&#x3D;Student.count+1
    
# 测试:
if Student.count !&#x3D; 0:
    print(&#39;测试失败!&#39;)
else:
    bart &#x3D; Student(&#39;Bart&#39;)
    if Student.count !&#x3D; 1:
        print(&#39;测试失败!&#39;)
    else:
        lisa &#x3D; Student(&#39;Bart&#39;)
        if Student.count !&#x3D; 2:
            print(&#39;测试失败!&#39;)
        else:
            print(&#39;Students:&#39;, Student.count)
            print(&#39;测试通过!&#39;)
#运行结果如下：
Students: 2
测试通过!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="面向对象高级编程"><a href="#面向对象高级编程" class="headerlink" title="面向对象高级编程"></a>面向对象高级编程</h1><h2 id="使用-slots"><a href="#使用-slots" class="headerlink" title="使用__slots__"></a>使用<code>__slots__</code></h2><p>定义一个特殊的变量来限制对实例添加属性：<code>__slots__</code>。</p>
<p>例如，只允许对Student实例添加<code>name</code>和<code>age</code>属性：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">class Student(object):
    __slots__&#x3D;(&#39;name&#39;,&#39;age&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p><code>__slots__</code>定义的属性仅对当前类实例起作用，对继承的<strong>子类不起作用</strong>。</p>
<h2 id="使用-property"><a href="#使用-property" class="headerlink" title="使用@property"></a>使用@property</h2><p><strong>把一个方法变成属性调用：</strong>@property</p>
<p>如把一个getter方法变成属性，只需要加上<code>@property</code>就可以了。与此同时，<code>@property</code>本身又创建了另一个<code>@实例名.setter</code>，负责把一个setter方法变成属性赋值：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">class Student(object):
    @property    
    def score(self): 
        return self.score
    
    @score.setter    
    def score(self,value):
        if not isinstance(value, int):
            raise ValueError(&#39;score must be an integer!&#39;)
        if value&gt;100  or value&lt;0:
            raise ValueError(&#39;score must between 0~100!&#39;) 
        self.score&#x3D;value    
s&#x3D;Student()
s.score&#x3D;299
print(s.score)
#运行结果如下：
Traceback (most recent call last):
  File &quot;main.py&quot;, line 14, in &lt;module&gt;
    s.score&#x3D;299
  File &quot;main.py&quot;, line 11, in score
    raise ValueError(&#39;score must between 0~100!&#39;) 
ValueError: score must between 0~100!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>@property</code>还可以<strong>定义只读属性</strong>。只定义getter方法，不定义setter方法便是一个只读属性，如下面的score属性便是只读属性：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">class Student(object):
    @property    
    def score(self): 
        return self.name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>注意:</strong>属性的<strong>方法名不要与实例变量重名</strong>。在调用方法时会首先转换为方法调用，而在return语句时，又看作访问类的属性，于是又转换为方法调用，从而导致栈溢出报错。</p>
<h3 id="练习题-1"><a href="#练习题-1" class="headerlink" title="练习题"></a>练习题</h3><p>请利用<code>@property</code>给一个<code>Screen</code>对象加上<code>width</code>和<code>height</code>属性，以及一个只读属性<code>resolution</code>：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">class Screen(object):
    @property
    def width(self):
        return self._width
    @width.setter
    def width(self,value):
        self._width&#x3D;value
        
    @property
    def height(self):
        return self._height  
    @height.setter
    def height(self,value):
        self._height&#x3D;value   
    
    @property
    def resolution(self):
        return self._height*self._width     
# 测试:
s &#x3D; Screen()
s.width &#x3D; 1024
s.height &#x3D; 768
print(&#39;resolution &#x3D;&#39;, s.resolution)
if s.resolution &#x3D;&#x3D; 786432:
    print(&#39;测试通过!&#39;)
else:
    print(&#39;测试失败!&#39;)
#运行结果如下：
resolution &#x3D; 786432
测试通过!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h2><p>多重继承形式：<code>class 类名(基类1,基类2):</code></p>
<p>在设计类的继承关系时，子类除了继承基类1外，再同时继承基类2，这种设计称之为Mixln。Mixln可以给一个类增加多个功能。只允许单一继承的语言（如java），不能使用Mixln的设计。</p>
<h2 id="定制类"><a href="#定制类" class="headerlink" title="定制类"></a>定制类</h2><p>pytho的class中有很多类似于<code>__slots__</code>和<code>__len__</code>的函数，可以帮助定制我们类。下面是最常用的几个定制方法：</p>
<p><strong>返回一个给用户看的字符串：</strong><code>__str__(self)</code></p>
<p><strong>返回一个程序开发者看的字符串</strong>：<code>__repr__(self)</code>，其是为调试服务的。</p>
<p><strong>返回一个迭代对象：</strong><code>__iter__(self)</code>，可以作用于for循环</p>
<p><strong>返回一个迭代对象：</strong><code>__getitem__(self,n)</code>,可以作用于list。其传入的参数可能是一个<code>int</code>，也可能是一个切片对象<code>slice</code>。</p>
<p><strong>动态返回一个属性：</strong><code>__getattr__(self,属性名)</code>，只有在没有找到属性的情况下才调用。</p>
<p><strong>直接调用实例：</strong><code>__call__(self)</code></p>
<p><strong>判断一个对象是否是可调用对象：</strong><code>callable(对象)</code></p>
<h2 id="使用枚举类"><a href="#使用枚举类" class="headerlink" title="使用枚举类"></a>使用枚举类</h2><p>定义一个class类型，其每一个常量都是class的一个唯一实例，枚举类（<code>Enum</code>类）便可以实现这个功能。<code>Enum</code>可以把一组相关常量定义在一个class中，且class不可变，其成员可以直接比较。</p>
<p>如下代码所示，可以直接使用<code>Month.Jan.value</code>来引用一个常量，或者枚举它是所有成员。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">from enum import Enum
Month &#x3D; Enum(&#39;Month&#39;, (&#39;Jan&#39;, &#39;Feb&#39;, &#39;Mar&#39;, &#39;Apr&#39;, &#39;May&#39;, &#39;Jun&#39;, &#39;Jul&#39;, &#39;Aug&#39;, &#39;Sep&#39;, &#39;Oct&#39;, &#39;Nov&#39;, &#39;Dec&#39;))
print(Month.Jan.value)#
for name,member in Month.__members__.items():
    print(name,&#39;&#x3D;&gt;&#39;,member,&#39;,&#39;,member.value)
#运行结果如下：
1
Jan &#x3D;&gt; Month.Jan , 1
Feb &#x3D;&gt; Month.Feb , 2
Mar &#x3D;&gt; Month.Mar , 3
Apr &#x3D;&gt; Month.Apr , 4
May &#x3D;&gt; Month.May , 5
Jun &#x3D;&gt; Month.Jun , 6
Jul &#x3D;&gt; Month.Jul , 7
Aug &#x3D;&gt; Month.Aug , 8
Sep &#x3D;&gt; Month.Sep , 9
Oct &#x3D;&gt; Month.Oct , 10
Nov &#x3D;&gt; Month.Nov , 11
Dec &#x3D;&gt; Month.Dec , 12<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>value</code>属性是自动赋给成员的<code>int</code>常量，<strong>默认从1开始计数</strong>。</p>
<h3 id="练习题-2"><a href="#练习题-2" class="headerlink" title="练习题"></a>练习题</h3><p>把<code>Student</code>的<code>gender</code>属性改造为枚举类型，可以避免使用字符串：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">from enum import Enum, unique
class Gender(Enum):
    Male&#x3D;Enum(&#39;Male&#39;,(&#39;Male&#39;,&#39;Female&#39;))

class Student(object):
    def __init__(self, name, gender):
        self.name &#x3D; name
        self.gender &#x3D; gender
        
# 测试:
bart &#x3D; Student(&#39;Bart&#39;, Gender.Male)
if bart.gender &#x3D;&#x3D; Gender.Male:
    print(&#39;测试通过!&#39;)
else:
    print(&#39;测试失败!&#39;)
#运行结果如下：
测试通过!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="使用元类"><a href="#使用元类" class="headerlink" title="使用元类"></a>使用元类</h2><h3 id="type"><a href="#type" class="headerlink" title="type()"></a>type()</h3><p>查看一个类型或变量的类型:<code>type(类名,(基类1,基类2,...)</code>，通过<code>type()</code>函数创建出的类，可将函数绑定到方法上。</p>
<p>例如通过<code>type()</code>函数创建出<code>Hello</code>类：<code>Hello=type(&#39;Hello&#39;,(object,),dict(hello=fn))</code>，把<code>fn</code>函数绑定到方法名<code>hello</code>上。</p>
<h2 id="metaclass"><a href="#metaclass" class="headerlink" title="metaclass"></a>metaclass</h2><p>正常创建实例的步骤是先定义类，然后根据这个类创建实例。若想先创建出类，可以通过元类(metaclass)创建，即先定义metaclass，然后创建类，最后创建实例。在编写ORM框架时，所有的类只能动态定义，此时才会用metaclass来修改类</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python学习笔记（二）</title>
    <url>/2022/10/09/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h1 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h1><h2 id="方法一：if…else语句"><a href="#方法一：if…else语句" class="headerlink" title="方法一：if…else语句"></a>方法一：if…else语句</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">if &lt;条件1&gt;:
	&lt;执行1&gt;
else 
	&lt;执行2&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="方法二：if-…elif…else语句"><a href="#方法二：if-…elif…else语句" class="headerlink" title="方法二：if …elif…else语句"></a>方法二：if …elif…else语句</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">if &lt;条件1&gt;:
	&lt;执行1&gt;
elif &lt;条件2&gt;:
	&lt;执行2&gt;
else:
	&lt;执行3&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="input条件输出"><a href="#input条件输出" class="headerlink" title="input条件输出"></a>input条件输出</h2><p>input()返回值的数据类型是str，str不能直接与整数比较，若要与整数比较，要先把str转换为整数类型，如下代码所示：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">s &#x3D; input(&#39;birth: &#39;)
birth &#x3D; int(s)
if birth &lt; 2000:
    print(&#39;00前&#39;)
else:
    print(&#39;00后&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>若输入值不为数字时，如输入abc，则条件语句可写成：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">s&#x3D;input(&#39;birth:&#39;)
if s!&#x3D;&#39;zero&#39;:
    print(&#39;00前&#39;)
else:
    print(&#39;00后&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h2><p>小明身高1.75，体重80.5kg。请根据BMI公式（体重除以身高的平方）帮小明计算他的BMI指数，并根据BMI指数：</p>
<ul>
<li>低于18.5：过轻</li>
<li>18.5-25：正常</li>
<li>25-28：过重</li>
<li>28-32：肥胖</li>
<li>高于32：严重肥胖</li>
</ul>
<p>用<code>if-elif</code>判断并打印结果：</p>
<p>代码如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"># -*- coding: utf-8 -*-

height &#x3D; 1.75
weight &#x3D; 80.5
bmi &#x3D; weight&#x2F;(height*height)
if bmi&lt;18.5:
    print(&#39;过轻&#39;)
elif 18.5&lt;&#x3D;bmi&lt;25:
    print(&#39;正常&#39;)
elif 25&lt;&#x3D;bmi&lt;28:
    print(&#39;肥胖&#39;)
else:
    print(&#39;严重肥胖&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h1><h2 id="方法一：for…in循环"><a href="#方法一：for…in循环" class="headerlink" title="方法一：for…in循环"></a>方法一：for…in循环</h2><p>例如计算1-100的整数之和：<br><pre class="line-numbers language-python" data-language="python"><code class="language-python">t&#x3D;0
for i in range(101)：
	t&#x3D;t+i
print(t)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></p>
<h2 id="方法二：while-循环"><a href="#方法二：while-循环" class="headerlink" title="方法二：while 循环"></a>方法二：while 循环</h2><p>例如计算100以内所有奇数之和：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">t&#x3D;0
n&#x3D;99
while n&gt;0:
    t&#x3D;t+n
    n&#x3D;n-2
print(t)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="练习题-1"><a href="#练习题-1" class="headerlink" title="练习题"></a>练习题</h2><p>请利用循环依次对list中的每个名字打印出<code>Hello, xxx!</code>：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"># -*- coding: utf-8 -*-
L &#x3D; [&#39;Bart&#39;, &#39;Lisa&#39;, &#39;Adam&#39;]
for i in L:
    print(&#39;Hello,&#39;+i+&#39;!&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="break与continue"><a href="#break与continue" class="headerlink" title="break与continue"></a>break与continue</h2><p>break语句可提前退出循环，continue语句可跳过当前这次循环，直接开始下一次循环。</p>
<h1 id="字典dict"><a href="#字典dict" class="headerlink" title="字典dict"></a>字典dict</h1><p>字典使用键-值存储，具有极快的查找速度。dict内部存放的顺序与key的放入顺序无关。为保证哈希的正确性，dict的key必须是<strong>不可变对象</strong>，如list是可变的，不能作为key，dict的key<strong>不能重复</strong>。</p>
<p>与list相比，dict的特点为：</p>
<ul>
<li>查找和插入的速度极快，不会随key的增加而变慢</li>
<li>需要占用大量内存</li>
</ul>
<p><strong>形式如下</strong>：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">d&#x3D;&#123;&#39;Zhangsan&#39;:92,&#39;Lisi&#39;:80,&#39;Wangwu&#39;:56&#125;
print(d[&#39;Lisi&#39;])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p><strong>通过key将数据放入dict</strong></p>
<p>如把key为Lisi、value为68的数据放入dict：<code>d[&#39;Lisi&#39;]=68</code></p>
<p><strong>注意：</strong>多次对一个key放入value，后面的值会把前面的值冲掉,如此时Lisi的value值由80变成了68。</p>
<p><strong>删除一个key</strong></p>
<p>如要删除Lisi，其对应的value也会从dict中删除：<code>d.pop(&#39;Lisi&#39;)</code></p>
<h2 id="避免key不存在的错误"><a href="#避免key不存在的错误" class="headerlink" title="避免key不存在的错误"></a>避免key不存在的错误</h2><h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><p>通过<code>in</code>判断key是否存在：<code>&#39;Jack&#39; in  d</code></p>
<h3 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h3><p>通过<code>get()</code>方法判断key是否存在，若key不存在，默认返回<code>Nome</code>：<code>d.get(&#39;Jack&#39;)</code></p>
<p>通过<code>get()</code>方法判断key是否存在，若key不存在，返回指定的value：<code>d.get(&#39;Jack&#39;,-1)</code></p>
<h1 id="集合set"><a href="#集合set" class="headerlink" title="集合set"></a>集合set</h1><p>set与dict类似，也是一组key的集合，但<strong>不存储value</strong>。与dict相同，key不能重复，故在set中没有重复的key，也同样不能放入可变对象。此外，set也可看成数学意义上无序和无重复元素的集合。</p>
<p>创建一个set，需要提供一个list作为输入集合，其<strong>形式如下</strong>：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">s&#x3D;set([1,2,3])
print(s)
&gt;&gt;&gt;s
&#123;1,2,3&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>注意：传入的参数是一个list，而显示的<code>&#123;1,2,3&#125;</code>只是说明set内部有1，2，3这3个元素，显示的顺序也<strong>不代表set就是有序的</strong>。</p>
<p><strong>重复元素在set中自动被过滤</strong></p>
<p>如下面所示：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">s&#x3D;set([1,1,2,2,3,3])
print(s)
#运行结果如下
s
&#123;1, 2, 3&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>通过<code>add(key)</code>方法将元素添加到set中</strong></p>
<p>如在set中先后两次添加元素4：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">s&#x3D;set([1,2,3])
s.add(4)
print(s)
s.add(4)
print(s)
#运行结果如下
&#123;1, 2, 3, 4&#125;
&#123;1, 2, 3, 4&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到，元素可以重复添加，但会被set自动过滤掉重复的元素。</p>
<p><strong>通过<code>remove(key)</code>方法删除元素</strong></p>
<p>如删除元素4：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">s&#x3D;set([1,2,3,4])
s.remove(4)
print(s)
&gt;&gt;&gt;&#123;1, 2, 3&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>两个set可以做交集、并集等操作</strong></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">s&#x3D;set([1,2,3,4])
d&#x3D;set([3,4,5,6])
print(s&amp;d)
print(s|d)
#运行结果如下
&#123;3, 4&#125;
&#123;1, 2, 3, 4, 5, 6&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>list、tuple是<strong>有序可重复</strong>的</p>
<p>dict、set是<strong>无序不可重复</strong>的</p>
<p>四者形式上的区别：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">list&#x3D;[value,value]
tuple&#x3D;(value,value)
dict&#x3D;&#123;key:value,key:value&#125;
set&#x3D;([key,key])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python学习笔记（三）</title>
    <url>/2022/10/09/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="python内置函数"><a href="#python内置函数" class="headerlink" title="python内置函数"></a>python内置函数</h2><p>绝对值：<code>abs()</code></p>
<p>平方根：<code>sqrt()</code></p>
<p>平方：<code>power()</code></p>
<p>将整数转换为‘0x’前缀的十六进制字符串：<code>hex()</code></p>
<p>将整数转换为‘0o’前缀的八进制字符串：<code>oct()</code></p>
<p>数据类型转换函数：<code>int()</code>、<code>float()</code>、<code>str()</code>、<code>bool()</code></p>
<p>导包：<code>import 包名</code></p>
<h3 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h3><p>请利用Python内置的<code>hex()</code>函数把一个整数转换成十六进制表示的字符串：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"># -*- coding: utf-8 -*-
n1 = 255
n2 = 1000
print(str(hex(n1)))
print(str(hex(n2)))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h2><p><strong>用<code>def</code>语句定义函数</strong></p>
<p>如自定义一个abs函数并检验函数功能，其代码如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">def my_abs(x):
    if x&gt;=0:
        return x
    else:
        return -x
x=int(input())
print(my_abs(x))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在python交互环境中定义函数时，python会出现<code>...</code>的提示，函数定义结束后需要按两次回车使其重新回到<code>&gt;&gt;&gt;</code>提示符下，如下图所示：</p>
<p><img src="/2022/10/09/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/1.png" alt></p>
<h2 id="空函数"><a href="#空函数" class="headerlink" title="空函数"></a>空函数</h2><p>定义一个空函数，用<code>pass</code>语句来作为占位符。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">def my_max():
	pass<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="参数检查"><a href="#参数检查" class="headerlink" title="参数检查"></a>参数检查</h2><p>如果要函数参数传入类型不对时需要抛出参数错误的信息，可用内置函数<code>isinstance()</code>检查参数，如<code>if not isinstance(x,(int,float))</code>语句，若传入了整数与浮点数之外的参数类型，函数就会抛出一个错误来提醒传参不对。</p>
<h2 id="函数返回"><a href="#函数返回" class="headerlink" title="函数返回"></a>函数返回</h2><p>函数体内部用<code>return</code>返回函数结果</p>
<p>函数执行完毕也没有<code>return</code>语句时，自动<code>return None</code>。</p>
<p>函数的<code>return</code>可以<strong>返回多个值</strong>，值之间用<strong>半角逗号</strong>隔开，如<code>return a,b</code></p>
<p>注意python返回值实际上是返回一个tuple，并非是返回两个值，比如以下代码：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">def move(x,y):
    return x+50,y+20
x=int(input())
y=int(input())
t=move(x,y)
print(t)、
#运行结果如下
50
100
(100, 120)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="练习题-1"><a href="#练习题-1" class="headerlink" title="练习题"></a>练习题</h3><p>请定义一个函数<code>quadratic(a, b, c)</code>，接收3个参数，返回一元二次方程 </p>
<script type="math/tex; mode=display">
ax^2+bx+c=0</script><p>的两个解。</p>
<p>提示：</p>
<p>计算平方根可以调用<code>math.sqrt()</code>函数：</p>
<p>代码如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"># -*- coding: utf-8 -*-

import math

def quadratic(a,b,c):
    t=math.sqrt(float(b*b-4*a*c))
    p=(-b+t)/(2*a)
    q=(-b-t)/(2*a)
    return p,q

print('quadratic(2, 3, 1) =', quadratic(2, 3, 1))
print('quadratic(1, 3, -4) =', quadratic(1, 3, -4))

if quadratic(2, 3, 1) != (-0.5, -1.0):
    print('测试失败')
elif quadratic(1, 3, -4) != (1.0, -4.0):
    print('测试失败')
else:
    print('测试成功')
#运行结果如下  
quadratic(2, 3, 1) = (-0.5, -1.0)
quadratic(1, 3, -4) = (1.0, -4.0)
测试成功<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h2><p>自定义函数可以设置默认参数。如次方函数可以设为默认平方，需要计算其他次方的时候再传次方的参数。代码如下所示：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">def my_power(x,n=2):
    t=1
    while(n&gt;0):
       n=n-1
       t=x*t
    return t
x=int(input())
n=int(input())
print(my_power(x))
print(my_power(x,n))
#运行结果如下
3
4
9
81<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>注意：</strong></p>
<ul>
<li>设置默认参数时。必选参数在前，<strong>默认参数在后</strong></li>
<li>当函数有多个参数时，变化大的参数放前面，变化小的参数可以作为默认参数</li>
<li>默认参数必须指向<strong>不变对象</strong></li>
</ul>
<h2 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h2><p>传入的参数个数是可变的称为可变参数，形式为<code>*参数名</code>。</p>
<p>可变参数允许传入<strong>0个或任意个参数</strong>，这些参数在函数调用时自动组装为一个<strong>tuple</strong>。</p>
<p>在参数个数不确定时，定义可变参数和定义一个list和tuple参数相比，区别在于仅在参数前加了个<code>*</code>号，而在函数内部，参数接收到的是一个tuple，函数代码是完全不用变的。此时调用函数时可传入任意个参数<code>calc(1,2)</code>也可以传入0个参数<code>clac()</code>。</p>
<p>将list或tuple元素变成可变参数传进函数中，可写成：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">nums=[1,2,3]
calc(*nums)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a>关键字参数</h2><p>关键字参数允许传入<strong>0个或任意个含参数名</strong>的参数，这些参数在函数内部自动组装为一个<strong>dict</strong>,形式为<code>**参数名</code>。</p>
<p>关键字参数可以拓展函数的功能，如下所示：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">def person(name,age,**kw):
    print('name:',name,'age:',age,'other:',kw)
person('Lisi',34)
person('Zhangsan',44,city='Shanghai')
person('Wangwu',23,gender='M',job='teacher')
#运行结果如下
name: Lisi age: 34 other: {}
name: Zhangsan age: 44 other: {'city': 'Shanghai'}
name: Wangwu age: 23 other: {'gender': 'M', 'job': 'teacher'}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>将dict元素变成可变参数传进函数中，可写成：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">def person(name,age,**kw):
    print('name:',name,'age:',age,'other:',kw)
extra={'city':'Shanghai','job':'teacher'}
person('Wangwu',23,**extra)
#运行结果如下
name: Wangwu age: 23 other: {'city': 'Shanghai', 'job': 'teacher'}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="命名关键字参数"><a href="#命名关键字参数" class="headerlink" title="命名关键字参数"></a>命名关键字参数</h2><p>若要限制关键字参数名字，只接收特定的参数可以用命名关键字参数，形式为<code>*,限制参数名</code>。命名关键字参数可以设置默认值，调用函数时<strong>必须传入参数名</strong>。</p>
<p>函数定义如下，则表示只接收city和job作为关键字参数：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">def person(name,age,*,city,job):
    print(name,age,city,job)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>若函数定义中已经有一个可变参数，后面跟着的命名关键字参数就不需要特殊分隔符<code>*</code>了</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">def person(name,age,*args,city,job):
    print(name,age,args,city,job)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="参数组合"><a href="#参数组合" class="headerlink" title="参数组合"></a>参数组合</h2><p>定义函数可以使用必选参数、默认参数、可变参数、关键字参数和命名关键字参数，5种参数之间可以组合使用，但<strong>参数定义的顺序</strong>必须为：<strong>必选参数、默认参数、可变参数、命名关键字参数</strong>和<strong>关键字参数</strong>。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">def f1(a, b, c=0, *args, **kw):
    print('a =', a, 'b =', b, 'c =', c, 'args =', args, 'kw =', kw)
def f2(a, b, c=0, *, d, **kw):
    print('a =', a, 'b =', b, 'c =', c, 'd =', d, 'kw =', kw)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="练习题-2"><a href="#练习题-2" class="headerlink" title="练习题"></a>练习题</h3><p>以下函数允许计算两个数的乘积，请稍加改造，变成可接收一个或多个数并计算乘积：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"># -*- coding: utf-8 -*-
def mul(x, *y):
    for i in y:
        x=i*x
    return x
    
# 测试
print('mul(5) =', mul(5))
print('mul(5, 6) =', mul(5, 6))
print('mul(5, 6, 7) =', mul(5, 6, 7))
print('mul(5, 6, 7, 9) =', mul(5, 6, 7, 9))
if mul(5) != 5:
    print('测试失败!')
elif mul(5, 6) != 30:
    print('测试失败!')
elif mul(5, 6, 7) != 210:
    print('测试失败!')
elif mul(5, 6, 7, 9) != 1890:
    print('测试失败!')
else:
    try:
        mul()
        print('测试失败!')
    except TypeError:
        print('测试成功!')
#运行结果如下
mul(5) = 5
mul(5, 6) = 30
mul(5, 6, 7) = 210
mul(5, 6, 7, 9) = 1890
测试成功!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h2><p>递归函数优点是逻辑简单清晰，缺点是过深的调用会导致栈溢出</p>
<h3 id="练习题-3"><a href="#练习题-3" class="headerlink" title="练习题"></a>练习题</h3><p><a href="http://baike.baidu.com/view/191666.htm">汉诺塔</a>的移动可以用递归函数非常简单地实现。</p>
<p>请编写<code>move(n, a, b, c)</code>函数，它接收参数<code>n</code>，表示3个柱子A、B、C中第1个柱子A的盘子数量，然后打印出把所有盘子从A借助B移动到C的方法。</p>
<p>代码如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"># 期待输出:
# A --&gt; C
# A --&gt; B
# C --&gt; B
# A --&gt; C
# B --&gt; A
# B --&gt; C
# A --&gt; C
# -*- coding: utf-8 -*-
import math
def move(n, a, b, c):
    if n == 1:
        print(a, '--&gt;', c)
    else:
        move(n-1,a,c,b)
        print(a,'--&gt;',c)
        move(n-1,b,a,c)
move(3, 'A', 'B', 'C')
#运行结果如下：
A --&gt; C
A --&gt; B
C --&gt; B
A --&gt; C
B --&gt; A
B --&gt; C
A --&gt; C<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python学习笔记（九）</title>
    <url>/2022/10/12/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B9%9D%EF%BC%89/</url>
    <content><![CDATA[<h1 id="IO编程"><a href="#IO编程" class="headerlink" title="IO编程"></a>IO编程</h1><p>往外发数据的操作叫做Output，往外接收数据的操作叫做Intput。因此程序完成IO操作会有两个Intput和Output数据流。</p>
<p>在IO编程中存在速度不匹配的问题，其解决方法有两种：</p>
<p>第一种是<strong>同步IO</strong>，即让cpu等着，程序暂停执行后续的代码，等当前读写操作完成后再往下执行。</p>
<p>第二种是<strong>异步IO</strong>，即cpu不等待，让其慢慢读写，后续代码可以立刻执行，其复杂度远高于同步IO。</p>
<h2 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h2><p>读写文件就是请求操作系统打开一个文件对象，然后通过操作系统提供的接口从该文件对象中读取数据或把数据写入这个文件对象。</p>
<h3 id="读文件"><a href="#读文件" class="headerlink" title="读文件"></a>读文件</h3><p>使用<code>open()</code>函数读文件：<code>f=open(&#39;路径&#39;,&#39;r&#39;)</code>,其中<code>&#39;r&#39;</code>表示读取。</p>
<p>文件打开后，一次读取文件全部内容：<code>f.read()</code></p>
<p>关闭文件：<code>f.close()</code></p>
<p>为保证无论是否出错都能正确关闭文件，可引入<code>with</code>语句：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">with open(&#39;路径&#39;,&#39;r&#39;) as f:
	print(f.read())<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>每次最多读取size个字节的内容：<code>f.read(size)</code></p>
<p>每次读取一行内容：<code>f.readline()</code></p>
<p>一次读取所有内容并按行返回list：<code>f.readlines()</code></p>
<p>若文件很小，使用<code>read()</code>一次性读取最方便，若不能确定文件大小，反复调用<code>read(size)</code>比较好，若是配置文件，调用<code>readlines()</code>最方便。</p>
<h3 id="file-like-Object"><a href="#file-like-Object" class="headerlink" title="file-like Object"></a>file-like Object</h3><p>像<code>open()</code>函数返回的有个<code>read()</code>方法的对象，统称为file-like Object。file-like Object不要求从特定类中继承，只要写<code>read()</code>方法就行。除了file外，还可以是内存的字节流、网络流、自定义流等。</p>
<h3 id="二级制文件"><a href="#二级制文件" class="headerlink" title="二级制文件"></a>二级制文件</h3><p><code>open()</code>函数默认读取的是UTF-8编码的文本文件，若要读取二进制编码的文件，<code>open()</code>函数得写成：<code>f=open(&#39;路径&#39;,&#39;rb&#39;)</code>。</p>
<h3 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h3><p>若要读取非UTF-8编码的文件，需要给<code>open()</code>函数传入<code>encoding</code>参数。</p>
<p>如读取GDK编码的文件：<code>f=open(&#39;路径&#39;,encoding=&#39;gdk&#39;)</code>。</p>
<h3 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h3><p>写文件时也是用<code>open()</code>函数来打开文件，此时的<code>open()</code>函数得写成：<code>f=open(&#39;路径&#39;,&#39;w&#39;)</code>，其中<code>&#39;w&#39;</code>表示写文本文件或写二进制文件。</p>
<p>往文件中写入内容：<code>f.write(内容)</code></p>
<p>写完内容后要用<code>f.close()</code>语句来关闭文件。为保证无论是否出错都能正确关闭文件，可引入<code>with</code>语句：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">with open(&#39;路径&#39;,&#39;w&#39;) as f:
	f.write(&#39;123&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>若要写入特定文本文件，需要给<code>open()</code>函数传入<code>encoding</code>参数，如<code>f=open(&#39;路径&#39;,&#39;w&#39;，encoding=&#39;gdk&#39;)</code></p>
<p>若写入文件时文件 已存在，会直接<strong>覆盖原文件</strong>，若需要将内容<strong>追加到文件末尾</strong>，在open()语句中传入<code>&#39;a&#39;</code>来写入。其形式为：<code>open(&#39;路径&#39;,&#39;a&#39;)</code></p>
<h3 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h3><p>请将本地一个文本文件读为一个str并打印出来：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">fpath &#x3D; &#39;&#x2F;etc&#x2F;timezone&#39;

with open(fpath, &#39;r&#39;) as f:
    s &#x3D; f.read()
    print(s)
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>代码修改如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">fpath &#x3D; &#39;.&#x2F;1.txt&#39;
with open(fpath, &#39;r&#39;) as f:
    s &#x3D; f.read()
    print(s)
#运行结果如下：
helloworld!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="StringIO和BytesIO"><a href="#StringIO和BytesIO" class="headerlink" title="StringIO和BytesIO()"></a>StringIO和BytesIO()</h2><h3 id="StringIO"><a href="#StringIO" class="headerlink" title="StringIO"></a>StringIO</h3><p>StringIO就是在内存中读写str，其只能操作str数据。</p>
<p>要把str<strong>写入</strong>StringIO，需要先创建一个StringIO，然后在像写文件一样写入：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">from io import StringIO
f&#x3D;StringIO()
f.write(&#39;hello world!&#39;)
print(f.getvalue())
#运行结果如下：
hello world!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>获得写入后的str:</strong><code>getvalue()</code></p>
<p>要<strong>读取</strong>StringIO，需要先用一个str初始化StringIO，然后在像读文件一样读取：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">from io import StringIO
f&#x3D;StringIO(&#39;hello world!&#39;)
while True:
    s&#x3D;f.readline()
    if s&#x3D;&#x3D;&#39;&#39;:
        break
    print(s.strip())
#运行结果如下：
hello world!    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="BytesIO"><a href="#BytesIO" class="headerlink" title="BytesIO"></a>BytesIO</h3><p>StringIO就是在内存中读写bytes，其只能操作二进制数据。</p>
<p>使用BytesIO写入二进制数据如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">from io import BytesIO
f&#x3D;BytesIO()
f.write(&#39;中文&#39;.encode(&#39;utf-8&#39;))
print(f.getvalue())
#运行结果如下：
b&#39;\xe4\xb8\xad\xe6\x96\x87&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>使用BytesIO读取二进制数据如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">from io import BytesIO
f&#x3D;BytesIO(b&#39;\xe4\xb8\xad\xe6\x96\x87&#39;)
print(f.read())
#运行结果如下：
b&#39;\xe4\xb8\xad\xe6\x96\x87&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="操作文件和目录"><a href="#操作文件和目录" class="headerlink" title="操作文件和目录"></a>操作文件和目录</h2><p>使用<code>os</code>模块可以直接调用操作系统提供的接口函数。</p>
<p>os模块的基本功能如下所示：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">import os
print(os.name)#获取操作系统类型
#若输出nt，说明系统是Windows系统，若输出posix,说明是Linux、Unix或Moc OS X系统

print(os.uname)#获取详细的操作系统信息
#uname函数在Windows上不提供<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><p>系统定义的环境变量保存在<code>os.environ</code>中。</p>
<p>获取某个环境变量key的值：<code>os.environ.get(&#39;key&#39;)</code></p>
<h3 id="操作文件和目录-1"><a href="#操作文件和目录-1" class="headerlink" title="操作文件和目录"></a>操作文件和目录</h3><p>查看、创建和删除目录语句如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">import os
print(os.path.abspath(&#39;.&#39;))#查看当前目录的绝对路径

#在某个目录下创建新目录（新建文件并将路径加到某个目录中）
os.path.join(&#39;&#x2F;某个目录路径&#39;,&#39;新文件名称&#39;)#将某目录和新文件目录的路径合成一个
os.mkdir(&#39;&#x2F;新文件完整路径&#39;)#创建一个目录

os.rmkdir(&#39;&#x2F;新文件完整路径&#39;)#删除一个目录

os.path.split(&#39;&#x2F;新文件完整路径&#39;)#将目录拆分为某目录和文件名两个部分
os.path.splitext(&#39;&#x2F;新文件完整路径&#39;)#将目录拆分为某目录和文件名拓展名两个部分

os.rename(&#39;文件原名&#39;,&#39;文件新名&#39;)#重命名文件
os.remove(&#39;文件名&#39;)#删除文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>os</code>模块中不存在复制文件的函数。</p>
<p><strong>导入<code>os</code>模块后，列出当前目录下所有目录：</strong><code>print([x for x in os.listdir(&#39;.&#39;) if os.path.isdir(x)])</code></p>
<p><strong>导入<code>os</code>模块后，列出当前目录下所有<code>.py</code>文件：</strong><code>print([x for x in os.listdir(&#39;.&#39;) if os.path.isfile(x) and os.path.splitext(x)[1]==&#39;.py&#39;])</code></p>
<h3 id="练习题-1"><a href="#练习题-1" class="headerlink" title="练习题"></a>练习题</h3><p>1.利用<code>os</code>模块编写一个能实现<code>dir -l</code>输出的程序。</p>
<p>这里的<code>dir-l</code>命令指的是在linux系统下运行的命令，其与<code>ls -l</code>命令类似，作用皆为查看当前目录所有的文件和目录的详细信息。代码如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">import os
import time 

current&#x3D;os.getcwd()
filenum,filesize,dirnum&#x3D;0,0,0
for name in os.listdir(current):
    if os.path.isfile(name):
        print(&#39;%s\t\t%s\t%s&#39; % (time.strftime(&#39;%Y-%m-%d %H:%M:%S&#39;,time.localtime(os.path.getmtime(name))),os.path.getsize(name),name))
        filenum+&#x3D;1
        filesize+&#x3D;os.path.getsize(name)
    if os.path.isdir(name):
        print(&#39;%s\t\t%s\t%s&#39; % (time.strftime(&#39;%Y-%m-%d %H:%M:%S&#39;,time .localtime(os.path.getmtime(name))),os.path.getsize(name),name))
        dirnum+&#x3D;1
print(&#39;\t\t\t\t%d个文件，\t\t%d 字节&#39; % (filenum,filesize))        
print(&#39;\t\t\t\t%d个目录&#39; % (dirnum))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>2.编写一个程序，能在当前目录以及当前目录的所有子目录下查找文件名包含指定字符串的文件，并打印出相对路径。</p>
<p>代码如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">from genericpath import isfile
import os
import os.path

def find_str(current,str):
    for name in os.listdir(current):
        new_path&#x3D;os.path.join(current,name)
        if os.path.isfile(new_path):
            if str in name:
                print(&#39;name&#x3D;%s , dir&#x3D;%s&#39; % (name,(&#39;..&#x2F;&#39;+name)))
        else:
            find_str(new_path,str)  
if __name__&#x3D;&#x3D;&#39;__main__&#39;:
    find_str(os.path.abspath(&quot;.&quot;),&#39;.py&#39;)                <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><p>把变量从内存中变成可存储或传输的过程，称之为<strong>序列化</strong>(picking)。序列化后可以把序列化后的内容写入磁盘，或通过网络传输到别的机器上。把变量从序列化的对象重新读到内存里的过程，称之为<strong>反序列化</strong>(unpicking)。可以通过<code>pickle</code>模块来实现序列化。</p>
<p>将对象序列化并写入文件中：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">import pickle
d&#x3D;dict(name&#x3D;&#39;Bob&#39;,age&#x3D;20,score&#x3D;99)
print(pickle.dumps(d))#把任意对象序列化成一个bytes
f&#x3D;open(&#39;1.txt&#39;,&#39;wb&#39;)
pickle.dump(d,f)#直接把对象序列化后写入一个file-like Object
f.close()
#运行结果如下：
#文件1.txt中的结果
€?       &#125;??name攲Bob攲age擪?score擪cu.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>写入的<code>1.txt</code>文件中的内容便是python保存的对象内容。</p>
<p>反序列化刚才保存的对象：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">import pickle
f&#x3D;open(&#39;1.txt&#39;,&#39;rb&#39;)
d&#x3D;pickle.load(f)
f.close()
print(d)
#运行结果如下：
&#123;&#39;name&#39;: &#39;Bob&#39;, &#39;age&#39;: 20, &#39;score&#39;: 99&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>Pickle只能用于python，且可能不同版本的python彼此不兼容，因此只能用Pickle保存那些不重要的数据，</p>
<h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><p>若要在不同的编程语言之间传递对象，就必须把对象序列化为标准格式，比如XML、JSON。最好是序列化为JSON，因为其表示出来的就一个字符串，可以被所有语言读取，也更方便存储到磁盘或通过网络传输。</p>
<p>JSON表示的对象是标准的JavaScript语言的对象，JSON和Python内置的数据类型对象如下：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">JSON类型</th>
<th style="text-align:left">Python类型</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">{}</td>
<td style="text-align:left">dict</td>
</tr>
<tr>
<td style="text-align:left">[]</td>
<td style="text-align:left">list</td>
</tr>
<tr>
<td style="text-align:left">“string”</td>
<td style="text-align:left">str</td>
</tr>
<tr>
<td style="text-align:left">1234.56</td>
<td style="text-align:left">int或float</td>
</tr>
<tr>
<td style="text-align:left">true/false</td>
<td style="text-align:left">True/False</td>
</tr>
<tr>
<td style="text-align:left">null</td>
<td style="text-align:left">None</td>
</tr>
</tbody>
</table>
</div>
<p>通过json模块可以把python对象变成一个JSON：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">import json
d&#x3D;dict(name&#x3D;&#39;Bob&#39;,age&#x3D;20,score&#x3D;99)
print(json.dumps(d))#返回一个str，内容是标准的JSON
#运行结果如下：
&#123;&quot;name&quot;: &quot;Bob&quot;, &quot;age&quot;: 20, &quot;score&quot;: 99&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>把JSON反序列化为Python对象：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">import json
json_str&#x3D;&#39;&#123;&quot;age&quot;:22,&quot;score&quot;:93,&quot;name&quot;:&quot;Lisi&quot;&#125;&#39;
print(json.loads(json_str))
#运行结果如下：
&#123;&#39;age&#39;: 22, &#39;score&#39;: 93, &#39;name&#39;: &#39;Lisi&#39;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="JSON进阶"><a href="#JSON进阶" class="headerlink" title="JSON进阶"></a>JSON进阶</h3><p>默认情况下，class实例不是一个可序列化为JSON的对象。若要序列化该class实例，需要先写一个转换函数把实例转换成dict，再序列化：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">import json
class Student(object):
    def __init__(self,name,age,score):
        self.name&#x3D;name
        self.age&#x3D;age
        self.score&#x3D;score

def student2dict(std):
        return&#123;
            &#39;name&#39;:std.name,
            &#39;age&#39;:std.age,
            &#39;score&#39;:std.score
        &#125;    
s&#x3D;Student(&#39;Bob&#39;,22,99)        
print(json.dumps(s,default&#x3D;student2dict))
#运行结果如下：
&#123;&quot;name&quot;: &quot;Bob&quot;, &quot;age&quot;: 22, &quot;score&quot;: 99&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>不过以上代码只能应用于Student类，若要将<strong>任一class实例变为<code>dict</code></strong>可将<code>student2dict()</code>函数以及<code>print()</code>语句精简为以下语句：</p>
<p><code>print(json.dumps(s,default=lambda obj:obj.__dict__))</code></p>
<p>若要把JSON反序列化为一个class对象实例，可以先用<code>loads()</code>方法转化出一个<code>dict</code>对象，然后传入<code>object_hook</code>函数把<code>dict</code>转换为<code>Student</code>实例：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">import json
class Student(object):
    def __init__(self,name,age,score):
        self.name&#x3D;name
        self.age&#x3D;age
        self.score&#x3D;score
     
def dict2student(d):
    return Student(d[&#39;name&#39;],d[&#39;age&#39;],d[&#39;score&#39;])
    
s&#x3D;Student(&#39;Bob&#39;,22,99)   
json_str&#x3D;&#39;&#123;&quot;age&quot;:22,&quot;score&quot;:99,&quot;name&quot;:&quot;Bob&quot;&#125;&#39;
print(json.loads(json_str,object_hook&#x3D;dict2student))    
#运行结果如下：
&lt;__main__.Student object at 0x0000019E34217B80&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="练习题-2"><a href="#练习题-2" class="headerlink" title="练习题"></a>练习题</h3><p>对中文进行JSON序列化时，<code>json.dumps()</code>提供了一个<code>ensure_ascii</code>参数，观察该参数对结果的影响：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">import json
obj &#x3D; dict(name&#x3D;&#39;小明&#39;, age&#x3D;20)
s &#x3D; json.dumps(obj, ensure_ascii&#x3D;True)
#当ensure_ascii的值为True时，name以ascii字符码输出
#当ensure_ascii的值为False时，name以中文输出
print(s)
#运行结果如下：
&#123;&quot;name&quot;: &quot;\u5c0f\u660e&quot;, &quot;age&quot;: 20&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h1><p>对于操作系统来说，一个任务就是一个进程。<strong>线程是最小的执行单元</strong>，由于每个进程至少要干一件事，因此<strong>一个进程至少有一个线程</strong>，多个线程可以同时执行。python既支持多进程又支持多线程。</p>
<p><strong>多任务的实现</strong>有3种方式：</p>
<p><strong>多进程模式：</strong>启动多个进程，每个进程只有1个线程，但多个进程可以一起执行多个任务。</p>
<p><strong>多线程模式：</strong>启动一个进程，在进程内启动多个线程，让多个线程一起执行多个任务。</p>
<p><strong>多进程+多线程模式：</strong>启动多个进程，每个进程再启动多个线程，同时执行多个任务。</p>
<h2 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h2><p>fork()是一个系统调用函数，调用一次，返回两次。其中，当前进程（父进程）复制出来了一份子进程，父进程返回子进程的ID，子进程永远返回0。子进程可以通过<code>getppid()</code>获取父进程的ID。</p>
<p>在<strong>Mac系统</strong>中，python的os模块中封装了常见的系统调用函数，使其可以在程序中创建子进程：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">import os
print(&#39;Process (%s) start...&#39;% os.getpid())
pid&#x3D;os.fork()
if pid&#x3D;&#x3D;0:
    print(&#39;I am child process (%s) and my parent is %s.&#39;% (os.getpid(),os.getppid()))
else:
    print(&#39;I (%s) just created a child process(%s).&#39;%(os.getpid(),pid))   
#运行结果如下：
Process (42) start...
I (42) just created a child process(46).
I am child process (46) and my parent is 42.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>在Windows系统中</strong>没有<code>fork</code>调用，若要运行上面的代码，可以在<a href="onlinegdb.com">onlinegdb在线编译器</a>里选择<code>python3</code>语言后，编译运行。</p>
<p>有了fork调用，一个进程在接到新任务时就可以复制出一个子进程出来，父进程复制监听端口，子进程负责处理任务。</p>
<h3 id="multiprocessing"><a href="#multiprocessing" class="headerlink" title="multiprocessing"></a><code>multiprocessing</code></h3><p>若要在Windows上用python编写多进程程序，可以使用<code>multiprocessing</code>模块，其是一个跨平台版本的多进程模块，提供了一个process类来代表一个进程对象。</p>
<p>运用<code>multiprocessing</code>模块启动一个子进程并等待其结束：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">from multiprocessing import Process
import os
def run_proc(name):
    print(&#39;Run child process %s (%s)...&#39;%(name,os.getpid()))
if __name__&#x3D;&#x3D;&#39;__main__&#39;:
    print(&#39;Parent process %s.&#39;% os.getpid())    
    p&#x3D;Process(target&#x3D;run_proc,args&#x3D;(&#39;test&#39;,))#创建进程
    print(&#39;Child process will start.&#39;)
    p.start()#启动进程
    p.join()#等待子进程结束后再继续往下运行，用于进程间的同步
    print(&#39;Child process end.&#39;)
#运行结果如下：
Parent process 12664.
Child process will start.
Run child process test (9516)...
Child process end.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="Pool"><a href="#Pool" class="headerlink" title="Pool"></a><code>Pool</code></h3><p>若要启动大量的子进程，可以用进程池(pool)的方式<strong>批量创建子进程</strong>：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">from multiprocessing import Pool
import os,time,random
def long_time_task(name):
    print(&#39;Run task %s (%s)...&#39;% (name,os.getpid()))
    start&#x3D;time.time()
    time.sleep(random.random()*3)
    end&#x3D;time.time()
    print(&#39;Task %s runs %0.2f seconds.&#39;% (name,(end-start)))
    
if __name__&#x3D;&#x3D;&#39;__main__&#39;:
    print(&#39;Parent process %s.&#39;% os.getpid())
    p&#x3D;Pool(4)#设置最多同时执行4个进程，pool默认大小是cpu的核数
    for i in range(5):
        p.apply_async(long_time_task,args&#x3D;(i,))
    print(&#39;Waiting for all subprocesses done...&#39;)    
    p.close()#停止继续添加新进程
    p.join()#等待所有子进程执行完毕，调用前必须先调用close()
    print(&#39;All subprocesses done&#39;)
#运行结果如下：
Parent process 1228.
Waiting for all subprocesses done...
Run task 1 (1233)...
Run task 2 (1234)...
Run task 3 (1235)...
Run task 0 (1232)...
Task 2 runs 0.86 seconds.
Run task 4 (1234)...
Task 1 runs 1.77 seconds.
Task 3 runs 1.83 seconds.
Task 4 runs 1.04 seconds.
Task 0 runs 2.62 seconds.
All subprocesses done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="子进程"><a href="#子进程" class="headerlink" title="子进程"></a>子进程</h3><p><code>subprocess</code>模块可以启动一个子进程，然后控制其输入和输出。</p>
<p>如用<code>subprocess</code>模块在python代码中运行命令<code>nslookup www.python.org</code>：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">import subprocess
print(&#39;$ nslookup www.python.org&#39;)
r&#x3D;subprocess.call([&#39;nslookup&#39;,&#39;www.python.org&#39;])
print(&#39;Exit code:&#39;,r)
#运行结果如下：
$ nslookup www.python.org
服务器:  gdad07.gd.ctc.com
Address:  10.157.160.89

非权威应答:
名称:    dualstack.python.map.fastly.net
Addresses:  2a04:4e42:8c::223
          151.101.108.223
Aliases:  www.python.org

Exit code: 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>若子进程需要输入，可以调用<code>communicate()</code>方法来实现：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">import subprocess
print(&#39;$ nslookup&#39;)
p &#x3D; subprocess.Popen([&#39;nslookup&#39;], stdin&#x3D;subprocess.PIPE, stdout&#x3D;subprocess.PIPE, stderr&#x3D;subprocess.PIPE)
output, err &#x3D; p.communicate(b&#39;set q&#x3D;mx\npython.org\nexit\n&#39;)#输入语句
a&#x3D;output.decode(&#39;unicode_escape&#39;)#对unicode编码的output进行反编码
print(a)
print(&#39;Exit code:&#39;, p.returncode)
#运行结果如下：
$ nslookup
Ä¬ÈÏ·þÎñÆ÷:  gdad07.gd.ctc.com
Address:  10.157.160.89

&gt; &gt; ·þÎñÆ÷:  gdad07.gd.ctc.com
Address:  10.157.160.89

python.org      MX preference &#x3D; 50, mail exchanger &#x3D; mail.python.org

mail.python.org internet address &#x3D; 188.166.95.178
mail.python.org AAAA IPv6 address &#x3D; 2a03:b0c0:2:d0::71:1
&gt;
Exit code: 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="进程间通信"><a href="#进程间通信" class="headerlink" title="进程间通信"></a>进程间通信</h3><p><code>multiiprocessing</code>模块包装了底层的机制，提供了<code>Queue</code>、<code>Pips</code>等多种方式来交换数据，以实现进程间的通信。</p>
<p>以<code>Queue</code>为例，在父进程中创建两个子进程，一个往<code>Queue</code>里写数据，另一个从<code>Queue</code>里读数据：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">from multiprocessing import Process,Queue
import os,time,random
#写数据进程所执行的代码
def write(q):
    print(&#39;Process to write: %s&#39;%os.getpid())
    for value in [&#39;A&#39;,&#39;B&#39;,&#39;C&#39;]:
        print(&#39;Put %s to queue...&#39;% value)
        q.put(value)
        time.sleep(random.random())

#读数据进程所执行的代码        
def read(q):
    print(&#39;Process to read: %s&#39; %os.getpid())        
    while True:
        value&#x3D;q.get(True)
        print(&#39;Get %s from queue.&#39; %value)

if __name__&#x3D;&#x3D;&#39;__main__&#39;:
    q&#x3D;Queue()#父进程创建Queue，并传给各个子进程
    pw&#x3D;Process(target&#x3D;write,args&#x3D;(q,))
    pr&#x3D;Process(target&#x3D;read,args&#x3D;(q,))
    pw.start()#启动子进程pw，写入
    pr.start()#启动子进程pw，读取
    pw.join()#等待pw结束
    pr.join()#pr进程里是 死循环，无法等待其结束，只能强行终止
    pr.terminate()
#运行结果如下：
Process to write: 4684Process to read: 3796

Put A to queue...
Get A from queue.
Put B to queue...
Get B from queue.
Put C to queue...
Get C from queue.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在Unix/Linix下，<code>multiprocessing</code>模块封装了<code>fork()</code>调用，由于Windows没有<code>fork</code>调用，所以父进程所有python对象都必须通过<code>pickle</code>序列化再传到子进程去。</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python学习笔记（五）</title>
    <url>/2022/10/10/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%94%EF%BC%89/</url>
    <content><![CDATA[<h1 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h1><p>变量可以指向函数，函数的参数也能接受变量。当一个<strong>函数可以接收另一个函数</strong>作为参数时，这个函数被称作高阶函数。</p>
<p>最简单的高阶函数如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">def add(x,y,f):
    return f(x)+f(y)
print(add(-5,6,abs))    
#运行结果如下：
11<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="map-reduce函数"><a href="#map-reduce函数" class="headerlink" title="map/reduce函数"></a>map/reduce函数</h2><h3 id="map-函数"><a href="#map-函数" class="headerlink" title="map()函数"></a><code>map()</code>函数</h3><p><code>map()</code>函数接收两个参数，一个是函数，另一个是<code>Iterable</code>，<code>map</code>将传入的函数依次作用到序列的每个元素，并将结果作为新的<code>Iterable</code>返回。</p>
<p>例如要将函数<code>f(x)=x^2</code>作用到一个list<code>[1,2,3,4,5,6,7,8,9]</code>上：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">def f(x):
    return x*x
r&#x3D;map(f,[1,2,3,4,5,6,7,8,9])
print(list(r))
#运行结果如下：
[1, 4, 9, 16, 25, 36, 49, 64, 81]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="reduce-函数"><a href="#reduce-函数" class="headerlink" title="reduce()函数"></a><code>reduce()</code>函数</h3><p><code>reduce()</code>把函数作用到一个序列[x1,x2,x3,…]上，<code>reduce</code>接收两个函数后，把结果继续和序列的下一个元素做累计计算。</p>
<p>例如要对一个序列求和：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">from functools import reduce
def add(x,y):
    return x+y
print(reduce(add,[1,3,5,7,9]))
#运行结果如下：
25<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>将<code>map()</code>与<code>reduce()</code>函数结合，可以写出把str转换为int的函数：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">from functools import reduce
def fn(x,y):
    return x*10+y
def char2num(s):
    d&#x3D;&#123;&#39;0&#39;:0,&#39;1&#39;:1,&#39;2&#39;:2,&#39;3&#39;:3,&#39;4&#39;:4,&#39;5&#39;:5,&#39;6&#39;:6,&#39;7&#39;:7,&#39;8&#39;:8,&#39;9&#39;:9&#125;
    return d[s]    
print(reduce(fn,map(char2num,&#39;14512&#39;)))
#运行结果如下：
14512<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h3><p>利用<code>map()</code>函数，把用户输入的不规范的英文名字，变为首字母大写，其他小写的规范名字。输入：<code>[&#39;adam&#39;, &#39;LISA&#39;, &#39;barT&#39;]</code>，输出：<code>[&#39;Adam&#39;, &#39;Lisa&#39;, &#39;Bart&#39;]</code>：</p>
<p>代码如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">def normalize(name):
    for i in name:
        return str.title(name)
# 测试:
L1 &#x3D; [&#39;adam&#39;, &#39;LISA&#39;, &#39;barT&#39;]
L2 &#x3D; list(map(normalize, L1))
print(L2)
#运行结果如下：
[&#39;Adam&#39;, &#39;Lisa&#39;, &#39;Bart&#39;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>Python提供的<code>sum()</code>函数可以接受一个list并求和，请编写一个<code>prod()</code>函数，可以接受一个list并利用<code>reduce()</code>求积：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">from functools import reduce
def prod(L):
    return reduce(fn,L)
def fn(x,y):
    return x*y
print(&#39;3 * 5 * 7 * 9 &#x3D;&#39;, prod([3, 5, 7, 9]))
if prod([3, 5, 7, 9]) &#x3D;&#x3D; 945:
    print(&#39;测试成功!&#39;)
else:
    print(&#39;测试失败!&#39;)
#运行结果如下：
3 * 5 * 7 * 9 &#x3D; 945
测试成功!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>利用<code>map</code>和<code>reduce</code>编写一个<code>str2float</code>函数，把字符串<code>&#39;123.456&#39;</code>转换成浮点数<code>123.456</code>：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">#方法一：
from functools import reduce
def str2float(s):
    def fn(x,y):
        return x*10+y
    def gn(x,y):
        return x*0.1+y
    def char2num(t):
        d&#x3D;&#123;str(x):x for x in range(10)&#125;
        return d[t]
    a&#x3D;s.index(&#39;.&#39;)
    t1&#x3D;s[:a]
    t2&#x3D;s[a+1:]
    t2&#x3D;t2[::-1]
    p&#x3D;reduce(fn,map(char2num,t1))
    q&#x3D;reduce(gn,map(char2num,t2))*0.1
    return p+q
    
print(&#39;str2float(\&#39;123.456\&#39;) &#x3D;&#39;, str2float(&#39;123.456&#39;))
if abs(str2float(&#39;123.456&#39;) - 123.456) &lt; 0.00001:
    print(&#39;测试成功!&#39;)
else:
    print(&#39;测试失败!&#39;)
    
#方法二：
from functools import reduce
def str2float(s):
    d&#x3D;&#123;str(x):x for x in range(10)&#125;
    p&#x3D;reduce(lambda x,y:x*10+y,map(lambda s:d[s],s[:s.find(&#39;.&#39;)]))
    q&#x3D;reduce(lambda x,y:x*10+y,map(lambda s:d[s],s[s.find(&#39;.&#39;)+1:]))*0.001
    return p+q

print(&#39;str2float(\&#39;123.456\&#39;) &#x3D;&#39;, str2float(&#39;123.456&#39;))
if abs(str2float(&#39;123.456&#39;) - 123.456) &lt; 0.00001:
    print(&#39;测试成功!&#39;)
else:
    print(&#39;测试失败!&#39;)
#运行结果如下：
str2float(&#39;123.456&#39;) &#x3D; 123.456
测试成功!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="filter函数"><a href="#filter函数" class="headerlink" title="filter函数"></a>filter函数</h2><p><code>filter()</code>函数用于过滤序列，该函数接收一个函数和一个序列。与<code>map()</code>不同的是，<code>filter()</code>把传入的函数依次作用于每个元素后，根据<strong>返回值是True还是False</strong>来决定是<strong>保留还是丢弃</strong>该元素。</p>
<p>例如在一个list中删掉偶数，只保留奇数：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">def odd(n):
    return n%2&#x3D;&#x3D;1
print(list(filter(odd,[1,2,4,5,6,9,10,15])))
#运行结果如下：
[1, 5, 9, 15]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>filter()</code>函数返回 的是一个<code>Iterator</code>，因此要强迫<code>filter()</code>完成计算结果就需要用<code>list()</code>函数来获得所以结果并返回list。</p>
<p>用filter求1000以内素数例子：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">def _odd_iter(): #先构造从3开始的奇数列
    n &#x3D; 1
    while True:
        n &#x3D; n + 2
        yield n
def _not_divisible(n): #筛选函数
    return lambda x: x % n &gt; 0        
def primes():
    yield 2
    it &#x3D; _odd_iter() # 初始序列
    while True:
        n &#x3D; next(it) # 返回序列的第一个数
        yield n
        it &#x3D; filter(_not_divisible(n), it) # 构造新序列    
        # 打印1000以内的素数:
for n in primes():
    if n &lt; 1000:
        print(n)
    else:
        break<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="练习题-1"><a href="#练习题-1" class="headerlink" title="练习题"></a>练习题</h3><p>回数是指从左向右读和从右向左读都是一样的数，例如<code>12321</code>，<code>909</code>。请利用<code>filter()</code>筛选出回数：</p>
<p>代码如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">def is_palindrome(n):
    return str(n)&#x3D;&#x3D;str(n)[::-1]
# 测试:
output &#x3D; filter(is_palindrome, range(1, 1000))
print(&#39;1~1000:&#39;, list(output))
if list(filter(is_palindrome, range(1, 200))) &#x3D;&#x3D; [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 33, 44, 55, 66, 77, 88, 99, 101, 111, 121, 131, 141, 151, 161, 171, 181, 191]:
    print(&#39;测试成功!&#39;)
else:
    print(&#39;测试失败!&#39;)
#运行结果如下：  
1~1000: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 33, 44, 55, 66, 77, 88, 99, 101, 111, 121, 131, 141, 151, 161, 171, 181, 191, 202, 212, 222, 232, 242, 252, 262, 272, 282, 292, 303, 313, 323, 333, 343, 353, 363, 373, 383, 393, 404, 414, 424, 434, 444, 454, 464, 474, 484, 494, 505, 515, 525, 535, 545, 555, 565, 575, 585, 595, 606, 616, 626, 636, 646, 656, 666, 676, 686, 696, 707, 717, 727, 737, 747, 757, 767, 777, 787, 797, 808, 818, 828, 838, 848, 858, 868, 878, 888, 898, 909, 919, 929, 939, 949, 959, 969, 979, 989, 999]
测试成功!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="sorted函数"><a href="#sorted函数" class="headerlink" title="sorted函数"></a>sorted函数</h2><p><code>sorted()</code>可以对list进行排序，还可以接收一个key函数来实现自定义排序。</p>
<p>比如按绝对值大小排序：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">print(sorted([36,5,-12,9,-21],key&#x3D;abs))
#运行结果如下：
[5, 9, -12, -21, 36]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>默认情况下，用sorted()对字符串排序是<strong>按照ASCII的大小</strong>比较的，若要忽略大小写按照字母表排序，则可以写成：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">#正序排序
print(sorted([&#39;Bob&#39;,&#39;ant&#39;,&#39;Zoo&#39;,&#39;panda&#39;],key&#x3D;str.lower))
#反序排序
print(sorted([&#39;Bob&#39;,&#39;ant&#39;,&#39;Zoo&#39;,&#39;panda&#39;],key&#x3D;str.lower,reverse&#x3D;True))
#运行结果如下：
[&#39;ant&#39;, &#39;Bob&#39;, &#39;panda&#39;, &#39;Zoo&#39;]
[&#39;Zoo&#39;, &#39;panda&#39;, &#39;Bob&#39;, &#39;ant&#39;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="练习题-2"><a href="#练习题-2" class="headerlink" title="练习题"></a>练习题</h3><p>假设我们用一组tuple表示学生名字和成绩：</p>
<pre class="line-numbers language-none"><code class="language-none">L &#x3D; [(&#39;Bob&#39;, 75), (&#39;Adam&#39;, 92), (&#39;Bart&#39;, 66), (&#39;Lisa&#39;, 88)]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>请用<code>sorted()</code>对上述列表分别按名字排序：</p>
<p>代码如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">L &#x3D; [(&#39;Bob&#39;, 75), (&#39;Adam&#39;, 92), (&#39;Bart&#39;, 66), (&#39;Lisa&#39;, 88)]
def by_name(t):
    return t[0].lower()
L2 &#x3D; sorted(L, key&#x3D;by_name)
print(L2)
#运行结果如下：
[(&#39;Adam&#39;, 92), (&#39;Bart&#39;, 66), (&#39;Bob&#39;, 75), (&#39;Lisa&#39;, 88)]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>再按成绩从高到低排序：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">L &#x3D; [(&#39;Bob&#39;, 75), (&#39;Adam&#39;, 92), (&#39;Bart&#39;, 66), (&#39;Lisa&#39;, 88)]
def by_score(t):
    reverse&#x3D;True
    return -t[1] 
L2 &#x3D; sorted(L, key&#x3D;by_score)
print(L2)
#运行结果如下：
[(&#39;Adam&#39;, 92), (&#39;Lisa&#39;, 88), (&#39;Bob&#39;, 75), (&#39;Bart&#39;, 66)]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="返回函数"><a href="#返回函数" class="headerlink" title="返回函数"></a>返回函数</h1><p>高阶函数除了可以接收函数作为参数外，还可以把函数作为结果值返回。</p>
<p>例如，实现一个可变参数的求和，根据需要计算结果：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">def lazy_sum(*args):
    def sum():
        a&#x3D;0
        for n in args:
            a&#x3D;a+n
        return a
    return sum
f&#x3D;lazy_sum(1,2,3,4,5)
print(f)
print(f())
#运行结果如下：
&lt;function lazy_sum.&lt;locals&gt;.sum at 0x7f3aaacb9ca0&gt;
15<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在调用<code>lazy_sum()</code>函数时，返回的是求和函数而不是求和结果。调用函数<code>f</code>时才真正计算求和的结果。当调用<code>lazy_sum()</code>函数时，每次调用都会返回一个新的函数，即使传入相同参数，返回的函数也不会相同。</p>
<h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>上面的例子中，内部函数<code>sum</code>可以引用外部函数<code>lazy_sum()</code>的参数和局部变量。当<code>lazy_sum()</code>返回函数<code>sum</code>时，相关参数和变量<strong>仍保存在返回的函数</strong>中。这种程序结构便称为闭包。</p>
<p>例如，在下面例子中<code>f1()</code>,<code>f2()</code>和<code>f3()</code>调用的结果应该是<code>1</code>,<code>4</code>,<code>9</code>，但实际结果是<code>9 9 9</code>。这便是由于返回函数引用了变量<code>i</code>，但它并非立刻执行，等到3个函数都返回时，所引用的变量已经变成了<code>3</code>，故最终结果为<code>9</code>。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">def count():
    fn&#x3D;[]
    for i in range(1,4):
        def f():
            return i*i
        fn.append(f)
    return fn
f1,f2,f3&#x3D;count()
print(f1(),f2(),f3())
#运行结果如下：
9 9 9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>注意</strong>：返回函数不要引用任何<strong>循坏变量或后续会发生变化的变量</strong>。若一定要引用循环变量，便再创建一个函数，用该函数的参数<strong>绑定循环变量当前的值</strong>，具体操作如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">def count():
    def g(i):
        def f():
            return i*i
        return f
    fn&#x3D;[]
    for i in range(1,4):    
        fn.append(g(i))
    return fn
f1,f2,f3&#x3D;count()
print(f1(),f2(),f3())
#运行结果如下：
1 4 9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="nonlocal"><a href="#nonlocal" class="headerlink" title="nonlocal"></a>nonlocal</h2><p>使用闭包，就是内层函数引用了外层函数的局部变量。如果只读外层变量的值，返回的闭包函数调用一切正常，但对外层函数的局部变量进行运算就会报错。</p>
<p>若内层函数想要计算外层函数的局部变量，需要在内部函数内部加一个<code>nonlocal 局部变量名</code>的声明。因此在使用闭包时，对外层变量赋值前，需要使用<code>nonlocal</code>声明改变了不是当前函数的局部变量。</p>
<h2 id="练习题-3"><a href="#练习题-3" class="headerlink" title="练习题"></a>练习题</h2><p>利用闭包返回一个计数器函数，每次调用它返回递增整数：</p>
<p>代码如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">def createCounter():
    x&#x3D;0
    def counter():
        nonlocal x
        x&#x3D;x+1    
        return x
    return counter
# 测试:
counterA &#x3D; createCounter()
print(counterA(), counterA(), counterA(), counterA(), counterA()) # 1 2 3 4 5
counterB &#x3D; createCounter()
if [counterB(), counterB(), counterB(), counterB()] &#x3D;&#x3D; [1, 2, 3, 4]:
    print(&#39;测试通过!&#39;)
else:
    print(&#39;测试失败!&#39;)
#运行结果如下：
1 2 3 4 5
测试通过!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h1><p>传入函数时，有时不需要显示定义函数，直接传入匿名函数更方便。如匿名函数<code>lambda x:x*x</code>实际上就是：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">def f(x):
	return x*x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>匿名函数有个限制，就是只能有一个表达式，不用写<code>return</code>，返回值就是该表达式的结果。由于匿名函数没有名字，不必担心函数名冲突。匿名函数是一个函数对象，可以把匿名函数赋值给一个变量，再利用变量来调用该函数，也可以把匿名函数作为返回值返回。</p>
<h2 id="练习题-4"><a href="#练习题-4" class="headerlink" title="练习题"></a>练习题</h2><p>请用匿名函数改造下面的代码：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">def is_odd(n):
    return n % 2 &#x3D;&#x3D; 1

L &#x3D; list(filter(is_odd, range(1, 20)))
print(L)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>代码如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">print(list(filter(lambda n:n % 2 &#x3D;&#x3D; 1, range(1, 20))))
#运行结果如下：
[1, 3, 5, 7, 9, 11, 13, 15, 17, 19]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python学习笔记（十一）</title>
    <url>/2022/10/13/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p>正则表达式是一种用来匹配字符串强有力的武器。凡是符合规则的字符串，就认为它“匹配”了，否则该批字符串就是不合法的。正则表达式是用字符串表示，其用字符匹配规则为：</p>
<p>若在正则表达式中直接给出字符，就是精确匹配。</p>
<p><strong>匹配一个数字: </strong> <code>\d</code></p>
<p>如<code>&#39;00\d&#39;</code>可以匹配<code>&#39;007&#39;</code>但无法匹配<code>&#39;00A&#39;</code></p>
<p><code>&#39;\d\d\d&#39;</code>可以匹配<code>&#39;029&#39;</code></p>
<p><strong>匹配一个字母或数字:</strong> <code>\w</code></p>
<p>如<code>&#39;\w\w\d&#39;</code>可以匹配<code>&#39;as2&#39;</code></p>
<p><strong>匹配任意一个字符：</strong><code>.</code></p>
<p>如<code>&#39;py.&#39;</code>可以匹配<code>&#39;pya&#39;</code>、<code>&#39;py@&#39;</code>、<code>&#39;py2&#39;</code>等。</p>
<p><strong>匹配任意个字符（包括0个）：</strong> <code>*</code></p>
<p><strong>匹配至少一个字符：</strong> <code>+</code></p>
<p><strong>匹配零个或一个字符：</strong> <code>?</code></p>
<p><strong>匹配n个字符：</strong> <code>&#123;n&#125;</code></p>
<p><strong>匹配n-m个字符：</strong> <code>&#123;n-m&#125;</code></p>
<p><strong>匹配一个空格（包括Tab等空白符）：</strong> <code>\s</code></p>
<p><strong>匹配至少一个空格（包括Tab等空白符）：</strong> <code>\s+</code></p>
<p><strong>特殊字符要用<code>\+特殊字符</code>转义。</strong></p>
<h3 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h3><p>若要做更精确地匹配，可以用<code>[]</code>表示范围。</p>
<p><strong>匹配一个数字、字母或者下划线：</strong> <code>[0-9a-zA-Z\_]</code></p>
<p>注意： <code>[0-9a-zA-Z\_]</code>中的<code>0-9</code>代表数字，<code>a-zA-Z</code>代表字母，<code>\_</code>代表下划线。</p>
<p><strong>匹配至少由一个数字、字母或者下划线组成的字符串：</strong> <code>[0-9a-zA-Z\_]+</code></p>
<p>注意： <code>[0-9a-zA-Z\_]+</code>中的<code>+</code>代表大于等于1次的匹配前面的子表达式。</p>
<p><strong>匹配由字母或下划线开头，后接任意个由一个数字、字母或者下划线组成的字符串：</strong> <code>[a-zA-Z\_][0-9a-zA-Z\_]*</code></p>
<p><strong>匹配长度为1-20个字符的变量（前面1个字符+后面最多19个字符）：</strong>  <code>[a-zA-Z\_][0-9a-zA-Z\_]&#123;0,19&#125;</code></p>
<p><strong>匹配A或B：</strong> <code>A|B</code></p>
<p><strong>表示行的开头：</strong> <code>^</code></p>
<p><strong>表示必须以数字开头：</strong> <code>^\d</code></p>
<p><strong>表示行的结束：</strong> <code>$</code></p>
<p><strong>表示必须以数字结束：</strong> <code>\d$</code></p>
<h3 id="re模块"><a href="#re模块" class="headerlink" title="re模块"></a>re模块</h3><p>python提供了re模块，包含所有正则表达式的功能，由于python的字符串本身也用<code>\</code>转义，所以在字符串需要转义时，在字符串前面加<code>r</code>前缀。如</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">s&#x3D;&#39;ABc\\-001&#39;#python的字符串，其对应的正则表达式字符串变成&#39;ABc\-001&#39;
s&#x3D;r&#39;ABc\-001&#39;#其对应的正则表达式字符串不变&#39;ABc\-001&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>用<code>re</code>模块的match()方法判断正则表达式是否匹配，若匹配成功，返回一个<code>match</code>对象，否则返回<code>None</code>：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">import re
print(re.match(r&#39;^\d&#123;3&#125;\-\d&#123;3,8&#125;$&#39;,&#39;010-12345&#39;))
print(re.match(r&#39;^\d&#123;3&#125;\-\d&#123;3,8&#125;$&#39;,&#39;010 12345&#39;))
#运行结果如下：
&lt;re.Match object; span&#x3D;(0, 9), match&#x3D;&#39;010-12345&#39;&gt;
None<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>常见的判断方法是：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">test&#x3D;&#39;用户输入的字符串&#39;
if re.match(r&#39;正则表达式&#39;,test):
	print(&#39;ok&#39;)
else:
	print(&#39;failed&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="切分字符串"><a href="#切分字符串" class="headerlink" title="切分字符串"></a>切分字符串</h3><p>如果用户输入了一组标签，记得用正则表达式把不规范的输转化成正确的数组。</p>
<p>正常的切分代码：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">print(&#39;a b   c&#39;.split(&#39; &#39;))
#运行结果如下：
[&#39;a&#39;, &#39;b&#39;, &#39;&#39;, &#39;&#39;, &#39;c&#39;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>用正则表达式切分字符串：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">import re
print(re.split(r&#39;\s+&#39;,&#39;a b    c&#39;))
#运行结果如下：
[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>往字符串里增加<code>,</code>，<code>:</code>，<code>;</code>等符号，正则表达式切分：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">import re
print(re.split(r&#39;[\s+\,\:\;]+&#39;,&#39;a b  c,d : ;  c&#39;))
#运行结果如下：
[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;c&#39;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><p>除了简单判断是否匹配外，正则表达式还有提取子串的强大功能。用<code>()</code>表示的是要提取的分组。</p>
<p>比如<code>^(\d&#123;3&#125;)-(\d&#123;3,8&#125;)$</code>分别定义了两个组，可以直接从匹配的字符串中提取 出区号和本地号码：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">import re
m&#x3D;re.match(r&#39;^(\d&#123;3&#125;)-(\d&#123;3,8&#125;)$&#39;,&#39;010-12345&#39;)
print(m)
print(m.group(0))
print(m.group(1))
print(m.group(2))
#运行结果如下：
&lt;re.Match object; span&#x3D;(0, 9), match&#x3D;&#39;010-12345&#39;&gt;
010-12345
010
12345<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>正则表达式可以直接识别合法的时间，但有时用正则表达式也无法做到完全验证。</p>
<p>比如识别日期：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">import re
t&#x3D;&#39;19:05:30&#39;
g&#x3D;&#39;2-30&#39;#2-30为非法日期
#识别时间
m&#x3D;re.match(r&#39;^(0[0-9]|1[0-9]|2[0-3]|[0-9])\:(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|[0-9])\:(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|[0-9])$&#39;,t)
#识别日期
x&#x3D;re.match(r&#39;^(0[1-9]|1[0-2]|[0-9])-(0[1-9]|1[0-9]|2[0-9]|3[0-1]|[0-9])$&#39;,g)
print(m.groups())
print(x.groups())
#运行结果如下：
(&#39;19&#39;, &#39;05&#39;, &#39;30&#39;)
(&#39;2&#39;, &#39;30&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="贪婪匹配"><a href="#贪婪匹配" class="headerlink" title="贪婪匹配"></a>贪婪匹配</h3><p>正则匹配默认是贪婪匹配，即匹配尽可能多的字符。若要采用非贪婪匹配，则需要在需要采用非贪婪匹配的字符后面加个<code>?</code>号。</p>
<p>如要匹配出数字后面的<code>0</code>：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">import re
print(re.match(r&#39;^(\d+)(0*)$&#39;,&#39;102300&#39;).groups())#\d+采用的是贪婪匹配
print(re.match(r&#39;^(\d+?)(0*)$&#39;,&#39;102300&#39;).groups())#\d+采用非贪婪匹配
#运行结果如下：
(&#39;102300&#39;, &#39;&#39;)
(&#39;1023&#39;, &#39;00&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p>当在python中使用正则表达式时，re模块内部会干两件事：</p>
<ul>
<li>编译正则表达式，若正则表达式的字符串本身不合法，会报错</li>
<li>用编译后的正则表达式取匹配字符串</li>
</ul>
<p>若一个<strong>正则表达式需要重复使用几千次</strong>，处于效率考虑，可以<strong>对该正则表达式进行预编译</strong>，这样后面重复使用时就不需要编译了，可直接匹配。编译后生成Regular Expression对象，由于该对象已经包含了正则表达式，因而调用对应的方法时不用给出正则字符串。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">import re
re_telephone&#x3D;re.compile(r&#39;^(\d&#123;3&#125;)-(\d&#123;3,8&#125;)$&#39;)#编译
#使用
print(re_telephone.match(&#39;010-12345&#39;).groups())
print(re_telephone.match(&#39;010-1225&#39;).groups())
#运行结果如下：
(&#39;010&#39;, &#39;12345&#39;)
(&#39;010&#39;, &#39;1225&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h3><p>请尝试写一个验证Email地址的正则表达式。版本一应该可以验证出类似的Email：</p>
<ul>
<li><p>someone@gmail.com</p>
</li>
<li><p>bill.gates@microsoft.com</p>
<p>  代码如下：</p>
</li>
</ul>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">import re
def is_valid_email(addr):
    if re.match(r&#39;^([a-zA-Z\.]+)@([0-9a-zA-Z]+).com$&#39;,addr):
        return True
assert is_valid_email(&#39;someone@gmail.com&#39;)
assert is_valid_email(&#39;bill.gates@microsoft.com&#39;)
assert not is_valid_email(&#39;bob#example.com&#39;)
assert not is_valid_email(&#39;mr-bob@example.com&#39;)
print(&#39;ok&#39;)    

#运行结果如下：
ok<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>版本二可以提取出带名字的Email地址：</p>
<ul>
<li><Tom paris> tom@voyager.org =&gt; Tom Paris</Tom></li>
<li>bob@example.com =&gt; bob</li>
</ul>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">import re
def name_of_email(addr):
    t&#x3D;re.match(r&#39;^&lt;?([a-zA-Z]+\s?[a-zA-Z]+)&gt;?\s?([a-zA-Z])*@([a-zA-Z]+\.[a-zA-Z]+)$&#39;,addr)
    return t.group(1)
# 测试:
assert name_of_email(&#39;&lt;Tom Paris&gt; tom@voyager.org&#39;) &#x3D;&#x3D; &#39;Tom Paris&#39;
assert name_of_email(&#39;tom@voyager.org&#39;) &#x3D;&#x3D; &#39;tom&#39;
print(&#39;ok&#39;)
#运行结果如下：
ok<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="访问数据库"><a href="#访问数据库" class="headerlink" title="访问数据库"></a>访问数据库</h1><h2 id="使用SQLite"><a href="#使用SQLite" class="headerlink" title="使用SQLite"></a>使用SQLite</h2><p>一个数据库连接称为<code>connection</code>，连接到数据库后，需要打开游标，称之为<code>Cursor</code>，通过<code>Cursor</code>执行SQL语句，然后获得执行结果。<strong>执行插入等操作后要调用<code>commit()</code>提交事务。</strong></p>
<p>由于SQLite的驱动内置在python标准库中，故可以直接操作SQLite数据库。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">import sqlite3#导入数据库
#连接到数据库，数据库文件是test.db。若文件不存在会自动在当前目录创建
conn&#x3D;sqlite3.connect(&#39;test.db&#39;)
cursor&#x3D;conn.cursor()#创建一个cursor
#print(cursor.execute(&#39;drop table user&#39;))#删除user表
print(cursor.execute(&#39;create table user (id varchar(20)  primary key, name varchar(20))&#39;))#创建user表
print(cursor.execute(&#39;insert into user (id,name) values (\&#39;1\&#39;,\&#39;Michael\&#39;)&#39;))#往表中插入一条记录
print(cursor.rowcount)#获得插入的行数
print(cursor.execute(&#39;select * from user where id&#x3D;?&#39;, (&#39;1&#39;,)))#查询表中记录
print(cursor.fetchall())#输出表中记录
conn.commit#提交事务
conn.close()#关闭Cursor
conn.close()#关闭连接

#运行结果如下：
&lt;sqlite3.Cursor object at 0x0000027546A17BC0&gt;
&lt;sqlite3.Cursor object at 0x0000027546A17BC0&gt;
1
&lt;sqlite3.Cursor object at 0x0000027546A17BC0&gt;
[(&#39;1&#39;, &#39;Michael&#39;)]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="练习题-1"><a href="#练习题-1" class="headerlink" title="练习题"></a>练习题</h3><p>请编写函数，在Sqlite中根据分数段查找指定的名字：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">import os, sqlite3

db_file &#x3D; os.path.join(os.path.dirname(__file__), &#39;test.db&#39;)
if os.path.isfile(db_file):
    os.remove(db_file)

# 初始数据:
conn &#x3D; sqlite3.connect(db_file)
cursor &#x3D; conn.cursor()
#cursor.execute(&#39;drop table user&#39;)
cursor.execute(&#39;create table user(id varchar(20) primary key, name varchar(20), score int)&#39;)
cursor.execute(r&quot;insert into user values (&#39;A-001&#39;, &#39;Adam&#39;, 95)&quot;)
cursor.execute(r&quot;insert into user values (&#39;A-002&#39;, &#39;Bart&#39;, 62)&quot;)
cursor.execute(r&quot;insert into user values (&#39;A-003&#39;, &#39;Lisa&#39;, 78)&quot;)
conn.commit()


def get_score_in(low, high):
    &#39; 返回指定分数区间的名字，按分数从低到高排序 &#39;
    cursor.execute(&#39;select name from user where score between ? and ? order by score&#39;,(low,high))
    return [n[0] for n in cursor.fetchall()]

# 测试:
assert get_score_in(80, 95) &#x3D;&#x3D; [&#39;Adam&#39;], get_score_in(80, 95)
assert get_score_in(60, 80) &#x3D;&#x3D; [&#39;Bart&#39;, &#39;Lisa&#39;], get_score_in(60, 80)
assert get_score_in(60, 100) &#x3D;&#x3D; [&#39;Bart&#39;, &#39;Lisa&#39;, &#39;Adam&#39;], get_score_in(60, 100)
cursor.close()
conn.close()
print(&#39;Pass&#39;)

#运行结果如下：
Pass<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="使用MySQL"><a href="#使用MySQL" class="headerlink" title="使用MySQL"></a>使用MySQL</h2><p>连接到MySQL服务器的test数据库的命令绝大部分与SQLite相同，仅在连接数据库的部分有所差别，注意MySQL的占位符是<code>%s</code>：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"># 导入MySQL驱动:
import mysql.connector
# 注意把password设为你的root口令:
conn &#x3D;
mysql.connector.connect(user&#x3D;&#39;root&#39;, password&#x3D;&#39;password&#39;, database&#x3D;&#39;test&#39;)
cursor &#x3D; conn.cursor()
# 插入一行记录，注意MySQL的占位符是%s:
cursor.execute(&#39;insert into user (id, name) values (%s, %s)&#39;, [&#39;1&#39;, &#39;Michael&#39;])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="使用SQLAlchemy"><a href="#使用SQLAlchemy" class="headerlink" title="使用SQLAlchemy"></a>使用<code>SQLAlchemy</code></h2><p><code>SQLAlchemy</code>是有名的ORM框架，其可以把数据库表的一行记录与一个对象相互做自动转换。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">from tkinter.tix import Tree
from sqlalchemy import Column,String,create_engine
from sqlalchemy.orm import sessionmaker
from sqlalchemy.ext.declarative import declarative_base

Base&#x3D;declarative_base()#创建对象基类
class User(Base):#定义user对象
    __tablename__&#x3D;&#39;user&#39;#表名
    id&#x3D;Column(String(20),primary_key&#x3D;True)
    name&#x3D;Column(String(20))
engine&#x3D;create_engine(&#39;mysql+mysqlconnector:&#x2F;&#x2F;root:password@localhost:3306&#x2F;test&#39;)    #初始化数据库连接
DBSession&#x3D;sessionmaker(bind&#x3D;engine)#创建DBSession类型
session&#x3D;DBSession()#创建session对象
new_user&#x3D;User(id&#x3D;&#39;5&#39;,name&#x3D;&#39;Bob&#39;)#创建新User对象   
session.add(new_user)#添加到session
session.commit()#提交到数据库
session.close()#关闭session<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>查询数据如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">session&#x3D;DBSession()#创建session对象
#创建Query查询，filter是where条件，最后调用one()返回唯一行，如果调用all()则返回所有行:
user&#x3D;session.query(User).filter(User.id&#x3D;&#39;5&#39;).one()
# 打印类型和对象的name属性:
print(&#39;type:&#39;,type(user))
print(&#39;name:&#39;,user.name)
session.close()
#运行结果如下：
type: &lt;class &#39;__main__.User&#39;&gt;
name: Bob<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python学习笔记（八）</title>
    <url>/2022/10/12/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AB%EF%BC%89/</url>
    <content><![CDATA[<h1 id="错误、调试和测试"><a href="#错误、调试和测试" class="headerlink" title="错误、调试和测试"></a>错误、调试和测试</h1><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><p>在程序运行过程中，可以实现设定发生错误时返回一个错误代码，这样就可以知道是否出错及其出错原因是什么。</p>
<h3 id="错误处理机制python的错误处理机制-try-except-finally-。"><a href="#错误处理机制python的错误处理机制-try-except-finally-。" class="headerlink" title="错误处理机制python的错误处理机制:try...except...finally..。"></a>错误处理机制python的错误处理机制:<code>try...except...finally..</code>。</h3><p>当认为某段代码可能会出错时，用<code>try</code>来运行这段代码，如果执行出错，则后续的代码不会继续执行，而是直接跳转到错误处理代码<code>except</code>语句块中，执行完<code>except</code>语句块后，如果还有<code>finally</code>语句块，则执行语句块，错误处理机制执行完毕。例如：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">try:
    print(&#39;try...&#39;)
    r&#x3D;10&#x2F;int(&#39;a&#39;)
    print(&#39;result:&#39;,r)
except ValueError as e:
    print(&#39;ValueError:&#39;,e)
except ZeroDivisionError as e:
    print(&#39;except:&#39;,e)
else:
    print(&#39;no error!&#39;)    
finally:
    print(&#39;finally...&#39;)
print(&#39;END&#39;)

#运行结果如下：
try...
ValueError: invalid literal for int() with base 10: &#39;a&#39;
finally...
END<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果没有错误发生，<code>except</code>语句块不会被执行，但如果有<code>finally</code>语句块，<code>finally</code>语句块一定会被执行。在使用<code>except</code>时要注意<strong>先写子类的异常</strong>，基类的异常在后。</p>
<p>使用<code>try...except</code>捕获错误可以跨越多层调用。不需要在每个可能出错的地方去捕获错误。</p>
<h3 id="调用栈"><a href="#调用栈" class="headerlink" title="调用栈"></a>调用栈</h3><p>若错误没有被捕获，就会一直往上抛，直至最后被python解释器捕获，打印一个错误信息，程序就退出了。出错的时候一定要分析错误的调用栈信息，才能定位错误的位置。</p>
<h3 id="记录错误"><a href="#记录错误" class="headerlink" title="记录错误"></a>记录错误</h3><p>如果能捕获错误，就可以把错误堆栈打印出来，分析错误原因的同时，让程序继续执行下去。</p>
<p><code>logging</code>模块可以记录错误信息。导包后的调用形式：<code>logging.exception(e)</code>。</p>
<h3 id="抛出错误"><a href="#抛出错误" class="headerlink" title="抛出错误"></a>抛出错误</h3><p>因为错误是class，捕获一个错误就是捕获到该class的一个实例。因此自己编写的函数也可以抛出错误。若需要抛出错误，可以先定义一个错误的class，然后用<code>raise</code>语句抛出一个错误。但只有在必要的时候才定义自己的错误类型，若可以选择内置的错误类型，尽量使用内置的错误类型。</p>
<p>抛出错误例子：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">class FooError(ValueError):
    pass
def foo(s):
    n&#x3D;int(s)
    if n&#x3D;&#x3D;0:
        raise FooError(&#39;invalid value: %s&#39; % s)
    return 10&#x2F;n
foo(&#39;0&#39;)

#运行结果如下：
Traceback (most recent call last):
  File &quot;main.py&quot;, line 8, in &lt;module&gt;
    foo(&#39;0&#39;)
  File &quot;main.py&quot;, line 6, in foo
    raise FooError(&#39;invalid value: %s&#39; % s)
__main__.FooError: invalid value: 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>另一种错误处理方式为，捕获错误后，又把错误通过<code>raise</code>语句往上抛，让顶层的调用者去处理。</p>
<p><code>raise</code>语句如果不带参数，就会把当前错误原样抛出。若在<code>except</code>中<code>raise</code>一个Error，可以将一种类型的错误转化为另一种类型，但不能将一个<code>IOError</code>转换成毫不相干的<code>ValueError</code>。</p>
<h4 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h4><p>运行下面的代码，根据异常信息进行分析，定位出错误源头，并修复：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">from functools import reduce

def str2num(s):
    return int(s)

def calc(exp):
    ss &#x3D; exp.split(&#39;+&#39;)
    ns &#x3D; map(str2num, ss)
    return reduce(lambda acc, x: acc + x, ns)

def main():
    r &#x3D; calc(&#39;100 + 200 + 345&#39;)
    print(&#39;100 + 200 + 345 &#x3D;&#39;, r)
    r &#x3D; calc(&#39;99 + 88 + 7.6&#39;)
    print(&#39;99 + 88 + 7.6 &#x3D;&#39;, r)

main()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>修复后的代码如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">from functools import reduce

def str2num(s):
    return float(s)

def calc(exp):
    ss &#x3D; exp.split(&#39;+&#39;)
    ns &#x3D; map(str2num, ss)
    return reduce(lambda acc, x: acc + x, ns)

def main():
    r &#x3D; calc(&#39;100 + 200 + 345&#39;)
    print(&#39;100 + 200 + 345 &#x3D;&#39;, r)
    r &#x3D; calc(&#39;99 + 88 + 7.6&#39;)
    print(&#39;99 + 88 + 7.6 &#x3D;&#39;, r)

main()

#运行结果如下：
100 + 200 + 345 &#x3D; 645.0
99 + 88 + 7.6 &#x3D; 194.6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><h3 id="方法一：print"><a href="#方法一：print" class="headerlink" title="方法一：print()"></a>方法一：<code>print()</code></h3><p>用<code>print()</code>把可能有问题的变量打印出来看</p>
<h3 id="方法二：断言-assert"><a href="#方法二：断言-assert" class="headerlink" title="方法二：断言(assert)"></a>方法二：断言(assert)</h3><p>凡是用print()来看的地方，都可以用断言(assert)来替代。如：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">def foo(s):
    n&#x3D;int(s)
    assert n!&#x3D;0,&#39;n is zero!&#39;#若n&#x3D;0,则会抛出AssertionError错误
    return 10&#x2F;n
foo(&#39;0&#39;)
#运行结果如下：
Traceback (most recent call last):
  File &quot;main.py&quot;, line 5, in &lt;module&gt;
    foo(&#39;0&#39;)
  File &quot;main.py&quot;, line 3, in foo
    assert n!&#x3D;0,&#39;n is zero!&#39;
AssertionError: n is zero!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>python解释器中可以用<code>python -O 文件名</code>来关闭assert。关闭后，所有的assert语句都相当于一个pass。</p>
<h3 id="方法三：logging"><a href="#方法三：logging" class="headerlink" title="方法三：logging"></a>方法三：<code>logging</code></h3><p>把<code>print()</code>替换为<code>logging</code>后，与<code>assert</code>比，<code>logging</code>不会抛出错误，且可以输出到文件。通过配置logging，可以将一条语句同时输出到不同的地方，如文件和控制台。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">import logging 
logging.basicConfig(level&#x3D;logging.INFO)#指定记录信息的级别

s&#x3D;&#39;0&#39;
n&#x3D;int(s)
logging.info(&#39;n&#x3D;%d&#39; % n)#输出一段文本
print(10&#x2F;n)
#运行结果如下：
INFO:root:n&#x3D;0
Traceback (most recent call last):
  File &quot;main.py&quot;, line 7, in &lt;module&gt;
    print(10&#x2F;n)
ZeroDivisionError: division by zero<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>logging有debug、info、warning、error等几个级别，当指定<code>level=INFO</code>时，<code>logging.debug</code>就不起作用了。当指定<code>level=WARNING</code>时，<code>logging.debug</code>和<code>logging.INFO</code>就不起作用了。</p>
<h3 id="方法四：pdb"><a href="#方法四：pdb" class="headerlink" title="方法四：pdb"></a>方法四：<code>pdb</code></h3><p>启动python的调制器pdb，可以让程序以单步方式运行，类似于c++的单点调试，可以随时查看代码的运行状态。pdb需要在控制台里输入语句，其形式为<code>python -m pdb 文件名</code>。</p>
<p>示例如下：</p>
<p><img src="/2022/10/12/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AB%EF%BC%89/1.png" alt></p>
<p>pdb内的命令用法如下：</p>
<p>单步执行代码：输入 <code>n</code></p>
<p>查看变量：<code>p 变量名</code></p>
<p>退出程序：输入 <code>q</code></p>
<h3 id="方法五：pdb-set-trace"><a href="#方法五：pdb-set-trace" class="headerlink" title="方法五：pdb.set_trace()"></a>方法五：<code>pdb.set_trace()</code></h3><p>该方法也是用pdb，需要在控制台里输入语句，但不需要单步执行。类似于c++的断点调试，只需要import pdb，然后在可能出错的地方一个<code>pdb.set_trace()</code>，就可以设置一个断点。</p>
<p>示例如下：</p>
<p><img src="/2022/10/12/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AB%EF%BC%89/2.png" alt></p>
<p>进入pdb调试环境后，可用<code>p 变量名</code>查看变量，输入<code>c</code>继续运行。</p>
<h3 id="方法六：IDE"><a href="#方法六：IDE" class="headerlink" title="方法六：IDE"></a>方法六：IDE</h3><p>高效率的设置断点、单步执行，需要一个支持调试功能的IDE。目前常用的Python IDE有：</p>
<p>Visual Studio Code、PyCharm、加上pydev插件的Eclipse。</p>
<h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><p>单元测试是用来对一个模块、一个函数或者一个类来进行正确性检验的测试工作。将针对某函数写的测试用例放到一个测试模块里，便是一个完整的单元测试。</p>
<p>若单元测试通过，则说明所测试的函数能够正常工作；若单元测试不通过，要么函数有bug，要么测试条件输入不正确。</p>
<p><strong>单元测试需要引用<code>unittest</code>模块</strong>。常调用模块内置的条件判断来断言输出是否是期望值，最常用的<strong>断言语句</strong>是：<code>self.assertEqual(函数名(参数),期待值)</code>。</p>
<p>另一种重要的断言是期待抛出指定类型的Error，用法是：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">with self.assertRaises(指定类型的Error):
    value&#x3D;函数.属性或者是函数(参数)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="运行单元测试"><a href="#运行单元测试" class="headerlink" title="运行单元测试"></a>运行单元测试</h3><p><strong>方法一：</strong>在代码最后加上两行代码，直接运行程序</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">if __name__&#x3D;&#x3D;&#39;__main__&#39;:
    unittest.main()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p><strong>方法二：</strong>在<strong>命令行</strong>通过参数<code>python -m unittest 文件名</code>运行单元测试。</p>
<h3 id="setUp与tearDown"><a href="#setUp与tearDown" class="headerlink" title="setUp与tearDown"></a><code>setUp</code>与<code>tearDown</code></h3><p>每调用一个测试方法前被执行：<code>setUp()</code></p>
<p>在测试方法执行完后被执行：<code>tearDown()</code></p>
<h3 id="练习题-1"><a href="#练习题-1" class="headerlink" title="练习题"></a>练习题</h3><p>对Student类编写单元测试，结果发现测试不通过，请修改Student类，让测试通过：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"># -*- coding: utf-8 -*-
import unittest
class Student(object):
    def __init__(self, name, score):
        self.name &#x3D; name
        self.score &#x3D; score
    def get_grade(self):
        if self.score &gt;&#x3D; 60:
            return &#39;B&#39;
        if self.score &gt;&#x3D; 80:
            return &#39;A&#39;
        return &#39;C&#39;
class TestStudent(unittest.TestCase):

    def test_80_to_100(self):
        s1 &#x3D; Student(&#39;Bart&#39;, 80)
        s2 &#x3D; Student(&#39;Lisa&#39;, 100)
        self.assertEqual(s1.get_grade(), &#39;A&#39;)
        self.assertEqual(s2.get_grade(), &#39;A&#39;)

    def test_60_to_80(self):
        s1 &#x3D; Student(&#39;Bart&#39;, 60)
        s2 &#x3D; Student(&#39;Lisa&#39;, 79)
        self.assertEqual(s1.get_grade(), &#39;B&#39;)
        self.assertEqual(s2.get_grade(), &#39;B&#39;)

    def test_0_to_60(self):
        s1 &#x3D; Student(&#39;Bart&#39;, 0)
        s2 &#x3D; Student(&#39;Lisa&#39;, 59)
        self.assertEqual(s1.get_grade(), &#39;C&#39;)
        self.assertEqual(s2.get_grade(), &#39;C&#39;)

    def test_invalid(self):
        s1 &#x3D; Student(&#39;Bart&#39;, -1)
        s2 &#x3D; Student(&#39;Lisa&#39;, 101)
        with self.assertRaises(ValueError):
            s1.get_grade()
        with self.assertRaises(ValueError):
            s2.get_grade()

if __name__ &#x3D;&#x3D; &#39;__main__&#39;:
    unittest.main()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>修改后的代码为：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">import unittest
class Student(object):
    def __init__(self, name, score):
        self.name &#x3D; name
        self.score &#x3D; score
    def get_grade(self):
        if self.score &gt;&#x3D; 60 and  self.score &lt; 80:
            return &#39;B&#39;
        elif self.score &gt;&#x3D; 80 and  self.score &lt;&#x3D; 100:
            return &#39;A&#39;
        elif self.score &gt;&#x3D; 0 and  self.score &lt; 60:
            return &#39;C&#39;
        else:
            raise ValueError()

class TestStudent(unittest.TestCase):

    def test_80_to_100(self):
        s1 &#x3D; Student(&#39;Bart&#39;, 80)
        s2 &#x3D; Student(&#39;Lisa&#39;, 100)
        self.assertEqual(s1.get_grade(), &#39;A&#39;)
        self.assertEqual(s2.get_grade(), &#39;A&#39;)

    def test_60_to_80(self):
        s1 &#x3D; Student(&#39;Bart&#39;, 60)
        s2 &#x3D; Student(&#39;Lisa&#39;, 79)
        self.assertEqual(s1.get_grade(), &#39;B&#39;)
        self.assertEqual(s2.get_grade(), &#39;B&#39;)

    def test_0_to_60(self):
        s1 &#x3D; Student(&#39;Bart&#39;, 0)
        s2 &#x3D; Student(&#39;Lisa&#39;, 59)
        self.assertEqual(s1.get_grade(), &#39;C&#39;)
        self.assertEqual(s2.get_grade(), &#39;C&#39;)

    def test_invalid(self):
        s1 &#x3D; Student(&#39;Bart&#39;, -1)
        s2 &#x3D; Student(&#39;Lisa&#39;, 101)
        with self.assertRaises(ValueError):
            s1.get_grade()
        with self.assertRaises(ValueError):
            s2.get_grade()

if __name__ &#x3D;&#x3D; &#39;__main__&#39;:
    unittest.main()
    
#运行结果如下：
....
----------------------------------------------------------------------
Ran 4 tests in 0.001s

OK<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="文档测试"><a href="#文档测试" class="headerlink" title="文档测试"></a>文档测试</h2><p>文档测试（<code>doctest</code>）模块可以自动提取写在注释中的代码并执行测试。</p>
<p><code>dectest</code>严格按照命令行的输入和输出来判断测试结果是否正确。若运行文档测试后没有输出，则说明程序是正确的，在测试异常时，可以用<code>...</code>表示中间的出错的信息。</p>
<p>运行文档测试，需要<strong>先在代码的最后加上一下三行代码</strong>，然后在命令行中通过<code>python 文件名</code>来执行文档测试：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">if __name__&#x3D;&#x3D;&#39;__main__&#39;:
    import doctest
    doctest.testmod()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>在模块正常导入时不会执行文档测试，只有在命令行直接运行时才执行文档测试。</p>
<h3 id="练习题-2"><a href="#练习题-2" class="headerlink" title="练习题"></a>练习题</h3><p>对函数<code>fact(n)</code>编写doctest并执行：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">def fact(n):
    &#39;&#39;&#39;
    Calculate 1*2*...*n
    
    &gt;&gt;&gt; fact(1)
    1
    &gt;&gt;&gt; fact(10)
    ?
    &gt;&gt;&gt; fact(-1)
    ?
    &#39;&#39;&#39;
    if n &lt; 1:
        raise ValueError()
    if n &#x3D;&#x3D; 1:
        return 1
    return n * fact(n - 1)

if __name__ &#x3D;&#x3D; &#39;__main__&#39;:
    import doctest
    doctest.testmod()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>代码如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">def fact(n):
    &#39;&#39;&#39;
    Calculate 1*2*...*n
    
    &gt;&gt;&gt; fact(1)
    1
    &gt;&gt;&gt; fact(10)
    3628800
    &gt;&gt;&gt; fact(-1)
    Traceback (most recent call last):
    ...
    ValueError
    &#39;&#39;&#39;
    if n &lt; 1:
        raise ValueError()
    if n &#x3D;&#x3D; 1:
        return 1
    return n * fact(n - 1)

if __name__ &#x3D;&#x3D; &#39;__main__&#39;:
    import doctest
    doctest.testmod()
#运行结果为空<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python学习笔记（十二）</title>
    <url>/2022/10/19/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h2 id="python语言特点"><a href="#python语言特点" class="headerlink" title="python语言特点"></a>python语言特点</h2><p>python语言特点：</p>
<ul>
<li>开源</li>
<li>免费</li>
<li>跨平台</li>
<li>解析执行</li>
</ul>
<h3 id="复制-、copy-和deepcopy"><a href="#复制-、copy-和deepcopy" class="headerlink" title="复制=、copy()和deepcopy()"></a>复制=、copy()和deepcopy()</h3><ul>
<li>用=复制元素，原object改变，现object也随之改变</li>
<li>用copy()复制object，原object改变，现object不变，若object中包含了list，改变原object的list元素，现object的list元素也随之改变。</li>
<li>用deepcopy()复制object，原object改变，现object的任何元素都不会变。</li>
</ul>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">import copy
a &#x3D; [1, 2, 3, 4, [&#39;a&#39;, &#39;b&#39;]]
b &#x3D; a#a变b也变,
c &#x3D; copy.copy(a)#a变c不变,a里的list[&#39;a&#39;, &#39;b&#39;]变，c也会变
d &#x3D; copy.deepcopy(a)#a变d不变，a里的list[&#39;a&#39;, &#39;b&#39;]变，d也不会变
a.append(5)
a[4].append(&#39;c&#39;)
print(a)
print(b)
print(c)
print(d)
#运行结果如下
[1, 2, 3, 4, [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;], 5]
[1, 2, 3, 4, [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;], 5]
[1, 2, 3, 4, [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]]
[1, 2, 3, 4, [&#39;a&#39;, &#39;b&#39;]]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="Python自带的模块"><a href="#Python自带的模块" class="headerlink" title="Python自带的模块"></a>Python自带的模块</h2><p> Python有着形形色色爬虫相关的库,以下哪个库Python自带不需要额外下载。A</p>
<p>A.urlib python内置，用于爬虫</p>
<p>B.urlib3 第三方库</p>
<p>C.Requests python内置，用于http</p>
<p>D.lxml 第三方库</p>
<h2 id="extend方法"><a href="#extend方法" class="headerlink" title="extend方法"></a>extend方法</h2><p>extend() 函数用于在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表），添加数据时要用<code>[]</code>把数据括起来。</p>
<p>在Python3中，程序运行结果为： lists = [1, 1, 2, 3, 4, 5, 6] lists.remove(1) lists.extend([7,8,9]) print(lists)。C</p>
<p>A.[2,3,4,5,6] </p>
<p>B.[1,2,3,4,5,6,[7,8,9]]</p>
<p>C.[1,2,3,4,5,6,7,8,9]</p>
<p>D.[2,3,4,5,6,7,8,9]</p>
<h2 id="del方法"><a href="#del方法" class="headerlink" title="del方法"></a>del方法</h2><p>将列表内的所有元素均删除，且列表存在，使用del方法</p>
<h2 id="字符串变换"><a href="#字符串变换" class="headerlink" title="字符串变换"></a>字符串变换</h2><p>字符串是不可变类型，无法直接修改字符串的某一位字符。replace()函数用于替换字符串，其用法为<code>字符串序列.replace(旧子串, 新子串, 替换次数)</code>。</p>
<p>若a = ‘abcd’，若想将a变为’ebcd’，则下列语句正确的是。 D</p>
<p>A.a[0] = ‘e’  </p>
<p>B.a.replace(‘a”, “e’) </p>
<p>C.a[1] = ‘e’ </p>
<p>D.a = ‘e’ + “bcd”</p>
<h2 id="divmod-函数"><a href="#divmod-函数" class="headerlink" title="divmod()函数"></a>divmod()函数</h2><p>divmod(a,b)函数把除数和余数运算结果结合起来，返回一个包含商和余数的元组(a//b,a%b)</p>
<p>下面代码的输出结果是 x=10 y=3 print(divmod(x,y))。D</p>
<p>A.(1, 3) </p>
<p>B.3,1 </p>
<p>C.1,3 </p>
<p>D.(3, 1)</p>
<h2 id="python2与python3除法的区别"><a href="#python2与python3除法的区别" class="headerlink" title="python2与python3除法的区别"></a>python2与python3除法的区别</h2><p>在python2中，由于“地板除”的 缘故，每次除完后只剩整数。在python3中的除法是精确计算。</p>
<p>在Python3中，下列程序循环的次数为： n = 1000 while n &gt; 1: print(n) n = n / 2。B  </p>
<p>A.9 </p>
<p>B.10 </p>
<p>C.11 </p>
<p>D.无限循环</p>
<p>python2里只有9次，因为500、250、125、62、31、15、7、3、1 。python3里有10次，因为500、250、125、62.5、31.25、15.625、7.8125、3.90625、1.953125、0.9765625。</p>
<h2 id="函数返回值"><a href="#函数返回值" class="headerlink" title="函数返回值"></a>函数返回值</h2><p>以下程序的输出结果是 def hub(ss, x = 2.0,y = 4.0): ss += x * y ss = 10 print(ss, hub(ss, 3))。B</p>
<p>A.22.0 None </p>
<p>B.10 None  函数hub设置没有返回值，ss默认为10，hub默认返回done</p>
<p>C.22 None </p>
<p>D.10.0 22.0</p>
<h2 id="python查找顺序"><a href="#python查找顺序" class="headerlink" title="python查找顺序"></a>python查找顺序</h2><p>当使用import导入模块时，按python查找模块的不同顺序可划分为以下几种： ①环境变量中的PYTHONPATH ②内建模块 ③python安装路径 ④当前路径，即执行python脚本文件所在的路径 其中查找顺序正确的一组是。C</p>
<p> A.①④②③ B.②①④③ C.②④①③ D.①②③④</p>
<h2 id="range范围"><a href="#range范围" class="headerlink" title="range范围"></a>range范围</h2><p>range(n)实际上是取值0~n-1。</p>
<p> sum([i*i for i in range(3)])的计算结果是。B</p>
<p>A.3 </p>
<p>B.5 </p>
<p>C.2 </p>
<p>D.14</p>
<h2 id="readlines函数"><a href="#readlines函数" class="headerlink" title="readlines函数"></a>readlines函数</h2><p><code>read(size)</code>方法，每次最多读取size个字节的内容。不需要通过close函数关闭文件。</p>
<p>关于以下代码的描述，错误的选项是()with open( ‘ abtxt ‘ , ‘ r+’ ) as f:lines = f.readlines() for item in lines:print(item)。A</p>
<p>A.执行代码后，abc.txt文件未关闭，必须通过close()函数关闭 </p>
<p>B.打印输出abc.txt文件内容 </p>
<p>C.item是字符串类型 </p>
<p>D.lines是列表类型</p>
<h2 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h2><ul>
<li>lambda只是一个表达式不是代码块，而def是一个语句。</li>
<li>在内部只能包含一行代码，自动返回最后一个表达式的值，没有return，参数列表不需要用括号。</li>
<li>if、for或print语句不能用于lambda中，不能共享给其他程序调用。</li>
</ul>
<p>关于匿名函数叙述正确的是（）。ABC</p>
<p>A.lambda只是一个表达式，函数体比def简单很多 </p>
<p>B.lambda的主体不是一个代码块 </p>
<p>C.lambda函数只能写一行 </p>
<p>D.可以访问全局变量和函数体以外的变量</p>
<h2 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h2><ol>
<li>括号：()</li>
<li>幂运算：**</li>
<li>按位取反：~</li>
<li>正号、负号：+、-</li>
<li>乘除、取模、取整除：*、/、%、//</li>
<li>加、减：+、-</li>
<li>左移、右移：&lt;&lt;、&gt;&gt;</li>
<li>按位“与”：&amp;</li>
<li>按位“异或”、按位“或”：^、|</li>
<li>比较运算符：&lt;=、&lt;、&gt;、&gt;=</li>
<li>等于、不等于：==、!=</li>
<li>赋值运算符：=、%=、/=、//\、//=、-=、+=、<em>=、*</em>=</li>
<li>身份运算符：is、is not</li>
<li>成员运算符：in、not in</li>
<li>逻辑运算符：and、or、not</li>
</ol>
<p>Python中，运算符由高到低为。C</p>
<p>A.逻辑运算符&gt;比较运算符&gt;赋值运算符&gt;位运算符 </p>
<p>B.位运算符&gt;赋值运算符&gt;比较运算符&gt;逻辑运算符 </p>
<p>C.位运算符&gt;比较运算符&gt;赋值运算符&gt;逻辑运算符 </p>
<p>D.逻辑运算符&gt;赋值运算符&gt;比较运算符&gt;位运算符</p>
<p>下列哪些语句在Python中是合法的。ACD</p>
<p> A.x = y = z=1 </p>
<p>B.x =(y = z+ 1) </p>
<p>C.x,y = y,x </p>
<p>D.x+= y</p>
<h2 id="for-i-x-in-enumerate-函数"><a href="#for-i-x-in-enumerate-函数" class="headerlink" title="for i,x in enumerate() 函数"></a>for i,x in enumerate() 函数</h2><p>enumerate是枚举的意思，把元素一个个列举出来，它返回的是元素以及对应的索引。例如：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">&gt;&gt;&gt; line &#x3D; [1,2,3,4,5]
&gt;&gt;&gt; for i,j in enumerate(line):
...     print(i,j)
...
0 1
1 2
2 3
3 4
4 5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在Python3中，下列程序运行结果为： lists = [1, 2, 3, 4] tmp = 0 for i,j in enumerate(lists): tmp += i * j print(tmp) 。A</p>
<p>A.20  <code>tmp=0+1*2+2*3+3*4=2+6+12=20</code></p>
<p>B.30 </p>
<p>C.100 </p>
<p>D.None</p>
<h2 id="replace函数"><a href="#replace函数" class="headerlink" title="replace函数"></a>replace函数</h2><p><strong>replace函数不会改变原string的内容。</strong></p>
<p>执行以下程序，输入”93python22”，输出结果是 w = input(“请输入数字和字母构成的字符串：”) for x in w: if ‘0’&lt;= x &lt;= ‘9’: continue else: w.replace(x,’’) print(w)。C</p>
<p> A.python9322 </p>
<p>B.python </p>
<p>C.93python22 </p>
<p>D.9322</p>
<h2 id="floor函数"><a href="#floor函数" class="headerlink" title="floor函数"></a>floor函数</h2><p><strong>math.floor(x)函数</strong>用于将x向下取整，它接收数字/数字表达式并<strong>返回不大于数字的最大整数值</strong>。<strong>math.ceil(x)函数</strong>用于x向上取整，它接收数字/数字表达式并<strong>返回最接近的数字最小整数值</strong>。</p>
<p>以下代码运行结果是什么?0import math print math.floor(5.5)。A</p>
<p> A.5 </p>
<p>B.5.0 </p>
<p>C.5.5 </p>
<p>D.6</p>
<h2 id="按位与-amp-计算"><a href="#按位与-amp-计算" class="headerlink" title="按位与&amp;计算"></a>按位与&amp;计算</h2><p>python 中 &amp; (按位与) 和 | (按位或) 是把 2个数据转为二进制然后在做相应的计算。如</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">a &#x3D; 10  # 10的二进制为1010
b &#x3D; 18  # 18的二进制为10010
&quot;&quot;&quot;
按位与运算符:
&amp; : 如果两个相应位都为1,则该位的结果为1,否则为0
01010
10010
计算的结果为:
00010
把二进制00010转10进制结果为2,所以下面的打印结果应该为2
&quot;&quot;&quot;
print(a &amp; b)  # 打印结果为2


&quot;&quot;&quot;
按位或运算符:
| : 只要对应的二个二进位有一个为1时，结果位就为1
01010
10010
计算的结果为:
11010
把二进制11010转10进制结果为26,所以下面的打印结果应该为26
&quot;&quot;&quot;
print(a | b)  # 打印结果为26
&quot;&quot;&quot;
按位异或运算符:
^ : 当两对应的二进位相异时，结果为1
01010
10010
计算的结果为:
11000
把二进制11000转10进制结果为24,所以下面的打印结果应该为24
&quot;&quot;&quot;
print(a ^ b)  # 打印结果为24
&quot;&quot;&quot;
按位取反运算符:
~ : 对数据的每个二进制位取反,即把1变为0,把0变为1 
01010
计算的结果为:
10101
把二进制10101转10进制结果为-11,所以下面的打印结果应该为-11
&quot;&quot;&quot;
print(~a)  # 打印结果为-11<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>下面描述正确的是。ABC</p>
<p>A. 在python中逻辑与运算符不能写作&amp;&amp;，要写作and </p>
<p>B.&amp;是两个数字按二进制位作与运算的操作符 </p>
<p>C.3&amp;2的结果为2  00011  00010=&gt;00010=2</p>
<p>D.3&amp;3的结果为0  00011  00011=&gt;00011=3</p>
<h2 id="python保留字符"><a href="#python保留字符" class="headerlink" title="python保留字符"></a>python保留字符</h2><p>以下哪些是Python中的保留字符?ABCD</p>
<p>A.def </p>
<p>B.global </p>
<p>C.finally </p>
<p>D.yield</p>
<h2 id="可变数据类型和不可变数据类型"><a href="#可变数据类型和不可变数据类型" class="headerlink" title="可变数据类型和不可变数据类型"></a>可变数据类型和不可变数据类型</h2><p>可变数据类型：list(列表)、dict(字典)、set(集合)</p>
<p>不可变数据类型：数值类型(int、float、bool)、string(字符串)、tuple(元组)</p>
<p>下列选项属于不可变类型的是。CD</p>
<p> A.列表 </p>
<p>B.字典 </p>
<p>C.元组 </p>
<p>D.字符串</p>
<h2 id="python内置函数"><a href="#python内置函数" class="headerlink" title="python内置函数"></a>python内置函数</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">内置函数</th>
<th></th>
<th></th>
<th style="text-align:left"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><strong>A</strong><a href="https://docs.python.org/zh-cn/3/library/functions.html#abs"><code>abs()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#aiter"><code>aiter()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#all"><code>all()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#any"><code>any()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#anext"><code>anext()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#ascii"><code>ascii()</code></a> <strong>B</strong><a href="https://docs.python.org/zh-cn/3/library/functions.html#bin"><code>bin()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#bool"><code>bool()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#breakpoint"><code>breakpoint()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#func-bytearray"><code>bytearray()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#func-bytes"><code>bytes()</code></a> <strong>C</strong><a href="https://docs.python.org/zh-cn/3/library/functions.html#callable"><code>callable()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#chr"><code>chr()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#classmethod"><code>classmethod()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#compile"><code>compile()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#complex"><code>complex()</code></a> <strong>D</strong><a href="https://docs.python.org/zh-cn/3/library/functions.html#delattr"><code>delattr()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#func-dict"><code>dict()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#dir"><code>dir()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#divmod"><code>divmod()</code></a></td>
<td><strong>E</strong><a href="https://docs.python.org/zh-cn/3/library/functions.html#enumerate"><code>enumerate()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#eval"><code>eval()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#exec"><code>exec()</code></a> <strong>F</strong><a href="https://docs.python.org/zh-cn/3/library/functions.html#filter"><code>filter()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#float"><code>float()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#format"><code>format()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#func-frozenset"><code>frozenset()</code></a> <strong>G</strong><a href="https://docs.python.org/zh-cn/3/library/functions.html#getattr"><code>getattr()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#globals"><code>globals()</code></a> <strong>H</strong><a href="https://docs.python.org/zh-cn/3/library/functions.html#hasattr"><code>hasattr()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#hash"><code>hash()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#help"><code>help()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#hex"><code>hex()</code></a> <strong>I</strong><a href="https://docs.python.org/zh-cn/3/library/functions.html#id"><code>id()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#input"><code>input()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#int"><code>int()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#isinstance"><code>isinstance()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#issubclass"><code>issubclass()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#iter"><code>iter()</code></a></td>
<td><strong>L</strong><a href="https://docs.python.org/zh-cn/3/library/functions.html#len"><code>len()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#func-list"><code>list()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#locals"><code>locals()</code></a> <strong>M</strong><a href="https://docs.python.org/zh-cn/3/library/functions.html#map"><code>map()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#max"><code>max()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#func-memoryview"><code>memoryview()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#min"><code>min()</code></a> <strong>N</strong><a href="https://docs.python.org/zh-cn/3/library/functions.html#next"><code>next()</code></a> <strong>O</strong><a href="https://docs.python.org/zh-cn/3/library/functions.html#object"><code>object()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#oct"><code>oct()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#open"><code>open()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#ord"><code>ord()</code></a> <strong>P</strong><a href="https://docs.python.org/zh-cn/3/library/functions.html#pow"><code>pow()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#print"><code>print()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#property"><code>property()</code></a></td>
<td style="text-align:left"><strong>R</strong><a href="https://docs.python.org/zh-cn/3/library/functions.html#func-range"><code>range()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#repr"><code>repr()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#reversed"><code>reversed()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#round"><code>round()</code></a> <strong>S</strong><a href="https://docs.python.org/zh-cn/3/library/functions.html#func-set"><code>set()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#setattr"><code>setattr()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#slice"><code>slice()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#sorted"><code>sorted()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#staticmethod"><code>staticmethod()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#func-str"><code>str()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#sum"><code>sum()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#super"><code>super()</code></a> <strong>T</strong><a href="https://docs.python.org/zh-cn/3/library/functions.html#func-tuple"><code>tuple()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#type"><code>type()</code></a> <strong>V</strong><a href="https://docs.python.org/zh-cn/3/library/functions.html#vars"><code>vars()</code></a> <strong>Z</strong><a href="https://docs.python.org/zh-cn/3/library/functions.html#zip"><code>zip()</code></a> <strong>_</strong><a href="https://docs.python.org/zh-cn/3/library/functions.html#import__"><code>__import__()</code></a></td>
</tr>
</tbody>
</table>
</div>
<p>以下属于python3内置函数的是。ABCD</p>
<p> A.str() </p>
<p>B.sum() </p>
<p>C.zip() </p>
<p>D.sorted()</p>
<h2 id="python数据类型"><a href="#python数据类型" class="headerlink" title="python数据类型"></a>python数据类型</h2><p>python中有六个标准的数据类型：</p>
<ul>
<li>Number(数字)</li>
<li>String(字符串)</li>
<li>List(列表)</li>
<li>Dict(字典)</li>
<li>Tuple(元组)</li>
<li>Set(集合)</li>
</ul>
<p>其中Number里包含了int、float、bool、complex(复数)。在python3中只有一种整数类型int，没有python2中的长整型long。</p>
<p>以下哪些是Python的数字类型。ACD</p>
<p> A.long </p>
<p>B.double </p>
<p>C.float </p>
<p>D.complex</p>
<h2 id="控制循环语句"><a href="#控制循环语句" class="headerlink" title="控制循环语句"></a>控制循环语句</h2><p><strong>continue：</strong>将控制返回到循环的开始</p>
<p><strong>break：</strong>将控制带出循环</p>
<p><strong>pass：</strong>编写空循环，除此之外还用于空的控制语句、函数和类</p>
<p>Python中，循环控制语句有。BCD</p>
<p> A.goto </p>
<p>B.break </p>
<p>C.continue </p>
<p>D.pass</p>
<h2 id="name"><a href="#name" class="headerlink" title="__name__"></a><code>__name__</code></h2><p><code>__name__</code>是python的一个内置类属性，它存储模块的名称。</p>
<p>python模块既可以被调用，也可以独立运行。而调用时<code>__name__</code>存储的是py文件名（模块名称），独立运行时存储的是<code>__main__</code>。其作用主要是用来区分当前模块是独立运行还是被调用。</p>
<p>关于<code>__name__</code>的说法，下列描述正确的是。BCD</p>
<p> A.它是Python提供的一个方法 </p>
<p>B.每个模块内部都有一个<code>__name__</code>属性 </p>
<p>C.当它的值为’main‘时，表示模块自身在运行 </p>
<p>D.当它的值不为’main’时，表示模块被引用</p>
<h2 id="json-dumps-与json-loads"><a href="#json-dumps-与json-loads" class="headerlink" title="json.dumps()与json.loads()"></a>json.dumps()与json.loads()</h2><p><strong>json.dumps()：</strong>将python对象编码成Json字符串</p>
<p><strong>json.dump()：</strong>将python对象转化成Json储存到文件中</p>
<p><strong>json.loads()：</strong>将Json字符串解码成python对象</p>
<p><strong>json.load()：</strong>将文件中的json格式转化成python对象提取</p>
<p>运行下列代码段，输出结果为True的是（ ）。BD</p>
<p> A.</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">import json
data&#x3D;&#39;&#123;&quot;one&quot;:&quot;1&quot;,&quot;two&quot;:&quot;2&quot;,&quot;three&quot;:&quot;3&quot;,&quot;four&quot;:&quot;4&quot;,&quot;five&quot;:&quot;5&quot;&#125;&#39;
text &#x3D; json.loads(data)
print(type(data)&#x3D;&#x3D;type(text)) <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>B. </p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">data&#x3D;&#39;&#123;&quot;one&quot;:&quot;1&quot;,&quot;two&quot;:&quot;2&quot;,&quot;three&quot;:&quot;3&quot;,&quot;four&quot;:&quot;4&quot;,&quot;five&quot;:&quot;5&quot;&#125;&#39;
print(type(data)&#x3D;&#x3D;type(&#39;123&#39;)) <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>C.</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">import json
data&#x3D;&#39;&#123;&quot;one&quot;:&quot;1&quot;,&quot;two&quot;:&quot;2&quot;,&quot;three&quot;:&quot;3&quot;,&quot;four&quot;:&quot;4&quot;,&quot;five&quot;:&quot;5&quot;&#125;&#39;
text &#x3D; json.loads(data)
print(&#39;1&#39; in text) <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>D.</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">import json
data &#x3D; &#39;&#123;&quot;one&quot;:&quot;1&quot;,&quot;two&quot;:&quot;2&quot;,&quot;three&quot;:&quot;3&quot;,&quot;four&quot;:&quot;4&quot;,&quot;five&quot;:&quot;5&quot;&#125;&#39;
text &#x3D; json.dumps(data)
print(&#39;1&#39; in text) <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="类定义体组成"><a href="#类定义体组成" class="headerlink" title="类定义体组成"></a>类定义体组成</h2><p>类定义体组成：</p>
<ul>
<li>成员的控制访问信息（public、protected、private)</li>
<li>数据成员</li>
<li>成员函数</li>
</ul>
<p>在类的定义形式中,组成了类定义体是。ABC</p>
<p> A.成员的访问控制信息 </p>
<p>B.数据成员 </p>
<p>C.成员函数 </p>
<p>D.私有消息</p>
<h2 id="关于return函数"><a href="#关于return函数" class="headerlink" title="关于return函数"></a>关于return函数</h2><p>在python中，关于函数return语句的正确说法是。ACD</p>
<p> A.return指定函数返回值，用来结束函数 </p>
<p>B.在python中return语句只可返回一个值 </p>
<p>C.无返回值函数中可以没有return语句 </p>
<p>D.如果不给return，函数默认返回None</p>
<p>无返回值函数是指void这一类的函数。</p>
<h2 id="万物皆为对象"><a href="#万物皆为对象" class="headerlink" title="万物皆为对象"></a>万物皆为对象</h2><p>容器对象（list、dict、set等）中可以存放任何对象，包括整数、字符串，函数也可以作存放到容器对象中。</p>
<p>Python中函数是对象，描述正确的是。ABCD</p>
<p> A.函数可以赋值给一个变量 </p>
<p>B.函数可以作为元素添加到集合对象中 </p>
<p>C.函数可以作为参数值传递给其它函数 </p>
<p>D.函数可以当做函数的返回值</p>
<h2 id="切片取数"><a href="#切片取数" class="headerlink" title="切片取数"></a>切片取数</h2><p>L[0:3]表示从索引0开始取数，直到索引3为止，但不包括索引3的元素。</p>
<p>若输入的字符串str=’asdfgh’，想要输出为’asdfg’，则可以使用以下方法。AC</p>
<p> A.str[:-1] </p>
<p>B.str[:-2] </p>
<p>C.str[:5] </p>
<p>D.str[:4]</p>
<p>下列可以得到字符串’ccc’的Python语句是。ABD</p>
<p> A.cc’+’c’ </p>
<p>B.’c’*3 </p>
<p>C.’bcccb’[1:3] </p>
<p>D.’bcccb’[1:4]</p>
<p>若a = range(100)，以下哪些操作是合法的。ABCD</p>
<p> A.a[-3] </p>
<p>B.a[2:13] </p>
<p>C.a[::3] </p>
<p>D.a[2-3]</p>
<h2 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h2><p>在模块A导入B模块的函数func（），并执行函数调用，下列写法正确的是。AC<br>A. 导入：import B 调用 B.func()<br>B. 导入：import B 调用 func()<br>C. 导入：form B import func 调用 func()<br>D. 导入：form B import func 调用B. func()</p>
<h2 id="python不能正常启动"><a href="#python不能正常启动" class="headerlink" title="python不能正常启动"></a>python不能正常启动</h2><p>python不能正常启动的项有：</p>
<ul>
<li>拼写错误</li>
<li>错误表达式</li>
<li>缩进错误</li>
</ul>
<p>只有手动抛出异常才能正常启动。</p>
<h2 id="python的六种进程间通信方式"><a href="#python的六种进程间通信方式" class="headerlink" title="python的六种进程间通信方式"></a>python的六种进程间通信方式</h2><ul>
<li>msg_queue(消息队列)</li>
<li>pipeline for single duplex(单工管道)</li>
<li>pipeline for half duplex(双工管道)</li>
<li>name pipeline(命名管道)</li>
<li>share memory(共享内存)</li>
<li>semaphore(信号量)</li>
</ul>
<p>在python3中进程之间通信通常可以采用如下哪些方式。ABD</p>
<p> A.Queue </p>
<p>B.Pipe </p>
<p>C.全局变量 </p>
<p>D.共享数据</p>
<h2 id="new-和-init-的区别"><a href="#new-和-init-的区别" class="headerlink" title="__new__和__init__的区别"></a><code>__new__</code>和<code>__init__</code>的区别</h2><p><strong>相同点：</strong></p>
<ul>
<li>两者都是python面向对象语言的函数。</li>
</ul>
<p><strong>不同点：</strong></p>
<ul>
<li><code>__new__</code>是在实例<strong>创建之前</strong>被调用的，是个<strong>静态方法</strong>。因为它的任务是<strong>创建实例</strong>然后返回该实例对象。</li>
<li><p><code>__init__</code>是当实例对象<strong>创建完成后</strong>被调用的，然后设置对象属性的一些初始值，是一个<strong>实例方法</strong>。通常用于<strong>初始化一个类实例</strong>。</p>
<p>关于<code>__new__</code>与<code>__init__</code>的区别，说法正确的是。ABCD</p>
<p>A.<code>__new__</code>是一个静态方法，而<code>__init__</code>是一个实例方法 </p>
</li>
</ul>
<p>B.<code>__new__</code>方法会返回一个创建的实例，而<code>__init__</code>什么都不返回</p>
<p>C.只有在<code>__new__</code>返回一个创建的实例时，后面的<code>__init__</code>才能被调用 </p>
<p>D.当创建一个新实例时调用<code>__new__</code>,初始化一个实例时用<code>__init__</code></p>
<h2 id="输入输出总结"><a href="#输入输出总结" class="headerlink" title="输入输出总结"></a>输入输出总结</h2><h3 id="单行输入"><a href="#单行输入" class="headerlink" title="单行输入"></a>单行输入</h3><ul>
<li><p><strong>同一行里空格分隔输入两个数</strong>：<code>a,b=list(map(int,input().split()))</code></p>
</li>
<li><p><strong>同一行里逗号分隔输入两个数</strong>：<code>a,b=list(map(int,input().split(&#39;,&#39;))</code>)</p>
</li>
<li><p><strong>使用sys模块输入多位数：</strong></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">import sys
#输入数据，返回一个包含多个字符串的列表a,strip()用于截取掉末尾的换行符
a&#x3D;sys.stdin.readline().strip()

#a中的数据以逗号分隔时，去掉逗号，返回一个包含多个字符串的列表b
b&#x3D;list(map(int,a.split(&#39;,&#39;)))

#a中的数据以空格分隔时，去掉空格，返回一个包含多个字符串的列表c
c&#x3D;list(map(int,a.split()))

#同一行中输入以空格分隔的两位数n,m
n,m&#x3D;list(map(int,sys.stdin.readline().strip().split()))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h3 id="多行输入"><a href="#多行输入" class="headerlink" title="多行输入"></a>多行输入</h3><ul>
<li><p><strong>把所有行合在一个列表中：</strong></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">import sys
list&#x3D;[]
list_new&#x3D;[]
for line in sys.stdin:
    list_new&#x3D;line.split()
    list.append(list_new)
    # list.extend(list_new)
    print(list)
#使用append的输出结果：
3 2
[[&#39;3&#39;, &#39;2&#39;]]
1 5 6
[[&#39;3&#39;, &#39;2&#39;], [&#39;1&#39;, &#39;5&#39;, &#39;6&#39;]]
1 3
[[&#39;3&#39;, &#39;2&#39;], [&#39;1&#39;, &#39;5&#39;, &#39;6&#39;], [&#39;1&#39;, &#39;3&#39;]]
#使用extend的输出结果：
3 2
[&#39;3&#39;, &#39;2&#39;]
1 5 6
[&#39;3&#39;, &#39;2&#39;, &#39;1&#39;, &#39;5&#39;, &#39;6&#39;]
1 3
[&#39;3&#39;, &#39;2&#39;, &#39;1&#39;, &#39;5&#39;, &#39;6&#39;, &#39;1&#39;, &#39;3&#39;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><strong>行数固定且第一行给出，各行独立获取：</strong></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">import sys
lines&#x3D;sys.stdin.readlines()
n&#x3D;int(lines[0])
x1&#x3D;list(map(int,lines[1].split()))
x2&#x3D;list(map(int,lines[2].split()))
x3&#x3D;list(map(int,lines[3].split()))
print(n,x1,x2,x3)
#运行结果如下：
输入：
3
1 5 6
1  
8
windows系统同时按下ctrl+z+enter结束输入
输出结果为：
3 [1, 5, 6] [1] [8]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><strong>第一行输入人数n和科目m，后续每行录入每人的m科成绩：</strong></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">n,m&#x3D;list(map(int,input().split()))
lines&#x3D;[]
for i in range(n):
    lines.append(list(map(int,input().split())))
print(lines)
#运行结果如下：
输入：
2 3
15 32 23
58 20 69
输出结果为：
[[15, 32, 23], [58, 20, 69]]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><strong>行数未知时，输入多行数字序列：</strong></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">res&#x3D;[]
while True:
    try:
        res.append(list(map(int,input().split())))
    except:
        break
print(res)
#运行结果如下：
输入：
3 63 72 72 1
1 52 62 5 1  
2 4 7
5 8 9 3 53 12 74
windows系统同时按下ctrl+z+enter结束输入
输出结果为：
[[3, 63, 72, 72, 1], [1, 52, 62, 5, 1], [2, 4, 7], [5, 8, 9, 3, 53, 12, 74]]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h3 id="单行输出"><a href="#单行输出" class="headerlink" title="单行输出"></a>单行输出</h3><p><strong>同一行里逗号分隔输出两个数：</strong><code>print(str(a)+&#39;,&#39;+str(b))</code></p>
<h3 id="多行输出"><a href="#多行输出" class="headerlink" title="多行输出"></a>多行输出</h3><p><strong>按行遍历输出多行输入中的元素，注意：不是输出一个list或tuple：</strong></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">import sys
data&#x3D;[]
while True:
    line&#x3D;sys.stdin.readline().strip()
    if not line:
        break
    tmp&#x3D;list(map(int,line.split()))
    data.append(tmp)
for i in range(0,len(data)):
    for j in range(0,len(data[i])):
        # print(i[k])
        if j&#x3D;&#x3D;(len(data[i])-1):
            print(data[i][j])
        else:
            print(str(data[i][j])+&#39; &#39;,end&#x3D;&quot;&quot;)
#运行结果如下：
输入：
3 63 72 72 1
1 52 62 5 1  
2 4 7
5 8 9 3 53 12 74
windows系统同时按下ctrl+z+enter结束输入
输出结果为：
3 63 71 71 1
1 52 62 5 1
2 4 7
5 8 9 3 53 12 74<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><ul>
<li><p>标准库OS的listdir()方法默认只能列出指定文件夹中当前层级的文件和文件夹列表，而不能列出其子文件夹中的文件。</p>
</li>
<li><p><strong>递归</strong>是从问题的<strong>最终目标</strong>出发，逐渐将复杂问题化为简单问题，最终求得问题。<strong>递推</strong>是从简单问题触发，一步步的向前，最终求得问题。</p>
</li>
<li><p>列表对象的extend()方法属于原地操作，调用前后列表对象的地址不变。</p>
</li>
<li><p>Python中子类能继承父类全部的<strong>公有</strong>属性和方法。</p>
</li>
<li><p>使用print()函数可以将信息写入文件：<code>print(&quot;Hello, World!&quot;, file=open(&#39;file.txt&#39;, &#39;w&#39;))</code>。</p>
</li>
<li><p>两个特殊的形参关键字形参和命名关键字形参不能设定默认值，或者说它们默认值就是空元组和空字典。</p>
</li>
<li><p>为了限制开头几个参数只能按位置传递，从python3.8开始，正式引入<strong>限定位置形参，</strong>它们必须放在形参表的最前面，并在后面使用斜杠/（独占一个参数位）与普通形参分隔。如<code>def fun(a,b,c,/,d) #a,b,c成为限定位置形参</code>。</p>
</li>
<li><p>默认值可以从限定位置形参或普通形参中的任意一个开始设定，<strong>除了命名关键字形参</strong>，所有带默认值的形参必须位于五默认值的形参之后。</p>
</li>
<li><p>定义函数时，带有默认值的参数必须出现在参数列表的最右端，任何一个带有默认值的参数右边不允许出现没有默认值的参数。</p>
</li>
<li><p>使用print()函数时，使用<code>\n</code>可以进行换行输出。</p>
</li>
<li><p>表达式<code>[1,3,2] &gt; [1,2,3]</code>的值为<code>True</code>，<code>&#123;1,3,2&#125; &gt; &#123;1,2,3&#125;</code>的值为<code>False</code>。</p>
</li>
<li><p>使用if <code>&#39;__name__&#39;</code>== <code>&#39;__main__&#39;</code>，可以保证模块被导入时，其内的代码不会被执行。</p>
</li>
<li><p>表达式<code>pow(3, 2)==3**2</code>的值为<code>True</code>。其中<code>**</code>代表乘方。</p>
</li>
<li><p>所有的except子句一定在else和finally的前面。</p>
</li>
<li><p>Python中break和continue语句不可以单独使用，只能在循环中使用。</p>
</li>
<li><p>split()将一个字符串分割为子字符串，然后将结果作为字符数组返回。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python学习笔记（六）</title>
    <url>/2022/10/11/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AD%EF%BC%89/</url>
    <content><![CDATA[<h1 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h1><h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><p>若要增强某个函数的功能，使其在调用前后自动打印日志，但又不希望修改该函数的定义，这种在代码运行期间动态增加功能的方式，称为装饰器(Decorator)。在面向对象的设计模式中，decorator被称为装饰模式。</p>
<p>本质上，decorator就是一个返回函数的高级函数，因此定义一个能打印日志的decorator可以定义成：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">def log(func):
    def wrapper(*args,**kw):
        print(&#39;call %s():&#39;% func.__name__)#函数对象的__name__属性可以拿到函数的名字
        return func(*args,**kw)
    return wrapper  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>由于上面的<code>log</code>是一个decorator，因此接收一个函数作为参数，并返回一个函数，故要借助Python的@语法。将decorator置于函数的定义处：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">@log
def now():
    print(&#39;2022-10-11&#39;)
now()   
#运行结果如下：
call now():
2022-10-11<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>调用<code>now()</code>函数时，不仅会运行<code>now()</code>函数本身，还会在运行<code>now()</code>函数前打印一行日志。其中的<code>@log</code>语句在<code>now()</code>函数的定义出就相当于执行<code>now=log(now)</code>语句。由于<code>log()</code>是一个decorator，返回一个函数。因此调用<code>now()</code>将执行新函数，即在函数中返回<code>wrapper()</code>函数。在<code>wrapper()</code>函数内，首先打印日志，再调用原始函数。</p>
<p>若decorator本身需要传入参数，便需要编写一个返回decorator的高阶函数。</p>
<p>例如自定义log的文本：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">def log(text):
    def decorator(func):
        def wrapper(*args,**kw):
            print(&#39;%s %s():&#39;% (text,func.__name__))
            return func(*args,**kw)
        return wrapper
    return decorator    
#decorator用法如下:
@log(&#39;execute&#39;)#即now&#x3D;log(&#39;execute&#39;)(now)
def now():
    print(&#39;2022-10-11&#39;)
now()    
#运行结果如下：
execute now():
2022-10-11<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上述代码中执行<code>log(&#39;execute&#39;)</code>，返回的是decorator函数，再调用返回函数，参数是<code>now</code>函数，返回值最终是<code>wrapper</code>函数。此时<code>now.__name__</code>属性已经从原来的<code>now</code>变成了<code>wrapper</code>。因此需要把原始函数的<code>__name__</code>属性复制到wrapper函数中，即在定义<code>wrapper()</code>的前面加上<code>@functools.wraps(func)</code>，写法如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">import functools

def log(text):
    def decorator(func):
        @functools.wraps(func)
        def wrapper(*args,**kw):
            print(&#39;%s %s():&#39;% (text,func.__name__))
            return func(*args,**kw)
        return wrapper
    return decorator    
#decorator用法如下:
@log(&#39;execute&#39;)#即now&#x3D;log(&#39;execute&#39;)(now)
def now():
    print(&#39;2022-10-11&#39;)
print(now.__name__)    

#运行结果如下：
now<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h3><p>请设计一个decorator，它可作用于任何函数上，并打印该函数的执行时间：</p>
<p>代码如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">import time, functools
def metric(fn):
    @functools.wraps(fn)
    def wrapper(*args,**kw):
        print(&#39;%s executed in %s ms&#39; % (fn.__name__, 10.24))
        return fn(*args,**kw)
    return wrapper

# 测试
@metric
def fast(x, y):
    time.sleep(0.0012)
    return x + y;

@metric
def slow(x, y, z):
    time.sleep(0.1234)
    return x * y * z;

f &#x3D; fast(11, 22)
s &#x3D; slow(11, 22, 33)
if f !&#x3D; 33:
    print(&#39;测试失败!&#39;)
elif s !&#x3D; 7986:
    print(&#39;测试失败!&#39;)
#运行结果如下：
fast executed in 10.24 ms
slow executed in 10.24 ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="偏函数"><a href="#偏函数" class="headerlink" title="偏函数"></a>偏函数</h2><p>偏函数可以通过设定参数的默认值，降低函数调用的难度。例如<code>int()</code>函数默认按十进制转换，也可以传入<code>base</code>参数做N进制的转换，如：<code>int(&#39;123&#39;,base=8)</code>。</p>
<p>创建一个偏函数可以用<code>functools.partial</code>，比如创建一个转换二进制的函数如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">import functools
int2&#x3D;functools.partial(int,base&#x3D;2)
print(int2(&#39;1000000&#39;))
#运行结果如下：
64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>创建偏函数时，也可以接收函数对象、<code>*args</code>,**kw这三个参数。</p>
<h1 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h1><p>自己创建模块时要注意命名，不要使用中文、特殊字符，不能和python自带的模块名称冲突。检查系统是都已存在该模块的方法是先执行<code>import abc</code>，若成功则说明系统存在该模块。</p>
<p><strong>导入模块</strong>：<code>import 模块名称</code></p>
<h2 id="使用模块"><a href="#使用模块" class="headerlink" title="使用模块"></a>使用模块</h2><p>模块的使用涉及到作用域的概念。</p>
<h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>类似于<code>__xxx__</code>这样的变量是特殊变量，可以被直接引用，但有特殊用途。类似于<code>_xxx</code>和<code>__xxx</code>的变量是<strong>私有</strong>的，不应被直接引用。</p>
<h2 id="安装第三方模块"><a href="#安装第三方模块" class="headerlink" title="安装第三方模块"></a>安装第三方模块</h2><p>安装第三方模块需要添加模块搜索路径。</p>
<h3 id="方法一：直接修改sys-path"><a href="#方法一：直接修改sys-path" class="headerlink" title="方法一：直接修改sys.path"></a>方法一：直接修改<code>sys.path</code></h3><pre class="line-numbers language-none"><code class="language-none">import sys
sys.path.append(&#39;&#x2F;路径名&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="方法二：设置环境变量pythonpath"><a href="#方法二：设置环境变量pythonpath" class="headerlink" title="方法二：设置环境变量pythonpath"></a>方法二：设置环境变量<code>pythonpath</code></h3><h1 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h1><h2 id="类和实例"><a href="#类和实例" class="headerlink" title="类和实例"></a>类和实例</h2><p>通过<code>class</code>关键字<strong>定义类</strong>，格式如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">class 类名(Object):       #Object表示该类的基类是谁，默认使用Object类
	pass<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p><strong>创建实例</strong>：<code>变量=类名()</code></p>
<p><strong>引用实例属性</strong>：<code>指向实例的变量.属性名</code></p>
<p>通过<code>__init__</code>方法<strong>初始化实例</strong>，例子如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">class Student(object):
    def __init__(self,name,score):
        self.name&#x3D;name
        self.score&#x3D;score
bart&#x3D;Student(&#39;zhangsan&#39;,56)
print(bart.name,bart.score)
#运行结果如下：
zhangsan 56<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>__init__</code>方法第一个参数永远是self，代表实例本身。有了<code>__init__</code>方法，在创建实例时<strong>不能传入空参数</strong>，必须传入与<code>__init__</code>方法匹配的参数，但<strong><code>self</code>不需要传。</strong></p>
<p>调用实例方法：<code>指向实例的变量.方法名</code></p>
<h2 id="访问限制"><a href="#访问限制" class="headerlink" title="访问限制"></a>访问限制</h2><p>将public变量变成<strong>private变量</strong>：在属性名称前加两个下划线<code>__</code>。</p>
<p>只有一个下划线开头的实例变量名是<strong>protected变量</strong>。</p>
<p>外部函数访问私有变量方法：增加get_name和get_score方法。例如：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">class Student(object):
	...
	def get_name(self):
		return self.__name
	def get_score(self):
		return self.__score<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>外部函数修改私有变量方法:增加set_score方法。例如：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">class Student(object):
	...
	def set_score(self,score):
		self.__score&#x3D;score<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>间接访问private属性的方法：<code>指向实例的变量._类名_属性名</code>，但由于不同版本的python解释器对<strong>变量的解析不同</strong>，这种操作尽量不要用。</p>
<p>类外代码定义的private变量与类内同名的变量不是同一个变量，类内的变量会被自动改成<code>指向实例的变量._类名_属性名</code>的形式，而外部代码只能新增一个<code>__属性名</code>变量。</p>
<h3 id="练习题-1"><a href="#练习题-1" class="headerlink" title="练习题"></a>练习题</h3><p>请把下面的<code>Student</code>对象的<code>gender</code>字段对外隐藏起来，用<code>get_gender()</code>和<code>set_gender()</code>代替，并检查参数有效性：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">class Student(object):
    def __init__(self, name, gender):
        self.__name &#x3D; name
        self.__gender &#x3D; gender
    def get_gender(self):
        return self.__gender
    def set_gender(self,gender):
        self.__gender&#x3D;gender
# 测试:
bart &#x3D; Student(&#39;Bart&#39;, &#39;male&#39;)
if bart.get_gender() !&#x3D; &#39;male&#39;:
    print(&#39;测试失败!&#39;)
else:
    bart.set_gender(&#39;female&#39;)
    if bart.get_gender() !&#x3D; &#39;female&#39;:
        print(&#39;测试失败!&#39;)
    else:
        print(&#39;测试成功!&#39;)
#运行结果如下：
测试成功!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="继承和多态"><a href="#继承和多态" class="headerlink" title="继承和多态"></a>继承和多态</h2><p>定义一个类时可以从某个现有的class<strong>继承</strong>，新的class称为子类，被继承的class称为基类、父类或超类。继承可以将基类的所有功能都直接拿过来，子类只需要新增特有的方法或重写父类的方法即可。</p>
<p>类继承的格式：<code>class 子类名(基类名)</code></p>
<p>子类和基类存在相同方法时，子类的方法会覆盖基类的，代码运行时默认调用子类的方法，这一特性称之为<strong>多态</strong>。</p>
<h3 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h3><p>对扩展开放：允许新增子类</p>
<p>对修改封闭：不需要修改依赖子类类型的函数。</p>
<h3 id="静态语言-vs-动态语言"><a href="#静态语言-vs-动态语言" class="headerlink" title="静态语言 vs 动态语言"></a>静态语言 vs 动态语言</h3><p>对于静态语言（如java），如果需要传入<code>Animal</code>的类型，则传入的对象必须是<code>Animal</code>类型或者是它的子类，否则将无法调用对应的<code>run()</code>方法。</p>
<p>对于动态语言（如python），则不一定需要传入<code>Animal</code>类型，只需要保证传入的对象有一个<code>run()</code>方法就可以了。</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python学习笔记（十三）</title>
    <url>/2022/10/24/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[<h1 id="常用内建模块"><a href="#常用内建模块" class="headerlink" title="常用内建模块"></a>常用内建模块</h1><h2 id="datetime"><a href="#datetime" class="headerlink" title="datetime"></a>datetime</h2><p>datetime是python处理时间和日期的标准库。</p>
<h3 id="获取当前日期和时间"><a href="#获取当前日期和时间" class="headerlink" title="获取当前日期和时间"></a>获取当前日期和时间</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">from datetime import datetime
now&#x3D;datetime.now()
print(now)
#运行结果如下：
2022-10-13 16:01:58.422125<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="获取指定日期和时间"><a href="#获取指定日期和时间" class="headerlink" title="获取指定日期和时间"></a>获取指定日期和时间</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">from datetime import datetime
dt&#x3D;datetime(2022,4,19,12,22)
print(dt)
#运行结果如下：
2022-04-19 12:22:00<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="datetime转换为timestamp"><a href="#datetime转换为timestamp" class="headerlink" title="datetime转换为timestamp"></a>datetime转换为timestamp</h3><p>在计算机中时间是用数字表示的，1970年1月1日 00:00:00 UTC+00:00时区的时刻称为epoch time，记为0，<strong>当前时间就是相对于epoch time的秒数</strong>称为timestamp。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">from datetime import datetime
dt&#x3D;datetime(2022,4,19,12,22)
print(dt.timestamp())
#运行结果如下：
1650342120.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="timestamp转换为datetime"><a href="#timestamp转换为datetime" class="headerlink" title="timestamp转换为datetime"></a>timestamp转换为datetime</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">from datetime import datetime
dt&#x3D;1650342120.0
print(datetime.fromtimestamp(dt))
#运行结果如下：
2022-04-19 12:22:00<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="str转换为datetime"><a href="#str转换为datetime" class="headerlink" title="str转换为datetime"></a>str转换为datetime</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">from datetime import datetime
dt&#x3D;datetime.strptime(&#39;2022-04-19 12:22:00&#39;,&#39;%Y-%m-%d %H:%M:%S&#39;)
print(dt)
#运行结果如下：
2022-04-19 12:22:00<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="datetime转换为str"><a href="#datetime转换为str" class="headerlink" title="datetime转换为str"></a>datetime转换为str</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">from datetime import datetime
now&#x3D;datetime.now()
print(now.strftime(&#39;%a, %b %d %H:%M&#39;))
#运行结果如下：
Thu, Oct 13 16:13<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="datetime加减"><a href="#datetime加减" class="headerlink" title="datetime加减"></a>datetime加减</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">from datetime import datetime,timedelta
now&#x3D;datetime.now()
print(now)
print(now+timedelta(hours&#x3D;10))
print(now+timedelta(days&#x3D;1))
print(now+timedelta(days&#x3D;2,hours&#x3D;12))
#运行结果如下：
2022-10-13 16:17:44.344550
2022-10-14 02:17:44.344550
2022-10-14 16:17:44.344550
2022-10-16 04:17:44.344550<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="本地时间转换为UTC时间"><a href="#本地时间转换为UTC时间" class="headerlink" title="本地时间转换为UTC时间"></a>本地时间转换为UTC时间</h3><p>本地时间是指系统设定时区的时间，如北京时间是UTC+8:00，UTC时间是指UTC+0:00时区的时间。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">from datetime import datetime,timedelta,timezone
tz_utc_8&#x3D;timezone(timedelta(hours&#x3D;8))
now&#x3D;datetime.now()
print(now)
dt&#x3D;now.replace(tzinfo&#x3D;tz_utc_8)
print(dt)
#运行结果如下：
2022-10-13 16:25:07.688476
2022-10-13 16:25:07.688476+08:00<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="时区转换"><a href="#时区转换" class="headerlink" title="时区转换"></a>时区转换</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">from datetime import datetime,timedelta,timezone
utc_dt&#x3D;datetime.utcnow().replace(tzinfo&#x3D;timezone.utc)#拿到utc时间并设置时区为UTC+0:00
print(utc_dt)
bj_dt&#x3D;utc_dt.astimezone(timezone(timedelta(hours&#x3D;8)))#将转换时区为北京时间
print(bj_dt)
#运行结果如下：
2022-10-13 08:28:08.363061+00:00
2022-10-13 16:28:08.363061+08:00<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="collections"><a href="#collections" class="headerlink" title="collections"></a>collections</h2><p>collections是Python内建的一个集合模块，提供了许多有用的集合类。</p>
<h3 id="namedtuple"><a href="#namedtuple" class="headerlink" title="namedtuple"></a>namedtuple</h3><p>namedtuple是一个函数，用来创建一个自定义的tuple对象，并规定了tuple元素的个数，可以用属性而不是索引来引用tuple的某个元素：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">from collections import namedtuple
Point&#x3D;namedtuple(&#39;Point&#39;,[&#39;x&#39;,&#39;y&#39;])
Circle&#x3D;namedtuple(&#39;Circle&#39;,[&#39;x&#39;,&#39;y&#39;,&#39;r&#39;])
p&#x3D;Point(1,2)
c&#x3D;Circle(1,2,3)
print(isinstance(p,Point))
print(isinstance(p,tuple))
print(p.x,p.y)
print(c.x,c.y,c.r)
#运行结果如下：
True
True
1 2
1 2 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="deque"><a href="#deque" class="headerlink" title="deque"></a>deque</h3><p>deque可以高效实现插入和删除操作的双向列表，适合用于队列和栈：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">from collections import deque 
q&#x3D;deque([&#39;a&#39;,&#39;b&#39;,&#39;c&#39;])
q.append(&#39;x&#39;)
q.appendleft(&#39;y&#39;)
print(q)
#运行结果如下：
deque([&#39;y&#39;, &#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;x&#39;])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>除此之外，还支持pop()、popleft()等方法，可以非常高效地往头部添加或删除元素。</p>
<h3 id="defaultdict"><a href="#defaultdict" class="headerlink" title="defaultdict"></a>defaultdict</h3><p>使用dict时，若引用的Key不存在，就会抛出<code>KeyError</code>，若希望Key不存在时返回一个默认值，可以用defaultdict：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">from collections import defaultdict
d&#x3D;defaultdict(lambda:&#39;N&#x2F;A&#39;)
d[&#39;key1&#39;]&#x3D;&#39;abc&#39;
print(d[&#39;key1&#39;])
print(d[&#39;key2&#39;])
#运行结果如下：
abc
N&#x2F;A<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>默认值是调用函数返回的，而函数在创建defaultdict对象时传入。</p>
<h3 id="OrderedDict"><a href="#OrderedDict" class="headerlink" title="OrderedDict"></a>OrderedDict</h3><p>使用dict时，Key是无序的。若要保持Key的顺序，可以用OrderedDict：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">from collections import OrderedDict
d&#x3D;dict([(&#39;c&#39;,1),(&#39;a&#39;,2),(&#39;b&#39;,3)])
print(d)
od&#x3D;OrderedDict([(&#39;b&#39;,1),(&#39;a&#39;,2),(&#39;c&#39;,3)])
print(od)
odd&#x3D;OrderedDict()
odd[&#39;x&#39;]&#x3D;1
odd[&#39;z&#39;]&#x3D;2
odd[&#39;y&#39;]&#x3D;3
print(list(odd.keys()))#OrderedDict的Key按照插入的顺序排序，并非是Key自身的顺序，即odd是按插入值的前后排序，而不是根据&#39;x&#39;、&#39;y&#39;、&#39;z&#39;的顺序排

#运行结果如下：
&#123;&#39;c&#39;: 1, &#39;a&#39;: 2, &#39;b&#39;: 3&#125;
OrderedDict([(&#39;b&#39;, 1), (&#39;a&#39;, 2), (&#39;c&#39;, 3)])
[&#39;x&#39;, &#39;z&#39;, &#39;y&#39;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>OrderedDict可以实现一个先进先出的dict，当容量超出限制时，先删除最早添加的Key。</p>
<h3 id="ChainMap"><a href="#ChainMap" class="headerlink" title="ChainMap"></a>ChainMap</h3><p>ChainMap可以把一组dict串起来组成一个大的dict。但在查找数据时会按照顺序在内部的dict依次查找。</p>
<p>例如，使用ChainMap来实现参数的优先级查找，其顺序为：命令行参数&gt;环境变量&gt;默认参数：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">from collections import ChainMap
from email.policy import default
import os,argparse
# 构造默认参数:
defaults&#x3D;&#123;
    &#39;color&#39;:&#39;red&#39;,
    &#39;user&#39;:&#39;guest&#39;
&#125;
#构造命令行参数:
parser&#x3D;argparse.ArgumentParser()
parser.add_argument(&#39;-u&#39;,&#39;--user&#39;)
parser.add_argument(&#39;-c&#39;,&#39;--color&#39;)
namespace&#x3D;parser.parse_args()
command_line_args&#x3D;&#123;k :v for k,v in vars(namespace).items() if v&#125;
#组合成ChainMap:
combined&#x3D;ChainMap(command_line_args,os.environ,defaults)

print(&#39;color&#x3D;%s&#39; % combined[&#39;color&#39;])
print(&#39;user&#x3D;%s&#39; % combined[&#39;user&#39;])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>打开cmd，将路径切换到当前<code>.py</code>文件所在的目录，运行代码：</p>
<p>在没有任何参数传入时，打印出默认参数：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">C:\Users\Administrator\Desktop&gt;python learn.py

#运行结果如下：
color&#x3D;red
user&#x3D;guest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>当传入命令行参数时，优先使用命令行参数：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">C:\Users\Administrator\Desktop&gt;python learn.py -u bob
#运行结果如下：
color&#x3D;red
user&#x3D;bob<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>当同时传入命令行参数和环境变量时，也是优先使用命令行参数。</p>
<h3 id="Counter"><a href="#Counter" class="headerlink" title="Counter"></a>Counter</h3><p>Counter是一个简单的计数器，也是dict的一个子类，可以统计字符出现的个数：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">from collections import Counter
c&#x3D;Counter()
for ch in &#39;programming&#39;:
    c[ch]&#x3D;c[ch]+1
print(c)    
c.update(&#39;hello&#39;)#更新数据
print(c)
#运行结果如下：
Counter(&#123;&#39;r&#39;: 2, &#39;g&#39;: 2, &#39;m&#39;: 2, &#39;p&#39;: 1, &#39;o&#39;: 1, &#39;a&#39;: 1, &#39;i&#39;: 1, &#39;n&#39;: 1&#125;)
Counter(&#123;&#39;r&#39;: 2, &#39;o&#39;: 2, &#39;g&#39;: 2, &#39;m&#39;: 2, &#39;l&#39;: 2, &#39;p&#39;: 1, &#39;a&#39;: 1, &#39;i&#39;: 1, &#39;n&#39;: 1, &#39;h&#39;: 1, &#39;e&#39;: 1&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="urllib"><a href="#urllib" class="headerlink" title="urllib"></a>urllib</h2><p>urllib提供了一系列用于操作URL的功能。</p>
<h3 id="Get"><a href="#Get" class="headerlink" title="Get"></a>Get</h3><p>urllib的<code>request</code>模块可以非常方便地抓取URL内容，也就是发送一个GET请求到指定的页面，然后返回HTTP的响应。例如，对百度网址进行抓取，并返回响应：：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">from urllib import request

with request.urlopen(&#39;https:&#x2F;&#x2F;baidu.com&#x2F;&#39;) as f:
    data &#x3D; f.read()
    print(&#39;Status:&#39;, f.status, f.reason)
    for k, v in f.getheaders():
        print(&#39;%s: %s&#39; % (k, v))
    print(&#39;Data:&#39;, data.decode(&#39;utf-8&#39;))
#运行结果如下：
Status: 200 OK
Bdpagetype: 1
Bdqid: 0x8dfa7ad90002130f
Content-Type: text&#x2F;html; charset&#x3D;utf-8
Date: Mon, 24 Oct 2022 09:01:21 GMT
...
Data: &lt;!DOCTYPE html&gt;&lt;!--STATUS OK--&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv&#x3D;&quot;Content-Type&quot; content&#x3D;&quot;text&#x2F;html;charset&#x3D;utf-8&quot;&gt;&lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;IE&#x3D;edge,chrome&#x3D;1&quot;&gt;&lt;meta content&#x3D;&quot;always&quot; name&#x3D;&quot;referrer&quot;&gt;&lt;meta name&#x3D;&quot;theme-color&quot; content&#x3D;&quot;#ffffff&quot;&gt;&lt;meta name&#x3D;&quot;description&quot; content&#x3D;&quot;全球领先的中文...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>若要模拟浏览器发送GET请求，需要使用<code>Request</code>对象，通过往<code>Request</code>对象添加HTTP头，可以把请求伪装成浏览器。例如，模拟iPhone 6去请求豆瓣首页：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">from urllib import request

req &#x3D; request.Request(&#39;http:&#x2F;&#x2F;www.douban.com&#x2F;&#39;)
req.add_header(&#39;User-Agent&#39;, &#39;Mozilla&#x2F;6.0 (iPhone; CPU iPhone OS 8_0 like Mac OS X) AppleWebKit&#x2F;536.26 (KHTML, like Gecko) Version&#x2F;8.0 Mobile&#x2F;10A5376e Safari&#x2F;8536.25&#39;)
with request.urlopen(req) as f:
    print(&#39;Status:&#39;, f.status, f.reason)
    for k, v in f.getheaders():
        print(&#39;%s: %s&#39; % (k, v))
    print(&#39;Data:&#39;, f.read().decode(&#39;utf-8&#39;))
#运行结果如下：
&lt;!DOCTYPE html&gt;
&lt;html itemscope itemtype&#x3D;&quot;http:&#x2F;&#x2F;schema.org&#x2F;WebPage&quot; class&#x3D;&quot;ua-safari ua-mobile &quot;&gt;
  &lt;head&gt;
      &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;
      &lt;title&gt;豆瓣(手机版)&lt;&#x2F;title&gt;
      &lt;meta name&#x3D;&quot;google-site-verification&quot; content&#x3D;&quot;ok0wCgT20tBBgo9_zat2iAcimtN4Ftf5ccsh092Xeyw&quot; &#x2F;&gt;...    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="Post"><a href="#Post" class="headerlink" title="Post"></a>Post</h3><p>若要以POST发送一个请求，只需要把参数<code>data</code>以bytes形式传入。</p>
<p>例如模拟一个微博登录，先读取登录的邮箱和口令，然后按照weibo.cn的登录页的格式以<code>username=xxx&amp;password=xxx</code>的编码传入：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">from urllib import request, parse

print(&#39;Login to weibo.cn...&#39;)
email &#x3D; input(&#39;Email: &#39;)
passwd &#x3D; input(&#39;Password: &#39;)
login_data &#x3D; parse.urlencode([
    (&#39;username&#39;, email),
    (&#39;password&#39;, passwd),
    (&#39;entry&#39;, &#39;mweibo&#39;),
    (&#39;client_id&#39;, &#39;&#39;),
    (&#39;savestate&#39;, &#39;1&#39;),
    (&#39;ec&#39;, &#39;&#39;),
    (&#39;pagerefer&#39;, &#39;https:&#x2F;&#x2F;passport.weibo.cn&#x2F;signin&#x2F;welcome?entry&#x3D;mweibo&amp;r&#x3D;http%3A%2F%2Fm.weibo.cn%2F&#39;)
])

req &#x3D; request.Request(&#39;https:&#x2F;&#x2F;passport.weibo.cn&#x2F;sso&#x2F;login&#39;)
req.add_header(&#39;Origin&#39;, &#39;https:&#x2F;&#x2F;passport.weibo.cn&#39;)
req.add_header(&#39;User-Agent&#39;, &#39;Mozilla&#x2F;6.0 (iPhone; CPU iPhone OS 8_0 like Mac OS X) AppleWebKit&#x2F;536.26 (KHTML, like Gecko) Version&#x2F;8.0 Mobile&#x2F;10A5376e Safari&#x2F;8536.25&#39;)
req.add_header(&#39;Referer&#39;, &#39;https:&#x2F;&#x2F;passport.weibo.cn&#x2F;signin&#x2F;login?entry&#x3D;mweibo&amp;res&#x3D;wel&amp;wm&#x3D;3349&amp;r&#x3D;http%3A%2F%2Fm.weibo.cn%2F&#39;)

with request.urlopen(req, data&#x3D;login_data.encode(&#39;utf-8&#39;)) as f:
    print(&#39;Status:&#39;, f.status, f.reason)
    for k, v in f.getheaders():
        print(&#39;%s: %s&#39; % (k, v))
    print(&#39;Data:&#39;, f.read().decode(&#39;utf-8&#39;))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>若登录成功，获得的响应如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">Status: 200 OK
Server: nginx&#x2F;1.2.0
...
Set-Cookie: SSOLoginState&#x3D;1432620126; path&#x3D;&#x2F;; domain&#x3D;weibo.cn
...
Data: &#123;&quot;retcode&quot;:20000000,&quot;msg&quot;:&quot;&quot;,&quot;data&quot;:&#123;...,&quot;uid&quot;:&quot;1658384301&quot;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>若登录失败，获得的响应如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">...
Data: &#123;&quot;retcode&quot;:50011002,&quot;msg&quot;:&quot;\u7528\u6237\u540d\u6216\u5bc6\u7801\u9519\u8bef&quot;,&quot;data&quot;:&#123;&quot;username&quot;:&quot;123456@qq.com&quot;,&quot;errline&quot;:15&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="Handler"><a href="#Handler" class="headerlink" title="Handler"></a>Handler</h3><p>若需要更复杂的控制，比如通过一个Proxy去访问网站，需要利用<code>ProxyHandler</code>来处理，例如：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">proxy_handler &#x3D; urllib.request.ProxyHandler(&#123;&#39;http&#39;: &#39;http:&#x2F;&#x2F;www.example.com:3128&#x2F;&#39;&#125;)
proxy_auth_handler &#x3D; urllib.request.ProxyBasicAuthHandler()
proxy_auth_handler.add_password(&#39;realm&#39;, &#39;host&#39;, &#39;username&#39;, &#39;password&#39;)
opener &#x3D; urllib.request.build_opener(proxy_handler, proxy_auth_handler)
with opener.open(&#39;http:&#x2F;&#x2F;www.example.com&#x2F;login.html&#39;) as f:
    pass<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="常用第三方模块"><a href="#常用第三方模块" class="headerlink" title="常用第三方模块"></a>常用第三方模块</h1><h2 id="requests"><a href="#requests" class="headerlink" title="requests"></a>requests</h2><p>Python内置的urllib模块，用于访问网络资源。但是，它用起来比较麻烦，而且，缺少很多实用的高级功能。</p>
<p>更好的方案是使用requests。它是一个Python第三方库，处理URL资源特别方便。</p>
<p>安装request：<code>pip install requests</code></p>
<h3 id="requests的使用"><a href="#requests的使用" class="headerlink" title="requests的使用"></a>requests的使用</h3><p>通过GET访问一个页面：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">import requests 
r&#x3D;requests.get(&#39;https:&#x2F;&#x2F;www.baidu.com&#x2F;&#39;)
print(r.status_code)#访问状态码
print(r.text)#网页详情
#运行结果如下：
200
&#39;&#39;&#39;&lt;!DOCTYPE html&gt;
&lt;!--STATUS OK--&gt;&lt;html&gt; &lt;head&gt;&lt;meta http-equiv&#x3D;content-type content&#x3D;text&#x2F;html;charset&#x3D;utf-8&gt;&lt;meta http-equiv&#x3D;X-UA-Compatible content&#x3D;IE&#x3D;Edge&gt;&lt;meta content&#x3D;always name&#x3D;referrer&gt;&lt;link rel&#x3D;stylesheet type&#x3D;text&#x2F;css ...&#39;&#39;&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>对于带参数的URL，传入一个dict作为params参数：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">import requests 
r&#x3D;requests.get(&#39;https:&#x2F;&#x2F;www.baidu.com&#x2F;&#39;,params&#x3D;&#123;&#39;q&#39;:&#39;python&#39;,&#39;cat&#39;:&#39;1001&#39;&#125;)
print(r.url)#实际请求的URL
print(r.encoding)#自动检测编码
print(r.content)#获得bytes对象
#运行结果如下：
https:&#x2F;&#x2F;www.baidu.com&#x2F;?q&#x3D;python&amp;cat&#x3D;1001
ISO-8859-1
&#39;&#39;&#39;b&#39;&lt;!DOCTYPE html&gt;\r\n&lt;!--STATUS OK--&gt;&lt;html&gt; &lt;head&gt;&lt;meta http-equiv&#x3D;content-type content&#x3D;text&#x2F;html;charset&#x3D;utf-8&gt;&lt;meta http-equiv&#x3D;X-UA-Compatible content&#x3D;IE&#x3D;Edge&gt;&lt;meta content&#x3D;always name&#x3D;referrer&gt;&lt;link rel&#x3D;stylesheet type&#x3D;text&#x2F;css ...&#39;&#39;&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>对于特定类型的响应，例如JSON，可以直接获取：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">import requests 
#获取JSON
r1&#x3D;requests.get(&#39;https:&#x2F;&#x2F;p.3.cn&#x2F;prices&#x2F;mgets?skuIds&#x3D;J_10026711061553&#39;)
#需要传入HTTP Header时，传入一个dict
r2&#x3D;requests.get(&#39;https:&#x2F;&#x2F;douban.com&#x2F;&#39;,headers&#x3D;&#123;&#39;User-Agent&#39;: &#39;Mozilla&#x2F;5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit&#39;&#125;)
print(r1.json())#必须为JSON类型的网址
print(r2.text)

#运行结果如下：
[&#123;&#39;exception&#39;: &#39;该接口即将下线，请联系(erp)wangjianyu1，liuhuimin9，liteng36;p.3.cn,null&#39;&#125;]


&#39;&#39;&#39;&lt;!DOCTYPE html&gt;
&lt;html itemscope itemtype&#x3D;&quot;http:&#x2F;&#x2F;schema.org&#x2F;WebPage&quot; class&#x3D;&quot;ua-mobile &quot;&gt;
  &lt;head&gt;
      &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;
      &lt;title&gt;豆瓣(手机版)&lt;&#x2F;title&gt;
      &lt;meta name&#x3D;&quot;google-site-verification&quot; content&#x3D;&quot;ok0wCgT20tBBgo9_zat2iAcimtN4Ftf5ccsh092Xeyw&quot; &#x2F;&gt; ...&#39;&#39;&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>需要发送POST请求，只需要把get()方法变成post()，然后传入data参数作为POST请求的数据：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">r&#x3D;requests.post(&#39;https:&#x2F;&#x2F;accounts.douban.com&#x2F;login&#39;, data&#x3D;&#123;&#39;form_email&#39;: &#39;abc@example.com&#39;, &#39;form_password&#39;: &#39;123456&#39;&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>requests默认使用<code>application/x-www-form-urlencoded</code>对POST数据编码。如果要传递JSON数据，可以直接传入json参数：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">params&#x3D;&#123;&#39;key&#39;: &#39;value&#39;&#125;
r&#x3D;requests.post(url,json&#x3D;params) # 内部自动序列化为JSON<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>类似的，上传文件需要更复杂的编码格式，但是requests把它简化成<code>files</code>参数：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">upload_files&#x3D;&#123;&#39;file&#39;:open(&#39;report.xls&#39;,&#39;rb&#39;)&#125;
r&#x3D;requests.post(url,files&#x3D;upload_files)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>在读取文件时，注意务必使用<code>&#39;rb&#39;</code>即二进制模式读取，这样获取的<code>bytes</code>长度才是文件的长度。</p>
<p>requests对获取HTTP响应的其他信息也非常简单。例如，获取响应头：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">print(r.headers)
print(r.headers[&#39;Content-Type&#39;])
#运行结果如下：
&#123;Content-Type&#39;: &#39;text&#x2F;html; charset&#x3D;utf-8&#39;, &#39;Transfer-Encoding&#39;: &#39;chunked&#39;, &#39;Content-Encoding&#39;: &#39;gzip&#39;, ...&#125;
&#39;text&#x2F;html; charset&#x3D;utf-8&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>requests对Cookie做了特殊处理，使得不必解析Cookie就可以轻松获取指定的Cookie：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">print(r.cookies[&#39;ts&#39;])
#运行结果如下：
&#39;example_cookie_12345&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>要在请求中传入Cookie，只需准备一个dict传入<code>cookies</code>参数：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">cs&#x3D;&#123;&#39;token&#39;:&#39;12345&#39;,&#39;status&#39;:&#39;working&#39;&#125;
r&#x3D;requests.get(url,cookies&#x3D;cs)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>最后，要指定超时，传入以秒为单位的timeout参数：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">r&#x3D;requests.get(url,timeout&#x3D;2.5) # 2.5秒后超时<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h3><p>参考《OA统一待办接口协议》，使用requests访问统一待办接口，给自己生成一个待办，确认生成后，调用删除接口删除待办。</p>
<p>代码如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">import requests 
import json
#基础数据
headers&#x3D;&#123;&#39;Content-Type&#39;:&#39;application&#x2F;json&#39;&#125;
url&#x3D;&#39;GetToken的URL地址&#39;#URL地址以http:&#x2F;&#x2F;开头，后接ip形式的url
url_create&#x3D;&#39;CreateTask的URL地址&#39;
url_del&#x3D;&#39;DeleteTask的URL地址&#39;
data&#x3D;&#123;&quot;app_id&quot;:&quot;app_id的数值&quot;,&quot;app_secret&quot;:&quot;app_secret的数值&quot;&#125;

#获取调用凭证access_token
r&#x3D;requests.post(url,json&#x3D;data)
token&#x3D;json.loads(r.text)[&#39;access_token&#39;]

#生成待办事项
data_create&#x3D;&#123;&quot;access_token&quot;:token,&quot;title&quot;:&quot;20221025测试&quot;,&quot;task_segment&quot;:&quot;报名&quot;,\
    &quot;task_url&quot;:&quot;http:&#x2F;&#x2F;tangmenjue.top&#x2F;&quot;,&quot;staff_id&quot;:&quot;staff_id的数值&quot;&#125;
r_create&#x3D;requests.post(url_create,json&#x3D;data_create)
print(r_create.text)

r_del&#x3D;requests.post(url,json&#x3D;data)
task_id&#x3D;json.loads(r_create.text)[&#39;task_id&#39;]
# task_id&#x3D;&#39;17837ed5-48e4-4120-964a-477d258aaeb3&#39;

#确认待办事项已生成后，调用删除接口删除待办。
data_del&#x3D;&#123;&quot;access_token&quot;:token,&#39;task_id&#39;:task_id&#125;
r_del&#x3D;requests.post(url_del,json&#x3D;data_del)
print(r_del.text)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="chardet"><a href="#chardet" class="headerlink" title="chardet"></a>chardet</h2><p>字符串编码一直是令人非常头疼的问题，尤其是在处理一些不规范的第三方网页的时候。虽然Python提供了Unicode表示的<code>str</code>和<code>bytes</code>两种数据类型，并且可以通过<code>encode()</code>和<code>decode()</code>方法转换，但是，在不知道编码的情况下，对<code>bytes</code>做<code>decode()</code>不好做。</p>
<p>对于未知编码的<code>bytes</code>，要把它转换成<code>str</code>，需要先“猜测”编码。猜测的方式是先收集各种编码的特征字符，根据特征字符判断，就能有很大概率“猜对”，此时可以用chardet来检测编码。</p>
<h1 id="venv"><a href="#venv" class="headerlink" title="venv"></a>venv</h1><p>在开发Python应用程序的时候，系统安装的Python3只有一个版本：3.10。所有第三方的包都会被<code>pip</code>安装到Python3的<code>site-packages</code>目录下。</p>
<p>如果要同时开发多个应用程序，那这些应用程序都会共用一个Python，就是安装在系统的Python 3。如果应用A需要jinja 2.7，而应用B需要jinja 2.6怎么办？</p>
<p>这种情况下，每个应用可能需要各自拥有一套“独立”的Python运行环境。venv就是用来为一个应用创建一套“隔离”的Python运行环境。</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python学习笔记（十）</title>
    <url>/2022/10/13/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%EF%BC%89/</url>
    <content><![CDATA[<h1 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h1><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><p>Python的标准库提供了两个模块：<code>_thread</code>和<code>threading</code>，其中<code>_thread</code>是低级模块，<code>threading</code>是高级模块，对<code>_thread</code>进行了封装，绝大多数情况下，只是使用高级模块<code>thread</code>。<strong>任何进程默认会启动一个线程</strong>，将其称之为<strong>主线程</strong>，由<strong>主线程启动的新线程</strong>称之为<strong>子线程</strong>。</p>
<p>启动一个线程需要把一个函数传入并创建<code>Thread</code>实例，然后调用<code>start()</code>执行：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">import time,threading 
#新线程执行的代码
def loop():
    print(&#39;thread %s is running...&#39;%threading.current_thread().name)
    n&#x3D;0
    while n&lt;5:
        n&#x3D;n+1 
        print(&#39;thread %s &gt;&gt;&gt;%s&#39;% (threading.current_thread().name,n))
        time.sleep(1)
    print(&#39;thread %s ended.&#39;% threading.current_thread().name)
# current_thread()可以返回当前线程的实例
print(&#39;thread %s is running...&#39;%threading.current_thread().name)
t&#x3D;threading.Thread(target&#x3D;loop,name&#x3D;&#39;LoopThread&#39;)#用LoopThread命名子线程，默认名字为Thread-1,Thread-2...
t.start()
t.join()
print(&#39;thread %s ended.&#39;% threading.current_thread().name)

#运行结果如下：
thread MainThread is running...#主线程为MainThread
thread LoopThread is running...
thread LoopThread &gt;&gt;&gt;1
thread LoopThread &gt;&gt;&gt;2
thread LoopThread &gt;&gt;&gt;3
thread LoopThread &gt;&gt;&gt;4
thread LoopThread &gt;&gt;&gt;5
thread LoopThread ended.
thread MainThread ended.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="Lock"><a href="#Lock" class="headerlink" title="Lock"></a>Lock</h3><p>多进程中，同一个变量各自有一份拷贝存在于每个进程中，<strong>多个进程之间的变量之间互不影响。</strong></p>
<p>多线程中，所有<strong>变量都由所有线程共享</strong>，所以任何一个变量都可以被任何线程修改，即容易发生像在<code>sql</code>数据库中的读脏数据的情况。<strong>若要避免线程读脏数据的情况，就要给变量上锁</strong>。</p>
<p>可以通过<code>threading.Lock()</code>来创建一个锁：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">import time,threading
balance&#x3D;0
def change_it(n):
    global balance
    balance&#x3D;balance+n
    balance&#x3D;balance-n

lock&#x3D;threading.Lock()#创建锁
def run_thread(n):
    for i in range(100000):
        #获取锁
        lock.acquire()
        try:
            change_it(n)#可修改的变量
        finally:
            lock.release()#释放锁
t1&#x3D;threading.Thread(target&#x3D;run_thread,args&#x3D;(5,))
t2&#x3D;threading.Thread(target&#x3D;run_thread,args&#x3D;(8,))
t1.start()
t2.start()
t1.join()
t2.join()
print(balance)

#运行结果如下：
0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>当<strong>多个线程同时执行<code>lock.acquire（）</code>时，只有一个线程能成功获取锁</strong>，然后继续执行代码，其他线程就继续等待直到获得锁为止。<strong>获得锁的线程用完后一定要释放锁</strong>，否则其他等待的线程将永远等下去。</p>
<h3 id="多核CPU"><a href="#多核CPU" class="headerlink" title="多核CPU"></a>多核CPU</h3><p>一个死循环线程会100%占用一个CPU。若有两个死循环线程，在多核CPU中会占用200%的CPU，即两个CPU核心。若想把n核CPU的核心全部跑满，就必须启动n个死循环线程。</p>
<p>但在6核CPU中运行python启动6个死循环线程，CPU占用率也就仅有25%。死循环线程代码如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">import threading,multiprocessing
def loop():
    x&#x3D;0
    while True:
        x&#x3D;x^1
for i in range(multiprocessing.cpu_count()):
    t&#x3D;threading.Thread(target&#x3D;loop)
    t.start()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="GIL锁"><a href="#GIL锁" class="headerlink" title="GIL锁"></a>GIL锁</h4><p>这是因为python解释器执行代码时，有一个<strong>GIL锁</strong>（Global Interoreter Lock），<strong>任何python线程执行前，必须先获得GIL锁，然后每执行100条字节码，解释器就自动释放GIL锁。</strong>这个GIL全局锁实际上给所有线程的执行代码都上了锁。因此<strong>多线程在python中只能交替执行</strong>，即使有100个线程跑在100核CPU上，也<strong>只能用到1个核</strong>。</p>
<p>因此在python中可以使用多线程，却不能够有效地利用多核。python虽然不能实现多线程并发，但可以通过多线程实现多核任务。多个python进程有各自独立的GIL锁，互不影响。</p>
<h2 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a><code>ThreadLocal</code></h2><p>在多线程环境下，每个线程都有自己的数据。一个线程使用局部变量比使用全局变量好。而全局变量的每次修改都要加锁，因此可以考虑用一个全局<code>dict</code>存放所有对象，然后以thread自身作为key来获得线程对应的对象，而在<code>ThreadLocal</code>中可以自动做这件事：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">import threading
local_school&#x3D;threading.local()#创建全局ThreadLocal对象
def process_student():
    std&#x3D;local_school.student#获取当前线程关联的student
    print(&#39;Hello,%s (in %s)&#39;%(std,threading.current_thread().name))
def process_thread(name):
    local_school.student&#x3D;name#绑定ThreadLocal的student
    process_student()
t1&#x3D;threading.Thread(target&#x3D;process_thread,args&#x3D;(&#39;Alice&#39;,),name&#x3D;&#39;Thread-A&#39;)
t2&#x3D;threading.Thread(target&#x3D;process_thread,args&#x3D;(&#39;Bob&#39;,),name&#x3D;&#39;Thread-B&#39;)    
t1.start()
t2.start()
t1.join()
t2.join()
#运行结果如下：
Hello,Alice (in Thread-A)
Hello,Bob (in Thread-B)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以理解为全局变量<code>local_school</code>是一个<code>dict</code>，其不但可以用<code>local_school.student</code>，还可以绑定其他变量。</p>
<p><code>ThreadLocal</code>最常用在为每个线程绑定一个数据库连接、HTTP请求、用户身份信息等。</p>
<h2 id="进程-vs-线程"><a href="#进程-vs-线程" class="headerlink" title="进程 vs 线程"></a>进程 vs 线程</h2><p>要实现多任务通常会设计Master-Worker模式，Master复制分配任务，Worker负责执行任务，故在多任务环境下，通常是一个Master，多个Worker。</p>
<p>用多进程实现Master-Worker，主进程就是Master，其他进程就是Worker。</p>
<p>用多线程实现Master-Worker，主线程就是Master，其他进程就是Worker。</p>
<p><strong>多进程模式最大的优点是稳定性高。</strong>一个子进程崩溃了不会影响主进程核其他进程。<strong>其缺点是创建进程的开销大</strong>，占用系统资源较多，且操作系统同时运行的进程数也有限。</p>
<p><strong>多线程模式通常比多进程快一点，其缺点是任何一个线程挂掉都可能直接造成整个进程崩溃。</strong></p>
<h3 id="线程切换"><a href="#线程切换" class="headerlink" title="线程切换"></a>线程切换</h3><p>操作系统在切换进程或线程时，需要先保存当前执行的现场环境（CPU寄存器状态、内存页等），然后把新任务的执行环境准备好（恢复上次的寄存器状态、切换内存页等），才能开始执行。</p>
<h3 id="计算密集型-vs-IO密集型"><a href="#计算密集型-vs-IO密集型" class="headerlink" title="计算密集型 vs IO密集型"></a>计算密集型 vs IO密集型</h3><p>把任务分为计算密集型和IO密集型，并以此来考虑是否采用多任务。</p>
<p><strong>计算密集型任务的特点</strong>是<strong>进行大量的计算，消耗CPU资源</strong>。要最高效的利用CPU，<strong>计算密集型任务同时进行的数量应当等于CPU的核数</strong>。python做计算密集型任务的运行效率很低，故最好是用C语言编写计算密集型任务。</p>
<p><strong>IO密集型任务的特点</strong>是<strong>CPU消耗很少，任务的大部分时间都在等待IO操作完成</strong>。对于IO密集型任务，<strong>在一定限度内的任务最多，CPU效率越高</strong>。</p>
<h3 id="异步IO"><a href="#异步IO" class="headerlink" title="异步IO"></a>异步IO</h3><p>若充分利用操作系统提供的异步IO支持，就能用单线程模型来执行多任务，这种全新的模型称为<strong>事件驱动模型</strong>。对于python来说，<strong>单线程的异步编程模型称为协程</strong>，有了协程的支持，就可以基于事件驱动编写高效的多任务程序。</p>
<h2 id="分布式进程"><a href="#分布式进程" class="headerlink" title="分布式进程"></a>分布式进程</h2><p>在线程和进程中，应当优先选择进程。因为进程更稳定，而且<strong>进程可以分布到多台机器</strong>上，而<strong>线程最多只能分布到同一台机器的多个CPU上</strong>。</p>
<p>python的<code>multiprocessing</code>模块不但支持多进程，其中的<code>managers</code>子模块还支持把多进程分布到多台机器上。一个服务进程可以作为调度者，将任务分布到其他多个进程中，依靠网络通信。</p>
<p>若有一个通过<code>Queue</code>通信的多进程程序在同一台机器上运行，现在要把发送任务的进程和处理任务的进程分布到两台机器上。原有的<code>Queue</code>可以继续用，通过<code>managers</code>模块把<code>Queue</code>通过网络暴露出去，其他机器的进程就可以访问<code>Queue</code>了。其实现如下：</p>
<p>服务器端Master的代码：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">import random,time,queue
from multiprocessing.managers import BaseManager
from multiprocessing import freeze_support  #server启动报错，提示需要引用此包

#发送任务的队列
task_queue &#x3D; queue.Queue()
#接收结果的队列
result_queue &#x3D; queue.Queue()

#从BaseManager继承的QueueManager
class QueueManager(BaseManager):
    pass
#win10 64 貌似不支持callable下调用匿名函数lambda，这里封装一下
def return_task_queue():
    global task_queue
    return task_queue
def return_result_queue():
    global result_queue
    return result_queue

def test():
    #把两个Queue注册到网络上，callable参数关联了Queue对象
    #QueueManager.register(&#39;get_task_queue&#39;,callable&#x3D;lambda:task_queue)
    #QueueManager.register(&#39;get_result_queue&#39;,callable&#x3D;lambda:result_queue)
    QueueManager.register(&#39;get_task_queue&#39;,callable&#x3D;return_task_queue)
    QueueManager.register(&#39;get_result_queue&#39;,callable&#x3D;return_result_queue)
    #绑定端口5000，设置验证码‘abc’
    manager &#x3D; QueueManager(address&#x3D;(&#39;127.0.0.1&#39;,5000),authkey&#x3D;b&#39;abc&#39;)#这里必须加上本地默认ip地址127.0.0.1
    #启动Queue
    manager.start()
    print(&#39;start server master&#39;)
    #获得通过网络访问的Queue对象
    task &#x3D; manager.get_task_queue()
    result &#x3D; manager.get_result_queue()
    #放几个任务进去
    for i in range(10):
        n &#x3D; random.randint(0,10000)
        print(&#39;put task %d...&#39; % n)
        task.put(n)
    #从result队列读取结果
    print(&#39;try get results...&#39;)
    for i in range(10):
        r &#x3D; result.get(timeout&#x3D;10)
        print(&#39;result:%s&#39; % r)

    #关闭
    manager.shutdown()
    print(&#39;master exit&#39;)

if __name__ &#x3D;&#x3D; &#39;__main__&#39;:
    freeze_support()
    test()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在另一个文件里写非服务端Worker的代码：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">import time,sys,queue
from multiprocessing.managers import BaseManager

#创建类似的QueueManager
class QueueManager(BaseManager):
    pass

#由于这个QueueManager只从网络上获取Queue，所以注册时只提供名字即可
QueueManager.register(&#39;get_task_queue&#39;)
QueueManager.register(&#39;get_result_queue&#39;)

#连接到服务器，也就是运行task_master.py的机器
server_addr &#x3D; &#39;127.0.0.1&#39;
print(&#39;connect to server %s...&#39;% server_addr)
#端口和验证码注意要保持完全一致
m &#x3D; QueueManager(address&#x3D;(server_addr,5000),authkey&#x3D;b&#39;abc&#39;)
#从网络连接
m.connect()
#获取Queue的对象
task &#x3D; m.get_task_queue()
result &#x3D; m.get_result_queue()
#从task队列获取任务，并把结果写入result队列
for i in range(10):
    try:
        n &#x3D; task.get(timeout&#x3D;1)
        print(&#39;run task %d * %d...&#39;% (n,n))
        r &#x3D; &#39;%d * %d &#x3D; %d&#39; % (n,n,n*n)
        time.sleep(1)
        result.put(r)
    except queue.Empty:
        print(&#39;task queue is empty&#39;)
#处理结果
print(&#39;worker exit&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>先运行服务端Marker的代码，再运行非服务端Worker的代码，运行结果如下：</p>
<p>服务端Marker的运行结果如下图：</p>
<p><img src="/2022/10/13/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%EF%BC%89/1.png" alt></p>
<p>非服务端Worker的运行结果如下图：</p>
<p><img src="/2022/10/13/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%EF%BC%89/2.png" alt></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python学习笔记（四）</title>
    <url>/2022/10/10/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
    <content><![CDATA[<h1 id="切片（Slice）"><a href="#切片（Slice）" class="headerlink" title="切片（Slice）"></a>切片（Slice）</h1><p>具体形式：<code>L[0:3]</code>,其中<code>L</code>为list名称，<code>0:3</code>代表list的取值范围，与matlab中的数组取值类似。<strong>list、tuple、字符串</strong>可以用切片操作。</p>
<h2 id="list切片"><a href="#list切片" class="headerlink" title="list切片"></a>list切片</h2><p>下面以一个list为例来说明切片的用法：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">L&#x3D;[&#39;Michael&#39;, &#39;Sarah&#39;, &#39;Tracy&#39;, &#39;Bob&#39;, &#39;Jack&#39;]
print(L[0:3])#取前3个元素
print(L[:3])#第一个索引是0可省略
print(L[-2:])#取后2个元素
print(L[-2:-1])#取倒数第2的元素
print(L[0:4:2])#前4个数，每两个取一个
print(L[::2])#所有数，每两个取一个
print(L[:])#复制一个list
#运行结果如下：
[&#39;Michael&#39;, &#39;Sarah&#39;, &#39;Tracy&#39;]
[&#39;Michael&#39;, &#39;Sarah&#39;, &#39;Tracy&#39;]
[&#39;Bob&#39;, &#39;Jack&#39;]
[&#39;Bob&#39;]
[&#39;Michael&#39;, &#39;Tracy&#39;]
[&#39;Michael&#39;, &#39;Tracy&#39;, &#39;Jack&#39;]
[&#39;Michael&#39;, &#39;Sarah&#39;, &#39;Tracy&#39;, &#39;Bob&#39;, &#39;Jack&#39;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="tuple切片"><a href="#tuple切片" class="headerlink" title="tuple切片"></a>tuple切片</h2><p>由于tuple也是一种list，因此tuple也可以用切片操作，其操作结果仍是tuple：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">L&#x3D;(0,1,2,3,4)
print(L[:3])
#运行结果如下：
(0, 1, 2)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="字符串切片"><a href="#字符串切片" class="headerlink" title="字符串切片"></a>字符串切片</h2><p>字符串也可以看成是一种list，因此，字符串也可以进行切片操作。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">L&#x3D;&#39;ZHANGSAN&#39;
print(L[:3])
#运行结果如下：
ZHA<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h2><p>利用切片操作，实现一个<code>trim()</code>函数，去除字符串首尾的空格，注意不要调用str的<code>strip()</code>方法。</p>
<p>代码如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"># -*- coding: utf-8 -*-
def trim(s):
    n&#x3D;0
    m&#x3D;len(s)
    for i in range(len(s)):
        if s[i]&#x3D;&#x3D;&#39; &#39;:
            n&#x3D;n+1
        else:
            break
    for j in range(len(s)):
        if s[m-1]&#x3D;&#x3D;&#39; &#39;:
            m&#x3D;m-1
        else:
            break
    return s[n:m]
# 测试:
if trim(&#39;hello  &#39;) !&#x3D; &#39;hello&#39;:
    print(&#39;测试失败!&#39;)
elif trim(&#39;  hello&#39;) !&#x3D; &#39;hello&#39;:
    print(&#39;测试失败!&#39;)
elif trim(&#39;  hello  &#39;) !&#x3D; &#39;hello&#39;:
    print(&#39;测试失败!&#39;)
elif trim(&#39;  hello  world  &#39;) !&#x3D; &#39;hello  world&#39;:
    print(&#39;测试失败!&#39;)
elif trim(&#39;&#39;) !&#x3D; &#39;&#39;:
    print(&#39;测试失败!&#39;)
elif trim(&#39;    &#39;) !&#x3D; &#39;&#39;:
    print(&#39;测试失败!&#39;)
else:
    print(&#39;测试成功!&#39;)
#运行结果如下：
测试成功!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h1><p>通过<code>for</code>循环来遍历list或tuple称为迭代。只要是可迭代对象，无论有无下标，都可以迭代。</p>
<h2 id="迭代dict"><a href="#迭代dict" class="headerlink" title="迭代dict"></a>迭代<code>dict</code></h2><p>默认情况下，<code>dict</code>迭代的是key。如果要迭代value，可以用<code>for value in d.values()</code>语句，如果要同时迭代key和value，可以用<code>for k,v in d.items()</code>语句。由于<code>dict</code>的存储不是按照<code>list</code>的方式顺序排列，因此迭代出的结果顺序很可能不一样。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">d&#x3D;&#123;&#39;a&#39;:1,&#39;b&#39;:2,&#39;c&#39;:3&#125;
for key in d:
    print(key)
#运行结果如下：
a
b
c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="迭代字符串"><a href="#迭代字符串" class="headerlink" title="迭代字符串"></a>迭代字符串</h2><p>字符串也是可迭代对象，也可以作用于for循环。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">d&#x3D;&#39;abc&#39;
for key in d:
    print(key)
#运行结果如下：
a
b
c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="对list实现下标循环"><a href="#对list实现下标循环" class="headerlink" title="对list实现下标循环"></a>对list实现下标循环</h2><p>通过<code>enumerate</code>函数把list变成索引-元素对，便可以在for循环中同时迭代索引和元素本身：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">for i,value in enumerate([&#39;A&#39;,&#39;B&#39;,&#39;C&#39;]):
    print(i,value)
#运行结果如下：
0 A
1 B
2 C<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="练习题-1"><a href="#练习题-1" class="headerlink" title="练习题"></a>练习题</h2><p>请使用迭代查找一个list中最小和最大值，并返回一个tuple。</p>
<p>代码如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"># -*- coding: utf-8 -*-
def findMinAndMax(L):
    minl&#x3D;999
    maxl&#x3D;0
    if L&#x3D;&#x3D;[]:
        return (None, None)
    for i in L:
        if(minl&gt;int(i)):
            minl&#x3D;i
        if(maxl&lt;int(i)):
            maxl&#x3D;i
    return (minl, maxl)
# 测试
if findMinAndMax([]) !&#x3D; (None, None):
    print(&#39;测试失败!1&#39;)
elif findMinAndMax([7]) !&#x3D; (7, 7):
    print(&#39;测试失败!&#39;)
elif findMinAndMax([7, 1]) !&#x3D; (1, 7):
    print(&#39;测试失败!&#39;)
elif findMinAndMax([7, 1, 3, 9, 5]) !&#x3D; (1, 9):
    print(&#39;测试失败!&#39;)
else:
    print(&#39;测试成功!&#39;)    
#运行结果如下：
测试成功!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="列表生成式"><a href="#列表生成式" class="headerlink" title="列表生成式"></a>列表生成式</h1><p>使用列表生成式，可以通过一个list快速生成另一个list。</p>
<p>如要生成<code>list[1,2,3,4,5,6,7,8,9]</code>可用<code>list(range(1,10))</code>生成。</p>
<p>若要生成<code>[1x2,2x2,3x3,...,10x10]</code>可用<code>[x*x for x in range(1,11)]</code>生成。</p>
<p>写列表生成式时，要把<strong>生成的元素放到前面</strong>，后面再跟for循环，for循环后可以加上if判断，也可以使用两层循环：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">L&#x3D;[x*x for x in range(1,11) if x%2&#x3D;&#x3D;0]
print(L)
T&#x3D;[m+n for m in &#39;ABC&#39; for n in &#39;XYZ&#39;]
print(T)
#运行结果如下：
[4, 16, 36, 64, 100]
[&#39;AX&#39;, &#39;AY&#39;, &#39;AZ&#39;, &#39;BX&#39;, &#39;BY&#39;, &#39;BZ&#39;, &#39;CX&#39;, &#39;CY&#39;, &#39;CZ&#39;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>for循环可以同时使用两个或多个变量，如dict的items可以同时迭代key和value：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">d&#x3D;&#123;&#39;x&#39;:1,&#39;y&#39;:2,&#39;z&#39;:3&#125;
for k,v in d.items():
    print(k,&#39;&#x3D;&#39;,v)
#运行结果如下：
x &#x3D; 1
y &#x3D; 2
z &#x3D; 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>因此列表生成式也可以使用两个变量来生产list：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">d&#x3D;&#123;&#39;x&#39;:&#39;1&#39;,&#39;y&#39;:&#39;2&#39;,&#39;z&#39;:&#39;3&#39;&#125;
L&#x3D;[k+&#39;&#x3D;&#39;+v for k,v in d.items()]
print(L)
#运行结果如下：
[&#39;x&#x3D;1&#39;, &#39;y&#x3D;2&#39;, &#39;z&#x3D;3&#39;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>注意</strong>：这里的<strong>value只能为str类型</strong>，由于非字符串类型没有<code>lower()</code>方法，所以列表生成式会报错。可以使用<code>isinstance</code>函数来判断一个变量a是不是字符串，具体形式为<code>isinstance(a,str)</code>。</p>
<h2 id="if…else"><a href="#if…else" class="headerlink" title="if…else"></a>if…else</h2><p>在<strong>使用列表生成式</strong>时，<strong>不能在最后的if加上else</strong>。这是因为跟在for后面的if是一个筛选条件，不能带else。而把<strong>if写在for前面必须加else</strong>，否则会报错。这是因为for前面的部分是一个表达式，其必须要计算出一个结果。</p>
<h2 id="练习题-2"><a href="#练习题-2" class="headerlink" title="练习题"></a>练习题</h2><p>请修改列表生成式，通过添加<code>if</code>语句保证列表生成式能正确地执行。</p>
<p>代码如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"># -*- coding: utf-8 -*-
L1 &#x3D; [&#39;Hello&#39;, &#39;World&#39;, 18, &#39;Apple&#39;, None]
L2 &#x3D; [k.lower() for k in L1 if isinstance(k,str)&#x3D;&#x3D;True]
# 测试:
print(L2)
if L2 &#x3D;&#x3D; [&#39;hello&#39;, &#39;world&#39;, &#39;apple&#39;]:
    print(&#39;测试通过!&#39;)
else:
    print(&#39;测试失败!&#39;)
#运行结果如下：
[&#39;hello&#39;, &#39;world&#39;, &#39;apple&#39;]
测试通过!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h1><p>在循环过程中不断推算出后续元素，故不必创建完整list，从而节省大量空间的机制，称为生成器（generator）。</p>
<p><strong>创建生成器</strong>:将列表生成式的<code>[]</code>改成<code>()</code></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">L&#x3D;[x*x for x in range(10)]
print(L)
g&#x3D;(x*x for x in range(10))
print(g)
#运行结果如下：
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
&lt;generator object &lt;genexpr&gt; at 0x7ff38be35ac0&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="打印生成器的元素"><a href="#打印生成器的元素" class="headerlink" title="打印生成器的元素"></a><strong>打印生成器的元素</strong></h2><p><strong>方法一：</strong></p>
<p>通过<code>next()</code>函数单个打印生成器中的元素，具体形式如下：<code>next(g)</code></p>
<p><strong>方法二：</strong></p>
<p>使用<code>for</code>循环打印，具体形式如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">g &#x3D; (x * x for x in range (10))
for i in g:
    print(i)  
#运行结果如下：
0
1
4
9
16
25
36
49
64
81<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果生成器推算的算法比较复杂，用类型列表生成式的for循环无法实现时，还可以用函数来实现。比如打印斐波拉契数列：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">def fib(max):
    n,a,b&#x3D;0,0,1
    while n&lt;max:
        yield b
        a,b&#x3D;b,a+b#相当于t&#x3D;(b,a+b),t是一个tuple,a&#x3D;t[0],b&#x3D;t[1]
        n&#x3D;n+1
    return &#39;done&#39;    
print(fib(6))    
#运行结果如下：
&lt;generator object fib at 0x7f99e1f3dac0&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果一个函数定义中包含<code>yield</code>关键字，那么这个函数就不再是一个普通函数，而是一个generator函数，调用一个generator函数将返回一个generator。变成generator的函数在每次调用<code>next()</code>的时候执行，遇到<code>yield</code>语句返回，再次执行时从上次返回的<code>yield</code>语句处继续执行。</p>
<p>例如，定义一个generator函数，依次返回数字1,3,5：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">def odd():
    print(&#39;step 1&#39;)
    yield 1
    print(&#39;step 2&#39;)
    yield(3)
    print(&#39;step 3&#39;)
    yield(5)
o&#x3D;odd()
next(o)
next(o)
next(o)
#运行结果如下：
step 1
step 2
step 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>而每次调用<code>next(odd())</code>时，每次都会返回1.这是由于odd()会创建一个新的generator对象，每次调用<code>next(odd())</code>就创建一个完全独立的generator。</p>
<p>在斐波那契数列的例子中，在循环里不断调用<code>yield</code>，就会不断中断程序，此时需要给循环设置一个条件来退出循环，不然就会产生一个无限的数列，</p>
<p>把函数改成generator函数后，基本上不会用<code>next()</code>来获取下一个返回值，而是直接用for循环来迭代：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">def fib(max):
    n,a,b&#x3D;0,0,1
    while n&lt;max:
        yield b
        a,b&#x3D;b,a+b#相当于t&#x3D;(b,a+b),t是一个tuple,a&#x3D;t[0],b&#x3D;t[1]
        n&#x3D;n+1
    return &#39;done&#39;   
for n in fib(6):    
    print(n) 
#运行结果如下：
1
1
2
3
5
8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>用for循环调用generator时，是拿不到generator的return语句的返回值，若想要拿到返回值，必须捕获<code>StopIteration</code>错误，返回值包含在<code>StopIteration</code>的value中：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">def fib(max):
    n,a,b&#x3D;0,0,1
    while n&lt;max:
        yield b
        a,b&#x3D;b,a+b#相当于t&#x3D;(b,a+b),t是一个tuple,a&#x3D;t[0],b&#x3D;t[1]
        n&#x3D;n+1
    return &#39;done&#39;    
g&#x3D;fib(6)
while True:
    try:
        x&#x3D;next(g)
        print(&#39;g:&#39;,x)
    except StopIteration as e:
        print(&#39;Generator return value:&#39;,e.value)
        break
#运行结果如下：
g: 1
g: 1
g: 2
g: 3
g: 5
g: 8
Generator return value: done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="练习题-3"><a href="#练习题-3" class="headerlink" title="练习题"></a>练习题</h2><p><a href="http://baike.baidu.com/view/7804.htm">杨辉三角</a>定义如下：</p>
<pre class="line-numbers language-ascii" data-language="ascii"><code class="language-ascii">          1
         &#x2F; \
        1   1
       &#x2F; \ &#x2F; \
      1   2   1
     &#x2F; \ &#x2F; \ &#x2F; \
    1   3   3   1
   &#x2F; \ &#x2F; \ &#x2F; \ &#x2F; \
  1   4   6   4   1
 &#x2F; \ &#x2F; \ &#x2F; \ &#x2F; \ &#x2F; \
1   5   10  10  5   1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>把每一行看做一个list，试写一个generator，不断输出下一行的list。</p>
<p>代码如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"># -*- coding: utf-8 -*-

def triangles():
    L&#x3D;[1]
    while True:
        yield L
        L&#x3D;[1]+[L[n]+L[n-1] for n in range(1,len(L))]+[1]


# 期待输出:
# [1]
# [1, 1]
# [1, 2, 1]
# [1, 3, 3, 1]
# [1, 4, 6, 4, 1]
# [1, 5, 10, 10, 5, 1]
# [1, 6, 15, 20, 15, 6, 1]
# [1, 7, 21, 35, 35, 21, 7, 1]
# [1, 8, 28, 56, 70, 56, 28, 8, 1]
# [1, 9, 36, 84, 126, 126, 84, 36, 9, 1]
n &#x3D; 0
results &#x3D; []
for t in triangles():
    results.append(t)
    n &#x3D; n + 1
    if n &#x3D;&#x3D; 10:
        break

for t in results:
    print(t)

if results &#x3D;&#x3D; [
    [1],
    [1, 1],
    [1, 2, 1],
    [1, 3, 3, 1],
    [1, 4, 6, 4, 1],
    [1, 5, 10, 10, 5, 1],
    [1, 6, 15, 20, 15, 6, 1],
    [1, 7, 21, 35, 35, 21, 7, 1],
    [1, 8, 28, 56, 70, 56, 28, 8, 1],
    [1, 9, 36, 84, 126, 126, 84, 36, 9, 1]
]:
    print(&#39;测试通过!&#39;)
else:
    print(&#39;测试失败!&#39;)
#运行结果如下：
[1]
[1, 1]
[1, 2, 1]
[1, 3, 3, 1]
[1, 4, 6, 4, 1]
[1, 5, 10, 10, 5, 1]
[1, 6, 15, 20, 15, 6, 1]
[1, 7, 21, 35, 35, 21, 7, 1]
[1, 8, 28, 56, 70, 56, 28, 8, 1]
[1, 9, 36, 84, 126, 126, 84, 36, 9, 1]
测试通过!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h1><p>可以直接作用于for循环的对象统称为可迭代对象<code>Iterable</code>。</p>
<h2 id="判断一个对象是可迭代对象"><a href="#判断一个对象是可迭代对象" class="headerlink" title="判断一个对象是可迭代对象"></a>判断一个对象是可迭代对象</h2><p>可通过<code>collections.abc</code>模块的<code>Iterable</code>类型判断。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">from collections.abc import Iterable
print(isinstance(&#39;abc&#39;,Iterable))#字符串是否可迭代
print(isinstance([1,2.3],Iterable))#list是否可迭代
print(isinstance(([1,2,3]),Iterable))#set是否可迭代
print(isinstance(123,Iterable))#整数是否可迭代
#运行结果如下：
True
True
True
False<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以被<code>next()</code>函数调用并不断返回下一个值的对象称为迭代器：<code>Iterator</code>。</p>
<p>生成器都是<code>Iterator</code>对象，但list、dict、str虽然是<code>Iterable</code>，却不是<code>Iterator</code>。这是因为<code>Iterator</code>的对象表示的是一个 数据流，可以把这个数据流看作是一个未知长度的有序序列，<code>Iterator</code>甚至可以表示一个无限大的数据流，例如全体自然数。</p>
<p><strong>把list、dict、str从<code>Iterable</code>变成<code>Iterator</code></strong></p>
<p>可以使用<code>iter()</code>函数把list、dict、str从<code>Iterable</code>变成<code>Iterator</code>，其表现形式为：<code>isinstance(iter([]),Iterator)</code>，其中，<code>[]</code>可替换为dict、str的形式。</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>可作用于for循环的对象都是<code>Iterable</code>类型。</p>
<p>可作用于next()函数的对象都是<code>Iterator</code>类型，它们表示一个惰性计算的序列。</p>
<p>list、dict、str虽然是<code>Iterable</code>，却不是<code>Iterator</code>。但可以使用<code>iter()</code>函数把list、dict、str从<code>Iterable</code>变成<code>Iterator</code></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python异步多线程下载文件</title>
    <url>/2023/11/01/python%E5%BC%82%E6%AD%A5%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<p>在实际项目中，难免会有短时间下载文件的需要。正常的批量下载文件要等前一个文件下载完成后才进行下一个文件的下载工作，下载速度较慢。而通过异步来下载可以实现多个文件同时下载的多线程操作。下面为异步下载文件的实现方法：</p>
<ul>
<li><p>首先需要通过<code>pip install aiohttp</code>下载<code>aiohttp</code>模块。</p>
</li>
<li><p>引入相关模块如下：</p>
  <pre class="line-numbers language-python" data-language="python"><code class="language-python">import requests
import aiohttp
import asyncio
import os
import uuid
import config
from services import dbc
from utils.response_helper import make_resp
from models.auth import *<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>定义函数<code>batch_download</code>用于批量下载：</p>
  <pre class="line-numbers language-python" data-language="python"><code class="language-python">async def batch_download(url_list):
  async with aiohttp.ClientSession() as session:
    tasks&#x3D;[]
    result&#x3D;[]
    for i in range(len(url_list)):
      tasks.append(save_file(session, url_list[i]))
    finished, unfinished &#x3D; await asyncio.wait(tasks)
    result&#x3D;[r.result() for r in finished]
    return result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>定义函数<code>save_file</code>用于保存文件：</p>
  <pre class="line-numbers language-python" data-language="python"><code class="language-python">async def save_file(session,url):
  name&#x3D;os.path.basename(url)
  path &#x3D; os.path.join(os.path.dirname(os.getcwd()), &#39;test&#39;, &#39;images&#39;) # 拼接文件保存的相对路径
  if not os.path.exists(path):
        os.mkdir(path)
  file&#x3D;await session.get(url)
  suffix&#x3D;name[name.rfind(&#39;.&#39;):] # 截取文件后缀
  filename &#x3D; uuid.uuid1().hex
  file_abolutepath &#x3D; os.path.join(path, filename+suffix)# 拼接文件保存的绝对路径
  file_code&#x3D;await file.read()
  with open(file_abolutepath,&#39;wb&#39;) as f:
    f.write(file_code)
  return str(filename)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>通过<code>asyncio.run</code>方法调用批量下载函数<code>batch_download</code>：</p>
  <pre class="line-numbers language-python" data-language="python"><code class="language-python">asyncio.run(batch_download(urlList))
#其中urlList的数据格式为[url1,url2]，url1和url2是需要下载的文件地址,例如urlList&#x3D;[&#39;http:&#x2F;&#x2F;www.baidu.com&#39;,&#39;http:&#x2F;&#x2F;tangmenjue.top&#39;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>通过以上方法即可实现异步下载文件</p>
</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
        <category>异步IO</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>异步IO</tag>
      </tags>
  </entry>
  <entry>
    <title>企业微信之企业应用开发流程</title>
    <url>/2022/11/18/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E4%B9%8B%E4%BC%81%E4%B8%9A%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a>创建应用</h1><h2 id="创建准备"><a href="#创建准备" class="headerlink" title="创建准备"></a>创建准备</h2><ul>
<li>成功注册企业微信企业</li>
<li>企业微信账号拥有当前企业的超级管理员或分级管理员的权限</li>
</ul>
<h2 id="创建应用-1"><a href="#创建应用-1" class="headerlink" title="创建应用"></a>创建应用</h2><p>登录 <a href="https://work.weixin.qq.com/wework_admin/loginpage_wx">企业微信管理后台</a>，在【应用管理】界面-【应用】-【自建】点击【创建应用】，在弹出框填写应用的图标、标题、描述和可见范围基本信息。填写完成后，点击【创建应用】，将会跳转至应用详情页面。</p>
<h2 id="配置信息"><a href="#配置信息" class="headerlink" title="配置信息"></a>配置信息</h2><h3 id="可见范围"><a href="#可见范围" class="headerlink" title="可见范围"></a>可见范围</h3><p>在【应用管理】界面-【应用】-【自建】点击刚刚创建好的应用，进入应用信息页面，点击编辑。</p>
<p><img src="/2022/11/18/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E4%B9%8B%E4%BC%81%E4%B8%9A%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/1.png" alt></p>
<p>点击可见范围旁边的添加，即可编辑可见范围。</p>
<h3 id="应用主页"><a href="#应用主页" class="headerlink" title="应用主页"></a>应用主页</h3><p>配置成员从工作台打开应用时打开的页面URL，假设应用打开的网页为:<code>http://tangmenjue.top/</code>。</p>
<p>在应用信息页面点击编辑，点击应用主页旁边的设置，即可配置工作台打开的应用主页。</p>
<p><img src="/2022/11/18/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E4%B9%8B%E4%BC%81%E4%B8%9A%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/2.png" alt></p>
<p>配置完成后，在可见范围内的成员，将在工作台看到该应用。</p>
<p><img src="/2022/11/18/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E4%B9%8B%E4%BC%81%E4%B8%9A%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/3.png" alt></p>
<h3 id="配置HOST"><a href="#配置HOST" class="headerlink" title="配置HOST"></a>配置HOST</h3><p>为了能在本地进行开发，需要将应用URL的访问指向本地。Window系统下打开<code>C:\Windows\System32\drivers\etc</code>目录，右键点击hosts，选择使用记事本打开，在文件末尾增加代码如下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">127.0.0.1	localhost
127.0.0.1	tangmenjue.top<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h1 id="获取应用接口凭证"><a href="#获取应用接口凭证" class="headerlink" title="获取应用接口凭证"></a>获取应用接口凭证</h1><h2 id="获取企业ID-corp-id"><a href="#获取企业ID-corp-id" class="headerlink" title="获取企业ID corp_id"></a>获取企业ID <code>corp_id</code></h2><p>在登录管理后台后，在【管理后台】-【我的企业】-【企业信息】页面的最下面，便可找到【企业ID】</p>
<p><img src="/2022/11/18/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E4%B9%8B%E4%BC%81%E4%B8%9A%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/4.png" alt></p>
<h2 id="获取应用-Secret"><a href="#获取应用-Secret" class="headerlink" title="获取应用 Secret"></a>获取应用 Secret</h2><p>在应用信息页面便可查看Secret</p>
<p><img src="/2022/11/18/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E4%B9%8B%E4%BC%81%E4%B8%9A%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/5.png" alt></p>
<p>将Secret发送到企业微信中查看，点击【发送】，则在操作者的企业微信会话中，会收到企业微信推送过来的Secret信息</p>
<p><img src="/2022/11/18/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E4%B9%8B%E4%BC%81%E4%B8%9A%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/6.png" alt></p>
<h2 id="获取应用接口凭证-access-token"><a href="#获取应用接口凭证-access-token" class="headerlink" title="获取应用接口凭证 access_token"></a>获取应用接口凭证 access_token</h2><p>access_token由corpid和secret产生，所有接口在通信时都需要携带此信息用于验证接口的访问权限。</p>
<p>借助PostMan接口工具进行获取：<code>https://qyapi.weixin.qq.com/cgi-bin/gettoken?corpid=id&amp;corpsecret=secret</code>，链接里的id自行替换为实际的corp_id值，secret自行替换为实际的secret值。</p>
<p>打开PostMan，在左上角处点击Create collection</p>
<p><img src="/2022/11/18/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E4%B9%8B%E4%BC%81%E4%B8%9A%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/7.png" alt></p>
<p>然后继续点击Add a request</p>
<p><img src="/2022/11/18/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E4%B9%8B%E4%BC%81%E4%B8%9A%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/8.png" alt></p>
<p>在新弹出的窗口的Get输入框里输入，点击Send：</p>
<p><img src="/2022/11/18/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E4%B9%8B%E4%BC%81%E4%B8%9A%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/9.png" alt></p>
<p>然后便可在Body处看到获取的access_token值：</p>
<p><img src="/2022/11/18/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E4%B9%8B%E4%BC%81%E4%B8%9A%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/10.png" alt></p>
<h1 id="发送应用信息"><a href="#发送应用信息" class="headerlink" title="发送应用信息"></a>发送应用信息</h1><p>通过向企业微信信息推送接口POST对应的消息结构体即可实现应用消息的推送。对应的请求地址为：<code>https://qyapi.weixin.qq.com/cgi-bin/message/send?access_token=ACCESS_TOKEN</code>。</p>
<h2 id="基本参数"><a href="#基本参数" class="headerlink" title="基本参数"></a>基本参数</h2><ul>
<li>调用接口凭证<br>  access_token 作为 URL Params 带在请求的 URL 中。</li>
<li>应用的id<br>  agent_id 代表当前发送消息的应用 ID，可在应用的设置页面查看。</li>
<li>消息接收范围<br>  touser、toparty、totag 分别表示接收消息的 成员、部门、标签，这几个范围标记不能同时为空。</li>
<li>消息类型<br>  msgtype 用于指定消息的类型，当指定某一消息类型之后，接口服务只会读取该类型对应字段下的数据。</li>
<li>消息内容<br>  不同的消息类型，会对应不同的消息内容字段。</li>
</ul>
<h2 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h2><h3 id="发送基本类型消息"><a href="#发送基本类型消息" class="headerlink" title="发送基本类型消息"></a>发送基本类型消息</h3><p>文本、图文消息、markdown类型的消息仅需要直接在业务后台服务器直接向企业微信消息推送接口发送对应的数据请求即可。</p>
<p>在示例代码的/server/messageController.js 文件中展示了向消息推送 Api 接口发送消息数据体的基本流程：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> axios <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'axios'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> AccessToken <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./accesstoken'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> Config <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../configs/main.config.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">router</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 发送推送消息</span>
    router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/message/send'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 从前端请求中获取对应的参数</span>
        <span class="token keyword">let</span> <span class="token punctuation">&#123;</span>form<span class="token operator">:</span>form_parames<span class="token punctuation">&#125;</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>body <span class="token operator">||</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        
        <span class="token comment">// 将 agentid 拼入请求的结构体中</span>
        <span class="token keyword">let</span> request_data  <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
            <span class="token operator">...</span>form_parames<span class="token punctuation">,</span>
            agentid<span class="token operator">:</span>Config<span class="token punctuation">.</span>agent_id<span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
        request_data<span class="token punctuation">.</span>safe <span class="token operator">=</span> form_parames<span class="token punctuation">.</span>safe <span class="token operator">?</span> <span class="token string">'1'</span> <span class="token operator">:</span> <span class="token string">'0'</span><span class="token punctuation">;</span>
        <span class="token comment">// 获取 Access Token</span>
        <span class="token keyword">const</span> access_token <span class="token operator">=</span> <span class="token keyword">await</span> AccessToken<span class="token punctuation">.</span><span class="token function">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 向消息推送的 Api 发送对应的数据结构体</span>
        <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>data<span class="token punctuation">&#125;</span> <span class="token operator">=</span>  <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'https://qyapi.weixin.qq.com/cgi-bin/message/send'</span><span class="token punctuation">,</span> 
        request_data<span class="token punctuation">,</span>
        <span class="token punctuation">&#123;</span>
            params<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
                access_token
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 返回请求的结果</span>
        res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="发送媒体类型消息"><a href="#发送媒体类型消息" class="headerlink" title="发送媒体类型消息"></a>发送媒体类型消息</h3><p>当要推送图片、语言、适配、文件等媒体类型的消息时，需要将对应的文件通过临时素材的接口上传至企业微信的临时素材库。</p>
<p>在示例代码的 /server/mediaController.js 文件中，展示了通过企业微信临时素材接口上传临时素材的基本流程：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> FormData <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'form-data'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> axios <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'axios'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> AccessToken <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./accesstoken'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">router</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/media/upload'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   
        <span class="token keyword">let</span> <span class="token punctuation">&#123;</span>media<span class="token operator">:</span>file<span class="token punctuation">&#125;</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>files <span class="token operator">||</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>files<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> <span class="token punctuation">&#123;</span>type<span class="token punctuation">&#125;</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>body <span class="token operator">||</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">;</span>
        <span class="token keyword">const</span> access_token <span class="token operator">=</span> <span class="token keyword">await</span> AccessToken<span class="token punctuation">.</span><span class="token function">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
        <span class="token comment">// 组件一个form，用来上传文件</span>
        <span class="token keyword">const</span> form <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        form<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'filename'</span><span class="token punctuation">,</span> file<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        form<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'filelength'</span><span class="token punctuation">,</span> file<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>   
        form<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'media'</span><span class="token punctuation">,</span>file<span class="token punctuation">.</span>data<span class="token punctuation">,</span>file<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
        <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>data<span class="token punctuation">&#125;</span> <span class="token operator">=</span>  <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'https://qyapi.weixin.qq.com/cgi-bin/media/upload'</span><span class="token punctuation">,</span> 
        form<span class="token punctuation">,</span>
        <span class="token punctuation">&#123;</span>
            params<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
                access_token<span class="token punctuation">,</span>
                type
            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
            headers<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
                <span class="token string">"Content-Type"</span><span class="token operator">:</span> <span class="token string">"multipart/form-data"</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="获取登录用户信息"><a href="#获取登录用户信息" class="headerlink" title="获取登录用户信息"></a>获取登录用户信息</h1><p>企业微信提供了OAuth的授权登录方式，可以从企业微信终端打开的网页获取成员的身份信息，从而免去登录的环节。</p>
<h2 id="配置可信域名"><a href="#配置可信域名" class="headerlink" title="配置可信域名"></a>配置可信域名</h2><p>为了保证访问授权的安全性，需要配置授权链接URL所在域名为可信域名。在【应用详情】-【开发者接口】-【网页授权及 JS-SDK】，点击【设置可信域名】，在【设置可信域名】弹窗，填写网页授权功能的回调域名it.zsnet.net.cn，网页授权回调域名的配置须与实际访问链接的域名完全一致：</p>
<p><img src="/2022/11/18/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E4%B9%8B%E4%BC%81%E4%B8%9A%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/11.png" alt></p>
<h2 id="构造网页授权链接"><a href="#构造网页授权链接" class="headerlink" title="构造网页授权链接"></a>构造网页授权链接</h2><p>以下由几个URL要注意区别：</p>
<ul>
<li>应用主页URL<ul>
<li>从工作台点击打开的页面URL，在创建应用时配置填写的，用来授权链接URL跳转。</li>
</ul>
</li>
<li>重定向URL<ul>
<li>当用户授权成功后，会带着成员授权code跳转的URL，用来接收code并获取成员身份</li>
</ul>
</li>
<li>授权链接URL<ul>
<li>企业微信名下的URL，包含了suite_id、重定向URL等信息，当企业微信服务参数验证成功后，会跳转到重定向URL</li>
</ul>
</li>
</ul>
<p>在示例代码的 /routes/index.js 文件中，展示了构造网页授权链接的基本流程：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Config<span class="token punctuation">.</span>home_path<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> login_url <span class="token operator">=</span> <span class="token function">getLoginURL</span><span class="token punctuation">(</span><span class="token string">'base'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span>login_url<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="解析成员授权code"><a href="#解析成员授权code" class="headerlink" title="解析成员授权code"></a>解析成员授权code</h2><p>企业成员从工作台点击应用，打开应用主页URL，向授权链接URL跳转；企业微信对授权链接上的信息进行校验之后，会重定向URL跳转，并以query的形式带上当前访问成员的code信息。</p>
<p>在示例代码的 /routes/index.js 文件中，展示了从重定向URL里解析成员授权code的基本流程：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Config<span class="token punctuation">.</span>app_path<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> <span class="token punctuation">&#123;</span> code <span class="token punctuation">&#125;</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>code<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">let</span> access_token <span class="token operator">=</span> <span class="token keyword">await</span> AccessToken<span class="token punctuation">.</span><span class="token function">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>access_token<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">let</span> <span class="token punctuation">&#123;</span> data<span class="token operator">:</span> user_data <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">https://qyapi.weixin.qq.com/cgi-bin/user/getuserinfo?access_token=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>access_token<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&amp;code=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>code<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'获取 user_data 成功'</span><span class="token punctuation">,</span> user_data<span class="token punctuation">)</span>
            <span class="token keyword">let</span> user_id <span class="token operator">=</span> user_data<span class="token punctuation">.</span>UserId<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="获取访问用户身份信息"><a href="#获取访问用户身份信息" class="headerlink" title="获取访问用户身份信息"></a>获取访问用户身份信息</h2><p>在解析出成员授权code之后，使用access_token，调用获取访问用户身份的接口，即可得到访问用户的基本信息user_id，若想访问用户更详细的信息，则需要通过读取成员得到用户的姓名、头像等完整信息。</p>
<p>在示例代码的 /routes/index.js 文件中，展示了从重定向URL里解析成员授权code的基本流程：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Config<span class="token punctuation">.</span>app_path<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> <span class="token punctuation">&#123;</span> code <span class="token punctuation">&#125;</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>code<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">let</span> access_token <span class="token operator">=</span> <span class="token keyword">await</span> AccessToken<span class="token punctuation">.</span><span class="token function">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>access_token<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">let</span> <span class="token punctuation">&#123;</span> data<span class="token operator">:</span> user_detail_data <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">https://qyapi.weixin.qq.com/cgi-bin/user/get?access_token=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>access_token<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&amp;userid=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>user_id<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'获取成员详细信息成功'</span><span class="token punctuation">,</span> user_detail_data<span class="token punctuation">)</span><span class="token punctuation">;</span>
            req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>user <span class="token operator">=</span> user_detail_data<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="实操过程"><a href="#实操过程" class="headerlink" title="实操过程"></a>实操过程</h2><p>借助PostMan接口工具获取用户的userid（用手机号获取）：<code>https://qyapi.weixin.qq.com/cgi-bin/user/getuserid?access_token=ACCESS_TOKEN</code>，链接里的ACCESS_TOKEN自行替换为实际的access_token值。</p>
<p>打开PostMan，在左上角New collection处右键选择Add collection：</p>
<p><img src="/2022/11/18/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E4%B9%8B%E4%BC%81%E4%B8%9A%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/12.png" alt></p>
<p>点击新弹出的窗口的Get输入框选择POST，输入链接，选择下方的Body，选择row，填写对应的参数后，点击Send：</p>
<p><img src="/2022/11/18/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E4%B9%8B%E4%BC%81%E4%B8%9A%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/13.png" alt></p>
<p>然后便可在下方的Body处看到userid的值：</p>
<p><img src="/2022/11/18/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E4%B9%8B%E4%BC%81%E4%B8%9A%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/14.png" alt></p>
<h1 id="向成员发送信息"><a href="#向成员发送信息" class="headerlink" title="向成员发送信息"></a>向成员发送信息</h1><p>调用企业内部的开放接口，都需要带上企业的接口凭证，且必须以 query 参数形式传递。而应用消息推送接口需要指定当前应用的 agent_id。</p>
<p>企业微信的应用消息推送支持不同的消息类型，比如文本、图片、语音、文件等，不同类型的消息类型需要指定对应的消息种类 msgtype。</p>
<p>在示例代码的 /routes/index.js 文件中，编写向成员发送信息的代码如下：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">
router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Config<span class="token punctuation">.</span>app_path<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> <span class="token punctuation">&#123;</span> code <span class="token punctuation">&#125;</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>code<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">let</span> access_token <span class="token operator">=</span> <span class="token keyword">await</span> AccessToken<span class="token punctuation">.</span><span class="token function">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>access_token<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">let</span> <span class="token punctuation">&#123;</span>data<span class="token operator">:</span>message_data<span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">https://qyapi.weixin.qq.com/cgi-bin/message/send?access_token=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>access_token<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>
            <span class="token punctuation">&#123;</span><span class="token string">"touser"</span> <span class="token operator">:</span> user_detail_data<span class="token punctuation">.</span>userid<span class="token punctuation">,</span>
             <span class="token string">"agentid"</span> <span class="token operator">:</span> agent_id<span class="token punctuation">,</span>
             <span class="token string">"msgtype"</span> <span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span>
             <span class="token string">"text"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span>
             <span class="token string">"content"</span> <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hello World! </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>user_detail_data<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
             <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="实操过程-1"><a href="#实操过程-1" class="headerlink" title="实操过程"></a>实操过程</h2><p><strong>参数说明：</strong></p>
<div class="table-container">
<table>
<thead>
<tr>
<th>参数</th>
<th>是否必须</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>touser</td>
<td>否</td>
<td>指定接收消息的成员，成员ID列表（多个接收者用‘\</td>
<td>’分隔，最多支持1000个）。 特殊情况：指定为”@all”，则向该企业应用的全部成员发送</td>
</tr>
<tr>
<td>toparty</td>
<td>否</td>
<td>指定接收消息的部门，部门ID列表，多个接收者用‘\</td>
<td>’分隔，最多支持100个。 当touser为”@all”时忽略本参数</td>
</tr>
<tr>
<td>totag</td>
<td>否</td>
<td>指定接收消息的标签，标签ID列表，多个接收者用‘\</td>
<td>’分隔，最多支持100个。 当touser为”@all”时忽略本参数</td>
</tr>
<tr>
<td>msgtype</td>
<td>是</td>
<td>消息类型，此时固定为：text</td>
</tr>
<tr>
<td>agentid</td>
<td>是</td>
<td>企业应用的id，整型。企业内部开发，可在应用的设置页面查看；第三方服务商，可通过接口 <a href="https://developer.work.weixin.qq.com/document/path/90236#10975/获取企业授权信息">获取企业授权信息</a> 获取该参数值</td>
</tr>
<tr>
<td>content</td>
<td>是</td>
<td>消息内容，最长不超过2048个字节，超过将截断<strong>（支持id转译）</strong></td>
</tr>
<tr>
<td>safe</td>
<td>否</td>
<td>表示是否是保密消息，0表示可对外分享，1表示不能分享且内容显示水印，默认为0</td>
</tr>
<tr>
<td>enable_id_trans</td>
<td>否</td>
<td>表示是否开启id转译，0表示否，1表示是，默认0。仅第三方应用需要用到，企业自建应用可以忽略。</td>
</tr>
<tr>
<td>enable_duplicate_check</td>
<td>否</td>
<td>表示是否开启重复消息检查，0表示否，1表示是，默认0</td>
</tr>
<tr>
<td>duplicate_check_interval</td>
<td>否</td>
<td>表示是否重复消息检查的时间间隔，默认1800s，最大不超过4小时</td>
</tr>
</tbody>
</table>
</div>
<blockquote>
<p>注意：touser、toparty、totag不能同时为空。</p>
<p>若操作过程中出现IP不合法的错误，在应用信息页面将IP添加进企业可信IP里便可正常访问。</p>
</blockquote>
<p>借助PostMan接口工具进行发送信息：<code>https://qyapi.weixin.qq.com/cgi-bin/message/send?access_token=ACCESS_TOKEN</code>，链接里的ACCESS_TOKEN自行替换为实际的access_token值。</p>
<p>打开PostMan，在左上角New collection处右键选择Add collection。点击新弹出的窗口的Get输入框选择POST，输入链接，选择下方的Body，选择row，填写对应的参数后，点击Send：</p>
<p><img src="/2022/11/18/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E4%B9%8B%E4%BC%81%E4%B8%9A%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/15.png" alt></p>
<p>然后便可在下方的Body处看到已经信息发送成功。</p>
<p><img src="/2022/11/18/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E4%B9%8B%E4%BC%81%E4%B8%9A%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/16.png" alt></p>
]]></content>
      <categories>
        <category>企业微信</category>
        <category>应用开发</category>
      </categories>
      <tags>
        <tag>企业微信</tag>
        <tag>应用开发</tag>
      </tags>
  </entry>
  <entry>
    <title>初探vue-quill-editor</title>
    <url>/2023/02/23/%E5%88%9D%E6%8E%A2vue-quill-editor/</url>
    <content><![CDATA[<h1 id="富文本编辑器：vue-quill-editor"><a href="#富文本编辑器：vue-quill-editor" class="headerlink" title="富文本编辑器：vue-quill-editor"></a>富文本编辑器：vue-quill-editor</h1><p>vue-quill-editor是一款可适配PC端和移动端富文本编辑器，具有可设置自定义配置项、外观简洁且轻量的优点。</p>
<p>PC端效果图如下：<img src="/2023/02/23/%E5%88%9D%E6%8E%A2vue-quill-editor/1.png" alt></p>
<p>移动端的效果图如下：<img src="/2023/02/23/%E5%88%9D%E6%8E%A2vue-quill-editor/2.png" alt></p>
<h1 id="vue-quill-editor配置"><a href="#vue-quill-editor配置" class="headerlink" title="vue-quill-editor配置"></a>vue-quill-editor配置</h1><ul>
<li><p>在项目目录下载vue-quill-editor：</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm i vue-quill-editor -S<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>在Vue页面的script模块中引入vue-quill-editor：</p>
  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span>
<span class="token keyword">import</span> Quill <span class="token keyword">from</span> <span class="token string">"quill"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> quillEditor <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vue-quill-editor"</span><span class="token punctuation">;</span> 

<span class="token keyword">import</span> <span class="token string">'quill/dist/quill.core.css'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string">'quill/dist/quill.snow.css'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string">'quill/dist/quill.bubble.css'</span><span class="token punctuation">;</span>

Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>quillEditor<span class="token punctuation">)</span><span class="token comment">//注册组件的方式之一</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>在Vue页面的template模块中引入组件：</p>
  <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>quill-editor</span> 
    <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span> 
    <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myQuillEditor<span class="token punctuation">"</span></span> 
    <span class="token attr-name">:options</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>editorOption<span class="token punctuation">"</span></span> 
    <span class="token attr-name">@blur</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onEditorBlur($event)<span class="token punctuation">"</span></span> 
    <span class="token attr-name">@focus</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onEditorFocus($event)<span class="token punctuation">"</span></span>
    <span class="token attr-name">@change</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onEditorChange($event)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>quill-editor</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>在Vue页面的scripts模块中完善组件的设置，完整的scripts模块代码如下：</p>
  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> Quill <span class="token keyword">from</span> <span class="token string">"quill"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> quillEditor <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vue-quill-editor"</span><span class="token punctuation">;</span> 
<span class="token keyword">import</span> <span class="token string">'quill/dist/quill.core.css'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string">'quill/dist/quill.snow.css'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string">'quill/dist/quill.bubble.css'</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
  components<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    quillEditor<span class="token punctuation">,</span><span class="token comment">//另一种组件注册方式</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
      content<span class="token operator">:</span><span class="token string">''</span><span class="token punctuation">,</span>
      str<span class="token operator">:</span><span class="token string">''</span><span class="token punctuation">,</span>
      editorOption<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        placeholder<span class="token operator">:</span> <span class="token string">"请在这里输入"</span><span class="token punctuation">,</span>
        modules<span class="token operator">:</span><span class="token punctuation">&#123;</span>
          toolbar<span class="token operator">:</span><span class="token punctuation">[</span>
            <span class="token punctuation">[</span><span class="token string">'bold'</span><span class="token punctuation">,</span> <span class="token string">'italic'</span><span class="token punctuation">,</span> <span class="token string">'underline'</span><span class="token punctuation">,</span> <span class="token string">'strike'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment">//加粗，斜体，下划线，删除线</span>
            <span class="token punctuation">[</span><span class="token string">'blockquote'</span><span class="token punctuation">,</span> <span class="token string">'code-block'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token comment">//引用，代码块</span>
            <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> <span class="token string">'header'</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token string">'header'</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token comment">// 标题，键值对的形式；1、2表示字体大小</span>
            <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> <span class="token string">'list'</span><span class="token operator">:</span> <span class="token string">'ordered'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token string">'list'</span><span class="token operator">:</span> <span class="token string">'bullet'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token comment">//列表</span>
            <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> <span class="token string">'script'</span><span class="token operator">:</span> <span class="token string">'sub'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token string">'script'</span><span class="token operator">:</span> <span class="token string">'super'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token comment">// 上下标</span>
            <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> <span class="token string">'indent'</span><span class="token operator">:</span> <span class="token string">'-1'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token string">'indent'</span><span class="token operator">:</span> <span class="token string">'+1'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token comment">// 缩进</span>
            <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> <span class="token string">'direction'</span><span class="token operator">:</span> <span class="token string">'rtl'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 文本方向</span>
            <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> <span class="token string">'header'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token comment">//几级标题</span>
            <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> <span class="token string">'color'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token string">'background'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token comment">// 字体颜色，字体背景颜色</span>
            <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> <span class="token string">'font'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string">'align'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment">//对齐方式</span>
            <span class="token punctuation">[</span><span class="token string">'clean'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment">//清除字体样式</span>
            <span class="token punctuation">[</span><span class="token string">'image'</span><span class="token punctuation">,</span><span class="token string">'video'</span><span class="token punctuation">]</span>    <span class="token comment">//上传图片、上传视频</span>
          <span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>   
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token function">onEditorReady</span><span class="token punctuation">(</span><span class="token parameter">editor</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token comment">// 准备编辑器</span>
      <span class="token function">onEditorBlur</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// 失去焦点事件</span>
      <span class="token function">onEditorFocus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// 获得焦点事件</span>
      <span class="token comment">// 内容改变事件--给父组件传值</span>
      <span class="token function">onEditorChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> 
      <span class="token comment">// 转码</span>
      <span class="token function">escapeStringHTML</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&amp;lt;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token string">'&lt;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&amp;gt;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token string">'>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> str<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  computed<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token function">editor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>myQuillEditor<span class="token punctuation">.</span>quill<span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">let</span> content <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>  <span class="token comment">// 请求后台返回的内容字符串</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>str <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">escapeStringHTML</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>至此便可以使用富文本了。需要注意的是，该富文本编辑器的所编辑的内容，在存储数据时会按照html的格式存储，例如：</p>
  <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">输入内容为123时，
存储到后台的实际文本为<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>123<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>因此要从后台读取数据时，需要使用<code>v-html</code>的方式来解析数据，在需要让存储数据显示的Vue页面里，添加如下代码即可：</p>
  <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-html</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.answer<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ql-editor<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>
  &#123;&#123;content&#125;&#125;
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>--其中content为存储vue-quill-editor内容的参数--</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<p>使用<code>v-html</code>解析数据时，会出现所展示的图片尺寸异常的情况，若想让图片显示出正常的大小，只需在样式style中添加以下CSS代码即可：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.ql-editor img</span><span class="token punctuation">&#123;</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h1 id="调整图片尺寸-amp-图片拖拽上传（PC端）"><a href="#调整图片尺寸-amp-图片拖拽上传（PC端）" class="headerlink" title="调整图片尺寸&amp;图片拖拽上传（PC端）"></a>调整图片尺寸&amp;图片拖拽上传（PC端）</h1><p>直接使用vue-quill-editor上传图片时，图片是不能实现调整图片尺寸和图片拖拽上传的，若想要实现这些功能，则需要下载插件<code>quill-image-resize-module</code>和<code>quill-image-drop-module</code>。</p>
<h2 id="插件配置"><a href="#插件配置" class="headerlink" title="插件配置"></a>插件配置</h2><ul>
<li><p>首先需要下载插件：</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm i quill-image-drop-module -S
npm i quill-image-resize-module -S<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>然后在Vue页面的script模块中引入这两个插件：</p>
  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ImageDrop <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'quill-image-drop-module'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> ImageResize <span class="token keyword">from</span> <span class="token string">'quill-image-resize-module'</span><span class="token punctuation">;</span>

Quill<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">'modules/imageDrop'</span><span class="token punctuation">,</span>ImageDrop<span class="token punctuation">)</span><span class="token punctuation">;</span>
Quill<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">'modules/imageResize'</span><span class="token punctuation">,</span> ImageResize<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>然后在<code>data return</code> 中引入插件的配置如下：</p>
  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">editorOption<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
  modules<span class="token operator">:</span><span class="token punctuation">&#123;</span>               
    imageDrop<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>
    imageResize<span class="token operator">:</span><span class="token punctuation">&#123;</span>
      displaySize<span class="token operator">:</span><span class="token punctuation">&#123;</span>
        backgroundColor<span class="token operator">:</span> <span class="token string">"black"</span><span class="token punctuation">,</span>
        border<span class="token operator">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span>
        color<span class="token operator">:</span> <span class="token string">"white"</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      modules<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'Resize'</span><span class="token punctuation">,</span><span class="token string">'DisplaySize'</span><span class="token punctuation">,</span><span class="token string">'Toolbar'</span><span class="token punctuation">]</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>配置引入后，在<code>vue.config.js</code>文件中引入一下配置：</p>
  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  configureWebpack<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    plugins<span class="token operator">:</span><span class="token punctuation">[</span>
      <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>ProvidePlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
        <span class="token string">'window.Quill'</span><span class="token operator">:</span><span class="token string">'quill/dist/quill.js'</span><span class="token punctuation">,</span>
        <span class="token string">'Quill'</span><span class="token operator">:</span><span class="token string">'quill/dist/quill.js'</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>重启vue-cli后，便可在PC端实现调整图片尺寸和图片拖拽上传的功能</p>
</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>python环境中Elasticsearch的使用</title>
    <url>/2023/01/13/python%E7%8E%AF%E5%A2%83%E4%B8%ADElasticsearch%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="Elasticsearch简介"><a href="#Elasticsearch简介" class="headerlink" title="Elasticsearch简介"></a>Elasticsearch简介</h1><p>Elasticsearch是目前全文搜索引擎的首选项，它可以快速地存储、搜索和分析海量数据。Elastic的底层是开源库Lucene，而Elastic是Lucene的封装，其提供了REST API的操作接口，使之可以开箱即用。维基百科、Stack Overflow、Github等网站的搜索引擎都是采用它。</p>
<h1 id="Windows系统下Elasticsearch的安装和配置"><a href="#Windows系统下Elasticsearch的安装和配置" class="headerlink" title="Windows系统下Elasticsearch的安装和配置"></a>Windows系统下Elasticsearch的安装和配置</h1><h2 id="安装Elasticsearch服务端"><a href="#安装Elasticsearch服务端" class="headerlink" title="安装Elasticsearch服务端"></a>安装Elasticsearch服务端</h2><ul>
<li>在<a href="https://www.elastic.co/cn/downloads/elasticsearch">官网</a>中选择所需的合适版本下载即可。本文使用的Elasticsearch版本为5.5.3，下载链接为<a href="https://www.elastic.co/cn/downloads/past-releases/elasticsearch-5-5-3">Elasticsearch 5.5.3 | Elastic</a>，选择zip版本下载。</li>
<li>下载完成后将程序解压到电脑中，打开解压目录进入到bin文件夹，双击<code>elasticsearch.bat</code>文件即可启动Elasticsearch服务（若启动失败，则查看环境中是否安装了jdk），窗口出现以下结果则表示服务启动成功<img src="/2023/01/13/python%E7%8E%AF%E5%A2%83%E4%B8%ADElasticsearch%E7%9A%84%E4%BD%BF%E7%94%A8/0.png" alt></li>
<li>服务启动成功后，访问<code>localhost:9200</code>，若看到以下显示，则代表安装成功<img src="/2023/01/13/python%E7%8E%AF%E5%A2%83%E4%B8%ADElasticsearch%E7%9A%84%E4%BD%BF%E7%94%A8/1.png" alt></li>
</ul>
<h3 id="相关配置"><a href="#相关配置" class="headerlink" title="相关配置"></a>相关配置</h3><ul>
<li><p>由于Elasticsearch可直接通过http请求访问，所以将9200端口直接暴露在网络当中是十分危险的，需要对访问进行限制。</p>
</li>
<li><p>在Elasticsearch安装目录下，进入config目录，打开<code>elasticsearch.yml</code>配置文件。在配置文件中，修改<code>network.host</code>配置如下：</p>
  <pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"># 配置网络请求中的相关参数及设置
network.host: 0.0.0.0
http.cors.enabled: true
http.cors.allow-origin: &quot;*&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>  由于本人是自己测试，因此设为了允许所有来源访问且使Elasticsearch支持跨域请求，如对访问安全有要求或者是线上的服务，建议配置为具体的IP地址<img src="/2023/01/13/python%E7%8E%AF%E5%A2%83%E4%B8%ADElasticsearch%E7%9A%84%E4%BD%BF%E7%94%A8/2.png" alt></p>
</li>
</ul>
<h2 id="安装Elasticsearch客户端"><a href="#安装Elasticsearch客户端" class="headerlink" title="安装Elasticsearch客户端"></a>安装Elasticsearch客户端</h2><ul>
<li><p>打开cmd，使用pip命令在项目目录中安装Elasticsearch，由于本人服务端使用的版本是5.5.3，因此客户端版本也是安装.5.3版本：</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 安装最新版本
pip install elasticsearch
# 安装指定版本
pip install elasticsearch&#x3D;&#x3D;5.5.3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>安装完成后，在python代码中导入elasticsearch包：</p>
  <pre class="line-numbers language-python" data-language="python"><code class="language-python">from elasticsearch import Elasticsearch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>接着获取elasticsearch的示例对象，不传入参数时则默认连接本地的，这里介绍三种连接方式：</p>
<ul>
<li><p>默认连接本地elasticsearch：</p>
  <pre class="line-numbers language-python" data-language="python"><code class="language-python">es&#x3D;Elasticsearch()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>连接本地9200端口：</p>
  <pre class="line-numbers language-python" data-language="python"><code class="language-python">es&#x3D;Elasticsearch([&#39;127.0.0.1:9200&#39;])
es&#x3D;Elasticsearch(hosts&#x3D;&quot;127.0.0.1&quot;,port&#x3D;9200,timeout&#x3D;3600) # timeout为超时时间<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>连接集群，以列表的形式存放各节点的ip地址</p>
  <pre class="line-numbers language-python" data-language="python"><code class="language-python">es&#x3D;Elasticsearch(
    [
        &#123;&quot;host&quot;:&quot;10.17.212.3&quot;,&quot;port&quot;:139&#125;,
        &#123;&quot;host&quot;:&quot;192.168.233.1&quot;,&quot;port&quot;:139&#125;,
        &#123;&quot;host&quot;:&quot;192.168.18.1&quot;,&quot;port&quot;:139&#125;
    ],<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
</li>
<li><p>若需要配置忽略响应状态码，可编写代码如下：</p>
  <pre class="line-numbers language-python" data-language="python"><code class="language-python">es&#x3D;Elasticsearch([&#39;127.0.0.1:9200&#39;],ignore&#x3D;400) # 忽略返回的400状态码
es&#x3D;Elasticsearch([&#39;127.0.0.1:9200&#39;],ignore&#x3D;400) # 以列表的形式忽略多个状态码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
</ul>
<h4 id="一个简单的示例"><a href="#一个简单的示例" class="headerlink" title="一个简单的示例"></a>一个简单的示例</h4><p>保持Elasticsearch服务端正在运行的情况下，运行以下代码，便可以检验Elasticsearch服务端与客户端之间是否能连接：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">from elasticsearch import Elasticsearch
es&#x3D;Elasticsearch([&#39;127.0.0.1:9200&#39;])
print(es.index(index&#x3D;&#39;py2&#39;,doc_type&#x3D;&#39;doc&#39;,id&#x3D;1,body&#x3D;&#123;&quot;name&quot;:&quot;张三&quot;,&quot;age&quot;:18&#125;))
print(es.get(index&#x3D;&#39;py2&#39;,doc_type&#x3D;&#39;doc&#39;,id&#x3D;1))
# 第1个print为创建py2索引，并插入一条数据，第2个print查询指定文档。

# 查询结果如下：
&#123;&#39;_index&#39;: &#39;py2&#39;, &#39;_type&#39;: &#39;doc&#39;, &#39;_id&#39;: &#39;1&#39;, &#39;_version&#39;: 4, &#39;result&#39;: &#39;updated&#39;, &#39;_shards&#39;: &#123;&#39;total&#39;: 2, &#39;successful&#39;: 1, &#39;failed&#39;: 0&#125;, &#39;created&#39;: False&#125;
&#123;&#39;_index&#39;: &#39;py2&#39;, &#39;_type&#39;: &#39;doc&#39;, &#39;_id&#39;: &#39;1&#39;, &#39;_version&#39;: 4, &#39;found&#39;: True, &#39;_source&#39;: &#123;&#39;name&#39;: &#39;张三&#39;, &#39;age&#39;: 18&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="安装图形化插件"><a href="#安装图形化插件" class="headerlink" title="安装图形化插件"></a>安装图形化插件</h2><ul>
<li><p>点击<a href="https://github.com/mobz/elasticsearch-head">链接</a>下载head插件，下载后解压即可</p>
</li>
<li><p>确保node.js已安装，若未安装可以在<a href="https://nodejs.org/en/download/">官网</a>处下载安装</p>
</li>
<li><p>打开cmd，进入到head插件的解压目录中，打开<code>package.json</code>文件查看使用的grunt版本，输入以下命令安装相应版本的grunt-cli</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">PS D:\elasticsearch-head-master&gt; npm install grunt@1.0.1
PS D:\elasticsearch-head-master&gt; npm install grunt@1.0.1 --save-dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>继续输入以下命令下载项目所需的插件，启动图形化插件：</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">PS D:\elasticsearch-head-master&gt; npm install
PS D:\elasticsearch-head-master&gt; grunt server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>  图像化插件成功启动的截图如下：<img src="/2023/01/13/python%E7%8E%AF%E5%A2%83%E4%B8%ADElasticsearch%E7%9A%84%E4%BD%BF%E7%94%A8/3.png" alt></p>
</li>
</ul>
<h1 id="Python环境下操作Elasticsearch"><a href="#Python环境下操作Elasticsearch" class="headerlink" title="Python环境下操作Elasticsearch"></a>Python环境下操作Elasticsearch</h1><h2 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h2><h3 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h3><p><code>es.indices.create()</code>：创建索引</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"># 创建一个索引为test的索引
es.indices.create(index&#x3D;&#39;test&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h3><p><code>es.indices.delete()</code>：删除索引</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"># 删除索引为test的索引
es.indices.delete(index&#x3D;&#39;test&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><p><code>es.index()</code>：插入数据</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">doc &#x3D; &#123;
    &#39;name&#39;: &#39;方天&#39;,
    &#39;age&#39;: &#39;23&#39;
&#125;
# 在test索引id为2的位置插入一条数据
es.index(index&#x3D;&#39;test&#39;, id&#x3D;&#39;2&#39;, document&#x3D;doc)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><p><code>es.delete()</code>：删除指定数据</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"># 删除test索引id为3的数据
es.delete(index&#x3D;&#39;test&#39;,id&#x3D;&#39;3&#39;,doc_type&#x3D;&#39;_doc&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h3><p><code>es.update()</code>：更新指定字段</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">doc &#x3D; &#123;
    &#39;name&#39;: &#39;李邱俊&#39;,
    &#39;age&#39;: &#39;20&#39;
&#125;
# 将test索引id为2的数据更新为新数据
es.update(index&#x3D;&#39;test&#39;,id&#x3D;&#39;2&#39;,doc&#x3D;doc)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="查询操作"><a href="#查询操作" class="headerlink" title="查询操作"></a>查询操作</h3><p><code>es.get()</code>：查询数据</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"># 查询test索引id为1的数据
es.get(index&#x3D;&#39;test&#39;,id&#x3D;&#39;1&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="查询函数"><a href="#查询函数" class="headerlink" title="查询函数"></a>查询函数</h2><h3 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"># 查询test索引前10条数据，其中index为所需查询数据的索引
es.search(index&#x3D;&#39;test&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="过滤字段查询"><a href="#过滤字段查询" class="headerlink" title="过滤字段查询"></a>过滤字段查询</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"># 只显示test索引的age字段信息，其中filter_path参数为添加过滤路径，显示指定字段(默认显示所有字段信息)
es.search(index&#x3D;&#39;test&#39;,filter_path&#x3D;[&#39;hits.hits._source.age&#39;])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="切片查询"><a href="#切片查询" class="headerlink" title="切片查询"></a>切片查询</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"># 查询test索引中，从序号为1的位置查询两条数据，其中from_参数为从指定索引开始查询，size为查询数据的条数
es.search(index&#x3D;&#39;test&#39;, from_&#x3D;1, size&#x3D;2)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="模糊查询（分词）"><a href="#模糊查询（分词）" class="headerlink" title="模糊查询（分词）"></a>模糊查询（分词）</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"># 查询test索引中，age字段为20的数据
# 其中query为要查询数据的规则,match表示为模糊查询(分词)，语句query&#x3D;&#123;&#39;match&#39;:&#123;&#39;age&#39;:20&#125;&#125;为检索指定的字段
es.search(index&#x3D;&#39;test&#39;, query&#x3D;&#123;&#39;match&#39;:&#123;&#39;age&#39;:20&#125;&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="模糊查询（不分词）"><a href="#模糊查询（不分词）" class="headerlink" title="模糊查询（不分词）"></a>模糊查询（不分词）</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"># 查询test索引中，name字段为杨晨的数据,match_phrase表示为模糊查询(不分词)，
es.search(index&#x3D;&#39;test&#39;, query&#x3D;&#123;&#39;match_phrase&#39;:&#123;&#39;name&#39;:&#39;杨晨&#39;&#125;&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="精准单值查询"><a href="#精准单值查询" class="headerlink" title="精准单值查询"></a>精准单值查询</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"># 查询test索引中，age为20的数据，term表示为精确单值查询，terms表示为精确多值查询
es.search(index&#x3D;&#39;test&#39;, query&#x3D;&#123;&#39;term&#39;:&#123;&#39;age&#39;:20&#125;&#125;)
# 查询test索引中，name为杨晨的数据，查询中文，要在字段后面加上.keyword
es.search(index&#x3D;&#39;test&#39;, query&#x3D;&#123;&#39;term&#39;:&#123;&#39;name.keyword&#39;:&#39;杨晨&#39;&#125;&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="多字段查询"><a href="#多字段查询" class="headerlink" title="多字段查询"></a>多字段查询</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"># 查询test索引中，name和about都为小美的数据，multi_match表示为多字段查询
es.search(index&#x3D;&#39;test&#39;,query&#x3D;&#123;&#39;multi_match&#39;:&#123;&#39;query&#39;:&#39;小美&#39;,&quot;fields&quot;:[&#39;name&#39;,&#39;about&#39;]&#125;&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="前缀查询"><a href="#前缀查询" class="headerlink" title="前缀查询"></a>前缀查询</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"># 查询test索引中，name字段前缀为小的数据，prefix表示为前缀查询
es.search(index&#x3D;&#39;test&#39;,query&#x3D;&#123;&#39;prefix&#39;:&#123;&#39;name.keyword&#39;:&#39;小&#39;&#125;&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="通配符查询"><a href="#通配符查询" class="headerlink" title="通配符查询"></a>通配符查询</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"># 查询test索引中，name字段为杨*的数据，wildcard表示启用通配符查询，?代表一个字符，*代表0或多个字符，只能查询单一格式的数据
es.search(index&#x3D;&#39;test&#39;,query&#x3D;&#123;&#39;wildcard&#39;:&#123;&#39;name.keyword&#39;:&#39;杨?&#39;&#125;&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="正则查询"><a href="#正则查询" class="headerlink" title="正则查询"></a>正则查询</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"># 查询test索引中，name字段为杨*的数据，regexp表示启用正则查询
print(es.search(index&#x3D;&#39;test&#39;,query&#x3D;&#123;&#39;regexp&#39;:&#123;&#39;name.keyword&#39;:&#39;杨.&#39;&#125;&#125;))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="多条件查询"><a href="#多条件查询" class="headerlink" title="多条件查询"></a>多条件查询</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"># 查询test索引中，name字段为小美，id字段为1的数据
# 其中bool表示多条件查询，must表示与，should表示或,must_not表示非
print(es.search(index&#x3D;&#39;test&#39;,query&#x3D;&#123;&#39;bool&#39;:&#123;&#39;must&#39;:&#123;&#39;term&#39;:&#123;&#39;name&#39;:&#39;小美&#39;&#125;,&#39;term&#39;:&#123;&#39;id&#39;:&#39;1&#39;&#125;&#125;&#125;&#125;))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="存在字段查询"><a href="#存在字段查询" class="headerlink" title="存在字段查询"></a>存在字段查询</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"># 查询test索引中，包含age字段的数据，其中exists表示存在字段查询
print(es.search(index&#x3D;&#39;test&#39;,query&#x3D;&#123;&#39;exists&#39;:&#123;&#39;field&#39;:&#39;age&#39;&#125;&#125;))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="范围查询"><a href="#范围查询" class="headerlink" title="范围查询"></a>范围查询</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"># 查询test索引中，age字段大于20小于等于23的数据
# 其中range表示范围查询，gt表示大于，gte表示大于等于，lt表示小于，lte表示小于等于
print(es.search(index&#x3D;&#39;test&#39;,query&#x3D;&#123;&#39;range&#39;:&#123;&#39;age&#39;:&#123;&#39;gt&#39;:20,&#39;lte&#39;:23&#125;&#125;&#125;))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="Json字段查询"><a href="#Json字段查询" class="headerlink" title="Json字段查询"></a>Json字段查询</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"># 查询test索引中，jsonfield1字段下json数据jsonfield2字段的数据包含&#39;json&#39;的数据
# 其中nested表示json数据查询，path参数为指定json数据的字段，query参数为指定的查询方式
print(es.search(index&#x3D;&#39;test&#39;,query&#x3D;&#123;&#39;nested&#39;:&#123;&#39;path&#39;:&#39;jsonfield1&#39;,&#39;query&#39;:&#123;&#39;term&#39;:&#123;&#39;jsonfield1.jsonfield2&#39;:&#39;json&#39;&#125;&#125;&#125;&#125;))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"># 查询test索引中的数据，按照age字段降序，其中sort表示排序查询，参数asc为升序，desc为降序
print(es.search(index&#x3D;&#39;test&#39;, sort&#x3D;&#123;&#39;age.keyword&#39;:&#123;&#39;order&#39;:&#39;desc&#39;&#125;&#125;))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h1 id="通过网络请求操作ElasticSearch"><a href="#通过网络请求操作ElasticSearch" class="headerlink" title="通过网络请求操作ElasticSearch"></a>通过网络请求操作ElasticSearch</h1><h2 id="创建索引与映射字段"><a href="#创建索引与映射字段" class="headerlink" title="创建索引与映射字段"></a>创建索引与映射字段</h2><p>创建索引的语法如下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">PUT http:&#x2F;&#x2F;localhost:9200&#x2F;索引库名
&#123;
  &quot;mappings&quot;:&#123;
    &quot;类型名称&quot;:&#123;
      &quot;properties&quot;:&#123;
        &quot;字段名&quot;:&#123;
          &quot;type&quot;:&quot;类型&quot;,
          &quot;index&quot;:true,
          &quot;store&quot;:true,
          &quot;analyzer&quot;:&quot;分词器&quot;
        &#125;
      &#125;
    &#125;
  &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>参数详情如下：</p>
<ul>
<li>类型名称：就是type的概念，类似于数据库中的不同表</li>
<li>字段名：类似于数据库中的字段名称</li>
<li>type：类似于数据库中字段的类型，可以是text、long、short、data、object等</li>
<li>index：是否索引，默认为true。若需要根据该字段进行查询或排序，则需要将该字段index设置为true，否则设置为false</li>
<li>store：是否单独存储，默认为false，一般内容比较多的字段设置成true，可以提升查询性能</li>
<li>analyzer：分词器，如<code>ik_smart</code>、<code>ik_max_word</code>等</li>
</ul>
<p>示例</p>
<ul>
<li><p>通过postman发送PUT请求创建索引，以下代码在Elasticsearch 6.x以下能正常执行：</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">PUT http:&#x2F;&#x2F;localhost:9200&#x2F;sku
&#123;
  &quot;mappings&quot;: &#123;
    &quot;doc&quot;:&#123;
      &quot;properties&quot;:&#123;
        &quot;name&quot;:&#123;
          &quot;type&quot;:&quot;text&quot;,
          &quot;analyzer&quot;:&quot;ik_smart&quot;
        &#125;,
        &quot;price&quot;:&#123;
          &quot;type&quot;:&quot;integer&quot;
        &#125;,
        &quot;image&quot;:&#123;
          &quot;type&quot;:&quot;text&quot;
        &#125;,
        &quot;createTime&quot;:&#123;
          &quot;type&quot;:&quot;date&quot;
        &#125;,
        &quot;spuId&quot;:&#123;
          &quot;type&quot;:&quot;text&quot;
        &#125;,
        &quot;categoryName&quot;:&#123;
          &quot;type&quot;:&quot;keyword&quot;
        &#125;,
        &quot;brandName&quot;:&#123;
          &quot;type&quot;:&quot;keyword&quot;
        &#125;,
        &quot;spec&quot;:&#123;
          &quot;type&quot;:&quot;object&quot;
        &#125;,
        &quot;selNum&quot;:&#123;
          &quot;type&quot;:&quot;integer&quot;
        &#125;,
        &quot;commentNum&quot;:&#123;
          &quot;type&quot;:&quot;integer&quot;
        &#125;
      &#125;
    &#125;
  &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>执行成功则返回的结果为：</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">&#123;
    &quot;acknowledged&quot;: true,
    &quot;shards_acknowledged&quot;: true
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h3 id="查看索引字段类型"><a href="#查看索引字段类型" class="headerlink" title="查看索引字段类型"></a>查看索引字段类型</h3><p>使用postman查看索引字段类型语法如下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 查看sku文档
GET http:&#x2F;&#x2F;localhost:9200&#x2F;sku&#x2F;_mapping

# 查看group文档
GET http:&#x2F;&#x2F;localhost:9200&#x2F;group&#x2F;_mapping<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="文档增加与修改"><a href="#文档增加与修改" class="headerlink" title="文档增加与修改"></a>文档增加与修改</h2><h3 id="增加文档自动生成ID"><a href="#增加文档自动生成ID" class="headerlink" title="增加文档自动生成ID"></a>增加文档自动生成ID</h3><p>通过POST请求，可以向一个已经存在的索引库中添加数据，语法如下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">POST http:&#x2F;&#x2F;localhost:9200&#x2F;索引库名&#x2F;类型名
&#123;
      &quot;key&quot;:&quot;value&quot;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>使用postman发送POST请求示例如下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">POST http:&#x2F;&#x2F;localhost:9200&#x2F;sku&#x2F;doc
&#123;
  &quot;name&quot;:&quot;小米手机&quot;,
  &quot;price&quot;:200000,
  &quot;spuId&quot;:101,
  &quot;createTime&quot;:&quot;2020-05-09&quot;,
  &quot;brandName&quot;:&quot;小米&quot;,
  &quot;categoryName&quot;:&quot;手机&quot;,
  &quot;saleNum&quot;:10012,
  &quot;commentNum&quot;:323,
  &quot;spec&quot;:&#123;
    &quot;网络制式&quot;:&quot;移动4g&quot;,
    &quot;屏幕尺寸&quot;:&quot;4.5&quot;
  &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>执行成功时返回信息如下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">    &quot;_index&quot;: &quot;sku&quot;,
    &quot;_type&quot;: &quot;doc&quot;,
    &quot;_id&quot;: &quot;AYWp1L_wYrK1VsxqV5G5&quot;,
    &quot;_version&quot;: 1,
    &quot;result&quot;: &quot;created&quot;,
    &quot;_shards&quot;: &#123;
        &quot;total&quot;: 2,
        &quot;successful&quot;: 1,
        &quot;failed&quot;: 0
    &#125;,
    &quot;created&quot;: true
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="新增文档指定ID"><a href="#新增文档指定ID" class="headerlink" title="新增文档指定ID"></a>新增文档指定ID</h3><p>若想要在新增文档时指定ID，可以通过PUT命令，其语法如下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">PUT http:&#x2F;&#x2F;localhost:9200&#x2F;索引库名&#x2F;类型&#x2F;ID值
&#123;
   ...
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>使用postman发送PUT请求示例如下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">&#123;
  &quot;name&quot;:&quot;小米电视&quot;,
  &quot;price&quot;:100000,
  &quot;spuId&quot;:10110,
  &quot;createTime&quot;:&quot;2020-05-09&quot;,
  &quot;brandName&quot;:&quot;小米&quot;,
  &quot;categoryName&quot;:&quot;电视&quot;,
  &quot;saleNum&quot;:10012,
  &quot;commentNum&quot;:323,
  &quot;spec&quot;:&#123;
    &quot;网络制式&quot;:&quot;移动4g&quot;,
    &quot;屏幕尺寸&quot;:&quot;39&quot;
  &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>执行成功时返回信息如下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">&#123;
    &quot;_index&quot;: &quot;sku&quot;,
    &quot;_type&quot;: &quot;doc&quot;,
    &quot;_id&quot;: &quot;1&quot;,
    &quot;_version&quot;: 1,
    &quot;result&quot;: &quot;created&quot;,
    &quot;_shards&quot;: &#123;
        &quot;total&quot;: 2,
        &quot;successful&quot;: 1,
        &quot;failed&quot;: 0
    &#125;,
    &quot;created&quot;: true
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>通过GET请求可以查询新增的数据：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">GET http:&#x2F;&#x2F;localhost:9200&#x2F;sku&#x2F;_search
# 返回的结果为
&#123;
    &quot;took&quot;: 1,
    &quot;timed_out&quot;: false,
    &quot;_shards&quot;: &#123;
        &quot;total&quot;: 5,
        &quot;successful&quot;: 5,
        &quot;failed&quot;: 0
    &#125;,
    &quot;hits&quot;: &#123;
        &quot;total&quot;: 2,
        &quot;max_score&quot;: 1.0,
        &quot;hits&quot;: [
            &#123;
                &quot;_index&quot;: &quot;sku&quot;,
                &quot;_type&quot;: &quot;doc&quot;,
                &quot;_id&quot;: &quot;AYWp1L_wYrK1VsxqV5G5&quot;,
                &quot;_score&quot;: 1.0,
                &quot;_source&quot;: &#123;
                    &quot;name&quot;: &quot;小米手机&quot;,
                    &quot;price&quot;: 200000,
                    &quot;spuId&quot;: 101,
                    &quot;createTime&quot;: &quot;2020-05-09&quot;,
                    &quot;brandName&quot;: &quot;小米&quot;,
                    &quot;categoryName&quot;: &quot;手机&quot;,
                    &quot;saleNum&quot;: 10012,
                    &quot;commentNum&quot;: 323,
                    &quot;spec&quot;: &#123;
                        &quot;网络制式&quot;: &quot;移动4g&quot;,
                        &quot;屏幕尺寸&quot;: &quot;4.5&quot;
                    &#125;
                &#125;
            &#125;,
            &#123;
                &quot;_index&quot;: &quot;sku&quot;,
                &quot;_type&quot;: &quot;doc&quot;,
                &quot;_id&quot;: &quot;1&quot;,
                &quot;_score&quot;: 1.0,
                &quot;_source&quot;: &#123;
                    &quot;name&quot;: &quot;小米电视&quot;,
                    &quot;price&quot;: 100000,
                    &quot;spuId&quot;: 10110,
                    &quot;createTime&quot;: &quot;2020-05-09&quot;,
                    &quot;brandName&quot;: &quot;小米&quot;,
                    &quot;categoryName&quot;: &quot;电视&quot;,
                    &quot;saleNum&quot;: 10012,
                    &quot;commentNum&quot;: 323,
                    &quot;spec&quot;: &#123;
                        &quot;网络制式&quot;: &quot;移动4g&quot;,
                        &quot;屏幕尺寸&quot;: &quot;39&quot;
                    &#125;
                &#125;
            &#125;
        ]
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="修改索引文档"><a href="#修改索引文档" class="headerlink" title="修改索引文档"></a>修改索引文档</h3><p>可以继续通过<code>PUT/索引库名/类型/ID值</code>的方式来更改刚才插入的数据：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">PUT http:&#x2F;&#x2F;localhost:9200&#x2F;sku&#x2F;doc&#x2F;1
&#123;
  &quot;name&quot;:&quot;华为电视&quot;,
  &quot;price&quot;:100000,
  &quot;spuId&quot;:10110,
  &quot;createTime&quot;:&quot;2020-05-09&quot;,
  &quot;brandName&quot;:&quot;华为&quot;,
  &quot;categoryName&quot;:&quot;电视&quot;,
  &quot;saleNum&quot;:10012,
  &quot;commentNum&quot;:323,
  &quot;spec&quot;:&#123;
    &quot;网络制式&quot;:&quot;移动4g&quot;,
    &quot;屏幕尺寸&quot;:&quot;39&quot;
  &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="通过ID删除索引文档"><a href="#通过ID删除索引文档" class="headerlink" title="通过ID删除索引文档"></a>通过ID删除索引文档</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">DELETE http:&#x2F;&#x2F;localhost:9200&#x2F;sku&#x2F;doc&#x2F;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="索引查询"><a href="#索引查询" class="headerlink" title="索引查询"></a>索引查询</h2><p>基本语法如下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">GET http:&#x2F;&#x2F;localhost:9200&#x2F;索引库名&#x2F;_search
&#123;
    &quot;query&quot;:&#123;
        &quot;查询类型&quot;:&#123;
             &quot;查询条件&quot;:&quot;查询条件值&quot;
         &#125;
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里的query代表一个查询对象，里面可以有不同的查询属性：</p>
<ul>
<li>查询类型：如match_all、match、term、range等</li>
<li>查询条件：查询条件会根据类型的不同，写法也有差异</li>
</ul>
<h3 id="查询所有数据-match-all"><a href="#查询所有数据-match-all" class="headerlink" title="查询所有数据(match_all)"></a>查询所有数据(match_all)</h3><p>代码示例如下，其中query代表查询对象，match_all代表查询所有：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">GET http:&#x2F;&#x2F;localhost:9200&#x2F;sku&#x2F;_search
&#123;
  &quot;query&quot;: &#123;
    &quot;match_all&quot;: &#123;&#125;
  &#125;
&#125;

# 也可以简写成
GET http:&#x2F;&#x2F;localhost:9200&#x2F;sku&#x2F;_search<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="匹配查询-match"><a href="#匹配查询-match" class="headerlink" title="匹配查询(match)"></a>匹配查询(match)</h3><p>查询名称包含手机的记录代码示例：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">GET http:&#x2F;&#x2F;localhost:9200&#x2F;sku&#x2F;_search
&#123;
  &quot;query&quot;: &#123;
    &quot;match&quot;: &#123;
      &quot;name&quot;: &quot;手机&quot;
    &#125;
  &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>默认情况下，在查询时会先搜索关键字进行分词，对分词后的字符串进行查询，只要是包含这些字符串的都是要被查询出来的，多个词之间是or的关系。如查询“小米电视”，查询结果会有“小米手机”、“小米电视”、“三星电视”等包含了“小米”和“电视”的词汇。</p>
<p><strong>由于查询结果的匹配分值<code>_score</code>是不一样的，分值高的排在前面。</strong></p>
<p>若是想要精确查询，想要只查询包含“小米电视”的记录，语句该这样写：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">GET http:&#x2F;&#x2F;localhost:9200&#x2F;sku&#x2F;_search
&#123;
  &quot;query&quot;: &#123;
    &quot;match&quot;: &#123;
      &quot;name&quot;: &#123;
        &quot;query&quot;: &quot;小米电视&quot;,
        &quot;operator&quot;: &quot;and&quot;
      &#125;
    &#125;
  &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="控制精度"><a href="#控制精度" class="headerlink" title="控制精度"></a>控制精度</h3><p>若用户给定5个查询词项，想查找只包含其中4个的文档时，将operator操作符参数设置成and只会将此文档排除。此时match查询的最小匹配参数<code>minimum_should_match</code>便起到重要作用了，利用该参数便可以指定必须匹配的词项数用来表示一个文档是否相关。可以将这一参数设置为某个具体数字，最常用的是无法控制用户搜索时输入的单词数量时，将其设置为一个百分数。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">GET http:&#x2F;&#x2F;localhost:9200&#x2F;sku&#x2F;_search
&#123;
  &quot;query&quot;: &#123;
    &quot;match&quot;: &#123;
      &quot;title&quot;: &#123;
        &quot;query&quot;: &quot;quick brown dog&quot;,
        &quot;minimum_should_match&quot;: &quot;75%&quot;
      &#125;
    &#125;
  &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="多字段查询-multi-match"><a href="#多字段查询-multi-match" class="headerlink" title="多字段查询(multi_match)"></a>多字段查询(multi_match)</h3><p><code>multi_match</code>与<code>match</code>类似，不同的是它可以在多个字段中查询：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">GET http:&#x2F;&#x2F;localhost:9200&#x2F;sku&#x2F;_search
&#123;
  &quot;query&quot;: &#123;
    &quot;multi_match&quot;: &#123;
      &quot;query&quot;: &quot;小米&quot;,
      &quot;fields&quot;: [&quot;name&quot;,&quot;brandName&quot;,&quot;categoryName&quot;]
    &#125;
  &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="查询字段的模糊匹配"><a href="#查询字段的模糊匹配" class="headerlink" title="查询字段的模糊匹配"></a>查询字段的模糊匹配</h4><p>字段名称可以用模糊匹配的方式给出：任何与模糊模式正则匹配的字段都会被包括在搜索条件中。如可以使用以下方式同时匹配book_title、chapter_title和section_title（书名、章名、节名）这三个字段：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">&#123;
    &quot;multi_match&quot;: &#123;
        &quot;query&quot;:  &quot;Quick brown fox&quot;,
        &quot;fields&quot;: &quot;*_title&quot;
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="提升单个字段的权重"><a href="#提升单个字段的权重" class="headerlink" title="提升单个字段的权重"></a>提升单个字段的权重</h4><p>可以使用<code>^</code>字符语法为单个字段提升权重，在字段名称的末尾添加<code>^boost</code>，其中boost是一个浮点数：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">&#123;
    &quot;multi_match&quot;: &#123;
        &quot;query&quot;:  &quot;Quick brown fox&quot;,
        &quot;fields&quot;: [ &quot;*_title&quot;, &quot;chapter_title^2&quot; ] 
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>此时<code>chapter_title</code>字段的boost值为2，而其他两个字段的默认boost值为1。</p>
<h3 id="词条查询-term"><a href="#词条查询-term" class="headerlink" title="词条查询(term)"></a>词条查询(term)</h3><p>term查询被用于精确匹配，这些精确值可能是数字、时间、布尔或者是那些未分词的字符串。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">GET http:&#x2F;&#x2F;localhost:9200&#x2F;sku&#x2F;_search
&#123;
  &quot;query&quot;: &#123;
    &quot;term&quot;: &#123;
      &quot;price&quot;: 200000
    &#125;
  &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="多词条查询-terms"><a href="#多词条查询-terms" class="headerlink" title="多词条查询(terms)"></a>多词条查询(terms)</h3><p>terms查询和term查询一样，区别是它允许指定多个值进行匹配。如果这个词段包含了指定中的任何一个值，那么这个文档便视为满足条件（类似于SQL中的in）：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">GET http:&#x2F;&#x2F;localhost:9200&#x2F;sku&#x2F;_search
&#123;
  &quot;query&quot;: &#123;
    &quot;terms&quot;: &#123;
      &quot;price&quot;: [200000,100000]
    &#125;
  &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="布尔组合-bool"><a href="#布尔组合-bool" class="headerlink" title="布尔组合(bool)"></a>布尔组合(bool)</h3><p>bool把各种其他查询通过must(与)、must_not(非)、should(或)的方式进行组合。</p>
<p>如查询名称包含手机的，且品牌为小米的记录：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">GET http:&#x2F;&#x2F;localhost:9200&#x2F;sku&#x2F;_search
&#123;
  &quot;query&quot;: &#123;
    &quot;bool&quot;: &#123;
      &quot;must&quot;: [
        &#123;&quot;match&quot;: &#123;
          &quot;name&quot;: &quot;手机&quot;
        &#125;&#125;,
        &#123;
          &quot;term&quot;: &#123;
            &quot;brandName&quot;: &#123;
              &quot;value&quot;: &quot;小米&quot;
            &#125;
          &#125;
        &#125;
      ]
    &#125;
  &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如查询名称包含手机的，或品牌为小米的记录：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">GET http:&#x2F;&#x2F;localhost:9200&#x2F;sku&#x2F;_search
&#123;
  &quot;query&quot;: &#123;
    &quot;bool&quot;: &#123;
      &quot;should&quot;: [
        &#123;&quot;match&quot;: &#123;
          &quot;name&quot;: &quot;手机&quot;
        &#125;&#125;,
        &#123;
          &quot;term&quot;: &#123;
            &quot;brandName&quot;: &#123;
              &quot;value&quot;: &quot;小米&quot;
            &#125;
          &#125;
        &#125;
      ]
    &#125;
  &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="过滤查询"><a href="#过滤查询" class="headerlink" title="过滤查询"></a>过滤查询</h3><p>过滤是针对搜索结果进行过滤，过滤器主要判断的是文档是否匹配，不去计算和判断文档的匹配度得分，因此过滤器性能比查询要高，且方便缓存。因此推荐尽量使用过滤器去实现查询或者过滤器和查询共同使用。</p>
<p>过滤品牌为小米的记录如下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">GET http:&#x2F;&#x2F;localhost:9200&#x2F;sku&#x2F;_search
&#123;
  &quot;query&quot;: &#123;
    &quot;bool&quot;: &#123;
      &quot;filter&quot;: [
        &#123;&quot;match&quot;:&#123;
          &quot;brandName&quot;:&quot;小米&quot;
        &#125;&#125;
      ]
    &#125;
  &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>查询结果如下（注意<code>_score</code>为0）：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">&#123;
    &quot;took&quot;: 3,
    &quot;timed_out&quot;: false,
    &quot;_shards&quot;: &#123;
        &quot;total&quot;: 5,
        &quot;successful&quot;: 5,
        &quot;failed&quot;: 0
    &#125;,
    &quot;hits&quot;: &#123;
        &quot;total&quot;: 1,
        &quot;max_score&quot;: 0.0,
        &quot;hits&quot;: [
            &#123;
                &quot;_index&quot;: &quot;sku&quot;,
                &quot;_type&quot;: &quot;doc&quot;,
                &quot;_id&quot;: &quot;AYWp1L_wYrK1VsxqV5G5&quot;,
                &quot;_score&quot;: 0.0,
                &quot;_source&quot;: &#123;
                    &quot;name&quot;: &quot;小米手机&quot;,
                    &quot;price&quot;: 200000,
                    &quot;spuId&quot;: 101,
                    &quot;createTime&quot;: &quot;2020-05-09&quot;,
                    &quot;brandName&quot;: &quot;小米&quot;,
                    &quot;categoryName&quot;: &quot;手机&quot;,
                    &quot;saleNum&quot;: 10012,
                    &quot;commentNum&quot;: 323,
                    &quot;spec&quot;: &#123;
                        &quot;网络制式&quot;: &quot;移动4g&quot;,
                        &quot;屏幕尺寸&quot;: &quot;4.5&quot;
                    &#125;
                &#125;
            &#125;
        ]
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h3><p>按分组名称聚合查询，统计每个分组的数量，类似于SQL中的group by，示例如下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">GET http:&#x2F;&#x2F;localhost:9200&#x2F;sku&#x2F;_search
&#123;
  &quot;size&quot;: 0,
  &quot;aggs&quot;: &#123;
    &quot;sku_category&quot;: &#123;
      &quot;terms&quot;: &#123;
        &quot;field&quot;: &quot;categoryName&quot;
      &#125;
    &#125;
  &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>将size设为0时，不会将数据查询出来，目的是让查询更快。</p>
<p>除此之外还可以查询多个分组：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">GET http:&#x2F;&#x2F;localhost:9200&#x2F;sku&#x2F;_search
&#123;
  &quot;size&quot;: 0,
  &quot;aggs&quot;: &#123;
    &quot;sku_category&quot;: &#123;
      &quot;terms&quot;: &#123;
        &quot;field&quot;: &quot;categoryName&quot;
      &#125;
    &#125;,
    &quot;sku_brand&quot;: &#123;
      &quot;terms&quot;: &#123;
        &quot;field&quot;: &quot;brandName&quot;
      &#125;
    &#125;
  &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="范围"><a href="#范围" class="headerlink" title="范围"></a>范围</h3><p>Elasticsearch的范围查询可以用来查询处于某个范围内的文档，range查询可同时提供包含(inclusive)和不包含(exclusive)这两种范围表达式，范围的选项如下：</p>
<ul>
<li>gt：大于</li>
<li>lt：小于</li>
<li>gte：大于或等于</li>
<li>lte：小于或等于</li>
</ul>
<p>示例如下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">GET http:&#x2F;&#x2F;localhost:9200&#x2F;sku&#x2F;_search
&#123;
    &quot;query&quot; : &#123;
        &quot;constant_score&quot; : &#123;
            &quot;filter&quot; : &#123;
                &quot;range&quot; : &#123;
                    &quot;price&quot; : &#123;
                        &quot;gte&quot; : 20,
                        &quot;lt&quot;  : 40
                    &#125;
                &#125;
            &#125;
        &#125;
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>若想要范围是无界，如<code>[20,+∞)</code>，只须省略其中一边(gte)的限制即可。</p>
<h4 id="日期范围"><a href="#日期范围" class="headerlink" title="日期范围"></a>日期范围</h4><p>range查询同样可以应用在日期字段上。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">GET http:&#x2F;&#x2F;localhost:9200&#x2F;sku&#x2F;_search
&#123;
    &quot;query&quot; : &#123;
        &quot;constant_score&quot; : &#123;
            &quot;filter&quot; : &#123;
                &quot;range&quot; : &#123;
                    &quot;timestamp&quot; : &#123;
                        &quot;gt&quot; : &quot;2014-01-01 00:00:00&quot;,
                        &quot;lt&quot; : &quot;2014-01-07 00:00:00&quot;
                    &#125;
                &#125;
            &#125;
        &#125;
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>当使用它处理日期字段时，range查询支持对日期计算进行操作，如查找时间戳在过去一小时内的所有文档：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">&quot;range&quot; : &#123;
    &quot;timestamp&quot; : &#123;
        &quot;gt&quot; : &quot;now-1h&quot;
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>日期计算还可以被应用到某个具体的时间，并非只能是一个像now这样的占位符。只要在某个日期后加上一个双管符号(<code>||</code>)并紧跟一个日期数学表达式就能做到，如设置早于2014年1月1日的日期都额外加1个月：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">&quot;range&quot; : &#123;
    &quot;timestamp&quot; : &#123;
        &quot;gt&quot; : &quot;2014-01-01 00:00:00&quot;,
        &quot;lt&quot; : &quot;2014-01-01 00:00:00||+1M&quot;
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="存在查询-exists"><a href="#存在查询-exists" class="headerlink" title="存在查询(exists)"></a>存在查询(exists)</h3><h4 id="处理非Null值"><a href="#处理非Null值" class="headerlink" title="处理非Null值"></a>处理非Null值</h4><p>设置各条测试数据的tags值：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">POST http:&#x2F;&#x2F;localhost:9200&#x2F;my_index&#x2F;posts&#x2F;_bulk
&#123; &quot;index&quot;: &#123; &quot;_id&quot;: &quot;1&quot;              &#125;&#125;
&#123; &quot;tags&quot; : [&quot;search&quot;]                &#125;  
&#123; &quot;index&quot;: &#123; &quot;_id&quot;: &quot;2&quot;              &#125;&#125;
&#123; &quot;tags&quot; : [&quot;search&quot;, &quot;open_source&quot;] &#125;  
&#123; &quot;index&quot;: &#123; &quot;_id&quot;: &quot;3&quot;              &#125;&#125;
&#123; &quot;other_field&quot; : &quot;some data&quot;        &#125;  
&#123; &quot;index&quot;: &#123; &quot;_id&quot;: &quot;4&quot;              &#125;&#125;
&#123; &quot;tags&quot; : null                      &#125;  
&#123; &quot;index&quot;: &#123; &quot;_id&quot;: &quot;5&quot;              &#125;&#125;
&#123; &quot;tags&quot; : [&quot;search&quot;, null]          &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>tags值顺序为：</p>
<p>1、tags 字段有 1 个值。<br>2、tags 字段有 2 个值。<br>3、tags 字段缺失。<br>4、tags 字段被置为 null 。<br>5、tags 字段有 1 个值和 1 个 null 。</p>
<p>现在要找到那些被设置过标签字段的文档，并不关心标签的具体内容，只要标签存在即可，使用exists查询如下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">GET http:&#x2F;&#x2F;localhost:9200&#x2F;my_index&#x2F;posts&#x2F;_search
&#123;
    &quot;query&quot; : &#123;
        &quot;constant_score&quot; : &#123;
            &quot;filter&quot; : &#123;
                &quot;exists&quot; : &#123; &quot;field&quot; : &quot;tags&quot; &#125;
            &#125;
        &#125;
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>查询返回了3个文档：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">&#123;
    &quot;took&quot;: 1,
    &quot;timed_out&quot;: false,
    &quot;_shards&quot;: &#123;
        &quot;total&quot;: 5,
        &quot;successful&quot;: 5,
        &quot;failed&quot;: 0
    &#125;,
    &quot;hits&quot;: &#123;
        &quot;total&quot;: 3,
        &quot;max_score&quot;: 1.0,
        &quot;hits&quot;: [
            &#123;
                &quot;_index&quot;: &quot;my_index&quot;,
                &quot;_type&quot;: &quot;posts&quot;,
                &quot;_id&quot;: &quot;5&quot;,
                &quot;_score&quot;: 1.0,
                &quot;_source&quot;: &#123;
                    &quot;tags&quot;: [
                        &quot;search&quot;,
                        null
                    ]
                &#125;
            &#125;,
            &#123;
                &quot;_index&quot;: &quot;my_index&quot;,
                &quot;_type&quot;: &quot;posts&quot;,
                &quot;_id&quot;: &quot;2&quot;,
                &quot;_score&quot;: 1.0,
                &quot;_source&quot;: &#123;
                    &quot;tags&quot;: [
                        &quot;search&quot;,
                        &quot;open_source&quot;
                    ]
                &#125;
            &#125;,
            &#123;
                &quot;_index&quot;: &quot;my_index&quot;,
                &quot;_type&quot;: &quot;posts&quot;,
                &quot;_id&quot;: &quot;1&quot;,
                &quot;_score&quot;: 1.0,
                &quot;_source&quot;: &#123;
                    &quot;tags&quot;: [
                        &quot;search&quot;
                    ]
                &#125;
            &#125;
        ]
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>尽管文档5的tags存在null值，但它仍会被命中返回。该文档之所以存在，是因为标签有实际值（ search ）可以被索引，所以 null 对过滤不会产生任何影响。</p>
<p>因此，只要tags字段存在项(term)的文档都会命中并作为结果返回。</p>
<h4 id="处理Null值"><a href="#处理Null值" class="headerlink" title="处理Null值"></a>处理Null值</h4><p>exists查询字段为空的或没有这个字段时的代码如下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">GET http:&#x2F;&#x2F;localhost:9200&#x2F;my_index&#x2F;posts&#x2F;_search
&#123;
    &quot;query&quot;: &#123;
        &quot;bool&quot;: &#123;
            &quot;must_not&quot;: &#123;
                &quot;exists&quot;: &#123;
                    &quot;field&quot;: &quot;tags&quot;
                &#125;
            &#125;
        &#125;
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>此时的查询结果便只有3和4两个文档：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">&#123;
    &quot;took&quot;: 1,
    &quot;timed_out&quot;: false,
    &quot;_shards&quot;: &#123;
        &quot;total&quot;: 5,
        &quot;successful&quot;: 5,
        &quot;failed&quot;: 0
    &#125;,
    &quot;hits&quot;: &#123;
        &quot;total&quot;: 2,
        &quot;max_score&quot;: 1.0,
        &quot;hits&quot;: [
            &#123;
                &quot;_index&quot;: &quot;my_index&quot;,
                &quot;_type&quot;: &quot;posts&quot;,
                &quot;_id&quot;: &quot;4&quot;,
                &quot;_score&quot;: 1.0,
                &quot;_source&quot;: &#123;
                    &quot;tags&quot;: null
                &#125;
            &#125;,
            &#123;
                &quot;_index&quot;: &quot;my_index&quot;,
                &quot;_type&quot;: &quot;posts&quot;,
                &quot;_id&quot;: &quot;3&quot;,
                &quot;_score&quot;: 1.0,
                &quot;_source&quot;: &#123;
                    &quot;other_field&quot;: &quot;some data&quot;
                &#125;
            &#125;
        ]
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="最佳字段-dis-max"><a href="#最佳字段-dis-max" class="headerlink" title="最佳字段(dis_max)"></a>最佳字段(<code>dis_max</code>)</h3><p>假设有个网站允许用户搜索博客的内容，以下面两篇博客内容文档为例：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">PUT http:&#x2F;&#x2F;localhost:9200&#x2F;my_index&#x2F;my_type&#x2F;1
&#123;
    &quot;title&quot;: &quot;Quick brown rabbits&quot;,
    &quot;body&quot;:  &quot;Brown rabbits are commonly seen.&quot;
&#125;

PUT http:&#x2F;&#x2F;localhost:9200&#x2F;my_index&#x2F;my_type&#x2F;2
&#123;
    &quot;title&quot;: &quot;Keeping pets healthy&quot;,
    &quot;body&quot;:  &quot;My quick brown fox eats rabbits on a regular basis.&quot;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>用户输入词组 “Brown fox” 然后点击搜索按钮。事先，并不知道用户的搜索项是会在 title 还是在 body 字段中被找到，但是，用户很有可能是想搜索相关的词组。用肉眼判断，文档 2 的匹配度更高，因为它同时包括要查找的两个词。运行以下 bool 查询查看实际结果：</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json">GET http:&#x2F;&#x2F;localhost:9200&#x2F;my_index&#x2F;my_type&#x2F;_search
&#123;
    &quot;query&quot;: &#123;
        &quot;bool&quot;: &#123;
            &quot;should&quot;: [
                &#123; &quot;match&quot;: &#123; &quot;title&quot;: &quot;Brown fox&quot; &#125;&#125;,
                &#123; &quot;match&quot;: &#123; &quot;body&quot;:  &quot;Brown fox&quot; &#125;&#125;
            ]
        &#125;
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>查询结果发现是文档 1 的评分更高：</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json">&#123;
    &quot;took&quot;: 3,
    &quot;timed_out&quot;: false,
    &quot;_shards&quot;: &#123;
        &quot;total&quot;: 5,
        &quot;successful&quot;: 5,
        &quot;failed&quot;: 0
    &#125;,
    &quot;hits&quot;: &#123;
        &quot;total&quot;: 2,
        &quot;max_score&quot;: 0.56977004,
        &quot;hits&quot;: [
            &#123;
                &quot;_index&quot;: &quot;my_index&quot;,
                &quot;_type&quot;: &quot;my_type&quot;,
                &quot;_id&quot;: &quot;2&quot;,
                &quot;_score&quot;: 0.56977004,
                &quot;_source&quot;: &#123;
                    &quot;title&quot;: &quot;Keeping pets healthy&quot;,
                    &quot;body&quot;: &quot;My quick brown fox eats rabbits on a regular basis.&quot;
                &#125;
            &#125;,
            &#123;
                &quot;_index&quot;: &quot;my_index&quot;,
                &quot;_type&quot;: &quot;my_type&quot;,
                &quot;_id&quot;: &quot;1&quot;,
                &quot;_score&quot;: 0.53565365,
                &quot;_source&quot;: &#123;
                    &quot;title&quot;: &quot;Quick brown rabbits&quot;,
                    &quot;body&quot;: &quot;Brown rabbits are commonly seen.&quot;
                &#125;
            &#125;
        ]
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>bool的评分如下：</p>
<p>1、它会执行 should 语句中的两个查询。<br> 2、加和两个查询的评分。<br> 3、乘以匹配语句的总数。<br> 4、除以所有语句总数（这里为：2）。</p>
<p>由于文档 1 的两个字段都包含 brown 这个词，所以两个 match 语句都能成功匹配并且有一个评分。文档 2 的 body 字段同时包含 brown 和 fox 这两个词，但 title 字段没有包含任何词。这样， body 查询结果中的高分，加上 title 查询中的 0 分，然后乘以二分之一，就得到比文档 1 更低的整体评分。</p>
<p> 在这个例子中title 和 body 字段是相互竞争的关系，因此需要找到单个最佳匹配的字段。</p>
<p>若不是简单将每个字段的评分结果加在一起，而是将最佳匹配字段的评分作为查询的整体评分，则结果中同时包含 brown 和 fox 的单个字段比反复出现相同词语的多个不同字段有更高的相关度。</p>
<h4 id="dis-max-查询"><a href="#dis-max-查询" class="headerlink" title="dis_max 查询"></a>dis_max 查询</h4><p> 不使用 bool 查询时，可以使用<code>dis_max</code>即分离最大化查询，其指的是： 将任何与任一查询匹配的文档作为结果返回，但只将最佳匹配的评分作为查询的评分结果返回 ：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">GET http:&#x2F;&#x2F;localhost:9200&#x2F;my_index&#x2F;my_type&#x2F;_search
&#123;
    &quot;query&quot;: &#123;
        &quot;dis_max&quot;: &#123;
            &quot;queries&quot;: [
                &#123; &quot;match&quot;: &#123; &quot;title&quot;: &quot;Brown fox&quot; &#125;&#125;,
                &#123; &quot;match&quot;: &#123; &quot;body&quot;:  &quot;Brown fox&quot; &#125;&#125;
            ]
        &#125;
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>得到的结果为：</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json">&#123;
    &quot;took&quot;: 3,
    &quot;timed_out&quot;: false,
    &quot;_shards&quot;: &#123;
        &quot;total&quot;: 5,
        &quot;successful&quot;: 5,
        &quot;failed&quot;: 0
    &#125;,
    &quot;hits&quot;: &#123;
        &quot;total&quot;: 2,
        &quot;max_score&quot;: 0.56977004,
        &quot;hits&quot;: [
            &#123;
                &quot;_index&quot;: &quot;my_index&quot;,
                &quot;_type&quot;: &quot;my_type&quot;,
                &quot;_id&quot;: &quot;2&quot;,
                &quot;_score&quot;: 0.56977004,
                &quot;_source&quot;: &#123;
                    &quot;title&quot;: &quot;Keeping pets healthy&quot;,
                    &quot;body&quot;: &quot;My quick brown fox eats rabbits on a regular basis.&quot;
                &#125;
            &#125;,
            &#123;
                &quot;_index&quot;: &quot;my_index&quot;,
                &quot;_type&quot;: &quot;my_type&quot;,
                &quot;_id&quot;: &quot;1&quot;,
                &quot;_score&quot;: 0.2824934,
                &quot;_source&quot;: &#123;
                    &quot;title&quot;: &quot;Quick brown rabbits&quot;,
                    &quot;body&quot;: &quot;Brown rabbits are commonly seen.&quot;
                &#125;
            &#125;
        ]
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="最佳字段调优"><a href="#最佳字段调优" class="headerlink" title="最佳字段调优"></a><strong>最佳字段调优</strong></h3><p> 当用户搜索 “quick pets” 时会发生什么呢？在前面的例子中，两个文档都包含词 quick ，但是只有文档 2 包含词 pets ，两个文档中都不具有同时包含 两个词 的 相同字段 。而一个简单的 dis_max 查询会采用单个最佳匹配字段，而忽略其他的匹配：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">GET http:&#x2F;&#x2F;localhost:9200&#x2F;my_index&#x2F;my_type&#x2F;_search
&#123;
    &quot;query&quot;: &#123;
        &quot;dis_max&quot;: &#123;
            &quot;queries&quot;: [
                &#123; &quot;match&quot;: &#123; &quot;title&quot;: &quot;Quick pets&quot; &#125;&#125;,
                &#123; &quot;match&quot;: &#123; &quot;body&quot;:  &quot;Quick pets&quot; &#125;&#125;
            ]
        &#125;
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>运行结果如下：</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json">&#123;
    &quot;took&quot;: 1,
    &quot;timed_out&quot;: false,
    &quot;_shards&quot;: &#123;
        &quot;total&quot;: 5,
        &quot;successful&quot;: 5,
        &quot;failed&quot;: 0
    &#125;,
    &quot;hits&quot;: &#123;
        &quot;total&quot;: 2,
        &quot;max_score&quot;: 0.28488502,
        &quot;hits&quot;: [
            &#123;
                &quot;_index&quot;: &quot;my_index&quot;,
                &quot;_type&quot;: &quot;my_type&quot;,
                &quot;_id&quot;: &quot;2&quot;,
                &quot;_score&quot;: 0.28488502,
                &quot;_source&quot;: &#123;
                    &quot;title&quot;: &quot;Keeping pets healthy&quot;,
                    &quot;body&quot;: &quot;My quick brown fox eats rabbits on a regular basis.&quot;
                &#125;
            &#125;,
            &#123;
                &quot;_index&quot;: &quot;my_index&quot;,
                &quot;_type&quot;: &quot;my_type&quot;,
                &quot;_id&quot;: &quot;1&quot;,
                &quot;_score&quot;: 0.25316024,
                &quot;_source&quot;: &#123;
                    &quot;title&quot;: &quot;Quick brown rabbits&quot;,
                    &quot;body&quot;: &quot;Brown rabbits are commonly seen.&quot;
                &#125;
            &#125;
        ]
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>从结果中可以发现，两个评分是完全相同的。理想中同时匹配 title 和 body 字段的文档比只与一个字段匹配的文档的相关度理应更高，但事实并非如此，这是因为dis_max 查询只会简单地使用单个最佳匹配语句的评分<code>_score</code>作为整体评分。</p>
<h4 id="tie-breaker参数"><a href="#tie-breaker参数" class="headerlink" title="tie_breaker参数"></a>tie_breaker参数</h4><p> 可以通过指定 <code>tie_breaker</code> 这个参数将其他匹配语句的评分也考虑其中：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">GET http:&#x2F;&#x2F;localhost:9200&#x2F;my_index&#x2F;my_type&#x2F;_search
&#123;
    &quot;query&quot;: &#123;
        &quot;dis_max&quot;: &#123;
            &quot;queries&quot;: [
                &#123; &quot;match&quot;: &#123; &quot;title&quot;: &quot;Quick pets&quot; &#125;&#125;,
                &#123; &quot;match&quot;: &#123; &quot;body&quot;:  &quot;Quick pets&quot; &#125;&#125;
            ],
            &quot;tie_breaker&quot;: 0.3
        &#125;
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>结果：文档 2 的相关度比文档 1 略高。</p>
<p>tie_breaker 参数提供了一种 dis_max 和 bool 之间的折中选择，它的评分方式如下：</p>
<ul>
<li>获得最佳匹配语句的评分 _score 。</li>
<li>将其他匹配语句的评分结果与 tie_breaker 相乘。</li>
<li>对以上评分求和并规范化。</li>
</ul>
<p>tie_breaker可以是 0 到 1 之间的浮点数，其中0代表使用dis_max最佳匹配语句的普通逻辑，1表示所有匹配语句同等重要。最佳的精确值需要根据数据与查询调试得出，但是合理值应该与零接近（处于0.1-0.4之间），这样就不会颠覆dis_max最佳匹配性质的根本。</p>
<h1 id="IK分词器"><a href="#IK分词器" class="headerlink" title="IK分词器"></a>IK分词器</h1><p>分词是全文搜索引擎必用的技术，由于Elasticsearch原生的分词器不支持中文，因此需要安装一个中文分词器，这里用的分词器是IK分词器。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>访问<a href="https://github.com/medcl/elasticsearch-analysis-ik/releases">IK分词器</a>下载与Elasticsearch对应版本的中文分词器，这里下载的版本为5.5.3，具体地址为<a href="https://github.com/medcl/elasticsearch-analysis-ik/releases/tag/v5.5.3">Release v5.5.3 · medcl/elasticsearch-analysis-ik (github.com)</a>。将解压后的文件夹放入Elasticsearch根目录里的<code>E:\elasticsearch-5.5.3\plugins\ik</code>下，重启Elasticsearch后便可使用</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>IK分词器提供了两个分词算法<code>ik_smart</code>和<code>ik_max_word</code>。其中<code>ik_smart</code>为智能最少切分，<code>ik_max_word</code>为最细粒度划分，</p>
<ul>
<li><code>ik_max_word</code>：会将文本做最细粒度划分，如「我是程序员」会被拆分为「我、是、程序员、程序、员」</li>
<li><code>ik_smart</code>：会将文本做最少切分，如「我是程序员」会被拆分为「我、是、程序员」</li>
</ul>
<h2 id="中文分词"><a href="#中文分词" class="headerlink" title="中文分词"></a>中文分词</h2><ul>
<li><p>不使用ik分词器时的效果：</p>
<ul>
<li><p>通过postman发送GET请求查询分词：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">GET http:&#x2F;&#x2F;localhost:9200&#x2F;_analyze
&#123;
    &quot;text&quot;:&quot;我是程序员&quot;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>postman操作如图所示：<img src="/2023/01/13/python%E7%8E%AF%E5%A2%83%E4%B8%ADElasticsearch%E7%9A%84%E4%BD%BF%E7%94%A8/4.png" alt></p>
<p>得到的结果如下，可以发现Elasticsearch的默认分词器无法识别中文：我、程序、程序员这样的词汇，而是简单地将每个字拆完分为一个词：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">&#123;
    &quot;tokens&quot;: [
        &#123;
            &quot;token&quot;: &quot;我&quot;,
            &quot;start_offset&quot;: 0,
            &quot;end_offset&quot;: 1,
            &quot;type&quot;: &quot;&lt;IDEOGRAPHIC&gt;&quot;,
            &quot;position&quot;: 0
        &#125;,
        &#123;
            &quot;token&quot;: &quot;是&quot;,
            &quot;start_offset&quot;: 1,
            &quot;end_offset&quot;: 2,
            &quot;type&quot;: &quot;&lt;IDEOGRAPHIC&gt;&quot;,
            &quot;position&quot;: 1
        &#125;,
        &#123;
            &quot;token&quot;: &quot;程&quot;,
            &quot;start_offset&quot;: 2,
            &quot;end_offset&quot;: 3,
            &quot;type&quot;: &quot;&lt;IDEOGRAPHIC&gt;&quot;,
            &quot;position&quot;: 2
        &#125;,
        &#123;
            &quot;token&quot;: &quot;序&quot;,
            &quot;start_offset&quot;: 3,
            &quot;end_offset&quot;: 4,
            &quot;type&quot;: &quot;&lt;IDEOGRAPHIC&gt;&quot;,
            &quot;position&quot;: 3
        &#125;,
        &#123;
            &quot;token&quot;: &quot;员&quot;,
            &quot;start_offset&quot;: 4,
            &quot;end_offset&quot;: 5,
            &quot;type&quot;: &quot;&lt;IDEOGRAPHIC&gt;&quot;,
            &quot;position&quot;: 4
        &#125;
    ]
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
</li>
<li><p>使用ik分词器后的效果：</p>
<ul>
<li><p>通过postman发送GET请求查询分词将文本做最少切分：</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">GET http:&#x2F;&#x2F;localhost:9200&#x2F;_analyze
&#123;
    &quot;analyzer&quot;:&quot;ik_smart&quot;,
    &quot;text&quot;:&quot;我是程序员&quot;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>  得到的结果如下：</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">&#123;
    &quot;tokens&quot;: [
        &#123;
            &quot;token&quot;: &quot;我&quot;,
            &quot;start_offset&quot;: 0,
            &quot;end_offset&quot;: 1,
            &quot;type&quot;: &quot;CN_CHAR&quot;,
            &quot;position&quot;: 0
        &#125;,
        &#123;
            &quot;token&quot;: &quot;是&quot;,
            &quot;start_offset&quot;: 1,
            &quot;end_offset&quot;: 2,
            &quot;type&quot;: &quot;CN_CHAR&quot;,
            &quot;position&quot;: 1
        &#125;,
        &#123;
            &quot;token&quot;: &quot;程序员&quot;,
            &quot;start_offset&quot;: 2,
            &quot;end_offset&quot;: 5,
            &quot;type&quot;: &quot;CN_WORD&quot;,
            &quot;position&quot;: 2
        &#125;
    ]
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>通过postman发送GET请求查询分词将文本做最细粒度划分：</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">GET http:&#x2F;&#x2F;localhost:9200&#x2F;_analyze
&#123;
    &quot;analyzer&quot;:&quot;ik_max_word&quot;,
    &quot;text&quot;:&quot;我是程序员&quot;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>  得到的结果如下：</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">&#123;
    &quot;tokens&quot;: [
        &#123;
            &quot;token&quot;: &quot;我&quot;,
            &quot;start_offset&quot;: 0,
            &quot;end_offset&quot;: 1,
            &quot;type&quot;: &quot;CN_CHAR&quot;,
            &quot;position&quot;: 0
        &#125;,
        &#123;
            &quot;token&quot;: &quot;是&quot;,
            &quot;start_offset&quot;: 1,
            &quot;end_offset&quot;: 2,
            &quot;type&quot;: &quot;CN_CHAR&quot;,
            &quot;position&quot;: 1
        &#125;,
        &#123;
            &quot;token&quot;: &quot;程序员&quot;,
            &quot;start_offset&quot;: 2,
            &quot;end_offset&quot;: 5,
            &quot;type&quot;: &quot;CN_WORD&quot;,
            &quot;position&quot;: 2
        &#125;,
        &#123;
            &quot;token&quot;: &quot;程序&quot;,
            &quot;start_offset&quot;: 2,
            &quot;end_offset&quot;: 4,
            &quot;type&quot;: &quot;CN_WORD&quot;,
            &quot;position&quot;: 3
        &#125;,
        &#123;
            &quot;token&quot;: &quot;员&quot;,
            &quot;start_offset&quot;: 4,
            &quot;end_offset&quot;: 5,
            &quot;type&quot;: &quot;CN_CHAR&quot;,
            &quot;position&quot;: 4
        &#125;
    ]
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
</li>
</ul>
<h2 id="自定义词库"><a href="#自定义词库" class="headerlink" title="自定义词库"></a>自定义词库</h2><p>随着各种新词的不断出现，分词器并不认识一些网络热词。若要补充新词到ik的词库中，则需要进入目录<code>E:\elasticsearch-5.5.3\plugins\ik\config</code>中创建<code>custom.dic</code>文件，写入新词。同时打开<code>IKAnalyzer.cfg.xml</code>文件，将添加<code>custom.dic</code>配置后，重启Elasticsearch。</p>
<p>配置文件参考如下：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">properties</span> <span class="token name">SYSTEM</span> <span class="token string">"http://java.sun.com/dtd/properties.dtd"</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>comment</span><span class="token punctuation">></span></span>IK Analyzer 扩展配置<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>comment</span><span class="token punctuation">></span></span>
	<span class="token comment">&lt;!--用户可以在这里配置自己的扩展字典 --></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ext_dict<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>custom.dic<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">></span></span>
	 <span class="token comment">&lt;!--用户可以在这里配置自己的扩展停止词字典--></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ext_stopwords<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">></span></span>
	<span class="token comment">&lt;!--用户可以在这里配置远程扩展字典 --></span>
	<span class="token comment">&lt;!-- &lt;entry key="remote_ext_dict">words_location&lt;/entry> --></span>
	<span class="token comment">&lt;!--用户可以在这里配置远程扩展停止词字典--></span>
	<span class="token comment">&lt;!-- &lt;entry key="remote_ext_stopwords">words_location&lt;/entry> --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在进行以上配置后，分词器在看到文件中的新词时，便会知道这是一个词汇。</p>
<ul>
<li><p>未设置自定义词库时的效果如下：</p>
<ul>
<li><p>通过postman发送GET请求查询分词：</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">GET http:&#x2F;&#x2F;localhost:9200&#x2F;_analyze
&#123;
    &quot;analyzer&quot;:&quot;ik_smart&quot;,
    &quot;text&quot;:&quot;阿里嘎多美羊羊桑&quot;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>  得到的结果如下：</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">&#123;
    &quot;tokens&quot;: [
        &#123;
            &quot;token&quot;: &quot;阿里&quot;,
            &quot;start_offset&quot;: 0,
            &quot;end_offset&quot;: 2,
            &quot;type&quot;: &quot;CN_WORD&quot;,
            &quot;position&quot;: 0
        &#125;,
        &#123;
            &quot;token&quot;: &quot;嘎&quot;,
            &quot;start_offset&quot;: 2,
            &quot;end_offset&quot;: 3,
            &quot;type&quot;: &quot;CN_CHAR&quot;,
            &quot;position&quot;: 1
        &#125;,
        &#123;
            &quot;token&quot;: &quot;多美&quot;,
            &quot;start_offset&quot;: 3,
            &quot;end_offset&quot;: 5,
            &quot;type&quot;: &quot;CN_WORD&quot;,
            &quot;position&quot;: 2
        &#125;,
        &#123;
            &quot;token&quot;: &quot;羊&quot;,
            &quot;start_offset&quot;: 5,
            &quot;end_offset&quot;: 6,
            &quot;type&quot;: &quot;CN_CHAR&quot;,
            &quot;position&quot;: 3
        &#125;,
        &#123;
            &quot;token&quot;: &quot;羊&quot;,
            &quot;start_offset&quot;: 6,
            &quot;end_offset&quot;: 7,
            &quot;type&quot;: &quot;CN_CHAR&quot;,
            &quot;position&quot;: 4
        &#125;,
        &#123;
            &quot;token&quot;: &quot;桑&quot;,
            &quot;start_offset&quot;: 7,
            &quot;end_offset&quot;: 8,
            &quot;type&quot;: &quot;CN_CHAR&quot;,
            &quot;position&quot;: 5
        &#125;
    ]
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
</li>
<li><p>设置自定义词库后的效果如下：</p>
<ul>
<li><p>通过postman发送GET请求查询分词：</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">GET http:&#x2F;&#x2F;localhost:9200&#x2F;_analyze
&#123;
    &quot;analyzer&quot;:&quot;ik_smart&quot;,
    &quot;text&quot;:&quot;阿里嘎多美羊羊桑&quot;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>  得到的结果如下：</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">&#123;
    &quot;tokens&quot;: [
        &#123;
            &quot;token&quot;: &quot;阿里嘎多&quot;,
            &quot;start_offset&quot;: 0,
            &quot;end_offset&quot;: 4,
            &quot;type&quot;: &quot;CN_WORD&quot;,
            &quot;position&quot;: 0
        &#125;,
        &#123;
            &quot;token&quot;: &quot;美羊羊&quot;,
            &quot;start_offset&quot;: 4,
            &quot;end_offset&quot;: 7,
            &quot;type&quot;: &quot;CN_WORD&quot;,
            &quot;position&quot;: 1
        &#125;,
        &#123;
            &quot;token&quot;: &quot;桑&quot;,
            &quot;start_offset&quot;: 7,
            &quot;end_offset&quot;: 8,
            &quot;type&quot;: &quot;CN_CHAR&quot;,
            &quot;position&quot;: 2
        &#125;
    ]
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Elasticsearch</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>前端三件套之CSS（二）</title>
    <url>/2022/10/28/%E5%89%8D%E7%AB%AF%E4%B8%89%E4%BB%B6%E5%A5%97%E4%B9%8BCSS%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h1 id="CSS表格"><a href="#CSS表格" class="headerlink" title="CSS表格"></a>CSS表格</h1><h2 id="表格边框"><a href="#表格边框" class="headerlink" title="表格边框"></a>表格边框</h2><p>使用<code>border</code>属性可以指定CSS表格边框：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">table,th,td</span><span class="token punctuation">&#123;</span>
    <span class="token property">border</span><span class="token punctuation">:</span>1px solid black<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>由于表格和<code>th/td</code>元素有独立的边界，故会显示有双边框。</p>
<h2 id="折叠边框"><a href="#折叠边框" class="headerlink" title="折叠边框"></a>折叠边框</h2><p>使用<code>border-collapse</code>属性可以设置表格的边框是否被折叠成一个单一的边框或隔开：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">table</span><span class="token punctuation">&#123;</span>
    <span class="token property">border-collapse</span><span class="token punctuation">:</span>collapse<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">table,th,td</span><span class="token punctuation">&#123;</span>
    <span class="token property">border</span><span class="token punctuation">:</span>1px solid black<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="表格宽度和高度"><a href="#表格宽度和高度" class="headerlink" title="表格宽度和高度"></a>表格宽度和高度</h2><p>使用<code>width</code>和<code>height</code>属性定义表格的宽度和高度：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">table</span><span class="token punctuation">&#123;</span>
    <span class="token property">width</span><span class="token punctuation">:</span>100%<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">th</span><span class="token punctuation">&#123;</span>
    <span class="token property">height</span><span class="token punctuation">:</span>50px<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="表格文字对齐"><a href="#表格文字对齐" class="headerlink" title="表格文字对齐"></a>表格文字对齐</h2><p>表格中的文字对齐可分为水平对齐和垂直对齐。</p>
<p>使用<code>text-align</code>属性设置水平对齐方式，如向左对齐<code>left</code>、向右对齐<code>right</code>或居中对齐<code>center</code>：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">td</span><span class="token punctuation">&#123;</span>
	<span class="token property">text-align</span><span class="token punctuation">:</span>right<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>使用<code>vertical-align</code>属性设置垂直对齐方式，如顶部<code>top</code>、底部<code>bottom</code>或中间<code>center</code>：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">td</span><span class="token punctuation">&#123;</span>
	<span class="token property">vertical-align</span><span class="token punctuation">:</span>bottom<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="表格填充"><a href="#表格填充" class="headerlink" title="表格填充"></a>表格填充</h2><p>使用<code>padding</code>属性控制内容与边框之间的距离：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">td</span><span class="token punctuation">&#123;</span>
	<span class="token property">padding</span><span class="token punctuation">:</span>15px<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="表格颜色"><a href="#表格颜色" class="headerlink" title="表格颜色"></a>表格颜色</h2><p>使用<code>border</code>属性指定边框的颜色，使用<code>color</code>属性控制文本颜色，使用<code>background-color</code>属性控制背景颜色：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">table,td,th</span><span class="token punctuation">&#123;</span>
    <span class="token property">border</span><span class="token punctuation">:</span>1px solid green<span class="token punctuation">;</span><span class="token comment">/*solid指边框线为实线*/</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">th</span><span class="token punctuation">&#123;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span>green<span class="token punctuation">;</span>
    <span class="token property">color</span><span class="token punctuation">:</span>white<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h1><p>CSS盒子模型本质上是一个盒子，封装周围的HTML元素，包括边距、边框、填充和实际内容。盒模型允许在其他元素和周围元素边框之间的空间放置元素。</p>
<p>标准盒子模型如下图所示：</p>
<p><img src="/2022/10/28/%E5%89%8D%E7%AB%AF%E4%B8%89%E4%BB%B6%E5%A5%97%E4%B9%8BCSS%EF%BC%88%E4%BA%8C%EF%BC%89/1.png" alt></p>
<ul>
<li>Margin（外边距）：盒子与其他盒子的距离。Margin没有背景颜色，其完全透明</li>
<li>Border（边框）：盒子的厚度和它的颜色或材料。边框颜色会受到盒子的背景颜色影响</li>
<li>Padding（内边距）：盒子里与盒中内容的填充物。会受到框中填充的背景颜色影响</li>
<li>Content（内容）：盒子里装的东西，显示文本和图像</li>
</ul>
<h2 id="元素的宽度和高度"><a href="#元素的宽度和高度" class="headerlink" title="元素的宽度和高度"></a>元素的宽度和高度</h2><p>当指定一个CSS元素的宽度和高度属性时，实质上只是设置内容区域的宽度和高度，除此之外，还需要添加填充、边框和边距：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">a</span><span class="token punctuation">&#123;</span>
    <span class="token property">width</span><span class="token punctuation">:</span>250px<span class="token punctuation">;</span>
    <span class="token property">padding</span><span class="token punctuation">:</span>10px<span class="token punctuation">;</span>
    <span class="token property">border</span><span class="token punctuation">:</span>5 px solid gray<span class="token punctuation">;</span>
    <span class="token property">margin</span><span class="token punctuation">:</span>10px<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>则该元素的总宽度为250px（宽）+20px（左右填充）+10px（左右边框）+20px（左右边距=300px。</p>
<p>因此，元素的总宽度计算公式为：</p>
<p>元素的总宽度=元素自身宽度+左填充+右填充+左边框+右边框+左边距+右边距</p>
<p>同理可得，元素的总高度计算公式为：</p>
<p>元素的总高度=元素自身高度+顶部填充+底部填充+上边框+下边框+上边距+下边距</p>
<p><strong>网页的宽度一般为1920px，高度不限。有限可视区在：950px~1200px的宽度之间。</strong></p>
<h2 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h2><h2 id="边框样式"><a href="#边框样式" class="headerlink" title="边框样式"></a>边框样式</h2><p>使用<code>border-style</code>属性可以定义边框的样式。</p>
<p>border-style有以下属性值：</p>
<ul>
<li>none：默认无边框</li>
<li>dotted：定义一个点线框</li>
<li>dashed：定义一个虚线框</li>
<li>solid：定义实线边界</li>
<li>double：定义两个边界。两个边界的宽度和<code>border-width</code>的值相同</li>
<li>groove：定义3D沟槽边距。效果取决于边界的颜色值</li>
<li>ridge：定义3D脊边界。效果取决于边界的颜色值</li>
<li>inset：定义一个3D的嵌入边框。效果取决于边界的颜色值</li>
<li>outset：定义一个3D的突出边框。效果取决于边界的颜色值</li>
</ul>
<h2 id="边框宽度"><a href="#边框宽度" class="headerlink" title="边框宽度"></a>边框宽度</h2><p>使用<code>border-width</code>属性可以为边框指定宽度。可以指定长度值，比如2px或0.1em；或使用3个关键字之一：thin、medium（默认值）和thick。</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">p</span><span class="token punctuation">&#123;</span>
    <span class="token property">border-style</span><span class="token punctuation">:</span>solid<span class="token punctuation">;</span>
    <span class="token property">border-width</span><span class="token punctuation">:</span>medium<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="边框颜色"><a href="#边框颜色" class="headerlink" title="边框颜色"></a>边框颜色</h2><p>使用<code>border-color</code>属性可以设置边框的颜色，一次最多可以接受4个颜色值，使用<code>border-color</code>必须得先使用<code>border-style</code>来设置边框样式：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">p</span><span class="token punctuation">&#123;</span>
    <span class="token property">border-style</span><span class="token punctuation">:</span>solid<span class="token punctuation">;</span>
    <span class="token property">border-color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="单独设置各边"><a href="#单独设置各边" class="headerlink" title="单独设置各边"></a>单独设置各边</h2><p>可以指定不同的侧面不同的边框：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">p</span><span class="token punctuation">&#123;</span>
    <span class="token property">border-top-style</span><span class="token punctuation">:</span>dotted<span class="token punctuation">;</span>
    <span class="token property">border-right-style</span><span class="token punctuation">:</span>solid<span class="token punctuation">;</span>
    <span class="token property">border-bottom-style</span><span class="token punctuation">:</span>dotted<span class="token punctuation">;</span>
    <span class="token property">border-left-style</span><span class="token punctuation">:</span>solid<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">/*方法2*/</span>
<span class="token selector">p</span><span class="token punctuation">&#123;</span>
    <span class="token property">border-style</span><span class="token punctuation">:</span>dotted solid<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>border-style 属性可以有 1-4 个值：</p>
<ul>
<li><code>border-style:dotted solid double dashed;</code><ul>
<li>上边框是 dotted</li>
<li>右边框是 solid</li>
<li>底边框是 double</li>
<li>左边框是 dashed</li>
</ul>
</li>
<li><code>border-style:dotted solid double;</code><ul>
<li>上边框是 dotted</li>
<li>左、右边框是 solid</li>
<li>底边框是 double</li>
</ul>
</li>
<li><code>border-style:dotted solid;</code><ul>
<li>上、底边框是 dotted</li>
<li>左、右边框是 solid</li>
</ul>
</li>
<li><code>border-style:dotted;</code><ul>
<li>四面边框是 dotted</li>
</ul>
</li>
</ul>
<h2 id="透明边框"><a href="#透明边框" class="headerlink" title="透明边框"></a>透明边框</h2><p>透明样式的定义如下：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">a:link,a:visited</span><span class="token punctuation">&#123;</span>
    <span class="token property">border-style</span><span class="token punctuation">:</span>solid<span class="token punctuation">;</span>
    <span class="token property">border-width</span><span class="token punctuation">:</span>5px<span class="token punctuation">;</span>
    <span class="token property">border-color</span><span class="token punctuation">:</span>transparent<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">a:hover</span><span class="token punctuation">&#123;</span>
    <span class="token property">border-color</span><span class="token punctuation">:</span>gray<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="简写边框属性"><a href="#简写边框属性" class="headerlink" title="简写边框属性"></a>简写边框属性</h2><p>可以在<code>border</code>属性中设置以下属性：</p>
<ul>
<li>border-width</li>
<li>border-style</li>
<li>border-color</li>
</ul>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">border</span><span class="token punctuation">:</span>5px solid red<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h1 id="CSS伪类"><a href="#CSS伪类" class="headerlink" title="CSS伪类"></a>CSS伪类</h1><p>伪类可以用来添加一些选择器的特殊效果。</p>
<p>伪类用于当已有元素处于的某个状态时，为其添加对应的样式，这个状态是根据用户行为而动态变化的。<strong>伪类的名称不区分大小写</strong>，伪类的语法如下：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">selector:pseudo-class</span><span class="token punctuation">&#123;</span>
	<span class="token property">property</span><span class="token punctuation">:</span>value<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>CSS类中也可以使用伪类：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">selector.class:pseudo-class</span><span class="token punctuation">&#123;</span>
	<span class="token property">property</span><span class="token punctuation">:</span>value<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="anchor伪类"><a href="#anchor伪类" class="headerlink" title="anchor伪类"></a>anchor伪类</h2><p>在支持CSS的浏览器中，链接的不同状态可以以不同的方式显示。</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">a:link</span><span class="token punctuation">&#123;</span>
    <span class="token property">color</span><span class="token punctuation">:</span>blue<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">a:visited</span><span class="token punctuation">&#123;</span>
    <span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">a:hover</span><span class="token punctuation">&#123;</span>
    <span class="token property">color</span><span class="token punctuation">:</span>#FF00FF<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">a:active</span><span class="token punctuation">&#123;</span>
    <span class="token property">color</span><span class="token punctuation">:</span>#0000FF<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="伪类和CSS类"><a href="#伪类和CSS类" class="headerlink" title="伪类和CSS类"></a>伪类和CSS类</h2><p>伪类可以与CSS类配合使用：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">a.red:visited&#123;
    color:#FF0000;
&#125;
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>CSS style<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="first-child伪类"><a href="#first-child伪类" class="headerlink" title="first-child伪类"></a><code>first-child</code>伪类</h2><p>可以使用<code>first-child</code>伪类来选择元素的第一个子元素。</p>
<p><strong>注意：</strong>在IE8之前是版本必须声明<code>&lt;!DOCTYPE&gt;</code>，<code>first-child</code>才会生效。</p>
<p>如用来匹配第一个<code>&lt;p&gt;</code>元素：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
<span class="token selector">p:first-child</span><span class="token punctuation">&#123;</span>
    <span class="token property">color</span><span class="token punctuation">:</span>blue<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>    
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>我是狼<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>我是小狼<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>运行结果如下：</p>
<p><img src="/2022/10/28/%E5%89%8D%E7%AB%AF%E4%B8%89%E4%BB%B6%E5%A5%97%E4%B9%8BCSS%EF%BC%88%E4%BA%8C%EF%BC%89/2.png" alt></p>
<p>如用来匹配所有<code>&lt;p&gt;</code>元素中的第一个<code>&lt;i&gt;</code>元素：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
<span class="token selector">p>i:first-child</span><span class="token punctuation">&#123;</span>
    <span class="token property">color</span><span class="token punctuation">:</span>blue<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>    
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>我是<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">></span></span>一只<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">></span></span>狼<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>我是<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">></span></span>一只<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">></span></span>小<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>狼<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>运行结果如下：</p>
<p><img src="/2022/10/28/%E5%89%8D%E7%AB%AF%E4%B8%89%E4%BB%B6%E5%A5%97%E4%B9%8BCSS%EF%BC%88%E4%BA%8C%EF%BC%89/3.png" alt></p>
<p>如用来匹配所有作为第一个子元素的<code>&lt;p&gt;</code>元素中的所有<code>&lt;i&gt;</code>元素：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
<span class="token selector">p:first-child i</span><span class="token punctuation">&#123;</span>
    <span class="token property">color</span><span class="token punctuation">:</span>blue<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>    
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>我是<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">></span></span>一只<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">></span></span>狼<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>我是<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">></span></span>一只<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">></span></span>小<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>狼<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>运行结果如下：</p>
<p><img src="/2022/10/28/%E5%89%8D%E7%AB%AF%E4%B8%89%E4%BB%B6%E5%A5%97%E4%B9%8BCSS%EF%BC%88%E4%BA%8C%EF%BC%89/4.png" alt></p>
<h2 id="lang伪类"><a href="#lang伪类" class="headerlink" title="lang伪类"></a>lang伪类</h2><p>lang伪类可以为不同的语言定义特殊的规则。</p>
<p><strong>注意：</strong>在IE8之前是版本必须声明<code>&lt;!DOCTYPE&gt;</code>才能支持lang伪类。</p>
<p>如lang类为属性值为no的q元素定义引号的类型：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
<span class="token selector">q:lang(no)</span><span class="token punctuation">&#123;</span>
    <span class="token property">quotes</span><span class="token punctuation">:</span><span class="token string">"~"</span><span class="token string">"~"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>    
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>我是<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>q</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>no<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>一只<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>q</span><span class="token punctuation">></span></span>狼<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>我是一只<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>q</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>no<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>小狼<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>q</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>运行结果如下：</p>
<p><img src="/2022/10/28/%E5%89%8D%E7%AB%AF%E4%B8%89%E4%BB%B6%E5%A5%97%E4%B9%8BCSS%EF%BC%88%E4%BA%8C%EF%BC%89/5.png" alt></p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>前端三件套之HTML（一）</title>
    <url>/2022/10/26/%E5%89%8D%E7%AB%AF%E4%B8%89%E4%BB%B6%E5%A5%97%E4%B9%8BHTML%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="HTML简介"><a href="#HTML简介" class="headerlink" title="HTML简介"></a>HTML简介</h1><ul>
<li><p>HTML是指<strong>超文本标记语言</strong>，是用来描述网页的一种语言。可以使用HTML来建立Web站点，HTML运行在浏览器上，有浏览器来解析。</p>
</li>
<li><p>HTML不是一种编程语言，而是一种标记语言，它有一套标记标签。</p>
</li>
<li>HTML使用标记标签来描述网页。</li>
<li>HTML文档包含了HTML标签及文本内容，HTML文档也叫做web页面。</li>
<li>HTML文档的后缀名包含<code>.html</code>（常用）、<code>.htm</code>。</li>
</ul>
<h2 id="HTML网页结构"><a href="#HTML网页结构" class="headerlink" title="HTML网页结构"></a>HTML网页结构</h2><p>一个可视化HTML页面结构实例如下：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>这是页面标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>这是一个标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>这是一个段落<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上述语句的含义如下：</p>
<ul>
<li><p><code>&lt;!DOCTYPE html&gt;</code>声明为HTML5文档，<code>doctype</code>声明是<strong>不区分大小写</strong>的。</p>
</li>
<li><p><code>&lt;html&gt;</code>与<code>&lt;/html&gt;</code>之间的文本用来描述网页。</p>
</li>
<li><p><code>&lt;head&gt;</code>与<code>&lt;/head&gt;</code>之间的文本用来描述文档的元数据(meta)。可以包含脚本、样式、meta信息以及其他更多的信息。</p>
</li>
<li><code>&lt;meta&gt;</code>标签提供了HTML文档的元数据。元数据会被浏览器解析，但不会显示在客户端。对于中文网页需要使用<code>&lt;meta charset=&quot;utf-8&quot;&gt;</code>定义网页编码格式为<code>utf-8</code>，否则会出现乱码。</li>
<li><code>&lt;title&gt;</code>与<code>&lt;/title&gt;</code>之间的 文本<strong>描述文档的标题</strong>。(<code>&lt;head&gt;</code>中必须包含<code>&lt;title&gt;</code>)</li>
<li><code>&lt;body&gt;</code>与<code>&lt;/body&gt;</code>之间的文本是<strong>可见的页面内容。</strong></li>
<li><code>&lt;h1&gt;</code>与<code>&lt;/h1&gt;</code>之间的文本被显示为一个<strong>大标题</strong>。</li>
<li><code>&lt;p&gt;</code>与<code>&lt;/p&gt;</code>之间的文本被显示为一个<strong>段落。</strong></li>
</ul>
<p>代码运行结果如下：</p>
<p><img src="/2022/10/26/%E5%89%8D%E7%AB%AF%E4%B8%89%E4%BB%B6%E5%A5%97%E4%B9%8BHTML%EF%BC%88%E4%B8%80%EF%BC%89/1.png" alt></p>
<h2 id="HTML标签"><a href="#HTML标签" class="headerlink" title="HTML标签"></a>HTML标签</h2><p>HTML标记标签通常被称为HTML标签。</p>
<ul>
<li>HTML标签是由尖括号包围的关键词，如<code>&lt;html&gt;</code>。</li>
<li>HTML标签通常是成对出现的，如<code>&lt;b&gt;</code>和<code>&lt;/b&gt;</code></li>
<li>标签对中的第一个标签是开始标签，第二个标签是结束标签，开始和结束标签也被称为开放标签和闭合标签。</li>
<li>标签的具体格式为：<code>&lt;标签&gt;内容&lt;/标签&gt;</code>。</li>
</ul>
<h2 id="web浏览器"><a href="#web浏览器" class="headerlink" title="web浏览器"></a>web浏览器</h2><p>web浏览器用于读取HTML文件，并将其作为网页显示。</p>
<p>web不会直接显示HTML标签，而是通过使用标签来决定如何向用户展现HTML页面的内容。</p>
<h3 id="lt-DOCTYPE-gt-声明"><a href="#lt-DOCTYPE-gt-声明" class="headerlink" title="&lt;!DOCTYPE&gt;声明"></a><code>&lt;!DOCTYPE&gt;</code>声明</h3><p><code>&lt;!DOCTYPE&gt;</code>是标准通用标记语言的文档类型声明，有助于在浏览器中正确地显示网页。由于网络上文件的类型不一，因此需要正确的声明HTML版本，以便浏览器能够正确识别并显示网页内容。<code>doctype</code>声明不区分大小写。在html页面的头部声明字符为UTF-8可以解决浏览器中出现中文乱码的现象。</p>
<h1 id="HTML基础"><a href="#HTML基础" class="headerlink" title="HTML基础"></a>HTML基础</h1><h2 id="HTML标题"><a href="#HTML标题" class="headerlink" title="HTML标题"></a>HTML标题</h2><p>HTML标题是通过<code>&lt;h1&gt;-&lt;h6&gt;</code>标签来定义的。</p>
<p>h是英文header标题的缩写，有六个标题元素标签：<code>&lt;h1&gt;</code>、<code>&lt;h2&gt;</code>、<code>&lt;h3&gt;</code>、<code>&lt;h4&gt;</code>、<code>&lt;h5&gt;</code>、<code>&lt;h6&gt;</code>。每个元素代表文档中不同级别的内容：如<code>&lt;h1&gt;</code>代表主标题，<code>&lt;h2&gt;</code>代表二级子标题，<code>&lt;h3&gt;</code>代表三级子标题、<code>&lt;h4&gt;</code>、<code>&lt;h5&gt;</code>、<code>&lt;h6&gt;</code>的字体大小依次递减。</p>
<p><strong>注意：</strong></p>
<ul>
<li>应该只对每个页面使用一次<code>&lt;h1&gt;</code>主标题。所有其他标题位于层次结构中的下方。</li>
<li>确保在层次结构中以正确的顺序使用标题。如不要使用<code>&lt;h3&gt;</code>来表示副标题后，使用<code>&lt;h2&gt;</code>来表示副副标题。</li>
<li>在可用的六个标题级别中，保证每个页面中标题级别的使用不超过三个。具有许多标题类别的文档会变得难以操作并难以导航，在这种情况下，若可能的话把内容分散在多个页面上。</li>
<li>浏览器会自动地在标题的前后添加空行。默认情况下，HTML会自动在块级元素前后添加一个额外的空行，如段落、标题元素前后。</li>
<li>不要为了生成粗体或大号的文本而使用标题。</li>
</ul>
<h2 id="HTML中的空格"><a href="#HTML中的空格" class="headerlink" title="HTML中的空格"></a>HTML中的空格</h2><p>无论在HTML中使用多少空格（包括空格字符、换行等），当渲染代码时，HTML解释器会将连续出现的空格字符减少为一个单独的空格符。</p>
<p>在HTML中，每个嵌套的<strong>元素是以两个空格缩进的</strong>。</p>
<h2 id="HTML图像"><a href="#HTML图像" class="headerlink" title="HTML图像"></a>HTML图像</h2><p>HTML图像是通过标签<code>&lt;img&gt;</code>来定义的。<code>&lt;img&gt;</code>标签有两个必需的属性：<code>src</code>和<code>alt</code>。。<strong><code>img</code>元素是自关闭元素，不需要结束标记</strong>。</p>
<h3 id="图像标签（-lt-img-gt-）和源属性（src）"><a href="#图像标签（-lt-img-gt-）和源属性（src）" class="headerlink" title="图像标签（&lt;img&gt;）和源属性（src）"></a>图像标签（<code>&lt;img&gt;</code>）和源属性（src）</h3><p><code>&lt;img&gt;</code>是空标签，它只包含属性，没有闭合标签。</p>
<p>使用<code>img</code>元素来在网站中添加图片，使用<code>src</code>属性来指向一个图片的具体地址，图像的名称和尺寸以属性的形式提供。定义图像的语法是</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>存储图片的位置<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>some_text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>浏览器将图像显示在文档中图像标签出现的地方。如果将图像标签置于两个段落之间，浏览器会首先显示第一个段落，然后显示图片，最后显示第二段。</p>
<h3 id="alt属性"><a href="#alt属性" class="headerlink" title="alt属性"></a>alt属性</h3><p>alt属性用来为图像定义一串预备的可替换的文本。替换文本属性的值是用户定义的。在浏览器无法载入图像时，替换文本属性告诉读者所失去的信息。此时浏览器将显示替代性的文本而不是图像。</p>
<h3 id="设置图像的高度与宽度"><a href="#设置图像的高度与宽度" class="headerlink" title="设置图像的高度与宽度"></a>设置图像的高度与宽度</h3><p><code>height</code>（高度）与<code>width</code>（宽度）属性用于设置图像的高度与宽度。属性值默认单位为像素：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pulpit.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Pulpit rock<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>304<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>228<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="设置图像边框"><a href="#设置图像边框" class="headerlink" title="设置图像边框"></a>设置图像边框</h3><p>在<code>&lt;img&gt;</code>标签中使用<code>border</code>属性以像素为单位指定边框粗细。厚度为0时表示图片周围没有边框：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pulpit.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Pulpit rock<span class="token punctuation">"</span></span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="设置图像对齐"><a href="#设置图像对齐" class="headerlink" title="设置图像对齐"></a>设置图像对齐</h3><p>默认情况下，图像在页面中将显示为左侧对齐，在<code>&lt;img&gt;</code>标签中可以使用<code>align</code>属性设置图像的对齐方式：<code>center</code>（居中）或<code>right</code>（右侧）。</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pulpit.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Pulpit rock<span class="token punctuation">"</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="HTML强调"><a href="#HTML强调" class="headerlink" title="HTML强调"></a>HTML强调</h2><p>HTML中强调一句话的某些词可以使用<code>em</code>元素来标记，浏览器默认风格为斜体：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>我<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">></span></span>很高兴<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>除此之外，开可以使用<code>&lt;strong&gt;</code>元素来标记，浏览器默认风格为粗体：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>我<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span>很高兴<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="HTML注释"><a href="#HTML注释" class="headerlink" title="HTML注释"></a>HTML注释</h2><p>将注释插入HTML代码中，可以提高代码可读性。浏览器会忽略注释，也不会显示它们。其格式为：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--注释内容--></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="条件注释"><a href="#条件注释" class="headerlink" title="条件注释"></a>条件注释</h3><p>条件注释定义是由Internet Explorer浏览器执行的HTML标签。</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--[if IE 8]>
  ....some HTML here....
&lt;![endif]--></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="HTML段落"><a href="#HTML段落" class="headerlink" title="HTML段落"></a>HTML段落</h2><p>HTML段落是通过标签<code>&lt;p&gt;</code>来定义的，经常被用来创建一个段落。</p>
<h3 id="HTML换行"><a href="#HTML换行" class="headerlink" title="HTML换行"></a>HTML换行</h3><p>若希望在不产生新起点的情况下进行换行（新行），可以使用<code>&lt;br /&gt;</code>标签。</p>
<p>在HTML中，<code>&lt;br /&gt;</code>标签定义为一个换行符。可以简单的输入一个空行，而不是用来对内容进行拆分：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>这个<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>段落<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>演示了换行的效果<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在HTML中，由于屏幕的大小、对窗口的调整都可能导致不同的结果，因此无法确定HTML被显示的效果。当显示页面时，浏览器会移动源代码中多余的空间和空行。所有连续的空间或空行都会被算作一个空格。</p>
<h2 id="HTML水平线"><a href="#HTML水平线" class="headerlink" title="HTML水平线"></a>HTML水平线</h2><p><code>&lt;hr&gt;</code>标签在HTML页面中创建水平线。</p>
<p>hr元素用于分隔内容，使用该元素产生的水平线可以在视觉上将文档分隔成各个部分。</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>hr标签定义水平线：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token punctuation">/></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>这是段落<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="如何查看源代码"><a href="#如何查看源代码" class="headerlink" title="如何查看源代码"></a>如何查看源代码</h2><p>在浏览器中可以通过单击右键，然后选择<strong>“查看源文件”</strong>或<strong>“查看页面源代码”</strong>来打开一个包含页面HTML代码的窗口来查看源代码。</p>
<h1 id="HTML元素"><a href="#HTML元素" class="headerlink" title="HTML元素"></a>HTML元素</h1><p>HTML标签和HTML元素通常都是描述相同的意思。但严格来讲，一个HTML元素包含了开始标签和结束标签。</p>
<h2 id="HTML元素语法"><a href="#HTML元素语法" class="headerlink" title="HTML元素语法"></a>HTML元素语法</h2><ul>
<li>HTMl元素以<strong>开始标签</strong>起始，以<strong>结束标签</strong>终止。</li>
<li><strong>元素的内容</strong>是开始标签与结束标签之间的内容。</li>
<li>某些HTML元素具有<strong>空内容</strong>。</li>
<li>空元素在<strong>开始标签中进行关闭</strong>，以开始标签的结束而结束。</li>
<li>大多数HTML元素可拥有属性。</li>
</ul>
<h2 id="嵌套的HTML元素"><a href="#嵌套的HTML元素" class="headerlink" title="嵌套的HTML元素"></a>嵌套的HTML元素</h2><p>HTML文档由嵌套的HTML元素构成，即一个HTML元素里可以包含其他HTML元素。例如下面的代码中包含了三个HTML元素：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>这是第一个段落。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="HTML空元素"><a href="#HTML空元素" class="headerlink" title="HTML空元素"></a>HTML空元素</h2><p>HTML空元素即为没有内容的HTML元素。</p>
<p>HTML空元素应该在开始标签中关闭。</p>
<p>HTML的一个空元素为<code>&lt;br&gt;</code>（用于定义换行），<code>&lt;br&gt;</code>元素是没有关闭标签的空元素。</p>
<p>HTML空元素的关闭方法是在剋是标签中添加斜杠，例如<code>&lt;br/&gt;</code>，HTML、XHTML和XML都接受这种方式。</p>
<p>在XHTML和XML以及未来版本的HTML中，所有元素都必须被关闭，即使是空元素。</p>
<h2 id="使用小写标签"><a href="#使用小写标签" class="headerlink" title="使用小写标签"></a>使用小写标签</h2><p>HTML标签对英文字母的大小写不敏感：<code>&lt;P&gt;</code>等同于<code>&lt;p&gt;</code>。</p>
<p>随着HTML4甚至是HTML5的普及，后续的网站都遵循HTML4的语法—<strong>使用小写</strong>。</p>
<h1 id="HTML头部"><a href="#HTML头部" class="headerlink" title="HTML头部"></a>HTML头部</h1><p>HTML头部元素包含关于文档的概要信息，也被称为元信息。</p>
<h2 id="lt-head-gt-标签与-lt-header-gt-标签的不同"><a href="#lt-head-gt-标签与-lt-header-gt-标签的不同" class="headerlink" title="&lt;head&gt;标签与&lt;header&gt;标签的不同"></a><code>&lt;head&gt;</code>标签与<code>&lt;header&gt;</code>标签的不同</h2><ul>
<li><p>head标签用于定义文档头部，是所有头部元素的容器。<code>&lt;head&gt;</code>描述了文档的各种属性和信息</p>
</li>
<li><p>header标签定义文档的页眉（介绍信息）。</p>
</li>
</ul>
<h2 id="lt-head-gt-元素"><a href="#lt-head-gt-元素" class="headerlink" title="&lt;head&gt;元素"></a><code>&lt;head&gt;</code>元素</h2><p><code>&lt;head&gt;</code>元素包含了所有的头部标签元素。在<code>&lt;head&gt;</code>元素中可以插入脚本（scripts）、样式文件（CSS）以及各种meta信息。其描述了文档的各种属性和信息，其中包括文档的标题、在Web中的位置以及和其他文档的关系等。</p>
<p>可以<strong>添加在头部区域的元素标签</strong>为：<code>&lt;title&gt;</code>、<code>&lt;style&gt;</code>、<code>&lt;meta&gt;</code>、<code>&lt;link&gt;</code>、<code>&lt;script&gt;</code>、<code>&lt;noscript&gt;</code>和<code>&lt;base&gt;</code>。</p>
<h2 id="lt-title-gt-元素"><a href="#lt-title-gt-元素" class="headerlink" title="&lt;title&gt;元素"></a><code>&lt;title&gt;</code>元素</h2><p><code>&lt;title&gt;</code>标签定义了不同文档的标题，其在HTML/XHTML中是必须的。</p>
<p><code>&lt;title&gt;</code>元素</p>
<ul>
<li>定义了浏览器工具栏的标题</li>
<li>当网页添加到收藏夹时，显示在收藏夹中的标题</li>
<li>显示在搜索引擎结果页面的标题</li>
</ul>
<p><code>&lt;title&gt;</code>元素还可以在左侧显示logo等图片，显示时要将<code>&lt;link&gt;</code>标签放入<code>&lt;head&gt;</code>里：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">doctype</span> <span class="token name">HTML</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>shortcut icon<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>图片url<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>这是一个带图片的标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="lt-base-gt-元素"><a href="#lt-base-gt-元素" class="headerlink" title="&lt;base&gt;元素"></a><code>&lt;base&gt;</code>元素</h2><p><code>&lt;base&gt;</code>标签描述了基本的链接地址/链接目标，该标签作为HTML文档中所有的链接规定默认地址或默认目标(target)：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">doctype</span> <span class="token name">HTML</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>链接地址<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在HTML中，<code>&lt;base&gt;</code>标签没有结束标签，但在XHTML中，<code>&lt;base&gt;</code>标签必须被正确地关闭。</p>
<h2 id="lt-link-gt-元素"><a href="#lt-link-gt-元素" class="headerlink" title="&lt;link&gt;元素"></a><code>&lt;link&gt;</code>元素</h2><p><code>&lt;link&gt;</code>标签定义了文档与外部资源之间的关系，通常用于链接到样式表：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">doctype</span> <span class="token name">HTML</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tips.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="lt-style-gt-元素"><a href="#lt-style-gt-元素" class="headerlink" title="&lt;style&gt;元素"></a><code>&lt;style&gt;</code>元素</h2><p><code>&lt;style&gt;</code>标签定义了HTML文档的样式文件引用地址。在<code>&lt;style&gt;</code>元素中需要指定特定样式文件来渲染HTML文档：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
<span class="token selector">body</span><span class="token punctuation">&#123;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span>yellow<span class="token punctuation">;</span>        
<span class="token punctuation">&#125;</span>
<span class="token selector">p</span><span class="token punctuation">&#123;</span>
    <span class="token property">color</span><span class="token punctuation">:</span>blue<span class="token punctuation">;</span>        
<span class="token punctuation">&#125;</span>    
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="lt-meta-gt-元素"><a href="#lt-meta-gt-元素" class="headerlink" title="&lt;meta&gt;元素"></a><code>&lt;meta&gt;</code>元素</h2><p><code>&lt;meta&gt;</code>元素又称为元数据，其是关于数据的信息。<code>&lt;meta&gt;</code>标签始终位于head元素中。</p>
<p><code>&lt;meta&gt;</code>标签提供关于HTML文档的元数据。元数据不会显示在页面上，但对于机器是可读的。meta元素被用于规定页面的描述、关键词、文档的作者、最后修改时间以及其他元数据。元数据可用于浏览器（如何显示内容或重新加载页面），搜索引擎（关键词）或其他Web服务。</p>
<h2 id="针对搜索引擎的关键词"><a href="#针对搜索引擎的关键词" class="headerlink" title="针对搜索引擎的关键词"></a>针对搜索引擎的关键词</h2><p>一些搜索引擎会用meta元素中用来描述页面内容的name和content属性来索引页面：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
<span class="token comment">&lt;!--meta元素定义页面的描述--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Free web tutorials on HTML,CSS,XML<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
<span class="token comment">&lt;!--meta元素定义页面的关键词--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>keywords<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>HTML,CSS,XML<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="lt-script-gt-元素"><a href="#lt-script-gt-元素" class="headerlink" title="&lt;script&gt;元素"></a><code>&lt;script&gt;</code>元素</h2><p><code>&lt;script&gt;</code>标签用于加载脚本文件</p>
<h1 id="HTML属性"><a href="#HTML属性" class="headerlink" title="HTML属性"></a>HTML属性</h1><p>属性是为HTML元素提供的附加信息。</p>
<ul>
<li>HTML元素可以设置<strong>属性</strong></li>
<li>属性可以在元素中<strong>添加信息</strong></li>
<li>属性一般描述于<strong>开始标签</strong></li>
<li>属性总是以名称/值对的形式出现，如<code>name=&quot;value&quot;</code>。</li>
</ul>
<h2 id="属性实例"><a href="#属性实例" class="headerlink" title="属性实例"></a>属性实例</h2><p>HTML链接由<code>&lt;a&gt;</code>标签定义。链接的地址在href属性中指定：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>链接的地址<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>这是一个链接使用了href属性<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="HTML属性常用引用属性值"><a href="#HTML属性常用引用属性值" class="headerlink" title="HTML属性常用引用属性值"></a>HTML属性常用引用属性值</h2><p>属性值应该始终被包含在引号内，最常用的是双引号。在某些个别情况下，比方说属性值本身就含有双引号时，必须使用单引号。例如：<code>name=&#39;John&quot;ShotGun&quot;Nelson&#39;</code>。</p>
<h2 id="使用小写属性"><a href="#使用小写属性" class="headerlink" title="使用小写属性"></a>使用小写属性</h2><p>属性和属性值对大小写不敏感。</p>
<p>但万维网联盟在其HTML4中推荐标准小写的属性/属性值。新版本的(X)HTML也要求使用小写属性。</p>
<h2 id="HTML属性参考手册"><a href="#HTML属性参考手册" class="headerlink" title="HTML属性参考手册"></a>HTML属性参考手册</h2><p>下面列出了适用于大多数 HTML 元素的属性：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">属性</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">class</td>
<td style="text-align:center">为html元素定义一个或多个类名（classname）(类名从样式文件引入)</td>
</tr>
<tr>
<td style="text-align:center">id</td>
<td style="text-align:center">定义元素的唯一id</td>
</tr>
<tr>
<td style="text-align:center">style</td>
<td style="text-align:center">规定元素的行内样式（inline style）</td>
</tr>
<tr>
<td style="text-align:center">title</td>
<td style="text-align:center">描述了元素的额外信息 (作为工具条使用)</td>
</tr>
</tbody>
</table>
</div>
<h1 id="id属性"><a href="#id属性" class="headerlink" title="id属性"></a>id属性</h1><p>id属性可用于为HTML元素指定唯一的id，一个HTML文档中不能存在多个有相同id的元素。</p>
<h2 id="使用id属性"><a href="#使用id属性" class="headerlink" title="使用id属性"></a>使用id属性</h2><p>id属性的值在HTML文档中必须是唯一的。其用于指向样式表中的特定样式声明，JavaS也可使用它来访问和操作拥有特定ID的元素。</p>
<p>id的语法是一个井号后面跟一个id名称，然后在花括号{}中定义CSS属性。如：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
<span class="token selector">#tips</span><span class="token punctuation">&#123;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span>lightblue<span class="token punctuation">;</span>
    <span class="token property">color</span><span class="token punctuation">:</span>black<span class="token punctuation">;</span>
    <span class="token property">padding</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>
    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
<span class="token comment">&lt;!--在HTML文档中插入ID--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tips<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Useful Tips Section<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>注意：</strong></p>
<ul>
<li>id名称对<strong>大小写敏感</strong></li>
<li>id必须包含至少一个字符，且不能包含空白字符（空格、制表符等）</li>
</ul>
<h2 id="Class与ID的差异"><a href="#Class与ID的差异" class="headerlink" title="Class与ID的差异"></a>Class与ID的差异</h2><p>同一个类名可以由多个HTML元素使用，而一个id名称只能由页面中的一个HTML元素使用。</p>
<h2 id="通过ID和链接实现HTML书签"><a href="#通过ID和链接实现HTML书签" class="headerlink" title="通过ID和链接实现HTML书签"></a>通过ID和链接实现HTML书签</h2><p>HTML书签用于让读者跳转到网页的特定部分：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token comment">&lt;!--创建一个来链接跳转到(id="tips")的部分--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#tips<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Visit the Useful Tips Section<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>
    <span class="token comment">&lt;!--从另一个页面创建一个链接到(id="tips")的部分--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>链接地址#tips<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Visit the Useful Tips Section<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="在JavaScript中使用id属性"><a href="#在JavaScript中使用id属性" class="headerlink" title="在JavaScript中使用id属性"></a>在JavaScript中使用id属性</h2><p>JavaScript也可以使用id属性为特定元素执行某些任务，可以使用<code>getElementById()</code>方法访问拥有特定id的元素：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">function</span> <span class="token function">displayResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"tips"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token operator">=</span><span class="token string">"Have a nice day!"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>    
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="HTML链接"><a href="#HTML链接" class="headerlink" title="HTML链接"></a>HTML链接</h1><p>HTML链接是通过标签<code>&lt;a&gt;</code>来定义的。其具体格式如下：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>链接的地址<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>这是一个链接<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>超链接可以是一个字，一个词，或者一组词，也可以是一幅图像，可以点击这些内容来跳转到新的文档或当前文档中的某个部分。</p>
<p>默认情况下，链接在浏览器中表现为以下形式：</p>
<ul>
<li>一个未访问过的链接显示为蓝色字体并带有下划线</li>
<li>访问过的链接显示为紫色并带上下划线</li>
<li>点击链接时，链接显示为红色并带上下划线</li>
</ul>
<p>若为这些超链接设置了CSS样式，展示样式会根据CSS的设定来显示。</p>
<h2 id="HTML空链接"><a href="#HTML空链接" class="headerlink" title="HTML空链接"></a>HTML空链接</h2><p>空链接即指当鼠标指向链接后，会变成手性，但单机后仍停留在当前页面。</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>这是一个空链接<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="target属性"><a href="#target属性" class="headerlink" title="target属性"></a>target属性</h2><p>使用Target属性，可以定义被链接的文档在何处显示（在新窗口打开，还是在原有的窗口中打开）。</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>链接地址<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>这是一个链接<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
    <span class="token comment">&lt;!--默认在原窗口打开，若将target属性设置为"_blank"，链接将在新窗口打开--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>注意：</strong>始终将正斜杠添加到子文件夹，如<code>href=&quot;//www.baidu.com/html/&quot;</code>。若写成<code>href=&quot;//www.baidu.com/html&quot;</code>，就会向服务器产生两次HTTP请求。</p>
<h1 id="HTML文本格式化"><a href="#HTML文本格式化" class="headerlink" title="HTML文本格式化"></a>HTML文本格式化</h1><h2 id="HTML格式化标签"><a href="#HTML格式化标签" class="headerlink" title="HTML格式化标签"></a>HTML格式化标签</h2><p>HTML使用标签<code>&lt;b&gt;</code>与<code>&lt;i&gt;</code>对输出的文本进行<strong>粗体</strong>或<em>斜体</em>的格式化，这些标签被称为格式化标签。</p>
<p>通常<code>&lt;strong&gt;</code>替换加粗标签<code>&lt;b&gt;</code>来使用，<code>&lt;em&gt;</code>替换<code>&lt;i&gt;</code>标签使用。</p>
<h2 id="HTML-文本格式化标签"><a href="#HTML-文本格式化标签" class="headerlink" title="HTML 文本格式化标签"></a>HTML 文本格式化标签</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">标签</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>&lt;b&gt;</code></td>
<td style="text-align:center">定义粗体文本</td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;em&gt;</code></td>
<td style="text-align:center">定义着重文字</td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;i&gt;</code></td>
<td style="text-align:center">定义斜体字</td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;small&gt;</code></td>
<td style="text-align:center">定义小号字</td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;strong&gt;</code></td>
<td style="text-align:center">定义加重语气</td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;sub&gt;</code></td>
<td style="text-align:center">定义下标字</td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;sup&gt;</code></td>
<td style="text-align:center">定义上标字</td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;ins&gt;</code></td>
<td style="text-align:center">定义插入字</td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;del&gt;</code></td>
<td style="text-align:center">定义删除字</td>
</tr>
</tbody>
</table>
</div>
<h2 id="HTML-“计算机输出”-标签"><a href="#HTML-“计算机输出”-标签" class="headerlink" title="HTML “计算机输出” 标签"></a>HTML “计算机输出” 标签</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">标签</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>&lt;code&gt;</code></td>
<td style="text-align:center">定义计算机代码</td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;kbd&gt;</code></td>
<td style="text-align:center">定义键盘码</td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;samp&gt;</code></td>
<td style="text-align:center">定义计算机代码样本</td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;var&gt;</code></td>
<td style="text-align:center">定义变量</td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;pre&gt;</code></td>
<td style="text-align:center">定义预格式文本</td>
</tr>
</tbody>
</table>
</div>
<h2 id="HTML-引文-引用-及标签定义"><a href="#HTML-引文-引用-及标签定义" class="headerlink" title="HTML 引文, 引用, 及标签定义"></a>HTML 引文, 引用, 及标签定义</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">标签</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>&lt;abbr&gt;</code></td>
<td style="text-align:center">定义缩写</td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;address&gt;</code></td>
<td style="text-align:center">定义地址</td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;bdo&gt;</code></td>
<td style="text-align:center">定义文字方向</td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;blockquote&gt;</code></td>
<td style="text-align:center">定义长的引用</td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;q&gt;</code></td>
<td style="text-align:center">定义短的引用语</td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;cite&gt;</code></td>
<td style="text-align:center">定义引用、引证</td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;dfn&gt;</code></td>
<td style="text-align:center">定义一个定义项目。</td>
</tr>
</tbody>
</table>
</div>
<h1 id="HTML-CSS"><a href="#HTML-CSS" class="headerlink" title="HTML CSS"></a>HTML CSS</h1><p>CSS定义如何显示HTML元素，用于渲染HTML元素标签的样式，用于控制Web页面的外观。样式存储在样式表中，通常放在<code>&lt;head&gt;</code>部分或存储在外部CSS文件中。目前的网页大都由前端三件套HTML+CSS+Javascript组成。其中，HTML是网页的结构，CSS是网页的样式，Javascript控制网页的行为。</p>
<h2 id="CSS添加到HTML的方式"><a href="#CSS添加到HTML的方式" class="headerlink" title="CSS添加到HTML的方式"></a>CSS添加到HTML的方式</h2><ul>
<li>内联样式：在HTML元素中使用“style”属性</li>
<li>内部样式表：在HTML文档头部<code>&lt;head&gt;</code>区域使用<code>&lt;style&gt;</code>元素来包含CSS</li>
<li>外部引用：使用外部CSS文件</li>
</ul>
<h2 id="内联样式"><a href="#内联样式" class="headerlink" title="内联样式"></a>内联样式</h2><p>当特殊的样式需要应用到个别元素时，可以使用内联样式。使用内联样式的方法是在相关的标签中使用样式属性。样式属性可以包含任何CSS属性：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span>blue<span class="token punctuation">;</span><span class="token property">margin-left</span><span class="token punctuation">:</span>20px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>Tips<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="CSS样式标签"><a href="#CSS样式标签" class="headerlink" title="CSS样式标签"></a>CSS样式标签</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">标签</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">background</td>
<td style="text-align:center">定义元素的背景颜色</td>
</tr>
<tr>
<td style="text-align:center">font-family</td>
<td style="text-align:center">定义字体的样式</td>
</tr>
<tr>
<td style="text-align:center">color</td>
<td style="text-align:center">定义元素的颜色</td>
</tr>
<tr>
<td style="text-align:center">font-size</td>
<td style="text-align:center">定义字体的大小</td>
</tr>
<tr>
<td style="text-align:center">text-align</td>
<td style="text-align:center">指定文本的水平与垂直对齐方式</td>
</tr>
</tbody>
</table>
</div>
<h2 id="内部样式表"><a href="#内部样式表" class="headerlink" title="内部样式表"></a>内部样式表</h2><p>当单个文件需要特别样式时，可以使用内部样式表。在HTML文档头部<code>&lt;head&gt;</code>区域使用<code>&lt;style&gt;</code>元素来定义内部样式表</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
<span class="token selector">body</span><span class="token punctuation">&#123;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">p</span><span class="token punctuation">&#123;</span>
    <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Tips<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="外部样式表"><a href="#外部样式表" class="headerlink" title="外部样式表"></a>外部样式表</h2><p>当样式需要被应用到很多页面时，可以使用外部样式表。通过只更改一个文件来改变整个站点的外观：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">doctype</span> <span class="token name">HTML</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tip.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token comment">&lt;!--导入外部样式表的另一种方式--></span>    
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
    @import <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">"样式表路径"</span><span class="token punctuation">)</span></span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="link和-import之间的区别"><a href="#link和-import之间的区别" class="headerlink" title="link和@import之间的区别"></a>link和<code>@import</code>之间的区别</h2><ul>
<li>link属于XHTML标签，而@import是CSS提供的一种方式</li>
<li>当一个页面被加载时，link引用的CSS会同时被加载。而@import引用的CSS会等到页面全部下载完才被加载</li>
<li>@import是CSS2.1提出的，与老版本的浏览器不兼容，只能在IE5以上的浏览器被识别，link在任何地方都兼容</li>
<li>当使用Javascript控制dom去改变样式时，只能使用link标签</li>
</ul>
<h2 id="已弃用的标签和属性"><a href="#已弃用的标签和属性" class="headerlink" title="已弃用的标签和属性"></a>已弃用的标签和属性</h2><p>在HTML4中，原来支持定义HTML元素样式的标签和属性已被弃用。</p>
<p>不建议使用的标签有：<code>&lt;font&gt;</code>、<code>&lt;center&gt;</code>、<code>&lt;strike&gt;</code>。</p>
<p>不建议使用的属性有：<code>color</code>和<code>bgcolor</code>。</p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>前端三件套之HTML（二）</title>
    <url>/2022/10/27/%E5%89%8D%E7%AB%AF%E4%B8%89%E4%BB%B6%E5%A5%97%E4%B9%8BHTML%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h1 id="HTML符号"><a href="#HTML符号" class="headerlink" title="HTML符号"></a>HTML符号</h1><h2 id="HTML符号实体"><a href="#HTML符号实体" class="headerlink" title="HTML符号实体"></a>HTML符号实体</h2><p>若想将数学符号、希腊符号等符号添加到HTML页面，可以使用HTML实体名称。若不存在实体名称，可使用实体编号、十进制或十六进制进行引用。</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>我将显示 &amp;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>我将显示 <span class="token entity" title="&#8364;">&amp;#8364;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>我将显示 <span class="token entity" title="&#x20AC;">&amp;#x20AC;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>运行结果如下：</p>
<p>我将显示 &</p>
<hr>
<p>我将显示 &#8364;</p>
<hr>
<p>我将显示 &#x20AC;</p>

<h2 id="HTML-支持的一些数学符号"><a href="#HTML-支持的一些数学符号" class="headerlink" title="HTML 支持的一些数学符号"></a>HTML 支持的一些数学符号</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">字符</th>
<th style="text-align:left">数字</th>
<th style="text-align:left">实体</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">∀</td>
<td style="text-align:left"><code>&amp;#8704;</code></td>
<td style="text-align:left"><code>&amp;forall;</code></td>
<td style="text-align:left">FOR ALL</td>
</tr>
<tr>
<td style="text-align:left">∂</td>
<td style="text-align:left"><code>&amp;#8706;</code></td>
<td style="text-align:left"><code>&amp;part;</code></td>
<td style="text-align:left">PARTIAL DIFFERENTIAL</td>
</tr>
<tr>
<td style="text-align:left">∃</td>
<td style="text-align:left"><code>&amp;#8707;</code></td>
<td style="text-align:left"><code>&amp;exist;</code></td>
<td style="text-align:left">THERE EXISTS</td>
</tr>
<tr>
<td style="text-align:left">∅</td>
<td style="text-align:left"><code>&amp;#8709;</code></td>
<td style="text-align:left"><code>&amp;empty;</code></td>
<td style="text-align:left">EMPTY SETS</td>
</tr>
<tr>
<td style="text-align:left">∇</td>
<td style="text-align:left"><code>&amp;#8711;</code></td>
<td style="text-align:left"><code>&amp;nabla;</code></td>
<td style="text-align:left">NABLA</td>
</tr>
<tr>
<td style="text-align:left">∈</td>
<td style="text-align:left"><code>&amp;#8712;</code></td>
<td style="text-align:left"><code>&amp;isin;</code></td>
<td style="text-align:left">ELEMENT OF</td>
</tr>
<tr>
<td style="text-align:left">∉</td>
<td style="text-align:left"><code>&amp;#8713;</code></td>
<td style="text-align:left"><code>&amp;notin;</code></td>
<td style="text-align:left">NOT AN ELEMENT OF</td>
</tr>
<tr>
<td style="text-align:left">∋</td>
<td style="text-align:left"><code>&amp;#8715;</code></td>
<td style="text-align:left"><code>&amp;ni;</code></td>
<td style="text-align:left">CONTAINS AS MEMBER</td>
</tr>
<tr>
<td style="text-align:left">∏</td>
<td style="text-align:left"><code>&amp;#8719;</code></td>
<td style="text-align:left"><code>&amp;prod;</code></td>
<td style="text-align:left">N-ARY PRODUCT</td>
</tr>
<tr>
<td style="text-align:left">∑</td>
<td style="text-align:left"><code>&amp;#8721;</code></td>
<td style="text-align:left"><code>&amp;sum;</code></td>
<td style="text-align:left">N-ARY SUMMATION</td>
</tr>
</tbody>
</table>
</div>
<h2 id="HTML-支持的一些希腊字母"><a href="#HTML-支持的一些希腊字母" class="headerlink" title="HTML 支持的一些希腊字母"></a>HTML 支持的一些希腊字母</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">字符</th>
<th style="text-align:left">数字</th>
<th style="text-align:left">实体</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Α</td>
<td style="text-align:left"><code>&amp;#913;</code></td>
<td style="text-align:left"><code>&amp;Alpha;</code></td>
<td style="text-align:left">GREEK CAPITAL LETTER ALPHA</td>
</tr>
<tr>
<td style="text-align:left">Β</td>
<td style="text-align:left"><code>&amp;#914;</code></td>
<td style="text-align:left"><code>&amp;Beta;</code></td>
<td style="text-align:left">GREEK CAPITAL LETTER BETA</td>
</tr>
<tr>
<td style="text-align:left">Γ</td>
<td style="text-align:left"><code>&amp;#915;</code></td>
<td style="text-align:left"><code>&amp;Gamma;</code></td>
<td style="text-align:left">GREEK CAPITAL LETTER GAMMA</td>
</tr>
<tr>
<td style="text-align:left">Δ</td>
<td style="text-align:left"><code>&amp;#916;</code></td>
<td style="text-align:left"><code>&amp;Delta;</code></td>
<td style="text-align:left">GREEK CAPITAL LETTER DELTA</td>
</tr>
<tr>
<td style="text-align:left">Ε</td>
<td style="text-align:left"><code>&amp;#917;</code></td>
<td style="text-align:left"><code>&amp;Epsilon;</code></td>
<td style="text-align:left">GREEK CAPITAL LETTER EPSILON</td>
</tr>
<tr>
<td style="text-align:left">Ζ</td>
<td style="text-align:left"><code>&amp;#918;</code></td>
<td style="text-align:left"><code>&amp;Zeta;</code></td>
<td style="text-align:left">GREEK CAPITAL LETTER ZETA</td>
</tr>
</tbody>
</table>
</div>
<h2 id="HTML-支持的一些其他实体。"><a href="#HTML-支持的一些其他实体。" class="headerlink" title="HTML 支持的一些其他实体。"></a>HTML 支持的一些其他实体。</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">字符</th>
<th style="text-align:left">数字</th>
<th style="text-align:left">实体</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">©</td>
<td style="text-align:left"><code>&amp;#169;</code></td>
<td style="text-align:left"><code>&amp;copy;</code></td>
<td style="text-align:left">COPYRIGHT SIGN</td>
</tr>
<tr>
<td style="text-align:left">®</td>
<td style="text-align:left"><code>&amp;#174;</code></td>
<td style="text-align:left"><code>&amp;reg;</code></td>
<td style="text-align:left">REGISTERED SIGN</td>
</tr>
<tr>
<td style="text-align:left">€</td>
<td style="text-align:left"><code>&amp;#8364;</code></td>
<td style="text-align:left"><code>&amp;euro;</code></td>
<td style="text-align:left">EURO SIGN</td>
</tr>
<tr>
<td style="text-align:left">™</td>
<td style="text-align:left"><code>&amp;#8482;</code></td>
<td style="text-align:left"><code>&amp;trade;</code></td>
<td style="text-align:left">TRADEMARK</td>
</tr>
<tr>
<td style="text-align:left">←</td>
<td style="text-align:left"><code>&amp;#8592;</code></td>
<td style="text-align:left"><code>&amp;larr;</code></td>
<td style="text-align:left">LEFTWARDS ARROW</td>
</tr>
<tr>
<td style="text-align:left">↑</td>
<td style="text-align:left"><code>&amp;#8593;</code></td>
<td style="text-align:left"><code>&amp;uarr;</code></td>
<td style="text-align:left">UPWARDS ARROW</td>
</tr>
<tr>
<td style="text-align:left">→</td>
<td style="text-align:left"><code>&amp;#8594;</code></td>
<td style="text-align:left"><code>&amp;rarr;</code></td>
<td style="text-align:left">RIGHTWARDS ARROW</td>
</tr>
<tr>
<td style="text-align:left">↓</td>
<td style="text-align:left"><code>&amp;#8595;</code></td>
<td style="text-align:left"><code>&amp;darr;</code></td>
<td style="text-align:left">DOWNWARDS ARROW</td>
</tr>
<tr>
<td style="text-align:left">♠</td>
<td style="text-align:left"><code>&amp;#9824;</code></td>
<td style="text-align:left"><code>&amp;spades;</code></td>
<td style="text-align:left">BLACK SPADE SUIT</td>
</tr>
<tr>
<td style="text-align:left">♣</td>
<td style="text-align:left"><code>&amp;#9827;</code></td>
<td style="text-align:left"><code>&amp;clubs;</code></td>
<td style="text-align:left">BLACK CLUB SUIT</td>
</tr>
<tr>
<td style="text-align:left">♥</td>
<td style="text-align:left"><code>&amp;#9829;</code></td>
<td style="text-align:left"><code>&amp;hearts;</code></td>
<td style="text-align:left">BLACK HEART SUIT</td>
</tr>
<tr>
<td style="text-align:left">♦</td>
<td style="text-align:left"><code>&amp;#9830;</code></td>
<td style="text-align:left"><code>&amp;diams;</code></td>
<td style="text-align:left">BLACK DIAMOND SUIT</td>
</tr>
</tbody>
</table>
</div>
<h1 id="HTML表格"><a href="#HTML表格" class="headerlink" title="HTML表格"></a>HTML表格</h1><p>表格由<code>&lt;table&gt;</code>标签来定义。每个表格均有由<code>&lt;tr&gt;</code>标签定义的若干行，每行被分隔为由<code>&lt;td&gt;</code>标签定义的若干单元格。字母td指表格数据，即数据单元格的内容。数据单元格可以包含文本、图片、列表、段落、表单、水平线、表格等。</p>
<h2 id="HTML表格的基本结构"><a href="#HTML表格的基本结构" class="headerlink" title="HTML表格的基本结构"></a>HTML表格的基本结构</h2><p><code>&lt;table&gt;..&lt;/table&gt;</code>：定义表格</p>
<p><code>&lt;th&gt;..&lt;/th&gt;</code>：定义表格的标题栏（文字加粗）</p>
<p><code>&lt;tr&gt;..&lt;/tr&gt;</code>：定义表格的行</p>
<p><code>&lt;td&gt;..&lt;/td&gt;</code>：定义表格的列</p>
<p><strong>边框属性：</strong></p>
<p>若不定义边框属性，表格将不显示边框。若要显示边框，可使用<code>border</code>来显示。</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>row1,cell1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>row1,cell2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>row2,cell1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>	
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>row2,cell2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>运行结果如下：</p>
<table border="1">
<tr>
    <td>row1,cell1</td>
    <td>row1,cell2</td>
</tr>
<tr>
    <td>row2,cell1</td>    
    <td>row2,cell2</td>
</tr>
</table>

<h2 id="表头单元格"><a href="#表头单元格" class="headerlink" title="表头单元格"></a>表头单元格</h2><p>表格的表头单元格使用<code>&lt;th&gt;</code>标签定义。</p>
<p>表格的表头单元格属性有：<code>align</code>、<code>dir</code>、<code>width</code>、<code>height</code>。</p>
<p>大多数浏览器会把表头显示为粗体居中的文本：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>Header 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>	    
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>Header 2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>row1,cell1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>row1,cell2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>row2,cell1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>	
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>row2,cell2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>运行结果如下：</p>
<table border="1">
<tr>
    <th>Header 1</th>        
    <th>Header 2</th>
</tr>
<tr>
    <td>row1,cell1</td>
    <td>row1,cell2</td>
</tr>
<tr>
    <td>row2,cell1</td>    
    <td>row2,cell2</td>
</tr>
</table>

<h2 id="表格标题"><a href="#表格标题" class="headerlink" title="表格标题"></a>表格标题</h2><p>在<code>&lt;table&gt;</code>标签中可以使用<code>&lt;caption&gt;...&lt;/caption&gt;</code>标签作为标题，并在表的顶部显示出来。<strong>但此标签在较新版本的HTML/XHTML中已经弃用</strong>。</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>caption</span><span class="token punctuation">></span></span>这是标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>caption</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>row1,cell1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>row1,cell2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>row2,cell1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>	
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>row2,cell2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>运行结果如下：</p>
<table border="1">
<caption>这是标题</caption>
<tr>
    <td>row1,cell1</td>
    <td>row1,cell2</td>
</tr>
<tr>
    <td>row2,cell1</td>    
    <td>row2,cell2</td>
</tr>
</table>

<h2 id="表格高度和宽度"><a href="#表格高度和宽度" class="headerlink" title="表格高度和宽度"></a>表格高度和宽度</h2><p>在<code>&lt;table&gt;</code>标签中可以使用<code>width</code>（宽）和<code>height</code>（高）属性类设置表格宽度和高度，可以按像素或可用屏幕区域的百分比来指定表格宽度或高度：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>400<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>150<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>row1,cell1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>row1,cell2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>row2,cell1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>	
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>row2,cell2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>运行结果如下：    </p>
<table border="1" width="400" height="150">
    <tr>
        <td>row1,cell1</td>
        <td>row1,cell2</td>
    </tr>
    <tr>
        <td>row2,cell1</td>    
        <td>row2,cell2</td>
    </tr>
    </table>

<h2 id="表格背景"><a href="#表格背景" class="headerlink" title="表格背景"></a>表格背景</h2><p>设置HTML表格的背景有以下几种方法：</p>
<ul>
<li><code>bgcolor</code>属性：为整个表格或仅为一个单元格设置背景颜色</li>
<li><code>background</code>属性：为整个表设置背景图像或仅为一个单元设置背景图像，需要提供图像的URL地址。</li>
<li><code>bordercolor</code>属性：设置边框颜色</li>
</ul>
<p>但在HTML5中不推荐使用<code>bgcolor</code>、<code>background</code>和<code>bordercolor</code>，部分属性不会生效。</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">bordercolor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>green<span class="token punctuation">"</span></span> <span class="token attr-name">bgcolor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>yellow<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token comment">&lt;!--&lt;table border="1" bordercolor="green" background="图像地址">--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>row1,cell1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>row1,cell2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>row2,cell1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>	
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>row2,cell2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>运行结果如下：    </p>
<table border="1" bordercolor="green" bgcolor="yellow">
    <!--<table border="1" bordercolor="green" background="图像地址">-->
    <tr>
        <td>row1,cell1</td>
        <td>row1,cell2</td>
    </tr>
    <tr>
        <td>row2,cell1</td>    
        <td>row2,cell2</td>
    </tr>
    </table>

<h2 id="表格空间"><a href="#表格空间" class="headerlink" title="表格空间"></a>表格空间</h2><p>以下两个属性可用于调整HTML表格中单元格的空间：</p>
<ul>
<li><code>cellspacing</code>属性：定义表格单元格之间的空间</li>
<li><code>cellpadding</code>属性：表示单元格边框与单元格内容之间的距离</li>
</ul>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">cellpadding</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span> <span class="token attr-name">cellspacing</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>row1,cell1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>row1,cell2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>row2,cell1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>	
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>row2,cell2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="合并单元格"><a href="#合并单元格" class="headerlink" title="合并单元格"></a>合并单元格</h2><ul>
<li>若要合并两列或更多列，可使用<code>colspan</code>属性。</li>
<li>若要合并两行或更多行，可使用<code>rowspan</code>属性。</li>
</ul>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>coulumn 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>coulumn 2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>coulumn 3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">rowspan</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>row1,cell1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>	
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>row1,cell2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>row1,cell3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>row2,cell2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>	
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>row2,cell3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>row3 cell1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>运行结果如下：</p>
<table border="1">
<tr>
    <th>coulumn 1</th>
    <th>coulumn 2</th>
    <th>coulumn 3</th>
</tr>
<tr>
    <td rowspan="2">row1,cell1</td>    
    <td>row1,cell2</td>
    <td>row1,cell3</td>
</tr>
<tr>
    <td>row2,cell2</td>    
    <td>row2,cell3</td>
</tr>
<tr>
    <td colspan="3">row3 cell1</td>
</tr>
</table>

<h2 id="表格头部、主体、页脚"><a href="#表格头部、主体、页脚" class="headerlink" title="表格头部、主体、页脚"></a>表格头部、主体、页脚</h2><p>表格可氛围三个部分：头部、主体和页脚。其对应的标签是：</p>
<p><code>&lt;thead&gt;</code>：创建单独的表头</p>
<p><code>&lt;tbody&gt;</code>：表示表格的主体</p>
<p><code>&lt;tfoot&gt;</code>：创建一个单独的表页脚</p>
<p>表可以包含多个<code>&lt;tbody&gt;</code>元素以指示不同的页面，<code>&lt;thread&gt;</code>和<code>&lt;tfoot&gt;</code>标签应出现在<code>&lt;tbody&gt;</code>之前。</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>thread</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>This is the head of the table<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>thread</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tfoot</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>This is the foot of the table<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>	
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tfoot</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbody</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>cell1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>	
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>cell2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>	
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>cell3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>cell4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>	
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tbody</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>运行结果如下：</p>
<table border="1" width="100%">
<thread>
    <tr>
        <td colspan="4">This is the head of the table</td>
    </tr>
</thread>
<tfoot>
    <tr>
        <td colspan="4">This is the foot of the table</td>    
    </tr>
</tfoot>
<tbody>
    <tr>
        <td>cell1</td>    
        <td>cell2</td>    
        <td>cell3</td>
        <td>cell4</td>    
    </tr>
</tbody>
</table>

<h2 id="表格的嵌套"><a href="#表格的嵌套" class="headerlink" title="表格的嵌套"></a>表格的嵌套</h2><p>在一个表中是使用另一个表：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>Name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>Salary<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>张三<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>	
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>5000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>李四<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>7000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>	
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>	
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>	
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>运行结果如下：</p>
<table border="1" width="100%">
<tr>
    <td>
    <table border="1" width="100%">
    <tr>
        <th>Name</th>
        <th>Salary</th>
    </tr>
    <tr>
        <td>张三</td>    
        <td>5000</td>
    </tr>
    <tr>
        <td>李四</td>
        <td>7000</td>    
    </tr>
    </table>    
    </td>    
</tr>
</table>

<h2 id="HTML表格标签总览"><a href="#HTML表格标签总览" class="headerlink" title="HTML表格标签总览"></a>HTML表格标签总览</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">标签</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>&lt;table&gt;</code></td>
<td style="text-align:center">定义表格</td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;th&gt;</code></td>
<td style="text-align:center">定义表格的表头</td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;tr&gt;</code></td>
<td style="text-align:center">定义表格的行</td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;td&gt;</code></td>
<td style="text-align:center">定义表格单元</td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;caption&gt;</code></td>
<td style="text-align:center">定义表格标题</td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;colgroup&gt;</code></td>
<td style="text-align:center">定义表格列的组</td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;col&gt;</code></td>
<td style="text-align:center">定义用于表格列的属性</td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;thead&gt;</code></td>
<td style="text-align:center">定义表格的页眉</td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;tbody&gt;</code></td>
<td style="text-align:center">定义表格的主体</td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;tfoot&gt;</code></td>
<td style="text-align:center">定义表格的页脚</td>
</tr>
</tbody>
</table>
</div>
<h1 id="HTML列表"><a href="#HTML列表" class="headerlink" title="HTML列表"></a>HTML列表</h1><p>HTML支持有序列表、无序列表和自定义列表。</p>
<h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><p>无序列表是一个项目的列表，此列项目使用粗体原点进行标记。无序列表适合成员之间无级别顺序关系的情况，无序列表始于<code>&lt;ul&gt;</code>标签，每个列表项始于<code>&lt;li&gt;</code>标签：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>Coffee<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>Mikk<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>运行结果如下：</p>
<ul>
    <li>Coffee</li>    
    <li>Mikk</li>
</ul>

<h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><p>有序列表也是一列项目，列表项目使用数字进行标记。有序列表适合各项目之间存在顺序关系的情况，有序列表始于<code>&lt;ol&gt;</code>标签，每个列表项始于<code>&lt;li&gt;</code>标签：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">HTML</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>Coffee<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>Milk<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>	
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>运行结果如下：</p>
<ol>
    <li>Coffee</li>
    <li>Milk</li>
</ol>

<h2 id="自定义列表"><a href="#自定义列表" class="headerlink" title="自定义列表"></a>自定义列表</h2><p>自定义列表不仅仅是一列项目，而是项目及其注释的组合。<code>&lt;dt&gt;</code>与<code>&lt;dd&gt;</code>在自定义列表中的<strong>数量不限、对应关系不限</strong>。自定义列表始于<code>&lt;dl&gt;</code>标签，每个列表项始于<code>&lt;dt&gt;</code>标签，每个自定义列表项的定义始于<code>&lt;dd&gt;</code>：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">HTML</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dl</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span>Coffee<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>-black hot drink<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span>Milk<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>-white cold drink<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dl</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>	
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>运行结果如下：</p>
<p><img src="/2022/10/27/%E5%89%8D%E7%AB%AF%E4%B8%89%E4%BB%B6%E5%A5%97%E4%B9%8BHTML%EF%BC%88%E4%BA%8C%EF%BC%89/02.PNG" alt></p>
<h1 id="HTML区块"><a href="#HTML区块" class="headerlink" title="HTML区块"></a>HTML区块</h1><p><strong><code>&lt;div&gt;</code>和<code>&lt;span&gt;</code></strong>：</p>
<p>HTML可以通过<code>&lt;div&gt;</code>和<code>&lt;span&gt;</code>将元素组合起来</p>
<h2 id="区块元素"><a href="#区块元素" class="headerlink" title="区块元素"></a>区块元素</h2><p>大多数HTML元素被定义为块级元素或内联元素。<strong>块级元素</strong>在浏览器显示时，<strong>通常会以新行来开始（和结束），</strong>如：<code>&lt;h1&gt;</code>、<code>&lt;p&gt;</code>、<code>&lt;ul&gt;</code>、<code>&lt;table&gt;</code></p>
<h2 id="内联元素"><a href="#内联元素" class="headerlink" title="内联元素"></a>内联元素</h2><p><strong>内联元素在显示时通常不以新行开始</strong>，如：<code>&lt;b&gt;</code>、<code>&lt;td&gt;</code>、<code>&lt;a&gt;</code>、<code>&lt;img&gt;</code></p>
<h2 id="lt-div-gt-元素"><a href="#lt-div-gt-元素" class="headerlink" title="&lt;div&gt;元素"></a><code>&lt;div&gt;</code>元素</h2><p><code>&lt;div&gt;</code>标签可以把文档分割为独立的、不同的部分，它是块级元素，可用于组合其他HTML元素的容器，常用于文档布局。<code>&lt;div&gt;</code>元素没有特定的含义，与CSS一同使用时，<code>&lt;div&gt;</code>元素可用于对<strong>大的内容块设置样式属性。</strong></p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">HTML</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>这是一些文本。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span>#00ffff</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>这是一个在div元素中的标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>这是一个在div元素中的文本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>这是一些文本。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>	
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>运行结果如下：</p>
<p><img src="/2022/10/27/%E5%89%8D%E7%AB%AF%E4%B8%89%E4%BB%B6%E5%A5%97%E4%B9%8BHTML%EF%BC%88%E4%BA%8C%EF%BC%89/0.PNG" alt></p>
<h2 id="lt-span-gt-元素"><a href="#lt-span-gt-元素" class="headerlink" title="&lt;span&gt;元素"></a><code>&lt;span&gt;</code>元素</h2><p><code>&lt;span&gt;</code>元素是内联元素，可用作文本的容器，<code>&lt;span&gt;</code>元素也没有特定的含义，与CSS一同使用时，<code>&lt;span&gt;</code>元素可用于为<strong>部分文本设置样式属性</strong>。</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">HTML</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>我有一双
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span>gold</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>金色<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>的
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">font-size</span><span class="token punctuation">:</span>50px</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>大眼睛<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>和一头
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span>blue</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>蓝色的头发<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>	
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>运行结果如下：</p>
<p>我有一双
    <span style="color:gold">金色</span>的
    <span style="font-size:50px">大眼睛</span>和一头
    <span style="color:blue">蓝色的头发</span>
</p>

<h1 id="HTML布局"><a href="#HTML布局" class="headerlink" title="HTML布局"></a>HTML布局</h1><p>大多数网站可以使用<code>&lt;div&gt;</code>或<code>&lt;table&gt;</code>元素来创建多列。CSS用于对元素进行定位，或者为页面创建背景以及色彩丰富的外观。</p>
<h2 id="使用-lt-div-gt-元素"><a href="#使用-lt-div-gt-元素" class="headerlink" title="使用&lt;div&gt;元素"></a>使用<code>&lt;div&gt;</code>元素</h2><p>可以使用<code>&lt;div&gt;</code>元素来改变页面的布局，如使用5个div元素来创建多列布局：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">HTML</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span>500px</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">background-color</span><span class="token punctuation">:</span>#FFA500<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">margin-bottom</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>网页的标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>menu<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">background-color</span><span class="token punctuation">:</span>#FFD700<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span>200px<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span>100px<span class="token punctuation">;</span><span class="token property">float</span><span class="token punctuation">:</span>left<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>菜单<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>
    	HTML<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>
    	CSS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>
    	JavaScript
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">background-color</span><span class="token punctuation">:</span>#EEEEEE<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span>200px<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span>400px<span class="token punctuation">;</span><span class="token property">float</span><span class="token punctuation">:</span>left<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>
        内容在这里
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">background-color</span><span class="token punctuation">:</span>#FFA500<span class="token punctuation">;</span><span class="token property">clear</span><span class="token punctuation">:</span>both<span class="token punctuation">;</span><span class="token property">text-align</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>
    	Copyright
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>	
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>运行结果如下：</p>
<p><img src="/2022/10/27/%E5%89%8D%E7%AB%AF%E4%B8%89%E4%BB%B6%E5%A5%97%E4%B9%8BHTML%EF%BC%88%E4%BA%8C%EF%BC%89/01.PNG" alt></p>
<h2 id="使用表格"><a href="#使用表格" class="headerlink" title="使用表格"></a>使用表格</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">HTML</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>500<span class="token punctuation">"</span></span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">background-color</span><span class="token punctuation">:</span>#FFA500<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>网页的主标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">background-color</span><span class="token punctuation">:</span>#FFD700<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span>100px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>菜单<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>
    	HTML<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>
    	CSS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>
    	JavaScript
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">background-color</span><span class="token punctuation">:</span>#EEEEEE<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span>200px<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span>400px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>内容就在这里<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">background-color</span><span class="token punctuation">:</span>#FFA500<span class="token punctuation">;</span><span class="token property">text-align</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>Copyright<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>	
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>	
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>运行结果如下：</p>
<table width="500" border="0">
<tr>
    <td colspan="2" style="background-color:#FFA500;">
    <h1>网页的主标题</h1>
    </td>
</tr>
<tr>
    <td style="background-color:#FFD700;width:100px;">
    <b>菜单</b><br>
    HTML<br>
    CSS<br>
    JavaScript
    </td>
    <td style="background-color:#EEEEEE;height:200px;width:400px;">内容就在这里</td>
</tr>
<tr>
    <td colspan="2" style="background-color:#FFA500;text-align:center;">Copyright</td>
</tr>   
</table>

<h1 id="HTML表单"><a href="#HTML表单" class="headerlink" title="HTML表单"></a>HTML表单</h1><p>HTML表单用于收集不同类型的用户输入。</p>
<h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><p>表单是一个包含表单元素的区域，使用变大标签<code>&lt;form&gt;</code>来设置。表单元素允许用户在表单中输入内容，如文本域、下拉列表、单选框、复选框等。其形式如下：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span>
    ...
	input elements
    ...
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="输入元素"><a href="#输入元素" class="headerlink" title="输入元素"></a>输入元素</h2><p>多数情况下被用到的表单标签是输入标签<code>&lt;input&gt;</code>。<code>&lt;input&gt;</code>元素是最重要的表单元素，输入类型是由类型属性定义的。经常被用到的输入类型如下：</p>
<h3 id="文本域"><a href="#文本域" class="headerlink" title="文本域"></a>文本域</h3><p>文本域通过<code>&lt;input type=&quot;text&quot;&gt;</code>标签来设定，当用户要在表单中键入字母、数字等内容时就会用到文本域：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">HTML</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span>
        姓名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>firstname<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>
        电话号码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lastname<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>	
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>运行结果如下：</p>
<p><img src="/2022/10/27/%E5%89%8D%E7%AB%AF%E4%B8%89%E4%BB%B6%E5%A5%97%E4%B9%8BHTML%EF%BC%88%E4%BA%8C%EF%BC%89/1.png" alt></p>
<h3 id="密码字段"><a href="#密码字段" class="headerlink" title="密码字段"></a>密码字段</h3><p>密码字段通过标签<code>&lt;input type=&quot;password&quot;&gt;</code>来定义，密码字段字符不会明文显示，而是以星号或圆点替代：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">HTML</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span>
        密码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pwd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>	
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>运行结果如下：</p>
<form>
    密码：<input type="password" name="pwd"><br>
</form>

<h3 id="单选按钮"><a href="#单选按钮" class="headerlink" title="单选按钮"></a>单选按钮</h3><p>表单单选框选项通过<code>&lt;input type=&quot;radio&quot;&gt;</code>来定义：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">HTML</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>male<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>female<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>女
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>	
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>运行结果如下：</p>
<form>
    <input type="radio" name="sex" value="male">男<br>
    <input type="radio" name="sex" value="female">女
</form>

<h3 id="复选框"><a href="#复选框" class="headerlink" title="复选框"></a>复选框</h3><p>复选框通过<code>&lt;input type=&quot;checkbox&quot;&gt;</code>来定义，用户需要从若干给定的选择中选取一个或若干个选项：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">HTML</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vehicle<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Bike<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我有自行车<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vehicle<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Car<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我有小车
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>	
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>运行结果如下：</p>
<form>
    <input type="checkbox" name="vehicle" value="Bike">我有自行车<br>
    <input type="checkbox" name="vehicle" value="Car">我有小车
</form>

<h3 id="提交按钮"><a href="#提交按钮" class="headerlink" title="提交按钮"></a>提交按钮</h3><p>提交按钮通过<code>&lt;input type=&quot;submit&quot;</code>来定义，当用户单击确认按钮时，表单的内容会被传送到另一个文件。表单的动作属性定义了目的文件的文件名，由目的文件通常会对接收到的输入数据进行相关的处理：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">HTML</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>input<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>目标文件名<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    	Username:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>按钮名称<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>	
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>运行结果如下：</p>
<form name="input" action="目标文件名" method="get">
    Username:<input type="text" name="User">
    <input type="submit" value="按钮名称">
</form>

<h1 id="HTML框架"><a href="#HTML框架" class="headerlink" title="HTML框架"></a>HTML框架</h1><p><code>&lt;iframe&gt;</code>标签规定一个内联框架。一个内联框架被用来在当前HTML文档中嵌入另一个文档。通过使用框架可以在浏览器窗口中显示不止一个页面。语法如下：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>URL<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span>
<span class="token comment">&lt;!--该URL指向不同的网页，将窗口内容显示为URL地址指向页面--></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="设置高度与宽度"><a href="#设置高度与宽度" class="headerlink" title="设置高度与宽度"></a>设置高度与宽度</h2><p><code>height</code>和<code>width</code>属性用来定义<code>iframe</code>标签的高度与宽度。属性默认以像素为单位，但也可以指定其按比例显示，如“80%”：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">HTML</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tangmenjue.top.html<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>80%<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>80%<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>	
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>运行结果如下：</p>
<p><img src="/2022/10/27/%E5%89%8D%E7%AB%AF%E4%B8%89%E4%BB%B6%E5%A5%97%E4%B9%8BHTML%EF%BC%88%E4%BA%8C%EF%BC%89/2.png" alt></p>
<h2 id="移除边框"><a href="#移除边框" class="headerlink" title="移除边框"></a>移除边框</h2><p><code>frameborder</code>属性用于定义<code>iframe</code>表示是否显示边框。设置属性值为0时，移除<code>iframe</code>边框：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">HTML</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tangmenjue.top.html<span class="token punctuation">"</span></span> <span class="token attr-name">frameborder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>	
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="使用iframe来显示目录链接页面"><a href="#使用iframe来显示目录链接页面" class="headerlink" title="使用iframe来显示目录链接页面"></a>使用<code>iframe</code>来显示目录链接页面</h2><p><code>iframe</code>可以显示是一个目标链接的页面。目标链接的属性必须使用<code>iframe</code>属性：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">HTML</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tangmenjue.top.html<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>iframe_a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://tangmenjue.top/2020/01/09/hello-world/<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>iframe_a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>tangmenjue.top<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>	
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="iframe标准属性"><a href="#iframe标准属性" class="headerlink" title="iframe标准属性"></a><code>iframe</code>标准属性</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">属性</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">class</td>
<td style="text-align:center">规定元素的类名（classname）</td>
</tr>
<tr>
<td style="text-align:center">id</td>
<td style="text-align:center">规定元素的唯一 id</td>
</tr>
<tr>
<td style="text-align:center">style</td>
<td style="text-align:center">规定元素的行内样式（inline style）</td>
</tr>
<tr>
<td style="text-align:center">title</td>
<td style="text-align:center">规定元素的额外信息（可在工具提示中显示）</td>
</tr>
</tbody>
</table>
</div>
<h1 id="HTML颜色"><a href="#HTML颜色" class="headerlink" title="HTML颜色"></a>HTML颜色</h1><p>HTML颜色采用的是RGB颜色，是通过对红绿蓝三个颜色通道的变化以及它们相互之间的叠加来得到各式各样的颜色。</p>
<h2 id="Color-Values"><a href="#Color-Values" class="headerlink" title="Color Values"></a>Color Values</h2><p>HTML颜色由一个十六进制符号来定义，这个符号由红绿蓝的值组成。每种颜色的最小值是0（十六进制：#00），最大值是255（十六进制：#FF）。在项目过程中若要查询颜色码时，可以使用<a href="https://www.sioe.cn/yingyong/yanse-rgb-16/">RGB颜色值与十六进制颜色码转换工具</a>来查询。</p>
<h2 id="颜色名"><a href="#颜色名" class="headerlink" title="颜色名"></a>颜色名</h2><p>目前所有浏览器都支持以下颜色名：</p>
<p>141个颜色名称是在HTML和CSS颜色规范定义的（17标准颜色+其余的124种），其中17标准颜色为：黑色，蓝色，水，紫红色，灰色，绿色，石灰，栗色，海军，橄榄，橙，紫，红，白，银，蓝绿色，黄色。</p>
<p>141个颜色的颜色名及其对应的16进制值可使用<a href="https://www.917118.com/tool/color_3.html">RGB颜色对照表</a>来查询。</p>
<h1 id="HTML脚本"><a href="#HTML脚本" class="headerlink" title="HTML脚本"></a>HTML脚本</h1><p>JavaScript是可插入HTML页面的编程代码，其使HTML页面具有更强的动态和交互性。</p>
<h2 id="lt-script-gt-标签"><a href="#lt-script-gt-标签" class="headerlink" title="&lt;script&gt;标签"></a><code>&lt;script&gt;</code>标签</h2><p><code>&lt;script&gt;</code>标签用于定义客户端脚本，<code>&lt;script&gt;</code>元素既可包含脚本语句，也可通过src属性指向外部脚本文件，若使用src属性，则<code>&lt;script&gt;</code>元素必须是空的。JavaScript常用于图片操作、表单验证以及内容动态更新：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">HTML</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"Hello world!"</span><span class="token punctuation">)</span>        
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>
<span class="token comment">&lt;!--运行结果如下--></span>
Hello world!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="lt-noscript-gt-标签"><a href="#lt-noscript-gt-标签" class="headerlink" title="&lt;noscript&gt;标签"></a><code>&lt;noscript&gt;</code>标签</h2><p>当浏览器禁用脚本或浏览器不支持客户端脚本时，<code>&lt;noscript&gt;</code>标签提供无法使用脚本时的替代内容。<code>&lt;noscript&gt;</code>元素支持全局属性，可包含普通HTML页面的body元素中能找到的所有元素。只有在浏览器禁用脚本或不支持客户端脚本时，才会显示<code>&lt;noscript&gt;</code>元素中的内容：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">HTML</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"Hello world!"</span><span class="token punctuation">)</span>        
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>noscript</span><span class="token punctuation">></span></span>Sorry,your browser does not support JavaScript!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>noscript</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="JavaScript示例代码"><a href="#JavaScript示例代码" class="headerlink" title="JavaScript示例代码"></a>JavaScript示例代码</h2><p>JavaScript直接在HTML输出：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">HTML</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"Hello world!"</span><span class="token punctuation">)</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;h1>这是一个标题&lt;/h1>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;p>这是一个段落。&lt;/p>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	    
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>JavaScript事件响应：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">HTML</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>JavaScript can react to events.Like the click of a button.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
	<span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
    	document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token operator">=</span><span class="token string">"Hello JavaScript!"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>Click Me!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>JavaScript处理HTML样式：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">HTML</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>JavaScript can change the css.Like the click of a button.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
	<span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
    	x<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">)</span>
        x<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color<span class="token operator">=</span><span class="token string">"#FF0000"</span>
    <span class="token punctuation">&#125;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>Click Me!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="对于老式浏览器"><a href="#对于老式浏览器" class="headerlink" title="对于老式浏览器"></a>对于老式浏览器</h2><p>若浏览器没法识别<code>&lt;script&gt;</code>标签，那么<code>&lt;script&gt;</code>标签所包含的内容将以文本方式显示在页面上。为了避免这种情况发送，应<strong>将脚本隐藏在注释标签中</strong>。<strong>老式浏览器将忽略这些注释</strong>，便不会将标签的内容显示到页面上，而<strong>新版本的浏览器将会读懂这些脚本而执行它们</strong>，即使代码嵌套在注释标签内：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">HTML</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>JavaScript can change the css.Like the click of a button.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
    <span class="token comment">//&lt;!--</span>
    <span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
    	x<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">)</span>
        x<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color<span class="token operator">=</span><span class="token string">"#FF0000"</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">//--></span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>Click Me!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="HTML字符实体"><a href="#HTML字符实体" class="headerlink" title="HTML字符实体"></a>HTML字符实体</h1><p>HTML中的预留字符必须被替换为字符实体，一些在键盘上找不到的字符也可以用字符实体来替换，<strong>实体名称对大小写敏感</strong>。</p>
<h2 id="HTML实体"><a href="#HTML实体" class="headerlink" title="HTML实体"></a>HTML实体</h2><p>在HTML中，某些字符是保留的，不能使用包含这些字符的文本。</p>
<p>在HTML中不能使用小于号和大于号，浏览器会误以为它们是标签。若希望正确地显示预留字符，则必须在HTML源代码中使用字符实体，字符实体类似于：<code>&amp;entiy_name</code>或<code>&amp;#entity_number;</code>。若要显示小于号，必须写成：<code>&amp;lt;</code>或<code>&amp;#60;</code>或<code>&amp;#060;</code>。</p>
<p>一些字符实体如下：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">显示结果</th>
<th style="text-align:center">描述</th>
<th style="text-align:center">实体名称</th>
<th style="text-align:center">实体编号</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">空格</td>
<td style="text-align:center"><code>&amp;nbsp;</code></td>
<td style="text-align:center"><code>&amp;#160;</code></td>
</tr>
<tr>
<td style="text-align:center">&lt;</td>
<td style="text-align:center">小于号</td>
<td style="text-align:center"><code>&amp;lt;</code></td>
<td style="text-align:center"><code>&amp;#60;</code></td>
</tr>
<tr>
<td style="text-align:center">&gt;</td>
<td style="text-align:center">大于号</td>
<td style="text-align:center"><code>&amp;gt;</code></td>
<td style="text-align:center"><code>&amp;#62;</code></td>
</tr>
<tr>
<td style="text-align:center">&amp;</td>
<td style="text-align:center">和号</td>
<td style="text-align:center"><code>&amp;amp;</code></td>
<td style="text-align:center"><code>&amp;#38;</code></td>
</tr>
<tr>
<td style="text-align:center">“</td>
<td style="text-align:center">引号</td>
<td style="text-align:center"><code>&amp;quot;</code></td>
<td style="text-align:center"><code>&amp;#34;</code></td>
</tr>
<tr>
<td style="text-align:center">‘</td>
<td style="text-align:center">撇号</td>
<td style="text-align:center"><code>&amp;apos;</code> (IE不支持)</td>
<td style="text-align:center"><code>&amp;#39;</code></td>
</tr>
<tr>
<td style="text-align:center">￠</td>
<td style="text-align:center">分</td>
<td style="text-align:center"><code>&amp;cent;</code></td>
<td style="text-align:center"><code>&amp;#162;</code></td>
</tr>
<tr>
<td style="text-align:center">£</td>
<td style="text-align:center">镑</td>
<td style="text-align:center"><code>&amp;pound;</code></td>
<td style="text-align:center"><code>&amp;#163;</code></td>
</tr>
<tr>
<td style="text-align:center">¥</td>
<td style="text-align:center">人民币/日元</td>
<td style="text-align:center"><code>&amp;yen;</code></td>
<td style="text-align:center"><code>&amp;#165;</code></td>
</tr>
<tr>
<td style="text-align:center">€</td>
<td style="text-align:center">欧元</td>
<td style="text-align:center"><code>&amp;euro;</code></td>
<td style="text-align:center"><code>&amp;#8364;</code></td>
</tr>
<tr>
<td style="text-align:center">§</td>
<td style="text-align:center">小节</td>
<td style="text-align:center"><code>&amp;sect;</code></td>
<td style="text-align:center"><code>&amp;#167;</code></td>
</tr>
<tr>
<td style="text-align:center">©</td>
<td style="text-align:center">版权</td>
<td style="text-align:center"><code>&amp;copy;</code></td>
<td style="text-align:center"><code>&amp;#169;</code></td>
</tr>
<tr>
<td style="text-align:center">®</td>
<td style="text-align:center">注册商标</td>
<td style="text-align:center"><code>&amp;reg;</code></td>
<td style="text-align:center"><code>&amp;#174;</code></td>
</tr>
<tr>
<td style="text-align:center">™</td>
<td style="text-align:center">商标</td>
<td style="text-align:center"><code>&amp;trade;</code></td>
<td style="text-align:center"><code>&amp;#8482;</code></td>
</tr>
<tr>
<td style="text-align:center">×</td>
<td style="text-align:center">乘号</td>
<td style="text-align:center"><code>&amp;times;</code></td>
<td style="text-align:center"><code>&amp;#215;</code></td>
</tr>
<tr>
<td style="text-align:center">÷</td>
<td style="text-align:center">除号</td>
<td style="text-align:center"><code>&amp;divide;</code></td>
<td style="text-align:center"><code>&amp;#247;</code></td>
</tr>
</tbody>
</table>
</div>
<h2 id="不间断空格"><a href="#不间断空格" class="headerlink" title="不间断空格"></a>不间断空格</h2><p>HTML中常用字符实体是不间断空格。</p>
<p>浏览器会截断HTML页面中的空格。若要在页面增加空格的数量，可以使用字符实体<code>&amp;nbsp;</code></p>
<h2 id="结合音标符"><a href="#结合音标符" class="headerlink" title="结合音标符"></a>结合音标符</h2><p>发音符号是加到字母上的一个字形。</p>
<p>一些变音符号，如尖音符 ( ̀) 和 抑音符 ( ́) 。</p>
<p>变音符号可以出现在字母的上面和下面、字母里面或两个字母间。</p>
<p>变音符号可以与字母、数字字符的组合来使用。</p>
<p>一些音标符如下：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">音标符</th>
<th style="text-align:center">字符</th>
<th style="text-align:center">Construct</th>
<th style="text-align:center">输出结果</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">̀</td>
<td style="text-align:center">a</td>
<td style="text-align:center"><code>à</code></td>
<td style="text-align:center">à</td>
</tr>
<tr>
<td style="text-align:center">́</td>
<td style="text-align:center">a</td>
<td style="text-align:center"><code>á</code></td>
<td style="text-align:center">á</td>
</tr>
<tr>
<td style="text-align:center">̂</td>
<td style="text-align:center">a</td>
<td style="text-align:center"><code>a&amp;#770;</code></td>
<td style="text-align:center">â</td>
</tr>
<tr>
<td style="text-align:center">̃</td>
<td style="text-align:center">a</td>
<td style="text-align:center"><code>a&amp;#771;</code></td>
<td style="text-align:center">ã</td>
</tr>
<tr>
<td style="text-align:center">̀</td>
<td style="text-align:center">O</td>
<td style="text-align:center"><code>O&amp;#768;</code></td>
<td style="text-align:center">Ò</td>
</tr>
<tr>
<td style="text-align:center">́</td>
<td style="text-align:center">O</td>
<td style="text-align:center"><code>O&amp;#769;</code></td>
<td style="text-align:center">Ó</td>
</tr>
<tr>
<td style="text-align:center">̂</td>
<td style="text-align:center">O</td>
<td style="text-align:center"><code>O&amp;#770;</code></td>
<td style="text-align:center">Ô</td>
</tr>
<tr>
<td style="text-align:center">̃</td>
<td style="text-align:center">O</td>
<td style="text-align:center"><code>O&amp;#771;</code></td>
<td style="text-align:center">Õ</td>
</tr>
</tbody>
</table>
</div>
<h1 id="HTML-URL"><a href="#HTML-URL" class="headerlink" title="HTML URL"></a>HTML URL</h1><p>URL是一个网页网站，可以由字母组成，也可以由ip地址组成。大多数人进入网站使用网站域名来访问。</p>
<h2 id="URL（统一资源定位器）"><a href="#URL（统一资源定位器）" class="headerlink" title="URL（统一资源定位器）"></a>URL（统一资源定位器）</h2><p>Web浏览器通过URL从Web服务器请求页面。当您点击HTMl页面中的某个链接时，对应的<code>&lt;a&gt;</code>标签指向万维网上的一个地址。URL用于定位万维网上的文档。</p>
<p>URL的语法规则：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">scheme://host.domain:port/path/filename<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>其中：</p>
<ul>
<li>scheme:定义因特网服务的类型，最常见的类型是http</li>
<li>host：定义域主机（http的默认主机是www）</li>
<li>domain：定义因特网域名，比如tangmenjue.top</li>
<li>:port：定义主机上的端口号（http默认端口号是80）</li>
<li>path：定义服务器上的路径（如果省略，则文档必须位于网站的根目录中）</li>
<li>filename：定义文档/资源的名称</li>
</ul>
<p>常见的scheme类型如下：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Scheme</th>
<th style="text-align:center">访问</th>
<th style="text-align:center">用于</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">http</td>
<td style="text-align:center">超文本传输协议</td>
<td style="text-align:center">以 http:// 开头的普通网页。不加密。</td>
</tr>
<tr>
<td style="text-align:center">https</td>
<td style="text-align:center">安全超文本传输协议</td>
<td style="text-align:center">安全网页，加密所有信息交换。</td>
</tr>
<tr>
<td style="text-align:center">ftp</td>
<td style="text-align:center">文件传输协议</td>
<td style="text-align:center">用于将文件下载或上传至网站。</td>
</tr>
<tr>
<td style="text-align:center">file</td>
<td style="text-align:center"></td>
<td style="text-align:center">您计算机上的文件。</td>
</tr>
</tbody>
</table>
</div>
<h2 id="URL字符编码"><a href="#URL字符编码" class="headerlink" title="URL字符编码"></a>URL字符编码</h2><p>URL只用使用ASCII字符集。</p>
<p>URL编码会将字符转换为可通过因特网传输的格式来通过因特网进行发送。由于URL常包含ASCII集合以外的字符，URL必须转换为有效的ASCII格式。</p>
<p>URL编码使用”%”号及其后跟随两位的十六进制数来替换非ASCII字符，URL不能包含空格，常用“+”号来替换空格。</p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>前端三件套之JavaScript（一）</title>
    <url>/2022/10/28/%E5%89%8D%E7%AB%AF%E4%B8%89%E4%BB%B6%E5%A5%97%E4%B9%8BJavaScript%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h1><p>JavaScript代码可以直接嵌在网页的任何地方，通常会把JavaScript代码放在HTML的<code>&lt;head&gt;</code>中。由<code>&lt;script&gt;...&lt;/script&gt;</code>包含的代码就是JavaScript代码，它将直接被浏览器执行。</p>
<p>另一种方法就是把JavaScript代码放到一个单独的<code>.js</code>文件中，然后在HTML中通过<code>&lt;script src=&quot;/js文件地址&quot;&gt;...&lt;/script&gt;</code>的方式引入这个文件。</p>
<p><strong>JavaScript中的注释符号是<code>//</code>或`/</strong>/`，<em>JavaScript中严格区分大小写。*</em></p>
<p>若需要调试JavaScript代码，可以打开一个网页，然后按下F12打开开发者工具，点击控制台（Console）在<code>&gt;</code>里可以直接输入JavaScript代码，按回车后执行。按F12可关闭开发者工具。</p>
<p>在控制台中输入<code>console.log(a)</code>可以查看变量a的内容，回车后显示的值就是变量内容。</p>
<p>本文中使用的是把JavaScript代码放到一个单独的<code>.js</code>文件中的方法。因此先建立一个test.html文档，其内容如下：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test.js<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>建好test.html后，在test.html所在文件夹新建一个text.js文件，后续的JavaScript代码都在text.js中编写，控制台的代码在text.js里运行，需要页面显示的代码在test.html里运行。</p>
<h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><p>JavaScript的语法与Java类似，每个语句以<code>;</code>结束，语句块用<code>&#123;...&#125;</code>。语句块中具有以<strong>4个空格为单位的缩进</strong>。</p>
<h3 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h3><p>分别利用行注释和块注释把下面的语句注释掉，使它不再执行：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//alert('我不想执行');</span>
<span class="token comment">/*alert('我也不想执行');*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h3><p>JavaScript不区分整数和浮点数，统一用Number表示。</p>
<p>以下是合法的Number类型：</p>
<ul>
<li>整数：123</li>
<li>浮点数：0.123</li>
<li>科学计数法：1.2345e3（即12345x1000）</li>
<li>复数：-123</li>
<li>无法计算结果时：NaN</li>
<li>无限大：Infinity</li>
</ul>
<p>JavaScript里的十六进制用<code>0x</code>前缀表示。</p>
<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>字符串是以单引号<code>&#39;</code>‘或双引号<code>&quot;</code>“括起来的任意文本，引号本身不是字符串的一部分。如：‘abc’、“qwe”。</p>
<h3 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h3><p>布尔值与布尔代数的表示完全一致，一个布尔值只有<code>true</code>、<code>false</code>两种值。</p>
<p><code>&amp;&amp;</code>是与运算，<code>||</code>是或运算，<code>!</code>是非运算。</p>
<h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><p>JavaScript允许对任意数据类型做比较。</p>
<p>注意相等运算符<code>==</code>，JavaScript有两种比较运算符：</p>
<ul>
<li><code>==</code>比较运算符：<strong>会自动转换数据类型</strong>再比较。</li>
<li><code>===</code>比较运算符：<strong>不会自动转换数据类型</strong>。若数据类型不一致，返回false，若一直，再进行比较。</li>
</ul>
<p><strong><code>NaN</code>与所有值都不相等，包括他自己。</strong></p>
<p>唯一能判断NaN为true的方法是通过<code>isNaN()</code>函数。</p>
<p>JavaScript比较浮点数只能计算它们之差的绝对值，看是否小于某个阈值即：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1</span><span class="token operator">/</span><span class="token number">3</span><span class="token operator">===</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>
Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">3</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">0.0000001</span><span class="token punctuation">;</span><span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="null和undefined"><a href="#null和undefined" class="headerlink" title="null和undefined"></a>null和undefined</h3><p><code>null</code>表示一个空的值，它和0以及空字符<code>&#39;&#39;</code>不同。0是一个数值，<code>&#39;&#39;</code>表示长度为0的字符串，null表示空。</p>
<p><code>undefined</code>表示值未定义，<code>undefined</code>仅在判断函数参数是否传递的情况下有用。</p>
<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>数组是一组按顺序排列的集合，集合的每个值称为元素。JavaScript的数组可以包括任意数据类型，如：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3.14</span><span class="token punctuation">,</span><span class="token string">'Hello'</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><strong>创建数组可以通过<code>Array()</code>函数</strong>实现：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3.14</span><span class="token punctuation">,</span><span class="token string">'Hello'</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>数组的元素可以通过索引来访问，起始值是0.</p>
<h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p>JavaScript的对象是一组由键-值组成的无序集合：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> person<span class="token operator">=</span><span class="token punctuation">&#123;</span>
    name<span class="token operator">:</span><span class="token string">'Bob'</span><span class="token punctuation">,</span>
    age<span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">,</span>
    tags<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'js'</span><span class="token punctuation">,</span><span class="token string">'web'</span><span class="token punctuation">,</span><span class="token string">'java'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
	city<span class="token operator">:</span><span class="token string">'Beijing'</span><span class="token punctuation">,</span>
    hasCar<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>
    zipcode<span class="token operator">:</span><span class="token keyword">null</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>JavaScript对象的键都是字符串类型，值可以是任意数据。每个键又称为对象的属性。</p>
<p>要<strong>获取一个对象的属性</strong>，可以用<code>对象变量.属性名</code>的方式，如<code>person.name;</code>。</p>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>变量在JavaScript中用一个变量名表示，变量名是大小写英文、数字、<code>$</code>和<code>_</code>组成，不能以数字开头。变量名也不能是JavaScript的关键字，如if、while等。变量名也可以用中文。</p>
<p><strong>声明变量用<code>var</code>语句</strong>，如：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a<span class="token punctuation">;</span>
<span class="token keyword">var</span> $b<span class="token operator">=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p><code>=</code>号为赋值号，同一个变量可以反复赋值，可以是不同类型的变量，但只能声明一次：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">123</span><span class="token punctuation">;</span>
a<span class="token operator">=</span><span class="token string">'ABC'</span><span class="token comment">//a的值由整数变为字符串</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>要在控制台上显示变量的内容，用<code>console.log(x)</code>语句。使用<code>console.log()</code>代替<code>alert()</code>的好处是避免弹出烦人的对话框。</p>
<h3 id="strict模式"><a href="#strict模式" class="headerlink" title="strict模式"></a>strict模式</h3><p>使用var声明的变量不是全局变量，它的范围被限制在该变量被声明的函数体内，同名变量在不同的函数体内互不冲突。</p>
<p>在strict模式下运行的JavaScript代码，强制通过var声明变量，未使用var声明变量就使用的，运行会报错。</p>
<p>启用strict模式的方法是在JavaScript代码的第一行写上：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">'use strict'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这是一个字符串，不支持strict模式的浏览器会把它当做一个字符串语句执行，支持strict模式的浏览器将会开启strict模式运行JavaScript。</p>
<h1 id="字符串-1"><a href="#字符串-1" class="headerlink" title="字符串"></a>字符串</h1><p>转义字符<code>\</code>可以转义很多字符，比如<code>\n</code>表示换行，<code>\t</code>表示制表符，<code>\\</code>表示<code>\</code>字符。</p>
<p>ASCII字符可以以<code>\x##</code>形式的十六进制表示，如<code>\x41;</code>便等同于A。</p>
<p>还可以用<code>\u####</code>表示一个Unicode字符，如<code>\u4e2d\u6587;</code>便等同于‘中文’。</p>
<h2 id="多行字符串"><a href="#多行字符串" class="headerlink" title="多行字符串"></a>多行字符串</h2><p>由于多行字符串用<code>\n</code>写起来比较麻烦，因此最新的ES6标准新增了一种多行字符串的方法，用反引号`表示，反引号里面的内容每次回车就会自动换行：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">这是一个
多行
字符串</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h2><p>要把多个字符串连接起来，可以用<code>+</code>号连接：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> name<span class="token operator">=</span><span class="token string">"张三"</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> age<span class="token operator">=</span><span class="token number">22</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> message<span class="token operator">=</span><span class="token string">'你好，'</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">'，你今年'</span><span class="token operator">+</span>age<span class="token operator">+</span><span class="token string">'岁了'</span><span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>当由很多变量需要连接时，用<code>+</code>号比较麻烦，ES6新增了一种模板字符串，表示方法和多行字符串一样，但它会自动替换字符串中的变量：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> name<span class="token operator">=</span><span class="token string">"张三"</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> age<span class="token operator">=</span><span class="token number">22</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> message<span class="token operator">=</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">你好，</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">，你今年</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>age<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">岁了</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="操作字符串"><a href="#操作字符串" class="headerlink" title="操作字符串"></a>操作字符串</h2><p>字符串是不可变的，若对字符串的某个索引赋值，不会报错，但也没有任何效果。</p>
<h3 id="toUpperCase"><a href="#toUpperCase" class="headerlink" title="toUpperCase"></a><code>toUpperCase</code></h3><p><code>toUpperCase()</code>把一个字符串全部变为大写：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> s<span class="token operator">=</span><span class="token string">"Hello"</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回'HELLO'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="toLowerCase"><a href="#toLowerCase" class="headerlink" title="toLowerCase"></a><code>toLowerCase</code></h3><p><code>toLowerCase</code>把一个字符串全部变为小写：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> s<span class="token operator">=</span><span class="token string">"Hello"</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回'hello'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf"></a><code>indexOf</code></h3><p><code>indexof()</code>会搜索指定字符串出现的位置：</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json">var s&#x3D;&#39;hello,world&#39;;
console.log(s.indexOf(&#39;world&#39;));&#x2F;&#x2F;返回6
console.log(s.indexOf(&#39;World&#39;));&#x2F;&#x2F;没有找到指定的子串，返回-1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="substring"><a href="#substring" class="headerlink" title="substring"></a><code>substring</code></h3><p><code>substring()</code>返回指定索引区间的子串：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> s<span class="token operator">=</span><span class="token string">'hello,world'</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从索引0开始到5结束(不包括5)，返回'hello'</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从索引6开始到结束，返回'world'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="练习题-1"><a href="#练习题-1" class="headerlink" title="练习题"></a>练习题</h2><p>测试你的浏览器是否支持ES6标准，如果不支持，请把多行字符串用<code>\n</code>重新表示出来：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">多行
字符串
测试</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*运行结果如下：
多行
字符串
测试*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>测试你的浏览器是否支持ES6模板字符串，如果不支持，请把模板字符串改为<code>+</code>连接的普通字符串：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'小明'</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">你好, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">, 你今年</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>age<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">岁了!</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*运行结果如下：
你好, 小明, 你今年20岁了!*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="数组-1"><a href="#数组-1" class="headerlink" title="数组"></a>数组</h1><p>要取得数组的长度，可直接访问<code>length</code>属性：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3.14</span><span class="token punctuation">,</span><span class="token string">'Hello'</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//长度为6,返回6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p><strong>注意：</strong>直接给Array的<code>length</code>赋一个新值会导致Array大小的变化：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//长度为3,返回3</span>
arr<span class="token punctuation">.</span>length<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//arr变为[1,2,3,undefined,undefined,undefined]</span>
<span class="token comment">//返回(6) [1, 2, 3, …]</span>
arr<span class="token punctuation">.</span>length<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//arr变为[1,2]，返回(6) [1, 2, 3, …]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>Array可以通过索引把对应的元素修改为新的值，通过索引赋值会直接修改Array。若索引超过了范围，同样会引起Array大小的变化：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'x'</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//arr变为[1,2,3,undefined,undefined,'x']</span>
<span class="token comment">//返回(6) [1, 2, 3, …, 'x']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="indexOf-1"><a href="#indexOf-1" class="headerlink" title="indexOf"></a><code>indexOf</code></h2><p>与String类似，Array也可以通过<code>indexof()</code>来搜索一个指定的元素位置：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string">'30'</span><span class="token punctuation">,</span><span class="token string">'xyz'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//元素10的索引为0,返回0</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//元素30没有找到，返回-1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="slice"><a href="#slice" class="headerlink" title="slice"></a><code>slice</code></h2><p><code>slice</code>对应String的<code>substring()</code>，截取Array的部分元素，然后返回一个新的Array：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">,</span><span class="token string">'D'</span><span class="token punctuation">,</span><span class="token string">'E'</span><span class="token punctuation">,</span><span class="token string">'F'</span><span class="token punctuation">,</span><span class="token string">'G'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从索引0开始到3结束(不包括3)，返回(3) ['A', 'B', 'C']</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从索引3开始到结束，返回(4) ['D', 'E', 'F', 'G']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>若不给<code>slice()</code>传递任何参数，它会从头到尾截取所有元素。</p>
<h2 id="push和pop"><a href="#push和pop" class="headerlink" title="push和pop"></a>push和pop</h2><p>push()向Array的末尾添加元素，pop()则把Array的最后一个元素删掉：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回(4)[1, 2, 'A', 'B']</span>
arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回(3)[1, 2, 'A']</span>
arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 连续pop 3次</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回(0)[]</span>
arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 空数组继续pop不会报错，而是返回undefined</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回(0)[]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="unshift和shift"><a href="#unshift和shift" class="headerlink" title="unshift和shift"></a>unshift和shift</h2><p>若要往Array的头部添加若干元素，使用<code>unshift()</code>方法，<code>shift()</code>方法则是把Array的第一个元素删掉：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回(4) ['A', 'B', 1, 2]</span>
arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回(3) ['B', 1, 2]</span>
arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回(0) []</span>
arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 空数组继续shift不会报错，而是返回undefined</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回(0) []</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h2><p><code>sort()</code>可以对当前Array进行排序，它会直接修改当前Array的元素位置，直接调用是，按照默认顺序排序：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'B'</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">,</span><span class="token string">'A'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回(3) ['A', 'B', 'C']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h2><p><code>reverse()</code>可以反转Array内的元素：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回(3) [3, 2, 1]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="splice"><a href="#splice" class="headerlink" title="splice"></a>splice</h2><p><code>splice</code>方法可以从指定的索引开始删除元素，然后再从该位置添加元素：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从索引2开始删除3个元素，然后再添加2个元素</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回(5) [1, 2, 'A', 'B', 6]</span>
arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">//从索引2开始删除2个元素，不添加元素</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回(3) [1, 2, 6]</span>
arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从索引2开始添加2个元素，不删除元素</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回(5) [1, 2, 'A', 'B', 6]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h2><p><code>concat()</code>方法把当前的Array和另一个Array连接起来，并返回一个新的Array：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> added<span class="token operator">=</span>arr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>added<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回(6) ['A', 'B', 'C', 1, 2, 3]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回(3) ['A', 'B', 'C']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>concat()</code>方法可以接收任意个元素和Array，并自动把Array拆开，然后全部添加到新的Array里：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//返回(7) ['A', 'B', 'C', 1, 2, 3, 4]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="join"><a href="#join" class="headerlink" title="join"></a>join</h2><p><code>join()</code>方法把当前Array的每个元素都用指定的字符串连接起来，然后返回连接后的字符串：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//返回A-B-C-1-2-3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>若Array的元素不是字符串，将自动转换为字符串后再连接。</p>
<h2 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h2><p>若数组的某个元素又是一个Array，便形成了多维数组。</p>
<h2 id="练习题-2"><a href="#练习题-2" class="headerlink" title="练习题"></a>练习题</h2><p>如何通过索引取到<code>500</code>这个值：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">600</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> x <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token comment">/*运行结果如下：
500*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在新生欢迎会上，你已经拿到了新同学的名单，请排序后显示：<code>欢迎XXX，XXX，XXX和XXX同学！</code>：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'小明'</span><span class="token punctuation">,</span> <span class="token string">'小红'</span><span class="token punctuation">,</span> <span class="token string">'大军'</span><span class="token punctuation">,</span> <span class="token string">'阿黄'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'欢迎'</span><span class="token operator">+</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'，'</span><span class="token operator">+</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'，'</span><span class="token operator">+</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'和'</span><span class="token operator">+</span>arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'同学！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*运行结果如下：
欢迎大军，小明，小红和阿黄同学！*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="对象-1"><a href="#对象-1" class="headerlink" title="对象"></a>对象</h1><p>JavaScript的对象是一种由若干键值组成的无序集合数据类型。</p>
<p>JavaScript用一个<code>&#123;...&#125;</code>表示一个对象，键值对以<code>xxx:xxx</code>形式声明，用<code>,</code>隔开：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> xiaoming<span class="token operator">=</span><span class="token punctuation">&#123;</span>
    name<span class="token operator">:</span><span class="token string">'小明'</span><span class="token punctuation">,</span>
    birth<span class="token operator">:</span><span class="token number">1999</span><span class="token punctuation">,</span>
    school<span class="token operator">:</span><span class="token string">'No.1 Middle School'</span><span class="token punctuation">,</span>
    height<span class="token operator">:</span><span class="token number">1.70</span><span class="token punctuation">,</span>
    weight<span class="token operator">:</span><span class="token number">65</span><span class="token punctuation">,</span>
    score<span class="token operator">:</span><span class="token keyword">null</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以通过<code>对象.属性</code>来获取小明的属性：<code>xiaoming.name;</code>。若属性名包括特殊字符，就必须使用<code>&#39;&#39;</code>括起来：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> zhangsan<span class="token operator">=</span><span class="token punctuation">&#123;</span>
    name<span class="token operator">:</span><span class="token string">'张三'</span><span class="token punctuation">,</span>
    <span class="token string">'middel-school'</span><span class="token operator">:</span><span class="token string">'No.1 Middle School'</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>访问这一特殊属性无法使用<code>.</code>操作符，必须使用<code>[&#39;xxx&#39;]</code>访问：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">zhangsan<span class="token punctuation">[</span><span class="token string">'middel-school'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
zhangsan<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//name也可以用['xxx']访问</span>
zhangsan<span class="token punctuation">.</span>name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>对象的所有属性都是字符串，但属性值可以是任意数据类型。若访问不存在的属性会返回<code>undefined</code>。</p>
<p>由于JavaScript的对象是动态类型，因此可以自由给对象添加或删除属性：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> xiaoming<span class="token operator">=</span><span class="token punctuation">&#123;</span>
    name<span class="token operator">:</span><span class="token string">'小明'</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xiaoming<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回undefined</span>
xiaoming<span class="token punctuation">.</span>age<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">;</span><span class="token comment">//</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xiaoming<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回18</span>
<span class="token keyword">delete</span> xiaoming<span class="token punctuation">.</span>age<span class="token punctuation">;</span><span class="token comment">//删除age属性</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xiaoming<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>用<code>in</code>操作符可以检查对象是否拥有某个属性（包括继承属性）：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> xiaoming<span class="token operator">=</span><span class="token punctuation">&#123;</span>
    name<span class="token operator">:</span><span class="token string">'小明'</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token keyword">in</span> xiaoming<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'age'</span> <span class="token keyword">in</span> xiaoming<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>用<code>hasOwnProperty()</code>方法可以可以检查对象自身是否拥有某个属性：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> xiaoming<span class="token operator">=</span><span class="token punctuation">&#123;</span>
    name<span class="token operator">:</span><span class="token string">'小明'</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xiaoming<span class="token punctuation">.</span><span class="token function">hasOwenProperty</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xiaoming<span class="token punctuation">.</span><span class="token function">hasOwenProperty</span><span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h1><p>JavaScript使用<code>if()&#123;...&#125;else&#123;...&#125;</code>来进行条件判断，如：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> age<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>age<span class="token operator">>=</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'adult'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'teenager'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="多行条件判断"><a href="#多行条件判断" class="headerlink" title="多行条件判断"></a>多行条件判断</h2><p>使用多个<code>if...else if...else...</code>组合可以进行更细致的判断：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> age<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>age<span class="token operator">>=</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'adult'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>age<span class="token operator">>=</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'teenager'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'kid'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>JavaScript把<code>null</code>、<code>undefined</code>、<code>0</code>、<code>NaN</code>和空字符串<code>&#39;&#39;</code>视为false，其他值一概视为true。</p>
<h2 id="练习题-3"><a href="#练习题-3" class="headerlink" title="练习题"></a>练习题</h2><p>小明身高1.75，体重80.5kg。请根据BMI公式（体重除以身高的平方）帮小明计算他的BMI指数，并根据BMI指数：</p>
<ul>
<li>低于18.5：过轻</li>
<li>18.5-25：正常</li>
<li>25-28：过重</li>
<li>28-32：肥胖</li>
<li>高于32：严重肥胖</li>
</ul>
<p>用<code>if...else...</code>判断并显示结果：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> height<span class="token operator">=</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">'请输入身高(m):'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> weight<span class="token operator">=</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">'请输入体重(kg):'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> bmi<span class="token operator">=</span>weight<span class="token operator">/</span><span class="token punctuation">(</span>height<span class="token operator">*</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>bmi<span class="token operator">&lt;</span><span class="token number">18.5</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'过轻'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>bmi<span class="token operator">>=</span><span class="token number">18.5</span><span class="token operator">&amp;&amp;</span>bmi<span class="token operator">&lt;</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'正常'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>bmi<span class="token operator">>=</span><span class="token number">25</span><span class="token operator">&amp;&amp;</span>bmi<span class="token operator">&lt;</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'过重'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>bmi<span class="token operator">>=</span><span class="token number">28</span><span class="token operator">&amp;&amp;</span>bmi<span class="token operator">&lt;</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'肥胖'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'严重肥胖'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">/*运行结果如下：
过重*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h1><p>JavaScript的循环有两种，一种是for循环，另一种是while循环。</p>
<h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> i<span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">10000</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    x<span class="token operator">=</span>x<span class="token operator">+</span>i<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回50005000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="练习题-4"><a href="#练习题-4" class="headerlink" title="练习题"></a>练习题</h2><p>利用<code>for</code>循环计算<code>1 * 2 * 3 * ... * 10</code>的结果：</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json">var x&#x3D;1;
var i;
for (i&#x3D;1;i&lt;&#x3D;10;i++)&#123;
    x&#x3D;x*i;
&#125;if (x &#x3D;&#x3D;&#x3D; 3628800) &#123;
    console.log(&#39;1 x 2 x 3 x ... x 10 &#x3D; &#39; + x);
&#125;else &#123;
    console.log(&#39;计算错误&#39;);
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>for循环的3个条件是可以省略的，<code>for(;;)</code>将无限循环下去，为了避免死循环，此时可以使用break语句退出循环。</p>
<h2 id="for-in"><a href="#for-in" class="headerlink" title="for...in"></a><code>for...in</code></h2><p>for循环的一个变体是<code>for...in</code>循环，它可以把一个对象的所有属性依次循环出来：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token punctuation">&#123;</span>
    name<span class="token operator">:</span><span class="token string">'Jack'</span><span class="token punctuation">,</span>
    age<span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">,</span>
    city<span class="token operator">:</span><span class="token string">'Beijing'</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">/*运行结果如下：
name
age
city
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可用<code>hasOwnProperty()</code>过滤掉继承属性：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token punctuation">&#123;</span>
    name<span class="token operator">:</span><span class="token string">'Jack'</span><span class="token punctuation">,</span>
    age<span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">,</span>
    city<span class="token operator">:</span><span class="token string">'Beijing'</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">/*运行结果如下：
name
age
city
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>for...in</code>循环也可以直接循环出Array的索引：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">/*运行结果如下：
0
A
1
B
2
C
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="while"><a href="#while" class="headerlink" title="while"></a>while</h2><p>while循环只有一个判断条件，条件满足就不断循环，条件不满足则退出循环：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> n<span class="token operator">=</span><span class="token number">99</span><span class="token punctuation">;</span>
<span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    x<span class="token operator">=</span>x<span class="token operator">+</span>n<span class="token punctuation">;</span>
    n<span class="token operator">=</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*运行结果如下：
2500
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="do-while"><a href="#do-while" class="headerlink" title="do...while"></a><code>do...while</code></h2><p><code>do...while</code>与while循环的唯一区别在于，<code>do...while</code>在每次循环完成时判断条件：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">do</span><span class="token punctuation">&#123;</span>
    n<span class="token operator">=</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*运行结果如下：
100
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="练习题-5"><a href="#练习题-5" class="headerlink" title="练习题"></a>练习题</h2><p>请利用循环遍历数组中的每个名字，并显示<code>Hello, xxx!</code>。请尝试<code>for</code>循环和<code>while</code>循环，并以正序、倒序两种方式遍历：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Bart'</span><span class="token punctuation">,</span> <span class="token string">'Lisa'</span><span class="token punctuation">,</span> <span class="token string">'Adam'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">//for循环正序</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Hello, '</span><span class="token operator">+</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'for循环正序'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//for循环倒序</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span>arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Hello, '</span><span class="token operator">+</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'for循环倒序'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//while循环正序</span>
<span class="token keyword">var</span> t<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">&lt;=</span>arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Hello, '</span><span class="token operator">+</span>arr<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    t<span class="token operator">=</span>t<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'while循环正序'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//while循环倒序</span>
<span class="token keyword">var</span> n<span class="token operator">=</span>arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span>
<span class="token keyword">do</span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Hello, '</span><span class="token operator">+</span>arr<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    n<span class="token operator">=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'while循环倒序'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="Map和Set"><a href="#Map和Set" class="headerlink" title="Map和Set"></a>Map和Set</h1><p>JavaScript的默认对象表示方式<code>&#123;&#125;</code>可以视为其他语言中的Map的数据结构。但JavaScript的对象，其键必须是字符串，实际上Number或其他数据类型作为键也是合理的。</p>
<p>为解决这种情况，ES6规范引入了新的数据类型Map。</p>
<p>以下代码可以测试浏览器是否支持ES6规范，若报错则不支持：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'你的浏览器支持Map和Set！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p>Map是一组键值对的结构，具有极快的查找速度：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> m<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'Michael'</span><span class="token punctuation">,</span><span class="token number">95</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'Bob'</span><span class="token punctuation">,</span><span class="token number">75</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'Tracy'</span><span class="token punctuation">,</span><span class="token number">85</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'Michael'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*运行结果如下：
95*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>初始化Map需要两个二维数组，或者直接初始化一个空Map。Map具有以下方法：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> m<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//空Map</span>
m<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'Adam'</span><span class="token punctuation">,</span><span class="token number">67</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//添加一个新的键值</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">'Adam'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//是否存在key'Adam'</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'Adam'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取key'Adam'的值，返回67</span>
m<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">'Adam'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除key'Adam'</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'Adam'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>由于一个key只能对应一个value，依次多次对一个key放入value，后面的值会把前面的值顶掉。</p>
<h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p>Set和Map类似，也是一组key的集合，但Set不存储value。Set中没有重复的key。</p>
<p>创建一个Set，需要提供一个Array作为输入，或者直接初始化一个空Set：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> s<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//空Set</span>
<span class="token keyword">var</span> ss<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//含1,2,3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>Set具有以下方法：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
a<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//添加元素4到set中</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回Set&#123;4, 1, 2, 3&#125;</span>
a<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//重复添加元素</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//自动过滤重复元素。返回Set&#123;4, 1, 2, 3&#125;</span>
a<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除set中的元素3</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Set&#123;1, 2, 4&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="iterable"><a href="#iterable" class="headerlink" title="iterable"></a>iterable</h1><p>遍历Array可以采用下标循环，而Set和Map无法使用 下标。为了统一集合类型，ES6引入了iterable类型。Array、Map和Set都属于iterable类型。</p>
<p>具有iterable类型的集合可以通过<code>for...of</code>循环来遍历，可以通过以下代码测试浏览器是否支持<code>for...of</code>循环：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> x <span class="token keyword">of</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token punctuation">&#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'你的浏览器支持for ... of'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>用<code>for...of</code>循环遍历集合，用法如下：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> s<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> m<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'x'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'y'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'z'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> x <span class="token keyword">of</span> a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//遍历数组</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> x <span class="token keyword">of</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//遍历Set</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> x <span class="token keyword">of</span> m<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//遍历Map</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'='</span><span class="token operator">+</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">/*运行结果如下：
A
B
C
A
B
C
1=x
2=y
3=z*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>当给<code>Array</code>对象添加了额外的属性后，使用<code>for ... in</code>循环会有意想不到的意外效果：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
a<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Hello'</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> x <span class="token keyword">in</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span>
<span class="token comment">/*运行结果如下：
0
1
2
name
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>for ... in</code>循环将把<code>name</code>包括在内，但<code>Array</code>的<code>length</code>属性却不包括在内。</p>
<p><code>for ... of</code>循环则完全修复了这些问题，它只循环集合本身的元素：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
a<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Hello'</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> x <span class="token keyword">of</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">/*运行结果如下：
A
B
C
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>还可以使用ES5.1引入的<code>iterable</code>内置<code>forEach</code>方法，它接收一个函数，每次迭代就自动回调该函数：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
a<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span>index<span class="token punctuation">,</span>array</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>element<span class="token operator">+</span><span class="token string">', index='</span><span class="token operator">+</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//element指向当前元素的值，index指向当前索引，array指向array对象本身</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>Set</code>与Array类似，但<code>Set</code>没有索引，因此回调函数的前两个参数都是元素本身。</p>
<p><code>Map</code>的回调函数参数依次为<code>value</code>、<code>key</code>和<code>map</code>本身。</p>
<p>由于JavaScript的函数调用不要求参数必须一致，因此可以忽略部分参数，如只需要获得Array的<code>element</code>。</p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>前端三件套之CSS（一）</title>
    <url>/2022/10/28/%E5%89%8D%E7%AB%AF%E4%B8%89%E4%BB%B6%E5%A5%97%E4%B9%8BCSS%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="CSS简介"><a href="#CSS简介" class="headerlink" title="CSS简介"></a>CSS简介</h1><p>CSS指层叠样式表，样式定义如何显示HTML元素。</p>
<p>样式对网页中元素位置的排版进行像素级精确控制。</p>
<p>样式通常存储在样式表中，外部样式表通常存储在CSS文件中。</p>
<p>多个样式定义可以层叠为一个，即对一个元素多次设置同一个样式，将使用最后一次设置的属性值。</p>
<p>所有样式根据以下规则层叠于一个新的虚拟样式表中，其中数字4拥有最高的优先权。即意味着它将优先于以下的样式声明：</p>
<ol>
<li>浏览器缺省设置</li>
<li>外部样式表</li>
<li>内部样式表（位于<code>&lt;head&gt;</code>标签内部）</li>
<li>内联样式（在HTML元素内部）</li>
</ol>
<h1 id="CSS语法"><a href="#CSS语法" class="headerlink" title="CSS语法"></a>CSS语法</h1><p>CSS规则由两个主要的部分构成：选择器，以及一条或多条声明，语法如下：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">selector</span><span class="token punctuation">&#123;</span>
    <span class="token property">property</span><span class="token punctuation">:</span>value<span class="token punctuation">;</span>    
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>选择器通常是需要改变样式的HTML元素，每条声明由一个属性和一个值组成。每个属性有一个值，属性和值被冒号分开，例如：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">p</span><span class="token punctuation">&#123;</span>
    <span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="CSS颜色值的写法"><a href="#CSS颜色值的写法" class="headerlink" title="CSS颜色值的写法"></a>CSS颜色值的写法</h2><p>在描述颜色时，除了使用英文单词，还可以使用十六进制颜色值。</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">p</span><span class="token punctuation">&#123;</span>
    <span class="token property">color</span><span class="token punctuation">:</span>#FF0000<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>为了节约字节，可以使用CSS的缩写形式：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">p</span><span class="token punctuation">&#123;</span>
    <span class="token property">color</span><span class="token punctuation">:</span>#F00<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>除此之外，还可以通过两种方法使用RGB值，当使用RGB百分比时，即使值为0也要写百分比符号。：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">p</span><span class="token punctuation">&#123;</span>
    <span class="token property">color</span><span class="token punctuation">:</span><span class="token function">rgb</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token selector">p</span><span class="token punctuation">&#123;</span>
    <span class="token property">color</span><span class="token punctuation">:</span><span class="token function">rgb</span><span class="token punctuation">(</span>100%<span class="token punctuation">,</span>0%<span class="token punctuation">,</span>0%<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="CSS注释"><a href="#CSS注释" class="headerlink" title="CSS注释"></a>CSS注释</h2><p>CSS注释以”<code>/*</code>“开始，以”<code>*/</code>“结束。</p>
<h1 id="Id和Class选择器"><a href="#Id和Class选择器" class="headerlink" title="Id和Class选择器"></a>Id和Class选择器</h1><h2 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h2><p>id选择器可以为标有特定id的HTML元素指定特定的样式。</p>
<p>HTML元素以id属性来设置id选择器，CSS中id选择器以<code>#</code>号来显示：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#para1</span><span class="token punctuation">&#123;</span>
    <span class="token property">text-align</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>id属性不要以数字开头，数字开头的id在Mozilla/Firefox浏览器中不起作用。</p>
<p>id属性只能在每个HTML文档中出现一次。</p>
<h2 id="class类选择器"><a href="#class类选择器" class="headerlink" title="class类选择器"></a>class类选择器</h2><p>class选择器用于描述一组元素的样式，class选择器有别于id选择器，class可以在多个元素中使用。</p>
<p>class选择器在HTML中以class属性表示，在CSS中类选择器以一个点<code>.</code>号来显示：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.center</span><span class="token punctuation">&#123;</span>
    <span class="token property">text-align</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">/*也可以指定特定的HTML元素使用class,如指定所有p元素使用class="center"*/</span>
<span class="token selector">p.center</span><span class="token punctuation">&#123;</span>
    <span class="token property">text-align</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>类名不要以数字开头，数字开头的id在Mozilla/Firefox浏览器中不起作用。</p>
<h2 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h2><p>以HTML标签作为CSS修饰多用的选择器：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">&lt;style>
h3</span><span class="token punctuation">&#123;</span>
    <span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
&lt;/style>
&lt;h3>hello world!&lt;/h3><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="内联选择器"><a href="#内联选择器" class="headerlink" title="内联选择器"></a>内联选择器</h2><p>直接在标签内部写CSS代码：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css">color red<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>
    hello world!
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>这四种CSS选择器有修饰上的优先级，即：</p>
<p>内联选择器&gt;id选择器&gt;类选择器&gt;标签选择器。</p>
<h1 id="样式优先级"><a href="#样式优先级" class="headerlink" title="样式优先级"></a>样式优先级</h1><h2 id="多重样式优先级顺序"><a href="#多重样式优先级顺序" class="headerlink" title="多重样式优先级顺序"></a>多重样式优先级顺序</h2><p>下列是一份优先级逐级减少的选择器列表，其中数字1拥有最高的优先权：</p>
<ol>
<li>内联样式</li>
<li>id选择器</li>
<li>伪类</li>
<li>属性选择器</li>
<li>类选择器</li>
<li>元素（类型）选择器</li>
<li>通用选择器（*）</li>
</ol>
<h2 id="important规则例外"><a href="#important规则例外" class="headerlink" title="!important规则例外"></a><code>!important</code>规则例外</h2><p>当<code>!important</code>规则被应用在一个样式声明中时，无论它处在声明列表中的哪里，该样式声明会覆盖CSS中任何其他的声明。</p>
<p>注意：只在需要覆盖全站或外部CSS的特定页面中使用<code>!important</code>，不要在全站范围的CSS上使用<code>!important</code>，不要在插件中使用<code>!important</code>。</p>
<h2 id="优先级法则"><a href="#优先级法则" class="headerlink" title="优先级法则"></a>优先级法则</h2><p><strong>各CSS样式的权值：</strong></p>
<p>内联样式的权值：1000</p>
<p>id选择器（#id）的权值：100</p>
<p>类选择器（.类）的权值：10</p>
<p>元素选择器（元素名）的权值：1</p>
<p><strong>CSS优先级法则：</strong></p>
<ul>
<li>选择器都有一个权值，权值越大越优先</li>
<li>当权值相等时，后出现的样式表设置要优于先出现的样式表设置</li>
<li>网页编写者设置的CSS样式的优先权高于浏览器所设置的样式</li>
<li>继承的CSS样式不如后来指定的CSS样式</li>
<li>在同一组属性设置中标有“<code>!important</code>”规则的优先级最大</li>
</ul>
<h1 id="CSS设置背景"><a href="#CSS设置背景" class="headerlink" title="CSS设置背景"></a>CSS设置背景</h1><p>CSS背景用于定义HTML元素的背景。</p>
<p>CSS属性定义背景效果：</p>
<ul>
<li>background-color:背景颜色</li>
<li>background-image：背景图像</li>
<li>background-repeat：背景是否重复、如何重复</li>
<li>background-attachment：背景图像是否固定或随着页面的其余部分滚动</li>
<li>background-position：背景图像的起始位置</li>
</ul>
<h2 id="background-color"><a href="#background-color" class="headerlink" title="background-color"></a>background-color</h2><p>background-color属性定义了元素的背景颜色。background-color属性不能继承，默认值是透明<code>transparent</code>。</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body</span><span class="token punctuation">&#123;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span>#FF0000<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="background-image"><a href="#background-image" class="headerlink" title="background-image"></a>background-image</h2><p>background-image属性描述了元素的背景图像。</p>
<p>默认情况下背景图像进行平铺重复显示，以覆盖整个元素实体，默认在页面的水平或垂直方向平铺。</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body</span><span class="token punctuation">&#123;</span>
    <span class="token property">background-image</span><span class="token punctuation">:</span><span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'图片名字'</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="background-repeat"><a href="#background-repeat" class="headerlink" title="background-repeat"></a>background-repeat</h2><p>background-repeat属性可以取消图像平铺，或指定只在某个方向上平铺：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body</span><span class="token punctuation">&#123;</span>
    <span class="token property">background-image</span><span class="token punctuation">:</span><span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'图片名字'</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span>
    <span class="token property">background-repeat</span><span class="token punctuation">:</span>no-repeat<span class="token punctuation">;</span><span class="token comment">/*取消平铺*/</span>
    <span class="token comment">/*background-repeat:repeat-x; 只在水平方向平铺*/</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="background-position"><a href="#background-position" class="headerlink" title="background-position"></a>background-position</h2><p>background-position属性可以改变图像在背景中的位置，其属性值可以使用一些关键字top、bottom、left、right和center等，也可以使用如100px或5cm的长度值，还可以只有百分比数值：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body</span><span class="token punctuation">&#123;</span>
    <span class="token property">background-image</span><span class="token punctuation">:</span><span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'图片名字'</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span>
     <span class="token property">background-image</span><span class="token punctuation">:</span>no-repeat<span class="token punctuation">;</span>
    <span class="token property">background-position</span><span class="token punctuation">:</span>right top<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="背景属性简写"><a href="#背景属性简写" class="headerlink" title="背景属性简写"></a>背景属性简写</h2><p>以上代码的属性都可以合并在一个属性background中：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body</span><span class="token punctuation">&#123;</span>
    <span class="token property">background</span><span class="token punctuation">:</span>#FF0000 <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'图片名字'</span><span class="token punctuation">)</span></span> no-repeat right top
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>使用简写属性时，属性值的顺序为：</p>
<ol>
<li>background-color</li>
<li>background-image</li>
<li>background-repeat</li>
<li>background-attachment</li>
<li>background-position</li>
</ol>
<h1 id="Text（文本）"><a href="#Text（文本）" class="headerlink" title="Text（文本）"></a>Text（文本）</h1><h2 id="文本颜色"><a href="#文本颜色" class="headerlink" title="文本颜色"></a>文本颜色</h2><p>颜色属性可用来设置文字的颜色，如：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">h1</span><span class="token punctuation">&#123;</span>
    <span class="token property">color</span><span class="token punctuation">:</span>#00ff00<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>对于W3C标准的CSS，若定义了颜色属性，还必须定义背景色属性。</p>
<h2 id="文本的对齐方式"><a href="#文本的对齐方式" class="headerlink" title="文本的对齐方式"></a>文本的对齐方式</h2><p>文本排列属性是用来设置文本的水平对齐方式，文本可居中或对齐到左或右或两端对齐。</p>
<p>当<code>text-align</code>设置为<code>justify</code>时，每一行被展开为宽度相等，左右外边距对齐：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">h1</span><span class="token punctuation">&#123;</span>
    <span class="token property">text-align</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">p.date</span><span class="token punctuation">&#123;</span>
    <span class="token property">text-align</span><span class="token punctuation">:</span>right<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">p.main</span><span class="token punctuation">&#123;</span>
    <span class="token property">text-align</span><span class="token punctuation">:</span>justify<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>若想把一个行内元素的第一行“缩进”，可用左内边距或外边距创造这种效果。</p>
<h2 id="文本修饰"><a href="#文本修饰" class="headerlink" title="文本修饰"></a>文本修饰</h2><p><code>text-decoration</code>属性用来设置或删除文本的装饰，主要用来删除链接的下划线：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">a</span><span class="token punctuation">&#123;</span>
    <span class="token property">text-decoration</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">h1</span><span class="token punctuation">&#123;</span>
    <span class="token property">text-decoration</span><span class="token punctuation">:</span>overline<span class="token punctuation">;</span><span class="token comment">/*横线在文字上方*/</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">h2</span><span class="token punctuation">&#123;</span>
    <span class="token property">text-decoration</span><span class="token punctuation">:</span>line-through<span class="token punctuation">;</span><span class="token comment">/*横线贯穿文字*/</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">h3</span><span class="token punctuation">&#123;</span>
    <span class="token property">text-decoration</span><span class="token punctuation">:</span>underline<span class="token punctuation">;</span><span class="token comment">/*横线在文字下方*/</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="文本转换"><a href="#文本转换" class="headerlink" title="文本转换"></a>文本转换</h2><p><code>text-transform</code>属性是用来指定在一个文本中的大写和小写字母，可用于所有字句变成大写或小写字母，或每个单词的首字母大写：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">p.uppercase</span><span class="token punctuation">&#123;</span>
    <span class="token property">text-transform</span><span class="token punctuation">:</span>uppercase<span class="token punctuation">;</span><span class="token comment">/*文字全大写*/</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">p.lowercase</span><span class="token punctuation">&#123;</span>
    <span class="token property">text-transform</span><span class="token punctuation">:</span>lowercase<span class="token punctuation">;</span><span class="token comment">/*文字全小写*/</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">p.capitalize</span><span class="token punctuation">&#123;</span>
    <span class="token property">text-transform</span><span class="token punctuation">:</span>capitalize<span class="token punctuation">;</span><span class="token comment">/*文字首字母大写*/</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="文本缩进"><a href="#文本缩进" class="headerlink" title="文本缩进"></a>文本缩进</h2><p><code>text-indent</code>属性用来指定文本的第一行缩进：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">p</span><span class="token punctuation">&#123;</span>
    <span class="token property">text-indent</span><span class="token punctuation">:</span>50px<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="文字间隔"><a href="#文字间隔" class="headerlink" title="文字间隔"></a>文字间隔</h2><p><code>word-spacing</code>属性可以改变字或单词之间的标准间隔（不是每个字之间，以回车键为分隔符），其默认值normal与设置值为0是一样的：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">p</span><span class="token punctuation">&#123;</span>
    <span class="token property">word-spacing</span><span class="token punctuation">:</span>30px<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h1 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h1><p>字体系列有两种类型：</p>
<ul>
<li><p>通用字体系列：拥有相似外观的字体系统组合（如”Serif”或”Monospace”）</p>
</li>
<li><p>特定字体系列：一个特定的字体系列（如“Times”或“Courier”）</p>
</li>
</ul>
<p>除了各种特定的字体系列外，CSS定义了5种通用字体系列：</p>
<ul>
<li>Serif字体</li>
<li>Sans-serif字体</li>
<li>Monospace字体</li>
<li>Cursive字体</li>
<li>Fantasy字体</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">Generic family</th>
<th style="text-align:left">字体系列</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Serif</td>
<td style="text-align:left">Times New Roman Georgia</td>
<td style="text-align:left">Serif字体中字符在行的末端拥有额外的装饰</td>
</tr>
<tr>
<td style="text-align:left">Sans-serif</td>
<td style="text-align:left">Arial Verdana</td>
<td style="text-align:left">“Sans”是指无 - 这些字体在末端没有额外的装饰</td>
</tr>
<tr>
<td style="text-align:left">Monospace</td>
<td style="text-align:left">Courier New Lucida Console</td>
<td style="text-align:left">所有的等宽字符具有相同的宽度</td>
</tr>
</tbody>
</table>
</div>
<h2 id="字体系列"><a href="#字体系列" class="headerlink" title="字体系列"></a>字体系列</h2><p><code>font-family</code>属性设置文本的字体系列。</p>
<p><code>font-family</code>属性应该设置几个字体名称作为备用，若浏览器不支持第一种字体会尝试下一种字体。若字体系列的名称超过一种，第一个字体必须用引号：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">p</span><span class="token punctuation">&#123;</span>
    <span class="token property">font-family</span><span class="token punctuation">:</span><span class="token string">"Times New Roman"</span><span class="token punctuation">,</span>Times<span class="token punctuation">,</span>serif<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="字体样式"><a href="#字体样式" class="headerlink" title="字体样式"></a>字体样式</h2><p><code>font-style</code>属性主要用于指定斜体文字的字体样式。</p>
<p>该属性有三个值：</p>
<ul>
<li>正常normal：正常显示文本</li>
<li>斜体italic：以斜体字显示的文字</li>
<li>倾斜的文字oblique：文字向一边倾斜</li>
</ul>
<p>通常情况下italic与oblique在web浏览器种看上去完全一样。</p>
<p>italic与oblique的区别：</p>
<ul>
<li>italic是一种简单的文字风格，对每个字母的结果有一些小改动，来反映变化的外观</li>
<li>oblique文本是正常竖直文本的一个倾斜版本</li>
</ul>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">p.normal</span><span class="token punctuation">&#123;</span>
    <span class="token property">font-style</span><span class="token punctuation">:</span>normal<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">p.italic</span><span class="token punctuation">&#123;</span>
    <span class="token property">font-style</span><span class="token punctuation">:</span>italic<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">p.oblique</span><span class="token punctuation">&#123;</span>
    <span class="token property">font-style</span><span class="token punctuation">:</span>oblique<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="字体大小"><a href="#字体大小" class="headerlink" title="字体大小"></a>字体大小</h2><p><code>font-size</code>属性设置文本的大小，若不指定一个字体的大小，则默认大小和普通文本段落一样，是16像素（16px=1em），字体大小的值可以是绝对或相对的大小。</p>
<p>绝对大小：</p>
<ul>
<li>设置一个指定大小的文本</li>
<li>不允许用户在所有浏览器中改变文本大小</li>
<li>确定了输出的物理尺寸时，绝对大小很有用</li>
</ul>
<p>相对大小：</p>
<ul>
<li>相对于周围的元素来设置大小</li>
<li>允许用户在浏览器中改变文字的大小。</li>
</ul>
<h2 id="用像素设置字体大小"><a href="#用像素设置字体大小" class="headerlink" title="用像素设置字体大小"></a>用像素设置字体大小</h2><p>用像素可以在IE9、Firefox、Chrome、Opera和Safa里调整文本大小，不能在IE9以前的版本运行。通过浏览器缩放工具调整文本大小时，整个页面也随之变化。</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">p</span><span class="token punctuation">&#123;</span>
    <span class="token property">font-size</span><span class="token punctuation">:</span>40px<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="用em设置字体大小"><a href="#用em设置字体大小" class="headerlink" title="用em设置字体大小"></a>用em设置字体大小</h2><p>默认1em=16px，当<code>font-size</code>为30px时，1em=30px。使用em单位可以在所有浏览器中调整文本大小。通过浏览器缩放工具调整文本大小时，会比正常的尺寸更大或更小。</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">p</span><span class="token punctuation">&#123;</span>
    <span class="token property">font-size</span><span class="token punctuation">:</span>2.5em<span class="token punctuation">;</span><span class="token comment">/*40px/16=2.5em*/</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="使用百分比和em组合"><a href="#使用百分比和em组合" class="headerlink" title="使用百分比和em组合"></a>使用百分比和em组合</h2><p>在所有浏览器的解决方案中，先设置<code>&lt;body&gt;</code>元素的默认大小是百分比，再用em设置其他元素的字体大小。这样可以在所有浏览器中显示相同的文本大小，并允许所有浏览器缩放文本的大小：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body</span><span class="token punctuation">&#123;</span>
    <span class="token property">font-size</span><span class="token punctuation">:</span>100%<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">p</span><span class="token punctuation">&#123;</span>
    <span class="token property">font-size</span><span class="token punctuation">:</span>2.5em<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="链接样式"><a href="#链接样式" class="headerlink" title="链接样式"></a>链接样式</h1><p>链接的样式可以用任何CSS属性，链接a具有四个链接状态：</p>
<ul>
<li><code>a:link</code>：正常，未访问过的链接</li>
<li><code>a:visited</code>：用户已访问过的链接</li>
<li><code>a:hover</code>：当用户鼠标放在链接上时</li>
<li><code>a:active</code>：链接被点解的哪一刻</li>
</ul>
<p>当设置为若干链路状态的样式时，要注意：</p>
<ul>
<li><code>a:hover</code>必须跟在<code>a.link</code>和<code>a.visited</code>后面</li>
<li><code>a:active</code>必须跟在<code>a:hover</code>后面</li>
</ul>
<h2 id="背景颜色"><a href="#背景颜色" class="headerlink" title="背景颜色"></a>背景颜色</h2><p>背景颜色属性指定链接背景色：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">a.link</span><span class="token punctuation">&#123;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span>#FF704D<span class="token punctuation">;</span>
    <span class="token property">text-decoration</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span><span class="token comment">/*删除链接中的下划线*/</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="鼠标形状"><a href="#鼠标形状" class="headerlink" title="鼠标形状"></a>鼠标形状</h2><p>使用cursor属性可以设置鼠标形状。</p>
<p>常用鼠标形状如下所示：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">属性值</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">default</td>
<td style="text-align:left">默认光标，箭头</td>
</tr>
<tr>
<td style="text-align:left">pointer</td>
<td style="text-align:left">超链接的指针，手型</td>
</tr>
<tr>
<td style="text-align:left">wait</td>
<td style="text-align:left">指示程序正在忙</td>
</tr>
<tr>
<td style="text-align:left">help</td>
<td style="text-align:left">指示可用的帮忙</td>
</tr>
<tr>
<td style="text-align:left">text</td>
<td style="text-align:left">指示文本</td>
</tr>
<tr>
<td style="text-align:left">crosshair</td>
<td style="text-align:left">鼠标呈现十字状</td>
</tr>
</tbody>
</table>
</div>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">a:hover</span><span class="token punctuation">&#123;</span>
    <span class="token property">color</span><span class="token punctuation">:</span>green<span class="token punctuation">;</span>
    <span class="token property">cursor</span><span class="token punctuation">:</span>crosshair<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="列表样式"><a href="#列表样式" class="headerlink" title="列表样式"></a>列表样式</h1><p>CSS列表可以设置不同的列表项标记为有序列表或无序列表，设置列表项标记为图像。</p>
<h2 id="不同的列表项标记"><a href="#不同的列表项标记" class="headerlink" title="不同的列表项标记"></a>不同的列表项标记</h2><p><code>list-style-type</code>属性指定列表项标记的类型：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">ul.a</span><span class="token punctuation">&#123;</span>
    <span class="token property">list-style-type</span><span class="token punctuation">:</span>circle<span class="token punctuation">;</span><span class="token comment">/*空心圆标记*/</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">ul.b</span><span class="token punctuation">&#123;</span>
    <span class="token property">list-style-type</span><span class="token punctuation">:</span>square<span class="token punctuation">;</span><span class="token comment">/*实心方块标记*/</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">ol.c</span><span class="token punctuation">&#123;</span>
    <span class="token property">list-style-type</span><span class="token punctuation">:</span>upper-roman<span class="token punctuation">;</span><span class="token comment">/*大写罗马数字标记*/</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">ol.d</span><span class="token punctuation">&#123;</span>
    <span class="token property">list-style-type</span><span class="token punctuation">:</span>lower-alpha<span class="token punctuation">;</span><span class="token comment">/*小写英文字母标记*/</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>list-style-type</code>属性的常见属性值有：</p>
<p>none：不使用项目符号</p>
<p>disc：实心圆</p>
<p>circle：空心圆</p>
<p>square：实心方块</p>
<p>decimal：阿拉伯数字</p>
<p>lower-alpha：小写英文字母</p>
<p>upper-alpha：大写英文字母</p>
<p>lower-roman：小写罗马数字</p>
<p>upper-roman：大写罗马数字</p>
<h2 id="作为列表项标记的图像"><a href="#作为列表项标记的图像" class="headerlink" title="作为列表项标记的图像"></a>作为列表项标记的图像</h2><p>使用列表样式<code>list-style-image</code>属性可以指定列表项标记的图像：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">ul</span><span class="token punctuation">&#123;</span>
    <span class="token property">list-style-image</span><span class="token punctuation">:</span><span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'图像名称'</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>各大主流浏览器对图像标记的显示各有差异，IE和Opera显示标记比Firefox、Chrome和Safari更高一点。</p>
<h2 id="标记出现位置"><a href="#标记出现位置" class="headerlink" title="标记出现位置"></a>标记出现位置</h2><p><code>list-style-position</code>属性可以指定标志出现在列表项内容外（outside）还是内容内部（inside）：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">ul</span><span class="token punctuation">&#123;</span>
    <span class="token property">list-style-position</span><span class="token punctuation">:</span>outside<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="简写属性"><a href="#简写属性" class="headerlink" title="简写属性"></a>简写属性</h2><p>与背景属性类似，列表属性也可以在单个属性<code>list-style</code>中指定所有的列表属性：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">ul</span><span class="token punctuation">&#123;</span>
    <span class="token property">list-style</span><span class="token punctuation">:</span>square <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">"图片名称"</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>使用简写属性值的顺序是：</p>
<ol>
<li><code>list-style-type</code></li>
<li><code>list-style-position</code></li>
<li><code>list-style-image</code></li>
</ol>
<h2 id="浏览器兼容性解决方案"><a href="#浏览器兼容性解决方案" class="headerlink" title="浏览器兼容性解决方案"></a>浏览器兼容性解决方案</h2><p>若想要在所有浏览器放置同样的标志，应解决浏览器的兼容性问题。</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">ul</span><span class="token punctuation">&#123;</span>
    <span class="token property">list-style-type</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token comment">/*设置列表样式类型为无列表项标记*/</span>
    <span class="token property">padding</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span><span class="token comment">/*设置填充和边距0px，确保能在浏览器之间兼容*/</span>
    <span class="token property">margin</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">ul li</span><span class="token punctuation">&#123;</span>
    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>图像名称<span class="token punctuation">)</span></span><span class="token punctuation">;</span><span class="token comment">/*设置图像并设置它只显示一次*/</span>
    <span class="token property">background-repeat</span><span class="token punctuation">:</span> no-repeat<span class="token punctuation">;</span>
    <span class="token property">background-position</span><span class="token punctuation">:</span> 0px 5px<span class="token punctuation">;</span><span class="token comment">/*定位图像位置*/</span>
    <span class="token property">padding-left</span><span class="token punctuation">:</span> 14px<span class="token punctuation">;</span><span class="token comment">/*把文本置于列表中*/</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>即解决浏览器兼容性问题可以从四个方面着手：浏览器CSS样式初始化、浏览器私有属性、CSS hack语法和自动化插件。</p>
<h3 id="浏览器CSS样式初始化"><a href="#浏览器CSS样式初始化" class="headerlink" title="浏览器CSS样式初始化"></a>浏览器CSS样式初始化</h3><p>在所有CSS开始前，先把margin和padding都设为0：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">*</span><span class="token punctuation">&#123;</span>
    <span class="token property">margin</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>
    <span class="token property">padding</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>若不知道浏览器CSS样式要初始化哪些内容，建议直接引用<a href="https://github.com/necolas/normalize.css">Normalize.css</a>库。</p>
<h3 id="浏览器私有属性"><a href="#浏览器私有属性" class="headerlink" title="浏览器私有属性"></a>浏览器私有属性</h3><p><code>-webkit-</code>、<code>-moz-</code>、<code>-ms-</code>等是经常在CSS属性前加的一些前缀，这些就是浏览器的私有属性。</p>
<p>常用的前缀有：</p>
<ul>
<li><code>-moz</code>：代表Firefox浏览器私有属性</li>
<li><code>-ms-</code>：代表IE浏览器私有属性</li>
<li><code>-webkit</code>：代表Chrome、Safari私有属性</li>
<li><code>-o</code>：代表opera私有属性</li>
</ul>
<p>要注意书写顺序，<strong>兼容性写法放到前面，标准写法放到最后：</strong></p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">-webkit-transform</span><span class="token punctuation">:</span><span class="token function">rotate</span><span class="token punctuation">(</span>-3deg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*Chrome、Safari*/</span>
<span class="token property">-moz-transform</span><span class="token punctuation">:</span><span class="token function">rotate</span><span class="token punctuation">(</span>-3deg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*Firefox*/</span>
<span class="token property">-ms-transform</span><span class="token punctuation">:</span><span class="token function">rotate</span><span class="token punctuation">(</span>-3deg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*IE*/</span>
<span class="token property">-o-transform</span><span class="token punctuation">:</span><span class="token function">rotate</span><span class="token punctuation">(</span>-3deg<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">/*opera*/</span>
<span class="token property">transform</span><span class="token punctuation">:</span><span class="token function">rotate</span><span class="token punctuation">(</span>-3deg<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="CSS-hack"><a href="#CSS-hack" class="headerlink" title="CSS hack"></a>CSS hack</h3><p>除了以上的默认样式覆盖及私有属性添加，有时还需要针对不同浏览器甚至不同版本来编写特定的CSS样式，这一过程称之为CSS hack。在Web页面制作中尽量不要使用CSS Hack来处理兼容问题。</p>
<p>CSS hack的写法可归纳为以下几种：条件hack、属性级hack、选择符级hack。</p>
<h4 id="条件hack"><a href="#条件hack" class="headerlink" title="条件hack"></a>条件hack</h4><p>主要针对IE浏览器进行一些特殊的设置：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--[if &lt;keywords>? IE &lt;version>?]>
	代码块，可以是html、css、js
&lt;![endif]--></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>if后面跟的条件共包括6种选择方式：</p>
<ul>
<li>是否：指定是否IE或IE某个版本。关键字：空</li>
<li>大于：选择大于指定版本的IE版本。关键字：<code>gt</code></li>
<li>大于或等于：选择大于或等于指定版本的IE版本。关键字：<code>gte</code></li>
<li>小于：选择小于指定版本的IE版本。关键字：<code>lt</code></li>
<li>小于或等于：选择小于或等于指定版本的IE版本。关键字：<code>lte</code></li>
<li>非指定版本：选择除指定版本外的所有IE版本。关键字：<code>!</code></li>
</ul>
<p>这里的版本是指IE浏览器版本，如6、7、8。<strong>注意IE10及以上版本已将条件注释特性移除</strong>：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--[if IE]>
	&lt;p>在非IE中看不到这条文字&lt;/p>
&lt;![endif]--></span>

<span class="token comment">&lt;!--[if IE]>
&lt;style>
	.test&#123;
		color:red;
	&#125;
&lt;/style>
&lt;![endif]--></span>

<span class="token comment">&lt;!--[if IE 9]>
	&lt;script src="//cdn.bootcss.com/html5shiv/3.7.2/html5shiv.min.js">&lt;/script>
	&lt;script src="//cdn.bootcss.com/respond.js/1.4.2/respond.min.js">&lt;/script>
&lt;![endif]--></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="属性hack"><a href="#属性hack" class="headerlink" title="属性hack"></a>属性hack</h4><p>在CSS样式属性名前加上一些只有特定浏览器才能识别的hack前缀。</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">selector</span><span class="token punctuation">&#123;</span>
    &lt;hack>?<span class="token property">property</span><span class="token punctuation">:</span>value&lt;hack>?<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>属性取值及浏览器支持情况如下：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th>IE6</th>
<th>IE7</th>
<th>IE8</th>
<th>IE9</th>
<th>IE10</th>
<th>现代浏览器</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>*</code></td>
<td>支持</td>
<td>支持</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>+</code></td>
<td></td>
<td>支持</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>_</code></td>
<td>支持</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>!important</code></td>
<td></td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
</tr>
<tr>
<td><code>\9</code></td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
<td></td>
</tr>
<tr>
<td><code>\0</code></td>
<td></td>
<td></td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
<td></td>
</tr>
<tr>
<td><code>\9\0</code></td>
<td></td>
<td></td>
<td></td>
<td>支持</td>
<td>支持</td>
</tr>
</tbody>
</table>
</div>
<p>注意书写顺序，低版本的兼容性写法放到最后：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.test</span><span class="token punctuation">&#123;</span>
    <span class="token property">color</span><span class="token punctuation">:</span>#090\9<span class="token punctuation">;</span><span class="token comment">/*IE6-IE10*/</span>
    *<span class="token property">color</span><span class="token punctuation">:</span>#f00<span class="token punctuation">;</span><span class="token comment">/*IE6-IE7*/</span>
    <span class="token property">_color</span><span class="token punctuation">:</span>#ff0<span class="token punctuation">;</span><span class="token comment">/*IE6及更早版本*/</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="选择符级hack"><a href="#选择符级hack" class="headerlink" title="选择符级hack"></a>选择符级hack</h4><p>针对一些页面表现不一致或需要特殊对待的浏览器，在CSS选择器前加上一些只有某些特定浏览器才能识别的前缀进行hack：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">&lt;hack> selector</span><span class="token punctuation">&#123;</span>
    sRules
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>常见的选择符级hack有：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css">*html <span class="token comment">/**前缀只对IE6生效*/</span>
*+html <span class="token comment">/**+前缀只对IE7生效*/</span>
<span class="token atrule"><span class="token rule">@media</span> screen\9</span><span class="token punctuation">&#123;</span>...<span class="token punctuation">&#125;</span><span class="token comment">/*只对IE6/7生效*/</span>
<span class="token atrule"><span class="token rule">@media</span> \0screen\<span class="token punctuation">,</span>screen\9</span><span class="token punctuation">&#123;</span><span class="token selector">body</span> <span class="token punctuation">&#123;</span> <span class="token property">background</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*只对IE6/7/8有效*/</span>

<span class="token atrule"><span class="token rule">@media</span> \0screen</span> <span class="token punctuation">&#123;</span><span class="token selector">body</span> <span class="token punctuation">&#123;</span> <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*只对IE8有效*/</span>
<span class="token atrule"><span class="token rule">@media</span> screen\0</span> <span class="token punctuation">&#123;</span><span class="token selector">body</span> <span class="token punctuation">&#123;</span> <span class="token property">background</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token comment">/*只对IE8/9/10有效*/</span>
<span class="token atrule"><span class="token rule">@media</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span>0\0<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span><span class="token selector">body</span> <span class="token punctuation">&#123;</span> <span class="token property">background</span><span class="token punctuation">:</span> gray<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token comment">/*只对IE9/10有效*/</span>
<span class="token atrule"><span class="token rule">@media</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">-ms-high-contrast</span><span class="token punctuation">:</span> active<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token property">-ms-high-contrast</span><span class="token punctuation">:</span> none<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span><span class="token selector">body</span> <span class="token punctuation">&#123;</span> <span class="token property">background</span><span class="token punctuation">:</span> orange<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token comment">/*只对IE10有效*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>例如：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">*html .test</span><span class="token punctuation">&#123;</span>
    <span class="token property">color</span><span class="token punctuation">:</span>#090<span class="token punctuation">;</span><span class="token comment">/*IE6及更早版本*/</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">*+html .test</span><span class="token punctuation">&#123;</span>
    <span class="token property">color</span><span class="token punctuation">:</span>#ff0<span class="token punctuation">;</span><span class="token comment">/*IE7*/</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="自动化插件"><a href="#自动化插件" class="headerlink" title="自动化插件"></a>自动化插件</h3><p>Autoprefixer是一款自动管理浏览器前缀的插件，它可以解析CSS文件并添加浏览器前缀到CSS内容里。该插件的安装和使用可在<a href="https://juejin.cn/post/7032918076089696264">webpack指南</a>中学习。</p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>前端三件套之JavaScript（三）</title>
    <url>/2022/11/01/%E5%89%8D%E7%AB%AF%E4%B8%89%E4%BB%B6%E5%A5%97%E4%B9%8BJavaScript%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[<h1 id="标准对象"><a href="#标准对象" class="headerlink" title="标准对象"></a>标准对象</h1><p>在JavaScript的世界里，一切皆是对象。但某些对象与其他对象不太一样。为了区分对象的类型，通常用<code>typeof</code>操作符获取对象的类型：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token string">'str'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> Math<span class="token punctuation">.</span>abs<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*运行结果如下：
number
number
string
boolean
undefined
function
object
object
object
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>注意，null、Array的类型都是object，若用<code>typeof</code>将无法区分出null、Array和object。</p>
<p><strong>包装对象</strong></p>
<p>除了这些类型外，JavaScript还提供了包装对象。<code>Number</code>、<code>boolean</code>和<code>string</code>都有包装对象。包装对象用new创建：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> n<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> b<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> s<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">'str'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*运行结果如下：
Number (123)
Boolean (true)
String ('str')
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>虽然包装对象看上去和原来的值一样，但类型已经变为object了，用<code>===</code>与原始值比较会返回<code>false</code>：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> n<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> b<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> s<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">'str'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token operator">===</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token operator">===</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token operator">===</span><span class="token string">'str'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*运行结果如下：
false
false
false
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>因此，要注意以下几点：</p>
<ul>
<li>不要使用<code>new Number()</code>、<code>new Boolean()</code>、<code>new String()</code>创建包装对象</li>
<li>用<code>parseInt()</code>或<code>parseFloat()</code>来转换任意类型的<code>number</code></li>
<li>用<code>Sting()</code>来转换任意类型到<code>string</code>，或直接调用某个对象的<code>toString()</code>方法，只有<code>null</code>和<code>undedined</code>没有<code>toString()</code>方法，number对象调用<code>toString()</code>要写成：<code>123..toString();</code>或<code>(123).toStirng();</code></li>
<li>通常不用把任意类型转换为<code>boolean</code>再判断</li>
<li>用<code>typeof</code>可以判断出<code>number</code>、<code>boolean</code>、<code>string</code>、<code>function</code>和<code>undefined</code></li>
<li>判断Array要用<code>Array.isArray(arr)</code></li>
<li>判断null要用<code>myvar===null</code></li>
<li>判断某个全局变量是否存在用<code>typeof window.myvar===&#39;undefined&#39;</code></li>
<li>函数内部判断某个变量是否存在用<code>typeof myvar===&#39;undefined&#39;</code></li>
</ul>
<h2 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h2><p>在JavaScript里，Date对象用来表示日期和时间。</p>
<p>用Date获取系统时间：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> now<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//显示当前的时间</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//显示今年</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//显示这个月，月份范围是0~11，10表示11月</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//显示今天多少号</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//显示今天星期几</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//显示现在几时，24小时制</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//显示现在是多少分钟</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//显示现在是多少秒</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">getMilliseconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//显示现在是多少毫秒</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//以number形式表示的时间戳</span>

<span class="token comment">/*运行结果如下：
Tue Nov 01 2022 11:01:14 GMT+0800 (中国标准时间)
2022
10
1
2
11
1
14
217
1667271674217
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>当前时间是浏览器从本机操作系统获取的时间所以不一定准确。</p>
<p>若要创建一个指定日期和时间的Date对象，可以用：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> d<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">2015</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*运行结果如下：
Fri Jun 19 2015 20:15:30 GMT+0800 (中国标准时间)
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>第二种创建一个指定日期和时间的方法是解析一个符号ISO 8601格式的字符串：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> d<span class="token operator">=</span>Date<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">'2015-06-24T19:49:22.875+08:00'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回时间戳</span>
<span class="token keyword">var</span> dd<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token comment">//时间戳转Date</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dd<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*运行结果如下：
1435146562875
Wed Jun 24 2015 19:49:22 GMT+0800 (中国标准时间)
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="时区"><a href="#时区" class="headerlink" title="时区"></a>时区</h2><p>Date对象表示的时间总是按浏览器所在时区显示的，不过既可以显示本地时间，也可以显示调整后的UTC时间：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> d<span class="token operator">=</span>Date<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">'2015-06-24T19:49:22.875+08:00'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> dd<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dd<span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//显示的字符串与操作系统设定的格式有关</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dd<span class="token punctuation">.</span><span class="token function">toUTCString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//UTC时间与本地时间相差8小时</span>
<span class="token comment">/*运行结果如下：
1435146562875
2015/6/24 19:49:22
Wed, 24 Jun 2015 11:49:22 GMT
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>获取当前时间戳：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span>now<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token comment">//老版本IE没有now()方法</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">/*运行结果如下：
1667272652007
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h3><p>小明为了和女友庆祝情人节，特意制作了网页，并提前预定了法式餐厅。小明打算用JavaScript给女友一个惊喜留言,结果女友并未出现。小明非常郁闷，请你帮忙分析他的JavaScript代码有何问题：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> today <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>today<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> today<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">14</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'亲爱的，我预定了晚餐，晚上6点在餐厅见！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>修改后的代码如下：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//分析：JavaScript中getMonth() 实际时间为0~11，数值为2时，实际月份为3。</span>
<span class="token keyword">var</span> today <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>today<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> today<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">14</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'亲爱的，我预定了晚餐，晚上6点在餐厅见！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="RegExp"><a href="#RegExp" class="headerlink" title="RegExp"></a><code>RegExp</code></h2><p>JavaScript有两种方式创建一个正则表达式：</p>
<p>第一种是直接通过<code>/正则表达式/</code>写出来，第二种是通过<code>new RegExp(正则表达式)</code>创建一个RegExp对象。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> re1<span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">ABC\-001</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
<span class="token keyword">var</span> re2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">'ABC\\-001'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>re1<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>re2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*运行结果如下：
/ABC\-001/
/ABC\-001/
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>判断正则表达式是否匹配：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> re<span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\d&#123;3&#125;\-\d&#123;3,8&#125;$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'010-12345'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'010-1234x'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'010 12345'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*运行结果如下：
true
false
false
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="切分字符串"><a href="#切分字符串" class="headerlink" title="切分字符串"></a>切分字符串</h3><p>用正则表达式切分字符串：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'a b  c , ; ; d'</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[\s\,\;]+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*运行结果如下：
(4) ['a', 'b', 'c', 'd']
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><p>正则表达式用<code>()</code>表示要提取的分组，可以提取子串。若正则表达式种定义了组，就可以在<code>RegExp</code>对象上用<code>exec()</code>方法提取出子串来：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> re<span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(\d&#123;3&#125;)-(\d&#123;3,8&#125;)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">'010-12345'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">'010 12345'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*运行结果如下：
(3) ['010-12345', '010', '12345', index: 0, input: '010-12345', groups: undefined]
null
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>exec()</code>方法在匹配成功后会返回一个Array，第一个元素是正则表达式匹配到的整个字符串，后面的字符串表示匹配成功的子串。在匹配失败是返回<code>null</code>。</p>
<p>正则表达式可以直接识别合法的世界，但无法做到完全识别日期：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> re1<span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(0[0-9]|1[0-9]|2[0-3]|[0-9])\:(0[0-9]|1[0-9]|2[0-0]|3[0-9]|4[0-9]|5[0-9]|[0-9])\:(0[0-9]|1[0-9]|2[0-0]|3[0-9]|4[0-9]|5[0-9]|[0-9])$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>re1<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">'11:43:59'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> re2<span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(0[1-9]|1[0-2]|[0-9])-(0[1-9]|1[0-9]|2[0-9]|3[0-1]|[0-9])$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>re2<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">'2-30'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2-30号不存在，应该返回null</span>
<span class="token comment">/*运行结果如下：
(4) ['11:43:59', '11', '43', '59', index: 0, input: '11:43:59', groups: undefined]
(3) ['2-30', '2', '30', index: 0, input: '2-30', groups: undefined]
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="贪婪匹配"><a href="#贪婪匹配" class="headerlink" title="贪婪匹配"></a>贪婪匹配</h3><p>正则匹配默认是贪婪匹配。在需要培贪婪匹配的语句后加问号<code>?</code>，可以让该语句采用非贪婪匹配。</p>
<h3 id="全局搜索"><a href="#全局搜索" class="headerlink" title="全局搜索"></a>全局搜索</h3><p>JavaScript的正则表达式有几个特殊的标志，最常用的是全局匹配<code>g</code>：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> s<span class="token operator">=</span><span class="token string">'JavaScript,VBScript,JScript and ECMAScript'</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> re<span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[a-zA-Z]+Script</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span><span class="token comment">//使用全局匹配</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//直至结束都没有匹配到</span>
<span class="token comment">/*运行结果如下：
(1) ['JavaScript', index: 0, input: 'JavaScript,VBScript,JScript and ECMAScript', groups: undefined]
10
(1) ['VBScript', index: 11, input: 'JavaScript,VBScript,JScript and ECMAScript', groups: undefined]
19
(1) ['JScript', index: 20, input: 'JavaScript,VBScript,JScript and ECMAScript', groups: undefined]
27
(1) ['ECMAScript', index: 32, input: 'JavaScript,VBScript,JScript and ECMAScript', groups: undefined]
42
null
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>JavaScript的正则表达式还可以指定<code>i</code>标志，表示忽略大小写；<code>m</code>标志表示执行多行匹配。</p>
<h3 id="练习题-1"><a href="#练习题-1" class="headerlink" title="练习题"></a>练习题</h3><p>请尝试写一个验证Email地址的正则表达式。版本一应该可以验证出类似的Email：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> re <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^([a-z\.0-9])+@+([a-z0-9]+\.+[a-z]&#123;3&#125;)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>

<span class="token comment">// 测试:</span>
<span class="token keyword">var</span>
    i<span class="token punctuation">,</span>
    success <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    should_pass <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'someone@gmail.com'</span><span class="token punctuation">,</span> <span class="token string">'bill.gates@microsoft.com'</span><span class="token punctuation">,</span> <span class="token string">'tom@voyager.org'</span><span class="token punctuation">,</span> <span class="token string">'bob2015@163.com'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    should_fail <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'test#gmail.com'</span><span class="token punctuation">,</span> <span class="token string">'bill@microsoft'</span><span class="token punctuation">,</span> <span class="token string">'bill%gates@ms.com'</span><span class="token punctuation">,</span> <span class="token string">'@voyager.org'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> should_pass<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>re<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>should_pass<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'测试失败: '</span> <span class="token operator">+</span> should_pass<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        success <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> should_fail<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>re<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>should_fail<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'测试失败: '</span> <span class="token operator">+</span> should_fail<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        success <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>success<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'测试通过!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">/*运行结果如下：
测试成功!
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>版本二可以验证并提取出带名字的Email地址：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> re <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^&lt;?([a-zA-Z]+\s?[a-zA-Z]+)>?\s?([a-zA-Z]*@[a-zA-Z]+\.[a-zA-Z]+)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>

<span class="token comment">// 测试:</span>
<span class="token keyword">var</span> r <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">'&lt;Tom Paris> tom@voyager.org'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> r<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token punctuation">[</span><span class="token string">'&lt;Tom Paris> tom@voyager.org'</span><span class="token punctuation">,</span> <span class="token string">'Tom Paris'</span><span class="token punctuation">,</span> <span class="token string">'tom@voyager.org'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'测试失败!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'测试成功!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">/*运行结果如下：
测试成功!
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><p>JSON是一种数据交换格式，字符集必须是UTF-8。为了统一解析，JSON的字符串规定必须用双引号<code>&quot;&quot;</code>，Object的键也必须用双引号<code>&quot;&quot;</code>。</p>
<p>JavaScript内置了JSON的解析，把任何JavaScript对象序列化成一个JSON格式的字符串，才能通过网络传递给其他计算机。</p>
<h3 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h3><p>用<code>JSON.stringify()</code>把JavaScript对象序列化成JSON格式的字符串：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> person<span class="token operator">=</span><span class="token punctuation">&#123;</span>
    name<span class="token operator">:</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span>
    age<span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">,</span>
    gender<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>
    height<span class="token operator">:</span><span class="token number">1.65</span><span class="token punctuation">,</span>
    grade<span class="token operator">:</span><span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token string">'middel-school'</span><span class="token operator">:</span><span class="token string">'No.1 Middle School'</span><span class="token punctuation">,</span>
    skills<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'JavaScript'</span><span class="token punctuation">,</span><span class="token string">'Java'</span><span class="token punctuation">,</span><span class="token string">'Python'</span><span class="token punctuation">,</span><span class="token string">'Lisp'</span><span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> s<span class="token operator">=</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*运行结果如下：
&#123;"name":"zhangsan","age":18,"gender":true,"height":1.65,"grade":null,"middel-school":"No.1 Middle School","skills":["JavaScript","Java","Python","Lisp"]&#125;*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>JSON.stringify()</code>还可以通过参数来控制按缩进输出</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> s<span class="token operator">=</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*运行结果如下：
&#123;
 "name": "zhangsan",
 "age": 18,
 "gender": true,
 "height": 1.65,
 "grade": null,
 "middel-school": "No.1 Middle School",
 "skills": [
  "JavaScript",
  "Java",
  "Python",
  "Lisp"
 ]
&#125;*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>其第二个参数用于控制如何筛选对象的键值，如：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> s<span class="token operator">=</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'skills'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*运行结果如下：
&#123;
 "name": "zhangsan",
 "skills": [
  "JavaScript",
  "Java",
  "Python",
  "Lisp"
 ]
&#125;*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>还可以往第二个参数里传入一个函数，使得对象的每个键值对都会被函数先处理：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">convert</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span>value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> value<span class="token operator">===</span><span class="token string">'string'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> value<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">var</span> s<span class="token operator">=</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'skills'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*运行结果如下：
E:\node.exe .\test.js
&#123;
 "name": "ZHANGSAN",
 "age": 18,
 "gender": true,
 "height": 1.65,
 "grade": null,
 "middel-school": "NO.1 MIDDLE SCHOOL",
 "skills": [
  "JAVASCRIPT",
  "JAVA",
  "PYTHON",
  "LISP"
 ]
&#125;*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>除此之外，还可以给person对象定义一个<code>toJSON()</code>的方法，直接返回序列化数据：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> person<span class="token operator">=</span><span class="token punctuation">&#123;</span>
    name<span class="token operator">:</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span>
    age<span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">,</span>
    gender<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>
    height<span class="token operator">:</span><span class="token number">1.65</span><span class="token punctuation">,</span>
    grade<span class="token operator">:</span><span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token string">'middel-school'</span><span class="token operator">:</span><span class="token string">'No.1 Middle School'</span><span class="token punctuation">,</span>
    skills<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'JavaScript'</span><span class="token punctuation">,</span><span class="token string">'Java'</span><span class="token punctuation">,</span><span class="token string">'Python'</span><span class="token punctuation">,</span><span class="token string">'Lisp'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token function-variable function">toJSON</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span><span class="token punctuation">&#123;</span>
            <span class="token string">'Name'</span><span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span>
            <span class="token string">'Age'</span><span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>age
        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> s<span class="token operator">=</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*运行结果如下：
&#123;"Name":"zhangsan","Age":18&#125;*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h3><p>把一个JSON格式的字符串，用<code>JSON.parse()</code>把它变成一个JavaScript对象：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">'[1,2,3,true]'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">'&#123;"name":"zhangsan","age":14&#125;'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">'true'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">'123.45'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*运行结果如下：
(4) [1, 2, 3, true]
&#123;name: 'zhangsan', age: 14&#125;
true
123.45*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>JSON.parse()</code>还可以接收一个函数，用来转换解析出的属性：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj<span class="token operator">=</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">'&#123;"name":"zhangsan","age":14&#125;'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span>value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token operator">===</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> value<span class="token operator">+</span><span class="token string">' classmate'</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>        
    <span class="token keyword">return</span> value<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*运行结果如下：
&#123;"name":"zhangsan classmate","age":14&#125;*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h1><p>在JavaScript种不区分类和实例的概念，而是通过原型(prototype)来实现面向对象编程。所谓的继承关系是把对象的原型指向另一个对象。</p>
<p>以下是创建原型继承的一种方法：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> Student<span class="token operator">=</span><span class="token punctuation">&#123;</span>
    name<span class="token operator">:</span><span class="token string">'Robot'</span><span class="token punctuation">,</span>
    heighe<span class="token operator">:</span><span class="token number">1.2</span><span class="token punctuation">,</span>
    <span class="token function-variable function">run</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">' is running...'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">createStudent</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> s<span class="token operator">=</span>Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>Student<span class="token punctuation">)</span><span class="token punctuation">;</span>
    s<span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>
    <span class="token keyword">return</span> s<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">var</span> zhangsan<span class="token operator">=</span><span class="token function">createStudent</span><span class="token punctuation">(</span><span class="token string">'ZhangSan'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
zhangsan<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>zhangsan<span class="token punctuation">.</span>__proto__<span class="token operator">===</span>Student<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*运行结果如下：
ZhangSan is running...
true*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h2><p>除了直接用<code>&#123;...&#125;</code>创建一个对象外，JavaScript还可以用构造函数的方法来创建对象：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//定义构造函数</span>
<span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">hello</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Hello, '</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">'!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//调用构造函数，返回一个对象</span>
<span class="token keyword">var</span> zhangsan<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">'ZhangSan'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>zhangsan<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
zhangsan<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*运行结果如下：
ZhangSan
Hello, ZhangSan!*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>注意：若不写<code>new</code>，<code>student</code>就是一个普通函数，它返回<code>undefined</code>，若写了<code>new</code>，<code>student</code>就是一个构造函数，它绑定的this指向新创建的对象，并默认返回<code>this</code>。</p>
<p>用<code>new Student()</code>创建的对象还从原型上获得了一个<code>constructor</code>属性，它指向函数<code>Student</code>本身：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>zhangsan<span class="token punctuation">.</span>constructor<span class="token operator">===</span><span class="token class-name">Student</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor<span class="token operator">===</span>Student<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>zhangsan<span class="token punctuation">)</span><span class="token operator">===</span><span class="token class-name">Student</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*运行结果如下：
true
true
true
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上述代码主要描述以下关系：</p>
<p><img src="/2022/11/01/%E5%89%8D%E7%AB%AF%E4%B8%89%E4%BB%B6%E5%A5%97%E4%B9%8BJavaScript%EF%BC%88%E4%B8%89%EF%BC%89/1.png" alt></p>
<p>若要让通过构造函数创建的对象共享一个<code>hello</code>函数，将函数放到这些对象共同的原型<code>Student.prototype</code>上即可：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token class-name">Student</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">hello</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Hello, '</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">'!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> zhangsan<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">'ZhangSan'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
zhangsan<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*运行结果如下：
Hello, ZhangSan!
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>构造函数的首字母应当大写，普通函数首字母应当小写。</strong></p>
<p>可以编写一个函数，在内部封装所有的<code>new</code>操作：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">createStudent</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>props<span class="token operator">||</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="练习题-2"><a href="#练习题-2" class="headerlink" title="练习题"></a>练习题</h3><p>请利用构造函数定义<code>Cat</code>，并让所有的Cat对象有一个<code>name</code>属性，并共享一个方法<code>say()</code>，返回字符串<code>&#39;Hello, xxx!&#39;</code>：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Cat</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token class-name">Cat</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">say</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token string">'Hello, '</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">'!'</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 测试:</span>
<span class="token keyword">var</span> kitty <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">'Kitty'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> doraemon <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">'哆啦A梦'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>kitty <span class="token operator">&amp;&amp;</span> kitty<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">'Kitty'</span>
    <span class="token operator">&amp;&amp;</span> kitty<span class="token punctuation">.</span>say
    <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> kitty<span class="token punctuation">.</span>say <span class="token operator">===</span> <span class="token string">'function'</span>
    <span class="token operator">&amp;&amp;</span> kitty<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'Hello, Kitty!'</span>
    <span class="token operator">&amp;&amp;</span> kitty<span class="token punctuation">.</span>say <span class="token operator">===</span> doraemon<span class="token punctuation">.</span>say
<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'测试通过!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'测试失败!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">/*运行结果如下：
测试通过!
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="原型继承"><a href="#原型继承" class="headerlink" title="原型继承"></a>原型继承</h2><p>JavaScript的原型继承实现方式为：</p>
<ol>
<li>定义新的构造函数，并在内部用<code>call()</code>调用希望“继承”的构造函数，并绑定<code>this</code>；</li>
<li>借助中间函数<code>F</code>实现原型链继承，最好通过封装的<code>inherits</code>函数完成；</li>
<li>继续在新的构造函数原型上定义新方法。</li>
</ol>
<p>现有一构造函数<code>Student</code>：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//Student的构造函数</span>
<span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>props<span class="token punctuation">.</span>name<span class="token operator">||</span><span class="token string">'Unnamed'</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token class-name">Student</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">hello</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Hello, '</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">'!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>Student</code>的原型链如下：</p>
<p><img src="/2022/11/01/%E5%89%8D%E7%AB%AF%E4%B8%89%E4%BB%B6%E5%A5%97%E4%B9%8BJavaScript%EF%BC%88%E4%B8%89%EF%BC%89/1.png" alt></p>
<p>现在要基于<code>Student</code>扩展出<code>PrimaryStudent</code>。因此先定义新的构造函数<code>PrimaryStudent</code>：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//新构造函数</span>
<span class="token keyword">function</span> <span class="token function">PrimaryStudent</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token function">Student</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>grade<span class="token operator">=</span>props<span class="token punctuation">.</span>grade<span class="token operator">||</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>利用空函数<code>F</code>来修改原型链，使得<code>PrimaryStudent</code>指向<code>Student.prototype</code>：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//Student的构造函数</span>
<span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>props<span class="token punctuation">.</span>name<span class="token operator">||</span><span class="token string">'Unnamed'</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token class-name">Student</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">hello</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Hello, '</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">'!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//新构造函数PrimaryStudent</span>
<span class="token keyword">function</span> <span class="token function">PrimaryStudent</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token function">Student</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用Student构造函数，绑定this变量</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>grade<span class="token operator">=</span>props<span class="token punctuation">.</span>grade<span class="token operator">||</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//空函数F</span>
<span class="token keyword">function</span> <span class="token constant">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
<span class="token punctuation">&#125;</span>
<span class="token class-name">F</span><span class="token punctuation">.</span>prototype<span class="token operator">=</span><span class="token class-name">Student</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span><span class="token comment">//将F的原型指向Student.prototype</span>
<span class="token class-name">PrimaryStudent</span><span class="token punctuation">.</span>prototype<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将PrimaryStudent的原型指向一个新的F对象</span>
<span class="token class-name">PrimaryStudent</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor<span class="token operator">=</span>PrimaryStudent<span class="token punctuation">;</span><span class="token comment">//将PrimaryStudent原型的构造函数指向PrimaryStudent</span>
<span class="token class-name">PrimaryStudent</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getGrade</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//在PrimaryStudent原型的构造函数上定义方法</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>grade<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> lisi<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">PrimaryStudent</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token comment">//创建lisi</span>
    name<span class="token operator">:</span><span class="token string">'lisi'</span><span class="token punctuation">,</span>
    grade<span class="token operator">:</span><span class="token number">3</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lisi<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lisi<span class="token punctuation">.</span>grade<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//验证原型</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lisi<span class="token punctuation">.</span>__proto__<span class="token operator">===</span><span class="token class-name">PrimaryStudent</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lisi<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>__proto__<span class="token operator">===</span><span class="token class-name">Student</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//验证继承关系</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lisi <span class="token keyword">instanceof</span> <span class="token class-name">PrimaryStudent</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lisi <span class="token keyword">instanceof</span> <span class="token class-name">Student</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*运行结果如下：
lisi
3
true
true
true
true
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>此时的新型原型链如下：</p>
<p><img src="/2022/11/01/%E5%89%8D%E7%AB%AF%E4%B8%89%E4%BB%B6%E5%A5%97%E4%B9%8BJavaScript%EF%BC%88%E4%B8%89%EF%BC%89/2.png" alt></p>
<p>如果把整个继承动作用一个<code>inherits()</code>函数封装起来，还可以隐藏空函数<code>F</code>的定义，<code>inherits()</code>函数可以复用：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//Student的构造函数</span>
<span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>props<span class="token punctuation">.</span>name<span class="token operator">||</span><span class="token string">'Unnamed'</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token class-name">Student</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">hello</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Hello, '</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">'!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//新构造函数PrimaryStudent</span>
<span class="token keyword">function</span> <span class="token function">PrimaryStudent</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token function">Student</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用Student构造函数，绑定this变量</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>grade<span class="token operator">=</span>props<span class="token punctuation">.</span>grade<span class="token operator">||</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">function</span> <span class="token function">inherits</span><span class="token punctuation">(</span><span class="token parameter">Child<span class="token punctuation">,</span>Parent</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> <span class="token function-variable function">F</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token class-name">F</span><span class="token punctuation">.</span>prototype<span class="token operator">=</span><span class="token class-name">Parent</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>
    <span class="token class-name">Child</span><span class="token punctuation">.</span>prototype<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Child</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor<span class="token operator">=</span>Child<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">inherits</span><span class="token punctuation">(</span>PrimaryStudent<span class="token punctuation">,</span>Student<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//实现原型继承链</span>
<span class="token class-name">PrimaryStudent</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getGrade</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//绑定其他方法到PrimaryStudent原型</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>grade<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> lisi<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">PrimaryStudent</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token comment">//创建lisi</span>
    name<span class="token operator">:</span><span class="token string">'lisi'</span><span class="token punctuation">,</span>
    grade<span class="token operator">:</span><span class="token number">3</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lisi<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lisi<span class="token punctuation">.</span>grade<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*运行结果如下：
lisi
3
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="class继承"><a href="#class继承" class="headerlink" title="class继承"></a>class继承</h2><h3 id="class定义"><a href="#class定义" class="headerlink" title="class定义"></a>class定义</h3><p>ES6中引入了新的关键字<code>class</code>，使类的定义更简单。</p>
<p>用<code>class</code>定义<code>Student</code>类并创建一个对象如下：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">&#123;</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Hello, '</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">'!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">var</span> lisi<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">'Lisi'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
lisi<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*运行结果如下：
Hello, Lisi!
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="原型继承-1"><a href="#原型继承-1" class="headerlink" title="原型继承"></a>原型继承</h3><p>可以通过<code>extends</code>实现原型继承：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">&#123;</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Hello, '</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">'!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">PrimaryStudent</span> <span class="token keyword">extends</span> <span class="token class-name">Student</span><span class="token punctuation">&#123;</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>grade</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//用super调用父类的构造方法</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>grade<span class="token operator">=</span>grade<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">myGrade</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I am at grade '</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>grade<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">var</span> lisi<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">PrimaryStudent</span><span class="token punctuation">(</span><span class="token string">'Lisi'</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
lisi<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
lisi<span class="token punctuation">.</span><span class="token function">myGrade</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*运行结果如下：
Hello, Lisi!
I am at grade 3
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>不是所有的浏览器都支持ES6的class，当浏览器不支持时，需要<a href="https://babeljs.io/">Babel</a>这个工具把<code>class</code>代码转换为传统的<code>prototype</code>代码。</p>
<h3 id="练习题-3"><a href="#练习题-3" class="headerlink" title="练习题"></a>练习题</h3><p>请利用<code>class</code>重新定义<code>Cat</code>，并让它从已有的<code>Animal</code>继承，然后新增一个方法<code>say()</code>，返回字符串<code>&#39;Hello, xxx!&#39;</code>：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">&#123;</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token string">'Hello, '</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">'!'</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 测试:</span>
<span class="token keyword">var</span> kitty <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">'Kitty'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> doraemon <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">'哆啦A梦'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">'x'</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Animal</span><span class="token punctuation">)</span>
    <span class="token operator">&amp;&amp;</span> kitty 
    <span class="token operator">&amp;&amp;</span> kitty<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">'Kitty'</span>
    <span class="token operator">&amp;&amp;</span> kitty<span class="token punctuation">.</span>say
    <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> kitty<span class="token punctuation">.</span>say <span class="token operator">===</span> <span class="token string">'function'</span>
    <span class="token operator">&amp;&amp;</span> kitty<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'Hello, Kitty!'</span>
    <span class="token operator">&amp;&amp;</span> kitty<span class="token punctuation">.</span>say <span class="token operator">===</span> doraemon<span class="token punctuation">.</span>say<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'测试通过!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'测试失败!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">/*运行结果如下：
测试通过!
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h1><p>目前主流的浏览器分为以下几种：</p>
<ul>
<li>IE6-11：国内用的最多的IE浏览器，从IE10开始支持ES6标准</li>
<li>Chrome：Google出品的基于Webkit内核浏览器，由于Chrome一经安装就时刻保持自升级，因此不用管它的版本，最新版肯定支持ES6</li>
<li>Safari：Apple的Mac系统自带的基于Webkit内核浏览器，从OSX 10.7 Lion自带的6.1版本开始支持ES6</li>
<li>Firefox：Mozilla自研的Gecko内核，也是时刻保持自升级。</li>
<li>移动设备上目前IOS和Android两大阵营分别主要使用Apple的Safari和Google的Chrome，两种都是Webkit核心，最新版本均支持ES6</li>
</ul>
<h2 id="浏览器对象"><a href="#浏览器对象" class="headerlink" title="浏览器对象"></a>浏览器对象</h2><p>JavaScript可以获取浏览器提供的很对对象，并进行操作。</p>
<h3 id="window"><a href="#window" class="headerlink" title="window"></a>window</h3><p>window对象不但充当全局作用域，而且表示浏览器窗口。</p>
<p>window对象有<code>innerWidth</code>和<code>innerHeight</code>属性，可以获取浏览器窗口的内部宽度和高度。内部宽高是指出去菜单栏、工具栏、边框等占位元素后，用于显示页面的净宽高。IE&lt;=8版本的浏览器不支持这一特性：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'window inner size: '</span><span class="token operator">+</span>window<span class="token punctuation">.</span>innerWidth<span class="token operator">+</span><span class="token string">'x'</span><span class="token operator">+</span>window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*运行结果如下：
window inner size: 987x752
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>与之对应的，还有一个<code>outerWidth</code>和<code>outerHeight</code>属性，可以获取浏览器窗口的整个宽高。</p>
<h3 id="navigator"><a href="#navigator" class="headerlink" title="navigator"></a>navigator</h3><p><code>navigator</code>对象表示浏览器的信息，最常用的属性包括：</p>
<ul>
<li>navigator.appName：浏览器名称</li>
<li>navigator.appVersion：浏览器版本</li>
<li>navigator.language：浏览器设置的语言</li>
<li>navigator.platform：操作系统类型</li>
<li>navigator.userAgent：浏览器设定的<code>user-Agent</code>字符串</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'appName='</span><span class="token operator">+</span>navigator<span class="token punctuation">.</span>appName<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'appVersion='</span><span class="token operator">+</span>navigator<span class="token punctuation">.</span>appVersion<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'language='</span><span class="token operator">+</span>navigator<span class="token punctuation">.</span>language<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'platform='</span><span class="token operator">+</span>navigator<span class="token punctuation">.</span>platform<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'userAgent='</span><span class="token operator">+</span>navigator<span class="token punctuation">.</span>userAgrnt<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*运行结果如下：
appName=Netscape
Users/Administrator/Desktop/test.js:1
appVersion=5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36 Edg/107.0.1418.26
Users/Administrator/Desktop/test.js:2
language=zh-CN
Users/Administrator/Desktop/test.js:3
platform=Win32
Users/Administrator/Desktop/test.js:4
userAgent=undefined
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>注意，由于navigator的信息很容易被用户修改，所以常用JavaScript对不存在属性返回unfinded的特性，计算浏览器的信息是否又被改动：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> width<span class="token operator">=</span>window<span class="token punctuation">.</span>innerWith<span class="token operator">||</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientWidth<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="screen"><a href="#screen" class="headerlink" title="screen"></a>screen</h3><p>screen对象表示屏幕的信息，常用的属性有：</p>
<ul>
<li>screen.width：屏幕宽度，以像素为单位</li>
<li>screen.height：屏幕高度，以像素为单位</li>
<li>sreen.colorDepth：返回颜色位数，如8、16、24</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Screen size='</span><span class="token operator">+</span>screen<span class="token punctuation">.</span>width<span class="token operator">+</span><span class="token string">'x'</span><span class="token operator">+</span>screen<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*运行结果如下：
Screen size=1440x900
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="location"><a href="#location" class="headerlink" title="location"></a>location</h3><p>location对象表示当前页面的URL信息。一个完整的URL可以用<code>location.href</code>获取。要获取URL各部分的值，可以这么写：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//如URL：http://www.example.com:8080/path/index.html?a=1&amp;b=2#TOP</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>protocol<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>host<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>post<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>pathname<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>search<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>hash<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*运行结果如下：
http
www.example.com
8080
/path/index.html
a=1&amp;b=2
TOP
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>要加载一个新页面，可以调用<code>location.assign()</code>方法，要重新加载当前页面，可以调用<code>location.reload()</code>方法：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">'要重新加载当前页'</span><span class="token operator">+</span>location<span class="token punctuation">.</span>href<span class="token operator">+</span><span class="token string">'?'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    location<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
    location<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置一个新的URL地址</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="document"><a href="#document" class="headerlink" title="document"></a>document</h3><p>document对象表示当前页面。由于HTML在浏览器中以DOM形式表示为树形结构，document对象就是整个DOM树的根节点。</p>
<p>document的title属性是从HTML文档中的<code>&lt;title&gt;...&lt;/title&gt;</code>读取的，但其也可以动态改变：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span>title<span class="token operator">=</span><span class="token string">'helloJavaScript!'</span><span class="token punctuation">;</span><span class="token comment">//修改浏览器窗口标题</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>若要查找DOM树的某个节点，需要从document对象开始查找。最常用的方法是根据ID和Tag Name。</p>
<p>有一HTML数据如下：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dl</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>drink-menu<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">border</span><span class="token punctuation">:</span>solid 1px #ccc<span class="token punctuation">;</span><span class="token property">padding</span><span class="token punctuation">:</span>6px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span>摩卡<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>热摩卡咖啡<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span>酸奶<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>北京老酸奶<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span>果汁<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>鲜榨苹果汁<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dl</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>用document对象提供的<code>getElementById()</code>和<code>getElementsByTagName()</code>可以按ID获得一个DOM节点和按Tag名称获得一组DOM节点：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> menu<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'drink-menu'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> drinks<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'dt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> i<span class="token punctuation">,</span>s<span class="token punctuation">;</span>
s<span class="token operator">=</span><span class="token string">'提供的饮料有：'</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>drinks<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    s<span class="token operator">=</span>s<span class="token operator">+</span>drinks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>innerHTNL<span class="token operator">+</span><span class="token string">','</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*运行结果如下：
提供的饮料有:摩卡,酸奶,果汁,
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>document对象还有一个<code>cookie</code>属性，可以获取当前页面的Cookie：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>由于JavaScript能读到页面的Cookie，而用户的登录信息通常也存在Cookie中，且HTML页面中允许引入第三方的JavaScript代码。为了防止第三方的JavaScript直接能获取网站的用户登录信息，<strong>服务器在设置Cookie时可以使用<code>httpOnly</code>，以防止被JavaScript读取。</strong>IE浏览器从IE6 SP1开始支持。</p>
<h3 id="history"><a href="#history" class="headerlink" title="history"></a>history</h3><p>history对象保持了浏览器的历史记录，JavaScript可以调用history对象的<code>back()</code>或<code>forward()</code>，相当于用户点击了浏览器的后退或前进按钮。<strong>在任何情况都不应该使用history这个对象。</strong></p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>前端三件套之JavaScript（二）</title>
    <url>/2022/10/31/%E5%89%8D%E7%AB%AF%E4%B8%89%E4%BB%B6%E5%A5%97%E4%B9%8BJavaScript%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="函数定义和调用"><a href="#函数定义和调用" class="headerlink" title="函数定义和调用"></a>函数定义和调用</h2><h3 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h3><p>在JavaScript中，定义函数的方式如下：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> x<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
     <span class="token keyword">return</span> <span class="token operator">-</span>x<span class="token punctuation">;</span>   
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>函数内的语句执行到return语句时，函数便执行完毕了。若没有return语句，函数执行完毕后会返回undefined。</p>
<p>由于函数也是一个对象，因此上述定义的<code>abs()</code>函数实际上是一个函数对象，因此，第二种定义函数的方式如下：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">abs</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> x<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">-</span>x<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这两种定义完全等价，注意第二种方式函数体末尾要加上一个分号<code>;</code>，表示赋值语句结束。</p>
<h3 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h3><p>调用函数时，需要按顺序传入参数：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">abs</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">abs</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">231</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>由于JavaScript允许传入任意个参数而不影响调用，因此传入的参数比定义的参数多也不会报错：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">abs</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token string">'sdada'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回12</span>
<span class="token function">abs</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token string">'asd'</span><span class="token punctuation">,</span><span class="token string">'asd'</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>传入的参数比定义的少也不会报错：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">abs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//abs()收到参数undefined，返回NaN</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>若要避免收到undefined，可以对参数进行检查：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> x<span class="token operator">!==</span><span class="token string">'number'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token string">'Not a number'</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> x<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">-</span>x<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="arguments"><a href="#arguments" class="headerlink" title="arguments"></a>arguments</h3><p>arguments只在函数内部起作用，并且永远指向当前函数的调用者所传入的所有参数。arguments类似于Array但不是一个Array。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'x='</span><span class="token operator">+</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'arg'</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">'='</span><span class="token operator">+</span>arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*运行结果如下：
x=10
arg0=10
arg1=20
arg2=30
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>利用arguments可以获得调用者传入的所有参数，即使函数不定义任何参数值，可还是能拿到参数的值：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length<span class="token operator">===</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">var</span> x<span class="token operator">=</span>arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> x<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token operator">?</span>x<span class="token operator">:</span><span class="token operator">-</span>x<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*运行结果如下：
0
12
12
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>arguments常用于判断传入参数的个数：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//foo(a,[,b],c)接收2~3个参数，b是可选参数。若只传入2个参数，b默认为bull</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length<span class="token operator">===</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        c<span class="token operator">=</span>b<span class="token punctuation">;</span>
        b<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="rest参数"><a href="#rest参数" class="headerlink" title="rest参数"></a>rest参数</h3><p>ES6标准引入了rest参数以帮助获得除了已定义参数之外的参数。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b<span class="token punctuation">,</span><span class="token operator">...</span>rest</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'a='</span><span class="token operator">+</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'b='</span><span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rest<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*运行结果如下：
a=1
b=2
(3) [3, 4, 5]
a=1
b=undefined
(0) []
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>rest参数只能写在最后，前面用<code>...</code>标识。若传入的参数少于定义参数，rest参数会接收一个空数组。</p>
<p>由于rest参数是ES6新标准，因此需要测试浏览器是否支持。请用rest参数编写的一个<code>sum()</code>函数，接收任意个参数并返回它们的和。</p>
<p>代码如下：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>rest</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>rest<span class="token punctuation">.</span>length<span class="token operator">===</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>rest<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        sum<span class="token operator">=</span>sum<span class="token operator">+</span>rest<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 测试:</span>
<span class="token keyword">var</span> i<span class="token punctuation">,</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    args<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'测试失败: sum() = '</span> <span class="token operator">+</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'测试失败: sum(1) = '</span> <span class="token operator">+</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'测试失败: sum(2, 3) = '</span> <span class="token operator">+</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token number">5050</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'测试失败: sum(1, 2, 3, ..., 100) = '</span> <span class="token operator">+</span> <span class="token function">sum</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'测试通过!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*运行结果如下：
测试通过!
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>JavaScript引擎有一个再行末自动添加分号的机制，因此要注意return语句不要轻易换行。若要换行写，可以写成以下形式：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span><span class="token punctuation">{</span>
        name<span class="token operator">:</span><span class="token string">'foo'</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h3><p>定义一个计算圆面积的函数<code>area_of_circle()</code>，它有两个参数：</p>
<ul>
<li>r: 表示圆的半径；</li>
<li>pi: 表示π的值，如果不传，则默认3.14</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">'use strict'</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">area_of_circle</span><span class="token punctuation">(</span><span class="token parameter">r<span class="token punctuation">,</span> pi</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length<span class="token operator">===</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        pi<span class="token operator">=</span><span class="token number">3.14</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> pi<span class="token operator">*</span>r<span class="token operator">*</span>r<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 测试:</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">area_of_circle</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">12.56</span> <span class="token operator">&amp;&amp;</span> <span class="token function">area_of_circle</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3.1416</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">12.5664</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'测试通过'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'测试失败'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
测试通过
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>小明是一个JavaScript新手，他写了一个<code>max()</code>函数，返回两个数中较大的那个。但是小明抱怨他的浏览器出问题了，无论传入什么数，<code>max()</code>函数总是返回<code>undefined</code>。请帮他指出问题并修复：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">'use strict'</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span>
                a<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span>
                b<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>修复后的代码如下：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">'use strict'</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> a<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> b<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="变量作用域与解构赋值"><a href="#变量作用域与解构赋值" class="headerlink" title="变量作用域与解构赋值"></a>变量作用域与解构赋值</h2><p>若一个变量再函数体内部声明，则该变量的作用域为整个函数体，在函数体外不可引用该变量。</p>
<p>若两个不同的函数各自声明了同一个变量，则该变量只在各自的函数体内其作用。</p>
<p>由于JavaScript的函数可以嵌套，此时内部函数可以访问外部函数定义的变量，而外部函数无法访问内部函数定义的变量。</p>
<p>若内部函数和外部函数的变量名重名时，内部函数的变量将忽略外部函数的变量。</p>
<h3 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h3><p>JavaScript的函数定义有个特点，它会先扫描整个函数体的语句，把所有声明的变量“提升”到函数顶部。只提升变量的声明，不会提升变量的赋值。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> x<span class="token operator">=</span><span class="token string">'Hello，'</span><span class="token operator">+</span>y<span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> y<span class="token operator">=</span><span class="token string">'Bob'</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//等同于</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> y<span class="token punctuation">;</span>
    <span class="token keyword">var</span> x<span class="token operator">=</span><span class="token string">'Hello，'</span><span class="token operator">+</span>y<span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> y<span class="token operator">=</span><span class="token string">'Bob'</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*运行结果如下：
Hello,undefined
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>因此，为了防止不必要的错误，在函数内部定义变量时，首先声明所有变量。</p>
<h3 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h3><p>不在任何函数内的变量便处于全局作用域中。JavaScript默认有一个全局对象<code>window</code>，全局作用域的百年来实际上被绑定到<code>window</code>属性中。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token string">'asd'</span><span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//弹出asd弹窗</span>
<span class="token function">alert</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//弹出asd弹窗</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>由于函数定义有两种方式，以变量形式定义的函数<code>var foo=function(){}</code>也是一个全局变量。此时函数的定义也被视为一个全局变量，并绑定到window对象中。alert函数也是window的一个变量。</p>
<h3 id="名字空间"><a href="#名字空间" class="headerlink" title="名字空间"></a>名字空间</h3><p>全局变量会绑定到window上，不同的JavaScript文件若使用了相同的全局变量，或定义了相同名字的顶层函数，就会造成命名冲突，且这种错误很难被发现。</p>
<p>减少冲突的方法就是把自己的所有变量和函数全部绑定到一个全局变量中，即把代码全部放入唯一的名字空间中<code>MYAPP</code>：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//唯一的全局变量</span>
<span class="token keyword">var</span> <span class="token constant">MYAPP</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">//其他变量</span>
<span class="token constant">MYAPP</span><span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">'myapp'</span><span class="token punctuation">;</span>
<span class="token constant">MYAPP</span><span class="token punctuation">.</span>version<span class="token operator">=</span><span class="token number">1.0</span><span class="token punctuation">;</span>
<span class="token comment">//其他函数</span>
<span class="token constant">MYAPP</span><span class="token punctuation">.</span><span class="token function-variable function">foo</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">'foo'</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="局部作用域"><a href="#局部作用域" class="headerlink" title="局部作用域"></a>局部作用域</h3><p>由于JavaScript的变量作用域实际上是函数内部，故for循环等语句块是无法定义具有局部作用域的变量的。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//</span>
    <span class="token punctuation">}</span>
    i<span class="token operator">+=</span><span class="token number">100</span><span class="token comment">//仍然可以引用变量i</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>ES6引入了<code>let</code>关键字，用<code>let</code>替代<code>var</code>可以声明一个块级作用域的变量：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
       sum<span class="token operator">=</span>sum<span class="token operator">+</span>i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    i<span class="token operator">+=</span><span class="token number">100</span><span class="token comment">//报错ReferenceError: i is not defined</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>由于<code>var</code>和<code>let</code>声明的是变量，在ES6后，若要声明一个常量，可以通过关键字<code>const</code>来定义，常量名要全部大写。<code>const</code>于<code>let</code>都具有块级作用域：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token constant">PI</span><span class="token operator">=</span><span class="token number">3.14</span><span class="token punctuation">;</span>
<span class="token constant">PI</span><span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token comment">//报错TypeError: Assignment to constant variable.，某些浏览器不报错，但是无效果</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">PI</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h3><p>在ES6中，可以使用解构赋值来直接对多个变量同时赋值：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span><span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span><span class="token string">'JavaScript'</span><span class="token punctuation">,</span><span class="token string">'ES6'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'x='</span><span class="token operator">+</span>x<span class="token operator">+</span><span class="token string">', y='</span><span class="token operator">+</span>y<span class="token operator">+</span><span class="token string">', z= '</span><span class="token operator">+</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*运行结果如下：
x=hello, y=JavaScript, z= ES6
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>对数组元素进行结构赋值时，多个变量要用<code>[]</code>括起来。</p>
<p>若数组本身还有嵌套，也可以通过下面的形式进行解构赋值，嵌套层次和位置要保持一致：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span><span class="token punctuation">[</span>y<span class="token punctuation">,</span>z<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'JavaScript'</span><span class="token punctuation">,</span><span class="token string">'ES6'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'x='</span><span class="token operator">+</span>x<span class="token operator">+</span><span class="token string">', y='</span><span class="token operator">+</span>y<span class="token operator">+</span><span class="token string">', z= '</span><span class="token operator">+</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*运行结果如下：
x=hello, y=JavaScript, z= ES6
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>解构赋值还可以忽略某些元素：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token punctuation">,</span>z<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span><span class="token string">'JavaScript'</span><span class="token punctuation">,</span><span class="token string">'ES6'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'z='</span><span class="token operator">+</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*运行结果如下：
z=ES6
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>若要从一个对象中取出若干属性，也可以使用解构赋值，便于快速获取对象的指定属性：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> person<span class="token operator">=</span><span class="token punctuation">{</span>
    name<span class="token operator">:</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span>
    age<span class="token operator">:</span><span class="token number">13</span><span class="token punctuation">,</span>
    gender<span class="token operator">:</span><span class="token string">'male'</span><span class="token punctuation">,</span>
    passport<span class="token operator">:</span><span class="token string">'G-12345678'</span><span class="token punctuation">,</span>
    school<span class="token operator">:</span><span class="token string">'No.1 middle school'</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span><span class="token punctuation">{</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>passport<span class="token punctuation">}</span><span class="token operator">=</span>person<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'name='</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">', age='</span><span class="token operator">+</span>age<span class="token operator">+</span><span class="token string">', passport'</span><span class="token operator">+</span>passport<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*运行结果如下：
name=zhangsan, age=13, passportG-12345678
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>对一个对象进行解构赋值时，同样可以直接对嵌套的对象属性进行赋值，主要要保证对应的层次一致：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> person<span class="token operator">=</span><span class="token punctuation">{</span>
    name<span class="token operator">:</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span>
    age<span class="token operator">:</span><span class="token number">13</span><span class="token punctuation">,</span>
    gender<span class="token operator">:</span><span class="token string">'male'</span><span class="token punctuation">,</span>
    passport<span class="token operator">:</span><span class="token string">'G-12345678'</span><span class="token punctuation">,</span>
    school<span class="token operator">:</span><span class="token string">'No.1 middle school'</span><span class="token punctuation">,</span>
    address<span class="token operator">:</span><span class="token punctuation">{</span>
        city<span class="token operator">:</span><span class="token string">'Beijing'</span><span class="token punctuation">,</span>
        street<span class="token operator">:</span><span class="token string">'No.1 Road'</span><span class="token punctuation">,</span>
        zipcode<span class="token operator">:</span><span class="token string">'100001'</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span><span class="token punctuation">{</span>name<span class="token punctuation">,</span>address<span class="token operator">:</span><span class="token punctuation">{</span>city<span class="token punctuation">,</span>zip<span class="token punctuation">,</span>zipcode<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">=</span>person<span class="token punctuation">;</span><span class="token comment">//person中没有zip属性，故其值为undefined</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'name='</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">', city='</span><span class="token operator">+</span>city<span class="token operator">+</span><span class="token string">', zip='</span><span class="token operator">+</span>zip<span class="token operator">+</span><span class="token string">', zipcode='</span><span class="token operator">+</span>zipcode<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*运行结果如下：
name=zhangsan, city=Beijing, zip=undefined, zipcode=100001
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>使用解构赋值对对象属性进行赋值时，若对应的属性不存在，变量将被赋值为<code>undefined</code>，若要使用的变量名和属性名不一致，可以用下面的语法获取：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> person<span class="token operator">=</span><span class="token punctuation">{</span>
    name<span class="token operator">:</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span>
    age<span class="token operator">:</span><span class="token number">13</span><span class="token punctuation">,</span>
    gender<span class="token operator">:</span><span class="token string">'male'</span><span class="token punctuation">,</span>
    passport<span class="token operator">:</span><span class="token string">'G-12345678'</span><span class="token punctuation">,</span>
    school<span class="token operator">:</span><span class="token string">'No.1 middle school'</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span><span class="token punctuation">{</span>name<span class="token punctuation">,</span>passport<span class="token operator">:</span>id<span class="token punctuation">}</span><span class="token operator">=</span>person<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'name='</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">', id='</span><span class="token operator">+</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*运行结果如下：
name=zhangsan, id=G-12345678
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>解构赋值还可以使用默认值，这样避免了不存在的属性返回<code>undefined</code>值：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> person<span class="token operator">=</span><span class="token punctuation">{</span>
    name<span class="token operator">:</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span>
    age<span class="token operator">:</span><span class="token number">13</span><span class="token punctuation">,</span>
    gender<span class="token operator">:</span><span class="token string">'male'</span><span class="token punctuation">,</span>
    passport<span class="token operator">:</span><span class="token string">'G-12345678'</span><span class="token punctuation">,</span>
    school<span class="token operator">:</span><span class="token string">'No.1 middle school'</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span><span class="token punctuation">{</span>name<span class="token punctuation">,</span>single<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token operator">=</span>person<span class="token punctuation">;</span><span class="token comment">//若person对象没有single属性，则默认返回true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'name='</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">', single='</span><span class="token operator">+</span>single<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*运行结果如下：
name=zhangsan, single=true
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>若变量已经被声明了，再次赋值时，正确的写法也会报语法错误：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>
<span class="token punctuation">{</span>x<span class="token punctuation">,</span>y<span class="token punctuation">}</span><span class="token operator">=</span><span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span>x<span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">,</span>y<span class="token operator">:</span><span class="token number">200</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//报错SyntaxError: Unexpected token '='</span>
<span class="token comment">// ({x,y}={name:'zhangsan',x:10,y:200});//返回x=10, y=200</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'x='</span><span class="token operator">+</span>x<span class="token operator">+</span><span class="token string">', y='</span><span class="token operator">+</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><p>解构赋值在很多时候可以简化代码，如：无需临时变量交换两个变量的值：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> x<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span>y<span class="token punctuation">,</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>快速获取当前页面的域名和路径：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span><span class="token punctuation">{</span>hostname<span class="token operator">:</span>domain<span class="token punctuation">,</span>pathname<span class="token operator">:</span>path<span class="token punctuation">}</span><span class="token operator">=</span>location<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>若一个函数接收一个对象作为参数，那么使用解构直接把对象的属性绑定到变量中，如快速创建一个Date对象：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">buildDate</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>year<span class="token punctuation">,</span>month<span class="token punctuation">,</span>dat<span class="token punctuation">,</span>hour<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>minute<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>second<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>year<span class="token operator">+</span><span class="token string">'-'</span><span class="token operator">+</span>month<span class="token operator">+</span><span class="token string">'-'</span><span class="token operator">+</span>day<span class="token operator">+</span><span class="token string">' '</span><span class="token operator">+</span>hour<span class="token operator">+</span><span class="token string">':'</span><span class="token operator">+</span>minute<span class="token operator">+</span><span class="token string">':'</span><span class="token operator">+</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>目前支持解构赋值的浏览器包括Chrome、Firefox、Edge等。</p>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>在一个对象中绑定函数，称为这个对象的方法。在javaScript中，对象的定义为</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> person<span class="token operator">=</span><span class="token punctuation">{</span>
    name<span class="token operator">:</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span>
    birth<span class="token operator">:</span><span class="token number">1999</span><span class="token punctuation">,</span>
    <span class="token function-variable function">age</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">var</span> y<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> y<span class="token operator">-</span><span class="token keyword">this</span><span class="token punctuation">.</span>birth<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*运行结果如下：
23*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里的<code>age()</code>函数便是一个方法，在方法内部，<code>this</code>是一个特殊变量，它始终指向当前对象。若是单独调用函数，在函数内调用this，this指向全局变量。要保证this指向正确，必须用<code>obj.xxx()</code>的形式调用。</p>
<p>在strict模式下，函数的this指向undefined，在非strict模式下，函数的this指向全局对象window。</p>
<p>若要将方法重构，为了避免出错可先用that变量捕获this：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> person<span class="token operator">=</span><span class="token punctuation">{</span>
    name<span class="token operator">:</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span>
    birth<span class="token operator">:</span><span class="token number">1999</span><span class="token punctuation">,</span>
    <span class="token function-variable function">age</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">var</span> that<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token keyword">function</span> <span class="token function">getAgeFromBirth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">var</span> y<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        	<span class="token keyword">return</span> y<span class="token operator">-</span>that<span class="token punctuation">.</span>birth<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token function">getAgeFromBirth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*运行结果如下：
23*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h3><p>若要指定函数的this指向哪个对象，可以用函数本身的<code>apply</code>方法。它接收两个参数，第一个参数是需要绑定的this变量，第二个参数是Array，表示函数本身的参数。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> y<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> y<span class="token operator">-</span><span class="token keyword">this</span><span class="token punctuation">.</span>birth<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> person<span class="token operator">=</span><span class="token punctuation">{</span>
    name<span class="token operator">:</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span>
    birth<span class="token operator">:</span><span class="token number">1999</span><span class="token punctuation">,</span>
    age<span class="token operator">:</span>getAge
<span class="token punctuation">}</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//单独调用getAge，this指向window</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getAge</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//apply将this指向person</span>
<span class="token comment">/*运行结果如下：
23
NaN
23*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>另一个与<code>apply()</code>类似的方法是<code>call()</code>，两者之间的唯一区别是：</p>
<ul>
<li><code>apply()</code>把参数打包成Array后再传入</li>
<li><code>call()</code>把参数按顺序传入</li>
</ul>
<p>如要调用<code>Math.max(3,5,4)</code>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*运行结果如下：
5
5*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h3><p>利用<code>apply()</code>可以动态改变函数的行为。即使是JavaScript的内置函数，也可以重新指向新的函数。如要统计代码调用了多少次<code>parseInt()</code>，可以将系统默认的<code>parseInt()</code>替换为新的可以统计多少次调用的<code>parseInt()</code>：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> oldParseInt<span class="token operator">=</span>parseInt<span class="token punctuation">;</span><span class="token comment">//保存原函数</span>
window<span class="token punctuation">.</span><span class="token function-variable function">parseInt</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    count<span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">oldParseInt</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用原函数</span>
<span class="token punctuation">}</span>
<span class="token comment">// 测试:</span>
<span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">'10'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">'20'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">'30'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'count = '</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token comment">/*在浏览器中的运行结果如下：
count = 3*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h2><p>接收另一个函数作为参数的函数，称为高阶函数。</p>
<h3 id="map-reduce"><a href="#map-reduce" class="headerlink" title="map/reduce"></a>map/reduce</h3><h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><p>若要将函数</p>
<script type="math/tex; mode=display">
f(x)=x^2</script><p>作用在数组[1,2,3,4,5,6,7,8,9]上，可用map实现：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> x<span class="token operator">*</span>x<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> results<span class="token operator">=</span>arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>pow<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*运行结果如下：
(9) [1, 4, 9, 16, 25, 36, 49, 64, 81]*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>map()</code>传入的参数是函数对象本身。</p>
<p>用map，只需两行代码便可以把Array的所有数组转换为字符串：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">/*运行结果如下：
(9) ['1', '2', '3', '4', '5', '6', '7', '8', '9']*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h4><p>Array的<code>reduce()</code>把函数作用在Array的<code>[x1,x2,x3...]</code>上，<code>reduce()</code>接收两个参数，<code>reduce()</code>把结果继续和序列的下一个元素做累计运算，即<code>[x1,x2,x3].reduce(f)=f(f(x1,x2),x3)</code></p>
<p>对于一个Array求和，可以用<code>reduce</code>实现：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>y</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> x<span class="token operator">+</span>y<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*运行结果如下：
25*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>利用<code>reduce()</code>也可以把<code>[1,3,5,7,9]</code>变换成整数13579：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>y</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> x<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>y<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*运行结果如下：
13579*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="练习题-1"><a href="#练习题-1" class="headerlink" title="练习题"></a>练习题</h4><p>利用<code>reduce()</code>求积：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">product</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>y</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> x<span class="token operator">*</span>y<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 测试:</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">product</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">24</span> <span class="token operator">&amp;&amp;</span> <span class="token function">product</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">product</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">44274384</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'测试通过!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">else</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'测试失败!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*运行结果如下：
测试通过!*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>不要使用JavaScript内置的<code>parseInt()</code>函数，利用map和reduce操作实现一个<code>string2int()</code>函数：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">string2int</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">of</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>
        arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> x<span class="token operator">*</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>y</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> x<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>y<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 测试:</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">string2int</span><span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">string2int</span><span class="token punctuation">(</span><span class="token string">'12345'</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">12345</span> <span class="token operator">&amp;&amp;</span> <span class="token function">string2int</span><span class="token punctuation">(</span><span class="token string">'12300'</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">12300</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>string2int<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'parseInt'</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'请勿使用parseInt()!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>string2int<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'Number'</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'请勿使用Number()!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'测试通过!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">else</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'测试失败!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*运行结果如下：
测试通过!*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>请把用户输入的不规范的英文名字，变为首字母大写，其他小写的规范名字。输入：<code>['adam', 'LISA', 'barT']</code>，输出：<code>['Adam', 'Lisa', 'Bart']</code>。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">normalize</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> x<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>x<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// 测试:</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">normalize</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'adam'</span><span class="token punctuation">,</span> <span class="token string">'LISA'</span><span class="token punctuation">,</span> <span class="token string">'barT'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token punctuation">[</span><span class="token string">'Adam'</span><span class="token punctuation">,</span> <span class="token string">'Lisa'</span><span class="token punctuation">,</span> <span class="token string">'Bart'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'测试通过!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">else</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">normalize</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'adam'</span><span class="token punctuation">,</span> <span class="token string">'LISA'</span><span class="token punctuation">,</span> <span class="token string">'barT'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'测试失败!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*运行结果如下：
测试通过!*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>小明希望利用<code>map()</code>把字符串变成整数，他写的代码很简洁：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> r<span class="token punctuation">;</span>
r <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>parseInt<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>结果竟然是<code>1, NaN, NaN</code>，小明百思不得其解，请帮他找到原因并修正代码。</p>
<p>修正代码如下：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> r<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
r <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*运行结果如下：
(3)[1, 2, 3]*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><p>filter用于过滤Array中的某些元素，返回剩下的元素，filter也只接收一个函数，filter把传入的函数依次作用于每个元素，然后根据返回值True or False来决定保留还是丢弃该元素。</p>
<p>如在一个Array中，删掉偶数，只保留奇数：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> r<span class="token operator">=</span>arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> x<span class="token operator">%</span><span class="token number">2</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*运行结果如下：
(4) [1, 5, 9, 15]*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>把一个Array中的空字符串删掉：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">undefined</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">,</span><span class="token string">' '</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> r<span class="token operator">=</span>arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> s<span class="token operator">&amp;&amp;</span>s<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*运行结果如下：
(3) ['A', 'B', 'C']*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h4><p><code>filter()</code>接收的回调函数，可以有多个参数。通常仅使用第一个参数来表示Array的某个元素。回调函数还可以接收另外两个参数来表示元素的位置和数组本身：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> r<span class="token operator">=</span>arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span>index<span class="token punctuation">,</span>self</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//依次打印'A','B','C']</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//依次打印0,1,2</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打印变量arr</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">/*运行结果如下：
A
0
(3) ['A', 'B', 'C']
B
1
(3) ['A', 'B', 'C']
C
2
(3) ['A', 'B', 'C']*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>利用<code>filter()</code>可以去除Array的重复元素：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> r<span class="token punctuation">;</span>
<span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'apple'</span><span class="token punctuation">,</span><span class="token string">'strawberry'</span><span class="token punctuation">,</span><span class="token string">'banana'</span><span class="token punctuation">,</span><span class="token string">'pear'</span><span class="token punctuation">,</span><span class="token string">'apple'</span><span class="token punctuation">,</span><span class="token string">'orange'</span><span class="token punctuation">,</span><span class="token string">'orange'</span><span class="token punctuation">,</span><span class="token string">'strawberry'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
r<span class="token operator">=</span>arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span>index<span class="token punctuation">,</span>self</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> self<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token operator">===</span>index<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*运行结果如下：
apple,strawberry,banana,pear,orange*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>由于indexof总是返回元素第一次出现的位置，因此后续的重复元素位置与indexof不相等就被过滤掉了。</p>
<h4 id="练习题-2"><a href="#练习题-2" class="headerlink" title="练习题"></a>练习题</h4><p>请尝试用<code>filter()</code>筛选出素数：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">get_primes</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">===</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">===</span><span class="token number">2</span><span class="token operator">||</span>x<span class="token operator">===</span><span class="token number">3</span><span class="token operator">||</span>x<span class="token operator">===</span><span class="token number">5</span><span class="token operator">||</span>x<span class="token operator">===</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">%</span><span class="token number">2</span><span class="token operator">===</span><span class="token number">0</span><span class="token operator">||</span>x<span class="token operator">%</span><span class="token number">3</span><span class="token operator">===</span><span class="token number">0</span><span class="token operator">||</span>x<span class="token operator">%</span><span class="token number">5</span><span class="token operator">===</span><span class="token number">0</span><span class="token operator">||</span>x<span class="token operator">%</span><span class="token number">7</span><span class="token operator">===</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 测试:</span>
<span class="token keyword">var</span>
    x<span class="token punctuation">,</span>
    r<span class="token punctuation">,</span>
    arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
r <span class="token operator">=</span> <span class="token function">get_primes</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">,</span> <span class="token number">47</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">,</span> <span class="token number">61</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">,</span> <span class="token number">71</span><span class="token punctuation">,</span> <span class="token number">73</span><span class="token punctuation">,</span> <span class="token number">79</span><span class="token punctuation">,</span> <span class="token number">83</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">97</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'测试通过!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'测试失败: '</span> <span class="token operator">+</span> r<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*运行结果如下：
测试通过!*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h3><p>JavaScript中的<code>sort()</code>默认把所有元素转换为String再进行排序，用于排序字符串时，根据ASCII码进行排序。因此，直接使用<code>sort()</code>对数字进行排序，得到的结果往往不如人意。</p>
<p>比较两个元素大小时，通常规定，对于<code>x&lt;y</code>，则返回<code>-1</code>；对于<code>x==y</code>，则返回<code>0</code>；对于<code>x&gt;y</code>，则返回<code>1</code>。</p>
<p>若要按数字大小进行排序，可以写成：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//从小到大排序</span>
<span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>y</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&gt;</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*运行结果如下：
(4) [1, 2, 10, 20]*/</span>

<span class="token comment">//从大到小排序：</span>
<span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>y</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&gt;</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*运行结果如下：
(4) [20, 10, 2, 1]*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>忽略字母大小写，按照字母序排序：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Google'</span><span class="token punctuation">,</span><span class="token string">'apple'</span><span class="token punctuation">,</span><span class="token string">'Microsoft'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">s1<span class="token punctuation">,</span>s2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    x1<span class="token operator">=</span>s1<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    x2<span class="token operator">=</span>s2<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>x1<span class="token operator">&lt;</span>x2<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>x1<span class="token operator">&gt;</span>x2<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*运行结果如下：
(3) ['apple', 'Google', 'Microsoft']*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>sort()</code>方法会直接对Array进行修改，原Array返回的结果是修改后的Array：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a1<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> a2<span class="token operator">=</span>a1<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a2<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a1<span class="token operator">===</span>a2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*运行结果如下：
(3) ['A', 'B', 'C']
(3) ['A', 'B', 'C']
true*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h3><p>对于数组，除了<code>map()</code>、<code>reduce()</code>、<code>filter()</code>、<code>sort()</code>这些方法外，Array对象还提供了很多实用的高阶函数。</p>
<h4 id="every"><a href="#every" class="headerlink" title="every"></a>every</h4><p><code>every()</code>方法可以判断数组的所有元素是否满足测试条件：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Apple'</span><span class="token punctuation">,</span><span class="token string">'pear'</span><span class="token punctuation">,</span><span class="token string">'orange'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> s<span class="token punctuation">.</span>length<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">===</span>s<span class="token punctuation">;</span><span class="token comment">//判断每个元素是否都是小写</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*运行结果如下：
true
false*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="find"><a href="#find" class="headerlink" title="find"></a>find</h4><p><code>find()</code>方法用于查找符合条件的第一个元素，若找到了，返回这个元素，否则返回undefined:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Apple'</span><span class="token punctuation">,</span><span class="token string">'pear'</span><span class="token punctuation">,</span><span class="token string">'orange'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">===</span>s<span class="token punctuation">;</span><span class="token comment">//返回全是小写的第一个元素</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">===</span>s<span class="token punctuation">;</span><span class="token comment">//返回全是小写的第一个元素</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*运行结果如下：
pear
undefined*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="findIndex"><a href="#findIndex" class="headerlink" title="findIndex"></a>findIndex</h4><p><code>findIndex()</code>和<code>find()</code>类似，也是查找符合条件的第一个元素，不同之处在于<code>findIndex()</code>会返回这个元素的索引，若没有找到，则返回-1：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Apple'</span><span class="token punctuation">,</span><span class="token string">'pear'</span><span class="token punctuation">,</span><span class="token string">'orange'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">===</span>s<span class="token punctuation">;</span><span class="token comment">//返回全是小写的第一个元素</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">===</span>s<span class="token punctuation">;</span><span class="token comment">//返回全是小写的第一个元素</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*运行结果如下：
1
-1*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h4><p>forEach和<code>map()</code>类似，也把每个元素依次作用于传入的函数，但不会返回新的数组，常用于遍历数组。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Apple'</span><span class="token punctuation">,</span><span class="token string">'pear'</span><span class="token punctuation">,</span><span class="token string">'orange'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>log<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*运行结果如下：
Apple 0 (3) ['Apple', 'pear', 'orange']
pear 1 (3) ['Apple', 'pear', 'orange']
orange 2 (3) ['Apple', 'pear', 'orange']*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><h3 id="函数作为返回值"><a href="#函数作为返回值" class="headerlink" title="函数作为返回值"></a>函数作为返回值</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">lazy_sum</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> <span class="token function-variable function">sum</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>y</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> x<span class="token operator">+</span>y<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> f1<span class="token operator">=</span><span class="token function">lazy_sum</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//f=sum()，调用lazy_sum时返回的不是求和结果，而是求和函数</span>
<span class="token keyword">var</span> f2<span class="token operator">=</span><span class="token function">lazy_sum</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//每次调用都会返回一个新函数</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f1<span class="token operator">===</span>f2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*运行结果如下：
15
false*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="闭包-1"><a href="#闭包-1" class="headerlink" title="闭包"></a>闭包</h3><p>当一个函数返回一个新函数后，其内部的局部变量还被新函数引用。返回的函数并没有立刻执行，而是知道调用<code>f()</code>后才执行。</p>
<p>与pyhton中的闭包相同，由于返回的函数非立刻执行，而是等到返回函数调用完成时才执行，因此会发生以下情况：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> i<span class="token operator">*</span>i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> arr<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> results<span class="token operator">=</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> f1<span class="token operator">=</span>results<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> f2<span class="token operator">=</span>results<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> f3<span class="token operator">=</span>results<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">f3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*运行结果如下：
16 16 16*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>因此返回闭包时，返回函数不要引用任何循环遍历或是会发生变化的量。</p>
<p>若一定要引用循环变量，则要再创建一个函数，用该函数的参数绑定循环变量当前的值，无论该循环遍历如何更改，已绑定到函数参数的值都是不变的：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">return</span> n<span class="token operator">*</span>n<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> arr<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> results<span class="token operator">=</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> f1<span class="token operator">=</span>results<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> f2<span class="token operator">=</span>results<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> f3<span class="token operator">=</span>results<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">f3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*运行结果如下：
1 4 9*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里用到了一个创建匿名函数并立刻执行的语法：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> x<span class="token operator">*</span>x<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>正常创建匿名函数并立刻执行写法如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">function(x){return x*x}(3)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>但再JavaScript中这么些会报错，因此需要用括号把函数定义括起来。</p>
<p>JavaScript里没有class机制，只有函数。借助闭包，同样可以封装一个私有变量：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">create_counter</span><span class="token punctuation">(</span><span class="token parameter">initial</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> x<span class="token operator">=</span>initial<span class="token operator">||</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token function-variable function">inc</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            x<span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> x<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> c1<span class="token operator">=</span><span class="token function">create_counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span><span class="token function">inc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span><span class="token function">inc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span><span class="token function">inc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> c2<span class="token operator">=</span><span class="token function">create_counter</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c2<span class="token punctuation">.</span><span class="token function">inc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c2<span class="token punctuation">.</span><span class="token function">inc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c2<span class="token punctuation">.</span><span class="token function">inc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*运行结果如下：
1
2
3
11
12
13*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在返回的对象中实现了一个闭包，该闭包携带了局部变量x，且外部的代码无法访问到变量x。</p>
<p>闭包还可以把多参数的函数变成单参数的函数。如计算x^y可以用<code>Math.pow(x,y)</code>函数，可以利用闭包创建新的函数pow2和pow3：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">make_pow</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> pow2<span class="token operator">=</span><span class="token function">make_pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> pow3<span class="token operator">=</span><span class="token function">make_pow</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">pow2</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">pow3</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*运行结果如下：
25
343*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p>ES6标准新增了一种新的函数：箭头函数。它的定义用的就是一个箭头：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token parameter">x</span><span class="token operator">=&gt;</span>x<span class="token operator">*</span>x
<span class="token comment">//等价于</span>
<span class="token function">funtion</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">return</span> x<span class="token operator">*</span>x<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>箭头函数相当于是匿名函数，并且简化了函数定义。箭头函数有两种格式，一种只包含一个表达式：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token parameter">x</span><span class="token operator">=&gt;</span>x<span class="token operator">*</span>x<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>还有一种可以包含多条语句：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token parameter">x</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> x<span class="token operator">*</span>x<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">-</span>x<span class="token operator">*</span>x<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果参数不是一个，就需要用括号<code>()</code>括起来：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>y</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span>x<span class="token operator">*</span>x<span class="token operator">+</span>y<span class="token operator">*</span>y<span class="token comment">//两个参数</span>
<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token number">3.14</span><span class="token comment">//无参数</span>
<span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token operator">...</span>rest</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> i<span class="token punctuation">,</span>sum<span class="token operator">=</span>x<span class="token operator">+</span>y<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>rest<span class="token punctuation">.</span>lenth<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        sum<span class="token operator">+=</span>rest<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果要返回一个对象，就要写成这样：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token parameter">x</span><span class="token operator">=&gt;</span><span class="token punctuation">(</span><span class="token punctuation">{</span>foo<span class="token operator">:</span>x<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="this"><a href="#this" class="headerlink" title="this"></a>this</h4><p>箭头函数和匿名函数有个明显的区别：箭头函数内部的this是词法作用域，由上下文确定。</p>
<p>箭头函数完全修复了this的指向，this总是指向词法作用域，即外层调用者obj，以前的hack写法<code>var that=this</code>就不再需要了：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj<span class="token operator">=</span><span class="token punctuation">{</span>
    birth<span class="token operator">:</span><span class="token number">1999</span><span class="token punctuation">,</span>
    <span class="token function-variable function">getAge</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">var</span> b<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>birth<span class="token punctuation">;</span>
        <span class="token keyword">var</span> <span class="token function-variable function">fn</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token keyword">this</span><span class="token punctuation">.</span>birth<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*运行结果如下：
23*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>由于this在箭头函数中已经按照词法作用域绑定了，因此用<code>call()</code>或<code>apply()</code>调用箭头函数时，无法对<code>this</code>进行绑定，即传入的第一个参数被忽略：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj<span class="token operator">=</span><span class="token punctuation">{</span>
    birth<span class="token operator">:</span><span class="token number">1999</span><span class="token punctuation">,</span>
    <span class="token function-variable function">getAge</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">year</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">var</span> b<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>birth<span class="token punctuation">;</span>
        <span class="token keyword">var</span> <span class="token function-variable function">fn</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token parameter">y</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span>y<span class="token operator">-</span><span class="token keyword">this</span><span class="token punctuation">.</span>birth<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">{</span>birth<span class="token operator">:</span><span class="token number">2000</span><span class="token punctuation">}</span><span class="token punctuation">,</span>year<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token number">2015</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*运行结果如下：
16*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="练习题-3"><a href="#练习题-3" class="headerlink" title="练习题"></a>练习题</h4><p>请使用箭头函数简化排序时传入的函数：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> x<span class="token operator">-</span>y<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 10, 20]</span>
<span class="token comment">/*运行结果如下：
(4) [1, 2, 10, 20]*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="generator"><a href="#generator" class="headerlink" title="generator"></a>generator</h3><p>生成器generator是ES6标准引入一个数据类型，其概念和语法与python的generator相似。</p>
<p>generator的定义如下：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">yield</span> x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">yield</span> x<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> x<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>generator和函数不同的是，generator由<code>function*</code>定义，除了用return语句，还可以用yield返回多次。</p>
<p>用generator写一个斐波那契数列如下：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">fib</span><span class="token punctuation">(</span><span class="token parameter">max</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> t<span class="token punctuation">,</span>a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">&lt;</span>max<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">yield</span> a<span class="token punctuation">;</span>
        <span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span>b<span class="token punctuation">,</span>a<span class="token operator">+</span>b<span class="token punctuation">]</span><span class="token punctuation">;</span>
        n<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> f<span class="token operator">=</span><span class="token function">fib</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//通过调用generator对象的next()方法来调用生成器</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//value的值就是yield的返回值，done表示这个生成器已经执行结束了</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//若done为true,value就是return的返回值，这个生成器对象已经全部执行完毕</span>

<span class="token comment">//用for...of循环迭代生成器对象</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> x <span class="token keyword">of</span> <span class="token function">fib</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*运行结果如下：
{value: 0, done: false}
{value: 1, done: false}
{value: 1, done: false}
{value: 2, done: false}
{value: 3, done: false}
{value: undefined, done: true}
0
1
1
2
3
5
8
13
21
34*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>由于generator可以在执行过程中多次返回，因此它看上去像是可以记住执行状态的函数。因此可以利用它来实现保存状态的功能。</p>
<h4 id="练习题-4"><a href="#练习题-4" class="headerlink" title="练习题"></a>练习题</h4><p>要生成一个自增的ID，可以编写一个<code>next_id()</code>函数：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> current_id <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">next_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    current_id <span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> current_id<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>由于函数无法保存状态，故需要一个全局变量<code>current_id</code>来保存数字。</p>
<p>不用闭包，试用generator改写：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">next_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> current_id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">yield</span> current_id<span class="token punctuation">;</span>
        current_id<span class="token operator">++</span><span class="token punctuation">;</span>
        n<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 测试:</span>
<span class="token keyword">var</span>
    x<span class="token punctuation">,</span>
    pass <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    g <span class="token operator">=</span> <span class="token function">next_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> x <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>g<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token operator">!==</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        pass <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'测试失败!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>pass<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'测试通过!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>前端框架之Vue.js（一）</title>
    <url>/2022/11/03/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Vue-js基础"><a href="#Vue-js基础" class="headerlink" title="Vue.js基础"></a>Vue.js基础</h1><p>Vue是一套用于构建用户界面的渐进式框架。与其他大型框架不同的是，Vue被设计为可以自底向上逐层应用。Vue的核心库只关注视图层，易于上手且便于与第三方库或既有项目结合。</p>
<p>Vue不支持IE8及以下的版本，它支持所有兼容ECMA Script 5的浏览器。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="直接用-lt-script-gt-引入"><a href="#直接用-lt-script-gt-引入" class="headerlink" title="直接用&lt;script&gt;引入"></a>直接用<code>&lt;script&gt;</code>引入</h3><p>若要在现有站点中使用Vue，可以通过<code>&lt;script&gt;</code>元素在页面中使用。</p>
<ul>
<li><p>开发环境版本，包含了有帮助的命令行警告：</p>
  <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>生产环境版本，优化了尺寸和速度。在站点上包含Vue时要指定版本号：</p>
  <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue@2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
</ul>
<h3 id="使用npm安装"><a href="#使用npm安装" class="headerlink" title="使用npm安装"></a>使用npm安装</h3><p>直接用<code>&lt;script&gt;</code>引入vue的方法有一些局限性，若要构建更复杂的应用程序，需要使用npm软件包和脚手架CLI。在此之前，需要安装node.js 8.11及以上的版本，安装有包管理器npm。</p>
<p>在cmd里使用node.js的<code>npm</code>命令安装Vue：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm install vue<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>在cmd里使用node.js的<code>npm</code>命令安装脚手架CLI：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm install --global @vue&#x2F;cli
若安装不上使用下面命令进行安装
cnpm install -g @vue&#x2F;cli<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><strong>注意：</strong>不推荐新手直接使用<code>vue-cli</code>，尤其是还不熟悉基于Node.js的构建工具时。</p>
<h3 id="Vue-Devtools"><a href="#Vue-Devtools" class="headerlink" title="Vue Devtools"></a>Vue Devtools</h3><p>在使用vue时，推荐在浏览器上安装 <a href="https://github.com/vuejs/vue-devtools#vue-devtools">Vue Devtools</a>。它允许在一个更友好的界面中审查和调试 Vue 应用。</p>
<h2 id="声明式渲染"><a href="#声明式渲染" class="headerlink" title="声明式渲染"></a>声明式渲染</h2><p>Vue.js的核心是一个允许采用简洁的模板语法来声明式地将数据渲染进DOM系统。</p>
<p>新建一个html文件，编写以下代码后运行，即可创建第一个Vue应用：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>   
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        &#123;&#123;message&#125;&#125;
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">var</span> app<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
        el<span class="token operator">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>
        data<span class="token operator">:</span><span class="token punctuation">&#123;</span>
            message<span class="token operator">:</span><span class="token string">'Hello Vue!'</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>
<span class="token comment">&lt;!--运行结果如下：--></span>
Hello Vue!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>创建应用的过程看起来与渲染一个字符串模板类似。现在数据和DOM已经被建立了管理，所有东西都是响应式的。</p>
<p>在运行代码的浏览器上按F12打开开发人员工具，选择控制台（后续简称为JavaScript控制台），修改<code>app.message</code>的值，即可看到浏览器中也会及时更新显示的值：</p>
<p><img src="/2022/11/03/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E4%B8%80%EF%BC%89/1.png" alt></p>
<p>一个Vue应用会将其挂载到一个DOM元素上（上述代码中是<code>#app</code>），然后对其进行完全控制。</p>
<p>除了文本插值，还可以绑定元素attribute如下所示：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>   
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        &#123;&#123;message&#125;&#125;
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app-2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            鼠标悬停几秒查看此处动态绑定的提示信息！
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">var</span> app<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
        el<span class="token operator">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>
        data<span class="token operator">:</span><span class="token punctuation">&#123;</span>
            message<span class="token operator">:</span><span class="token string">'Hello Vue!'</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token keyword">var</span> app2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
        el<span class="token operator">:</span><span class="token string">'#app-2'</span><span class="token punctuation">,</span>
        data<span class="token operator">:</span><span class="token punctuation">&#123;</span>
            message<span class="token operator">:</span><span class="token string">'页面加载于 '</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里的<code>v-bind</code> attribute被称为指令。指令带有前缀<code>v-</code>以表示它们是Vue提供的特殊attribute。它们会在渲染的DOM上应用特殊的响应式行为。在上述代码中，该实例的意思是：将这个元素节点的<code>title</code> atrribute和Vue实例的message property保持一致。</p>
<p>若再次打开JavaScript控制台，输入<code>app2.message=&#39;新消息&#39;</code>，就会再次看到这个绑定了<code>title</code> attribute的HTML已经进行了更新。</p>
<h2 id="条件与循环"><a href="#条件与循环" class="headerlink" title="条件与循环"></a>条件与循环</h2><p>可以利用条件判断来控制切换一个元素是否显示：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app-3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
   	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>seen<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>现在你看到我了<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> app3<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    el<span class="token operator">:</span><span class="token string">'#app-3'</span><span class="token punctuation">,</span>
    data<span class="token operator">:</span><span class="token punctuation">&#123;</span>
        seen<span class="token operator">:</span><span class="token boolean">true</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>若打开JavaScript控制台，输入<code>app3.seen=false</code>，就会再次看到之前显示的消息消失了。</p>
<p>上述例子演示了不仅可以把数据绑定到DOM文本或attribute，还可以绑定到DOM结构。除此之外，Vue也提供了一个强大的过渡效果系统，可以在Vue插入/更新/移除元素时自动应用过渡效果。</p>
<p>还有很多其他指令，每个都有特殊的功能，如<code>v-for</code>指令可以绑定数组的数据来渲染一个项目列表：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>todo in todos<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            &#123;&#123;todo.text&#125;&#125;
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> app4<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    el<span class="token operator">:</span><span class="token string">'#app-4'</span><span class="token punctuation">,</span>
    data<span class="token operator">:</span><span class="token punctuation">&#123;</span>
        todos<span class="token operator">:</span><span class="token punctuation">[</span>
            <span class="token punctuation">&#123;</span> text<span class="token operator">:</span><span class="token string">'学习 JavaScript'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
            <span class="token punctuation">&#123;</span> text<span class="token operator">:</span><span class="token string">'学习 Vue'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
            <span class="token punctuation">&#123;</span> text<span class="token operator">:</span><span class="token string">'搞个项目'</span><span class="token punctuation">&#125;</span>
            <span class="token punctuation">]</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在控制台里，输入<code>app4.todos.push(&#123; text: &#39;新项目&#39;&#125;)</code>，会发现列表最后添加了一个新项目。</p>
<h2 id="处理用户输入"><a href="#处理用户输入" class="headerlink" title="处理用户输入"></a>处理用户输入</h2><p>为了让用户和应用进行交互，可以用<code>v-on</code>指令添加一个事件监听器，通过它调用在Vue实例中定义的方法：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app-5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>&#123;&#123;message&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>reverseMessage<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>反转信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> app5<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    el<span class="token operator">:</span><span class="token string">'#app-5'</span><span class="token punctuation">,</span>
    data<span class="token operator">:</span><span class="token punctuation">&#123;</span>
        message<span class="token operator">:</span><span class="token string">'Hello Vue.js!'</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    methods<span class="token operator">:</span><span class="token punctuation">&#123;</span>
        <span class="token function-variable function">reverseMessage</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>注意：</strong>在reverseMessage方法中，虽然更新了应用状态，但没有触碰DOM，所有的DOM操作都有Vue来处理。</p>
<p>Vue还提供了<code>v-model</code>指令，可以实现表单输入和应用状态之间的双向绑定：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app-6<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>&#123;&#123; message&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> app6<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    el<span class="token operator">:</span><span class="token string">'#app-6'</span><span class="token punctuation">,</span>
    data<span class="token operator">:</span><span class="token punctuation">&#123;</span>
        message<span class="token operator">:</span><span class="token string">'Hello Vue!'</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="组件化应用创建"><a href="#组件化应用创建" class="headerlink" title="组件化应用创建"></a>组件化应用创建</h2><p>组件系统是Vue的另一个重要概念。它是一种抽象，允许使用小型、独立和通常可复用的组件构建大型应用。因此任意类型的应用界面都可以抽象为一个组件树。</p>
<p>在Vue里，一个组件本质上是一个拥有预定义选项的一个Vue实例。其中使用 <code>v-bind</code> 指令将待办项传到循环输出的每个组件中：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app-7<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">></span></span>
        <span class="token comment">&lt;!--使用v-bind指令将待办项传到循环输出的每个组件中--></span>
        <span class="token comment">&lt;!--为每个todo-item提供todo对象--></span>
        <span class="token comment">&lt;!--todo对象是变量，其内容是动态的。同时也需要为每个组件提供一个"key"--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>todo-item</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item in groceryList<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-bind:</span>todo</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-bind:</span>key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>todo-item</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>
	Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'todo-item'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>
        <span class="token comment">//todo-item组件接收一个名为todo的prop，类似于一个自定义attribute</span>
        props<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'todo'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        template<span class="token operator">:</span><span class="token string">'&lt;li>&#123;&#123;todo.text&#125;&#125;&lt;/li>'</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token keyword">var</span> app7<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
        el<span class="token operator">:</span><span class="token string">'#app-7'</span><span class="token punctuation">,</span>
        data<span class="token operator">:</span><span class="token punctuation">&#123;</span>
            groceryList<span class="token operator">:</span><span class="token punctuation">[</span>
                <span class="token punctuation">&#123;</span> id<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>text<span class="token operator">:</span><span class="token string">'蔬菜'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
                <span class="token punctuation">&#123;</span> id<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>text<span class="token operator">:</span><span class="token string">'奶酪'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
                <span class="token punctuation">&#123;</span> id<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span>text<span class="token operator">:</span><span class="token string">'薯条'</span><span class="token punctuation">&#125;</span>
            <span class="token punctuation">]</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上述代码中，将应用分割成了两个更小的单元。子单元通过prop接口与负担也进行了良好的解耦，后续可以进一步改进<code>&lt;todo-item&gt;</code>组件，提供更为复杂的模板和逻辑，而不会影响到父单元。在一个大型应用中，将整个应用程序划分为组件是有必要的。</p>
<h3 id="组件与自定义元素的关系"><a href="#组件与自定义元素的关系" class="headerlink" title="组件与自定义元素的关系"></a>组件与自定义元素的关系</h3><p>Vue组件是Web组件规范的一部分，其与自定义元素十分类似，但还是有关键的差别：</p>
<ul>
<li>Web Components规范已完成并通过，但未被所有浏览器原生实现。相比之下，Vue组件不需要任何polyfill，且在所有支持的浏览器中表现一致。必要时，Vue组件也可以包装与原生自定义元素之内</li>
<li>Vue组件提供了纯自定义元素所不具备的一些重要功能，最突出的是跨组件数据流、自定义事件通信以及构建工具集成。</li>
</ul>
<p>因此，虽然Vue内部没有使用自定义元素，但在应用使用自定义元素或以自定义元素发布时，仍然有着很好的操作性。Vue CLI脚手架 也支持将Vue组件构建成为原生的自定义元素。</p>
<h2 id="Vue实例"><a href="#Vue实例" class="headerlink" title="Vue实例"></a>Vue实例</h2><h3 id="创建一个Vue实例"><a href="#创建一个Vue实例" class="headerlink" title="创建一个Vue实例"></a>创建一个Vue实例</h3><p>每个Vue应用都是通过用Vue函数创建一个新的Vue实例开始的：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">var vm&#x3D;new Vue(&#123;
	&#x2F;&#x2F;选项
&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>在文档中经常会使用<code>vm</code>这个变量名表示Vue实例。当创建一个实例时，可以传入一个选项对象。</p>
<p>一个Vue应用由一个通过new Vue创建的根Vue实例，以及可选的嵌套的、可复用的组件树组成。所有的Vue组件都是Vue实例，并且接受相同的选项对象。</p>
<h4 id="数据与方法"><a href="#数据与方法" class="headerlink" title="数据与方法"></a>数据与方法</h4><p>当一个Vue实例被创建时，它将data对象中的所有property加入到Vue的响应式系统中。当这些property的值发生改变时，视图将会产生响应， 即匹配更新为新的值。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">   <span class="token keyword">var</span> data<span class="token operator">=</span><span class="token punctuation">&#123;</span>a<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token comment">//数据对象</span>
   <span class="token keyword">var</span> vm<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token comment">//该对象被加入到一个Vue实例中</span>
       data<span class="token operator">:</span>data 
   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
   <span class="token comment">//获得这个实例上的property,返回源数据中对应的字段</span>
   vm<span class="token punctuation">.</span>a<span class="token operator">==</span>data<span class="token punctuation">.</span>a
<span class="token comment">//设置property会影响到原始数据</span>
   vm<span class="token punctuation">.</span>a<span class="token operator">=</span><span class="token number">2</span>
   data<span class="token punctuation">.</span>a<span class="token comment">//返回2</span>
<span class="token comment">//反过来也一样</span>
   data<span class="token punctuation">.</span>a<span class="token operator">=</span><span class="token number">3</span>
   vm<span class="token punctuation">.</span>a<span class="token comment">//返回3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>当这些数据改变时，视图会进行重渲染。<strong>只有当实例被创建时就已经存在与property才是响应式的。</strong>若后面才添加一个新的property</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">vm<span class="token punctuation">.</span>b<span class="token operator">=</span><span class="token string">'h1'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>那么对<code>b</code>的改动将不会触发任何视图的更新。若是知道后续是需要一个property，但一开始时它为空或不存在，则需要设置一些初始值以保证视图能同步更新：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">data<span class="token punctuation">&#123;</span>
    newTodoText<span class="token operator">:</span><span class="token string">''</span><span class="token punctuation">,</span>
    visitVount<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>
    hideCompletedTodos<span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>
    todos<span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    error<span class="token operator">:</span><span class="token keyword">null</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>使用<code>Object.freeze()</code>会阻止修改现有的property，也意味着响应系统无法再追踪其变化：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>&#123;&#123;foo&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
    <span class="token comment">&lt;!--这里的foo不会更新！--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>foo = <span class="token punctuation">'</span>baz<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Change it <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"> <span class="token keyword">var</span> obj<span class="token operator">=</span><span class="token punctuation">&#123;</span>
     foo<span class="token operator">:</span><span class="token string">'bar'</span>
 <span class="token punctuation">&#125;</span>
Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>

 <span class="token keyword">var</span> app8<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
     el<span class="token operator">:</span><span class="token string">'#app-8'</span><span class="token punctuation">,</span>
     data<span class="token operator">:</span>obj
 <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>除了数据property，Vue实例还暴露了一些有用的实例property与方法。它们都有前缀<code>$</code>，以便与用户定义的property区分开来：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">vm<span class="token punctuation">.</span>$data<span class="token operator">===</span>data<span class="token comment">//返回true</span>
vm<span class="token punctuation">.</span>$el<span class="token operator">===</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'example'</span><span class="token punctuation">)</span><span class="token comment">//返回true</span>
$watch是一个实例方法
vm<span class="token punctuation">.</span><span class="token function">$watch</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span>oldValue</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token comment">//这个回调将在'vm.a'改变后调用</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="实例生命周期钩子"><a href="#实例生命周期钩子" class="headerlink" title="实例生命周期钩子"></a>实例生命周期钩子</h3><p>每个Vue实例在被创建时都要经过一系列的初始化过程，如设置数据监听、编译模板、将实例挂载到DOM并在数据变化时更新DOM等。同时在这个过程中也会运行一些名为<strong>生命周期钩子</strong>的函数。</p>
<p>如<code>created</code>钩子可以用来在一个实例被创建之后执行代码：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
        data<span class="token operator">:</span><span class="token punctuation">&#123;</span>
            a<span class="token operator">:</span><span class="token number">1</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token function-variable function">created</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'a is: '</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token comment">//返回a is: 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>也有一些其他的钩子，在实例生命周期的不同阶段被调用，如<code>mounted</code>、<code>updated</code>和<code>destroyed</code>。生命周期钩子的<code>this</code>上下文指向调用它的Vue实例。</p>
<p><strong>注意：**</strong>不要在选项property或回调上使用箭头函数<strong>，如<code>created:()=&gt;console.log(this.a)</code>或是<code>vm.$watch(&#39;a&#39;,newValue=&gt;this.myMethod())</code></strong>。因为箭头函数并没有<code>this</code><strong>，<code>this</code>作为变量一直向上级词法作用域查找，直至找到为止，</strong>经常会报错。**</p>
<h3 id="生命周期图示"><a href="#生命周期图示" class="headerlink" title="生命周期图示"></a>生命周期图示</h3><p><img src="/2022/11/03/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E4%B8%80%EF%BC%89/2.png" alt></p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>前端</category>
        <category>前端框架</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>前端框架之Vue.js（二）</title>
    <url>/2022/11/04/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Vue-js基础"><a href="#Vue-js基础" class="headerlink" title="Vue.js基础"></a>Vue.js基础</h1><h2 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h2><p>Vue.js使用了基于HTML的模板语法，允许开发者声明式地将DOM绑定至底层Vue实例的数据。所有的Vue.js模板都是合法的HTML。</p>
<h3 id="插值"><a href="#插值" class="headerlink" title="插值"></a>插值</h3><h4 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h4><p>数据绑定最常见的形式就是使用”Mustache”语法（双大括号）的文本插值：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>message:&#123;&#123;message&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> app<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    el<span class="token operator">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>
    data<span class="token operator">:</span><span class="token punctuation">&#123;</span>
        message<span class="token operator">:</span><span class="token string">'Hello Vue!'</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>Mustache标签将会被替代为对应数据对象上<code>msg</code> property的值。当绑定的数据对象上<code>msg</code> property发生了改变，插值的内容都会更新。</p>
<p>使用<code>v-once</code>指令，可以执行一次性地插值。当数据改变时，插值处的内容不会更新，但这会影响到该节点上的其他数据绑定：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-once</span><span class="token punctuation">></span></span>本句话将不会改变：&#123;&#123;msg&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">app<span class="token punctuation">.</span>message<span class="token operator">=</span><span class="token string">'nihao'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="原始HTML"><a href="#原始HTML" class="headerlink" title="原始HTML"></a>原始HTML</h4><p>双大括号会将数据解释为普通文本，并非是HTML代码。使用<code>v-html</code>指令可以输出HTML代码：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Using mushaches:&#123;&#123;rewHtml&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Using v-html directive:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-html</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rewHtml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> app<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    el<span class="token operator">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>
    data<span class="token operator">:</span><span class="token punctuation">&#123;</span>
        message<span class="token operator">:</span><span class="token string">'Hello Vue!'</span><span class="token punctuation">,</span>
        rewHtml<span class="token operator">:</span><span class="token string">'&lt;span style="color:red">This should be red.&lt;/span>'</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这个<code>span</code>的内容将会被替换成为property值<code>rawHtml</code>，忽略解析property值中的数据绑定后，直接作为HTML。<strong>注意不能使用<code>v-html</code>来复合局部模板。</strong></p>
<p>在站点上动态渲染任意的HTML可能会非常危险，其很容易导致XSS攻击。因此要只对可信内容使用HTML插值，不要对用户提供的内容使用插值。</p>
<h4 id="Attribute"><a href="#Attribute" class="headerlink" title="Attribute"></a>Attribute</h4><p>Mustache语法不能作用在HTML attribute上，此时应该使用<code>v-bind</code>指令：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dynamicId<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>disabled</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>isButtonDisabled<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Button<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> app<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    el<span class="token operator">:</span><span class="token string">'#dynamicId'</span><span class="token punctuation">,</span>
    data<span class="token operator">:</span><span class="token punctuation">&#123;</span>
        isButtonDisabled<span class="token operator">:</span><span class="token boolean">true</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>若<code>isButtonDisabled</code>的值是<code>null</code>、<code>undefined</code>或<code>false</code>，则<code>disable</code>attribute是不会被包含在渲染出来的<code>&lt;button&gt;</code>元素中。</p>
<h4 id="使用JavaScript表达式"><a href="#使用JavaScript表达式" class="headerlink" title="使用JavaScript表达式"></a>使用JavaScript表达式</h4><p>对于所有的数据绑定，Vue.js提供了完全的JavaScript表达式支持。</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;body&gt;
    &lt;div id&#x3D;&quot;app&quot;&gt;
        &lt;p&gt;number:&#123;&#123;number+1&#125;&#125;&lt;&#x2F;p&gt;
        &lt;p&gt;ok:&#123;&#123;ok?&#39;YES&#39;:&#39;NO&#39;&#125;&#125;&lt;&#x2F;p&gt;
        &lt;p&gt;&#123;&#123;message.split(&#39;&#39;).reverse().join(&#39;&#39;)&#125;&#125;&lt;&#x2F;p&gt;
    &lt;&#x2F;div&gt;
&lt;&#x2F;body&gt;
&lt;script&gt;
    var app&#x3D;new Vue(&#123;
        el:&#39;#app&#39;,
        data:&#123;
            number:123,
            ok:&#39;1&gt;2&#39;,
            message:&#39;hello&#39;,
        &#125;
    &#125;)
&lt;&#x2F;script&gt;xxxxxxxxxx17 1&lt;body&gt;2    &lt;div id&#x3D;&quot;app&quot;&gt;3        &lt;p&gt;number:&#123;&#123;number+1&#125;&#125;&lt;&#x2F;p&gt;4        &lt;p&gt;ok:&#123;&#123;ok?&#39;YES&#39;:&#39;NO&#39;&#125;&#125;&lt;&#x2F;p&gt;5        &lt;p&gt;&#123;&#123;message.split(&#39;&#39;).reverse().join(&#39;&#39;)&#125;&#125;&lt;&#x2F;p&gt;6    &lt;&#x2F;div&gt;7&lt;&#x2F;body&gt;8&lt;script&gt;9    var app&#x3D;new Vue(&#123;10        el:&#39;#app&#39;,11        data:&#123;12            number:123,13            ok:&#39;1&gt;2&#39;,14            message:&#39;hello&#39;,15        &#125;16    &#125;)17&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上述表达式会在所属Vue实例的数据作用域下作为JavaScript被解析。注意：每个绑定都只能包含单个表达式。因此下面的例子不会生效：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!--这是语句，不是表达式--&gt;
&#123;&#123;var a&#x3D;1&#125;&#125;
&lt;!--流控制也不会生效，请使用三元表达式--&gt;
&#123;&#123;if (ok)&#123; return message &#125;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>模板表达式</strong>都被放在沙盒中，<strong>只能访问全局变量的一个白名单</strong>，如Math和Date。不要在模板表达式中视图访问用户定义的全局变量。</p>
<h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><p>指令是带有<code>v-</code>前缀的特殊attribute。指令attribute的值预期是<strong>单个JavaScript表达式</strong>（<code>v-for</code>除外）指令的职责是，当表达式的值改变时，将其产生的连带影响，响应式地作用于DOM，如：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>seen<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>现在可以看到我<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>在这里，<code>v-if</code>指令将根据表达式<code>seen</code>值的真假来插入/移除<code>&lt;p&gt;</code>元素。</p>
<h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><p>一些指令能够接收一个“参数”，在指令名称之后以冒号表示。如<code>v-bind</code>指令可以用于响应式地更新HTML attribute:</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>在这里，<code>href</code>是参数，告知<code>v-bind</code>指令将该元素的<code>href</code> attribute与表达式<code>url</code>的值绑定。</p>
<p>另一个<code>v-on</code>指令可用于监听DOM事件：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>doSomething<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>在这里参数是监听的事件名。</p>
<h4 id="动态参数"><a href="#动态参数" class="headerlink" title="动态参数"></a>动态参数</h4><p>从Vue2.6.0开始，可以用方括号括起来的JavaScript表达式作为一个指令的参数：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>[attributeName]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这里的<code>attributeName</code>会被作为一个JavaScript表达式进行动态求值，求得的值将会作为最终的参数来使用。如，若Vue实例中有一个名为<code>attributeName</code>的<code>data</code>property，其值为<code>href</code>，则上面的语句等价于<code>v-bind:href=&quot;url&quot;</code>。</p>
<p>动态参数可以为一个动态的事件名绑定处理函数：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-on:</span>[eventName]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>doSomething<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>在这里，当<code>eventName</code>的值为<code>&quot;focus&quot;</code>时，<code>v-on:&#123;eventName&#125;</code>将等价于<code>v-on:focus</code>。</p>
<p><strong>对动态参数值的约束</strong>：</p>
<p>动态函数预期会求出一个字符串，异常情况下值为<code>null</code>。这个特殊的<code>null</code>值可以被显性地用于移除绑定。任何其它非字符串类型的值都将会触发一个警告。</p>
<p><strong>对动态参数表达式的约束：</strong></p>
<p>动态参数表达式有一些语法约束，如空格和引号，放在HTML attribute名里是无效的。因此使用没有空格或引号的表达式，或使用计算属性来替代这种复杂表达式。</p>
<p>在DOM中使用模板时（即直接在HTML文件里撰写模板），由于浏览器会把attribute名全部强制转为小写，还要避免使用大写字符来命名键名。</p>
<h4 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h4><p>修饰符是以半角句号<code>.</code>指明的特殊后缀，用于指出一个指令应该以特殊方式绑定。如<code>.prevent</code>修饰符告诉<code>v-on</code>指令对于触发的事件调用<code>event.preventDefault()</code>：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name"><span class="token namespace">v-on:</span>submit.prevent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onSubmit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="缩写"><a href="#缩写" class="headerlink" title="缩写"></a>缩写</h3><p><code>v-</code>前缀作为一种视觉提示，用来识别模板中Vue特定的attribute。<code>v-</code>前缀有助于为现有标签添加动态行为，但在一些频繁用到的指令以及构建由Vue管理所有模板的单页面应用程序里，<code>v-</code>前缀的作用不大。</p>
<h4 id="v-bind缩写"><a href="#v-bind缩写" class="headerlink" title="v-bind缩写"></a><code>v-bind</code>缩写</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 完整语法 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
<span class="token comment">&lt;!-- 缩写 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">:href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
<span class="token comment">&lt;!-- 动态参数的缩写 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">:[key]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">a:</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="v-on缩写"><a href="#v-on缩写" class="headerlink" title="v-on缩写"></a><code>v-on</code>缩写</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 完整语法 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>doSomething<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
<span class="token comment">&lt;!-- 缩写 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>doSomething<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
<span class="token comment">&lt;!-- 动态参数的缩写 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">@[event]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>doSomething<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">a:</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="计算属性和侦听器"><a href="#计算属性和侦听器" class="headerlink" title="计算属性和侦听器"></a>计算属性和侦听器</h2><h3 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h3><p>对于任何复杂逻辑，应当使用计算属性。</p>
<h4 id="基础例子"><a href="#基础例子" class="headerlink" title="基础例子"></a>基础例子</h4><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;body&gt;
    &lt;div id&#x3D;&quot;example&quot;&gt;
        &lt;p&gt;Original message:&quot;&#123;&#123;message&#125;&#125;&quot;&lt;&#x2F;p&gt;
        &lt;p&gt;Computed reversed message:&quot;&#123;&#123;reversedMessage&#125;&#125;&quot;&lt;&#x2F;p&gt;
    &lt;&#x2F;div&gt;
&lt;&#x2F;body&gt;
&lt;script&gt;
    var vm&#x3D;new Vue(&#123;
        el:&#39;#example&#39;,
        data:&#123;
            message:&#39;Hello&#39;
        &#125;,
        computed:&#123;
            reversedMessage:function()&#123;
                return this.message.split(&#39;&#39;).reverse().join(&#39;&#39;)
            &#125;
        &#125;
    &#125;)
&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在这里声明了一个计算属性<code>reversedMessage</code>，提供的函数将用作property<code>vm.reversedMessage</code>的getter函数。</p>
<p>打开F12中的JavaScript控制台，输入以下JavaScript代码：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>reversedMessage<span class="token punctuation">)</span>
<span class="token comment">//返回olleH</span>
vm<span class="token punctuation">.</span>message<span class="token operator">=</span><span class="token string">'Goodbye'</span>
<span class="token comment">//返回'Goodbye'</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>reversedMessage<span class="token punctuation">)</span>
<span class="token comment">//返回eybdooG</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到，<code>vm.reversedMessage</code>的值始终取决于<code>vm.message</code>的值。</p>
<p><code>vm.reversedMessage</code>依赖于<code>vm.message</code>，因此当<code>vm.message</code>发生改变时，所有依赖<code>vm.reversedMessage</code>的绑定也会更新。由于已经以声明的方式创建了这种依赖关系，因此计算属性的getter函数是没有副作用的。</p>
<h4 id="计算属性缓存-vs-方法"><a href="#计算属性缓存-vs-方法" class="headerlink" title="计算属性缓存 vs 方法"></a>计算属性缓存 vs 方法</h4><p>通过在表达式中调用方法也可以达到与基础例子同样的效果，将同一函数定义为一个方法而不是一个计算属性：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;body&gt;
    &lt;div id&#x3D;&quot;example&quot;&gt;
        &lt;p&gt;Reverssed message:&quot;&#123;&#123;reversedMessage()&#125;&#125;&quot;&lt;&#x2F;p&gt;
    &lt;&#x2F;div&gt;
&lt;&#x2F;body&gt;
&lt;script&gt;
    var vm&#x3D;new Vue(&#123;
        el:&#39;#example&#39;,
        data:&#123;
            message:&#39;hello&#39;
        &#125;,
        methods:&#123;
            reversedMessage:function()&#123;
                return this.message.split(&#39;&#39;).reverse().join(&#39;&#39;)
            &#125;
        &#125;
    &#125;)
&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>打开F12中的JavaScript控制台，输入以下JavaScript代码：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span><span class="token function">reversedMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">//返回olleh</span>
vm<span class="token punctuation">.</span>message<span class="token operator">=</span><span class="token string">'exam'</span>
<span class="token comment">//返回'exam'</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span><span class="token function">reversedMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">//返回maxe</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到这两种方式的最终结果是相同的。不同的是<strong>计算属性是基于响应式依赖进行缓存的。</strong>只在相关响应式依赖发生改变时它们才会重新求值。也就是说，只要<code>message</code>还没有发生改变，多次访问<code>reversedMessage</code>计算属性会立即返回之前的计算结果，而不必再次执行函数。但这也意味着下面的计算属性将不再更新，因为其不是响应式依赖：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">computed<span class="token operator">:</span><span class="token punctuation">&#123;</span>
    <span class="token function-variable function">now</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>而每次触发重新渲染时，调用方法总会再次执行函数。</p>
<h4 id="计算属性-vs-侦听属性"><a href="#计算属性-vs-侦听属性" class="headerlink" title="计算属性 vs 侦听属性"></a>计算属性 vs 侦听属性</h4><p>Vue的侦听属性可以用来观察和响应Vue实例上的数据变动。当有一些数据需要随着其他数据变动而变动时，很容易会滥用<code>watch</code>。通常更好的做法是使用计算数学而不是命令是的<code>watch</code>回调。</p>
<p><code>watch</code>回调版本的代码：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;body&gt;
    &lt;div id&#x3D;&quot;demo&quot;&gt;
        &#123;&#123;fullName&#125;&#125;
    &lt;&#x2F;div&gt;
&lt;&#x2F;body&gt;
&lt;script&gt;
    var vm&#x3D;new Vue(&#123;
        el:&#39;#demo&#39;,
        data:&#123;
            firstName:&#39;Foo&#39;,
            lastName:&#39;Bar&#39;,
            fullName:&#39;Foo Bar&#39;
        &#125;,
        watch:&#123;
            firstName:function(val)&#123;
                this.fullName&#x3D;val+&#39; &#39;+this.lastName
            &#125;,
            lastName:function(val)&#123;
                this.fullName&#x3D;this.firstName+&#39; &#39;+val
            &#125;
        &#125;
    &#125;)
&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>计算属性版本的代码：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;body&gt;
    &lt;div id&#x3D;&quot;demo&quot;&gt;
        &#123;&#123;fullName&#125;&#125;
    &lt;&#x2F;div&gt;
&lt;&#x2F;body&gt;
&lt;script&gt;
    var vm&#x3D;new Vue(&#123;
        el:&#39;#demo&#39;,
        data:&#123;
            firstName:&#39;Foo&#39;,
            lastName:&#39;Bar&#39;
        &#125;,
        computed:&#123;
            fullName:function()&#123;
                return this.fullName&#x3D;this.firstName+&#39; &#39;+this.lastName
            &#125;
        &#125;
    &#125;)
&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>由此可见计算属性版本的代码比<code>watch</code>回调版本的代码好多了。</p>
<h4 id="计算属性的setter"><a href="#计算属性的setter" class="headerlink" title="计算属性的setter"></a>计算属性的setter</h4><p>计算属性默认只有getter，但在需要时也可以提供一个setter：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">computed<span class="token operator">:</span><span class="token punctuation">&#123;</span>
    fullName<span class="token operator">:</span><span class="token punctuation">&#123;</span>
        <span class="token comment">//getter</span>
        <span class="token function-variable function">get</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName<span class="token operator">+</span><span class="token string">' '</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>lastName
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token comment">//setter</span>
        <span class="token function-variable function">set</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">newValue</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">var</span> names<span class="token operator">=</span>newValue<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>firstName<span class="token operator">=</span>names<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token operator">=</span>names<span class="token punctuation">[</span>names<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>打开F12中的JavaScript控制台，运行<code>vm.fullName=&#39;zhangsan&#39;</code>时，setter会被调用，<code>vm.firstName</code>和<code>vm.lastName</code>也会随之更新。</p>
<h3 id="侦听器"><a href="#侦听器" class="headerlink" title="侦听器"></a>侦听器</h3><p>虽然计算属性在大多数情况下更合适，但有时也需要一个自定义的侦听器。<strong>当需要在数据变化时执行异步或开销较大的操作时，自定义侦听器的方式是最有用的。</strong></p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue&#x2F;dist&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;   
&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;axios@0.12.0&#x2F;dist&#x2F;axios.min.js&quot;&gt;&lt;&#x2F;script&gt;
&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;lodash@4.13.1&#x2F;lodash.min.js&quot;&gt;&lt;&#x2F;script&gt;
&lt;&#x2F;head&gt;
&lt;body&gt;
    &lt;div id&#x3D;&quot;watch-example&quot;&gt;
        &lt;p&gt;Ask a yes&#x2F;no question:
            &lt;input v-model&#x3D;&quot;question&quot;&gt;
        &lt;&#x2F;p&gt;
        &lt;p&gt;&#123;&#123;answer&#125;&#125;&lt;&#x2F;p&gt;
    &lt;&#x2F;div&gt;
&lt;&#x2F;body&gt;
&lt;script&gt;
    var watchExampleVM&#x3D;new Vue(&#123;
        el:&#39;#watch-example&#39;,
        data:&#123;
            question:&#39;&#39;,
            answer:&#39;I cannot give you an answer until you ask a question!&#39;
        &#125;,
        watch:&#123;
            question:function(newQuestion,oldQuestion)&#123;
                this.answer&#x3D;&#39;Waiting for you to stop typing...&#39;
                this.debouncedGetAnswer()
            &#125;
        &#125;,
        created:function()&#123;
            this.debouncedGetAnswer&#x3D;_.debounce(this.getAnswer,500)
        &#125;,
        methods:&#123;
            getAnswer:function()&#123;
                if(this.question.indexOf(&#39;?&#39;)&#x3D;&#x3D;&#x3D;-1)&#123;
                    this.answer&#x3D;&#39;Questions usually contain a question mark. ;-)&#39;
                    return
                &#125;
                this.answer&#x3D;&#39;Thinking...&#39;
                var vm&#x3D;this
                axios.get(&#39;https:&#x2F;&#x2F;yesno.wtf&#x2F;api&#39;)
                    .then(function(response)&#123;
                        vm.answer&#x3D;_.capitalize(response.data.answer)
                    &#125;)
                    .catch(function(error)&#123;
                        vm.answer&#x3D;&#39;Error! Could not reach the API. &#39;+error
                    &#125;)
            &#125;
        &#125;
    &#125;)
&lt;&#x2F;script&gt;
&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在这个示例中，<strong>使用<code>watch</code>选项执行异步操作（访问一个API），限制执行该操作的频率，并在得到最终结果前，设置中间状态</strong>。这些都是计算属性无法做到的。</p>
<h2 id="Class与Style绑定"><a href="#Class与Style绑定" class="headerlink" title="Class与Style绑定"></a>Class与Style绑定</h2><p>操作元素的class列表和内联样式是数据绑定的常见需求。由于它们都是attribute，因此可以用<code>v-bind</code>来处理它们。将<code>v-bind</code>用于<code>class</code>和<code>style</code>时，表达式结果的类型除了字符串之外，还可以是对象或数组。</p>
<h3 id="绑定HTML-Class"><a href="#绑定HTML-Class" class="headerlink" title="绑定HTML Class"></a>绑定HTML Class</h3><h4 id="对象语法"><a href="#对象语法" class="headerlink" title="对象语法"></a>对象语法</h4><p>动态地切换class可以传给<code>v-bind:class</code>一个对象：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;active:isActive&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Hello Vue!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>上面的代码表示<code>active</code>这个class存在与否将取决于数据property <code>isActive</code>的truthiness。</p>
<p>可以在对象中传入更多字段来动态切换多个class。<code>v-bind:class</code>指令也可以与普通的class attribute共存：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;body&gt;
    &lt;div 
    class&#x3D;&#39;static&#39;
    v-bind:class&#x3D;&quot;&#123;active:isActive,&#39;text-danger&#39;:hasError&#125;&quot;
    &gt;Hello Vue!&lt;&#x2F;div&gt;
&lt;&#x2F;body&gt;
&lt;script&gt;
    var tes&#x3D;new Vue(&#123;
    data:&#123;
        isActive:true,
        hasError:false
    &#125;
    &#125;)
&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>渲染后就等价于</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>static active<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>Hello Vue!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>当<code>isActive</code>或者<code>hasError</code>变化时，class列表将相应地更新。若<code>hasError</code>的值为<code>true</code>，则class列表将变为<code>class=&#39;static active text-danger&#39;</code>。</p>
<p>绑定的数据对象不必内联定义在模板里：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;body&gt;
    &lt;div v-bind:class&#x3D;&quot;classObject&quot;&gt;Hello Vue!&lt;&#x2F;div&gt;
&lt;&#x2F;body&gt;
&lt;script&gt;
    var tes&#x3D;new Vue(&#123;
        data:&#123;
            classObject:&#123;
                active:true,
                &#39;text-danger&#39;:false
            &#125;
        &#125;
    &#125;)
&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>其渲染结果和上面是一样的。也可以在这里绑定一个返回对象的计算属性，这是一个常用的模式：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;body&gt;
    &lt;div id&#x3D;&#39;test&#39; v-bind:class&#x3D;&quot;classObject&quot;&gt;Hello Vue!&lt;&#x2F;div&gt;
&lt;&#x2F;body&gt;
&lt;script&gt;
    var tes&#x3D;new Vue(&#123;
        data:&#123;
            isActive:true,
            error:null
        &#125;,
        computed:&#123;
            classObject:function()&#123;
                return &#123;
                    active:this.isActive &amp;&amp; !this.error,
                    &#39;text-danger&#39;:this.error &amp;&amp; this.error.type&#x3D;&#x3D;&#x3D;&#39;fatal&#39;
                &#125;
            &#125;
        &#125;
    &#125;)
&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="数组语法"><a href="#数组语法" class="headerlink" title="数组语法"></a>数组语法</h4><p>应用一个class列表可以把一个数组传给<code>v-bind:class</code>：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;body&gt;
    &lt;div v-bind:class&#x3D;&quot;[activeClass, errorClass]&quot;&gt;Hello Vue!&lt;&#x2F;div&gt;
&lt;&#x2F;body&gt;
&lt;script&gt;
    var tes&#x3D;new Vue(&#123;
        data:&#123;
            activeClass:&#39;active&#39;,
            errorClass:&#39;text-danger&#39;
        &#125;
    &#125;)
&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>渲染后就等价于</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>active text-danger<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>Hello Vue!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>若想根据条件切换列表中的class，可以用三元表达式：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>[isActive ? activeClass:<span class="token punctuation">'</span><span class="token punctuation">'</span>,errorClass]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Hello Vue!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这样便是始终添加<code>errorClass</code>，但只有在<code>isActive</code>是truthy时才添加<code>activeClass</code>。</p>
<p><strong>注意：</strong>truthy是指再布尔值上下文中，转换后的值为<code>&#39;true&#39;</code>，其不是true。</p>
<p>当有多个条件class时这样写有些繁琐，因此在数组语法中也可以使用对象语法：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>[&#123;active:isActive&#125;,errorClass]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Hello Vue!
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h4 id="用在组件上"><a href="#用在组件上" class="headerlink" title="用在组件上"></a>用在组件上</h4><p>当在一个自定义组件上使用<code>class</code> property时，这些class将被追加到该组件的根元素上面，已存在的class不会被覆盖。</p>
<p>若这有一组件声明如下：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Vue <span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'my-component'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>
    template<span class="token operator">:</span><span class="token string">'&lt;p class="foo bar">Hi&lt;/p>'</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>使用它时添加一些class：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-component</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-component</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>HTML将被渲染为：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>foo bar text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    Hi
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>对于带数据绑定的class也同样适用：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-component</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;active:isActive&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-component</span><span class="token punctuation">></span></span>
<span class="token comment">&lt;!--当isActive为truthy时，HTML将被渲染为--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>foo far active<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    Hi
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="绑定内联样式"><a href="#绑定内联样式" class="headerlink" title="绑定内联样式"></a>绑定内联样式</h3><h4 id="对象语法-1"><a href="#对象语法-1" class="headerlink" title="对象语法"></a>对象语法</h4><p><code>v-bind:style</code>的对象语法看起来非常像CSS，但实际上是个JavaScript对象。CSS property名可以用驼峰式（camelCase）或短横线分隔（kebab-case，记得用括号括起来）来命名：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;body&gt;
    &lt;div id&#x3D;&#39;test&#39; v-bind:style&#x3D;&quot;&#123;color:activeColor,fontSize:fontSize+&#39;px&#39;&#125;&quot;&gt;Hello Vue!&lt;&#x2F;div&gt;
&lt;&#x2F;body&gt;
&lt;script&gt;
    var tes&#x3D;new Vue(&#123;
        el:&#39;#test&#39;,
        data:&#123;
            activeColor:&#39;red&#39;,
            fontSize:30
        &#125;
    &#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>通常直接绑定到一个样式对象，让模板更清晰：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;body&gt;
    &lt;div id&#x3D;&#39;test&#39; v-bind:style&#x3D;&quot;styleObject&quot;&gt;Hello Vue!&lt;&#x2F;div&gt;
&lt;&#x2F;body&gt;
&lt;script&gt;
    var tes&#x3D;new Vue(&#123;
        el:&#39;#test&#39;,
        data:&#123;
            styleObject:&#123;
                color:&#39;red&#39;,
                fontSize:&#39;13px&#39;
            &#125;
        &#125;
    &#125;)
&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>对象语法常会结合返回对象的计算熟悉使用。</p>
<h4 id="数组语法-1"><a href="#数组语法-1" class="headerlink" title="数组语法"></a>数组语法</h4><p><code>v-bind:style</code>的数组书法可以将多个样式对象应用到同一个元素上：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>test<span class="token punctuation">'</span></span> <span class="token attr-name"><span class="token namespace">v-bind:</span>style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>[baseStyles,overridingStyles]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Hello Vue!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="自动添加前缀"><a href="#自动添加前缀" class="headerlink" title="自动添加前缀"></a>自动添加前缀</h4><p>当<code>v-bind:style</code>需要使用添加浏览器引擎前缀的CSS property时，如<code>tranform</code>，<strong>Vue.js会自动侦测并添加相应的前缀。</strong></p>
<h4 id="多重值"><a href="#多重值" class="headerlink" title="多重值"></a>多重值</h4><p>从Vue2.3.0版本起，可以为<code>style</code>绑定中的property提供一个包含多个值的数组，常用于提供多个带前缀的值：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;display:[<span class="token punctuation">'</span>-webkit-box<span class="token punctuation">'</span>,<span class="token punctuation">'</span>-ms-flexbox<span class="token punctuation">'</span>,<span class="token punctuation">'</span>flex<span class="token punctuation">'</span>]&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Helo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>上述代码只会渲染数组中最后一个被浏览器支持的值。若浏览器支持不带浏览器前缀的flexbox，那么就只会渲染<code>display:flex</code>。</p>
<h2 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h2><h3 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a><code>v-if</code></h3><p><code>v-if</code>指令用于条件性地渲染一块内容。这块内容只会再指令的表达式返回truthy值时被渲染：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>awesome<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Vue is awesome!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>也可以用<code>v-else</code>添加一个<code>&quot;else&quot;</code>块：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>awesome<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Vue is awesome!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">v-else</span><span class="token punctuation">></span></span>Oh no!!!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h4 id="在-lt-template-gt-元素上使用v-if条件渲染分组"><a href="#在-lt-template-gt-元素上使用v-if条件渲染分组" class="headerlink" title="在&lt;template&gt;元素上使用v-if条件渲染分组"></a>在<code>&lt;template&gt;</code>元素上使用<code>v-if</code>条件渲染分组</h4><p>由于<code>v-if</code>是一个指令，所以必须将它添加到一个元素上。若想要切换多个元素时，可以把一个<code>&lt;template&gt;</code>元素当作不可见的包裹元素并在<code>&lt;template&gt;</code>元素上使用<code>v-if</code>，最终的渲染结果将不包含<code>&lt;template&gt;</code>。</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ok<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Paragraph 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>paragraph 2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="v-else"><a href="#v-else" class="headerlink" title="v-else"></a><code>v-else</code></h4><p>可以用<code>v-else</code>指令来表示<code>v-if</code>的<code>&quot;else&quot;</code>块：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;body&gt;
&lt;div id&#x3D;&quot;test&quot;&gt;
    &lt;div v-if&#x3D;&quot;Math.random()&gt;0.5&quot;&gt;
        Now you see me!
    &lt;&#x2F;div&gt;
    &lt;div v-else&gt;
        Now you can not see me!
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;body&gt;
&lt;script&gt;
    var tes&#x3D;new Vue(&#123;
        el:&#39;#test&#39;
    &#125;)
&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>v-else</code>元素必须紧跟在带<code>v-if</code>或<code>v-else-if</code>的元素后面，否则它将不会被之别。</p>
<h4 id="v-else-if"><a href="#v-else-if" class="headerlink" title="v-else-if"></a><code>v-else-if</code></h4><p><code>v-else-if</code>指令表示<code>v-if</code>的<code>&quot;else-if&quot;</code>块，可以连续使用：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;body&gt;
&lt;div id&#x3D;&quot;test&quot;&gt;
    &lt;div v-if&#x3D;&quot;type&#x3D;&#x3D;&#x3D;&#39;A&#39;&quot;&gt;A&lt;&#x2F;div&gt;
    &lt;div v-else-if&#x3D;&quot;type&#x3D;&#x3D;&#x3D;&#39;B&#39;&quot;&gt;B&lt;&#x2F;div&gt;
    &lt;div v-else-if&#x3D;&quot;type&#x3D;&#x3D;&#x3D;&#39;c&#39;&quot;&gt;C&lt;&#x2F;div&gt;
    &lt;div v-else&gt;Not A&#x2F;B&#x2F;c&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;body&gt;
&lt;script&gt;
    var tes&#x3D;new Vue(&#123;
        el:&#39;#test&#39;,
        data:&#123;
            type:&#39;D&#39;
        &#125;
    &#125;)
&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>类似于<code>v-else</code>，<code>v-else-if</code>也必须紧跟在带<code>v-if</code>或<code>v-else-if</code>的元素之后。</p>
<h4 id="用key管理可复用的元素"><a href="#用key管理可复用的元素" class="headerlink" title="用key管理可复用的元素"></a>用<code>key</code>管理可复用的元素</h4><p>Vue通常会复用已有元素而不是从头开始渲染。这样除了让Vue变得非常快之外，还有其他一些好处。如允许用户在不同的登录方式之间切换：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;body&gt;
&lt;div id&#x3D;&quot;test&quot;&gt;
    &lt;template v-if&#x3D;&quot;loginType&#x3D;&#x3D;&#x3D;&#39;username&#39;&quot;&gt;
        &lt;label&gt;Username&lt;&#x2F;label&gt;
        &lt;input placeholder&#x3D;&quot;Enter your username&quot; &gt;
    &lt;&#x2F;template&gt;
    &lt;template v-else&gt;
        &lt;label&gt;Email&lt;&#x2F;label&gt;
        &lt;input placeholder&#x3D;&quot;Enter your email address&quot; &gt;
    &lt;&#x2F;template&gt;
    &lt;button v-on:click&#x3D;&quot;changeMessage&quot;&gt;Toggle login type&lt;&#x2F;button&gt;    
&lt;&#x2F;div&gt;
&lt;&#x2F;body&gt;
&lt;script&gt;
    var tes&#x3D;new Vue(&#123;
        el:&#39;#test&#39;,
        data:&#123;
            loginType:&#39;zhangsan&#39;
        &#125;,
        methods:&#123;
            changeMessage:function()&#123;
                return this.loginType&#x3D;this.loginType&#x3D;&#x3D;&#x3D;&#39;username&#39;?&#39;eamil&#39;:&#39;username&#39;
            &#125;
        &#125;
    &#125;)
&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>运行结果如下：</p>
<p><img src="/2022/11/04/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E4%BA%8C%EF%BC%89/1.png" alt></p>
<p>在输入框输入一些文本，然后按下切换按钮。可以看到用户输入在输入框的内容是不变的。</p>
<p>这意味着在上面的代码中切换<code>loginType</code>将不会清除用户已经输入的内容。因为两个模板使用了相同的元素，<code>&lt;input&gt;</code>不会被替换掉，仅只是替换了它的<code>placeholder</code>。</p>
<p>Vue还提供一种方式来表达“这两个元素是完全独立的，不要复用它们”，只需要添加一个具有唯一值的<code>key</code> attribute即可：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;body&gt;
&lt;div id&#x3D;&quot;test&quot;&gt;
    &lt;template v-if&#x3D;&quot;loginType&#x3D;&#x3D;&#x3D;&#39;username&#39;&quot;&gt;
        &lt;label&gt;Username&lt;&#x2F;label&gt;
        &lt;input placeholder&#x3D;&quot;Enter your username&quot; key&#x3D;&quot;username-input&quot;&gt;
    &lt;&#x2F;template&gt;
    &lt;template v-else&gt;
        &lt;label&gt;Email&lt;&#x2F;label&gt;
        &lt;input placeholder&#x3D;&quot;Enter your email address&quot; key&#x3D;&quot;email-input&quot;&gt;
    &lt;&#x2F;template&gt;
    &lt;button v-on:click&#x3D;&quot;changeMessage&quot;&gt;Toggle login type&lt;&#x2F;button&gt;    
&lt;&#x2F;div&gt;
&lt;&#x2F;body&gt;
&lt;script&gt;
    var tes&#x3D;new Vue(&#123;
        el:&#39;#test&#39;,
        data:&#123;
            loginType:&#39;zhangsan&#39;
        &#125;,
        methods:&#123;
            changeMessage:function()&#123;
                return this.loginType&#x3D;this.loginType&#x3D;&#x3D;&#x3D;&#39;username&#39;?&#39;eamil&#39;:&#39;username&#39;
            &#125;
        &#125;
    &#125;)
&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>运行代码后，再次在输入框输入一些文本，然后按下切换按钮。可以看到每次切换时，输入框都将被重新渲染。</p>
<p>需要注意的是：这里的<code>&lt;label&gt;</code>仍然会被高效得复用，因为它们没有添加<code>key</code>attribute。</p>
<h3 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a><code>v-show</code></h3><p>另一个用于根据条件展示元素的选项是<code>v-show</code>指令：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ok<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Hello!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>与<code>v-if</code>不同的是，<code>v-show</code>的元素始终会被渲染并保留在DOM中，其只是简单地切换元素的CSS property <code>display</code>。</p>
<p>注意：<strong><code>v-show</code>不支持<code>&lt;template&gt;</code>元素，也不支持<code>`v-else</code></strong>。</p>
<h3 id="v-if-VS-v-show"><a href="#v-if-VS-v-show" class="headerlink" title="v-if VS v-show"></a><code>v-if</code> VS <code>v-show</code></h3><ul>
<li><p><code>v-if</code> 是真正的条件渲染，它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。</p>
</li>
<li><p><code>v-if</code> 是惰性的：<strong>若在初始渲染时条件为假，则什么也不做。直至条件第一次变为真时，才会开始渲染条件块。</strong></p>
</li>
<li>而<code>v-show</code><strong>不管初始条件是什么，元素总是会被渲染，并且只是简单地基于CSS进行切换。</strong></li>
</ul>
<p>一般来说，<code>v-if</code> 有更高的切换开销，<code>v-show</code>有更高的初始渲染开销。<strong>因此若需要非常频繁地切换，则使用<code>v-show</code>；若在运行时条件很少改变，则使用<code>v-if</code> 。</strong></p>
<h3 id="v-if-与v-for一起使用"><a href="#v-if-与v-for一起使用" class="headerlink" title="v-if 与v-for一起使用"></a><code>v-if</code> 与<code>v-for</code>一起使用</h3><p>不推荐同时使用<code>v-if</code> 和<code>v-for</code>。</p>
<p>当<code>v-if</code> 和<code>v-for</code>一起使用时，<code>v-for</code> 具有比<code>v-if</code> 更高的优先级。这意味着<code>v-if</code>将分别重复运行于每个<code>v-for</code>循环中。当只想为部分项渲染节点时，这种优先节点十分有用：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>todo in todos<span class="token punctuation">"</span></span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>!todo.isComplete<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123;todo&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>上面的代码只渲染未完成的todo。</p>
<p>而若是想要有条件地跳过循环的执行，则可以将<code>v-if</code>置于外层元素（或<code>&lt;template&gt;</code>）上：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>todos.length<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>todo in todos<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123;todo&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-else</span><span class="token punctuation">></span></span>No todos left!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>前端</category>
        <category>前端框架</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>前端框架之Vue.js（三）</title>
    <url>/2022/11/04/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Vue-js基础"><a href="#Vue-js基础" class="headerlink" title="Vue.js基础"></a>Vue.js基础</h1><h2 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h2><h3 id="用v-for把一个数组对应为一组元素"><a href="#用v-for把一个数组对应为一组元素" class="headerlink" title="用v-for把一个数组对应为一组元素"></a>用<code>v-for</code>把一个数组对应为一组元素</h3><p>基于一个数组来渲染列表可以使用<code>v-for</code>指令。<code>v-for</code>指令需要通过<code>item in items</code>形式的特殊语法，其中<code>items</code>是源数据数组，而<code>item</code>是被迭代的数组元素的别名。</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;body&gt;
&lt;ul id&#x3D;&quot;example-1&quot;&gt;
    &lt;li v-for&#x3D;&quot;item in items&quot; :key&#x3D;&quot;item.message&quot;&gt;
        &#123;&#123;item.message&#125;&#125;
    &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;   
&lt;&#x2F;body&gt;
&lt;script&gt;
    var example1&#x3D;new Vue(&#123;
        el:&#39;#example-1&#39;,
        data:&#123;
            items:[
                &#123;message:&#39;First&#39;&#125;,
                &#123;message:&#39;Second&#39;&#125;
            ]
        &#125;
    &#125;)
&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>运行结果如下：</p>
<p><img src="/2022/11/04/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E4%B8%89%EF%BC%89/1.png" alt></p>
<p>在<code>v=for</code>块中，可以访问所有父作用域的property。<code>v-for</code>还支持一个可选的第二个参数，即当前项的索引。</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;ul id&#x3D;&quot;example-2&quot;&gt;
    &lt;li v-for&#x3D;&quot;(item,index) in items&quot;&gt;
        &#123;&#123;parentMessage&#125;&#125;-&#123;&#123;index&#125;&#125;-&#123;&#123;item.message&#125;&#125;
    &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;body&gt;
&lt;script&gt;
    var example2&#x3D;new Vue(&#123;
        el:&#39;#example-2&#39;,
        data:&#123;
            parentMessage:&#39;Parent&#39;,
            items:[
                &#123;message:&#39;First&#39;&#125;,
                &#123;message:&#39;Second&#39;&#125;
            ]
        &#125;
    &#125;)
&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>运行结果如下：</p>
<p><img src="/2022/11/04/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E4%B8%89%EF%BC%89/2.png" alt></p>
<p>其中，也可以用<code>of</code>替代<code>in</code>作为分隔符，<code>if</code>更接近Javascript迭代器的语法：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item of items<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="在v-for里使用对象"><a href="#在v-for里使用对象" class="headerlink" title="在v-for里使用对象"></a>在<code>v-for</code>里使用对象</h3><p>遍历一个对象的property可以用<code>v-for</code>指令：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;body&gt;
&lt;ul id&#x3D;&quot;v-for-object&quot; class&#x3D;&quot;demo&quot;&gt;
    &lt;li v-for&#x3D;&quot;value in object&quot;&gt;
        &#123;&#123;value&#125;&#125;
    &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;body&gt;
&lt;script&gt;
    new Vue(&#123;
        el:&#39;#v-for-object&#39;,
        data:&#123;
            object:&#123;
                title:&#39;How to do lists in Vue&#39;,
                author:&#39;ZhangSan&#39;,
                publicshedAt:&#39;2022-11-04&#39;
            &#125;
        &#125;
    &#125;)
&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>运行结果如下：</p>
<p><img src="/2022/11/04/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E4%B8%89%EF%BC%89/3.png" alt></p>
<p>也可以提供第二个参数为property名称（即键名）：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;body&gt;
&lt;ul id&#x3D;&quot;v-for-object&quot; class&#x3D;&quot;demo&quot;&gt;
    &lt;li v-for&#x3D;&quot;(value,name) in object&quot;&gt;
        &#123;&#123;name&#125;&#125;:&#123;&#123;value&#125;&#125;
    &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>运行结果如下：</p>
<p><img src="/2022/11/04/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E4%B8%89%EF%BC%89/4.png" alt></p>
<p>还可以用第三个参数作为索引：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;body&gt;
&lt;ul id&#x3D;&quot;v-for-object&quot; class&#x3D;&quot;demo&quot;&gt;
    &lt;li v-for&#x3D;&quot;(value,name,index) in object&quot;&gt;
        &#123;&#123;index&#125;&#125;:&#123;&#123;name&#125;&#125;:&#123;&#123;value&#125;&#125;
    &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>运行结果如下：</p>
<p><img src="/2022/11/04/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E4%B8%89%EF%BC%89/5.png" alt></p>
<p>在遍历对象时，会按<code>Object.keys()</code>的结果遍历，但不能保证它的结果在不同的JavaScript引擎下都一致。</p>
<h3 id="维护状态"><a href="#维护状态" class="headerlink" title="维护状态"></a>维护状态</h3><p>当Vue正在更新使用<code>v-for</code>渲染的元素列表时，默认使用“就地更新”的策略。若数据项的顺序被改变，Vue将不会移动DOM元素来匹配数据项的顺序，而是就地更新每个元素，并且确保它们在每个索引位置正确渲染。<strong>这个默认模式只适用于不依赖子组件状态或临时DOM状态的列表渲染输出（如表单输入值）。</strong></p>
<p>为了给Vue一个提示以便它能够跟踪每个节点的身份，从而重用和重新排序现有元素，需要为每项提供一个唯一的<code>key</code> attribute：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item in items<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-bind:</span>key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token comment">&lt;!--内容--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><strong>尽可能在使用<code>v-for</code>时提供<code>key</code> attribute</strong>，除非遍历输出的DOM内容非常简单，或是刻意依赖默认行为以获取性能上的提升。由于它是Vue识别节点的一个通用机制，<code>key</code>并不仅与<code>v-for</code>特别关联。</p>
<p>不要使用对象或数组之类的非基本类型值作为<code>v-for</code>的<code>key</code>，要用字符串或数值类型的值。</p>
<h3 id="数组更新检测"><a href="#数组更新检测" class="headerlink" title="数组更新检测"></a>数组更新检测</h3><h4 id="变更方法"><a href="#变更方法" class="headerlink" title="变更方法"></a>变更方法</h4><p>Vue将被侦听的数组的变更方法进行了包裹，因此它们也将会触发视图更新。</p>
<p>这些被包裹过的方法有：</p>
<ul>
<li>push()</li>
<li>pop()</li>
<li>shift()</li>
<li>unshift()</li>
<li>splice()</li>
<li>sort()</li>
<li>reverse()</li>
</ul>
<h4 id="替换数组"><a href="#替换数组" class="headerlink" title="替换数组"></a>替换数组</h4><p>变更方法会变更调用了这些方法的原始数组。相比之下，也有非变更方法。如<code>filter()</code>、<code>concat()</code>和<code>slice()</code>。<strong>它们不会变更原始数组，而是总是返回一个新数组</strong>。当使用非变更方法时，可以用新数组替换旧数组。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">example<span class="token punctuation">.</span>items<span class="token operator">=</span>example<span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> item<span class="token punctuation">.</span>message<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">Foo</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><strong>注意：</strong>由于JavaScript的限制，Vue不能检测数组和对象的变化。</p>
<h3 id="显示过滤-排序后的结果"><a href="#显示过滤-排序后的结果" class="headerlink" title="显示过滤/排序后的结果"></a>显示过滤/排序后的结果</h3><p>若要显示一个数组经过过滤或排序后的版本，而不实际变更或重置原始数据，可以通过创建一个计算属性来返回过滤或排序后的数组：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;body&gt;
&lt;div id&#x3D;&quot;test&quot;&gt;
    &lt;li  v-for&#x3D;&quot;n in evenNumbers&quot;&gt;&#123;&#123;n&#125;&#125;&lt;&#x2F;li&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;body&gt;
&lt;script&gt;
    new Vue(&#123;
        el:&#39;#test&#39;,
        data:&#123;
            numbers:[1,2,3,4,5]
        &#125;,
        computed:&#123;
            evenNumbers:function()&#123;
                return this.numbers.filter(function (number)&#123;
                    return number %2&#x3D;&#x3D;&#x3D;0
                &#125;)
            &#125;
        &#125;
    &#125;)
&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>注意：<code>v-for</code>指令不能在根节点使用！</strong></p>
<p>在嵌套<code>v-for</code>循环中不适应计算属性的情况下，可以使用一个方法：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;body&gt;
&lt;div id&#x3D;&quot;test&quot;&gt;
    &lt;ul v-for&#x3D;&quot;set in sets&quot;&gt;
        &lt;li  v-for&#x3D;&quot;n in even(set)&quot;&gt;&#123;&#123;n&#125;&#125;&lt;&#x2F;li&gt;
    &lt;&#x2F;ul&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;body&gt;
&lt;script&gt;
    new Vue(&#123;
        el:&#39;#test&#39;,
        data:&#123;
            sets:[[1,2,3,4,5],[6,7,8,9,10]]
        &#125;,
        methods:&#123;
            even:function(numbers)&#123;
                return numbers.filter(function (number)&#123;
                    return number %2&#x3D;&#x3D;&#x3D;0
                &#125;)
            &#125;
        &#125;
    &#125;)
&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="在v-for里使用值范围"><a href="#在v-for里使用值范围" class="headerlink" title="在v-for里使用值范围"></a>在<code>v-for</code>里使用值范围</h3><p><code>v-for</code>也可以接收整数。在这种情况下，它会把模板重复对应次数：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;div id&#x3D;&quot;test&quot;&gt;
    &lt;span v-for&#x3D;&quot;n in 10&quot;&gt;&#123;&#123;n&#125;&#125;&lt;&#x2F;span&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;body&gt;
&lt;script&gt;
    new Vue(&#123;
        el:&#39;#test&#39;
    &#125;)
&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="在-lt-template-gt-上是使用v-for"><a href="#在-lt-template-gt-上是使用v-for" class="headerlink" title="在&lt;template&gt;上是使用v-for"></a>在<code>&lt;template&gt;</code>上是使用<code>v-for</code></h3><p>与<code>v-if</code>类似，也可以利用带有<code>v-for</code>的<code>&lt;template&gt;</code>来循环渲染一段包含多个元素的内容：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item in items<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>&#123;&#123;item.msg&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>divider<span class="token punctuation">"</span></span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>presentation<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="在组件上使用v-for"><a href="#在组件上使用v-for" class="headerlink" title="在组件上使用v-for"></a>在组件上使用<code>v-for</code></h3><p>在自定义组件上，可以像在任何普通元素上一样使用<code>v-for</code>：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-component</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item in items<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-component</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><strong>在Vue2.2.0+的版本里，在组件上使用<code>v-for</code>时，<code>key</code>是必须的。</strong></p>
<p>由于组件有自己独立的作用域，任何数据都不会被自动传递到组件里。使用prop把迭代数据传递到组件里：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-component</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(item,index) in items<span class="token punctuation">"</span></span> 
<span class="token attr-name"><span class="token namespace">v-bind:</span>item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> 
<span class="token attr-name"><span class="token namespace">v-bind:</span>index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span> 
<span class="token attr-name"><span class="token namespace">v-bind:</span>key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-component</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>若是自动将<code>item</code>注入到组件里，会使得组件与<code>v-for</code>的运行紧密耦合。明确组件数据的来源能够使组件在其他场合重复使用。</p>
<p>下面是个简单的todo列表的完整代码：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue&#x2F;dist&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;   
&lt;&#x2F;head&gt;
&lt;body&gt;
&lt;div id&#x3D;&quot;todo-list-example&quot;&gt;
    &lt;form v-on:submit.prevent&#x3D;&quot;addNewTodo&quot;&gt;
        &lt;label for&#x3D;&quot;new-todo&quot;&gt;Add a todo&lt;&#x2F;label&gt;
        &lt;input v-model&#x3D;&quot;newTodoText&quot; id&#x3D;&quot;new-todo&quot; placeholder&#x3D;&quot;E.g. Feed the cat&quot;&gt;
        &lt;button&gt;Add&lt;&#x2F;button&gt;
    &lt;&#x2F;form&gt;
    &lt;ul&gt;
        &lt;!--这里的is&#x3D;&quot;todo-item&quot; attribute在使用DOM模板时是十分必要的。
		在&lt;ul&gt;元素内只有&lt;li&gt;元素会被看作有效内容。	
		这样做实现的效果与&lt;todo-item&gt;相同，但可以避开一些潜在的浏览器解析错误--&gt;
        &lt;li is&#x3D;&quot;todo-item&quot; v-for&#x3D;&quot;(todo,index) in todos&quot; 
        v-bind:key&#x3D;&quot;todo.id&quot; v-bind:title&#x3D;&quot;todo.title&quot; 
        v-on:remove&#x3D;&quot;todos.splice(index,1)&quot;&gt;&lt;&#x2F;li&gt;
    &lt;&#x2F;ul&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;body&gt;
&lt;script&gt;
    Vue.component(&#39;todo-item&#39;,&#123;
        template:&#39;\
        &lt;li&gt;\
          &#123;&#123; title &#125;&#125;\
          &lt;button v-on:click&#x3D;&quot;$emit(\&#39;remove\&#39;)&quot;&gt;Remove&lt;&#x2F;button&gt;\
        &lt;&#x2F;li&gt;\
        &#39;,
        props:[&#39;title&#39;]
    &#125;)
    new Vue(&#123;
        el:&#39;#todo-list-example&#39;,
        data:&#123;
            newTodoText:&#39;&#39;,
            todos:[
                &#123;
                    id:1,
                    title:&#39;Do the dishes&#39;,
                &#125;,
                &#123;
                    id:2,
                    title:&#39;Take out the trash&#39;,
                &#125;,
                &#123;
                    id:3,
                    title:&#39;Mow the lawn&#39;
                &#125;
            ],
            nextTodoId:4
        &#125;,
        methods:&#123;
            addNewTodo:function()&#123;
                this.todos.push(&#123;
                    id:this.nextTodoId++,
                    title:this.newTodoText
                &#125;)
                this.newTodoText&#x3D;&#39;&#39;
            &#125;
        &#125;
    &#125;)
&lt;&#x2F;script&gt;
&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>运行结果如下：</p>
<p><img src="/2022/11/04/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E4%B8%89%EF%BC%89/6.png" alt></p>
<h2 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h2><h3 id="使用v-on监听事件"><a href="#使用v-on监听事件" class="headerlink" title="使用v-on监听事件"></a>使用<code>v-on</code>监听事件</h3><p>可以用<code>v-on</code>指令监听DOM事件，并在触发时运行一些JavaScriptdiamond：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;body&gt;
&lt;div id&#x3D;&quot;example-1&quot;&gt;
    &lt;button v-on:click&#x3D;&quot;counter+&#x3D;1&quot;&gt;Add 1&lt;&#x2F;button&gt;
    &lt;p&gt;The button above has been clicked &#123;&#123;counter&#125;&#125; times.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;body&gt;
&lt;script&gt;
var example1&#x3D;new Vue(&#123;
    el:&#39;#example-1&#39;,
    data:&#123;
        counter:0
    &#125;
&#125;)
&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>运行结果如下：</p>
<p><img src="/2022/11/04/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E4%B8%89%EF%BC%89/7.png" alt></p>
<p>使用<code>v-on</code>指令有几个好处：</p>
<ul>
<li>看一眼HTML模板就可以定位在JavaScript代码里对应的方法</li>
<li>由于无需在JavaScript里手动绑定事件，因此所编写的ViewModel代码是纯粹的逻辑，与DOM完全解耦，更易于测试</li>
<li>当一个ViewModel被销毁时，所有的事件处理器都会自动被删除，无需额外清理。</li>
</ul>
<h3 id="事件处理方法"><a href="#事件处理方法" class="headerlink" title="事件处理方法"></a>事件处理方法</h3><p>由于许多事件处理逻辑会更为复杂，因此直接把JavaScript代码写在<code>v-on</code>指令中是不可行的，<code>v-on</code>还可以接收一个需要调用的方法名称：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;body&gt;
&lt;div id&#x3D;&quot;example-2&quot;&gt;
    &lt;!--greet是定义的方法名--&gt;
    &lt;button v-on:click&#x3D;&quot;greet&quot;&gt;Greet&lt;&#x2F;button&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;body&gt;
&lt;script&gt;
var example2&#x3D;new Vue(&#123;
    el:&#39;#example-2&#39;,
    data:&#123;
        name:&#39;Vue.js&#39;
    &#125;,
    &#x2F;&#x2F;在methods对象中定义方法
    methods:&#123;
        greet:function(event)&#123;
            &#x2F;&#x2F;this在方法里指向当前Vue示例
            alert(&#39;Hello &#39;+this.name+&#39;!&#39;)
            &#x2F;&#x2F;event是原生DOM事件
            if(event)&#123;
                alert(event.target.tagName)
            &#125;
        &#125;
    &#125;
&#125;)
&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>运行结果如下：</p>
<p><img src="/2022/11/04/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E4%B8%89%EF%BC%89/8.png" alt></p>
<p><img src="/2022/11/04/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E4%B8%89%EF%BC%89/9.png" alt></p>
<p>与此同时，也可以在F12的JavaScript控制台里使用<code>example2.greet()</code>直接调用方法。</p>
<h3 id="内联处理器中的方法"><a href="#内联处理器中的方法" class="headerlink" title="内联处理器中的方法"></a>内联处理器中的方法</h3><p>除了直接绑定到一个方法，也可以在内联JavaScript语句中调用方法：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;body&gt;
&lt;div id&#x3D;&quot;example-3&quot;&gt;
    &lt;button v-on:click&#x3D;&quot;say(&#39;hi&#39;)&quot;&gt;Say hi&lt;&#x2F;button&gt;
    &lt;button v-on:click&#x3D;&quot;say(&#39;what&#39;)&quot;&gt;Say what&lt;&#x2F;button&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;body&gt;
&lt;script&gt;
new Vue(&#123;
    el:&#39;#example-3&#39;,
    methods:&#123;
        say:function(message)&#123;
            alert(message)
        &#125;
    &#125;
&#125;)
&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>运行结果如下：</p>
<p><img src="/2022/11/04/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E4%B8%89%EF%BC%89/10.png" alt></p>
<p>若需要在内联语句处理器中访问原始的DOM事件，可以使用特殊变量<code>$event</code>把它传入方法中：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;body&gt;
&lt;div id&#x3D;&quot;example-3&quot;&gt;
    &lt;button v-on:click&#x3D;&quot;warn(&#39;Form cannot be submitted yet.&#39;,$event)&quot;&gt; 
        Submit&lt;&#x2F;button&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;body&gt;
&lt;script&gt;
new Vue(&#123;
    el:&#39;#example-3&#39;,
    methods:&#123;
        warn:function(message, event)&#123;
            &#x2F;&#x2F;现在可以访问原生事件对象
            if(event)&#123;
                event.preventDefault()
            &#125;
            alert(message)
        &#125;
    &#125;
&#125;)
&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>运行结果如下：</p>
<p><img src="/2022/11/04/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E4%B8%89%EF%BC%89/11.png" alt></p>
<h3 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h3><p>比在事件处理程序中调用<code>event.preventDefault()</code>或<code>event.stopPropagation()</code>更好的方式是：方法只有纯粹的数据逻辑，而不是去处理DOM事件细节。</p>
<p>Vue.js为<code>v-on</code>提供了事件修饰符，修饰符由点开头的指令后缀来表示：</p>
<ul>
<li><code>.stop</code>：阻止事件向上级DOM元素传递</li>
<li><code>.prevent</code>：阻止默认事件的发生</li>
<li><code>.capture</code>：添加事件侦听器时使用事件捕获模式</li>
<li><code>.self</code>：将事件绑定到自身，只有自身才能触发</li>
<li><code>.once</code>：设置事件只能触发一次</li>
<li><code>.passive</code>：启动被动监听器，默认行为会立即触发。添加了<code>.passive</code> 表示不会在监听函数里添加 <code>preventDefault()</code>来阻止默认行为。</li>
</ul>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!-- 阻止单击事件继续传播 --&gt;
&lt;a v-on:click.stop&#x3D;&quot;doThis&quot;&gt;&lt;&#x2F;a&gt;

&lt;!-- 提交事件不再重载页面 --&gt;
&lt;form v-on:submit.prevent&#x3D;&quot;onSubmit&quot;&gt;&lt;&#x2F;form&gt;

&lt;!-- 修饰符可以串联 --&gt;
&lt;a v-on:click.stop.prevent&#x3D;&quot;doThat&quot;&gt;&lt;&#x2F;a&gt;

&lt;!-- 只有修饰符 --&gt;
&lt;form v-on:submit.prevent&gt;&lt;&#x2F;form&gt;

&lt;!-- 添加事件监听器时使用事件捕获模式 --&gt;
&lt;!-- 即内部元素触发的事件先在此处理，然后才交由内部元素进行处理 --&gt;
&lt;div v-on:click.capture&#x3D;&quot;doThis&quot;&gt;...&lt;&#x2F;div&gt;

&lt;!-- 只当在event.target是当前元素自身时触发处理函数 --&gt;
&lt;!-- 即事件不是从内部元素触发的 --&gt;
&lt;div v-on:click.self&#x3D;&quot;doThat&quot;&gt;...&lt;&#x2F;div&gt;

&lt;!--点击事件将只会触发一次--&gt;
&lt;a v-on:click.once&#x3D;&quot;doThis&quot;&gt;&lt;&#x2F;a&gt;

&lt;!--滚动事件的默认行为将会立即触发，而不会等待onScroll完成--&gt;
&lt;div v-on:scroll.passive&#x3D;&quot;onScroll&quot;&gt;...&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>使用修饰符时要注意顺序，<strong>相应的代码会以同样的顺序产生</strong>。因此用<code>v-on:click.prevent.self</code><strong>会阻止所有的点击</strong>，而<code>v-on:click.self.prevent</code><strong>只会阻止对元素本身的点击。</strong></p>
<p>不像其他只能对原生的DOM事件起作用的修饰符，<code>.once</code>修饰符还能被用到<strong>自定义的组件事件</strong>上。</p>
<p><strong>注意：</strong>不要把<code>.passive</code>和<code>.prevent</code>一起使用，因为<code>.prevent</code>将会被忽略，同时浏览器可能会展示一个警告。<code>.passive</code>会告诉浏览器不阻止事件的默认行为。</p>
<h3 id="按键修饰符"><a href="#按键修饰符" class="headerlink" title="按键修饰符"></a>按键修饰符</h3><p>在监听键盘事件时，经常需要检查详细的按键。Vue允许为<code>v-on</code>在监听键盘事件时添加按键修饰符：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--处理函数vm.submit()只会在$event.key被Enter时（即按下回车键）被调用--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">v-on:</span>keyup.enter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>也可以直接将<code>KeyboardEvent.key</code>暴露的任意有效按键名转换为kebab-case来作为修饰符：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--处理函数只会在$event.key等于PageDown时被调用--></span>
&lt;input v-on:keyup.page-down="onPageDown"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h4 id="按键码"><a href="#按键码" class="headerlink" title="按键码"></a>按键码</h4><p>注：<strong>keyCode的事件用法已经被废弃了，可能不会被最新的浏览器支持。</strong></p>
<p>使用<code>keyCode</code>attribute的形式如下：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">v-on:</span>keyup.13</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>为了在必要的情况下支持旧浏览器，Vue提供了绝大多数常用的按键码别名：</p>
<ul>
<li>回车：<code>.enter</code></li>
<li>换行：<code>.tab</code></li>
<li>删除：<code>.delete</code>（捕获删除和退格键）</li>
<li>退出：<code>.esc</code></li>
<li>空格：<code>.space</code></li>
<li>上：<code>.up</code></li>
<li>下：<code>.down</code></li>
<li>左：<code>.left</code></li>
<li>右：<code>.right</code></li>
</ul>
<p>有一些按键（如<code>.esc</code>以及所有的方向键）在IE9中有不同的<code>key</code>值。若想要支持IE9，首选这些内置的别名。</p>
<p>除此之外，还可以通过全局<code>config.keyCodes</code>对象自定义按键修饰符别名：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//可以使用v-on:keyup.f1</span>
Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>keyCodes<span class="token punctuation">.</span>f1<span class="token operator">=</span><span class="token number">112</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="系统修饰键"><a href="#系统修饰键" class="headerlink" title="系统修饰键"></a>系统修饰键</h3><p>可以用如下修饰符来实现仅在按下相应按键时才触发鼠标或键盘事件的监听器：</p>
<ul>
<li><code>.ctrl</code></li>
<li><code>.alt</code></li>
<li><code>.shift</code></li>
<li><code>.meta</code></li>
</ul>
<p>注意：在注意：在 Mac 系统键盘上，meta 对应 command 键 (⌘)。在 Windows 系统键盘 meta 对应 Windows 徽标键 (⊞)。</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- Alt+C --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">v-on:</span>keyup.alt.76</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clear<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

<span class="token comment">&lt;!-- Ctrl+Click --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click.ctrl</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>doSomething<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Do something<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>修饰键与常规按键不同，在和<code>keyup</code>事件一起用时，事件触发时修饰键必须处于按下状态。即只有在按住<code>ctrl</code>的情况下释放其他按键，才会触发<code>keyup.ctrl</code>。而单单释放<code>ctrl</code>也不会触发事件。若想这样做，请为<code>ctrl</code>换用<code>keyCode:keyup.17</code>。</p>
<h4 id="exact修饰符"><a href="#exact修饰符" class="headerlink" title=".exact修饰符"></a><code>.exact</code>修饰符</h4><p>使用<code>.exact</code>修饰符可以精确地控制由系统修饰符组合触发的事件：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 非ctrl独有，即使是Alt和Shift一起按下时，也会触发 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click.ctrl</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onClick<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>

<span class="token comment">&lt;!-- 当且仅当Ctrl被按下时才触发 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click.ctrl.exact</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onCtrlClick<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>

<span class="token comment">&lt;!-- 没有任何系统修饰符被按下时才触发 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click.exact</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onClick<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="鼠标按钮修饰符"><a href="#鼠标按钮修饰符" class="headerlink" title="鼠标按钮修饰符"></a>鼠标按钮修饰符</h4><p>以下修饰符会限制处理函数仅响应特定的鼠标按钮：</p>
<ul>
<li>鼠标左键：<code>.left</code></li>
<li>鼠标右键：<code>.right</code></li>
<li>鼠标中键：<code>.middle</code></li>
</ul>
<h2 id="表单输入绑定"><a href="#表单输入绑定" class="headerlink" title="表单输入绑定"></a>表单输入绑定</h2><h3 id="v-model基础用法"><a href="#v-model基础用法" class="headerlink" title="v-model基础用法"></a><code>v-model</code>基础用法</h3><p>可以使用<code>v-model</code>指令在表单<code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code>及<code>&lt;select&gt;</code>元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。<code>v-model</code>还可以在自定义的输入组件中使用。</p>
<p><code>v-model</code>指令本质上是语法糖，负责监听用户的输入事件以更新数据，并对一些极端场景进行特殊处理。</p>
<p><code>v-model</code>会<strong>忽略所有表单元素的<code>value</code>、<code>checked</code>、<code>selected</code> attribute 的初始值，并将Vue示例的数据作为数据来源。</strong>不过可以通过在JavaScript在组件的<code>data</code>选项中声明初始值。</p>
<p><code>v-model</code>在内部为不同的输入元素使用不同的preperty并抛出不同的事件：</p>
<ul>
<li>text和textarea元素使用<code>value</code> property和<code>input</code>事件</li>
<li>checkbox和radio使用<code>checked</code> property和<code>change</code>事件</li>
<li>select字段将<code>value</code>作为prop并将<code>change</code>作为事件</li>
</ul>
<p>注意：<code>v-model</code>不会在输入法组合文字过程中得到更新。若想处理这个过程，可以使用<code>input</code>事件处理。</p>
<h4 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h4><p><code>v-model</code>用于表单中输入文本并绑定值时：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;body&gt;
  &lt;div id&#x3D;&quot;example&quot;&gt;
    &lt;input v-model&#x3D;&quot;message&quot; placeholder&#x3D;&quot;edit me&quot;&gt;
    &lt;p&gt;Message is:&#123;&#123;message&#125;&#125;&lt;&#x2F;p&gt;
  &lt;&#x2F;div&gt;
&lt;&#x2F;body&gt;
&lt;script&gt;
new Vue(&#123;
    el:&#39;#example&#39;,
    data:&#123;
        message:&#39;&#39;
    &#125;
&#125;)
&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>运行结果如下：</p>
<p><img src="/2022/11/04/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E4%B8%89%EF%BC%89/12.png" alt></p>
<h4 id="多行文本"><a href="#多行文本" class="headerlink" title="多行文本"></a>多行文本</h4><p><code>v-model</code>用于表单中输入多行文本textarea并绑定值时：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;body&gt;
  &lt;div id&#x3D;&quot;example&quot;&gt;
    &lt;span&gt;Multiline message is :&lt;&#x2F;span&gt;
    &lt;p style&#x3D;&quot;white-space:pre-line;&quot;&gt;&#123;&#123;message&#125;&#125;&lt;&#x2F;p&gt;
    &lt;br &#x2F;&gt;
    &lt;textarea v-model&#x3D;&quot;message&quot; placeholder&#x3D;&quot;add multiple lines&quot;&gt;&lt;&#x2F;textarea&gt;
  &lt;&#x2F;div&gt;
&lt;&#x2F;body&gt;
&lt;script&gt;
new Vue(&#123;
    el:&#39;#example&#39;,
    data:&#123;
        message:&#39;&#39;
    &#125;
&#125;)
&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>运行结果如下：</p>
<p><img src="/2022/11/04/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E4%B8%89%EF%BC%89/13.png" alt></p>
<p>注意：在文本区域插值(<code>&lt;textarea&gt;&#123;&#123;text&#125;&#125;&lt;/textarea&gt;</code>)并不会生效，要用<code>v-model</code>来代替。</p>
<h4 id="复选框"><a href="#复选框" class="headerlink" title="复选框"></a>复选框</h4><p>单个复选框，将值绑定到布尔值：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;body&gt;
  &lt;div id&#x3D;&quot;example&quot;&gt;
    &lt;input type&#x3D;&quot;checkbox&quot; id&#x3D;&quot;checkbox&quot; v-model&#x3D;&quot;checked&quot;&gt;
    &lt;label for&#x3D;&quot;checkbox&quot;&gt;&#123;&#123;checked&#125;&#125;&lt;&#x2F;label&gt;
  &lt;&#x2F;div&gt;
&lt;&#x2F;body&gt;
&lt;script&gt;
new Vue(&#123;
    el:&#39;#example&#39;,
    data:&#123;
        checked:&#39;&#39;
    &#125;
&#125;)
&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>运行结果如下：</p>
<p><img src="/2022/11/04/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E4%B8%89%EF%BC%89/14.png" alt></p>
<p>多个复选框，将值绑定到同一个数组：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;body&gt;
  &lt;div id&#x3D;&quot;example&quot;&gt;
    &lt;input type&#x3D;&quot;checkbox&quot; id&#x3D;&quot;jack&quot; value&#x3D;&quot;Jack&quot; v-model&#x3D;&quot;checkedNames&quot;&gt;
    &lt;label for&#x3D;&quot;jack&quot;&gt;Jack&lt;&#x2F;label&gt;
    &lt;input type&#x3D;&quot;checkbox&quot; id&#x3D;&quot;john&quot; value&#x3D;&quot;John&quot; v-model&#x3D;&quot;checkedNames&quot;&gt;
    &lt;label for&#x3D;&quot;john&quot;&gt;John&lt;&#x2F;label&gt;
    &lt;input type&#x3D;&quot;checkbox&quot; id&#x3D;&quot;mike&quot; value&#x3D;&quot;Mike&quot; v-model&#x3D;&quot;checkedNames&quot;&gt;
    &lt;label for&#x3D;&quot;mike&quot;&gt;Mike&lt;&#x2F;label&gt;
    &lt;br &#x2F;&gt;
    &lt;span&gt;Checked names:&#123;&#123;checkedNames&#125;&#125;&lt;&#x2F;span&gt;
  &lt;&#x2F;div&gt;
&lt;&#x2F;body&gt;
&lt;script&gt;
new Vue(&#123;
    el:&#39;#example&#39;,
    data:&#123;
        checkedNames:[]
    &#125;
&#125;)
&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>运行结果如下：</p>
<p><img src="/2022/11/04/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E4%B8%89%EF%BC%89/15.png" alt></p>
<h4 id="单选按钮"><a href="#单选按钮" class="headerlink" title="单选按钮"></a>单选按钮</h4><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;body&gt;
  &lt;div id&#x3D;&quot;example&quot;&gt;
    &lt;input type&#x3D;&quot;radio&quot; id&#x3D;&quot;one&quot; value&#x3D;&quot;one&quot; v-model&#x3D;&quot;picked&quot;&gt;
    &lt;label for&#x3D;&quot;one&quot;&gt;One&lt;&#x2F;label&gt;
    &lt;br &#x2F;&gt;
    &lt;input type&#x3D;&quot;radio&quot; id&#x3D;&quot;two&quot; value&#x3D;&quot;Two&quot; v-model&#x3D;&quot;picked&quot;&gt;
    &lt;label for&#x3D;&quot;two&quot;&gt;Two&lt;&#x2F;label&gt;
    &lt;br &#x2F;&gt;
    &lt;span&gt;Picked:&#123;&#123;picked&#125;&#125;&lt;&#x2F;span&gt;
  &lt;&#x2F;div&gt;
&lt;&#x2F;body&gt;
&lt;script&gt;
new Vue(&#123;
    el:&#39;#example&#39;,
    data:&#123;
        picked:&#39;&#39;
    &#125;
&#125;)
&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>运行结果如下：</p>
<p><img src="/2022/11/04/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E4%B8%89%EF%BC%89/16.png" alt></p>
<h4 id="选择框"><a href="#选择框" class="headerlink" title="选择框"></a>选择框</h4><p>需要单选时代码如下：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;body&gt;
  &lt;div id&#x3D;&quot;example&quot;&gt;
    &lt;select v-model&#x3D;&quot;selected&quot;&gt;
      &lt;option disabled value&#x3D;&quot;&quot;&gt;请选择&lt;&#x2F;option&gt;
      &lt;option&gt;A&lt;&#x2F;option&gt;
      &lt;option&gt;B&lt;&#x2F;option&gt;
      &lt;option&gt;C&lt;&#x2F;option&gt;
    &lt;&#x2F;select&gt;
    &lt;span&gt;Selected:&#123;&#123;selected&#125;&#125;&lt;&#x2F;span&gt;
  &lt;&#x2F;div&gt;
&lt;&#x2F;body&gt;
&lt;script&gt;
new Vue(&#123;
    el:&#39;#example&#39;,
    data:&#123;
        selected:&#39;&#39;
    &#125;
&#125;)
&lt;&#x2F;script&gt;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>运行结果如下：</p>
<p><img src="/2022/11/04/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E4%B8%89%EF%BC%89/17.png" alt></p>
<p><strong>若<code>v-model</code>表达式的初始值未能匹配任何选项，<code>&lt;select&gt;</code>元素将被渲染为未选中的状态。</strong>在iOS中这会使用户无法选择第一个选项。因此<strong>推荐提供一个值为空的禁用选项。</strong></p>
<p>多选时即将值绑定到一个数组中：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;body&gt;
  &lt;div id&#x3D;&quot;example&quot;&gt;
    &lt;select v-model&#x3D;&quot;selected&quot; multiple style&#x3D;&quot;width:50px;&quot;&gt;
      &lt;option&gt;A&lt;&#x2F;option&gt;
      &lt;option&gt;B&lt;&#x2F;option&gt;
      &lt;option&gt;C&lt;&#x2F;option&gt;
    &lt;&#x2F;select&gt;
    &lt;span&gt;Selected:&#123;&#123;selected&#125;&#125;&lt;&#x2F;span&gt;
  &lt;&#x2F;div&gt;
&lt;&#x2F;body&gt;
&lt;script&gt;
new Vue(&#123;
    el:&#39;#example&#39;,
    data:&#123;
        selected:[]
    &#125;
&#125;)
&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>运行结果如下：</p>
<p><img src="/2022/11/04/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E4%B8%89%EF%BC%89/18.png" alt></p>
<p>配合<code>v-for</code>渲染的动态选项，其代码如下：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;body&gt;
  &lt;div id&#x3D;&quot;example&quot;&gt;
    &lt;select v-model&#x3D;&quot;selected&quot;&gt;
      &lt;option v-for&#x3D;&quot;option in options&quot; v-bind:value&#x3D;&quot;option.value&quot;&gt; 
        &#123;&#123;option.text&#125;&#125;
      &lt;&#x2F;option&gt; 
    &lt;&#x2F;select&gt;
    &lt;span&gt;Selected:&#123;&#123;selected&#125;&#125;&lt;&#x2F;span&gt;
  &lt;&#x2F;div&gt;
&lt;&#x2F;body&gt;
&lt;script&gt;
new Vue(&#123;
    el:&#39;#example&#39;,
    data:&#123;
        selected:&#39;A&#39;,
        options:[
            &#123;text:&#39;One&#39;,value:&#39;A&#39;&#125;,
            &#123;text:&#39;Two&#39;,value:&#39;B&#39;&#125;,
            &#123;text:&#39;Three&#39;,value:&#39;C&#39;&#125;
        ]
    &#125;
&#125;)
&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>运行结果如下：</p>
<p><img src="/2022/11/04/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E4%B8%89%EF%BC%89/19.png" alt></p>
<h3 id="值绑定"><a href="#值绑定" class="headerlink" title="值绑定"></a>值绑定</h3><p>对于单选按钮、复选框及选择框的选项，<code>v-model</code>绑定的值通常是静态字符串（对于复选框来说是布尔值）：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!-- 当选中时，picked字符串为a --&gt;
&lt;input type&#x3D;&quot;radio&quot; v-model&#x3D;&quot;picked&quot; value&#x3D;&quot;a&quot;&gt;

&lt;!-- toggle为true或false --&gt;
&lt;input type&#x3D;&quot;checkbox&quot; v-model&#x3D;&quot;toggle&quot;&gt;

&lt;!-- 当选中第一个选项时，selected为字符串abc --&gt;
&lt;select v-model&#x3D;&quot;selected&quot;&gt;
  &lt;option value&#x3D;&quot;abc&quot;&gt;ABC&lt;&#x2F;option&gt;    
&lt;&#x2F;select&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>当想把值绑定到Vue实例的一个动态property上时，可以使用<code>v-bind</code>实现，且这个property的值可以不是字符串。</p>
<h4 id="复选框-1"><a href="#复选框-1" class="headerlink" title="复选框"></a>复选框</h4><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;input type&#x3D;&quot;checkbox&quot; v-model&#x3D;&quot;toggle&quot; true-value&#x3D;&quot;yes&quot; false-value&#x3D;&quot;no&quot;&gt;

&lt;!-- 当选中时 --&gt;
vm.toggle&#x3D;&#x3D;&#x3D;&#39;yes&#39;
&lt;!-- 当没有选中时 --&gt;
vm.toggle&#x3D;&#x3D;&#x3D;&#39;no&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>由于浏览器在提交表单时并不会包含未被选中的复选框，因此这里的<code>true-value</code>和<code>false-value</code> attribute并不会影响输入控件的<code>value</code> attribute。若要确保表单中这两个值中的一个能够被提交，则要换用单选按钮。</p>
<h4 id="单选按钮-1"><a href="#单选按钮-1" class="headerlink" title="单选按钮"></a>单选按钮</h4><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;input type&#x3D;&quot;radio&quot; v-model&#x3D;&quot;pick&quot; v-bind:value&#x3D;&quot;a&quot;&gt;

&lt;!-- 当选中时 --&gt;
vm.pick&#x3D;&#x3D;&#x3D;vm.a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="选择框的选项"><a href="#选择框的选项" class="headerlink" title="选择框的选项"></a>选择框的选项</h4><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;select v-model&#x3D;&quot;selected&quot;&gt;
  &lt;option v-bind:value&#x3D;&quot;&#123;number:123&#125;&quot;&gt;123&lt;&#x2F;option&gt;
&lt;&#x2F;select&gt;

&lt;!-- 当选中时 --&gt;
typeof vm.selected
&lt;!-- vm.selected的类型为object--&gt;
vm.selected.number
&lt;!-- selected.number的值为123--&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><h4 id="lazy"><a href="#lazy" class="headerlink" title=".lazy"></a><code>.lazy</code></h4><p>在默认情况下，<code>v-model</code>在每次<code>input</code>事件触发后将输入框的值与数据进行同步。若将其转为在<code>change</code>事件之后进行同步，可以添加<code>.lazy</code>修饰符：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!--在change时更新，而不是在input时--&gt;
&lt;input v-model.lazy&#x3D;&quot;msg&quot;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h4 id="number"><a href="#number" class="headerlink" title=".number"></a><code>.number</code></h4><p>即使在<code>type=&quot;number&quot;</code>时，HTML输入元素的值也总会返回字符串。若这个值无法被<code>parseFloat()</code>解析，则会返回原始的值。</p>
<p>若想自动将用户的输入值转为数值类型，可以给<code>v-model</code>添加<code>number</code>修饰符：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;input v-model.number&#x3D;&quot;age&quot; type&#x3D;&quot;number&quot;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="trim"><a href="#trim" class="headerlink" title=".trim"></a><code>.trim</code></h4><p>若想要自动过滤用户输入的首尾空白字符，可以给<code>v-model</code>添加<code>trim</code>修饰符：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;input v-model.trim&#x3D;&quot;msg&quot;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="组件基础"><a href="#组件基础" class="headerlink" title="组件基础"></a>组件基础</h2><h3 id="基本实例"><a href="#基本实例" class="headerlink" title="基本实例"></a>基本实例</h3><p>一个Vue组件的实例如下：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;body&gt;
  &lt;div id&#x3D;&quot;example&quot;&gt;
    &lt;button-counter&gt;&lt;&#x2F;button-counter&gt;
  &lt;&#x2F;div&gt;
&lt;&#x2F;body&gt;
&lt;script&gt;
&#x2F;&#x2F;定义了一个名为button-counter的新组件    
Vue.component(&#39;button-counter&#39;,&#123;
    data:function()&#123;
        return &#123;
            count:0
        &#125;
    &#125;,
    template:&#39;&lt;button v-on:click&#x3D;&quot;count++&quot;&gt;You clicked me &#123;&#123;count&#125;&#125; times.&lt;&#x2F;button&gt;&#39;
&#125;)
new Vue(&#123;
    el:&#39;#example&#39;
&#125;)
&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>因为组件是可复用的Vue实例，所有它与<code>new Vue</code>接收相同的选项，如<code>data</code>、<code>computed</code>、<code>watch</code>、<code>methods</code>以及生命周期钩子等，像<code>el</code>这种根特例特有的选项除外。</p>
<h3 id="组件的复用"><a href="#组件的复用" class="headerlink" title="组件的复用"></a>组件的复用</h3><p>组件可以进行任意次数的复用：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;body&gt;
  &lt;div id&#x3D;&quot;example&quot;&gt;
    &lt;button-counter&gt;&lt;&#x2F;button-counter&gt;
    &lt;button-counter&gt;&lt;&#x2F;button-counter&gt;
    &lt;button-counter&gt;&lt;&#x2F;button-counter&gt;
    &lt;button-counter&gt;&lt;&#x2F;button-counter&gt;
  &lt;&#x2F;div&gt;
&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>由于每用一次组件，就由一个组件的新实例被创建，因此当点击按钮时，每个组件都会各自独立维护自己的<code>count</code>。</p>
<h4 id="data必须是一个函数"><a href="#data必须是一个函数" class="headerlink" title="data必须是一个函数"></a>data必须是一个函数</h4><p>在定义组件的过程中，data并不是直接提供一个对象或是变量的值。组件的data选项必须是一个函数，因此每个实例可以维护一份独立的被返回的拷贝：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function-variable function">data</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
        count<span class="token operator">:</span><span class="token number">0</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="组件的组织"><a href="#组件的组织" class="headerlink" title="组件的组织"></a>组件的组织</h3><p>通常一个应用会以一颗嵌套的组件树的形式来组织，一个应用由各类组件组成。</p>
<p>为了能在模板中使用，这些组件必须先注册以便Vue能够识别。</p>
<p>组件的注册类型有两种：全局注册和局部注册。</p>
<p>组件通过<code>Vue.component</code>来进行全局注册：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'component-name'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>
  <span class="token comment">//options</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>全局注册的组件可以用在其被注册之后的任何通过<code>new Vue</code>新创建的Vue根实例，包括其组件树种的左右子组件的模板。</p>
<h3 id="通过Prop向子组件传递数据"><a href="#通过Prop向子组件传递数据" class="headerlink" title="通过Prop向子组件传递数据"></a>通过Prop向子组件传递数据</h3><p>通过Prop可以在组件上注册一些自定义attribute。当一个值传递给一个prop attribute时会变成那个组件实例的一个property。</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;body&gt;
  &lt;div id&#x3D;&quot;example&quot;&gt;
    &lt;post-counter title&#x3D;&quot;Blogging with Vue&quot;&gt;&lt;&#x2F;post-counter&gt;
    &lt;post-counter title&#x3D;&quot;Hello world&quot;&gt;&lt;&#x2F;post-counter&gt;
    &lt;post-counter title&#x3D;&quot;Zhangsan&quot;&gt;&lt;&#x2F;post-counter&gt;
    &lt;post-counter title&#x3D;&quot;My journey with Vue&quot;&gt;&lt;&#x2F;post-counter&gt;
  &lt;&#x2F;div&gt;
&lt;&#x2F;body&gt;
&lt;script&gt;
Vue.component(&#39;post-counter&#39;,&#123;
    props:[&#39;title&#39;],
    template:&#39;&lt;h3&gt;&#123;&#123;title&#125;&#125;&lt;&#x2F;h3&gt;&#39;
&#125;)
new Vue(&#123;
    el:&#39;#example&#39;
&#125;)
&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>一个组件默认可以拥有任意数量的prop，任何值都可以传递给任何prop。</p>
<p>一个prop被注册后，就可以把数据作为一个自定义attribute传递到子组件中。</p>
<p>与此同时，也可以使用<code>v-bind</code>来动态传递prop：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;body&gt;
  &lt;div id&#x3D;&quot;example&quot;&gt;
    &lt;post-counter v-for&#x3D;&quot;post in posts&quot; v-bind:key&#x3D;&quot;post.id&quot; v-bind:title&#x3D;&quot;post.title&quot;&gt;&lt;&#x2F;post-counter&gt;
  &lt;&#x2F;div&gt;
&lt;&#x2F;body&gt;
&lt;script&gt;
Vue.component(&#39;post-counter&#39;,&#123;
    props:[&#39;title&#39;],
    template:&#39;&lt;h3&gt;&#123;&#123;title&#125;&#125;&lt;&#x2F;h3&gt;&#39;
&#125;)
new Vue(&#123;
    el:&#39;#example&#39;,
    data:&#123;
        posts:[
            &#123;id:1,title:&#39;Blogging with Vue&#39;&#125;,
            &#123;id:2,title:&#39;Hello world&#39;&#125;,
            &#123;id:3,title:&#39;Zhangsan&#39;&#125;,
            &#123;id:4,title:&#39;My journey with Vue&#39;&#125;
        ]
    &#125;
&#125;)
&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="单个根元素"><a href="#单个根元素" class="headerlink" title="单个根元素"></a>单个根元素</h3><p>当构建一个<code>post-counter</code>组件时，模板里最终包含的东西远不止一个标题信息，至少会包含正文的信息：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;h3&gt;&#123;&#123;title&#125;&#125;&lt;&#x2F;h3&gt;
&lt;div v-html&#x3D;&quot;content&quot;&gt;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>但在模板中这样写时，Vue会显示一个错误说每个组件必须只有一个根元素。因此需要将模板中的内容包裹在一个父元素<code>&lt;div&gt;</code>内，如：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;div class&#x3D;&quot;post-counter&quot;&gt;
  &lt;h3&gt;&#123;&#123;title&#125;&#125;&lt;&#x2F;h3&gt;
  &lt;div v-html&#x3D;&quot;content&quot;&gt;&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>当不满足于标题和内容信息时，组件会变得越来越复杂。此时为每个相关的信息都定义一个prop会变得很麻烦。故此时需要重构组件，让组件变成接收一个单独的<code>post</code> prop：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;body&gt;
  &lt;div id&#x3D;&quot;example&quot;&gt;
    &lt;post-counter 
      v-for&#x3D;&quot;post in posts&quot; 
      v-bind:key&#x3D;&quot;post.id&quot; 
      v-bind:post&#x3D;&quot;post&quot;&gt;&lt;&#x2F;post-counter&gt;
  &lt;&#x2F;div&gt;
&lt;&#x2F;body&gt;
&lt;script&gt;
Vue.component(&#39;post-counter&#39;,&#123;
    props:[&#39;post&#39;],
    template:&#96;
      &lt;div class&#x3D;&quot;post-counter&quot;&gt;  
        &lt;h3&gt;&#123;&#123;post.title&#125;&#125;&lt;&#x2F;h3&gt;
        &lt;div v-html&#x3D;&quot;post.content&quot;&gt;&lt;&#x2F;div&gt;
      &lt;&#x2F;div&gt;  &#96;
&#125;)
new Vue(&#123;
    el:&#39;#example&#39;,
    data:&#123;
        posts:[
            &#123;id:1,title:&#39;Blogging with Vue&#39;&#125;,
            &#123;id:2,title:&#39;Hello world&#39;&#125;,
            &#123;id:3,title:&#39;Zhangsan&#39;&#125;,
            &#123;id:4,title:&#39;My journey with Vue&#39;&#125;
        ]
    &#125;
&#125;)
&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>无论何时为post对象添加新的property，都能自动地在重构后的组件内可用。</p>
<h3 id="监听子组件事件"><a href="#监听子组件事件" class="headerlink" title="监听子组件事件"></a>监听子组件事件</h3><p>在开发组件时，其一些功能可能要求和父级组件进行沟通。如引入一个辅助功能来放大博文部分的字号，同时让页面的其他部分保持默认的字号。</p>
<p>则可以在父组件中添加一个<code>postFontSize</code>数据 property：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;body&gt;
  &lt;div id&#x3D;&quot;example&quot;&gt;
    &lt;!-- 在模板中用来控制所有博文的字号 --&gt;
    &lt;div :style&#x3D;&quot;&#123;fontSize:postFontSize+&#39;em&#39;&#125;&quot;&gt;
      &lt;!-- 增加监听器，父级组件可通过v-on监听子组件实例的事件，可接收该事件并刷新对应的值 --&gt;
      &lt;post-counter 
      v-for&#x3D;&quot;post in posts&quot; 
      v-bind:key&#x3D;&quot;post.id&quot; 
      v-bind:post&#x3D;&quot;post&quot;
      v-on:enlarge-text&#x3D;&quot;postFontSize+&#x3D;0.1&quot;
    &gt;&lt;&#x2F;post-counter&gt;
    
    &lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;  
&lt;&#x2F;body&gt;
&lt;script&gt;
Vue.component(&#39;post-counter&#39;,&#123;
    props:[&#39;post&#39;],
    &#x2F;&#x2F;添加一个放大字号的按钮,通过调用$emit方法并传入事件名称类触发一个事件
    template:&#96;
      &lt;div class&#x3D;&quot;post-counter&quot;&gt;  
        &lt;h3&gt;&#123;&#123;post.title&#125;&#125;&lt;&#x2F;h3&gt;
        &lt;button v-on:click&#x3D;&quot;$emit(&#39;enlarge-text&#39;)&quot;&gt;
            Enlarge text
        &lt;&#x2F;button&gt;    
        &lt;div v-html&#x3D;&quot;post.content&quot;&gt;&lt;&#x2F;div&gt;
      &lt;&#x2F;div&gt;  &#96;
&#125;)
new Vue(&#123;
    el:&#39;#example&#39;,
    data:&#123;
        posts:[
            &#123;id:1,title:&#39;Blogging with Vue&#39;&#125;,
            &#123;id:2,title:&#39;Hello world&#39;&#125;,
            &#123;id:3,title:&#39;Zhangsan&#39;&#125;,
            &#123;id:4,title:&#39;My journey with Vue&#39;&#125;
        ],
        postFontSize:1&#x2F;&#x2F;添加postFontSize数据property
    &#125;
&#125;)
&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="使用事件抛出一个值"><a href="#使用事件抛出一个值" class="headerlink" title="使用事件抛出一个值"></a>使用事件抛出一个值</h4><p>用一个事件来抛出一个特定的值是非常实用的。如上面例子中，想让<code>post-counter</code>组件自行决定它的文本要放大多少，就是使用<code>$emit</code>的第二个参数来提供这个值：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$emit(<span class="token punctuation">'</span>enlarge-text<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    Enlarge text
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>当父级组件监听这个事件时，可以通过<code>$emit</code>访问到被抛出的这个值：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">v-on:enlarge-text="postFontSize+=$event"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>若事件处理函数是一个方法，则这个值将会作为第一个参数传入这个方法：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;post-counter 
  v-for&#x3D;&quot;post in posts&quot; 
  v-bind:key&#x3D;&quot;post.id&quot; 
  v-bind:post&#x3D;&quot;post&quot;
  v-on:enlarge-text&#x3D;&quot;onEnlargeText&quot;
&gt;&lt;&#x2F;post-counter&gt;

methods:&#123;
    onEnlargeText:function(enlargeAmount)&#123;
        this.postFontSize+&#x3D;enlargeAmount
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="在组件上使用v-model"><a href="#在组件上使用v-model" class="headerlink" title="在组件上使用v-model"></a>在组件上使用<code>v-model</code></h4><p>自定义事件也可以用于创建支持<code>v-model</code>的自定义输入组件。</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;input v-model&#x3D;&quot;searchText&quot;&gt;
&lt;!-- 等价于 --&gt;
&lt;input 
  v-bind:value&#x3D;&quot;searchText&quot;
  v-on:input&#x3D;&quot;searchText&#x3D;$event.target.value&quot;
&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>当用在组件上时，<code>v-model</code>则会变成这样：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;custom-input 
  v-bind:value&#x3D;&quot;searchText&quot;
  v-on:input&#x3D;&quot;searchText&#x3D;$event&quot;
&gt;&lt;&#x2F;custom-input&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>为了使<code>v-model</code>能够正常工作，这个组件内的<code>&lt;input&gt;</code>必须将其<code>value</code> attribute绑定到名叫<code>value</code>的prop上，并在其<code>input</code>事件被触发时，将新的值通过自定义的<code>input</code>事件抛出，即：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;body&gt;
    &lt;!--调用组件--&gt;
    &lt;custom-input v-model&#x3D;&quot;searchText&quot;&gt;&lt;&#x2F;custom-input&gt;
&lt;&#x2F;body&gt;
&lt;script&gt;
Vue.component(&#39;custom-input&#39;,&#123;
    props:[&#39;value&#39;],
    template:&#96;
      &lt;input
        v-bind:value&#x3D;&quot;value&quot;
        v-on:input&#x3D;&quot;$emit(&#39;input&#39;,$event.target.value)&quot;
      &gt;  
    &#96;
&#125;)
&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="通过插槽分发内容"><a href="#通过插槽分发内容" class="headerlink" title="通过插槽分发内容"></a>通过插槽分发内容</h3><p>Vue自定义的<code>&lt;slot&gt;</code>元素可以向一个组件传递内容，只要在需要的地方加入插槽就行：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">Vue.component(&#39;alert-box&#39;,&#123;
    template:&#96;
      &lt;div class&#x3D;&quot;demo-alert-box&quot;&gt;
        &lt;strong&gt;Error!&lt;&#x2F;strong&gt;
        &lt;slot&gt;&lt;&#x2F;slot&gt;  
	  &lt;&#x2F;div&gt;  
    &#96;
&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="动态组件"><a href="#动态组件" class="headerlink" title="动态组件"></a>动态组件</h3><p>可以通过Vue的<code>&lt;component&gt;</code>元素加一个特殊的<code>is</code> attribute实现<strong>在不同组件之间进行动态切换</strong>，如在一个多标签的页面里实现无跳转切换标签：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!-- 组件会在currentTabComponent改变时改变 --&gt;
&lt;component v-bind:is&#x3D;&quot;currentTabComponent&quot;&gt;&lt;&#x2F;component&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>其中，<code>currentTabComponent</code>可以包括已注册组件的名字或是一个组件的选项对象。</p>
<p>这个attribute可以用于常规HTML元素，但这些元素将被视为组件，即所有的attribute都会作为DOM attribute被绑定。若想让其正常工作，则需要使用<code>.prop</code>修饰器。</p>
<h3 id="解析DOM模板时的注意事项"><a href="#解析DOM模板时的注意事项" class="headerlink" title="解析DOM模板时的注意事项"></a>解析DOM模板时的注意事项</h3><p>对于一些HTML元素如<code>&lt;ul&gt;</code>、<code>&lt;ol&gt;</code>、<code>&lt;table&gt;</code>和<code>&lt;select&gt;</code>，哪些可以出现在其内部是由严格限制的。而另一些HTML元素如<code>&lt;li&gt;</code>、<code>&lt;tr&gt;</code>和<code>&lt;option&gt;</code>，只能出现在其其他某些特定的元素内部。</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!--自定义组件blog-post-row会被作为无效内容--&gt;
&lt;table&gt;
  &lt;blog-post-row&gt;&lt;&#x2F;blog-post-row&gt;
&lt;&#x2F;table&gt;

&lt;!--使用is attribute可以让自定义组件不会被作为无效内容--&gt;
&lt;table&gt;
  &lt;tr is&#x3D;&quot;blog-post-row&quot;&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;table&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>若是从以下来源使用模板则没有这个限制：</p>
<ul>
<li>字符串</li>
<li>单文件组件（<code>.vue</code>）</li>
<li><code>&lt;script type=&quot;text/x-template&quot;&gt;</code></li>
</ul>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>前端</category>
        <category>前端框架</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>前端框架之Vue.js（五）</title>
    <url>/2022/11/10/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E4%BA%94%EF%BC%89/</url>
    <content><![CDATA[<h1 id="深入了解组件"><a href="#深入了解组件" class="headerlink" title="深入了解组件"></a>深入了解组件</h1><h2 id="动态组件-amp-异步组件"><a href="#动态组件-amp-异步组件" class="headerlink" title="动态组件&amp;异步组件"></a>动态组件&amp;异步组件</h2><h3 id="在动态组件上使用keep-alive"><a href="#在动态组件上使用keep-alive" class="headerlink" title="在动态组件上使用keep-alive"></a>在动态组件上使用keep-alive</h3><p>之前曾在一个多标签的页面使用<code>is</code> attribute来切换不同的组件：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>currentTabComponent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>当这些组件之间来回切换时，会发现原来点击的内容被销毁了，由于 每次切换新标签时，Vue都创建了一个新实例，因此切回去时是不会保留之前选择的选项的。</p>
<p>若想把那些标签的组件实例能够被在它们第一次被创建时缓存下来，可以使用<code>&lt;keep-alive&gt;</code>元素把动态组件包裹起来，如：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!-- 失活的组件将会被缓存 --&gt;
&lt;keep-alive&gt;
  &lt;component v-bind:is&#x3D;&quot;currentTabComponent&quot;&gt;&lt;&#x2F;component&gt;
&lt;&#x2F;keep-alive&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>动态组件及使用keep-alive的例子如下：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;body&gt;
  &lt;div id&#x3D;&quot;example&quot; class&#x3D;&quot;demo&quot;&gt;
    
    &lt;button 
      v-for&#x3D;&quot;tab in tabs&quot; 
      v-bind:key&#x3D;&quot;tab&quot; 
      v-on:click&#x3D;&quot;currentTab&#x3D;tab&quot;
    &gt;
      &#123;&#123;tab&#125;&#125;
    &lt;&#x2F;button&gt;
    &lt;!-- &lt;component v-bind:is&#x3D;&quot;currentTabComponent&quot;&gt;&lt;&#x2F;component&gt; --&gt;
    
    &lt;!-- 失活的组件将会被缓存 --&gt;
    &lt;keep-alive&gt;
      &lt;component v-bind:is&#x3D;&quot;currentTabComponent&quot;&gt;&lt;&#x2F;component&gt;
    &lt;&#x2F;keep-alive&gt;
  &lt;&#x2F;div&gt;  
&lt;&#x2F;body&gt;
&lt;script&gt;
var postOne&#x3D;&#123;
  id:1,
  title:&#39;Cat Ipsum&#39;,
  content:&#39;&lt;p&gt;That is a content of Cat Ipsum &lt;&#x2F;p&gt;&#39;
&#125;;
var postTwo&#x3D;&#123;
  id:2,
  title:&#39;Hipster Ipsum&#39;,
  content:&#39;&lt;p&gt;That is a content of Hipster Ipsum &lt;&#x2F;p&gt;&#39; 
&#125;;
var postThree&#x3D;&#123;
  id:3,
  title:&#39;Cupcake Ipsum&#39;,
  content:&#39;&lt;p&gt;That is a content of Cupcake Ipsum &lt;&#x2F;p&gt;&#39;
&#125;;
Vue.component(&#39;tab-posts&#39;,&#123;
  data:function()&#123;
    return&#123;
      posts:[postOne,postTwo,postThree],
      selectedPost:null
    &#125;
  &#125;,
  template:&#96;
    &lt;div&gt;
      &lt;ul&gt;
        &lt;li 
          v-for&#x3D;&quot;post in posts&quot; 
          v-bind:key&#x3D;&quot;post.id&quot;
          v-on:click&#x3D;&quot;selectedPost&#x3D;post&quot;
        &gt;
          &#123;&#123;post.title&#125;&#125;
        &lt;&#x2F;li&gt;
      &lt;&#x2F;ul&gt;
      &lt;div&gt;
        &lt;div v-if&#x3D;&quot;selectedPost&quot;&gt;
          &lt;div v-html&#x3D;&quot;selectedPost.content&quot;&gt;&lt;&#x2F;div&gt;
        &lt;&#x2F;div&gt;
        &lt;strong v-else&gt;
          Click on a blog title to the left to view it.
        &lt;&#x2F;strong&gt;
      &lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;
  &#96;        
&#125;)
Vue.component(&#39;tab-archive&#39;,&#123;
  template:&#39;&lt;div&gt;Archive component&lt;&#x2F;div&gt;&#39;
&#125;)
new Vue(&#123;
  el:&#39;#example&#39;,
  data:&#123;
    currentTab:&#39;Posts&#39;,
    tabs:[&#39;Posts&#39;,&#39;Archive&#39;]
  &#125;,
  computed:&#123;
    currentTabComponent:function()&#123;
      return &#39;tab-&#39;+this.currentTab.toLowerCase()
    &#125;
  &#125;
&#125;)
&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>&lt;keep-alive&gt;</code>包裹动态组件时，会缓存不活动的组件实例，而不是销毁它们。</p>
<p>若使用v-if也想保留组件内容，可以用<code>&lt;keep-alive&gt;</code>包裹：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;keep-alive&gt;
  &lt;component-a v-if&#x3D;&quot;a&gt;1&quot;&gt;&lt;&#x2F;component-a&gt;
  &lt;component-b v-else&gt;&lt;&#x2F;component-b&gt;
&lt;&#x2F;keep-alive&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>若想使用<code>include&amp;exclude</code>属性也保存组件内容，也能用<code>&lt;keep-alive&gt;</code>包裹。其中，<strong>与include的值匹配的路由/组件会被缓存，不匹配的不会被缓存</strong>：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;keep-alive include&#x3D;&quot;tab-archive&quot;&gt;
  &lt;component v-bind:is&#x3D;&quot;currentTabComponent&quot;&gt;&lt;&#x2F;component&gt;
&lt;&#x2F;keep-alive&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>可以通过逗号分隔的字符串形式、正则形式、数组形式进行匹配：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keep-alive</span> <span class="token attr-name">include</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>[<span class="token punctuation">'</span>tab-archive<span class="token punctuation">'</span>,<span class="token punctuation">'</span>tab-posts<span class="token punctuation">'</span>]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>currentTabComponent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>keep-alive</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>还可以利用<code>&lt;keep-alive&gt;</code>来设计最多可以缓存多少组件实例，一旦这个数字达到了，则在新实例被创建之前，<strong>已缓存组件中最久没有被访问的实例会被销毁</strong>：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keep-alive</span> <span class="token attr-name">max</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>currentTabComponent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>keep-alive</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="异步组件"><a href="#异步组件" class="headerlink" title="异步组件"></a>异步组件</h3><p>在大型应用中，可能需要将应用分割成小一些的代码块，并且只在需要时才从服务器加载一个模块。</p>
<p>为了简化，Vue允许以一个工厂函数的方式定义组件，这个工厂函数会异步解析组件的定义，只在这个组件需要被渲染时才会触发该工厂函数，并把结果缓存起来供后续重渲染。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'async-example'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token function">seTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token comment">//向resolve回调传递组件定义</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      template<span class="token operator">:</span><span class="token string">'&lt;div> I am async! &lt;/div>'</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上述代码的工厂函数会收到一个<code>resolve</code>回调，这个回调函数会在从服务器得到组件定义时被调用，也可以调用<code>reject(reason)</code>来表示加载失败。</p>
<p>将异步组件和webpack的code-splitting功能一起配合使用时，可以自动将所构建的代码切割成多个包，这些包会通过Ajax请求加载：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'async-webpack-example'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token comment">//告诉webpack自动切割构建代码</span>
  <span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'./my-async-component'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>resolve<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>将webpack 2和ES2015语法结合使用动态导入时，可以在工厂中返回一个<code>Promise</code>：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span>
  <span class="token string">'async-webpack-example'</span><span class="token punctuation">,</span>
  <span class="token comment">//这个动态导入会返回一个Promise对象</span>
  <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./my-async-component'</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>当使用局部注册时，也可以直接提供一个返回<code>Promise</code>的函数：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  <span class="token operator">...</span>
  components<span class="token operator">:</span><span class="token punctuation">&#123;</span>
    <span class="token string">'my-component'</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./my-async-component'</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="处理加载状态"><a href="#处理加载状态" class="headerlink" title="处理加载状态"></a>处理加载状态</h4><p>异步组件工厂函数也可以返回一个如下格式的对象：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">AsyncComponent</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  component<span class="token operator">:</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./MyComponent.vue'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">//需要加载的组件，返回一个promise对象</span>
  loading<span class="token operator">:</span>LoadingComponent<span class="token punctuation">,</span><span class="token comment">//异步组件加载时使用的组件</span>
  error<span class="token operator">:</span>ErrorComponent<span class="token punctuation">,</span><span class="token comment">//加载失败时使用的组件</span>
  delay<span class="token operator">:</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token comment">//展示加载时组件的延时时间，默认值是200毫秒</span>
  timeout<span class="token operator">:</span><span class="token number">3000</span><span class="token comment">//若提供了超时时间且组件也加载超时了，则使用加载失败时使用的组件。默认值是infinity</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="处理边界情况"><a href="#处理边界情况" class="headerlink" title="处理边界情况"></a>处理边界情况</h2><h3 id="访问元素-amp-组件"><a href="#访问元素-amp-组件" class="headerlink" title="访问元素&amp;组件"></a>访问元素&amp;组件</h3><h4 id="访问根实例"><a href="#访问根实例" class="headerlink" title="访问根实例"></a>访问根实例</h4><p>在每个<code>new Vue</code>实例的子组件中，其根示例可以通过<code>$root</code> property进行访问，如<code>this.$root.data</code>。</p>
<h4 id="访问父级组件实例"><a href="#访问父级组件实例" class="headerlink" title="访问父级组件实例"></a>访问父级组件实例</h4><p>可以通过<code>$parent</code> property来从一个子组件访问父组件的实例，如<code>this.$parent.getData</code>。</p>
<h4 id="访问子组件实例或子元素"><a href="#访问子组件实例或子元素" class="headerlink" title="访问子组件实例或子元素"></a>访问子组件实例或子元素</h4><p>在JavaScript里直接访问一个子组件，可以先通过<code>ref</code> attribute为子组件赋予一个ID引用：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base-input</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>usernameInput<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>base-input</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>然后便可以使用<code>this.$refs.usernameInput</code>来访问这个<code>&lt;base-input&gt;</code>实例。</p>
<p><strong>注意：</strong>当<code>ref</code>和<code>v-for</code>一起使用时，得到的ref将会是一个包含了对应数据源的子组件数组。</p>
<p><code>$refs</code>只会在组件渲染完成后生效，且它们不是响应式的，因此应该避免在模板或计算属性中访问<code>$refs</code>。</p>
<h4 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h4><p>依赖注入可以将子组件的共用方法拓展到更深层级的嵌套组件上，使得任意后代组件中都能访问该方法，且不需要暴露该组件实例。</p>
<p>依赖注入用到了两个实例选项：<code>provide</code>和<code>inject</code>。</p>
<p><code>provide</code>选项允许指定想要提供给后代组件的数据/方法。</p>
<p><code>inject</code>选项用于接收指定的想要添加在实例上的property。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function-variable function">provide</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span><span class="token punctuation">&#123;</span>
    getMap<span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>getMap
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
inject<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'getMap'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="程序化的事件侦听器"><a href="#程序化的事件侦听器" class="headerlink" title="程序化的事件侦听器"></a>程序化的事件侦听器</h3><p>处理可以被<code>v-on</code>侦听的<code>$emit</code>外，Vue实例还同时在其事件接口提供了其他的方法：</p>
<ul>
<li><code>$on(eventName,eventHandler)</code>：侦听一个事件</li>
<li><code>$once(eventName,eventHandler)</code>：一次性侦听一个事件</li>
<li><code>$off(eventName,eventHandler)</code>：停止侦听一个事件</li>
</ul>
<h3 id="循环引用"><a href="#循环引用" class="headerlink" title="循环引用"></a>循环引用</h3><h4 id="递归组件"><a href="#递归组件" class="headerlink" title="递归组件"></a>递归组件</h4><p>组件可以通过<code>name</code>选项在自己的模板中调用自身。当使用<code>Vue.component</code>全局注册一个组件时，全局的ID会自动设置为该组件的<code>name</code>选项。</p>
<h4 id="组件之间的循环引用"><a href="#组件之间的循环引用" class="headerlink" title="组件之间的循环引用"></a>组件之间的循环引用</h4><p>有两个组件A和组件B，A依赖B，B又依赖A，两者之间反复进行循环引用，模块系统不知道要如果不经过其中一个组件而完全解析另一个组件而报错。</p>
<p>为了解决这个问题，需要把其中一个组件设为一个点，如将<code>&lt;tree-folder&gt;</code>组件设为哪个点，另一个子组件为<code>&lt;tree-folder-contents&gt;</code>，此时会等到生命周期钩子<code>beforeCreate</code>时去注册它：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function-variable function">beforeCreate</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>$options<span class="token punctuation">.</span>components<span class="token punctuation">.</span>TreeFolderContents<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./tree-folder-contents.vue'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>default
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>或者在本地注册组件时，用webpack的异步import来解决:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">components<span class="token operator">:</span><span class="token punctuation">&#123;</span>
  <span class="token function-variable function">TreeFolderContents</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./tree-folder-contents.vue'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="模板定义的替代品"><a href="#模板定义的替代品" class="headerlink" title="模板定义的替代品"></a>模板定义的替代品</h3><h4 id="内联模板"><a href="#内联模板" class="headerlink" title="内联模板"></a>内联模板</h4><p>当子组件中出现<code>inline-template</code> attribute时，这个组件将会使用其里面的内容作为模板，而不是作为被分发的内容：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-component</span> <span class="token attr-name">inline-template</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>123<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-component</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>内联模板需定义在Vue所属的DOM元素内。</p>
<h4 id="X-Template"><a href="#X-Template" class="headerlink" title="X-Template"></a>X-Template</h4><p>另一个定义模板的方式是在一个<code>&lt;script&gt;</code>元素中，并为其带上<code>text/x-template</code>的类型，然后通过一个id将模板引用过去：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/x-template<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hello-world-template<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  <span class="token operator">&lt;</span>p<span class="token operator">></span>Hello world <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="控制更新"><a href="#控制更新" class="headerlink" title="控制更新"></a>控制更新</h3><h4 id="强制更新"><a href="#强制更新" class="headerlink" title="强制更新"></a>强制更新</h4><p>可以使用<code>$forceUpdate</code>来进行强制更新。</p>
<h4 id="通过v-once创建低开销的静态组件"><a href="#通过v-once创建低开销的静态组件" class="headerlink" title="通过v-once创建低开销的静态组件"></a>通过<code>v-once</code>创建低开销的静态组件</h4><p>在包括了大量静态内容的组件里，可以在其根元素上添加<code>v-once</code> attribute来确保这些内容只计算一次后缓存起来。</p>
<h1 id="过渡-amp-动画"><a href="#过渡-amp-动画" class="headerlink" title="过渡&amp;动画"></a>过渡&amp;动画</h1><h2 id="进入-离开-amp-列表过渡"><a href="#进入-离开-amp-列表过渡" class="headerlink" title="进入/离开&amp;列表过渡"></a>进入/离开&amp;列表过渡</h2><h3 id="单元素-组件的过渡"><a href="#单元素-组件的过渡" class="headerlink" title="单元素/组件的过渡"></a>单元素/组件的过渡</h3><p>Vue提供了<code>transition</code>封装组件，在以下情形中，可以给任何元素和组件添加进入/离开过渡：</p>
<ul>
<li>条件渲染（使用<code>v-if</code>）</li>
<li>条件展示（使用<code>v-show</code>）</li>
<li>动态组件</li>
<li>组件根节点</li>
</ul>
<p>例如：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>   
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>show=!show<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Toggle<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fade<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>show<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  el<span class="token operator">:</span><span class="token string">'#demo'</span><span class="token punctuation">,</span>
  data<span class="token operator">:</span><span class="token punctuation">&#123;</span>
    show<span class="token operator">:</span><span class="token boolean">true</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
<span class="token selector">.fade-enter-active,.fade-leave-active</span><span class="token punctuation">&#123;</span>
  <span class="token property">transition</span><span class="token punctuation">:</span>opacity .5s<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">.fade-enter,.fade-leave-to</span><span class="token punctuation">&#123;</span>
  <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>当插入或删除包含在transition组件中的元素时，Vue将会做以下处理：</p>
<ol>
<li>自动嗅探目标元素是否应用了CSS过渡或动画，若是，在恰当的时机添加/删除CSS类名</li>
<li>若过渡组件提供了JavaScript钩子函数，这些钩子函数将在恰当的时机被调用</li>
<li>若没有找到JavaScript钩子函数，也没有检测到CSS过渡/动画，DOM操作（插入/删除）在下一帧中立即执行</li>
</ol>
<h4 id="过渡的类名"><a href="#过渡的类名" class="headerlink" title="过渡的类名"></a>过渡的类名</h4><p>在进入/离开的过渡中，会有6个class切换：</p>
<ul>
<li><code>v-enter-active</code>：定义进入过渡生效时的状态。在整个进入过渡的阶段中应用，在元素被插入之前生效，在过渡/动画完成之后移除。这个类可以被用来定义进入过渡的过程时间、延迟和曲线函数。<ul>
<li><code>v-enter</code>：定义进入过渡的开始状态。在元素被插入之前生效，在元素被插入之后的下一帧移除</li>
<li><code>v-enter-to</code>：定义进入过渡的结束状态。在元素被插入之后下一帧生效，在过渡/动画完成之后移除</li>
</ul>
</li>
<li><code>v-leave-active</code>：定义离开过渡生效时的状态。在整个离开过渡的阶段中应用，在离开过渡被触发时立刻生效，在过渡/动画完成之后移除。这个类可以被用来定义离开过渡的过程时间、延迟和曲线函数。<ul>
<li><code>v-leave</code>：定义离开过渡的开始状态。在离开过渡被触发时立刻生效，下一帧被移除</li>
<li><code>v-leave-to</code>：定义离开过渡的结束状态。在离开过渡被触发之后下一帧生效，在过渡/动画完成之后移除</li>
</ul>
</li>
</ul>
<p>对于在过渡切换的来命名来说，若使用的是没有名字的<code>&lt;transition&gt;</code>，则<code>v-</code>是这些类名的默认前缀。若使用了<code>&lt;transition name=&quot;my-transition&quot;&gt;</code>，那么<code>v-enter</code>会替换成<code>my-transition-enter</code></p>
<h4 id="CSS过渡"><a href="#CSS过渡" class="headerlink" title="CSS过渡"></a>CSS过渡</h4><p>常用的过渡都是使用CSS过渡。</p>
<p>例如：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>   
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>show=!show<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Toggle render<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>slide-fade<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>show<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  el<span class="token operator">:</span><span class="token string">'#demo'</span><span class="token punctuation">,</span>
  data<span class="token operator">:</span><span class="token punctuation">&#123;</span>
    show<span class="token operator">:</span><span class="token boolean">true</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
<span class="token selector">.slide-fade-enter-active</span><span class="token punctuation">&#123;</span>
  <span class="token property">transition</span><span class="token punctuation">:</span>all .3s ease<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">.slide-fade-leave-active</span><span class="token punctuation">&#123;</span>
  <span class="token property">transition</span><span class="token punctuation">:</span>all .8s <span class="token function">cubic-bezier</span><span class="token punctuation">(</span>1.0<span class="token punctuation">,</span>0.5<span class="token punctuation">,</span>0.8<span class="token punctuation">,</span>1.0<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">.slide-fade-enter,.slide-fade-leave-to</span><span class="token punctuation">&#123;</span>
  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>10px<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="CSS动画"><a href="#CSS动画" class="headerlink" title="CSS动画"></a>CSS动画</h4><p>CSS动画用法与CSS过渡相同，其区别是在动画中<code>v-enter</code>类名在节点插入DOM后不会立即删除，而是在<code>animationend</code>时间触发时删除。</p>
<p>例如：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>   
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>show=!show<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Toggle show<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bounce<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>show<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris facilisis enim libero, at lacinia diam fermentum id. Pellentesque habitant morbi tristique senectus et netus.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  el<span class="token operator">:</span><span class="token string">'#demo'</span><span class="token punctuation">,</span>
  data<span class="token operator">:</span><span class="token punctuation">&#123;</span>
    show<span class="token operator">:</span><span class="token boolean">true</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
<span class="token selector">.bounce-enter-active</span><span class="token punctuation">&#123;</span>
  <span class="token property">animation</span><span class="token punctuation">:</span> bounce-in .5s<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">.bounce-leave-active</span><span class="token punctuation">&#123;</span>
  <span class="token property">animation</span><span class="token punctuation">:</span> bounce-in .5s reverse<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token atrule"><span class="token rule">@keyframes</span> bounce-in</span><span class="token punctuation">&#123;</span>
  <span class="token selector">0%</span><span class="token punctuation">&#123;</span>
    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token selector">50%</span><span class="token punctuation">&#123;</span>
    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span>1.5<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token selector">100%</span><span class="token punctuation">&#123;</span>
    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span>1<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="自定义过渡的类名"><a href="#自定义过渡的类名" class="headerlink" title="自定义过渡的类名"></a>自定义过渡的类名</h4><p>可以通过以下attribute来自定义过渡类名：</p>
<ul>
<li><code>enter-active-class</code></li>
<li><code>enter-class</code></li>
<li><code>enter-to-class</code></li>
<li><code>leave-active-class</code></li>
<li><code>leave-class</code></li>
<li><code>leave-to-class</code></li>
</ul>
<p>这些attribute的优先级高于普通的类名，这对Vue的过渡系统和其他第三方CSS动画库的使用十分有用。</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>show=!show<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Toggle render<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span> 
      <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>custom-classes-transition<span class="token punctuation">"</span></span>
      <span class="token attr-name">enter-active-class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>animated data<span class="token punctuation">"</span></span>
      <span class="token attr-name">leave-active-class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>animated bounceOutRight<span class="token punctuation">"</span></span>
    <span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>show<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  el<span class="token operator">:</span><span class="token string">'#demo'</span><span class="token punctuation">,</span>
  data<span class="token operator">:</span><span class="token punctuation">&#123;</span>
    show<span class="token operator">:</span><span class="token boolean">true</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="同时使用过渡和动画"><a href="#同时使用过渡和动画" class="headerlink" title="同时使用过渡和动画"></a>同时使用过渡和动画</h4><p>Vue为了知道过渡的完成，必须设置相应的事件监听器。其可以是<code>transitionend</code>或<code>animationend</code>，这取决于给元素应用的CSS规则，若使用其中任何一种，Vue能自动识别类型并设置监听。</p>
<p>若给同一种元素同时设置两种过渡动效时，需要使用<code>type</code> attribute来设置<code>animationend</code>或<code>transitionend</code>来明确声明需要Vue监听的类型。</p>
<h4 id="显性的过渡持续时间"><a href="#显性的过渡持续时间" class="headerlink" title="显性的过渡持续时间"></a>显性的过渡持续时间</h4><p>大多数情况下，Vue可以自动得出过渡效果的完成时机。默认情况下，Vue会等待其在过渡效果根元素的第一个<code>transitionend</code>或<code>animationend</code>时间。</p>
<p>也可以使用<code>transition</code>组件上的<code>duration</code> prop来定制一个显性的过渡持续时间（以毫秒为单位）：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span> <span class="token attr-name">:duration</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1000<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span>   
<span class="token comment">&lt;!-- 也可以定制进入和移除的持续时间 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span> <span class="token attr-name">:duration</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;enter:500,leave:800&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h4 id="JavaScript钩子"><a href="#JavaScript钩子" class="headerlink" title="JavaScript钩子"></a>JavaScript钩子</h4><p>可以在attribute中声明JavaScript钩子：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>show=!show<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Toggle render<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span> 
      <span class="token attr-name"><span class="token namespace">v-on:</span>before-enter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>beforeEnter<span class="token punctuation">"</span></span>
      <span class="token attr-name"><span class="token namespace">v-on:</span>enter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>enter<span class="token punctuation">"</span></span>
      <span class="token attr-name"><span class="token namespace">v-on:</span>after-enter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>afterEnter<span class="token punctuation">"</span></span>
      <span class="token attr-name"><span class="token namespace">v-on:</span>enter-cancelled</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>enterCancelled<span class="token punctuation">"</span></span>

      <span class="token attr-name"><span class="token namespace">v-on:</span>before-leave</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>beforeLeave<span class="token punctuation">"</span></span>
      <span class="token attr-name"><span class="token namespace">v-on:</span>leave</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>leave<span class="token punctuation">"</span></span>
      <span class="token attr-name"><span class="token namespace">v-on:</span>after-leave</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>afterLeave<span class="token punctuation">"</span></span>
      <span class="token attr-name"><span class="token namespace">v-on:</span>leave-cancelled</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>leaveCancelled<span class="token punctuation">"</span></span>
    <span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>show<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  el<span class="token operator">:</span><span class="token string">'#demo'</span><span class="token punctuation">,</span>
  data<span class="token operator">:</span><span class="token punctuation">&#123;</span>
    show<span class="token operator">:</span><span class="token boolean">true</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  methods<span class="token operator">:</span><span class="token punctuation">&#123;</span>
    <span class="token comment">//进入中</span>
    <span class="token function-variable function">beforeEnter</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token comment">//...</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
     <span class="token comment">//当与CSS结合使用时，回调函数done是可选的</span>
     <span class="token function-variable function">enter</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span>done</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token comment">//...</span>
      <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
     <span class="token function-variable function">afterEnter</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token comment">//...</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">enterCancelled</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token comment">//...</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token comment">//离开时</span>
    <span class="token function-variable function">beforeLeave</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token comment">//...</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
     <span class="token comment">//当与CSS结合使用时，回调函数done是可选的</span>
     <span class="token function-variable function">leave</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span>done</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token comment">//...</span>
      <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">afterLeave</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token comment">//...</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">leaveCancelled</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token comment">//...</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这些钩子函数可以结合CSS <code>transitions/animations</code>使用，也可以单独使用。</p>
<p>当只用JavaScript过渡时，在<code>enter</code>和<code>leave</code>中必须使用<code>done</code>进行回调，否则两者将被同步调用，过渡会立即完成。</p>
<p>对于仅使用JavaScript过渡的元素添加<code>v-bind:css=&quot;false&quot;</code>,Vue会跳过CSS的检测。这可以避免过渡过程中CSS的影响。</p>
<h3 id="初始渲染的过渡"><a href="#初始渲染的过渡" class="headerlink" title="初始渲染的过渡"></a>初始渲染的过渡</h3><p>可以通过<code>appear</code> attribute来设置节点在初始渲染的过渡：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"> <span class="token comment">&lt;!-- 可以自定义CSS类名，也可以自定义JavaScript钩子 --></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span>
 <span class="token attr-name">appear</span>
 <span class="token attr-name">appear-class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>custom-appear-class<span class="token punctuation">"</span></span>
 <span class="token attr-name">appear-to-class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>custom-appear-to-class<span class="token punctuation">"</span></span><span class="token attr-name">(2.1.8)</span>
 <span class="token attr-name">appear-active-class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>custom-appear-active-class<span class="token punctuation">"</span></span>
 <span class="token attr-name"><span class="token namespace">v-on:</span>before-appear</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>customBeforeAppearHook<span class="token punctuation">"</span></span>
 <span class="token attr-name"><span class="token namespace">v-on:</span>appear</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>customAppearHook<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="多个元素的过渡"><a href="#多个元素的过渡" class="headerlink" title="多个元素的过渡"></a>多个元素的过渡</h3><p>对于原生标签可以使用<code>v-if</code>/<code>v-else</code>来实现多个组件的过渡，最常见的多标签过渡是一个列表和描述这个列表为空消息的元素：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span><span class="token punctuation">></span></span>
  <span class="token comment">&lt;!-- 当有相同标签名的元素切换时，需要通过key attribute来设置唯一的值来标记 --></span>  
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>buttion</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>isEditing<span class="token punctuation">"</span></span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>save<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Save<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>buttion</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>buttion</span> <span class="token attr-name">v-else</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>edit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Edit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>buttion</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在一些场景中，也可以通过给同一个元素的<code>key</code> attribute设置不同的状态来代替<code>v-if</code>和<code>v-else</code>：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>buttion</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>isEditing<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    &#123;&#123;isEdting?"Save":"Edit"&#125;&#125;
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>buttion</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>使用多个<code>v-if</code>的多个元素过渡，可以重写为绑定了动态property的单个元素过渡，如：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>buttion</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>docState===<span class="token punctuation">'</span>saved<span class="token punctuation">'</span><span class="token punctuation">"</span></span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>saved<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Edit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>buttion</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>buttion</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>docState===<span class="token punctuation">'</span>edited<span class="token punctuation">'</span><span class="token punctuation">"</span></span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>edited<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Save<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>buttion</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>buttion</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>docState===<span class="token punctuation">'</span>editing<span class="token punctuation">'</span><span class="token punctuation">"</span></span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>editing<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Cancel<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>buttion</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>buttion</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以重写为：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>docState<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    &#123;&#123;buttonMessage&#125;&#125;
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
<span class="token comment">//...</span>
computed<span class="token operator">:</span><span class="token punctuation">&#123;</span>
  <span class="token function-variable function">buttonMessage</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">switch</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>docSate<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token keyword">case</span> <span class="token string">'saved'</span><span class="token operator">:</span><span class="token keyword">return</span> <span class="token string">'Edit'</span>
      <span class="token keyword">case</span> <span class="token string">'edited'</span><span class="token operator">:</span><span class="token keyword">return</span> <span class="token string">'Save'</span>
      <span class="token keyword">case</span> <span class="token string">'editing'</span><span class="token operator">:</span><span class="token keyword">return</span> <span class="token string">'Cancel'</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>    
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="过渡模式"><a href="#过渡模式" class="headerlink" title="过渡模式"></a>过渡模式</h4><p>由于同时生效的进入和离开的过渡不能满足所有要求，因此Vue提供了过渡模式：</p>
<ul>
<li><code>in-out</code>：新元素先进行过渡，完成之后当前元素过渡离开</li>
<li><code>out-in</code>：当前元素先进行过渡，完成之后新元素过渡进入</li>
</ul>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fade<span class="token punctuation">"</span></span> <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>out-in<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="多个组件的过渡"><a href="#多个组件的过渡" class="headerlink" title="多个组件的过渡"></a>多个组件的过渡</h3><p>只需要使用动态组件便可以使用<code>key</code> attribute：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>view=<span class="token punctuation">'</span>v-a<span class="token punctuation">'</span><span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>view<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>view=<span class="token punctuation">'</span>v-b<span class="token punctuation">'</span><span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>view<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>b<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>B<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>component-fade<span class="token punctuation">"</span></span> <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>out-in<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>view<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">

<span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  el<span class="token operator">:</span><span class="token string">'#demo'</span><span class="token punctuation">,</span>
  data<span class="token operator">:</span><span class="token punctuation">&#123;</span>
    view<span class="token operator">:</span><span class="token string">'v-a'</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  components<span class="token operator">:</span><span class="token punctuation">&#123;</span>
    <span class="token string">'v-a'</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>
      template<span class="token operator">:</span><span class="token string">'&lt;div>Component A&lt;/div>'</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token string">'v-b'</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>
      template<span class="token operator">:</span><span class="token string">'&lt;div>Component B&lt;/div>'</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
  <span class="token selector">.component-fade-enter-active,.component-fade-leave-active</span><span class="token punctuation">&#123;</span>
    <span class="token property">transition</span><span class="token punctuation">:</span>opacity .3s ease<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token selector">.component-fade-enter,.component-fade-leave-to</span><span class="token punctuation">&#123;</span>
    <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="列表过渡"><a href="#列表过渡" class="headerlink" title="列表过渡"></a>列表过渡</h3><p>需要同时渲染整个列表时，使用<code>&lt;transition-group&gt;</code>组件，这个组件的特点如下：</p>
<ul>
<li>不同于<code>&lt;transition&gt;</code>，它会以一个真实元素呈现：默认为一个<code>&lt;span&gt;</code>，也可以通过<code>tag</code> attribute更换为其他元素</li>
<li><strong>过渡模式不可用</strong></li>
<li>内部元素总是需要提供一个<strong>唯一的<code>key</code> attribute</strong></li>
<li><strong>CSS过渡的类将会应用在内部的元素中</strong>，而不是这个组/容器本身。</li>
</ul>
<h4 id="列表的进入-离开过渡"><a href="#列表的进入-离开过渡" class="headerlink" title="列表的进入/离开过渡"></a>列表的进入/离开过渡</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list-demo<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>add<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Add<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>remove<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Remove<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition-group</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">tag</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>p<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item in items<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-bind:</span>key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        &#123;&#123;item&#125;&#125;
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition-group</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  el<span class="token operator">:</span><span class="token string">'#list-demo'</span><span class="token punctuation">,</span>
  data<span class="token operator">:</span><span class="token punctuation">&#123;</span>
    items<span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    nextNum<span class="token operator">:</span><span class="token number">10</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  methods<span class="token operator">:</span><span class="token punctuation">&#123;</span>
    <span class="token function-variable function">randomIndex</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span>length<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">add</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">randomIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>nextNum<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">remove</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">randomIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
<span class="token selector">.list-item</span><span class="token punctuation">&#123;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>
  <span class="token property">margin-right</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">.list-enter-active,.list-leave-active</span><span class="token punctuation">&#123;</span>
  <span class="token property">transition</span><span class="token punctuation">:</span> all 1s<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">.list-enter,.list-leave-to</span><span class="token punctuation">&#123;</span>
  <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>30px<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="列表的排序过渡"><a href="#列表的排序过渡" class="headerlink" title="列表的排序过渡"></a>列表的排序过渡</h4><p><code>&lt;transition-group&gt;</code>组件不仅可以进入和离开动画，还可以使用<code>v-model</code> class改变定位。对于<code>v-model</code> class，可以通过<code>name</code> attribute来自定义前缀，也可以通过<code>move-class</code> attribute手动设置。</p>
<p><code>v-model</code> class对于设置过渡的切换时机和过渡曲线非常有用，以下例子使用了一个FLIP的简单动画队列，使用transforms将元素从之前的位置平滑过渡到新位置中：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>   
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.14.1/lodash.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>flip-list-demo<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>shuffle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Shuffle<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition-group</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>flip-list<span class="token punctuation">"</span></span> <span class="token attr-name">tag</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ul<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item in items<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-bind:</span>key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        &#123;&#123;item&#125;&#125;
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition-group</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  el<span class="token operator">:</span><span class="token string">'#flip-list-demo'</span><span class="token punctuation">,</span>
  data<span class="token operator">:</span><span class="token punctuation">&#123;</span>
    items<span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  methods<span class="token operator">:</span><span class="token punctuation">&#123;</span>
    <span class="token function-variable function">shuffle</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token operator">=</span>_<span class="token punctuation">.</span><span class="token function">shuffle</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
<span class="token selector">.flip-list-move</span><span class="token punctuation">&#123;</span>
  <span class="token property">transition</span><span class="token punctuation">:</span> transform 1s<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>将上述代码与列表进入/离开过渡的例子结合，可式列表的一切变动都会有动画过渡：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>   
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.14.1/lodash.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list-complete-demo<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>shuffle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Shuffle<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>add<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Add<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>remove<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Remove<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition-group</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list-complete<span class="token punctuation">"</span></span> <span class="token attr-name">tag</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>p<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item in items<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-bind:</span>key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list-complete-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        &#123;&#123;item&#125;&#125;
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition-group</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  el<span class="token operator">:</span><span class="token string">'#list-complete-demo'</span><span class="token punctuation">,</span>
  data<span class="token operator">:</span><span class="token punctuation">&#123;</span>
    items<span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    nextNum<span class="token operator">:</span><span class="token number">10</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  methods<span class="token operator">:</span><span class="token punctuation">&#123;</span>
    <span class="token function-variable function">randomIndex</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span>length<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">add</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">randomIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>nextNum<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">remove</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">randomIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">shuffle</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token operator">=</span>_<span class="token punctuation">.</span><span class="token function">shuffle</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
<span class="token selector">.list-complete-item</span><span class="token punctuation">&#123;</span>
  <span class="token property">transition</span><span class="token punctuation">:</span> all 1s<span class="token punctuation">;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>
  <span class="token property">margin-right</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">.list-complete-leave-active</span><span class="token punctuation">&#123;</span>
  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">.list-complete-enter,.list-complete-leave-to</span><span class="token punctuation">&#123;</span>
  <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>30px<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>注意：</strong>使用FLIP过渡的元素不能设置为<code>display:inline</code>，可以设为<code>display:inline-block</code>或者放置于flex中。</p>
<h4 id="列表的交错过渡"><a href="#列表的交错过渡" class="headerlink" title="列表的交错过渡"></a>列表的交错过渡</h4><p>通过data attribute与JavaScript通信，可以实现列表的交错过渡：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>   
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdnjs.cloudflare.com/ajax/libs/velocity/1.2.3/velocity.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>staggered-list-demo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>query<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition-group</span> 
      <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>staggered-fade<span class="token punctuation">"</span></span> 
      <span class="token attr-name">tag</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ul<span class="token punctuation">"</span></span>
      <span class="token attr-name"><span class="token namespace">v-bind:</span>css</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>
      <span class="token attr-name"><span class="token namespace">v-on:</span>before-enter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>beforeEnter<span class="token punctuation">"</span></span>
      <span class="token attr-name"><span class="token namespace">v-on:</span>enter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>enter<span class="token punctuation">"</span></span>
      <span class="token attr-name"><span class="token namespace">v-on:</span>leave</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>leave<span class="token punctuation">"</span></span>
    <span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> 
        <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(item,index) in computedList<span class="token punctuation">"</span></span>
        <span class="token attr-name"><span class="token namespace">v-bind:</span>key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.msg<span class="token punctuation">"</span></span>
        <span class="token attr-name"><span class="token namespace">v-bind:</span>data-index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span>
      <span class="token punctuation">></span></span>&#123;&#123;item.msg&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition-group</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  el<span class="token operator">:</span><span class="token string">'#staggered-list-demo'</span><span class="token punctuation">,</span>
  data<span class="token operator">:</span><span class="token punctuation">&#123;</span>
    query<span class="token operator">:</span><span class="token string">''</span><span class="token punctuation">,</span>
    list<span class="token operator">:</span><span class="token punctuation">[</span>
      <span class="token punctuation">&#123;</span>msg<span class="token operator">:</span><span class="token string">'Bruce Lee'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#123;</span>msg<span class="token operator">:</span><span class="token string">'Jackie Chan'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#123;</span>msg<span class="token operator">:</span><span class="token string">'Chuck Norris'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#123;</span>msg<span class="token operator">:</span><span class="token string">'Jet Li'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#123;</span>msg<span class="token operator">:</span><span class="token string">'Kung Fury'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  computed<span class="token operator">:</span><span class="token punctuation">&#123;</span>
    <span class="token function-variable function">computedList</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token keyword">var</span> vm<span class="token operator">=</span><span class="token keyword">this</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> item<span class="token punctuation">.</span>msg<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>query<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!==</span><span class="token operator">-</span><span class="token number">1</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  methods<span class="token operator">:</span><span class="token punctuation">&#123;</span>
    <span class="token function-variable function">beforeEnter</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>opacity<span class="token operator">=</span><span class="token number">0</span>
      el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height<span class="token operator">=</span><span class="token number">0</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">enter</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span>done</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token keyword">var</span> delay<span class="token operator">=</span>el<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>index<span class="token operator">*</span><span class="token number">150</span>
      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token function">Velocity</span><span class="token punctuation">(</span>
          el<span class="token punctuation">,</span>
          <span class="token punctuation">&#123;</span>opacity<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>height<span class="token operator">:</span><span class="token string">'1.6em'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
          <span class="token punctuation">&#123;</span>complete<span class="token operator">:</span>done<span class="token punctuation">&#125;</span>
        <span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>delay<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">leave</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span>done</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token keyword">var</span> delay<span class="token operator">=</span>el<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>index<span class="token operator">*</span><span class="token number">150</span>
      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token function">Velocity</span><span class="token punctuation">(</span>
          el<span class="token punctuation">,</span>
          <span class="token punctuation">&#123;</span>opacity<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>height<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
          <span class="token punctuation">&#123;</span>complete<span class="token operator">:</span>done<span class="token punctuation">&#125;</span>
        <span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>delay<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="可复用的过渡"><a href="#可复用的过渡" class="headerlink" title="可复用的过渡"></a>可复用的过渡</h3><p>过渡可以通过Vue的组件系统实现复用。创建一个可复用过渡组件，只需将<code>&lt;transition&gt;</code>或<code>&lt;transition-group&gt;</code>作为根组件，然后将任何子组件放置在其中即可：</p>
<h3 id="动态过渡"><a href="#动态过渡" class="headerlink" title="动态过渡"></a>动态过渡</h3><p>在Vue中即使是过渡也是数据驱动的，通过<code>name</code> attribute来绑定动态之是动态过渡最基本的例子：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transitionName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>使用Vue的过渡系统来定义CSS过渡/动画在不同过渡间切换会非常有用。</p>
<p>所有过渡attribute都可以动态绑定，不仅只有attribute可以利用，还可以通过事件钩子获取上下文中的所有数据，即可实现根据组件状态不同，JavaScript过渡也会有不同的表现。</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>   
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdnjs.cloudflare.com/ajax/libs/velocity/1.2.3/velocity.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dynamic-fade-demo<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    Fade In:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>range<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fadeInDuration<span class="token punctuation">"</span></span> <span class="token attr-name">min</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-bind:</span>max</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>maxFadeDuration<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    Fade Out:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>range<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fadeOutDuration<span class="token punctuation">"</span></span> <span class="token attr-name">min</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-bind:</span>max</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>maxFadeDuration<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span>
      <span class="token attr-name"><span class="token namespace">v-bind:</span>css</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>
      <span class="token attr-name"><span class="token namespace">v-on:</span>before-enter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>beforeEnter<span class="token punctuation">"</span></span>
      <span class="token attr-name"><span class="token namespace">v-on:</span>enter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>enter<span class="token punctuation">"</span></span>
      <span class="token attr-name"><span class="token namespace">v-on:</span>leave</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>leave<span class="token punctuation">"</span></span>
    <span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>show<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span>
      <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stop<span class="token punctuation">"</span></span>
      <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stop=false;show=false<span class="token punctuation">"</span></span>
    <span class="token punctuation">></span></span>Start animating<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span>
      <span class="token attr-name">v-else</span>
      <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stop=true<span class="token punctuation">"</span></span>
    <span class="token punctuation">></span></span>Stop it!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  el<span class="token operator">:</span><span class="token string">'#dynamic-fade-demo'</span><span class="token punctuation">,</span>
  data<span class="token operator">:</span><span class="token punctuation">&#123;</span>
    show<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>
    fadeInDuration<span class="token operator">:</span><span class="token number">1000</span><span class="token punctuation">,</span>
    fadeOutDuration<span class="token operator">:</span><span class="token number">1000</span><span class="token punctuation">,</span>
    maxFadeDuration<span class="token operator">:</span><span class="token number">1500</span><span class="token punctuation">,</span>
    stop<span class="token operator">:</span><span class="token boolean">true</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token function-variable function">mounted</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>show<span class="token operator">=</span><span class="token boolean">false</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  methods<span class="token operator">:</span><span class="token punctuation">&#123;</span>
    <span class="token function-variable function">beforeEnter</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>opacity<span class="token operator">=</span><span class="token number">0</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">enter</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span>done</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token keyword">var</span> vm<span class="token operator">=</span><span class="token keyword">this</span>
      <span class="token function">Velocity</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span>
          <span class="token punctuation">&#123;</span>opacity<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
          <span class="token punctuation">&#123;</span>
            duration<span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>fadeInDuration<span class="token punctuation">,</span>
            <span class="token function-variable function">complete</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
              <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
              <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>vm<span class="token punctuation">.</span>stop<span class="token punctuation">)</span> vm<span class="token punctuation">.</span>show<span class="token operator">=</span><span class="token boolean">false</span>
            <span class="token punctuation">&#125;</span>
          <span class="token punctuation">&#125;</span>
        <span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">leave</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span>done</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token keyword">var</span> vm<span class="token operator">=</span><span class="token keyword">this</span>
      <span class="token function">Velocity</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span>
          <span class="token punctuation">&#123;</span>opacity<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
          <span class="token punctuation">&#123;</span>
            duration<span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>fadeOutDuration<span class="token punctuation">,</span>
            <span class="token function-variable function">complete</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
              <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
              vm<span class="token punctuation">.</span>show<span class="token operator">=</span><span class="token boolean">true</span>
            <span class="token punctuation">&#125;</span>
          <span class="token punctuation">&#125;</span>
        <span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>创建动态过渡的最终方案是组件通过接收props来动态修改之前的过渡。</p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>前端</category>
        <category>前端框架</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>前端框架之Vue.js（六）</title>
    <url>/2022/11/11/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E5%85%AD%EF%BC%89/</url>
    <content><![CDATA[<h1 id="可复用性-amp-组合"><a href="#可复用性-amp-组合" class="headerlink" title="可复用性&amp;组合"></a>可复用性&amp;组合</h1><h2 id="混入"><a href="#混入" class="headerlink" title="混入"></a>混入</h2><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><p>混入用于分发Vue组件中是可复用功能。一个混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被“混合”进入该组件本身的选项。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//定义一个混入对象</span>
<span class="token keyword">var</span> myMixin<span class="token operator">=</span><span class="token punctuation">&#123;</span>
  <span class="token function-variable function">created</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  methods<span class="token operator">:</span><span class="token punctuation">&#123;</span>
    <span class="token function-variable function">hello</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello from mixin!'</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//定义一个使用混入对象的组件</span>
<span class="token keyword">var</span> Component<span class="token operator">=</span>Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  mixins<span class="token operator">:</span><span class="token punctuation">[</span>myMixin<span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> component<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Component</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="选项合并"><a href="#选项合并" class="headerlink" title="选项合并"></a>选项合并</h3><p>当组件和混入对象含有同名选项时，这些选项将以恰当的方式进行合并。如数据对象在内部会进行递归合并，并在发生冲突时会以组件数据为优先：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> myMixin<span class="token operator">=</span><span class="token punctuation">&#123;</span>
  <span class="token function-variable function">data</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span><span class="token punctuation">&#123;</span>
      message<span class="token operator">:</span><span class="token string">'hello'</span><span class="token punctuation">,</span>
      foo<span class="token operator">:</span><span class="token string">'abc'</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  mixins<span class="token operator">:</span><span class="token punctuation">[</span>myMixin<span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token function-variable function">data</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span><span class="token punctuation">&#123;</span>
      message<span class="token operator">:</span><span class="token string">'goodbye'</span><span class="token punctuation">,</span>
      bar<span class="token operator">:</span><span class="token string">'def'</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token function-variable function">created</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token comment">/*合并结果为:
&#123; message: "goodbye", foo: "abc", bar: "def" &#125;*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>同名钩子函数将合并为一个数组，因此都将被调用。<strong>混入对象的钩子将在组件自身钩子之前被调用。</strong></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> myMixin<span class="token operator">=</span><span class="token punctuation">&#123;</span>
  <span class="token function-variable function">created</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'混入对象的钩子被调用'</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  mixins<span class="token operator">:</span><span class="token punctuation">[</span>myMixin<span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token function-variable function">created</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'组件钩子被调用'</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token function-variable function">created</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token comment">/*合并结果为：
混入对象的钩子被调用
组件钩子被调用*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>值为对象的选项如<code>methods</code>、<code>components</code>和<code>directives</code>，将被合并为同一个对象。两个对象键名冲突时，取组件对象的键值对：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> mixin<span class="token operator">=</span><span class="token punctuation">&#123;</span>
  methods<span class="token operator">:</span><span class="token punctuation">&#123;</span>
    <span class="token function-variable function">foo</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">conflicting</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'from mixin'</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">var</span> vm<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  mixins<span class="token operator">:</span><span class="token punctuation">[</span>mixin<span class="token punctuation">]</span><span class="token punctuation">,</span>
  methods<span class="token operator">:</span><span class="token punctuation">&#123;</span>
    <span class="token function-variable function">bar</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'bar'</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">conflicting</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'from self'</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
vm<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
vm<span class="token punctuation">.</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
vm<span class="token punctuation">.</span><span class="token function">conflicting</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">/*运行结果如下：
foo
bar
from self*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>注意：</strong><code>Vue.extend()</code>也使用同样的策略进行合并</p>
<h3 id="全局混入"><a href="#全局混入" class="headerlink" title="全局混入"></a>全局混入</h3><p>混入也可以进行全局注册。一旦使用全局混入，它将影响每一个之后创建的Vue实例。<strong>恰当使用时</strong>，可以用来为自定义选项注入处理逻辑。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//为自定义的选项myOption注入一个处理器</span>
Vue<span class="token punctuation">.</span><span class="token function">mixin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
 <span class="token function-variable function">created</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> myOption<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>$options<span class="token punctuation">.</span>myOption
  <span class="token keyword">if</span><span class="token punctuation">(</span>myOption<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myOption<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
 <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  myOption<span class="token operator">:</span><span class="token string">'hello!'</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token comment">/*运行结果如下：
hello!*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="自定义选项合并策略"><a href="#自定义选项合并策略" class="headerlink" title="自定义选项合并策略"></a>自定义选项合并策略</h3><p>自定义选项合并将使用默认策略，即简单地覆盖已有值。若想让自定义选项以自定义逻辑合并，可以向<code>Vue.config.optionMergeStrategies</code>添加一个函数：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>optionMergeStrategies<span class="token punctuation">.</span><span class="token function-variable function">myOption</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">toVal<span class="token punctuation">,</span>fromVal</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token comment">//返回合并后的值</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>对于多数值为对象的选项，可以使用与<code>methods</code>相同的合并策略：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> strategies<span class="token operator">=</span>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>optionMergeStrategies
strategies<span class="token punctuation">.</span>myOption<span class="token operator">=</span>strategies<span class="token punctuation">.</span>methods<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><p>Vue.js允许自定义过滤器，可被用于一些常见的文本格式化。<strong>过滤器可以用在两个地方：双花括号插值和<code>v-bind</code>表达式。</strong>过滤器应该被添加在JavaScript表达式的尾部，由“管道符号”表示：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 在双花括号中 --></span>
&#123;&#123;message | capitalize&#125;&#125;

<span class="token comment">&lt;!-- 在v-bind中 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rawId | formatId<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以在一个组件的选项中定义本地的过滤器：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">filters<span class="token operator">:</span><span class="token punctuation">&#123;</span>
  <span class="token function-variable function">capitalize</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>value<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">''</span>
    value<span class="token operator">=</span>value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>value<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>也可以在创建Vue实例之前全局定义过滤器：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span><span class="token function">filters</span><span class="token punctuation">(</span><span class="token string">'capitalize'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>value<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">''</span>
  value<span class="token operator">=</span>value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>value<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  <span class="token comment">//...</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>当全局过滤器和局部过滤器重名时，会采用局部过滤器。</p>
<p>过滤器函数总接收表达式的值作为第一个参数。如上述代码中，<code>capitalize</code>过滤器函数将会收到<code>message</code>的值作为第一个参数。</p>
<p>过滤器可以串联：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&#123;&#123;message&#125;&#125; | filterA | filterB&#125;&#125;
<span class="token comment">&lt;!-- filterA为接收单个参数的过滤器参数，message值将作为参数传入到filterA中
然后调用fliterB，将filterA的结果传递到fliterB中 --></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>过滤器是JavaScript函数，因此可以接收参数：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&#123;&#123;message&#125;&#125; | filterA('arg1',arg2)&#125;&#125;
<span class="token comment">&lt;!-- filterA为接收三个参数的过滤器参数
message值将作为第一个参数，普通字符串arg1作为第二个参数，表达式arg2的值作为第三个参数 --></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h1 id="从零开始简单的路由"><a href="#从零开始简单的路由" class="headerlink" title="从零开始简单的路由"></a>从零开始简单的路由</h1><p>若只需要非常简单的路由而不想引入一个功能完整的路由库，可以想这样动态渲染一个页面级的组件，结合HTML5 History API，便可以搭建一个客户端路由：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> NotFound<span class="token operator">=</span><span class="token punctuation">&#123;</span>template<span class="token operator">:</span><span class="token string">'&lt;p>Page not found&lt;/p>'</span><span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> Home<span class="token operator">=</span><span class="token punctuation">&#123;</span>template<span class="token operator">:</span><span class="token string">'&lt;p>Home Page&lt;/p>'</span><span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> About<span class="token operator">=</span><span class="token punctuation">&#123;</span>template<span class="token operator">:</span><span class="token string">'&lt;p>About Page&lt;/p>'</span><span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> routes<span class="token operator">=</span><span class="token punctuation">&#123;</span>
  <span class="token string">'/'</span><span class="token operator">:</span>Home<span class="token punctuation">,</span>
  <span class="token string">'/about'</span><span class="token operator">:</span>About
<span class="token punctuation">&#125;</span>
<span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  el<span class="token operator">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>
  data<span class="token operator">:</span><span class="token punctuation">&#123;</span>
    currentRoute<span class="token operator">:</span>window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>pathname
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  computed<span class="token operator">:</span><span class="token punctuation">&#123;</span>
    <span class="token function">ViewComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> routes<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>crruentRoute<span class="token punctuation">]</span><span class="token operator">||</span>NotFound
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">h</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>ViewComponent<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="vue-router路由基础"><a href="#vue-router路由基础" class="headerlink" title="vue-router路由基础"></a>vue-router路由基础</h1><p>对于大多数单页面应用，推荐使用官方支持的vue-router库。</p>
<h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><p>使用npm下载vue-router库：</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">npm install vue-router@4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="rounter-link"><a href="#rounter-link" class="headerlink" title="rounter-link"></a><code>rounter-link</code></h2><p>在vue-router里，不是使用常规的<code>&lt;a&gt;</code>标签，而是使用一个自定义组件<code>rounter-link</code>来创建链接。这样Vue Router可以在不重新加载页面的情况下更改URL，处理URL的生成及编码。</p>
<h2 id="rounter-view"><a href="#rounter-view" class="headerlink" title="rounter-view"></a><code>rounter-view</code></h2><p><code>rounter-view</code>将显示与URL对应的组件，可以将其放在任何地方。</p>
<p>使用Vue Router创建单页应用例子：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>   
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://unpkg.com/vue@3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://unpkg.com/vue-router@4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello App！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>
    <span class="token comment">&lt;!-- 使用router-link组件进行导航 --></span>
    <span class="token comment">&lt;!-- 通过传递to来指定连接 --></span>
    <span class="token comment">&lt;!-- &lt;rounter-link>将呈现以一个带有正确href属性的&lt;a>标签 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Go to Home<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/about<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Go to About<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
  <span class="token comment">&lt;!-- 路由出口 --></span>
  <span class="token comment">&lt;!-- 路由匹配到的组件将渲染在这里 --></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
<span class="token comment">//定义路由组件,也可以从其他文件中导入</span>
<span class="token keyword">const</span> Home<span class="token operator">=</span><span class="token punctuation">&#123;</span>template<span class="token operator">:</span><span class="token string">'&lt;div>Home&lt;/div>'</span><span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> About<span class="token operator">=</span><span class="token punctuation">&#123;</span>template<span class="token operator">:</span><span class="token string">'&lt;div>About&lt;/div>'</span><span class="token punctuation">&#125;</span>

<span class="token comment">//定义一些路由.每个路由都需要映射到一个组件中</span>
<span class="token keyword">const</span> routes<span class="token operator">=</span><span class="token punctuation">[</span>
  <span class="token punctuation">&#123;</span>path<span class="token operator">:</span><span class="token string">'/'</span><span class="token punctuation">,</span>component<span class="token operator">:</span>Home<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>path<span class="token operator">:</span><span class="token string">'/about'</span><span class="token punctuation">,</span>component<span class="token operator">:</span>About<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>

<span class="token comment">// 创建路由实例并传递routes配置</span>
<span class="token keyword">const</span> router<span class="token operator">=</span>VueRouter<span class="token punctuation">.</span><span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  <span class="token comment">// 内部提供了history模式的实现,为了简便,这里使用hash模式</span>
  history<span class="token operator">:</span>VueRouter<span class="token punctuation">.</span><span class="token function">createWebHashHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  routes<span class="token punctuation">,</span><span class="token comment">//这句为routes:routes的缩写</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

<span class="token comment">// 创建并挂载根示例</span>
<span class="token keyword">const</span> app<span class="token operator">=</span>Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

<span class="token comment">// 确保user路由实例使整个应用支持路由</span>
<span class="token comment">// 在任意组件中能以this.$router的形式访问它,且能以this.$route的形式访问当前路由</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">)</span>

<span class="token comment">// 启动应用</span>
app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span>

</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>通过调用<code>app.use(router)</code>，可以在任意组件中以<code>this.$router</code>的形式访问它,且能以<code>this.$route</code>的形式访问当前路由：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//Home.vue文件中</span>
<span class="token keyword">export</span> <span class="token keyword">default</span><span class="token punctuation">&#123;</span>
  computed<span class="token operator">:</span><span class="token punctuation">&#123;</span>
    <span class="token function">username</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>username
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  methods<span class="token operator">:</span><span class="token punctuation">&#123;</span>
    <span class="token function">goToDashboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>isAuthenticated<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'/dashboard'</span><span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>要在<code>setup</code>函数中访问路由，则可以调用<code>useRouter</code>或<code>useRoute</code>函数。</p>
<h2 id="动态路由匹配"><a href="#动态路由匹配" class="headerlink" title="动态路由匹配"></a>动态路由匹配</h2><h3 id="带参数的动态路由匹配"><a href="#带参数的动态路由匹配" class="headerlink" title="带参数的动态路由匹配"></a>带参数的动态路由匹配</h3><p>很多时候需要将给定匹配模式的路由映射到同一个组件中。例如有一个<code>User</code>组件，它应该对所有用户进行渲染，但用户ID不同。在Vue Router中，可以在路径中使用一个动态字段来实现，该字段称之为路径参数：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> User<span class="token operator">=</span><span class="token punctuation">&#123;</span>
  template<span class="token operator">:</span><span class="token string">'&lt;div>User&lt;/div>'</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//这些都会传递给createRouter</span>
<span class="token keyword">const</span> routes<span class="token operator">=</span><span class="token punctuation">[</span>
  <span class="token comment">//动态字段以冒号开始</span>
  <span class="token punctuation">&#123;</span>path<span class="token operator">:</span><span class="token string">'/users/:id'</span><span class="token punctuation">,</span>component<span class="token operator">:</span>User<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这样不同用户的URL都会映射到同一个路由上。</p>
<p>路径参数用冒号<code>:</code>表示。当一个路由被匹配时，它的<code>params</code>的值将在每个组件中以<code>this.$route.params</code>的形式暴露出来。因此可以通过更新<code>User</code>的模板来呈现当前的用户ID：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> User<span class="token operator">=</span><span class="token punctuation">&#123;</span>
    template<span class="token operator">:</span><span class="token string">'&lt;div>User&#123;&#123;$route.params.id&#125;&#125;&lt;/div>'</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>可以在同一个路由中设置有多个路径参数，它们会映射到<code>$route.params</code>上的相应字段上。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">匹配模式</th>
<th>匹配路径</th>
<th style="text-align:left">$route.params</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">/users/:username</td>
<td>/users/eduardo</td>
<td style="text-align:left"><code>&#123; username: &#39;eduardo&#39; &#125;</code></td>
</tr>
<tr>
<td style="text-align:left">/users/:username/posts/:postId</td>
<td>/users/eduardo/posts/123</td>
<td style="text-align:left"><code>&#123; username: &#39;eduardo&#39;, postId: &#39;123&#39; &#125;</code></td>
</tr>
</tbody>
</table>
</div>
<p>除了<code>$route.params</code>之外，<code>route</code>对象还公开了其他有用的信息，如<code>route.query</code>（若URL中存在参数）、<code>$route.hash</code>等。</p>
<h3 id="相应路由参数的变化"><a href="#相应路由参数的变化" class="headerlink" title="相应路由参数的变化"></a>相应路由参数的变化</h3><p>使用带有参数的路由时需要注意的时，当用户从<code>/users/johnny</code>导航到<code>/users/jolyne</code>时，<strong>相同的组件实例将会被重复使用，这也意味着组件的生命周期钩子不会被调用。</strong></p>
<p>要对同一个组件中参数的变化做出相应，可以用watch <code>$route</code>对象上的任意属性，如下列代码中是<code>$route.params</code>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> User<span class="token operator">=</span><span class="token punctuation">&#123;</span>
  template<span class="token operator">:</span><span class="token string">'...'</span><span class="token punctuation">,</span>
  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$watch</span><span class="token punctuation">(</span>
      <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>params<span class="token punctuation">,</span>
      <span class="token punctuation">(</span><span class="token parameter">toParams<span class="token punctuation">,</span>previousParams</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
        <span class="token comment">//对路由变化做出响应</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>或使用<code>beforeRouteUpdate</code>导航守卫，也可以取消导航：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> User<span class="token operator">=</span><span class="token punctuation">&#123;</span>
  template<span class="token operator">:</span><span class="token string">'...'</span><span class="token punctuation">,</span>
  <span class="token keyword">async</span> <span class="token function">beforeRouteUpdate</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span><span class="token keyword">from</span></span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token comment">//对路由变化做出响应</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>userData<span class="token operator">=</span><span class="token keyword">await</span> <span class="token function">fetchUser</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span>params<span class="token punctuation">.</span>id<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="捕获所有路由或404-Not-found路由"><a href="#捕获所有路由或404-Not-found路由" class="headerlink" title="捕获所有路由或404 Not found路由"></a>捕获所有路由或404 Not found路由</h3><p>常规参数只匹配url片段之间的字符，用<code>/</code>分隔。若想匹配任意路径，可使用自定义的路径参数正则表达式，在路径参数后面的括号中加入正则表达式：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> routes<span class="token operator">=</span><span class="token punctuation">[</span>
  <span class="token comment">//将匹配所有内容并将其放在$route.params.pathMatch下</span>
  <span class="token comment">//pathMatch标记为可选可重复,可以在需要时将path拆分成数组,直接导航到路由</span>
  <span class="token punctuation">&#123;</span>path<span class="token operator">:</span><span class="token string">'/:pathMatch(.*)*'</span><span class="token punctuation">,</span>name<span class="token operator">:</span><span class="token string">'NotFound'</span><span class="token punctuation">,</span>component<span class="token operator">:</span>NotFound<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token comment">//将匹配以/user-开头的所有内容并将其放在$route.params.afterUser下</span>
  <span class="token punctuation">&#123;</span>path<span class="token operator">:</span><span class="token string">'/user-:afterUser(.*)'</span><span class="token punctuation">,</span>component<span class="token operator">:</span>UserGeneric<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  name<span class="token operator">:</span><span class="token string">'NotFound'</span><span class="token punctuation">,</span>
  <span class="token comment">//保留当前路径并删除第一个字符,以避免目标URL以//开头</span>
  params<span class="token operator">:</span><span class="token punctuation">&#123;</span>pathMatch<span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>path<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token comment">//保留现有的查询和hash值</span>
  query<span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>query<span class="token punctuation">,</span>
  hash<span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>hash<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="高级匹配模式"><a href="#高级匹配模式" class="headerlink" title="高级匹配模式"></a>高级匹配模式</h3><p>Vue Router使用自己的路径匹配语法，它支持许多高级匹配模式，如可选的参数，零或多个/一个或多个，甚至是自定义的正则匹配规则。</p>
<h2 id="路由的匹配语法"><a href="#路由的匹配语法" class="headerlink" title="路由的匹配语法"></a>路由的匹配语法</h2><h3 id="在参数中自定义正则"><a href="#在参数中自定义正则" class="headerlink" title="在参数中自定义正则"></a>在参数中自定义正则</h3><p>当定义像<code>:userId</code>这样的参数时，在内部使用以下正则<code>([^/]+)</code>（至少有一个字符不是斜杠<code>/</code>）来从URL中提取参数。这个方法很好用，除非是需要根据参数的内容来区分两个路由，此时最简单的方法是在路径中添加一个静态部分来区分它们：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> routes<span class="token operator">=</span><span class="token punctuation">[</span>
  <span class="token comment">//匹配/0/3549</span>
  <span class="token punctuation">&#123;</span>path<span class="token operator">:</span><span class="token string">'/o/:orderId'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token comment">//匹配/p/books</span>
  <span class="token punctuation">&#123;</span>path<span class="token operator">:</span><span class="token string">'/p/:productName'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>但在一些情况下，并不想添加静态的<code>/o</code>、<code>/p</code>部分。由于<code>orderId</code>总是一个数字，而<code>productName</code>可以是任何东西，因此可以在括号中为参数指定一个自定义的正则：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> routes<span class="token operator">=</span><span class="token punctuation">[</span>
  <span class="token comment">// /:orderId只匹配数字</span>
  <span class="token comment">//'\\dd'是为了确保反斜杠能被转义出来</span>
  <span class="token punctuation">&#123;</span>path<span class="token operator">:</span><span class="token string">'/:orderId(\\d+)'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token comment">// /:productName匹配其他任何内容</span>
  <span class="token punctuation">&#123;</span>path<span class="token operator">:</span><span class="token string">'/:productName'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="可重复的参数"><a href="#可重复的参数" class="headerlink" title="可重复的参数"></a>可重复的参数</h3><p>若需要匹配具有多个部分的路由，如<code>/first/second/third</code>，则应该使用<code>*</code>（0个或多个）和<code>+</code>（1个或多个）将参数标记为可重复：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> routes<span class="token operator">=</span><span class="token punctuation">[</span>
  <span class="token comment">//匹配1个以上的参数,如/one,/one/two,/one/two/three等</span>
  <span class="token punctuation">&#123;</span>path<span class="token operator">:</span><span class="token string">'/:chapters+'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token comment">//匹配0个以上的参数,如/,/one,/one/two,/one/two/three等</span>
  <span class="token punctuation">&#123;</span>path<span class="token operator">:</span><span class="token string">'/:chapters*'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这将是提供一个参数数组而不是一个字符串，并且在使用命名路由时也需要传递一个数组：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//给定&#123;path:'/:chapters*',name:'chapters'&#125;,</span>
router<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">'chapters'</span><span class="token punctuation">,</span>params<span class="token operator">:</span><span class="token punctuation">&#123;</span>chapters<span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>href<span class="token comment">//产生路由/</span>
router<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">'chapters'</span><span class="token punctuation">,</span>params<span class="token operator">:</span><span class="token punctuation">&#123;</span>chapters<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>href<span class="token comment">//产生路由/a/b</span>
<span class="token comment">//给定&#123;path:'/:chapters+',name:'chapters'&#125;,</span>
router<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">'chapters'</span><span class="token punctuation">,</span>params<span class="token operator">:</span><span class="token punctuation">&#123;</span>chapters<span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>href<span class="token comment">//chapters为空,抛出错误</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这些也可以通过右括号后添加它们与自定义正则结合使用：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> routes<span class="token operator">=</span><span class="token punctuation">[</span>
  <span class="token comment">//只匹配1个以上的数字,如/1,/1/2,/1/2/3等</span>
  <span class="token punctuation">&#123;</span>path<span class="token operator">:</span><span class="token string">'/:chapters(\\d+)+'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token comment">//匹配0个以上的数字,如/,/1,/1/2,/1/2/3等</span>
  <span class="token punctuation">&#123;</span>path<span class="token operator">:</span><span class="token string">'/:chapters(\\d+)*'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="Sensitive与strict路由配置"><a href="#Sensitive与strict路由配置" class="headerlink" title="Sensitive与strict路由配置"></a>Sensitive与strict路由配置</h3><p>默认情况下，所有路由是不区分大小写的，且能匹配带有或不带有尾部斜线的路由。这种行为可以通过<code>sensitive</code>和<code>strict</code>选项来修改，它们既可以应用在整个全局路由上，又可以应用在当前路由上：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> router<span class="token operator">=</span><span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  history<span class="token operator">:</span><span class="token function">createWebHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  routes<span class="token operator">:</span><span class="token punctuation">[</span>
    <span class="token comment">//匹配/users/zhangsan</span>
    <span class="token comment">/*
    当strict:true时,不匹配/users/zhangsan/
    当sensitive:true时,不匹配/Users/zhangsan
    */</span>
    <span class="token punctuation">&#123;</span>path<span class="token operator">:</span><span class="token string">'/users/:id'</span><span class="token punctuation">,</span>sensitive<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token comment">//匹配/users,/Users,以及/users/42,不匹配/users/或users/42/</span>
    <span class="token punctuation">&#123;</span>path<span class="token operator">:</span><span class="token string">'/users/:id?'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span>
  strict<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//应用于所有路由</span>
  sensitive<span class="token operator">:</span><span class="token boolean">true</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="可选参数"><a href="#可选参数" class="headerlink" title="可选参数"></a>可选参数</h3><p>也可以通过使用<code>?</code>修饰符（0个或1个）将一个参数标记为可选：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> routers<span class="token operator">=</span><span class="token punctuation">[</span>
  <span class="token comment">//匹配/users和/users/zhangsan</span>
  <span class="token punctuation">&#123;</span>path<span class="token operator">:</span><span class="token string">'/users/:userId?'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token comment">//匹配/users和/users/42</span>
  <span class="token punctuation">&#123;</span>path<span class="token operator">:</span><span class="token string">'/users/:userID(\\d)?'</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="命名路由"><a href="#命名路由" class="headerlink" title="命名路由"></a>命名路由</h2><p>除了<code>path</code>外，还可以为任何路由提供<code>name</code>。命名路由有以下优点：</p>
<ul>
<li>没有硬编码的URL</li>
<li><code>params</code>的自动编码/解码</li>
<li>防止在URL中出现打字错误</li>
<li>绕过路径排序（如显示1个）</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> route<span class="token operator">=</span><span class="token punctuation">[</span>
  <span class="token punctuation">&#123;</span>
    path<span class="token operator">:</span><span class="token string">'/user/:username'</span><span class="token punctuation">,</span>
    name<span class="token operator">:</span><span class="token string">'user'</span><span class="token punctuation">,</span>
    component<span class="token operator">:</span>User<span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>链接一个命名路由，可以向<code>router-link</code>组件的<code>to</code>属性传递一个对象：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;name:<span class="token punctuation">'</span>user<span class="token punctuation">'</span>,params:&#123;username:<span class="token punctuation">'</span>lisi<span class="token punctuation">'</span>&#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>User<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>
<span class="token comment">&lt;!-- 等价于 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">'user'</span><span class="token punctuation">,</span>params<span class="token operator">:</span><span class="token punctuation">&#123;</span>username<span class="token operator">:</span><span class="token string">'lisi'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token comment">&lt;!-- 两种方法路由都将导航到路径/user/lisi中 --></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h3><p>通过Vue Router可以使用嵌套路由配置来对于应用程序的多层嵌套组件结构：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token comment">&lt;!-- 这是一个顶层的router-view,其渲染顶层路由匹配的组件 --></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">const</span> User<span class="token operator">=</span><span class="token punctuation">&#123;</span>
  <span class="token comment">//被渲染的组件中包含自己嵌套的router-view</span>
  template<span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
    &lt;div class="User">
      &lt;h2>User&#123;&#123;$route.params.id&#125;&#125;&lt;/h2>
      &lt;router-view>&lt;/router-view>
    &lt;/div>
      </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//这些传递给createRouter</span>
<span class="token keyword">const</span> routes<span class="token operator">=</span><span class="token punctuation">[</span>
  <span class="token punctuation">&#123;</span>
    <span class="token comment">//当/user/:id/profile匹配成功时,UserProfile将被渲染到User的router-view内部</span>
    path<span class="token operator">:</span><span class="token string">'/user/:id'</span><span class="token punctuation">,</span>
    component<span class="token operator">:</span>User<span class="token punctuation">,</span>
    <span class="token comment">//将组件渲染到嵌套的router-view中  </span>
    children<span class="token operator">:</span><span class="token punctuation">[</span>
      <span class="token punctuation">&#123;</span>
        path<span class="token operator">:</span><span class="token string">'profile'</span><span class="token punctuation">,</span>
        component<span class="token operator">:</span>UserProfile<span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#123;</span>
        <span class="token comment">//当/user/:id/posts匹配成功时,UserPosts将被渲染到User的router-view内部</span>
        path<span class="token operator">:</span><span class="token string">'posts'</span><span class="token punctuation">,</span>
        component<span class="token operator">:</span>UserPosts<span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>注意：以<code>/</code>开头的嵌套路径将被视为根路径，这便允许利用组件嵌套而不必使用嵌套URL。</strong></p>
<p>上述代码中<code>children</code>的配置只是另一个路由数组。因此可以根据需要，不断地嵌套视图。</p>
<p>由于没有匹配到嵌套路由，当访问<code>/user/eduardo</code>时，在<code>User</code>的<code>router-view</code>里什么都不会呈现。若想在那里渲染一些东西，可以提供一个空的嵌套路径：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> routes<span class="token operator">=</span><span class="token punctuation">[</span>
  <span class="token punctuation">&#123;</span>
    path<span class="token operator">:</span><span class="token string">'/user/:id'</span><span class="token punctuation">,</span>
    component<span class="token operator">:</span>User<span class="token punctuation">,</span>
    children<span class="token operator">:</span><span class="token punctuation">[</span>
      <span class="token punctuation">&#123;</span> <span class="token comment">//当/user/:id匹配成功时,UserHome将被渲染到User的router-view内部</span>
        path<span class="token operator">:</span><span class="token string">''</span><span class="token punctuation">,</span>
        component<span class="token operator">:</span>UserHome
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token comment">//其他子路由</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="嵌套命名路由"><a href="#嵌套命名路由" class="headerlink" title="嵌套命名路由"></a>嵌套命名路由</h3><p>在处理命名路由时，通常会给子路由命名如下：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> routes<span class="token operator">=</span><span class="token punctuation">[</span>
  <span class="token punctuation">&#123;</span>
    path<span class="token operator">:</span><span class="token string">'/user/:id'</span><span class="token punctuation">,</span>
    component<span class="token operator">:</span>User<span class="token punctuation">,</span>
    children<span class="token operator">:</span><span class="token punctuation">[</span>
      <span class="token punctuation">&#123;</span> <span class="token comment">//只有子路由具有名称</span>
        path<span class="token operator">:</span><span class="token string">''</span><span class="token punctuation">,</span>
        name<span class="token operator">:</span><span class="token string">'user'</span><span class="token punctuation">,</span>
        component<span class="token operator">:</span>UserHome
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这将确保导航到<code>/user/:id</code>时始终显示嵌套路由。</p>
<p>若希望<strong>导航到命名路由而不导航到嵌套路由</strong>，还可以<strong>命名父路由</strong>，但要<strong>注意重新加载页面将始终显示嵌套的子路由</strong>，这是以为它被指向路径<code>/users/:id</code>的导航，而不是命名路由：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> routes<span class="token operator">=</span><span class="token punctuation">[</span>
  <span class="token punctuation">&#123;</span>
    path<span class="token operator">:</span><span class="token string">'/user/:id'</span><span class="token punctuation">,</span>
    name<span class="token operator">:</span><span class="token string">'user-parent'</span><span class="token punctuation">,</span>
    component<span class="token operator">:</span>User<span class="token punctuation">,</span>
    children<span class="token operator">:</span><span class="token punctuation">[</span>
      <span class="token punctuation">&#123;</span> 
        path<span class="token operator">:</span><span class="token string">''</span><span class="token punctuation">,</span>
        name<span class="token operator">:</span><span class="token string">'user'</span><span class="token punctuation">,</span>
        component<span class="token operator">:</span>UserHome
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="命名视图"><a href="#命名视图" class="headerlink" title="命名视图"></a>命名视图</h2><p>命名视图可以同时展示多个视图而不是嵌套展示。一个界面中可以拥有多个单独命名的视图，而不是只有一个单独的出口。若<code>router-view</code>没有设置名字，则默认为<code>default</code>。</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>view left-sidebar<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>LeftSidevar<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>view main-content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>view right-sidebar<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>RightSidebar<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>一个视图使用一个组件渲染。因此在同一个路由下，多个视图就需要多个组件：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> router<span class="token operator">=</span><span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  history<span class="token operator">:</span><span class="token function">createWebHashHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  routes<span class="token operator">:</span><span class="token punctuation">[</span>
    <span class="token punctuation">&#123;</span>
      path<span class="token operator">:</span><span class="token string">'/'</span><span class="token punctuation">,</span>
      components<span class="token operator">:</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">default</span><span class="token operator">:</span>Home<span class="token punctuation">,</span>
        <span class="token comment">//LeftSidebar:LeftSidebar的缩写</span>
        LeftSidebar<span class="token punctuation">,</span>
        <span class="token comment">//与&lt;router-view>上的name属性相匹配</span>
        RightSidebar<span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="嵌套命名视图"><a href="#嵌套命名视图" class="headerlink" title="嵌套命名视图"></a>嵌套命名视图</h3><p>当要实现切换路由的同时，其页面下的视图也要从一个<code>UserEmailsSubscriptions</code>切换成两个<code>UserProfile</code>和<code>UserProfilePreview</code>，便应使用命名视图来创建嵌套视图的布局：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">&#x2F;settings&#x2F;emails                                       &#x2F;settings&#x2F;profile
+-----------------------------------+                  +------------------------------+
| UserSettings                      |                  | UserSettings                 |
| +-----+-------------------------+ |                  | +-----+--------------------+ |
| | Nav | UserEmailsSubscriptions | |  +------------&gt;  | | Nav | UserProfile        | |
| |     +-------------------------+ |                  | |     +--------------------+ |
| |     |                         | |                  | |     | UserProfilePreview | |
| +-----+-------------------------+ |                  | +-----+--------------------+ |
+-----------------------------------+                  +------------------------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><code>Nav</code> 是一个常规组件</li>
<li><code>UserSettings</code> 是一个视图组件</li>
<li><code>UserEmailsSubscriptions</code>、<code>UserProfile</code>、<code>UserProfilePreview</code> 是嵌套的视图组件</li>
</ul>
<p><code>UserSetting</code>组件的<code>&lt;template&gt;</code>部分大致如下：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>User Settings<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>NavVar</span> <span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span> <span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>helper<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>通过这个路由配置来实现上述布局：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> router<span class="token operator">=</span><span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  routes<span class="token operator">:</span><span class="token punctuation">[</span>
    <span class="token punctuation">&#123;</span>
      path<span class="token operator">:</span><span class="token string">'/settings'</span><span class="token punctuation">,</span>
      component<span class="token operator">:</span>UserSettings<span class="token punctuation">,</span>
      children<span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span>
        path<span class="token operator">:</span><span class="token string">'emails'</span><span class="token punctuation">,</span>
        component<span class="token operator">:</span>UserEmailsSubscriptions
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span>
      path<span class="token operator">:</span><span class="token string">'profile'</span><span class="token punctuation">,</span>
      components<span class="token operator">:</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">default</span><span class="token operator">:</span>UserProfile<span class="token punctuation">,</span>
        helper<span class="token operator">:</span>UserProfilePreview
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">]</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="编程式导航"><a href="#编程式导航" class="headerlink" title="编程式导航"></a>编程式导航</h2><h3 id="使用router-push导航到不同的位置"><a href="#使用router-push导航到不同的位置" class="headerlink" title="使用router.push导航到不同的位置"></a>使用<code>router.push</code>导航到不同的位置</h3><p>若想要导航到不同的URL，可以使用<code>router.push</code>方法向history栈添加一个新的记录，当用户点击浏览器后退按钮时，会回到之前的URL。</p>
<p>当点击<code>&lt;router-link&gt;</code>时，内部会调用<code>router.push</code>这个方法。因此点击<code>&lt;router-link :to=&quot;...&quot;&gt;</code>便相当于调用<code>router.push(...)</code>：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>声明式</th>
<th>编程式</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&lt;router-link :to=&quot;...&quot;&gt;</code></td>
<td><code>router.push(...)</code></td>
</tr>
</tbody>
</table>
</div>
<p><strong>注意：</strong>在Vue实例中，可以通过<code>$router</code>访问路由实例，因此也可以在实例中调用<code>this.$router.push</code>。</p>
<p><code>router.push</code>方法的参数可以时一个字符串路径，或者一个描述地址的对象：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 字符串路径</span>
router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'/users/zhangsan'</span><span class="token punctuation">)</span>
<span class="token comment">// 带有路径的对象</span>
router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>path<span class="token operator">:</span><span class="token string">'/users/zhangsan'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token comment">// 命名的路由，并加上参数，让路由建立url</span>
<span class="token comment">// 注意params不能与path一起使用，若提供了path,params会被忽略，而query不会</span>
router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">'user'</span><span class="token punctuation">,</span>params<span class="token operator">:</span><span class="token punctuation">&#123;</span>username<span class="token operator">:</span><span class="token string">'zhangsan'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token comment">// 带查询参数，其结果是/register?plan=private</span>
router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>path<span class="token operator">:</span><span class="token string">'/register'</span><span class="token punctuation">,</span>query<span class="token operator">:</span><span class="token punctuation">&#123;</span>plan<span class="token operator">:</span><span class="token string">'private'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token comment">// 带hash，其结果是/about#team</span>
router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>path<span class="token operator">:</span><span class="token string">'/about'</span><span class="token punctuation">,</span>hash<span class="token operator">:</span><span class="token string">'#team'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> username<span class="token operator">=</span><span class="token string">'zhangsan'</span>
<span class="token comment">// 可以手动建立url，但必须自己处理编码</span>
router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/user/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>username<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token comment">//其结果为/user/zhangsan</span>
router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>path<span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/user/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>username<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//其结果为/user/zhangsan</span>
<span class="token comment">// 使用name和params从自动url编码中获益</span>
router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">'user'</span><span class="token punctuation">,</span>params<span class="token operator">:</span><span class="token punctuation">&#123;</span>username<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//其结果为/user/zhangsan</span>
<span class="token comment">//params不能与path一起使用</span>
router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>path<span class="token operator">:</span><span class="token string">'/user'</span><span class="token punctuation">,</span>params<span class="token operator">:</span><span class="token punctuation">&#123;</span>username<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//其结果为/user</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>当指定<code>params</code>时，可提供<code>string</code>或<code>number</code>参数（或对于可重复从参数可以提供一个数组）。任何其他类型（如<code>undefined</code>、<code>false</code>等）都将被自动字符串化。对于可选参数，可以提供一个空字符串(<code>&quot;&quot;</code>)来跳过它。</p>
<p>由于属性<code>to</code>与<code>router.push</code>接收的对象种类相同，一次你两者的规则相同。</p>
<p><code>router.push</code>和所有其他导航方法都会返回一个Promise，等到导航完成后才知道是成功还是失败。</p>
<h3 id="使用router-replace替换当前位置"><a href="#使用router-replace替换当前位置" class="headerlink" title="使用router.replace替换当前位置"></a>使用<code>router.replace</code>替换当前位置</h3><p><code>router.replace</code>与<code>router.push</code>不同的是，<code>router.replace</code>在导航时不会向history添加新记录，它直接取代了当前的条目。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>声明式</th>
<th>编程式</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&lt;router-link :to=&quot;...&quot; replace&gt;</code></td>
<td><code>router.replace(...)</code></td>
</tr>
</tbody>
</table>
</div>
<p>可以直接使用<code>router.replace</code>，也可以在传递给<code>router.push</code>的<code>routeLocation</code>中增加一个属性<code>replace:true</code>。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">router<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>path<span class="token operator">:</span><span class="token string">'/home'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token comment">//等价于</span>
router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>path<span class="token operator">:</span><span class="token string">'/home'</span><span class="token punctuation">,</span>replace<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="使用router-go横跨历史"><a href="#使用router-go横跨历史" class="headerlink" title="使用router.go横跨历史"></a>使用<code>router.go</code>横跨历史</h3><p><code>router.go</code>采用一个整数作为参数，表示在历史堆栈中前进或后退多少步：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 向前移动1条记录，与router.forward()作用相同</span>
router<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token comment">// 向后移动1条记录，与router.back()作用相同</span>
router<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token comment">// 前进3条记录</span>
router<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>

<span class="token comment">// 若没有那么多记录，静默失败，即不执行也不报错</span>
router<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">)</span>
router<span class="token punctuation">.</span><span class="token function">gi</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="重定向和别名"><a href="#重定向和别名" class="headerlink" title="重定向和别名"></a>重定向和别名</h2><h3 id="通过redirect属性实现重定向"><a href="#通过redirect属性实现重定向" class="headerlink" title="通过redirect属性实现重定向"></a>通过<code>redirect</code>属性实现重定向</h3><p>通过<code>routes</code>实现重定向：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 将/home重定向到/</span>
<span class="token keyword">const</span> routes<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span>path<span class="token operator">:</span><span class="token string">'home'</span><span class="token punctuation">,</span>redirect<span class="token operator">:</span><span class="token string">'/'</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span>
<span class="token comment">// 重定向的目标也可以是一个命名的路由</span>
<span class="token keyword">const</span> routes<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span>path<span class="token operator">:</span><span class="token string">'/home'</span><span class="token punctuation">,</span>redirect<span class="token operator">:</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">'homepage'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span>

<span class="token comment">// 重定向的目标还可以是一个方法，动态返回重定向目标</span>
<span class="token keyword">const</span> routes<span class="token operator">=</span><span class="token punctuation">[</span>
  <span class="token punctuation">&#123;</span>
    <span class="token comment">// 将/search/screens重定向到/search?q=screens</span>
    path<span class="token operator">:</span><span class="token string">'search/:searchText'</span><span class="token punctuation">,</span>
    <span class="token function-variable function">redirect</span><span class="token operator">:</span> <span class="token parameter">to</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
      <span class="token comment">//方法接收目标路由作为参数</span>
      <span class="token comment">//return 重定向的字符串路径/路径对象</span>
      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>path<span class="token operator">:</span><span class="token string">'/search'</span><span class="token punctuation">,</span>query<span class="token operator">:</span><span class="token punctuation">&#123;</span>q<span class="token operator">:</span>to<span class="token punctuation">.</span>parpams<span class="token punctuation">.</span>searchText<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    path<span class="token operator">:</span><span class="token string">'/search'</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>在写<code>redirect</code>时，可以省略component配置。</strong>由于组件从来没有被直接渲染过，因此没有组件要渲染，<strong>嵌套路由除外</strong>。若一个路由有<code>children</code>和<code>redirect</code>属性，那么它也应该有<code>component</code>属性。</p>
<p>导航守卫没有应用在跳转路由上，仅应用在其目标上。在上述代码中，在<code>/home</code>路由中添加<code>beforeEnter</code>守卫也不会有任何效果。</p>
<h3 id="相对重定向"><a href="#相对重定向" class="headerlink" title="相对重定向"></a>相对重定向</h3><p>即重定向到相对位置：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> routes<span class="token operator">=</span><span class="token punctuation">[</span>
  <span class="token punctuation">&#123;</span>
    <span class="token comment">// 将/users/123/posts重定向到/users/123/profile</span>
    path<span class="token operator">:</span><span class="token string">'users/:id/posts'</span><span class="token punctuation">,</span>
    <span class="token function-variable function">redirect</span><span class="token operator">:</span> <span class="token parameter">to</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
      <span class="token comment">//方法接收目标路由作为参数</span>
      <span class="token comment">//相对位置不以/开头</span>
      <span class="token keyword">return</span> <span class="token string">'profile'</span>
      <span class="token comment">//或是return &#123;path:'profile'&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="使用alias设置别名"><a href="#使用alias设置别名" class="headerlink" title="使用alias设置别名"></a>使用alias设置别名</h3><p>将<code>/</code>别名为<code>/home</code>，便意味着当用户访问<code>/home</code>时，URL仍然是<code>/home</code>，但会被匹配为用户正在访问<code>/</code>：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> routes<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span>path<span class="token operator">:</span><span class="token string">'/'</span><span class="token punctuation">,</span>component<span class="token operator">:</span>Homepage<span class="token punctuation">,</span>alias<span class="token operator">:</span><span class="token string">'/home'</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>通过别名可以自由地将UI结构映射到一个任意的URL，而不受配置的嵌套结构的限制。</p>
<p>别名以<code>/</code>开头，以使嵌套路径中的路径成为绝对路径，也可以用一个数组来提供多个别名：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> routes<span class="token operator">=</span><span class="token punctuation">[</span>
  <span class="token punctuation">&#123;</span>
    path<span class="token operator">:</span><span class="token string">'/users'</span><span class="token punctuation">,</span>
    component<span class="token operator">:</span>UsersLayout<span class="token punctuation">,</span>
    children<span class="token operator">:</span><span class="token punctuation">[</span>
      <span class="token comment">//为/users、/users/list、/people这3个URL呈现UserList</span>
      <span class="token punctuation">&#123;</span>path<span class="token operator">:</span><span class="token string">''</span><span class="token punctuation">,</span>component<span class="token operator">:</span>UserList<span class="token punctuation">,</span>alias<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'/people'</span><span class="token punctuation">,</span><span class="token string">'list'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>若路由有参数，则要确保在任何绝对别名中包含它们：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> routes<span class="token operator">=</span><span class="token punctuation">[</span>
  <span class="token punctuation">&#123;</span>
    path<span class="token operator">:</span><span class="token string">'/users:id'</span><span class="token punctuation">,</span>
    component<span class="token operator">:</span>UsersByIdLayout<span class="token punctuation">,</span>
    children<span class="token operator">:</span><span class="token punctuation">[</span>
      <span class="token comment">//为/users/123、/users/123/profile、/123这3个URL呈现UserDetails</span>
      <span class="token punctuation">&#123;</span>path<span class="token operator">:</span><span class="token string">'profile'</span><span class="token punctuation">,</span>component<span class="token operator">:</span>UserDetails<span class="token punctuation">,</span>alias<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'/:id'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>关于SEO的注意事项：使用别名是，一定要定义规范链接</strong></p>
<h2 id="路由组件传参"><a href="#路由组件传参" class="headerlink" title="路由组件传参"></a>路由组件传参</h2><h3 id="将props传递给路由组件"><a href="#将props传递给路由组件" class="headerlink" title="将props传递给路由组件"></a>将props传递给路由组件</h3><p>在组件中使用<code>$route</code>会与路由紧密耦合，由于它只能用于特定的URL，这将限制了组件的灵活性。通过配置<code>props</code>来解除这种行为：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> User<span class="token operator">=</span><span class="token punctuation">&#123;</span>
  template<span class="token operator">:</span><span class="token string">'&lt;div>User&#123;&#123;$route.params.id&#125;&#125;&lt;/div>'</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> routes<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span>path<span class="token operator">:</span><span class="token string">'/user/:id'</span><span class="token punctuation">,</span>component<span class="token operator">:</span>User<span class="token punctuation">&#125;</span><span class="token punctuation">]</span>

<span class="token comment">//可以通过配置props将代码替换成如下所示</span>
<span class="token keyword">const</span> User<span class="token operator">=</span><span class="token punctuation">&#123;</span>
  <span class="token comment">//添加一个与路由参数完全相同的prop名</span>
  props<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  template<span class="token operator">:</span><span class="token string">'&lt;div>User&#123;&#123;id&#125;&#125;&lt;/div>'</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> routes<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span>path<span class="token operator">:</span><span class="token string">'/user/:id'</span><span class="token punctuation">,</span>component<span class="token operator">:</span>User<span class="token punctuation">,</span>props<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这允许在任何地方使用该组件，使得该组件更容易重用和测试。</p>
<h3 id="布尔模式"><a href="#布尔模式" class="headerlink" title="布尔模式"></a>布尔模式</h3><p>当<code>props</code>设置为<code>true</code>时，<code>route.params</code>将被设置为组件的props。</p>
<h3 id="命名视图-1"><a href="#命名视图-1" class="headerlink" title="命名视图"></a>命名视图</h3><p>对于有命名视图的路由，则必须为每个命名视图定义<code>props</code>配置：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> routes<span class="token operator">=</span><span class="token punctuation">[</span>
  <span class="token punctuation">&#123;</span>
    path<span class="token operator">:</span><span class="token string">'/user/:id'</span><span class="token punctuation">,</span>
    components<span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token keyword">default</span><span class="token operator">:</span>User<span class="token punctuation">,</span>sidebar<span class="token operator">:</span>Sidebar<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    props<span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token keyword">default</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>sidebar<span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="对象模式"><a href="#对象模式" class="headerlink" title="对象模式"></a>对象模式</h3><p>当<code>props</code>是一个对象时，它将原样设置为组件props。当组件props是静态时很有用：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> routes<span class="token operator">=</span><span class="token punctuation">[</span>
  <span class="token punctuation">&#123;</span>
    path<span class="token operator">:</span><span class="token string">'/promotion/from-newsletter'</span><span class="token punctuation">,</span>
    components<span class="token operator">:</span>Promotion<span class="token punctuation">,</span>
    props<span class="token operator">:</span><span class="token punctuation">&#123;</span>newsletterPopup<span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="函数模式"><a href="#函数模式" class="headerlink" title="函数模式"></a>函数模式</h3><p>创建一个返回props的函数，可以将参数转换为其他类型，将静态值与基于路由的值相结合等：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> routes<span class="token operator">=</span><span class="token punctuation">[</span>
  <span class="token punctuation">&#123;</span>
    path<span class="token operator">:</span><span class="token string">'/search'</span><span class="token punctuation">,</span>
    components<span class="token operator">:</span>SearchUser<span class="token punctuation">,</span>
    <span class="token function-variable function">props</span><span class="token operator">:</span><span class="token parameter">route</span><span class="token operator">=></span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>query<span class="token operator">:</span>route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>q<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>URL<code>/search?q=vue</code>将传递<code>&#123;query:&#39;vue&#39;&#125;</code>作为props传给<code>SearchUser</code>组件。</p>
<p>尽可能保持props函数为无状态的，因此它只会在路由发生变化时起作用。若需要状态来定义props，建议使用包装组件。</p>
<h2 id="不同的历史记录模式"><a href="#不同的历史记录模式" class="headerlink" title="不同的历史记录模式"></a>不同的历史记录模式</h2><p>创建路由实例时，允许在不同的历史模式中选中<code>history</code>配置。</p>
<h3 id="Hash模式"><a href="#Hash模式" class="headerlink" title="Hash模式"></a>Hash模式</h3><p>hash模式是用<code>createWebHashHistory()</code>创建的：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span><span class="token punctuation">&#123;</span>createRouter<span class="token punctuation">,</span>createWebHashHistory<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue-router'</span>

<span class="token keyword">const</span> router<span class="token operator">=</span><span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  history<span class="token operator">:</span><span class="token function">createWebHashHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  routes<span class="token operator">:</span><span class="token punctuation">[</span>
    <span class="token comment">//...</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>它在内部传递的实际URL之前使用了一个哈希字符（<code>#</code>）。由于这部分URL从未被发送到服务器中，因此不需要再服务器上进行任何特殊处理。<strong>不过它在SEO中确实有不会的影响。若担心这个问题，可以使用HTML5模式。</strong></p>
<h3 id="HTML5模式"><a href="#HTML5模式" class="headerlink" title="HTML5模式"></a>HTML5模式</h3><p>用<code>createWebHistory()</code>创建HTML5模式，推荐使用这个模式：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span><span class="token punctuation">&#123;</span>createRouter<span class="token punctuation">,</span>createWebHistory<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue-router'</span>

<span class="token keyword">const</span> router<span class="token operator">=</span><span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  history<span class="token operator">:</span><span class="token function">createWebHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  routes<span class="token operator">:</span><span class="token punctuation">[</span>
    <span class="token comment">//...</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>当应用是单页的客户端应用时，若没有适当的服务器配置，用户在浏览器中直接访问URL会得到一个404错误。</p>
<p>要想解决这个问题，便是要在服务器上添加一个简单的回退路由。URL不匹配任何静态资源，则应提供与应用程序中<code>index.html</code>相同的页面。</p>
<h3 id="服务器配置实例"><a href="#服务器配置实例" class="headerlink" title="服务器配置实例"></a>服务器配置实例</h3><p>假设正在从根目录提供服务。若要部署到子目录中，则应使用Vue CLI的<code>publicPath</code>配置和相关路由的<code>base</code>属性。除此之外还需要调整服务端，使其使用子目录而不是根目录。</p>
<p>如在原生Node.js中，应调整为如下：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> http<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> fs<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> httpPort<span class="token operator">=</span><span class="token number">80</span>

http
  <span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>res</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">,</span><span class="token string">'utf-8'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span>content</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'We cannot open "index.html" file.'</span><span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span>
      res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>
        <span class="token string">'Content-Type'</span><span class="token operator">:</span><span class="token string">'text/html;charset=utf-8'</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
      res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>httpPort<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Server listening on:http://localhost:%s'</span><span class="token punctuation">,</span>httpPort<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>配置完成后，所有未找到的路径都会显示<code>index.html</code>文件，因此应该在Vue应用程序中实现一个万能路由来显示404页面：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> router<span class="token operator">=</span><span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  history<span class="token operator">:</span><span class="token function">createWebHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  routes<span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span>path<span class="token operator">:</span><span class="token string">'/:pathMatch(.*)'</span><span class="token punctuation">,</span>component<span class="token operator">:</span>NotFoundComponent<span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>若使用的是Node.js服务器，则可以通过在服务器端使用路由来匹配URL，若没有匹配到路由，则用404来回应，从而实现回退。</p>
<h1 id="内在"><a href="#内在" class="headerlink" title="内在"></a>内在</h1><h2 id="深入响应式原理"><a href="#深入响应式原理" class="headerlink" title="深入响应式原理"></a>深入响应式原理</h2><p>Vue最独特的特性之一是其非侵入性的响应式系统。数据模型仅仅是普通的JavaScript对象。当修改它们时，视图会进行更新。</p>
<h3 id="如何追踪变化"><a href="#如何追踪变化" class="headerlink" title="如何追踪变化"></a>如何追踪变化</h3><p>当一个普通的JavaScript对象传入Vue实例作为<code>data</code>选项式，Vue将遍历此对象的所有property并使用<code>Object.defineProperty</code>把这些property全部转为<strong>getter/setter</strong>。这些getter/setter对用户来说是不可见的。但在内部它们能够让Vue追踪依赖，并在property被访问和修改是同时变更。</p>
<p>需要注意的是，不同浏览器在控制台打印数据对象时，对getter/setter的格式化也不同。</p>
<p>每个组件实例都对应一个watcher实例，它会在组件渲染时把“接触”过的数据property记录为依赖，随后依赖项的setter触发时会通知watcher，从而使它关联的组件重新渲染。</p>
<h3 id="检测变化的注意事项"><a href="#检测变化的注意事项" class="headerlink" title="检测变化的注意事项"></a>检测变化的注意事项</h3><p>由于JavaScript的限制，Vue不能检测数组和对象的变化。但也还是有一些方法来回避这些限制并保证它们的响应性。</p>
<h4 id="对于对象"><a href="#对于对象" class="headerlink" title="对于对象"></a>对于对象</h4><p>Vue无法检测property的添加或移除。由于Vue会在初始化实例时对property执行getter/setter转化，因此property必须在<code>data</code>对象上存在，才能让Vue将他转换为响应式的。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> vm<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  data<span class="token operator">:</span><span class="token punctuation">&#123;</span>
    a<span class="token operator">:</span><span class="token number">1</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token comment">//vm.a是响应式的</span>

vm<span class="token punctuation">.</span>b<span class="token operator">=</span><span class="token number">2</span>
<span class="token comment">//vm.b是非响应式的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>对于已经创建的实例，Vue不允许动态添加根级别的响应式property，但可以使用<code>Vue.set(Object,propertName,value)</code>方法向嵌套对象添加响应式property，如：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>someObject<span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>除此之外还可以使用<code>vm.$set</code>实例方法，也是全局<code>Vue.set</code>方法的别名：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>someObject<span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>有时需要为已有对象赋值多个新property，若使用<code>Object.assign()</code>或<code>_.extend()</code>，则它们添加到对象上的新property不会触发更新。此时应该用原对象与要混合进入对象的property一起创建一个新的对象：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 代替Object.assign(this.someObject,&#123;a:1,b:2&#125;)</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>someObject<span class="token operator">=</span>Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>someObject<span class="token punctuation">,</span><span class="token punctuation">&#123;</span>a<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h4 id="对于数组"><a href="#对于数组" class="headerlink" title="对于数组"></a>对于数组</h4><p>Vue不能检测以下数组的变动：</p>
<ol>
<li>利用索引直接设置一个数组项，如<code>vm.items[indexOfItem]=newValue</code></li>
<li>修改数组长度，如<code>vm.items.length=newLength</code></li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> vm<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  data<span class="token operator">:</span><span class="token punctuation">&#123;</span>
    items<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token comment">// 非响应式的</span>
vm<span class="token punctuation">.</span>items<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'x'</span>
vm<span class="token punctuation">.</span>items<span class="token punctuation">.</span>length<span class="token operator">=</span><span class="token number">2</span>

<span class="token comment">// 响应式的</span>
<span class="token comment">//Vue.set方法设置数组项</span>
Vue<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>items<span class="token punctuation">,</span>indexOfItem<span class="token punctuation">,</span>newValue<span class="token punctuation">)</span>
<span class="token comment">//vm.$set实例方法设置数组项，是Vue.set方法的一个别名</span>
vm<span class="token punctuation">.</span><span class="token function">$set</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>items<span class="token punctuation">,</span>indexOfItem<span class="token punctuation">,</span>newValue<span class="token punctuation">)</span>
<span class="token comment">//Array.prototype.splice方法设置数组项</span>
vm<span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>indexOfItem<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>newValue<span class="token punctuation">)</span>

<span class="token comment">//splice方法设置数组长度</span>
vm<span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>newLength<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="声明响应式property"><a href="#声明响应式property" class="headerlink" title="声明响应式property"></a>声明响应式property</h3><p>由于Vue不允许动态添加根级响应式property，因此<strong>必须要在初始化实例之前声明所有根级响应式property，包括空值</strong>：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> vm<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  data<span class="token operator">:</span><span class="token punctuation">&#123;</span>
    <span class="token comment">//声明message为一个空值字符串</span>
    message<span class="token operator">:</span><span class="token string">''</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  template<span class="token operator">:</span><span class="token string">'&lt;div>&#123;&#123;message&#125;&#125;&lt;/div>'</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token comment">// 给message赋值</span>
vm<span class="token punctuation">.</span>message<span class="token operator">=</span><span class="token string">'Hello!'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>若未在<code>data</code>选项中声明<code>message</code>，Vue将警告渲染函数正在视图访问不存在的property。</p>
<h3 id="异步更新队列"><a href="#异步更新队列" class="headerlink" title="异步更新队列"></a>异步更新队列</h3><p>Vue在更新DOM时是异步执行的。只要侦听到数据变化，Vue将开启一个队列，并缓冲在同一事件循环中发生的所有数据变更。若同一个watcher被多次触发，其也只会被推入到队列中一次。</p>
<p>Vue在缓冲时去除重复数据避免了不必要的计算和DOM操作。然后在下一个事件循环的“tick”中，Vue刷新队列并执行实际（已去重后的）工作。Vue在内部对异步队列尝试使用原生的<code>Promise.then</code>、<code>MutationObserver</code>和<code>setImmediate</code>。若执行环境不支持，则会采用<code>setTimeout(fn,0)</code>代替。</p>
<p>为了在数据变化之后等待Vue完成更新DOM，可以在数据变化之后立即使用<code>Vue.nextTick(callback)</code>，这样回调函数将在DOM更新完成后被调用：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>example<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  &#123;&#123;message&#125;&#125;
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>
var vm=new Vue(&#123;
  el:'#example',
  data:&#123;
    message:'123'
  &#125;
&#125;)
vm.message='new message'//更改数据
console.log(vm.$el.textContent)//返回123
Vue.nextTick(function()&#123;
  console.log(vm.$el.textContent)//返回new message
&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在组件内使用<code>vm.$nextTick()</code>实例特别方便，因此它不需要全局<code>Vue</code>，且回调函数中的<code>this</code>将自动绑定在当前的Vue实例上：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>example<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>example-oi</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>example-oi</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'example-oi'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>
  <span class="token function-variable function">data</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span><span class="token punctuation">&#123;</span>
      message<span class="token operator">:</span><span class="token string">'未更新'</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  
  template<span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
    &lt;div>  
      &lt;button v-on:click="updateMessage">点击我更新文字&lt;/button>
      &lt;span>&#123;&#123;message&#125;&#125;&lt;/span>
    &lt;/div>  
  </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>
  methods<span class="token operator">:</span><span class="token punctuation">&#123;</span>
    <span class="token function-variable function">updateMessage</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token operator">=</span><span class="token string">'已更新'</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">.</span>textContent<span class="token punctuation">)</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">.</span>textContent<span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  el<span class="token operator">:</span><span class="token string">'#example'</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>因为<code>$nextTick()</code>返回一个<code>Promise</code>对象，因此可以使用新的ES2017 async/await 语法来完成相同的事情：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">methods<span class="token operator">:</span><span class="token punctuation">&#123;</span>
  <span class="token function-variable function">updateMessage</span><span class="token operator">:</span><span class="token keyword">async</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token operator">=</span><span class="token string">'已更新'</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">.</span>textContent<span class="token punctuation">)</span>
    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">.</span>textContent<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="vue-router路由进阶"><a href="#vue-router路由进阶" class="headerlink" title="vue-router路由进阶"></a>vue-router路由进阶</h1><h2 id="导航守卫"><a href="#导航守卫" class="headerlink" title="导航守卫"></a>导航守卫</h2><p>vue-router提供的导航守卫主要通过跳转或取消的方式来守卫导航。</p>
<h3 id="全局前置守卫"><a href="#全局前置守卫" class="headerlink" title="全局前置守卫"></a>全局前置守卫</h3><p>可以使用<code>router.beforeEach</code>注册一个全局前置守卫：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> router<span class="token operator">=</span><span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  <span class="token comment">//...</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span><span class="token keyword">from</span></span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
  <span class="token comment">//...</span>
  <span class="token comment">//返回false以取消导航</span>
  <span class="token keyword">return</span> <span class="token boolean">false</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>当一个导航触发时，全局前置守卫按照创建顺序调用。守卫是异步解析执行，此时导航在所有守卫resolve完之前，一直处于等待中。</p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>前端</category>
        <category>前端框架</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>前端框架之Vue.js（四）</title>
    <url>/2022/11/09/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
    <content><![CDATA[<h1 id="深入了解组件"><a href="#深入了解组件" class="headerlink" title="深入了解组件"></a>深入了解组件</h1><h2 id="组件注册"><a href="#组件注册" class="headerlink" title="组件注册"></a>组件注册</h2><h3 id="组件名"><a href="#组件名" class="headerlink" title="组件名"></a>组件名</h3><p>注册一个组件时，要给组件起名，如在全局注册中，组件名就是<code>Vue.component</code>的第一个参数：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Vue <span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'my-component-name'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>组件名应当遵守W3C规范中的自定义组件名（字母全小写且必须包含一个连字符）</p>
<h4 id="组件名大小写"><a href="#组件名大小写" class="headerlink" title="组件名大小写"></a>组件名大小写</h4><p>定义组件名的方式由两种：</p>
<ul>
<li>使用短横线分隔命名:my-component-name</li>
<li>使用首字母大写命名：MyComponentName</li>
</ul>
<p>两种命名法都可以使用，但需注意的是，直接在DOM（即非字符串的模板）中使用时，只有短横线分隔命名是有效的。</p>
<h3 id="全局注册"><a href="#全局注册" class="headerlink" title="全局注册"></a>全局注册</h3><p>使用全局注册的组件，在它们注册之后可以用在任何新创建的Vue根实例的模板中，在子组件的内部也可以相互使用。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Vue <span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'my-component-name'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>el<span class="token operator">:</span><span class="token string">'#app'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="局部注册"><a href="#局部注册" class="headerlink" title="局部注册"></a>局部注册</h3><p>若使用webpack这个的构建系统，全局注册所有的组件便意味着即使不再使用这个组件了，它仍然会被包含在最终的构建结果中。此时，可以将组件局部注册：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 通过一个普通的JavaScript对象来定义组件</span>
<span class="token keyword">var</span> ComponentA<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token keyword">var</span> ComponentB<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token comment">// 在component中定义要使用的组件</span>
<span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  el<span class="token operator">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>
  components<span class="token operator">:</span><span class="token punctuation">&#123;</span>
    <span class="token string">'components-a'</span><span class="token operator">:</span>ComponentA<span class="token punctuation">,</span>
    <span class="token string">'components-b'</span><span class="token operator">:</span>ComponentB
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>对于<code>components</code>对象中的每个property来说，其property名就是自定义元素的名字，其property值就是这个组件的选项对象。</p>
<p><strong>局部注册的组件在其子组件中不可用。</strong>所希望上述代码中的<code>ComponentA</code>在<code>ComponentB</code>中可用，则要写成：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> ComponentA<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token keyword">var</span> ComponentB<span class="token operator">=</span><span class="token punctuation">&#123;</span>
  components<span class="token operator">:</span><span class="token punctuation">&#123;</span>
    <span class="token string">'components-a'</span><span class="token operator">:</span>ComponentA
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="模块系统"><a href="#模块系统" class="headerlink" title="模块系统"></a>模块系统</h3><h4 id="在模块系统中局部注册"><a href="#在模块系统中局部注册" class="headerlink" title="在模块系统中局部注册"></a>在模块系统中局部注册</h4><p>若使用了注入Babel和webpack的模块系统，需要创建一个<code>components</code>目录，并将每个组件放置在其各自的文件中，然后在局部注册之前导入每个想使用的组件。如在一个<code>ComponentB.vue</code>文件中使用<code>ComponentA</code>：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> ComponentA <span class="token keyword">from</span> <span class="token string">'./ComponentA.vue'</span>
<span class="token keyword">export</span> <span class="token keyword">default</span><span class="token punctuation">&#123;</span>
  components<span class="token operator">:</span><span class="token punctuation">&#123;</span>
    ComponentA
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在ES2015+中，在对象中放一个类似<code>ComponentA</code>的变量名便是<code>&#39;ComponentsA&#39;:ComponentA</code>的缩写，即这个变量名同时是用在模板中的自定义元素的名称，也包含了这个组件选项的变量名。</p>
<h4 id="基础组件的自动化全局注册"><a href="#基础组件的自动化全局注册" class="headerlink" title="基础组件的自动化全局注册"></a>基础组件的自动化全局注册</h4><p>当组件中只是包裹了一个输入框或按钮之类的通用元素时，将其称之为基础组件，它们会在各个组件中被频繁地用到。</p>
<p>这往往会导致组件里都会由一个包含基础组件的长列表，但用于模板中的仅是一小部分组件：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;body&gt;
  &lt;div id&#x3D;&quot;example&quot;&gt;
    &lt;BaseInput v-model&#x3D;&quot;searchText&quot; @keydown.enter&#x3D;&quot;search&quot; &#x2F;&gt;
    &lt;BaseButton @click&#x3D;&quot;search&quot;&gt;
      &lt;BaseIcon name&#x3D;&quot;search&quot; &#x2F;&gt;
    &lt;&#x2F;BaseButton&gt;
  &lt;&#x2F;div&gt;  
&lt;&#x2F;body&gt;

&lt;script&gt;
import BaseButton from &#39;.&#x2F;BaseButton.vue&#39;
import BaseIcon from &#39;.&#x2F;BaseIcon.vue&#39;
import BaseInput from &#39;.&#x2F;BaseInput.vue&#39;

export default&#123;
  components:&#123;
    BaseButton,
    BaseIcon,
    BaseInput
  &#125;
&#125;
&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>若使用webpack（或在内部使用了webpack的Vue CLI 3+），则可以使用<code>require.context</code>只全局注册这些通用的基础组件。如在应用入口文件（如<code>src/main.js</code>）中全局导入基础组件的代码如下：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;body&gt;
  &lt;div id&#x3D;&quot;example&quot;&gt;
    &lt;BaseInput v-model&#x3D;&quot;searchText&quot; @keydown.enter&#x3D;&quot;search&quot; &#x2F;&gt;
    &lt;BaseButton @click&#x3D;&quot;search&quot;&gt;
      &lt;BaseIcon name&#x3D;&quot;search&quot; &#x2F;&gt;
    &lt;&#x2F;BaseButton&gt;
  &lt;&#x2F;div&gt;  
&lt;&#x2F;body&gt;

&lt;script&gt;
import Vue from &#39;vue&#39;
import upperFirst from &#39;lodash&#x2F;upperFirst&#39;
import camelCase from &#39;lodash&#x2F;camelCase&#39;

const requireComponent&#x3D;require.context(
  &#39;.&#x2F;components&#39;,&#x2F;&#x2F;组件目录的相对路径
  false,&#x2F;&#x2F;是否查询其子目录
  &#x2F;&#x2F;匹配基础组件文件名的正则表达式
  &#x2F;Base[A-Z]\w+\.(vue|js)$&#x2F;
)
requireComponent.keys().forEach(fileName&#x3D;&gt;&#123;
  const componentConfig&#x3D;requireComponent(fileName)&#x2F;&#x2F;获取组件配置
  const componentName&#x3D;upperFirst(&#x2F;&#x2F;获取组件的PascalCase命名
    camelCase(
      fileName&#x2F;&#x2F;获取和目录深度无关的文件名
      .split(&#39;&#x2F;&#39;)
      .pop()
      .replace(&#x2F;\.\w+$&#x2F;,&#39;&#39;)
    )
  )

  &#x2F;&#x2F;全局注册组件
  Vue.component(
    componentName,
    &#x2F;&#x2F; 若这个组件选项是通过export default导出的，就优先使用.default，否则回退到使用模块的根
    componentConfig.default||componentConfig
  )
&#125;)
&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="Prop"><a href="#Prop" class="headerlink" title="Prop"></a>Prop</h2><h3 id="Prop的大小写"><a href="#Prop的大小写" class="headerlink" title="Prop的大小写"></a>Prop的大小写</h3><p>HTML中的attribute名是大小写不敏感的，浏览器会把所有大写字符解释为小写字符。这意味着在使用DOM模板时，驼峰命名的prop名需要使用其等价的短横线分隔来命名：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">Vue.component(&#39;blog-post&#39;,&#123;
  &#x2F;&#x2F;在JavaScript中是驼峰命名
  props:&#123;&#39;postTitle&#39;&#125;,
  template:&#39;&lt;h3&gt;&#123;&#123;postTitle&#125;&#125;&lt;&#x2F;h3&gt;&#39;
&#125;)
&#x2F;&#x2F; 在HTML中是短横线分隔命名
&lt;blog-post post-title&#x3D;&quot;hello!&quot;&gt;&lt;&#x2F;blog-post&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>而在字符串模板中便不存在这个限制。</p>
<h3 id="Prop类型"><a href="#Prop类型" class="headerlink" title="Prop类型"></a>Prop类型</h3><p>Prop的类型有以下八种：</p>
<ul>
<li>String</li>
<li>Number</li>
<li>Boolean</li>
<li>Array</li>
<li>Object</li>
<li>Date</li>
<li>Function</li>
<li>Symbol</li>
</ul>
<p>props的写法（无默认值）：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">props:&#123;
  title:String,
  likes:Number,
  isPublished:Boolean,
  commentIds:Array,
  author:Object,
  callback:Function,
  contactsPromise:promise
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="传递静态或动态Prop"><a href="#传递静态或动态Prop" class="headerlink" title="传递静态或动态Prop"></a>传递静态或动态Prop</h3><p>任何类型的值都可以传给一个prop，不仅能传入静态的值，还能通过<code>v-bind</code>动态赋值：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&#x2F;&#x2F; 给prop传入静态的值
&lt;blog-post title&#x3D;&quot;My journey with Vue&quot;&gt;&lt;&#x2F;blog-post&gt;

&#x2F;&#x2F; 通过v-bind动态赋予一个变量的值
&lt;blog-post v-bind:title&#x3D;&quot;post.title&quot;&gt;&lt;&#x2F;blog-post&gt;

&#x2F;&#x2F; 通过v-bind动态赋予一个复杂表达式的值
&lt;blog-post v-bind:title&#x3D;&quot;post.title+&#39;by&#39;+post.author.name&quot;&gt;&lt;&#x2F;blog-post&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="传入一个数字"><a href="#传入一个数字" class="headerlink" title="传入一个数字"></a>传入一个数字</h4><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&#x2F;&#x2F; 即使42是静态的，但仍需v-bind来告诉Vue
&#x2F;&#x2F; 这是一个JavaScript表达式而不是一个字符串
&lt;blog-post v-bind:likes&#x3D;&quot;42&quot;&gt;&lt;&#x2F;blog-post&gt;

&#x2F;&#x2F; 通过v-bind动态赋予一个变量的值
&lt;blog-post v-bind:likes&#x3D;&quot;post.likes&quot;&gt;&lt;&#x2F;blog-post&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="传入一个布尔值"><a href="#传入一个布尔值" class="headerlink" title="传入一个布尔值"></a>传入一个布尔值</h4><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&#x2F;&#x2F; 即使prop没有值，结果都是true
&lt;blog-post is-published&gt;&lt;&#x2F;blog-post&gt;

&#x2F;&#x2F; 即使false是静态的，但仍需v-bind来告诉Vue
&#x2F;&#x2F; 这是一个JavaScript表达式而不是一个字符串
&lt;blog-post v-bind:is-published&#x3D;&quot;false&quot;&gt;&lt;&#x2F;blog-post&gt;

&#x2F;&#x2F; 通过v-bind动态赋予一个变量的值
&lt;blog-post v-bind:is-published&#x3D;&quot;post.isPublished&quot;&gt;&lt;&#x2F;blog-post&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="传入一个数组"><a href="#传入一个数组" class="headerlink" title="传入一个数组"></a>传入一个数组</h4><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&#x2F;&#x2F; 即使数组是静态的，但仍需v-bind来告诉Vue
&#x2F;&#x2F; 这是一个JavaScript表达式而不是一个字符串
&lt;blog-post v-bind:comment-ids&#x3D;&quot;[234,266,273]&quot;&gt;&lt;&#x2F;blog-post&gt;

&#x2F;&#x2F; 通过v-bind动态赋予一个变量的值
&lt;blog-post v-bind:comment-ids&#x3D;&quot;post.commentIds&quot;&gt;&lt;&#x2F;blog-post&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="传入一个对象"><a href="#传入一个对象" class="headerlink" title="传入一个对象"></a>传入一个对象</h4><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&#x2F;&#x2F; 即使对象是静态的，但仍需v-bind来告诉Vue
&#x2F;&#x2F; 这是一个JavaScript表达式而不是一个字符串
&lt;blog-post v-bind:author&#x3D;&quot;&#123;
  name:&#39;Veronica&#39;,
  company:&#39;Veridian Dynamics&#39;
  &#125;&quot;
&gt;&lt;&#x2F;blog-post&gt;

&#x2F;&#x2F; 通过v-bind动态赋予一个变量的值
&lt;blog-post v-bind:author&#x3D;&quot;post.author&quot;&gt;&lt;&#x2F;blog-post&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="传入一个对象的所有property"><a href="#传入一个对象的所有property" class="headerlink" title="传入一个对象的所有property"></a>传入一个对象的所有property</h4><p>若要将一个对象的所有property都作为prop传入，可以使用不带参数的<code>v-bind</code>来取代<code>v-bind:prop-name</code></p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&#x2F;&#x2F;给定的对象post
post:&#123;
  id:1,
  title:&#39;My Journey with Vue&#39;
&#125;

&#x2F;&#x2F; 通过v-bind动态赋予一个变量的值
&lt;blog-post v-bind&#x3D;&quot;post&quot;&gt;&lt;&#x2F;blog-post&gt;

&#x2F;&#x2F;等价于
&lt;blog-post 
  v-bind:id&#x3D;&quot;post.id&quot;
  v-bind:title&#x3D;&quot;post.title&quot;
&gt;&lt;&#x2F;blog-post&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="单向数据流"><a href="#单向数据流" class="headerlink" title="单向数据流"></a>单向数据流</h3><p>所有的prop都使得其父子prop之间形成了一个单向下行绑定：<strong>父级prop的更新会向下流动到子组件中</strong>，但反过来则不行，这样防止了从子组件意外变更父级组件的状态。</p>
<p><strong>每次父级组件发生变更时，子组件中所有的prop都将会刷新为最新的值</strong>，因此不应在一个子组件内部改变prop。</p>
<p>若要变更一个prop，可通过以下方法进行变更：</p>
<ol>
<li><p>这样prop用来传递一个初始值，子组件希望将其作为一个本地的prop数据来使用。此时最好定义一个本地的data property并将这个prop用作其初始值：</p>
 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">props<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'initialCounter'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token function-variable function">data</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
    counter<span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>initialCounter
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>这个prop以一种原始的值传入且需要进行转化。此时最好使用这个prop的值来定义一个计算属性：</p>
 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">props<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'size'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
computed<span class="token operator">:</span><span class="token punctuation">&#123;</span>
  <span class="token function-variable function">normalizeSize</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ol>
<p><strong>注意：</strong>在JavaScript中对象和数组是通过引用传入的，所以对于一个数组或对象类型的prop来说，在子组件中改变变更这个对象或数组本身将会影响到父组件的状态。</p>
<h3 id="Prop验证"><a href="#Prop验证" class="headerlink" title="Prop验证"></a>Prop验证</h3><p>可以通过在<code>props</code>中的值提供一个带有验证需求的对象，从而指定组件的prop验证方式。即为<code>props</code>设定默认值如下：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">props:&#123;
  propA:Number,&#x2F;&#x2F;基础的类型检查
  propB:[String,Number],&#x2F;&#x2F;多个可能的类型
  &#x2F;&#x2F;必填的字符串
  propC:&#123;
    type:String,
    required:true
  &#125;,
  &#x2F;&#x2F; 带有默认值的数字
  propD:&#123;
    type:Number,
    default:100
  &#125;,
  &#x2F;&#x2F; 带有默认值的对象
  propE:&#123;
    type:Object,
    &#x2F;&#x2F; 对象或数组默认值必须从一个工厂函数获取
    default:function()&#123;
      return &#123;message:&#39;hello&#39;&#125;
    &#125;
  &#125;,
  &#x2F;&#x2F; 自定义验证函数
  propF:&#123;
    validator:function(value)&#123;
      &#x2F;&#x2F; 这个值必须匹配下列字符串中的一个
      return [&#39;success&#39;,&#39;warning&#39;,&#39;danger&#39;].indexOf(value)!&#x3D;&#x3D;-1
    &#125;
  &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>当prop验证失败时，Vue将会产生一个控制台的警告。</p>
<p>prop会在组件实例创建之前进行验证，因此实例的property（如<code>data</code>、<code>computed</code>等）在<code>default</code>或<code>validator</code>函数中是不可用的。</p>
<h4 id="类型检查"><a href="#类型检查" class="headerlink" title="类型检查"></a>类型检查</h4><p>prop类型除了可以是八种原生类型之外，还可以是自定义的构造函数，并且通过<code>instanceof</code>来进行检查确认：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//给定构造函数Person</span>
<span class="token keyword">function</span> <span class="token function">Person</span> <span class="token punctuation">(</span><span class="token parameter">firstName<span class="token punctuation">,</span>lastName</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>firstName<span class="token operator">=</span>firstName
  <span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token operator">=</span>lastName
<span class="token punctuation">&#125;</span>

<span class="token comment">//验证 author prop的值是否是通过new Person创建的</span>
Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'blog-post'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>
  props<span class="token operator">:</span><span class="token punctuation">&#123;</span>
    author<span class="token operator">:</span>Person
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="非Prop的Attribute"><a href="#非Prop的Attribute" class="headerlink" title="非Prop的Attribute"></a>非Prop的Attribute</h3><p>传向一个组件，但组件中没有相应prop定义的attribute称之为非prop的attribute。显式定义的prop适用于向一个子组件传入信息。组件可以接收任意的attribute，而这些attribute会被添加到这个组件的根元素上。</p>
<h4 id="替换-合并已有的Attribute"><a href="#替换-合并已有的Attribute" class="headerlink" title="替换/合并已有的Attribute"></a>替换/合并已有的Attribute</h4><p>现有一个Bootstrap插件里使用了第三方组件<code>&lt;bootstrap-date-input&gt;</code>，其模板如下：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>data<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>若要为这个插件定制一个主体，则需要添加一个特别的类名如下：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bootstrap-date-input</span>
  <span class="token attr-name">data-date-picker</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>activated<span class="token punctuation">"</span></span>
  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>date-picker-theme-dark<span class="token punctuation">"</span></span>
<span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bootstrap-date-input</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>在这种情况下共定义了两个不同的class值：</p>
<ul>
<li><code>form-control</code>：组件模板内设置好的class</li>
<li><code>date-picker-theme-dark</code>：从组件父级传入的</li>
</ul>
<p>对于绝大多数attribute来说，从外部提供给组件的值会替换掉组件内部设置好的值，<strong>因此若直接传入<code>type=&quot;text&quot;</code>就会替换掉<code>type=&quot;date&quot;</code>并将其破坏掉。</strong>而<strong><code>class</code>和<code>style</code> attribute会将两边的值合起来</strong>，从而得到最终值：<code>form-control date-picker-theme-dark</code>。</p>
<h4 id="禁用Attribute继承"><a href="#禁用Attribute继承" class="headerlink" title="禁用Attribute继承"></a>禁用Attribute继承</h4><p>若不希望组件的根元素继承attribute，可以在组件的选项中设置<code>inheritAttris:false</code>，配合实例的<code>$attrs</code> property使用，便可以手动决定这些attribute会被赋予哪个元素，<strong>常用于撰写基础组件中</strong>：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'base-input'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>
  inheritAttrs<span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>
  props<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">,</span><span class="token string">'value'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
    &lt;label>
      &#123;&#123;label&#125;&#125;
      &lt;input
        v-bind="$attrs"
        v-bind:value="value"
        v-on:input="$emit('input',$event.target.value)"
      >
    &lt;/label>
  </span><span class="token template-punctuation string">`</span></span>    
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>xxxxxxxxxx16 <span class="token number">1</span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'base-input'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">2</span>  inheritAttrs<span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token number">3</span>  props<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">,</span><span class="token string">'value'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">4</span>  template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">5    &lt;label>6      &#123;&#123;label&#125;&#125;7      &lt;input8        v-bind="$attrs"9        v-bind:value="value"10        v-on:input="$emit('input',$event.target.value)"11      >12    &lt;/label>13  </span><span class="token template-punctuation string">`</span></span>    <span class="token number">14</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'my-component'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">15</span>  inheritAttrs<span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>其中，<strong><code>inheritAttris:false</code>选项不会影响<code>style</code>和<code>class</code>的绑定。</strong></p>
<p>这个模式允许在使用基础组件时更像是使用原始的HTML元素，而不用担心哪个元素才是真正的根元素。</p>
<h2 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h2><h3 id="事件名"><a href="#事件名" class="headerlink" title="事件名"></a>事件名</h3><p>不同于组件和prop，事件名不存在任何自动化的大小写转化，<strong>触发的事件名需要完全匹配监听这个事件所用的名称</strong>。如触发事件名是驼峰式命名的，则监听该名字的短横线分隔命名版本是不会有任何效果的。</p>
<p>不同于组件和prop，事件名不会被用作一个JavaScript变量名或property名，因此不会使用驼峰命名或首字母大写命名。且<code>v-on</code>事件监听器在DOM模板中会被自动转换为全小写，因此<strong>推荐事件名使用短横线分隔命名</strong>。</p>
<h3 id="自定义组件的v-model"><a href="#自定义组件的v-model" class="headerlink" title="自定义组件的v-model"></a>自定义组件的<code>v-model</code></h3><p>一个组件上的<code>v-model</code>默认会利用名为<code>value</code>的prop和名为<code>input</code>的事件。但像单选框、复选框等类型的输入控件可能会将<code>value</code> attribute用于不同的目的，为避免冲突，可使用<code>model</code>选项：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;body&gt;
  &lt;div id&#x3D;&quot;example&quot;&gt;
    &lt;!-- lovingVue的值将会传如名为checked的prop --&gt;
    &lt;!-- 当&lt;base-checkbox&gt;触发一个change事件并附带一个新值时，lovingVue的property将会被更新 --&gt;
    &lt;base-checkbox v-model&#x3D;&quot;lovingVue&quot;&gt;&lt;&#x2F;base-checkbox&gt;
  &lt;&#x2F;div&gt;  
&lt;&#x2F;body&gt;

&lt;script&gt;
Vue.component(&#39;base-checkbox&#39;,&#123;
  model:&#123;
    prop:&#39;checked&#39;,
    event:&#39;change&#39;
  &#125;,
  props:&#123;
    checked:Boolean&#x2F;&#x2F;props里仍需要声明checked这个prop
  &#125;,
  template:&#96;
    &lt;input 
      type&#x3D;&quot;checkbox&quot;
      v-bind:checked&#x3D;&quot;checked&quot;
      v-on:change&#x3D;&quot;$emit(&#39;change&#39;,$event.target.checked)&quot;
    &gt;
  &#96;    
&#125;)
&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="将原生事件绑定到组件"><a href="#将原生事件绑定到组件" class="headerlink" title="将原生事件绑定到组件"></a>将原生事件绑定到组件</h3><p>若要在一个组件的根元素上直接监听一个原生事件，可以使用<code>v-on</code>的<code>.native</code>修饰符：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base-input</span> <span class="token attr-name"><span class="token namespace">v-on:</span>focus.native</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onFocus<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>base-input</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>当监听一个类似<code>&lt;input&gt;</code>的特定元素时，父级的<code>.native</code>监听器将会静默失败，其不会产生任何报错，但<code>onFocus</code>处理函数也不会被调用。</p>
<p>Vue提供了一个<code>$listeners</code> property来解决这一问题，它是一个对象，里面包含了作用在这个组件上的所有监听器，如：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>
  <span class="token function-variable function">focus</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token function-variable function">input</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> 
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>有了<code>$listeners</code> property，再配合<code>v-on=$listeners</code>便可以将所有的事件监听器指向这个组件的某个特定的子元素。</p>
<p>对于希望<code>&lt;input&gt;</code>也能配合<code>v-model</code>工作的组件，应为这些监听器创建一个<code>inputListeners</code>计算属性如下所示：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;script&gt;
Vue.component(&#39;base-input&#39;,&#123;
  inheritAttrs:false,
  props:[&#39;label&#39;,&#39;value&#39;],
  computed:&#123;
    inputListeners:function()&#123;
      var vm&#x3D;this
      return Object.assign(&#123;&#125;,
        this.$listeners,
        &#123;
          input:function(event)&#123;
            vm.$emit(&#39;input&#39;,event.target.value)
          &#125;
        &#125;
      )
    &#125;
  &#125;,
  template: &#96;
    &lt;label&gt;
      &#123;&#123;label&#125;&#125;
      &lt;input
        v-bind&#x3D;&quot;$attrs&quot;
        v-bind:value&#x3D;&quot;value&quot;
        v-on&#x3D;&quot;inputListeners&quot;
      &gt;
    &lt;&#x2F;label&gt;
  &#96;      
&#125;)
&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>此时<code>&lt;base-input&gt;</code>组件是一个完全透明的包裹器了，即它可以像一个普通的<code>&lt;input&gt;</code>元素一样使用。所有跟<code>&lt;base-input&gt;</code>组件相同的attribute和监听器都可以工作，不必再使用<code>.native</code>监听器来监听事件。</p>
<h3 id="sync修饰符"><a href="#sync修饰符" class="headerlink" title=".sync修饰符"></a><code>.sync</code>修饰符</h3><p>若需要对一个prop进行”双向绑定“时，可以用<code>update:myPropName</code>的模式触发事件来处理。</p>
<p>如在一个包含<code>title</code> prop的组件中：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;script&gt;
Vue.component(&#39;text-document&#39;,&#123;
  props:[&#39;title&#39;],
  template: &#96;
    &lt;div&gt;
      我是子节点
      &lt;button @click&#x3D;&quot;handleClick&quot;&gt;点击我改变父级Title&lt;&#x2F;button&gt;
    &lt;&#x2F;div&gt;
  &#96;,
  methods:&#123;
    handleClick()&#123;
      this.count+&#x3D;1;
      newTitle&#x3D;this.title+this.count;&#x2F;&#x2F;对title赋新值
      this.$emit(&#39;update:childTitle&#39;,newTitle)
    &#125;
  &#125;,
  data()&#123;
    return&#123;
      count:0
    &#125;
  &#125;,
&#125;)
const app&#x3D;new Vue(&#123;
  el:&#39;#example&#39;,
  data:&#123;
    parentTitle:&quot;我是父级title&quot;,
  &#125;,
    &#x2F;&#x2F;父组件可以监听那个事件并根据需要更新一个本地的数据property
  template: &#96;
    &lt;div&gt;
      我是父级节点
      &lt;text-document 
        v-bind:title&#x3D;&quot;parentTitle&quot; 
        v-on:update:title&#x3D;&quot;parentTitle&#x3D;$event&quot;
      &gt;&lt;&#x2F;text-document&gt;
        &#123;&#123;parentTitle&#125;&#125;
    &lt;&#x2F;div&gt;
  &#96;    
  &#x2F;&#x2F;上述代码可用.sync修饰符缩写为
  &#x2F;&#x2F;&lt;text-document :title&#x3D;&quot;parentTitle&quot; :title.sync&#x3D;&quot;parentTitle&quot;&gt;&lt;&#x2F;text-document&gt;  
&#125;)
&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>注意带有<code>.sync</code>修饰符的<code>v-bind</code>不能和表达式一起使用（如<code>v-bind:title.sync=&quot;doc.title+&#39;!&#39;&quot;</code>是无效的），只能提供想绑定的property名，如<code>v-model</code>。</p>
<p>当用一个对象同时设置多个prop时，也可以将<code>.sync</code>修饰符和<code>v-bind</code>配合使用：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;text-document v-bind.sync&#x3D;&quot;doc&quot;&gt;&lt;&#x2F;text-document&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这样会把<code>doc</code>对象中的每个property都作为一个独立的prop传进去，然后各自添加用于更新的<code>v-on</code>监听器。</p>
<p><strong>注意：</strong>将<code>v-bind.sync</code>用在一个字面量的对象上（如整数、浮点数及字符串等）时是无法正常工作的，如<code>v-bind.sync=&quot;&#123;title:doc.title&#125;&quot;</code>。</p>
<h2 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h2><p>在Vue2.6.0版本中引入了具名插槽和作用域插槽的因语法<code>v-slot</code>指令，它取代了<code>slot</code>和<code>slot-scope</code>这两个已被废除但未被移除的attribute。</p>
<h3 id="插槽内容"><a href="#插槽内容" class="headerlink" title="插槽内容"></a>插槽内容</h3><p>Vue实现了一套内容分发的API，其将<code>&lt;slot&gt;</code>元素作为承载分发内容的出口。</p>
<p>它允许像这样合成组件：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>navigation-link</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/profile<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  Your Profile
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>navigation-link</span><span class="token punctuation">></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>其中，<code>&lt;/navigation-link&gt;</code>的模板如下：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav-link<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>当组件渲染时，<code>&lt;slot&gt;&lt;/slot&gt;</code>将会被替换为Your Profile的内容。插槽内可以包含任何模板代码，包括HTML或是它的组件：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;navigation-link url&#x3D;&quot;&#x2F;profile&quot;&gt;
  &lt;!-- 添加一个Font Awesome图标 --&gt;
  &lt;span class&#x3D;&quot;fa fa-user&quot;&gt;&lt;&#x2F;span&gt;
    Your Profile
&lt;&#x2F;navigation-link&gt; 

&lt;navigation-link url&#x3D;&quot;&#x2F;profile&quot;&gt;
  &lt;!-- 添加一个图标的组件 --&gt;
  &lt;font-awesome-icon name&#x3D;&quot;user&quot;&gt;&lt;&#x2F;font-awesome-icon&gt;
    Your Profile
&lt;&#x2F;navigation-link&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>若<code>&lt;navigation-link&gt;</code>的<code>template</code>中没有包含一个<code>&lt;slot&gt;</code>元素，则该组件起始标签和结束标签之间的内容都会被抛弃。</p>
<h3 id="编译作用域"><a href="#编译作用域" class="headerlink" title="编译作用域"></a>编译作用域</h3><p>当想在一个插槽中使用数据时，<strong>该插槽跟模板其他地方一样可以访问相同的实例property，而不能访问<code>&lt;navigation-link&gt;</code>的作用域</strong>：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;navigation-link url&#x3D;&quot;&#x2F;profile&quot;&gt;
  &lt;!-- user.name的数据能正常访问 --&gt;
  Logged in as &#123;&#123;user.name&#125;&#125;
  &lt;!-- 这里的url的值是undefined --&gt;
  &lt;!-- 因为该插槽的内容是传递给&lt;navigation-link&gt;的而不是在其组件内部定义的 --&gt;
  Clicking here will send you to:&#123;&#123;url&#125;&#125;
&lt;&#x2F;navigation-link&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>父级模板里的所有内容都是在父级作用域中编译的，子模板里的所有内容都是在子作用域中编译的。</strong></p>
<h3 id="后备内容"><a href="#后备内容" class="headerlink" title="后备内容"></a>后备内容</h3><p>为一个插槽设置具体的后备内容（即默认内容）是很有必要的，它只会在没有提供内容的时候被渲染。</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;button type&#x3D;&quot;submit&quot;&gt;
  &lt;!-- button绝大多数都渲染文本Submit --&gt;
  &lt;slot&gt;Submit&lt;&#x2F;slot&gt;
&lt;&#x2F;button&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>此时若在父级组件中使用<code>&lt;submit-button&gt;</code>且不提供任何插槽内容时，后备内容“Submit”将会被渲染；若提供内容时，在这个提供的内容将会取代后备内容被渲染</p>
<h3 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h3><p>有时在一个模板里需要多个插槽时，可以使用<code>&lt;slot&gt;</code>元素中的<code>name</code> attribute，其可以用来定义额外的插槽：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;div class&#x3D;&quot;container&quot;&gt;
  &lt;header&gt;
    &lt;slot name&#x3D;&quot;header&quot;&gt;&lt;&#x2F;slot&gt;
  &lt;&#x2F;header&gt;
  &lt;main&gt;
    &lt;!-- 不带name的&lt;slot&gt;，会默认带有一个隐含的名字default --&gt;
    &lt;slot&gt;&lt;&#x2F;slot&gt;
  &lt;&#x2F;main&gt;
  &lt;footer&gt;
    &lt;slot name&#x3D;&quot;footer&quot;&gt;&lt;&#x2F;slot&gt;
  &lt;&#x2F;footer&gt;
&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在向具名插槽提供内容时，可以在一个<code>&lt;template&gt;</code>元素上使用<code>v-slot</code>指令，并以<code>v-slot</code>参数的形式提供其名称：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;base-layout&gt;
  &lt;template v-slot:header&gt;
    &lt;h1&gt;Here might be a page title&lt;&#x2F;h1&gt;
  &lt;&#x2F;template&gt;
    
  &lt;p&gt;A paragraph for the main content.&lt;&#x2F;p&gt;
  &lt;p&gt;And another one.&lt;&#x2F;p&gt;

  &lt;template v-slot:footer&gt;
    &lt;p&gt;Here&#39;s some contact info&lt;&#x2F;p&gt;
  &lt;&#x2F;template&gt;
&lt;&#x2F;base-layout&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>现在<code>&lt;template&gt;</code>元素中的所有内容都将会被传入相应的插槽，任何没有被包裹在带有<code>v-slot</code>的<code>&lt;template&gt;</code>中的内容都会被视为默认插槽的内容。</p>
<p>即上述代码等价于：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;base-layout&gt;
  &lt;template v-slot:header&gt;
    &lt;h1&gt;Here might be a page title&lt;&#x2F;h1&gt;
  &lt;&#x2F;template&gt;

  &lt;template v-slot:default&gt;
    &lt;p&gt;A paragraph for the main content.&lt;&#x2F;p&gt;
    &lt;p&gt;And another one.&lt;&#x2F;p&gt;
  &lt;&#x2F;template&gt; 
  
  &lt;template v-slot:footer&gt;
    &lt;p&gt;Here&#39;s some contact info&lt;&#x2F;p&gt;
  &lt;&#x2F;template&gt;
&lt;&#x2F;base-layout&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>注意：<code>v-slot</code>只能添加在<code>&lt;template&gt;</code>上。</strong></p>
<h3 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h3><p>有时会让插槽内容能够访问子组件中才有的数据。如这里有个组件<code>&lt;current-user&gt;</code>：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;span&gt;
  &lt;slot&gt;&#123;&#123;user.lastName&#125;&#125;&lt;&#x2F;slot&gt;
&lt;&#x2F;span&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>若想换掉备用内容，用名来显示，直接将组件中的<code>user.lastName</code>换成<code>user.firstName</code>是不行的：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;current-user&gt;
  &#123;&#123;user.firstName&#125;&#125;
&lt;&#x2F;current-user&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>由于只有<code>&lt;current-user&gt;</code>组件可以访问到<code>user</code>，而所提供的内容是在父级渲染的。因此为了让<code>user</code>在父级的插槽内容中可用，<strong>将<code>user</code>作为<code>&lt;slot&gt;</code>元素的一个attribute绑定上去</strong>：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;span&gt;
  &lt;slot v-bind:user&#x3D;&quot;user&quot;&gt;&#123;&#123;user.lastName&#125;&#125;&lt;&#x2F;slot&gt;
&lt;&#x2F;span&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>绑定在<code>&lt;slot&gt;</code>元素上的attribute被称为插槽prop。在父级作用域中，可以使用带值的<code>v-slot</code>来定义所提供插槽prop的名字：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;current-user&gt;
  &lt;!-- slotProps为包含所有插槽prop的对象 --&gt;
  &lt;template v-slot:default&#x3D;&quot;slotProps&quot;&gt;
    &#123;&#123;slotProps.user.firstName&#125;&#125;
  &lt;&#x2F;template&gt;  
&lt;&#x2F;current-user&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="独占默认插槽的缩写语法"><a href="#独占默认插槽的缩写语法" class="headerlink" title="独占默认插槽的缩写语法"></a>独占默认插槽的缩写语法</h4><p><strong>当被提供的内容只有默认插槽时，组件的标签才可以被当作插槽的模板来使用。</strong>此时可以把<code>v-slot</code>直接用在组件上：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;current-user v-slot:default&#x3D;&quot;slotProps&quot;&gt;
  &#123;&#123;slotProps.user.firstName&#125;&#125; 
&lt;&#x2F;current-user&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>由于不带参数的<code>v-slot</code>被假定为对应默认的插槽，因此还有更简化的写法：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;current-user v-slot&#x3D;&quot;slotProps&quot;&gt;
  &#123;&#123;slotProps.user.firstName&#125;&#125; 
&lt;&#x2F;current-user&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><strong>默认插槽的缩写写法不能和具名插槽混用，这会导致作用域不明确。</strong></p>
<p>只要出现多个插槽，则始终要为所有的插槽使用完整的基于<code>&lt;template&gt;</code>的语法：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;current-user&gt;
  &lt;template v-slot:default&#x3D;&quot;slotProps&quot;&gt;
    &#123;&#123;slotProps.user.firstName&#125;&#125;
  &lt;&#x2F;template&gt;  

  &lt;template v-slot:other&#x3D;&quot;otherSlotProps&quot;&gt;
    ...
  &lt;&#x2F;template&gt;  
&lt;&#x2F;current-user&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="解析插槽Prop"><a href="#解析插槽Prop" class="headerlink" title="解析插槽Prop"></a>解析插槽Prop</h4><p>作用域插槽的内部工作原理是将插槽内容包裹在一个拥有单个参数的函数里：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">slotProps</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token comment">//插槽内容</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>这意味着<code>v-slot</code>的值实际上可以是任何能够作为函数定义中参数的JavaScript表达式。因此在支持的环境下（单文件组件或现代浏览器），也可以使用ES2015解构来传入具体的插槽prop：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;current-user v-slot&#x3D;&quot;&#123;user&#125;&quot;&gt;
  &#123;&#123;user.firstName&#125;&#125; 
&lt;&#x2F;current-user&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>这样可以在该插槽提供了多个prop时让代码更简洁。它同样开启了prop重命名等功能，如把<code>user</code>重命名为<code>person</code>：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;current-user v-slot&#x3D;&quot;&#123;user:person&#125;&quot;&gt;
  &#123;&#123;person.firstName&#125;&#125; 
&lt;&#x2F;current-user&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>还可以定义后备内容，用于插槽prop是undefined的情形：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;current-user v-slot&#x3D;&quot;&#123;user&#x3D;&#123;firstName:&#39;Guest&#39;&#125;&#125;&quot;&gt;
  &#123;&#123;user.firstName&#125;&#125; 
&lt;&#x2F;current-user&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="动态插槽名"><a href="#动态插槽名" class="headerlink" title="动态插槽名"></a>动态插槽名</h3><p>动态指令参数也可以用在<code>v-slot</code>上，来定义动态的插槽名：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;base-layout&gt;
  &lt;template v-slot:[dynamicSlotName]&gt;
    ...
  &lt;&#x2F;template&gt;
&lt;&#x2F;base-layout&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="具名插槽的缩写"><a href="#具名插槽的缩写" class="headerlink" title="具名插槽的缩写"></a>具名插槽的缩写</h3><p>与<code>v-on</code>和<code>v-bind</code>一样，<code>v-slot</code>也有缩写，即把参数之前的所有内容（<code>v-slot:</code>）替换为字符<code>#</code>：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;base-layout&gt;
  &lt;template #header&gt;
    &lt;h1&gt;Here might be a page title&lt;&#x2F;h1&gt;
  &lt;&#x2F;template&gt;
    
  &lt;p&gt;A paragraph for the main content.&lt;&#x2F;p&gt;
  &lt;p&gt;And another one.&lt;&#x2F;p&gt;

  &lt;template #footer&gt;
    &lt;p&gt;Here&#39;s some contact info&lt;&#x2F;p&gt;
  &lt;&#x2F;template&gt;
&lt;&#x2F;base-layout&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>与其他指令相同，该缩写只在其有参数时才可用。若希望无参数时也能使用缩写的话，就必须始终明确插槽名：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;current-user #default&#x3D;&quot;&#123;user&#125;&quot;&gt;
    &#123;&#123;user.firstName&#125;&#125; 
&lt;&#x2F;current-user&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="其他实例"><a href="#其他实例" class="headerlink" title="其他实例"></a>其他实例</h3><p>插槽prop允许将插槽转换为可复用的模板，这些模板可以基于输入的prop渲染出不同的内容。这在设<strong>计封装数据逻辑的同时允许父级组件自定义部分布局的可复用组件</strong>是最有用的。</p>
<p>如要实现一个<code>&lt;todo-list&gt;</code>组件，它是一个列表且包含布局和过滤逻辑：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;ul&gt;
  &lt;li
    v-for&#x3D;&quot;todo in filteredTodos&quot;
    v-bind:key&#x3D;&quot;todo.id&quot;
  &gt;
    &#123;&#123;todo.text&#125;&#125;
  &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以考虑将每个todo作为父级组件的插槽，以此通过父级组件对其进行控制，然后将<code>todo</code>作为一个插槽prop进行绑定：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;ul&gt;
  &lt;li
    v-for&#x3D;&quot;todo in filteredTodos&quot;
    v-bind:key&#x3D;&quot;todo.id&quot;
  &gt;
    &lt;!-- 为每个todo准备了插槽，将todo对象作为一个插槽的prop传入 --&gt;
    &lt;slot name&#x3D;&quot;todo&quot; v-bind:todo&#x3D;&quot;todo&quot;&gt;
      &#123;&#123;todo.text&#125;&#125;
    &lt;&#x2F;slot&gt;
  &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>现在使用<code>&lt;itodo-list&gt;</code>组件时，可以选择为todo定义一个不一样的<code>&lt;template&gt;</code>作为替代方案，并且可以从子组件中获取数据：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;todo-list v-bind:todo&#x3D;&quot;todos&quot;&gt;
  &lt;template v-slot:todo&#x3D;&quot;&#123;todo&#125;&quot;&gt;
    &lt;span v-if&#x3D;&quot;todo.isComplete&quot;&gt;&lt;&#x2F;span&gt;
    &#123;&#123;todo.text&#125;&#125;
  &lt;&#x2F;template&gt;
&lt;&#x2F;todo-list&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>前端</category>
        <category>前端框架</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>可视化大屏设计：制作不变形的图片边框</title>
    <url>/2023/12/25/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F%E8%AE%BE%E8%AE%A1%EF%BC%9A%E5%88%B6%E4%BD%9C%E4%B8%8D%E5%8F%98%E5%BD%A2%E7%9A%84%E5%9B%BE%E7%89%87%E8%BE%B9%E6%A1%86/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在制作可视化大屏的过程中，边框制作是不可避免的。根据制作方法不同，可以把边框为两种：一种是将图片作为背景，主视觉效果在图片里体现，这里将其称之为图片边框；另一种是用纯css进行制作，主视觉效果依赖于css动画来体现。</p>
<p>在制作图片边框时，曾遇到这样的问题：图片作为背景插入到容器后，当容器大小超过图片大小时，会引起图片的变形。</p>
<p>比如有以下图片，当容器大小没有超过图片大小时，边框是完整没有拉伸的：<img src="/2023/12/25/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F%E8%AE%BE%E8%AE%A1%EF%BC%9A%E5%88%B6%E4%BD%9C%E4%B8%8D%E5%8F%98%E5%BD%A2%E7%9A%84%E5%9B%BE%E7%89%87%E8%BE%B9%E6%A1%86/1.png" alt></p>
<p>当容器的高度超过图片的高度时，图片会被拉伸变形：<img src="/2023/12/25/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F%E8%AE%BE%E8%AE%A1%EF%BC%9A%E5%88%B6%E4%BD%9C%E4%B8%8D%E5%8F%98%E5%BD%A2%E7%9A%84%E5%9B%BE%E7%89%87%E8%BE%B9%E6%A1%86/2.png" alt></p>
<p>而利用点九图，可以解决图片拉伸变形的问题</p>
<h1 id="点九图"><a href="#点九图" class="headerlink" title="点九图"></a>点九图</h1><p>点九图，是Android开发中会用到的一种特殊切图格式。</p>
]]></content>
      <categories>
        <category>CSS3</category>
        <category>大屏设计</category>
        <category>可视化</category>
      </categories>
      <tags>
        <tag>CSS3</tag>
        <tag>可视化</tag>
        <tag>大屏设计</tag>
      </tags>
  </entry>
  <entry>
    <title>可视化大屏设计入门指南</title>
    <url>/2023/11/29/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F%E8%AE%BE%E8%AE%A1%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>数据可视化就是把一些相对复杂、抽象的、看不懂的数据通过可视化的方式，运用图形化的手段清晰有效地将数据信息进行解读和传达，帮助发现其中的规律和特征，挖掘数据背后价值的过程。</p>
<p>随着行业的发展，可视化大屏大致有以下类别：</p>
<ul>
<li>行业可视化（如交通、医疗、金融、军警部队、农业、工厂、化工等）</li>
<li>智能终端系统类（如定制化终端产品）</li>
<li>演示demo（如数据演示、展览展示、数据看板）</li>
<li>可视化分析系统（如交通预警平台、天气监控平台等）</li>
</ul>
<p>随着可视化需求的增多，各大厂商也逐渐整合可视化资源来实现低代码平台，国内比较知名的可视化厂商有：光启元（Ray design）、Data V、优诺科技（森工厂）、袋鼠云（Easy V）、数字冰雹、图扑等。他们将一些可视化效果组件化集成在平台，通过拖拉拽就能实现一些不错的效果。</p>
<p>可视化设计不仅仅是只做完效果图就行的，他是一个结合<strong>硬件设备、UI设计、三维建模、三维渲染、动态设计、数据可视化、图形技术、GIS数据、渲染引擎、交互技术</strong>等综合类的交叉学科。<img src="/2023/11/29/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F%E8%AE%BE%E8%AE%A1%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/1.PNG" alt></p>
<h1 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h1><h2 id="硬件设备"><a href="#硬件设备" class="headerlink" title="硬件设备"></a>硬件设备</h2><p>了解硬件设备信息是做大屏的开始，先了解物理屏的尺寸、比例、屏幕种类（拼接屏、LED屏）、投影方式等信息，以方便后续的设计工作。</p>
<p>下图为一些常见的屏幕拼接方式，确认好屏幕的拼接方式便能计算整个大屏的物理分辨率。下图中最后一个屏幕的拼接方式为横向3块、竖向2块屏幕，他们每块屏幕分辨率为1920x1080，那么这块3x2的拼接屏幕尺寸就应该是<code>1920*3x1080*2</code>即5760x2160<img src="/2023/11/29/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F%E8%AE%BE%E8%AE%A1%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/2.PNG" alt></p>
<h3 id="大屏设计尺寸"><a href="#大屏设计尺寸" class="headerlink" title="大屏设计尺寸"></a>大屏设计尺寸</h3><p>大屏的投射方式大致分为三种：</p>
<ol>
<li>电脑屏幕1比1等比例投屏</li>
<li>通过主机直接输出给拼接屏（常用于一些自定义比例屏幕和分辨率超大的情况下）</li>
<li>投影仪投射</li>
</ol>
<p>由于大屏的物理屏幕分辨率大小不一，因此<strong>设计尺寸是建议按照输出分辨率设计</strong>，采用输出分辨率作为最终的设计尺寸。<strong>针对硬件设备设计</strong>时要关注以下几点：屏幕拼接方式、单屏幕像素及拼接后像素、输出像素等这些决定设计尺寸、内容排布、规避拼接缝等问题。</p>
<h2 id="GIS数据"><a href="#GIS数据" class="headerlink" title="GIS数据"></a>GIS数据</h2><p>通常应用于参数化建模，比如通过一些地理位置高程数据生成3D模型。</p>
<p>常见的一些格式有：</p>
<ul>
<li>Openstreetmap（多用于生成模型）</li>
<li>Shapefile（多用于生成模型）</li>
<li>Geojson（多用于基于Web的映射）</li>
<li>TIFF（多用于贴图处理）</li>
</ul>
<p>常用的工具有：</p>
<ul>
<li>Qgis</li>
<li>Arcgis</li>
<li>Google mapper</li>
</ul>
<h2 id="三维建模"><a href="#三维建模" class="headerlink" title="三维建模"></a>三维建模</h2><p>在可视化设计中，一般会结合生成<strong>参数化模型+定制化手工模型</strong>的方式处理整体效果。这么处理的目的：一是设计上能突出主体，增加画面的层次感；二是在性能上能很好地优化，提高整体性能。</p>
<p>下图为设计侧到开发侧对接流程：<img src="/2023/11/29/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F%E8%AE%BE%E8%AE%A1%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/3.PNG" alt></p>
<h2 id="动效设计"><a href="#动效设计" class="headerlink" title="动效设计"></a>动效设计</h2><p>常见的一些动效对接格式为：GIF、MP4、APNG、Lottie、序列帧。<img src="/2023/11/29/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F%E8%AE%BE%E8%AE%A1%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/4.PNG" alt></p>
<h2 id="图形技术"><a href="#图形技术" class="headerlink" title="图形技术"></a>图形技术</h2><p>图形成像，是由一个个的粒子点生成的画面。<img src="/2023/11/29/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F%E8%AE%BE%E8%AE%A1%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/5.PNG" alt></p>
<p>下图是由一个50x100的粒子组成的平面，每个粒子都会对应他的xy轴的坐标位置，通过控制粒子的<strong>透明度、大小、颜色、位置、旋转</strong>等参数呈现不同的视觉效果。<img src="/2023/11/29/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F%E8%AE%BE%E8%AE%A1%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/6.JPG" alt></p>
<p>常见的粒子世界地图就是通过控制粒子黑白X粒子大小叠加出来的，通过一张贴图去控制黑白嘟，海洋是黑色的就不显示粒子，陆地为白色显示白色粒子，最终便呈现了一个粒子地球的效果。<img src="/2023/11/29/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F%E8%AE%BE%E8%AE%A1%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/7.PNG" alt></p>
<h2 id="渲染引擎的技术架构"><a href="#渲染引擎的技术架构" class="headerlink" title="渲染引擎的技术架构"></a>渲染引擎的技术架构</h2><p>市面上可视化落地都是基于Unity3D、虚拟引擎（UE4）、Ventuz、threejs等工具实现的。它们的底层都是由BS（Browser-Server）和CS（Client-Server）架构组成的。</p>
<p><strong>BS架构与CS架构特点：</strong></p>
<ul>
<li>BS：浏览器/服务器模式，优点是使用便捷、数据实时更新、跨平台。缺点是渲染效果较差、大场景支持差。框架有WebGL。</li>
<li>CS：客户端/服务器模式，优点是整体渲染视觉效果棒、大场景支持好。缺点是必须安装客户端、对电脑性能要求高、 不同平台需要不同文件。框架有Unreal Engine、Unity3D、Ventuz。</li>
</ul>
<h1 id="可视化大屏UI"><a href="#可视化大屏UI" class="headerlink" title="可视化大屏UI"></a>可视化大屏UI</h1><p>大屏UI设计中，需要对大屏的布局、风格、主视觉、信息图表、字体、规范、动效等方面综合考虑，从而推导出设计方案。</p>
<ul>
<li><strong>设计前</strong>：需要<strong>充分分析和理解用户需求</strong>，要了解大屏的<strong>展示场景</strong>、设计<strong>分辨率</strong>及大屏的<strong>拼接方法</strong>，要清楚需要<strong>展示的数据具体有哪些内容</strong>，同时探明<strong>每部分数据对实时性的要求</strong>，确定好数据对应的可视化元素后，再考虑<strong>实现的工具与方法</strong>。</li>
<li><strong>设计中</strong>：<strong>构思布局</strong>时可以在纸上简单画一下。根据业务需求抽取关键性指标，提取主要信息来进行设计的提炼与分析，方便自己找参考。<strong>大屏背景颜色要以深色为主，数据可以采用亮色</strong>，有一定的对比关系，便于业务信息传达。<strong>字体上可以采用系统默认字体，数字可以采用系统默认的等宽字体<code>Monaco</code></strong>。图表选择恰当的展示形式，同时要保证视觉上的统一（分清页面的主次关系，图表的展示切莫设计过度，容易造成抢主体）</li>
<li>设计后：再次<strong>校验</strong>信息层级、文字大小、图表等各层级间的对比关系是否传达准确并评估技术的实现性。最后开发完成后要拿演示demo去现场测试，看下整体展示效果，测试输出是否有问题，有无拉伸问题，拼接缝与内容有无穿插，完成校验工作后，才算是设计的最终完成。</li>
</ul>
<p>下面针对可视化设计中布局、风格、主视觉、信息图表、字体、规范、动效等7个方向进行讲解。</p>
<h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><p>通过硬件设备信息可以得到可视化的设计尺寸，基于尺寸新建设计画布，第一件事就需考虑页面的整体布局。常见的大屏布局：居中结构、左右结构两种常见的布局形式以常规的16:9模板为例，下面列举的一些常见的布局形式。</p>
<h3 id="居中结构"><a href="#居中结构" class="headerlink" title="居中结构"></a>居中结构</h3><p><img src="/2023/11/29/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F%E8%AE%BE%E8%AE%A1%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/8.jpg" alt></p>
<p><img src="/2023/11/29/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F%E8%AE%BE%E8%AE%A1%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/9.jpg" alt></p>
<p>异形超宽拼接屏幕</p>
<p><img src="/2023/11/29/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F%E8%AE%BE%E8%AE%A1%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/10.jpg" alt></p>
<h3 id="左右结构"><a href="#左右结构" class="headerlink" title="左右结构"></a>左右结构</h3><p><img src="/2023/11/29/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F%E8%AE%BE%E8%AE%A1%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/11.jpg" alt><img src="/2023/11/29/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F%E8%AE%BE%E8%AE%A1%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/12.jpg" alt></p>
<p>布局的原则是主次一定要分明，根据业务需求抽取关键性指标，提取主要信息。可以在纸上大概画一下，然后在软件里具体细化布局。避免次要信息的面积过大、喧宾夺主，影响整体的视觉效果。</p>
<h2 id="风格"><a href="#风格" class="headerlink" title="风格"></a>风格</h2><p><strong>定义设计风格</strong>：一般会基于业务需求场景去定义几个设计关键词，根据关键词去找一些参考图，推导出贴合业务的设计风格。              </p>
<p><img src="/2023/11/29/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F%E8%AE%BE%E8%AE%A1%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/13.jpg" alt></p>
<p>通过调整颜色、装饰细节、主视觉、字体等一些细节点控制区分不同的设计风。以图表举例，只需要调整卡片和标题的装饰，就能展现出不同的设计风格。</p>
<p><img src="/2023/11/29/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F%E8%AE%BE%E8%AE%A1%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/14.jpg" alt></p>
<h2 id="主视觉"><a href="#主视觉" class="headerlink" title="主视觉"></a>主视觉</h2><p>主视觉部分大致分为：地球、地图、智慧城市、行业类业务展示等。目前比较容易出效果的都会采用三维模型的处理方式。</p>
<p><strong>地球：</strong>粒子地球、地球贴图、地球模型。</p>
<p><img src="/2023/11/29/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F%E8%AE%BE%E8%AE%A1%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/15.gif" alt></p>
<p><img src="/2023/11/29/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F%E8%AE%BE%E8%AE%A1%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/16.jpg" alt></p>
<p><strong>地图：</strong>第三方在线地图（百度、高德、腾讯、谷歌）基于地图开发平台进行个性化配置。或者通过地理位置数据建模：如全国和各个省份的轮廓模型。</p>
<p><img src="/2023/11/29/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F%E8%AE%BE%E8%AE%A1%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/17.jpg" alt></p>
<p><strong>智慧城市：</strong>GIS参数化生成建模和重点楼宇定制化建模<img src="/2023/11/29/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F%E8%AE%BE%E8%AE%A1%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/18.gif" alt></p>
<p><strong>行业类：</strong>多数为定制化建模。如工业类、医疗类、能源类、园区、学校、港口、工厂、仓储库房、零售、工程、安防、国防军工等。<img src="/2023/11/29/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F%E8%AE%BE%E8%AE%A1%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/19.jpg" alt></p>
<h2 id="信息图表"><a href="#信息图表" class="headerlink" title="信息图表"></a>信息图表</h2><p>图表的设计原则是易理解、可实现，能够准确表达数据意图，给用户传达明确信息。下图通过使用常见可分为比较、联系、构成、分布四个维度解释图表的不同属性类别。在做可视化大屏设计时可参照下图，选择对应的数据图表。更详细的图表释义可在这里查看：<a href="https://antv-2018.alipay.com/zh-cn/vis/chart/index.html">图表用法 - AntV (alipay.com)</a></p>
<p><img src="/2023/11/29/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F%E8%AE%BE%E8%AE%A1%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/20.jpg" alt></p>
<h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p>可视化大屏设计中字体的运用原理跟网页app的逻辑基本一致。在字体选择上会基于业务需求选择对应的字体与设计风格结合。要注意字体有无衬线、字重、字距等。</p>
<p>大屏设计中，中文字体一般会采用浏览器默认字体（微软雅黑、思源黑体、苹方等）页面中标题会采用特殊字体处理。常用的字体有：优设标题黑、旁门正道标题体、时尚中黑简体、方正正中黑体等。</p>
<p>英文数字字体推荐：Din、Monaco、DS-Digtal、Bebas、Acens、DS-DIGIB、Roboto等。</p>
<h3 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h3><p>建立规范的主要目的是：保证设计的一致性、提高开发效率和还原度以方便迭代。可视化设计中规范一般会分为：色彩、文字、图表、标题控件等，跟网页端规范同理。</p>
<h3 id="动效"><a href="#动效" class="headerlink" title="动效"></a>动效</h3><p>大数据可视化大屏设计少不了动效，动效是可视化重要的组成部分，他能增加观感体验、凸显关键产品内容、强调功能信息关联，帮助用户理解产品、情感化互动。但过分的动效极其容易喧宾夺主，影响用户阅读，反而弱化了数据的展示。</p>
<p>动效的设计原则如下图所示:</p>
<p><img src="/2023/11/29/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F%E8%AE%BE%E8%AE%A1%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/21.jpg" alt></p>
<p>动效应优先满足核心内容、故事线。常见的大屏动效-展示类，用于突出产品核心功能和特点。界面信息按照一定的规律呈现，引导用户的视觉流向。好的大屏设计在数据展示模块上动效最好不要过多，要有一定的主次关系变化。动效也有结合数据变化，考虑极端情况的展示效果，最终输出一套完整的动效方案。</p>
]]></content>
      <categories>
        <category>大屏设计</category>
        <category>可视化</category>
      </categories>
      <tags>
        <tag>可视化</tag>
        <tag>大屏设计</tag>
      </tags>
  </entry>
  <entry>
    <title>在Vue中使用el-editor编辑器</title>
    <url>/2023/11/21/%E5%9C%A8Vue%E4%B8%AD%E4%BD%BF%E7%94%A8el-editor%E7%BC%96%E8%BE%91%E5%99%A8/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>实际项目中，多处使用到富文本编辑器，每次都配置会比较麻烦，故将要用到的功能封装到一起，需要时可直接调用，故发布了el-editor编辑器。</p>
<h1 id="富文本编辑器v1-0-1"><a href="#富文本编辑器v1-0-1" class="headerlink" title="富文本编辑器v1.0.1"></a>富文本编辑器v1.0.1</h1><p><img src="/2023/11/21/%E5%9C%A8Vue%E4%B8%AD%E4%BD%BF%E7%94%A8el-editor%E7%BC%96%E8%BE%91%E5%99%A8/editor.png" alt></p>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul>
<li>编辑器基于vue-quill-editor和element封装，目前版本仅支持vue2</li>
<li>与其他编辑器相比，本编辑器支持秀米编辑器、135编辑器样式的粘贴复制</li>
<li>注意，当前编辑器仅提供前端代码，编辑器默认不转存秀米图表，若需要开启这一功能，需要向<code>handlePic</code>参数传真值<code>true</code>，然后编写一个后端接口来实现秀米图片的转存，接口名默认为<code>editor/get_xiumi_pic</code>，可通过参数<code>picURL</code>自行修改</li>
</ul>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="下载组件"><a href="#下载组件" class="headerlink" title="下载组件"></a>下载组件</h3><p>方法一：</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">npm install el-editor@1.0.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>方法二：</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">yarn add el-editor@1.0.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="下载html文件并放到public目录下"><a href="#下载html文件并放到public目录下" class="headerlink" title="下载html文件并放到public目录下"></a>下载html文件并放到public目录下</h3><p>文件地址：<a href="https://tangjue.lanzouw.com/iLXdy1fgwbja">https://tangjue.lanzouw.com/iLXdy1fgwbja</a></p>
<h2 id="引入富文本编辑器："><a href="#引入富文本编辑器：" class="headerlink" title="引入富文本编辑器："></a>引入富文本编辑器：</h2><p>在main.js中引入组件：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span>
<span class="token keyword">import</span> editor <span class="token keyword">from</span> <span class="token string">"el-editor"</span>
<span class="token keyword">import</span> <span class="token string">"../node_modules/el-editor/el-editor.css"</span>
Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>editor<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>在需要用到的页面直接使用组件：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>quill_editor <span class="token operator">:</span>content<span class="token operator">=</span><span class="token string">"content"</span> ：picURL<span class="token operator">=</span><span class="token string">"editor/get_xiumi_pic"</span><span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><strong>参数详情：</strong></p>
<div class="table-container">
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数含义</th>
<th>默认值</th>
<th>该参数是否必填</th>
</tr>
</thead>
<tbody>
<tr>
<td>content</td>
<td>编辑器的内容</td>
<td>null</td>
<td>是</td>
</tr>
<tr>
<td>disabled</td>
<td>是否禁用编辑器</td>
<td>false</td>
<td>否</td>
</tr>
<tr>
<td>disabledStyle</td>
<td>设置编辑器被禁用时的样式</td>
<td>{background: “#f5f7fa”,color: “#c0c4cc”,cursor: “not-allowed”,borderRadius: “4px”,border: “1px solid #dcdfe6”}</td>
<td>否</td>
</tr>
<tr>
<td>editorStyle</td>
<td>设置编辑器的样式</td>
<td>minHeight: ‘180px’,即最小高度180px</td>
<td>否</td>
</tr>
<tr>
<td>handlePic</td>
<td>设置是否开启秀米图片转存</td>
<td>false</td>
<td>否</td>
</tr>
<tr>
<td>hidetool</td>
<td>是否隐藏所有的工具栏</td>
<td>false</td>
<td>否</td>
</tr>
<tr>
<td>options</td>
<td>工具栏配置参数，可通过这一参数自定义定制工具栏</td>
<td>{},为一个空对象</td>
<td>否</td>
</tr>
<tr>
<td>picURL</td>
<td>秀米图片转存后端接口路径</td>
<td>默认路径为”editor/get_xiumi_pic”，接口参数为一个名叫urlList的列表</td>
<td>否</td>
</tr>
<tr>
<td>placeholder</td>
<td>编辑器提示输入的文字</td>
<td>“请输入内容”</td>
<td>否</td>
</tr>
</tbody>
</table>
</div>
<h2 id="展示编辑器输入的内容"><a href="#展示编辑器输入的内容" class="headerlink" title="展示编辑器输入的内容"></a>展示编辑器输入的内容</h2><p>通过v-html可将输入到编辑器中的内容展示出来：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;div v-html&#x3D;&quot;content&quot; class&#x3D;&quot;ql-editor&quot; &gt;&#123;&#123; content &#125;&#125;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>结构性思维笔记</title>
    <url>/2022/08/07/%E7%BB%93%E6%9E%84%E6%80%A7%E6%80%9D%E7%BB%B4%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="结构性思维笔记"><a href="#结构性思维笔记" class="headerlink" title="结构性思维笔记"></a>结构性思维笔记</h1><p>以思维导图的格式记录结构性思维课程的笔记，顺便练习一下Markdown的无序列表语法。</p>
<h2 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h2><p><img src="/2022/08/07/%E7%BB%93%E6%9E%84%E6%80%A7%E6%80%9D%E7%BB%B4%E7%AC%94%E8%AE%B0/1.png" alt></p>
<h2 id="笔记内容"><a href="#笔记内容" class="headerlink" title="笔记内容"></a>笔记内容</h2><ul>
<li><p>课程导入</p>
<ul>
<li><p>结构与思维的力量</p>
<ul>
<li><p>结构的定义:组成整体的各部分的搭配和安排</p>
</li>
<li><p>结构性思维的训练目的:想清楚、说明白</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>两个核心训练原则</p>
<ul>
<li><p>利他性原则</p>
<ul>
<li><p>从TA的角度思考表达（即随时发问”我讲明白了吗？”）</p>
</li>
<li><p>TA决定我是否清楚结构</p>
</li>
</ul>
</li>
<li><p>讲理性原则</p>
<ul>
<li><p>从感性到理性</p>
</li>
<li><p>从隐性到显性</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>构建结构性思维</p>
<ul>
<li><p>结构性思维的四个基本特点</p>
<ul>
<li><p>结论先行</p>
<ul>
<li><p>时间紧</p>
</li>
<li><p>他需要</p>
</li>
<li><p>信息多</p>
</li>
</ul>
</li>
<li><p>上下对应</p>
</li>
<li><p>分类清晰</p>
</li>
<li><p>排列逻辑</p>
</li>
</ul>
</li>
<li><p>结构性思维接收信息</p>
<ul>
<li>不带任何主观色彩的去接收别人信息的传递</li>
</ul>
</li>
<li><p>第一步:识别</p>
<ul>
<li>识别信息中的事实与个人观念或判断</li>
</ul>
</li>
<li><p>第二步:对应</p>
<ul>
<li>找到事实与观点之间的对应关系</li>
</ul>
</li>
<li><p>第三步:结构</p>
<ul>
<li>画出结构性关系图</li>
</ul>
</li>
<li><p>第四步:表达</p>
<ul>
<li>用语言表达信息的主要含义</li>
</ul>
</li>
</ul>
</li>
<li><p>纵向的问答/概括式结构</p>
<ul>
<li><p>自上而下的疑问回答式</p>
<ul>
<li><p>第一步:设定场景</p>
</li>
<li><p>第二步:确定主题</p>
</li>
<li><p>第三步:设想问题</p>
</li>
<li><p>第四步:回答问题</p>
</li>
<li><p>要问到多深？</p>
<ul>
<li>最后回答中都是公理、定理为止</li>
</ul>
</li>
<li><p>要问到多宽？</p>
<ul>
<li>直到主题句中所有关键词都被问到</li>
</ul>
</li>
</ul>
</li>
<li><p>自下而上的概括总结式</p>
<ul>
<li>找到论点中的共性，所概括出来的主题需要囊括所有论点的观点</li>
</ul>
</li>
</ul>
</li>
<li><p>横向的演绎与归纳逻辑结构</p>
<ul>
<li><p>演绎论证结构（从一般到特殊）</p>
<ul>
<li><p>演绎论证的定义</p>
<ul>
<li>从普遍性的理论知识出发，去认识个别的、特殊的现象的一种论证推理方法</li>
</ul>
</li>
<li><p>演绎的两种形式</p>
<ul>
<li><p>标准式 三段论</p>
<ul>
<li>大前提→小前提→结论</li>
</ul>
</li>
<li><p>常见式</p>
<ul>
<li>现象→原因→解决方案</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>归纳论证结构（从特殊到一般）</p>
<ul>
<li>归纳论证的定义<ul>
<li>从许多个别的事物中概括出一般性概念、原则或结论的推理方法</li>
</ul>
</li>
</ul>
</li>
<li><p>排序的三种形式</p>
<ul>
<li><p>时间顺序</p>
<ul>
<li>时间的先后顺序，事件彼此可能存在因果，可能不 存在因果</li>
</ul>
</li>
<li><p>结构性顺序</p>
<ul>
<li>将整体分为部分，例如顺时针、从上到下等</li>
</ul>
</li>
<li><p>重要性顺序</p>
<ul>
<li>将事物按重要性或非重要性分组</li>
</ul>
</li>
</ul>
</li>
<li><p>分类的MECE原则</p>
<ul>
<li><p>MECE原则</p>
<ul>
<li><p>相互独立</p>
</li>
<li><p>完全穷尽</p>
</li>
<li><p>互不交叉</p>
</li>
<li><p>应有尽有</p>
</li>
<li><p>不重不漏</p>
</li>
<li><p>分清分净</p>
</li>
<li><p>MECE原则使用前提</p>
<ul>
<li>界定范围</li>
<li>明确标准</li>
</ul>
</li>
</ul>
</li>
<li><p>常见分类</p>
<ul>
<li>二分法<ul>
<li>如内外;左右;男女;收支;专业和业余</li>
</ul>
</li>
<li>过程法<ul>
<li>如日程表，解决问题的6个步骤，达成目标的3个阶段</li>
</ul>
</li>
<li>要素法<ul>
<li>优秀员工的7种品质，公司的组织架构图</li>
</ul>
</li>
<li>公式法<ul>
<li>销售额＝单价*数量</li>
</ul>
</li>
<li>矩阵法<ul>
<li>重要紧急象限图;swot分析</li>
</ul>
</li>
<li>市场战略3C模型<ul>
<li>公司、顾客、竞争对手</li>
</ul>
</li>
<li>市场营销决策4P模型<ul>
<li>产品、价格、渠道、促销</li>
</ul>
</li>
<li>目标制定的SMART原则<ul>
<li>S:具体的</li>
<li>M:可衡量的</li>
<li>A:可达成的</li>
<li>R:相关的</li>
<li>T:可实现的</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>序言的讲故事结构</p>
<ul>
<li>序言结构的基本要素<ul>
<li>S:背景</li>
<li>C:冲突</li>
<li>Q:疑问</li>
<li>A:回答</li>
</ul>
</li>
<li>常见的序言模式<ul>
<li>标准式<ul>
<li>S→C→Q→A</li>
</ul>
</li>
<li>开门见山式<ul>
<li>A→S→C</li>
</ul>
</li>
<li>突出忧虑式<ul>
<li>C→S→Q→A</li>
</ul>
</li>
<li>突出信心式<ul>
<li>Q→S→C→A</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>结构性思维</tag>
      </tags>
  </entry>
  <entry>
    <title>实现Postgresql与Elasticsearch的数据同步</title>
    <url>/2023/01/17/%E5%AE%9E%E7%8E%B0Postgresql%E4%B8%8EElasticsearch%E7%9A%84%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/</url>
    <content><![CDATA[<p>遇到一个针对业务数据实现全文搜素的需求，而数据存在于pgsql数据库中，因此要将数据库中的数据同步到ES里。有两种方式可以实现：一是通过ES的API进行增删改查，二是通过中间件来进行数据全量、增量的同步。由于调用API的方式比较麻烦，本文便为第二种实现方式。</p>
<p>刚开始时是准备使用<code>multicorn</code>插件的，奈何在windows 10的环境下一直都无法进行<code>make&amp;&amp;make install</code>安装，而由于环境问题也无法使用<a href="https://github.com/appbaseio/abc">ABC</a>工具（不支持postgresql14），随即作罢，改换成实时数据采集引擎<code>logstash</code>来同步数据。</p>
<h1 id="logstash概要"><a href="#logstash概要" class="headerlink" title="logstash概要"></a><code>logstash</code>概要</h1><p><code>Logstash</code>作为Elasicsearch常用的实时数据采集引擎，可以采集来自不同数据源的数据，并对数据进行处理后输出到多种输出源，是Elastic Stack 的重要组成部分。官网网址为：<a href="https://www.elastic.co/cn/downloads/logstash">Logstash</a></p>
<p>其数据处理的过程包括Inputs、Filters、Outputs三部分，在Inputs和Outputs中可以使用Codecs对数据格式进行处理。这四个部分均是以插件形式存在，用户通过定义pipeline配置文件，设置需要使用的input、filter、output、codec插件以实现特定的数据采集、数据处理、数据输出等功能。</p>
<ul>
<li>Inputs：用于从数据源获取数据，常见的插件如<code>file</code>、<code>syslog</code>、<code>redis</code>、<code>beats</code>等</li>
<li>Filters：用于处理数据如格式转换、数据派生等，常见的插件如<code>grok</code>、<code>mutate</code>、<code>drop</code>、<code>clone</code>、<code>geoip</code>等</li>
<li>Outputs：用于数据输出，常见的插件如<code>elasticsearch</code>、<code>file</code>、<code>graphite</code>、<code>statsd</code>等</li>
<li><code>Codecs</code>：<code>Codecs</code>不是一个单独的流程，而是在输入和输出等插件中用于数据转换的模块，用于对数据进行编码处理，常见的插件如<code>json</code>、<code>multiline</code>等</li>
</ul>
<p>在<a href="https://github.com/appbaseio/abc/releases/tag/1.0.0">网页</a>中下载好对应版本的可运行文件并解压，将解压目录增加到环境变量中，即可在cmd命令行里运行。</p>
<h1 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h1><h2 id="本文环境要求"><a href="#本文环境要求" class="headerlink" title="本文环境要求"></a>本文环境要求</h2><p>系统版本：window10</p>
<p>JDK版本：1.8.0_351（要求jdk版本在1.8以上）</p>
<p>Elasticsearch版本：5.5.3</p>
<p>Postgresql版本：14.5</p>
<h2 id="安装—单表同步配置"><a href="#安装—单表同步配置" class="headerlink" title="安装—单表同步配置"></a>安装—单表同步配置</h2><ul>
<li><p>安装logstash：5.5.3（ELK版本要求保持一致），下载网址：<a href="https://www.elastic.co/cn/downloads/past-releases/logstash-5-5-3">logstash 5.5.3</a></p>
</li>
<li><p>将安装包解压后，进入解压目录<code>logstash-5.5.3\bin</code>后，新建pgsql文件夹（名字随意）</p>
</li>
<li><p>下载连接postgreSQL数据库的pg引擎，即与JDK版本对应的jdbc驱动：<a href="https://jdbc.postgresql.org/download/">Java 8-42.5.1</a>，解压后放到pgsql文件夹中</p>
</li>
<li><p>在pgsql文件夹中新建文件<code>logstash-pgsql.conf</code>，内容如下：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">input &#123;
    stdin &#123;
    &#125;
    jdbc &#123;
      # 数据库连接地址
      jdbc_connection_string &#x3D;&gt; &quot;jdbc:postgresql:&#x2F;&#x2F;127.0.0.1:5432&#x2F;postgres&quot;
      # 数据库连接账号密码：
      jdbc_user &#x3D;&gt; &quot;***&quot;
      jdbc_password &#x3D;&gt; &quot;******&quot;
      # Pg依赖包路径
      jdbc_driver_library &#x3D;&gt; &quot;pgsql\postgresql-42.5.1.jar&quot;
      jdbc_driver_class &#x3D;&gt; &quot;org.postgresql.Driver&quot;
      # 开启分页查询，默认为false
      jdbc_paging_enabled &#x3D;&gt; &quot;true&quot;
      # 单次分页查询条数（默认100000，若字段较多且更新频率较高，则建议调低此值）
      jdbc_page_size &#x3D;&gt; &quot;300000&quot;
      use_column_value &#x3D;&gt; &quot;true&quot;
      tracking_column &#x3D;&gt; &quot;id&quot; #根据id字段更新
      # statement为查询数据sql，若sql较复杂，建议通过statement_filepath 配置sql文件的存放路径；
      # statement &#x3D;&gt; &quot;SELECT * FROM public.表名&quot;
      statement_filepath &#x3D;&gt; &quot;pgsql\logstash-pgsql.sql&quot;  #这是要操作的sql 表，下面会提供
          # 同步频率（分时天月年），默认为每分钟同步一次
          schedule &#x3D;&gt; &quot;* * * * *&quot;
          type &#x3D;&gt; &quot;jdbc&quot;
          jdbc_default_timezone &#x3D;&gt;&quot;Asia&#x2F;Shanghai&quot;
    &#125;
&#125;
filter &#123;
    json &#123;
        source &#x3D;&gt; &quot;message&quot;
        remove_field &#x3D;&gt; [&quot;message&quot;]
    &#125;
&#125;
output &#123;
    elasticsearch &#123;
        # 配置es集群的地址
        hosts &#x3D;&gt; [&quot;localhost:9200&quot;]
        # 索引名称，必须小写
        index &#x3D;&gt; &quot;test&quot;
        # 模板地址
              template &#x3D;&gt; &quot;pgsql\es-template.json&quot;   #es 索引模板，可不定义
              template_name &#x3D;&gt; &quot;t-statistic-out-logstash&quot;
              template_overwrite &#x3D;&gt; true
              document_type &#x3D;&gt; &quot;out&quot;
        # 数据唯一索引
        document_id &#x3D;&gt; &quot;%&#123;id&#125;&quot;
    &#125;
    stdout &#123;
        codec &#x3D;&gt; json_lines
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>在pgsql文件夹中新建文件<code>logstash-pgsql.sql</code>，内容如下：</p>
  <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">SELECT * FROM public.&quot;表名&quot;
ORDER BY id ASC <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>在pgsql文件夹中新建文件<code>es-template.json</code>，内容如下：</p>
  <pre class="line-numbers language-json" data-language="json"><code class="language-json">&#123;
    &quot;template&quot; : &quot;t-statistis-out-template&quot;, 
    &quot;order&quot;:1,
    &quot;settings&quot;: &#123;
            &quot;index&quot;: &#123;
                &quot;refresh_interval&quot;: &quot;5s&quot;
            &#125;
        &#125;,
        &quot;mappings&quot;: &#123;
            &quot;_default_&quot;: &#123;
            &quot;_all&quot; : &#123;&quot;enabled&quot;:false&#125;, 
                &quot;dynamic_templates&quot;: [
                    &#123; 
              &quot;message_field&quot; : &#123; 
                &quot;match&quot; : &quot;message&quot;, 
                &quot;match_mapping_type&quot; : &quot;string&quot;, 
                &quot;mapping&quot; : &#123; &quot;type&quot; : &quot;string&quot;, &quot;index&quot; : &quot;not_analyzed&quot; &#125; 
              &#125; 
            &#125;, &#123; 
              &quot;string_fields&quot; : &#123; 
                &quot;match&quot; : &quot;*&quot;, 
                &quot;match_mapping_type&quot; : &quot;string&quot;, 
                &quot;mapping&quot; : &#123; &quot;type&quot; : &quot;string&quot;, &quot;index&quot; : &quot;not_analyzed&quot; &#125; 
              &#125; 
            &#125;
                ],
                &quot;properties&quot;: &#123; &#x2F;&#x2F;将id、name、tag更换为自己表中的表头，其中keyword为Elasticsearch中用于索引结构化内容的字段
                    &quot;id&quot;: &#123;
                        &quot;type&quot;: &quot;integer&quot;
                    &#125;,
                    &quot;name&quot;: &#123;
                        &quot;type&quot;: &quot;keyword&quot;
                    &#125;,                    
                    &quot;tag&quot;: &#123;
                        &quot;type&quot;: &quot;keyword&quot;
                    &#125;                  
                &#125;
            &#125;
        &#125;,
        &quot;aliases&quot;: &#123;&#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>打开cmd，将目录切换到<code>logstash-5.5.3\bin</code>，输入命令启动logstash：</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">logstash -f .&#x2F;pgsql&#x2F;logstash-pgsql.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>成功启动的截图如下：<img src="/2023/01/17/%E5%AE%9E%E7%8E%B0Postgresql%E4%B8%8EElasticsearch%E7%9A%84%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/1.png" alt></p>
</li>
</ul>
<h2 id="安装—多表同步配置"><a href="#安装—多表同步配置" class="headerlink" title="安装—多表同步配置"></a>安装—多表同步配置</h2><p>多表配置和单表配置的区别在于input模块的jdbc模块有几个type，output模块就需对应有几个type：</p>
<ul>
<li><p><code>logstash-pgsql.conf</code>文件的内容如下：</p>
  <pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">input &#123;
    stdin &#123;
    &#125;
    jdbc &#123;
      # 数据库连接地址
      jdbc_connection_string &#x3D;&gt; &quot;jdbc:postgresql:&#x2F;&#x2F;127.0.0.1:5432&#x2F;postgres&quot;
      # 数据库连接账号密码：
      jdbc_user &#x3D;&gt; &quot;***&quot;
      jdbc_password &#x3D;&gt; &quot;******&quot;
      # Pg依赖包路径
      jdbc_driver_library &#x3D;&gt; &quot;pgsql\postgresql-42.5.1.jar&quot;
      jdbc_driver_class &#x3D;&gt; &quot;org.postgresql.Driver&quot;
      # 开启分页查询，默认为false
      jdbc_paging_enabled &#x3D;&gt; &quot;true&quot;
      # 单次分页查询条数（默认100000，若字段较多且更新频率较高，则建议调低此值）
      jdbc_page_size &#x3D;&gt; &quot;300000&quot;
      use_column_value &#x3D;&gt; &quot;true&quot;
      tracking_column &#x3D;&gt; &quot;id&quot; #根据id字段更新
      # statement为查询数据sql，若sql较复杂，建议通过statement_filepath 配置sql文件的存放路径；
      # statement &#x3D;&gt; &quot;SELECT * FROM public.test1&quot;
      statement_filepath &#x3D;&gt; &quot;pgsql\logstash-pgsql1.sql&quot;  #这是要操作的sql 表，下面会提供
          # 同步频率（分时天月年），默认为每分钟同步一次
          schedule &#x3D;&gt; &quot;* * * * *&quot;
          # 多表同步时，表类型区分，建议命名为“库名_表名”，每个jdbc模块需对应一个type；
          type &#x3D;&gt; &quot;postgres_test1&quot;
          jdbc_default_timezone &#x3D;&gt;&quot;Asia&#x2F;Shanghai&quot;
    &#125;
    jdbc &#123;
          #其他配置此处省略，详情参考前一个jdbc的配置
          # ...
          
          # 多表同步时，表类型区分，建议命名为“库名_表名”，每个jdbc模块需对应一个type；
          type &#x3D;&gt; &quot;postgres_test2&quot;
          jdbc_default_timezone &#x3D;&gt;&quot;Asia&#x2F;Shanghai&quot;
    &#125;
&#125;
filter &#123;
    json &#123;
        source &#x3D;&gt; &quot;message&quot;
        remove_field &#x3D;&gt; [&quot;message&quot;]
    &#125;
&#125;
output &#123;
    # output模块的type需和jdbc模块的type一致
    if [type] &#x3D;&#x3D; &quot;postgres_test1&quot;&#123;
        elasticsearch &#123;
            # 配置es集群的地址
            hosts &#x3D;&gt; [&quot;localhost:9200&quot;]
            # 索引名称，必须小写
            index &#x3D;&gt; &quot;test&quot;
            # 模板地址
                  template &#x3D;&gt; &quot;pgsql\es-template.json&quot;   #es 索引模板，可不定义
                  template_name &#x3D;&gt; &quot;t-statistic-out-logstash&quot;
                  template_overwrite &#x3D;&gt; true
                  document_type &#x3D;&gt; &quot;out&quot;
            # 数据唯一索引
            document_id &#x3D;&gt; &quot;%&#123;id&#125;&quot;
        &#125;
    &#125;
    if [type] &#x3D;&#x3D; &quot;postgres_test2&quot;&#123;
        elasticsearch &#123;
            # 配置es集群的地址
            hosts &#x3D;&gt; [&quot;localhost:9200&quot;]
            # 索引名称，必须小写
            index &#x3D;&gt; &quot;test&quot;
            # 模板地址
                  template &#x3D;&gt; &quot;pgsql\es-template.json&quot;   #es 索引模板，可不定义
                  template_name &#x3D;&gt; &quot;t-statistic-out-logstash&quot;
                  template_overwrite &#x3D;&gt; true
                  document_type &#x3D;&gt; &quot;out&quot;
            # 数据唯一索引
            document_id &#x3D;&gt; &quot;%&#123;id&#125;&quot;
        &#125;
    &#125;
    stdout &#123;
        codec &#x3D;&gt; json_lines
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
]]></content>
      <categories>
        <category>Elasticsearch</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>自动化接口测试：（一）Postman</title>
    <url>/2024/06/14/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%EF%BC%9A%EF%BC%88%E4%B8%80%EF%BC%89Postman/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在开发过程中，开发完一个功能后，若是手动一个个取测试新旧功能接口是否正常的操作会比较重复乏味，因此学会对接口自动化测试，一键对新旧接口进行测试可以大大提升功能测试的速度，减少线上出bug的频率。</p>
<p>本文默认读者已掌握Postman基本用法，即已经会使用Postman进行模拟请求的操作。</p>
<p>本文的软件版本如下，不同版本页面的UI和部分功能位置可能会有点不同：</p>
<ul>
<li>window10 64位</li>
<li>Postman for Windows 11.2.1</li>
</ul>
<p>下面将从四点讲述自动化接口测试过程：</p>
<ul>
<li>接口结果判断：接口是否请求成功</li>
<li>接口批量测试</li>
<li>接口定期测试</li>
<li>接口数据依赖</li>
</ul>
<h1 id="接口结果判断"><a href="#接口结果判断" class="headerlink" title="接口结果判断"></a>接口结果判断</h1><p>接口返回结果主要有两个部分组成：请求返回的<code>code</code>和内容<code>data</code>。</p>
<p>因此在使用Postman测试时，主要从两个方面来判断接口结果是否正确：</p>
<ul>
<li>请求返回的code是否符合预期</li>
<li>请求返回的内容中是否包含预期的内容或关键字</li>
</ul>
<p><strong>旧版本</strong>的Postman功能区在最显眼的地方点击<strong><code>Tests</code></strong>字样，将会切换到接口测试功能，可以在当前面板中编写测试脚本，点击字样，将会切换到预请求脚本的编写页面，可以编写请求运行之前所要执行的JavaScript。</p>
<p><img src="/2024/06/14/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%EF%BC%9A%EF%BC%88%E4%B8%80%EF%BC%89Postman/1.png" alt></p>
<p><strong>新版本</strong>的Postman将预请求脚本和测试脚本合并为一个功能区<strong><code>Scripts</code></strong>，其中在<strong><code>Pre-req</code></strong>面板编写预请求脚本，在<strong><code>Post-res</code></strong>面板里编写测试脚本</p>
<p><img src="/2024/06/14/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%EF%BC%9A%EF%BC%88%E4%B8%80%EF%BC%89Postman/2.png" alt></p>
<p>注意：在面板中只需要书写结果逻辑判断的代码块，<strong>脚本语言只支持<code>JavaScript</code></strong>。在面板右侧的<strong><code>Snippets</code></strong>功能区中，Postman也提供了一些常用的代码模板，利用模板就能处理大部分的情况。</p>
<p>注意：在Postman for Windows 11.2.1中tests、responseBody对象已弃用，因此需要使用断言。如以下代码无法在新版本里生效：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//检查response body中是否包含某个string</span>
tests<span class="token punctuation">[</span><span class="token string">"Body matches string"</span><span class="token punctuation">]</span> <span class="token operator">=</span> responseBody<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">"string_you_want_to_search"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>具体的代码模板及其注释将附在文末的附录中，有需要的可去文章末尾了解</p>
<h1 id="接口批量测试"><a href="#接口批量测试" class="headerlink" title="接口批量测试"></a>接口批量测试</h1><h2 id="批量管理"><a href="#批量管理" class="headerlink" title="批量管理"></a>批量管理</h2><p>若想要对接口进行批量测试、统一管理，需要将所有带测试接口全部保存到同一个集合<code>Collections</code>中，这样就可以对接口进行统一管理了。</p>
<p>例如下图中点击save按钮或者按下<code>ctrl+s</code>将<code>test</code>接口保存到test的集合中<img src="/2024/06/14/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%EF%BC%9A%EF%BC%88%E4%B8%80%EF%BC%89Postman/3.png" alt></p>
<p><img src="/2024/06/14/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%EF%BC%9A%EF%BC%88%E4%B8%80%EF%BC%89Postman/4.png" alt></p>
<p>点击集合名称<code>test</code>打开集合页面，选择<strong><code>Scripts</code></strong>功能区，便可打开集合详情页面</p>
<p><img src="/2024/06/14/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%EF%BC%9A%EF%BC%88%E4%B8%80%EF%BC%89Postman/5.png" alt></p>
<p>其中<code>Overview</code>为集合概况页；</p>
<p>切换到<code>Authorization</code>可设置接口验证类型；</p>
<p>切换到<code>Scripts</code>可设置接口的测试脚本；</p>
<p>切换到<code>Variables</code>可添加用于编写接口测试脚本的参数变量；</p>
<p>切换到<code>Runs</code>可设置测试任务中接口运行次数、时间间隔、定期运行等状态，并执行测试任务；</p>
<h2 id="向接口传递动参"><a href="#向接口传递动参" class="headerlink" title="向接口传递动参"></a>向接口传递动参</h2><p>若想要向接口传入动态变化的参数，可按照下述步骤操作：</p>
<ul>
<li>对于GET请求，可以在Patams的<code>Value</code>中设置动参引用。如key中输入<code>name</code>， Value中输入<code>&#123;&#123;name&#125;&#125;</code><img src="/2024/06/14/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%EF%BC%9A%EF%BC%88%E4%B8%80%EF%BC%89Postman/6.png" alt></li>
<li>对于POST请求，可以将参数输入切换到Body的<code>x-www-form-urlencoded</code>类型，然后在<code>Value</code>中设置动参引用。如key中输入<code>name</code>， Value中输入<code>&#123;&#123;name&#125;&#125;</code><img src="/2024/06/14/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%EF%BC%9A%EF%BC%88%E4%B8%80%EF%BC%89Postman/7.png" alt></li>
</ul>
<p>此处设置好Value后，暂无法使用，需要在预请求脚本中或导入数据集给变量赋值后才能正常使用。</p>
<p><strong>注意：设置好数据集的请求，会将数据集中的数据遍历完成后才视作该接口已完成请求。</strong></p>
<h3 id="预请求给变量赋值"><a href="#预请求给变量赋值" class="headerlink" title="预请求给变量赋值"></a>预请求给变量赋值</h3><p>点击Scripts功能区的Pre-request模块，即可编写预请求脚本，页面右方提供了一些常用代码模板可供使用，可以在这里参照代码模板给刚刚设定的动参赋值。</p>
<p>如下图功能为将name变量的值设为’test’并获取name变量的值，<img src="/2024/06/14/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%EF%BC%9A%EF%BC%88%E4%B8%80%EF%BC%89Postman/8.png" alt></p>
<h3 id="导入数据集批量赋值"><a href="#导入数据集批量赋值" class="headerlink" title="导入数据集批量赋值"></a>导入数据集批量赋值</h3><p>首先点击集合名称-Runs功能区-Preformance页面，点击<code>Run Performance Test</code>按钮创建测试任务（任务触发方式默认为手动触发）。</p>
<p>在新弹出的页面中，找到Data File模块，即可在这里上传测试数据文件来实现动参赋值。目前仅支持上传<code>CSV</code>或<code>JSON</code>文件.</p>
<ul>
<li><p>CSV文件数据格式要求如下：<img src="/2024/06/14/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%EF%BC%9A%EF%BC%88%E4%B8%80%EF%BC%89Postman/11.png" alt></p>
</li>
<li><p>JSON文件数据格式要求如下：</p>
  <pre class="line-numbers language-json" data-language="json"><code class="language-json">[
  &#123;
    &quot;name&quot;: &quot;zhangsan&quot;,
    &quot;number&quot;: &quot;123&quot;
  &#125;,
  &#123;
    &quot;name&quot;: &quot;lisi&quot;,
    &quot;number&quot;: &quot;456&quot;
  &#125;,
  &#123;
    &quot;name&quot;: &quot;wangwu&quot;,
    &quot;number&quot;: &quot;789&quot;
  &#125;,
  &#123;
    &quot;name&quot;: &quot;zhaoliu&quot;,
    &quot;number&quot;: &quot;012&quot;
  &#125;
]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<p>上传文件后看到点击continue按钮即可成功导入数据集<img src="/2024/06/14/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%EF%BC%9A%EF%BC%88%E4%B8%80%EF%BC%89Postman/12.png" alt></p>
<p>点击Run即可读取测试集里的数据，进行一次接口测试。</p>
<h1 id="接口定期测试"><a href="#接口定期测试" class="headerlink" title="接口定期测试"></a>接口定期测试</h1><p>Postman提供了Schedule runs的功能，支持提交一个按照定时器运行的测试任务。</p>
<p>点击集合名称-Runs功能区-Preformance页面，点击<code>Run Performance Test</code>按钮创建测试任务，切换Functional功能区，选择Schedule runs定时运行，设置好定时器参数便可以点击末尾的<code>Schedule Run</code>按钮定时跑测试任务了。</p>
<p><img src="/2024/06/14/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%EF%BC%9A%EF%BC%88%E4%B8%80%EF%BC%89Postman/13.png" alt></p>
<h1 id="接口数据依赖"><a href="#接口数据依赖" class="headerlink" title="接口数据依赖"></a>接口数据依赖</h1><p>在日常开发中，经常会遇到依赖请求的情况。例如从接口A中查询出记录id，接口B、C、D根据这个id进行一些增删改查的操作。这一过程中，需要处理以下问题：</p>
<ul>
<li>接口调用顺序</li>
<li>将接口A返回的数据传递给后续的接口B、C、D</li>
</ul>
<h2 id="接口调用顺序"><a href="#接口调用顺序" class="headerlink" title="接口调用顺序"></a>接口调用顺序</h2><h3 id="默认调用顺序"><a href="#默认调用顺序" class="headerlink" title="默认调用顺序"></a>默认调用顺序</h3><p>集合中接口的默认调用顺序是按照页面左边的目录顺序从上到下执行的（即test-&gt;test1-&gt;test2），因此只需要将优先执行的接口放前面即可固定接口的调用顺序.<img src="/2024/06/14/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%EF%BC%9A%EF%BC%88%E4%B8%80%EF%BC%89Postman/14.png" alt></p>
<h3 id="自定义调用顺序"><a href="#自定义调用顺序" class="headerlink" title="自定义调用顺序"></a>自定义调用顺序</h3><p>Postman提供了一个函数<code>setNextRequest()</code>支持跳转到指定接口继续执行；旧版本Postman中该函数的语句为<code>postman.setNextRequest(要跳转的接口名)</code>。</p>
<p><strong>注意：</strong></p>
<ul>
<li><p>该函数只在运行集合测试时生效，单独接口<code>send</code>时该函数不起作用</p>
</li>
<li><p>运行接口从接口A跳到接口C后，若C后面还有接口DEF，则后面的即可仍会按照默认顺序执行，即DEF仍会被执行</p>
</li>
<li>指定的跳转接口必须同属于一个集合中</li>
<li>该函数不管是在何处被调用，都只在当前脚本的最后才会执行</li>
</ul>
<p>在功能区<strong><code>Scripts</code></strong>，<strong><code>Post-res</code></strong>面板里编写如下代码，可以实现test接口运行成功后跳到test2中继续运行。</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json">&#x2F;&#x2F;test接口运行成功后跳到test2中
pm.test(&quot;Status code is 200&quot;, function () &#123;
    pm.response.to.have.status(200);
    pm.execution.setNextRequest(&#39;localhost&#x2F;test&#x2F;api&#x2F;test2&#39;)
&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="数据传递"><a href="#数据传递" class="headerlink" title="数据传递"></a>数据传递</h2><p>点击侧边栏的<code>Environments</code>，可以创建不同的变量环境，如下图中创建了测试和线上2个环境<img src="/2024/06/14/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%EF%BC%9A%EF%BC%88%E4%B8%80%EF%BC%89Postman/15.png" alt></p>
<p>通过右边的勾选，可以通过切换不同的环境来设置不同的值<img src="/2024/06/14/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%EF%BC%9A%EF%BC%88%E4%B8%80%EF%BC%89Postman/16.png" alt></p>
<p><img src="/2024/06/14/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%EF%BC%9A%EF%BC%88%E4%B8%80%EF%BC%89Postman/17.png" alt></p>
<p>通过设置当前环境的参数集中的参数，可以实现不同接口之间的参数传递。例如在功能区<strong><code>Scripts</code></strong>，<strong><code>Post-res</code></strong>面板里编写如下代码，可以实现test接口运行成功后取其返回name的值作为后续接口的参数<code>res_name</code>。</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json">&#x2F;&#x2F;注意，这个参数res_name的值只会添加在当前选择环境的参数集中
pm.test(&quot;Status code is 200&quot;, function () &#123;
    pm.response.to.have.status(200);
    var jsonData &#x3D; pm.response.json();
    pm.environment.set(&quot;res_name&quot;, jsonData[&#39;name&#39;]);
&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><h2 id="附录一：旧版本测试模板（直接取值）"><a href="#附录一：旧版本测试模板（直接取值）" class="headerlink" title="附录一：旧版本测试模板（直接取值）"></a>附录一：旧版本测试模板（直接取值）</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//检查response body中是否包含某个string,注意："value"为自定义命名，但需唯一。</span>
tests<span class="token punctuation">[</span><span class="token string">"value"</span><span class="token punctuation">]</span> <span class="token operator">=</span> responseBody<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">"test_value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//检测JSON中的某个值是否等于预期的值</span>
<span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>responseBody<span class="token punctuation">)</span><span class="token punctuation">;</span>
tests<span class="token punctuation">[</span><span class="token string">"value2"</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">.</span>value <span class="token operator">===</span> <span class="token number">100</span><span class="token punctuation">;</span>
tests<span class="token punctuation">[</span><span class="token string">"value3"</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">.</span>programs<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">5</span><span class="token punctuation">;</span>

<span class="token comment">//转换XML body为JSON对象</span>
<span class="token keyword">var</span> jsonObject <span class="token operator">=</span> <span class="token function">xml2Json</span><span class="token punctuation">(</span>responseBody<span class="token punctuation">)</span><span class="token punctuation">;</span>
tests<span class="token punctuation">[</span><span class="token string">"value4"</span><span class="token punctuation">]</span> <span class="token operator">=</span> responseBody <span class="token operator">===</span> <span class="token string">"response_body_string"</span><span class="token punctuation">;</span>

<span class="token comment">//测试response Headers中的某个元素是否存在(如:Content-Type),不区分大小写</span>
tests<span class="token punctuation">[</span><span class="token string">"value5"</span><span class="token punctuation">]</span> <span class="token operator">=</span> postman<span class="token punctuation">.</span><span class="token function">getResponseHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//测试response Headers中的某个元素是否存在(如:Content-Type),区分大小写</span>
tests<span class="token punctuation">[</span><span class="token string">"value6"</span><span class="token punctuation">]</span> <span class="token operator">=</span> responseHeaders<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//验证Status code的值</span>
tests<span class="token punctuation">[</span><span class="token string">"value7"</span><span class="token punctuation">]</span> <span class="token operator">=</span> responseCode<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">;</span>

<span class="token comment">//验证Response time是否小于某个值</span>
tests<span class="token punctuation">[</span><span class="token string">"value8"</span><span class="token punctuation">]</span> <span class="token operator">=</span> responseTime <span class="token operator">&lt;</span> <span class="token number">200</span><span class="token punctuation">;</span>

<span class="token comment">//name是否包含某个值</span>
tests<span class="token punctuation">[</span><span class="token string">"value9"</span><span class="token punctuation">]</span> <span class="token operator">=</span> responseCode<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">"Created"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//POST请求的状态响应码是否是某个值</span>
tests<span class="token punctuation">[</span><span class="token string">"value10"</span><span class="token punctuation">]</span> <span class="token operator">=</span> response<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="附录二：新旧版本测试模板（通用断言语句）："><a href="#附录二：新旧版本测试模板（通用断言语句）：" class="headerlink" title="附录二：新旧版本测试模板（通用断言语句）："></a>附录二：新旧版本测试模板（通用断言语句）：</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//校验响应状态码</span>
pm<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"Status is 200"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    pm<span class="token punctuation">.</span>response<span class="token punctuation">.</span>to<span class="token punctuation">.</span>have<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//断言状态码200-202区间</span>
pm<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"Successful GET request"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   pm<span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span>pm<span class="token punctuation">.</span>response<span class="token punctuation">.</span>code<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>be<span class="token punctuation">.</span><span class="token function">oneOf</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">202</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//校验接口返回状态</span>
pm<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"接口返回状态status "</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> jsonData <span class="token operator">=</span> pm<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> status1 <span class="token operator">=</span>jsonData<span class="token punctuation">.</span>status
    pm<span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span>status1<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span><span class="token function">eql</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"status1 is :"</span> <span class="token operator">+</span>status1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//断言响应时间小于200ms</span>
pm<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"Response time is less than 300ms"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   pm<span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span>pm<span class="token punctuation">.</span>response<span class="token punctuation">.</span>responseTime<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>be<span class="token punctuation">.</span><span class="token function">below</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//断言响应中包含某个字符串</span>
pm<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"Body matches string"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   pm<span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span>pm<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span><span class="token function">include</span><span class="token punctuation">(</span><span class="token string">"FRM"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//断言响应中的字段等于某个值</span>
pm<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"message test"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token keyword">var</span> jsonData <span class="token operator">=</span> pm<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   pm<span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span>jsonData<span class="token punctuation">[</span><span class="token string">"message"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span><span class="token function">eql</span><span class="token punctuation">(</span><span class="token string">"请求成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//断言响应中的字段不等于某个值</span>
<span class="token keyword">var</span> jsonData <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>responseBody<span class="token punctuation">)</span><span class="token punctuation">;</span>
tests<span class="token punctuation">[</span><span class="token string">"message不为failed"</span><span class="token punctuation">]</span> <span class="token operator">=</span> jsonData<span class="token punctuation">[</span><span class="token string">"message"</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">"failed"</span><span class="token punctuation">;</span>

<span class="token comment">//断言响应中"list"的字段长度</span>
pm<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"data list test"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> jsonData <span class="token operator">=</span> pm<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    pm<span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span>jsonData<span class="token punctuation">[</span><span class="token string">"data"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span><span class="token function">eql</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//断言响应中"list 0的"的time字段的值</span>
pm<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"data list 0 test"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token keyword">var</span> jsonData <span class="token operator">=</span> pm<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   pm<span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span>jsonData<span class="token punctuation">[</span><span class="token string">"data"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"time"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span><span class="token function">eql</span><span class="token punctuation">(</span><span class="token string">"2018-11-28 17:27:41"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//测试解析json数据</span>
pm<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"Your test name"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> jsonData <span class="token operator">=</span> pm<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    pm<span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span>jsonData<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span><span class="token function">eql</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//检查header</span>
pm<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"Content-Type is present"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    pm<span class="token punctuation">.</span>response<span class="token punctuation">.</span>to<span class="token punctuation">.</span>have<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//测试是否等于某个字段</span>
pm<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"Body is correct"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    pm<span class="token punctuation">.</span>response<span class="token punctuation">.</span>to<span class="token punctuation">.</span>have<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token string">"response_body_string"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//请求时间校验</span>
pm<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"Response time is less than 200ms"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    pm<span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span>pm<span class="token punctuation">.</span>response<span class="token punctuation">.</span>responseTime<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>be<span class="token punctuation">.</span><span class="token function">below</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

<span class="token comment">//返回值在某个区间</span>
pm<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"Status code name has string"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    pm<span class="token punctuation">.</span>response<span class="token punctuation">.</span>to<span class="token punctuation">.</span>have<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token string">"Created"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

<span class="token comment">//使用json schema 校验结果</span>
<span class="token keyword">var</span> schema <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token string">"items"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token string">"type"</span><span class="token operator">:</span> <span class="token string">"boolean"</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> data1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> data2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
pm<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'Schema is valid'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  pm<span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span>tv4<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span>data1<span class="token punctuation">,</span> schema<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>be<span class="token punctuation">.</span><span class="token boolean">true</span><span class="token punctuation">;</span>
  pm<span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span>tv4<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span>data2<span class="token punctuation">,</span> schema<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>be<span class="token punctuation">.</span><span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>自动化测试</category>
      </categories>
      <tags>
        <tag>自动化测试</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式的学习（一）</title>
    <url>/2022/07/27/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><p>设计模式为软件开发人员在开发过程中面临一般问题时的解决方案，共有33种，可将其分为四大类：创建型模式、结构型模式、行为型模式和J2EE模式。</p>
<h2 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h2><p>创建型模式致力于将对象的创建与使用分离，着重于如何创建对象。</p>
<p>该分类下的设计模式有5种：工厂模式、抽象工厂模式、单例模式、建造者模式和原型模式。</p>
<h2 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h2><p>结构型模式关注于类的继承和组合，着重于简化结构并识别类与对象之间的关系。</p>
<p>该分类下的设计模式有8种：适配器模式、桥接模式、过滤器模式、组合模式、装饰器模式、外观模式、享元模式和代理模式。</p>
<h2 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h2><p>行为型模式关注于对象之间的交互以及彼此之间的响应性，着重于算法与对象间的职责分配。</p>
<p>该分类下的设计模式有12种：责任链模式、命令模式、解释器模式、迭代器模式、中介者模式、备忘录模式、观察者模式、状态模式、空对象模式、策略模式、模板模式和访问者模式。</p>
<h2 id="J2EE模式"><a href="#J2EE模式" class="headerlink" title="J2EE模式"></a>J2EE模式</h2><p>J2EE模式是为了开发基于Web的企业引用程序而构建的，特别关注表示层。</p>
<p>该分类下的设计模式有8种：MVC模式、业务代表模式、组合实体模式、数据访问对象模式、前端控制器模式、拦截过滤器模式、服务定位器模式和传输对象模式。</p>
<h1 id="设计模式的六大原则（SOLID）"><a href="#设计模式的六大原则（SOLID）" class="headerlink" title="设计模式的六大原则（SOLID）"></a>设计模式的六大原则（SOLID）</h1><h2 id="单一职责原则（Single-Responsibility-Principle）"><a href="#单一职责原则（Single-Responsibility-Principle）" class="headerlink" title="单一职责原则（Single Responsibility Principle）"></a>单一职责原则（Single Responsibility Principle）</h2><p>不要存在多于一个导致类变更的原因。即每个类都应只实现单一的职责。</p>
<h2 id="开放封闭原则（Open-Closed-Principle）"><a href="#开放封闭原则（Open-Closed-Principle）" class="headerlink" title="开放封闭原则（Open Closed Principle）"></a>开放封闭原则（Open Closed Principle）</h2><p>对扩展开放，对修改关闭。即在程序需要进行扩展时，不能去修改原有的代码，而是去扩展原有的代码。该原则的关键步骤是将代码抽象化。</p>
<h2 id="里氏代换原则（Liskov-Substitution-Principle）"><a href="#里氏代换原则（Liskov-Substitution-Principle）" class="headerlink" title="里氏代换原则（Liskov Substitution Principle）"></a>里氏代换原则（Liskov Substitution Principle）</h2><p>任何基类可以出现的地方，子类一定可以出现。该原则是继承复用的基石，只有当派生类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而派生类也能够在基类的基础上增加新的行为。</p>
<p>该原则作为面向对象设计的基本原则之一，是对开闭原则的补充，是对实现抽象化的具体步骤的规范。</p>
<h2 id="迪米特原则，又称最少知道原则-Law-of-Demeter"><a href="#迪米特原则，又称最少知道原则-Law-of-Demeter" class="headerlink" title="迪米特原则，又称最少知道原则(Law of Demeter)"></a>迪米特原则，又称最少知道原则(Law of Demeter)</h2><p>一个类对自己依赖的类知道的越少越好。即无论被依赖的类复杂度有多高，都应将其逻辑封装在方法的内部后，在通过public方法提供给外部。使得当被依赖的类变化时，该类受到的影响最小。</p>
<h2 id="接口隔离原则（Interface-Segregation-Principle）"><a href="#接口隔离原则（Interface-Segregation-Principle）" class="headerlink" title="接口隔离原则（Interface Segregation Principle）"></a>接口隔离原则（Interface Segregation Principle）</h2><p>每个接口不应存在子类用不到却必须实现的方法，若存在这种情况，应将接口拆分。为降低类之间的耦合度，使用多个隔离的接口比只使用单个接口要好。</p>
<h2 id="依赖倒置原则（Dependence-Inversion-Principle）"><a href="#依赖倒置原则（Dependence-Inversion-Principle）" class="headerlink" title="依赖倒置原则（Dependence Inversion Principle）"></a>依赖倒置原则（Dependence Inversion Principle）</h2><p>针对接口编程，依赖于抽象而不依赖于具体。即用到具体类时，不与具体类交互，而与该具体类的上层接口交互。</p>
<p>该原则是开闭原则的基础。</p>
<p>本文中主要讲解最常用的设计模式之一：策略模式。</p>
<h1 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h1><p>策略模式定义了一系列的算法，并将每个算法都封装了起来，使得算法之间可以相互替换，且算法的改变不会影响使用算法的用户。策略模式属于对象行为型模式，其通过对算法进行封装，把使用算法的责任和算法的实现分割开来，并委派给不同的对象对这些算法进行管理。</p>
<h2 id="策略模式的优点"><a href="#策略模式的优点" class="headerlink" title="策略模式的优点"></a><strong>策略模式的优点</strong></h2><p>1、可避免使用多重条件语句，如多个<code>if...else</code>条件分支、<code>switch...case</code>语句。</p>
<p>2、提供了一系列可供重用的算法组，适当使用继承可以将算法族的公共代码转移到父类里，从而避免重复的代码。</p>
<p>3、可提供相同行为的不同实现，用户可根据不同时间或空间选择不同的实现方式。</p>
<p>4、可在不修改源代码的前提下，灵活增加新算法。</p>
<p>5、将算法的使用放到环境类中，算法的实现移到具体策略类中，实现了二者的分离。</p>
<h2 id="策略模式的缺点"><a href="#策略模式的缺点" class="headerlink" title="策略模式的缺点"></a><strong>策略模式的缺点</strong></h2><p>1、客户端必须理解所有策略算法的区别，以便于选择恰当的算法类。</p>
<p>2、策略类较多时，维护难度较大。</p>
<h2 id="策略模式的使用举例"><a href="#策略模式的使用举例" class="headerlink" title="策略模式的使用举例"></a>策略模式的使用举例</h2><p>例如这是伪代码优化前的大致逻辑，如下所示：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">class Person&#123;
    int worknum;&#x2F;&#x2F;工号
    int age;&#x2F;&#x2F;年龄
    int reqNum;&#x2F;&#x2F;查询数量
&#125;

&#x2F;&#x2F;如果是学生类型
boolean isStudent(Person pto)&#123;
    if(pto.type &#x3D;&#x3D; &#39;student&#39;)&#123;
       
       &#x2F;&#x2F;开关关闭不请求
       if(isstudentSwitchClose)&#123;
          return false;           
       &#125;
       
        &#x2F;&#x2F;请求只有一条记录
        if(pto.reqNum&#x3D;&#x3D;1)&#123;
            return singleRemoteEOIinvoke(pto);&#x2F;&#x2F;调用学生数据的点查接口
            
            &#x2F;&#x2F;请求超过一条
        &#125;else if(pto.reqNum&gt;1)&#123;
            return batchRemoteEOIinvoke(pto);&#x2F;&#x2F;调用学生数据的批量接口
        &#125;
        
        &#x2F;&#x2F;如果是教师类型
    &#125;else if(pto.type&#x3D;&#x3D;&#39;teacher&#39;)&#123;
    
      &#x2F;&#x2F;开关关闭不请求
       if(isteacherSwitchClose)&#123;
          return false;           
       &#125;
        &#x2F;&#x2F;请求只有一条记录
        if(pto.reqNum&#x3D;&#x3D;1)&#123;
            return singleRemoteMarketinvoke(pto);&#x2F;&#x2F;调用教师数据的点查接口
           
          &#x2F;&#x2F;请求超过一条
        &#125;else if(pto.reqNum&gt;1)&#123;
            return batchRemoteMarketinvoke(pto);&#x2F;&#x2F;调用教师数据的批量接口
        &#125;
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>例子中的代码存在较多的if分支，若使用策略模式来优化，代码将变成下面这样：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">interface GroupLabel &#123;
  boolean processBiz(Person pto);&#x2F;&#x2F;该方法对应策略实现类的具体实现
  String getType();&#x2F;&#x2F;该方法是策略类的类型，对应着&#96;&#96;&#96;if...else&#96;&#96;&#96;条件判断的类型
&#125; 

&#x2F;&#x2F;学生类型的策略实现类
studentGroupLablel implements GroupLabel&#123;
  
  &#x2F;&#x2F;对应学生类型的条件分支里的实现
  boolean processBiz(Person pto)&#123;
  
       &#x2F;&#x2F;开关关闭不请求
     if(isstudentSwitchClose)&#123;
        return false;           
     &#125;
    
      &#x2F;&#x2F;请求只有一条记录
      if(pto.reqNum&#x3D;&#x3D;1)&#123;
          return singleRemoteEOIinvoke(pto);&#x2F;&#x2F;调用学生数据点查接口 
          
          &#x2F;&#x2F;请求超过一条
      &#125;else if(pto.reqNum&gt;1)&#123;

          return batchRemoteEOIinvoke(pto);&#x2F;&#x2F;调用远程大数据批量接口    
      &#125;
      
   &#125;
   
  &#x2F;&#x2F;对应学生类型
  String getType()&#123;
     return &quot;student&quot;;
  &#125;
&#125;

&#x2F;&#x2F;教师类型的策略实现类
teacherGroupLablel implements GroupLabel&#123;

   &#x2F;&#x2F;对应教师类型的条件分支里的实现
   boolean processBiz(Person pto)&#123;
   
     &#x2F;&#x2F;开关关闭不请求
     if(isteacherSwitchClose)&#123;
        return false;           
     &#125;
     
      &#x2F;&#x2F;请求只有一条记录
      if(pto.reqNum&#x3D;&#x3D;1)&#123;
          return singleRemoteMarketinvoke(pto);&#x2F;&#x2F;调用教师数据的点查接口  
         
        &#x2F;&#x2F;请求超过一条
      &#125;else if(pto.reqNum&gt;1)&#123;
          return batchRemoteMarketinvoke(pto);&#x2F;&#x2F;调用教师数据的批量接口    
      &#125;
      
    &#125;
    
   &#x2F;&#x2F;对应教师类型
    String getType()&#123;
       return &quot;teacher&quot;;
     &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次XAMPP的报错实例</title>
    <url>/2020/02/11/%E8%AE%B0%E4%B8%80%E6%AC%A1XAMPP%E7%9A%84%E6%8A%A5%E9%94%99%E5%AE%9E%E4%BE%8B/</url>
    <content><![CDATA[<h1 id="记一次-XAMPP-的报错实例"><a href="#记一次-XAMPP-的报错实例" class="headerlink" title="记一次 XAMPP 的报错实例"></a>记一次 XAMPP 的报错实例</h1><p>昨天在用服务器构建网页时，使用到了XAMPP，但在访问服务器本身的IP时，却出现了如下的报错：</p>
<p><strong><em>Uncaught error with message ‘[db.WindConnection.init] SQLSTATE[HY000]<br>[1045] Access denied for user ‘root’@’localhost’ (using password: YES)’</em></strong></p>
<p><strong><em>The server encountered an internal error and failed to process your<br>request. Please try again later. If this error is temporary, reloading the<br>page might resolve the problem.<br>If you are able to contact the administrator report this error<br>message(<a href="http://www.windframework.com/">http://www.windframework.com/</a>)</em></strong></p>
<p>内容大体上是说，权限不够或密码错误，于是我重新看了一下 <strong>phpasmin</strong> 里的账号密码</p>
<p>图中可以看到 <strong>root</strong> 的三个账户的密码都是无且授权为是<br>So后面我根据百度的方法一顿操作</p>
<p><img src="/2020/02/11/%E8%AE%B0%E4%B8%80%E6%AC%A1XAMPP%E7%9A%84%E6%8A%A5%E9%94%99%E5%AE%9E%E4%BE%8B/2.png" alt></p>
<p>完了发现又多了其他问题，最严重的一个是– <strong>Mysql服务无法启动</strong></p>
<p><img src="/2020/02/11/%E8%AE%B0%E4%B8%80%E6%AC%A1XAMPP%E7%9A%84%E6%8A%A5%E9%94%99%E5%AE%9E%E4%BE%8B/3.png" alt><br>可以看到下图中XAPMM的Mysql以及无法启动且报一大堆的错</p>
<p><img src="/2020/02/11/%E8%AE%B0%E4%B8%80%E6%AC%A1XAMPP%E7%9A%84%E6%8A%A5%E9%94%99%E5%AE%9E%E4%BE%8B/4.png" alt></p>
<p><img src="/2020/02/11/%E8%AE%B0%E4%B8%80%E6%AC%A1XAMPP%E7%9A%84%E6%8A%A5%E9%94%99%E5%AE%9E%E4%BE%8B/5.png" alt></p>
<h2 id="OK-现在开始第一次尝试："><a href="#OK-现在开始第一次尝试：" class="headerlink" title="OK,现在开始第一次尝试："></a>OK,现在开始第一次尝试：</h2><p>在Mysql目录bin里下找到<code>my.ini</code>文件用记事本打开，查找<code>[mysqld]</code>并在下面增加一行代码<code>innodb_force_recovery
=4</code></p>
<p><img src="/2020/02/11/%E8%AE%B0%E4%B8%80%E6%AC%A1XAMPP%E7%9A%84%E6%8A%A5%E9%94%99%E5%AE%9E%E4%BE%8B/6.png" alt></p>
<p>结果XAMPP报错：  </p>
<p><img src="/2020/02/11/%E8%AE%B0%E4%B8%80%E6%AC%A1XAMPP%E7%9A%84%E6%8A%A5%E9%94%99%E5%AE%9E%E4%BE%8B/7.png" alt></p>
<h2 id="第二次尝试："><a href="#第二次尝试：" class="headerlink" title="第二次尝试："></a>第二次尝试：</h2><p>看日志最后几行发现是3306端口被占用，既然3306不能用</p>
<p><img src="/2020/02/11/%E8%AE%B0%E4%B8%80%E6%AC%A1XAMPP%E7%9A%84%E6%8A%A5%E9%94%99%E5%AE%9E%E4%BE%8B/8.png" alt><br>那我就换一个端口呗<br>修改Mysql目录里bin中的<code>my.ini</code>文件的端口如下：<br><img src="/2020/02/11/%E8%AE%B0%E4%B8%80%E6%AC%A1XAMPP%E7%9A%84%E6%8A%A5%E9%94%99%E5%AE%9E%E4%BE%8B/9.png" alt></p>
<p>顺便修改了 <strong>默认ip地址</strong> ：<br><img src="/2020/02/11/%E8%AE%B0%E4%B8%80%E6%AC%A1XAMPP%E7%9A%84%E6%8A%A5%E9%94%99%E5%AE%9E%E4%BE%8B/10.png" alt></p>
<p>结果还是不行：  </p>
<p><img src="/2020/02/11/%E8%AE%B0%E4%B8%80%E6%AC%A1XAMPP%E7%9A%84%E6%8A%A5%E9%94%99%E5%AE%9E%E4%BE%8B/11.png" alt></p>
<p>10+小时过去了，试了各种办法都没法启动Mysql服务，于是，我直接 <strong>重装XAMPP</strong><br><img src="/2020/02/11/%E8%AE%B0%E4%B8%80%E6%AC%A1XAMPP%E7%9A%84%E6%8A%A5%E9%94%99%E5%AE%9E%E4%BE%8B/13.png" alt></p>
<h2 id="文章后面为XAMPP对Apache的初始化"><a href="#文章后面为XAMPP对Apache的初始化" class="headerlink" title="文章后面为XAMPP对Apache的初始化"></a>文章后面为XAMPP对Apache的初始化</h2><p>在XAMPP中选择配置  </p>
<p><img src="/2020/02/11/%E8%AE%B0%E4%B8%80%E6%AC%A1XAMPP%E7%9A%84%E6%8A%A5%E9%94%99%E5%AE%9E%E4%BE%8B/14.png" alt><br>更改<code>Apache</code>的端口  </p>
<p><img src="/2020/02/11/%E8%AE%B0%E4%B8%80%E6%AC%A1XAMPP%E7%9A%84%E6%8A%A5%E9%94%99%E5%AE%9E%E4%BE%8B/15.png" alt></p>
<p>确保画 <strong>蓝圈</strong> 的地方是选择<code>Apache</code>的，更改画 <strong>黄线</strong><br>里的端口值（在数字后面加个零即可）。记住原来的两个值，这里我原来的值分别是80和443</p>
<p><img src="/2020/02/11/%E8%AE%B0%E4%B8%80%E6%AC%A1XAMPP%E7%9A%84%E6%8A%A5%E9%94%99%E5%AE%9E%E4%BE%8B/16.png" alt></p>
<p>然后在XAMPP中找到Apache里conf目录的<code>httpd.conf</code>文件，用记事本打开并查找未更改端口前的第一个数值，将其改成更改后的端口值。如我这里是将80改为800，Ctrl+S保存</p>
<p><img src="/2020/02/11/%E8%AE%B0%E4%B8%80%E6%AC%A1XAMPP%E7%9A%84%E6%8A%A5%E9%94%99%E5%AE%9E%E4%BE%8B/17.png" alt></p>
<p>再在conf目录里的extra中找到<code>httpd-
ssl.conf</code>文件，用记事本打开并查找未更改端口前的第二个数值，将其改成更改后的端口值。如我这里是将443改为4430 ， <strong>Ctrl+S</strong> 保存</p>
<p><img src="/2020/02/11/%E8%AE%B0%E4%B8%80%E6%AC%A1XAMPP%E7%9A%84%E6%8A%A5%E9%94%99%E5%AE%9E%E4%BE%8B/18.png" alt></p>
<p>现在回到XAMPP，点击 <strong>Apache</strong> 中的 <strong>Start</strong> ,看到Apache和Mysql底色是绿色即完成;</p>
<p><img src="/2020/02/11/%E8%AE%B0%E4%B8%80%E6%AC%A1XAMPP%E7%9A%84%E6%8A%A5%E9%94%99%E5%AE%9E%E4%BE%8B/19.png" alt></p>
]]></content>
      <categories>
        <category>XAMPP</category>
      </categories>
      <tags>
        <tag>XAMPP</tag>
        <tag>报错</tag>
      </tags>
  </entry>
  <entry>
    <title>search</title>
    <url>/search/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/baidu_verify_code-8gDDgBH4x7.html</url>
    <content><![CDATA[layout:false
701d7ecfb72299010fa6c733b074a57e]]></content>
  </entry>
  <entry>
    <title>About</title>
    <url>/about/index.html</url>
    <content><![CDATA[<p><img src="https://media0.giphy.com/media/v1.Y2lkPTc5MGI3NjExODBhanZ1ZDc5aTAxZHhlbTR6OGRjdGY0cm9jdWx3ajMyOWcxOWM3MyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/Wj7lNjMNDxSmc/giphy.gif" alt></p>
<h1 id="👋-嗨！欢迎访问唐抉的个人博客"><a href="#👋-嗨！欢迎访问唐抉的个人博客" class="headerlink" title="👋 嗨！欢迎访问唐抉的个人博客"></a>👋 嗨！欢迎访问唐抉的个人博客</h1><p>这里主要记录学习技术上的心得，随缘分享一些好物及其想法感悟等😼</p>
<h1 id="🐱-我是谁"><a href="#🐱-我是谁" class="headerlink" title="🐱 我是谁"></a>🐱 我是谁</h1><ul>
<li>🐈「整顿职场的00后」：工作了两年半的社畜，大学期间混迹数学、法学、计算机这三大使人秃头的专业</li>
<li>😑「懒癌晚期」：学了很多东西但就是懒得记录下来</li>
<li>😃「整活能手」：经常”灵机一动“，酷爱各种技术上的整活</li>
</ul>
<h1 id="🛠️-技能树"><a href="#🛠️-技能树" class="headerlink" title="🛠️ 技能树"></a>🛠️ 技能树</h1><table><tr><td valign="top" align="center" width="20%">   
## 人工智能
<div align="center">   
![TensorFlow](https://img.shields.io/badge/TensorFlow-FF6F00?style=for-the-badge&logo=tensorflow&logoColor=white)![Kaggle](https://img.shields.io/badge/Kaggle-20BEFF?style=for-the-badge&logo=Kaggle&logoColor=white)
![numpy](https://img.shields.io/badge/Numpy-777BB4?style=for-the-badge&logo=numpy&logoColor=white)![Pandas](https://img.shields.io/badge/Pandas-2C2D72?style=for-the-badge&logo=pandas&logoColor=white)
</div>
</td><td valign="top" width="27%">    
## 前端
<div align="center">     
![HTML5](https://img.shields.io/badge/HTML5-E34F26?style=for-the-badge&logo=html5&logoColor=white)![CSS3](https://img.shields.io/badge/CSS3-1572B6?style=for-the-badge&logo=css3&logoColor=white)
![JavaScript](https://img.shields.io/badge/JavaScript-323330?style=for-the-badge&logo=javascript&logoColor=F7DF1E&color=olive)![typescript](    https://img.shields.io/badge/ts--node-3178C6?style=for-the-badge&logo=ts-node&logoColor=white)
![Element](https://img.shields.io/badge/element-ui?style=for-the-badge&logo=element&logoColor=white&color=%23409eff)![vant](https://img.shields.io/badge/vant-ui?style=for-the-badge&logo=vant&logoColor=white&color=%231bbc9b)
![Nodejs](https://img.shields.io/badge/Node.js-43853D?style=for-the-badge&logo=node.js&logoColor=white)![Vue.js](https://img.shields.io/badge/Vue.js-35495E?style=for-the-badge&logo=vue.js&logoColor=4FC08D)
![bootstrap](https://img.shields.io/badge/Bootstrap-563D7C?style=for-the-badge&logo=bootstrap&logoColor=white)![nginx](https://img.shields.io/badge/-Nginx-bfcfcf.svg?logo=nginx&style=for-the-badge&color=forestgreen)
![hexo](https://img.shields.io/badge/Hexo-0E83CD?style=for-the-badge&logo=hexo&logoColor=white)![unocss](https://img.shields.io/badge/uno-css?style=for-the-badge&logo=unocss&logoColor=white&color=%23878787)
</div>  
</td><td valign="top" width="33%">   
## 后端
<div align="center">   
![C](https://img.shields.io/badge/C-00599C?style=for-the-badge&logo=c&logoColor=white)![C++](https://img.shields.io/badge/C%2B%2B-00599C?style=for-the-badge&logo=c%2B%2B&logoColor=white)
![Java](https://img.shields.io/badge/Java-ED8B00?style=for-the-badge&logo=java&logoColor=white)![Python](https://img.shields.io/badge/Python-3776AB?style=for-the-badge&logo=python&logoColor=white)
![postgresql](https://img.shields.io/badge/PostgreSQL-316192?style=for-the-badge&logo=postgresql&logoColor=white)![MySQL](https://img.shields.io/badge/MySQL-005C84?style=for-the-badge&logo=mysql&logoColor=white)
![MongoDB](https://img.shields.io/badge/MongoDB-4EA94B?style=for-the-badge&logo=mongodb&logoColor=white)![Oracle](https://img.shields.io/badge/Oracle-F80000?style=for-the-badge&logo=oracle&logoColor=black)
![Flask](https://img.shields.io/badge/Flask-000000?style=for-the-badge&logo=flask&logoColor=white)![Redis](https://img.shields.io/badge/redis-%23DD0031.svg?&style=for-the-badge&logo=redis&logoColor=white)
</div>  
</td><td valign="top" width="20%">    
## 常用工具  
<div align="center">      
![Docker](https://img.shields.io/badge/-Docker-FCC624?style=for-the-badge&logo=docker&color=gainsboro)![kubernetes](https://img.shields.io/badge/Kubernetes-3069DE?style=for-the-badge&logo=kubernetes&logoColor=white)
![Git](https://img.shields.io/badge/GIT-E44C30?style=for-the-badge&logo=git&logoColor=white)![Markdown](https://img.shields.io/badge/Markdown-000000?style=for-the-badge&logo=markdown&logoColor=white)
![GitHub](https://img.shields.io/badge/GitHub-100000?style=for-the-badge&logo=github&logoColor=white)![GitLab](https://img.shields.io/badge/GitLab-330F63?style=for-the-badge&logo=gitlab&logoColor=white)
![Postman](https://img.shields.io/badge/Postman-FF6C37?style=for-the-badge&logo=Postman&logoColor=white)![Visual Studio Code](https://img.shields.io/badge/Visual_Studio_Code-0078D4?style=for-the-badge&logo=visual%20studio%20code&logoColor=white)
</div> 
</td></tr></table>

<h1 id="🤔-关于博客"><a href="#🤔-关于博客" class="headerlink" title="🤔 关于博客"></a>🤔 关于博客</h1><p>由 <a href="https://hexo.io/">Hexo</a> 驱动，使用的主题是 <a href="https://github.com/fi3ework/hexo-theme-archer">Archer</a> ，通过livere来添加评论区模块。</p>
]]></content>
  </entry>
</search>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>唐抉的个人博客</title>
  
  
  <link href="http://tangmenjue.top/atom.xml" rel="self"/>
  
  <link href="http://tangmenjue.top/"/>
  <updated>2023-03-31T09:40:12.000Z</updated>
  <id>http://tangmenjue.top/</id>
  
  <author>
    <name>唐抉</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Kubernetes实践之从yaml创建工作负载</title>
    <link href="http://tangmenjue.top/2023/03/31/Kubernetes%E5%AE%9E%E8%B7%B5%E4%B9%8B%E4%BB%8Eyaml%E5%88%9B%E5%BB%BA%E5%B7%A5%E4%BD%9C%E8%B4%9F%E8%BD%BD/"/>
    <id>http://tangmenjue.top/2023/03/31/Kubernetes%E5%AE%9E%E8%B7%B5%E4%B9%8B%E4%BB%8Eyaml%E5%88%9B%E5%BB%BA%E5%B7%A5%E4%BD%9C%E8%B4%9F%E8%BD%BD/</id>
    <published>2023-03-31T09:40:12.000Z</published>
    <updated>2023-03-31T09:40:12.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pod">Pod</h1><p>Pod是Kubernetes中的基本单位。容器本身不会直接分配到主机上，而会封装到名为Pod的对象中。Kubernetes以Pod为最小单位进行调度、伸缩并共享资源、管理生命周期。</p><p>Pod通常表示单个应用程序，由一个或多个关系紧密的容器构成，这些容器拥有同样的生命周期，作为一个整体一起编排到Node上。这些容器共享环境、存储卷（volume）和IP空间。尽管Pod基于一个或多个容器，但应将Pod视作一个单一的整体、单独的应用程序。</p><h1 id="pod模板">Pod模板</h1><p>在创建Pod时，需要定义一个模板文件（.yml文件），并将其称为Pod模板。可以用Pod模板来定义资源，以下是Pod模板的主要内容及对应说明：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span> <span class="comment"># 使用的API版本，V1表示使用 Kubernetes API的稳定版本</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span> <span class="comment"># 要创建的资源对象，这里为关键字Pod</span></span><br><span class="line"><span class="attr">metadata:</span> <span class="comment"># 表示该资源对象的元数据，一个资源对象可拥有多个元数据。表示资源的标识信息</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">String</span> <span class="comment"># 元数据，必填，Pod的名字</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">String</span> <span class="comment"># 元数据，Pod的命名空间</span></span><br><span class="line">  <span class="attr">labels:</span> <span class="comment"># 元数据，标签列表</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">value</span> <span class="comment"># 元数据，可定义多个标签的键值对 </span></span><br><span class="line">  <span class="attr">annotations:</span> <span class="comment"># 元数据，自定义注解列表</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">value</span> <span class="comment"># 元数据，可定义多个标签的键值对 </span></span><br><span class="line"><span class="attr">spec:</span> <span class="comment"># 该资源对象的具体设置，Pod中容器的详细配置，必填</span></span><br><span class="line">  <span class="attr">containers:</span> <span class="comment"># Pod中的容器列表，必填，可以有多个容器</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">String</span> <span class="comment"># 要创建的容器名称，必填                </span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">String</span> <span class="comment"># 容器的镜像地址，必填</span></span><br><span class="line">    <span class="attr">imagePullPolicy:</span> [<span class="string">Always|Never|IfNotPresent</span>] <span class="comment"># 镜像的下载策略，支持3种模式</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">String</span>] <span class="comment"># 容器的启动命令列表（不配置则使用镜像内部的命令）</span></span><br><span class="line">    <span class="attr">args:</span> [<span class="string">String</span>] <span class="comment"># 启动参数列表</span></span><br><span class="line">    <span class="attr">workingDir:</span> <span class="string">String</span> <span class="comment"># 容器的工作目录</span></span><br><span class="line">    <span class="attr">volumeMounts:</span> <span class="comment"># 挂载到容器内部的存储卷设置</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">String</span> <span class="comment"># 为了引用Pod定义的共享存储卷名称，要用volumes[]部分定义的卷名</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">String</span> <span class="comment"># 存储卷在容器内挂载的绝对路径，应少于512个字符</span></span><br><span class="line">      <span class="attr">readOnly:</span> <span class="string">Boolean</span> <span class="comment"># 是否为只读模式</span></span><br><span class="line">    <span class="attr">ports:</span> <span class="comment"># 容器需要暴露的端口号列表</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">String</span> <span class="comment"># 端口名称</span></span><br><span class="line">      <span class="attr">containerPort:</span> <span class="string">int</span> <span class="comment"># 容器要暴露的端口</span></span><br><span class="line">      <span class="attr">hostPost:</span> <span class="string">int</span> <span class="comment"># 容器所在主机监听的端口（把容器暴露的端口映射到宿主机的端口）</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">String</span> <span class="comment"># 端口协议，支持TCP和UDP，默认为TCP</span></span><br><span class="line">    <span class="attr">env:</span> <span class="comment"># 容器运行前要设置的环境变量列表</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">String</span> <span class="comment"># 环境变量名称</span></span><br><span class="line">      <span class="attr">value:</span> <span class="string">String</span> <span class="comment"># 环境变量值</span></span><br><span class="line">    <span class="attr">resources:</span> <span class="comment"># 资源限制和请求的设置</span></span><br><span class="line">      <span class="attr">limits:</span> <span class="comment"># 资源限制的设置</span></span><br><span class="line">        <span class="attr">cpu:</span> <span class="string">String</span> <span class="comment"># cpu限制，单位为CPU内核数，也可以使用小数，如0.1，0.1等价于表达式100m，表示100milicpu</span></span><br><span class="line">        <span class="attr">memory:</span> <span class="string">String</span> <span class="comment"># 内存限制，单位可以为MiB/GiB/MB/GB (1MB=1024x1024B=1024x1024x1000x1000B)。</span></span><br><span class="line">      <span class="attr">requests:</span> <span class="comment"># 资源请求的设置</span></span><br><span class="line">        <span class="attr">cpu:</span> <span class="string">String</span> <span class="comment"># cpu请求，容器启动时的初始可用数量</span></span><br><span class="line">        <span class="attr">memory:</span> <span class="string">String</span> <span class="comment"># 内存请求，容器启动时的初始可用数量</span></span><br><span class="line">      <span class="attr">livenessProbe:</span> <span class="comment"># Pod内容器健康检查的设置，当探测几次无响应后将自动重启该容器。</span></span><br><span class="line">      <span class="comment"># 检查方法有exec、httpGet、tcpSocket，对一个容器只要设置一种方法即可</span></span><br><span class="line">        <span class="attr">exec:</span> <span class="comment"># 通过exec方式来检查Pod内各容器的健康情况</span></span><br><span class="line">          <span class="attr">command:</span> [<span class="string">String</span>] <span class="comment"># exec方式需要指定的命令或脚本</span></span><br><span class="line">        <span class="attr">httpGet:</span> <span class="comment"># 通过httpGet方式来检查Pod内各容器的健康情况，需要指定path、port</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">String</span></span><br><span class="line">          <span class="attr">port:</span> <span class="string">number</span></span><br><span class="line">          <span class="attr">host:</span> <span class="string">String</span></span><br><span class="line">          <span class="attr">scheme:</span> <span class="string">String</span></span><br><span class="line">          <span class="attr">httpHeaders:</span> </span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">String</span></span><br><span class="line">            <span class="attr">value:</span> <span class="string">String</span></span><br><span class="line">        <span class="attr">tcpSocket:</span> <span class="comment"># 通过tcpSocket方式来检查Pod内各容器的健康情况</span></span><br><span class="line">          <span class="attr">port:</span> <span class="string">number</span>    </span><br><span class="line">        <span class="attr">initialDelaySeconds:</span> <span class="number">0</span> <span class="comment"># 容器启动完成后，首次探测的时间（单位为秒）</span></span><br><span class="line">        <span class="attr">timeoutSeconds:</span> <span class="number">0</span> <span class="comment"># 对容器进行健康检查时探测等待响应的超时时间（单位为秒，默认为1s）</span></span><br><span class="line">        <span class="attr">periodSeconds:</span> <span class="number">0</span> <span class="comment"># 对容器监控检查的定期探测时间设置（单位为秒，默认10s一次）</span></span><br><span class="line">        <span class="attr">successThreshold:</span> <span class="number">0</span> </span><br><span class="line">        <span class="attr">failureThreshold:</span> <span class="number">0</span>  </span><br><span class="line">        <span class="attr">securityContext:</span> <span class="comment"># 安全配置</span></span><br><span class="line">          <span class="attr">privileged:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">restartPolicy:</span> [<span class="string">Always|Never|OnFailure</span>] <span class="comment"># Pod的重启策略，有三种可以选   </span></span><br><span class="line">      <span class="attr">nodeSelector:</span> <span class="comment"># 节点选择，设置nodeSelector表示将该Pod调度到包含这个标签的节点上</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">value</span> </span><br><span class="line">      <span class="attr">imagePullSecrets:</span> <span class="comment"># 拉取镜像时使用的secret名称</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">String</span></span><br><span class="line">      <span class="attr">hostNetwork:</span> <span class="literal">false</span> <span class="comment"># 是否使用主机网络模式，默认为false</span></span><br><span class="line">    <span class="attr">volumes:</span> <span class="comment"># 在该Pod上定义的共享存储卷列表</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">String</span> <span class="comment"># 共享存储卷名称</span></span><br><span class="line">      <span class="attr">emptyDir:</span> &#123;&#125; <span class="comment"># 类型为emptyDir的存储卷，与Pod有相同生命周期的一个临时目录，为空值</span></span><br><span class="line">      <span class="attr">hostPath:</span> <span class="comment"># 类型为hostPathr的存储卷，将会挂载Pod所在宿主机的目录</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">String</span></span><br><span class="line">      <span class="attr">secret:</span> <span class="comment">#类型为secret的存储卷，在容器内部挂载集群中预定义的secret对象</span></span><br><span class="line">        <span class="attr">secretName:</span> <span class="string">String</span></span><br><span class="line">        <span class="attr">items:</span> </span><br><span class="line">        <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">String</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">String</span></span><br><span class="line">        <span class="attr">configMap:</span> <span class="comment">#类型为secret的存储卷，挂载预定义的configMap对象到容器内部</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">String</span></span><br><span class="line">          <span class="attr">items:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">String</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">String</span>    </span><br></pre></td></tr></table></figure><h1 id="控制器pod的管理">控制器——Pod的管理</h1><p>一般来说，用户不会直接创建Pod，而是创建控制器，让控制器来管理Pod。在控制器中定义Pod的部署方式，如有多少个副本、需要在哪种Node上运行等。根据不同的业务场景，Kubernetes提供了多种控制器。</p><h2 id="deployment-控制器部署">Deployment 控制器（部署）</h2><p>Deployment控制器是最常用的工作负载对象之一。</p><p>在使用Kubernetes时，通常要管理由多个相同Pod所组成的Pod集合，而不是单个Pod。通过Deployment控制器，可以定义Pod模板，并设置相应控制参数以实现水平伸缩，以调节正在运行的相同Pod数。</p><p>Deployment控制器保证在集群中部署的Pod数量和配置中的Pod数量一致。若Pod或主机出现故障，则会自动启用新的Pod进行补充。</p><p>创建Deployment 控制器也需要定义一个模板文件（.yml文件）。可以用Deployment控制器的模板来定义资源，以下是模板的主要内容及对应说明：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span> <span class="comment"># 使用的API版本，V1表示使用稳定版本</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span> <span class="comment"># 要创建的资源对象，这里为关键字Deployment</span></span><br><span class="line"><span class="attr">metadata:</span> <span class="comment"># 表示该资源对象的元数据，一个资源对象可拥有多个元数据。表示资源的标识信息</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">String</span> <span class="comment"># 元数据，必填，Deployment控制器的名字</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">String</span> <span class="comment"># 元数据，Deployment控制器的命名空间</span></span><br><span class="line">  <span class="attr">labels:</span> <span class="comment"># 元数据，标签列表</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">value</span> <span class="comment"># 元数据，可定义多个标签的键值对 </span></span><br><span class="line">  <span class="attr">annotations:</span> <span class="comment"># 元数据，自定义注解列表</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">value</span> <span class="comment"># 元数据，可定义多个标签的键值对 </span></span><br><span class="line"><span class="attr">spec:</span> </span><br><span class="line">  <span class="attr">selector:</span> <span class="comment"># 必填，用于指定Deployment控制器针对的Pod的标签选择器，需要与template中的标签匹配</span></span><br><span class="line">    <span class="attr">matchLabels:</span>  <span class="comment"># 定义需要匹配的标签集合</span></span><br><span class="line">      <span class="attr">key:</span> <span class="string">value</span> <span class="comment"># 需要匹配的标签，可定义多个标签的键值对</span></span><br><span class="line">  <span class="attr">template:</span> [<span class="string">PodTemplate</span>] <span class="comment"># 必填，Pod模板，它与Pod具有完全相同的结构，不过他是嵌套的，且不需要带apiVersion或kind字段</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="string">int</span> <span class="comment"># 指定所需Pod的数量，默认为1</span></span><br><span class="line">  <span class="attr">strategy:</span> <span class="comment"># 更新时替换旧Pod的策略</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">Recreate/RollingUpdate</span> <span class="comment"># Recreate表示现有的Pod都会在创建新的Pod之前被终止，RollingUpdate表示以滚动更新方式更新Pod</span></span><br><span class="line">    <span class="attr">rollingUpdate:</span></span><br><span class="line">      <span class="attr">maxSurge:</span> <span class="string">int/int%</span> <span class="comment"># 在滚动更新时，在所需数量的Pod上允许创建的最大Pod数，也可用百分比形式</span></span><br><span class="line">      <span class="attr">maxUnavailable:</span> <span class="string">int/int%</span> <span class="comment"># 在滚动更新时，同时存在最大不可用Pod数，也可用百分比形式</span></span><br><span class="line">  <span class="attr">progressDeadlineseconds:</span> <span class="string">int</span> <span class="comment"># Deployment控制器处于进行状态时的等待秒数，超过这个时间将会变为失败</span></span><br><span class="line">  <span class="attr">minReadySeconds:</span> <span class="string">int</span> <span class="comment"># 指定新创建的Pod应该在没有任何容器崩溃的情况下准备好的最短秒数</span></span><br><span class="line">  <span class="attr">revisionHistoryLimit:</span> <span class="string">int</span> <span class="comment"># 指定要保留的允许回滚的旧ReplicaSet数量</span></span><br><span class="line">  <span class="attr">paused:</span> <span class="string">boolean</span> <span class="comment"># 默认为false，用于暂停和恢复部署，当暂停部署时，Pod模板中spec属性的任何更改都不会触发新的部署</span></span><br></pre></td></tr></table></figure><h2 id="daemonset-控制器有状态副本集">DaemonSet 控制器（有状态副本集）</h2><p>DaemonSet 控制器是一种特殊的Pod控制器，会在集群中的各个节点上运行单一的Pod副本。它非常适合部署那些为节点本身提供服务或执行维护的Pod。如对于日志收集和转发、监控以及运行以增加节点本身功能为目的的服务都使用DaemonSet 控制器。</p><p>DaemonSet 控制器的一些典型用法包括但不限于以下几种：</p><ul><li>运行集群存储Daemon控制器，如在每个Node上运行glusterd、ceph。</li><li>在每个Node上运行日志收集Daemon控制器，如Fluentd、logstash。</li><li>在每个Node上运行监控Daemon控制器，如Prometheus Node Exporter、collectd、Datadog代理、New Relic代理或Ganglia gmond。</li></ul><p>创建DaemonSet 控制器的模板与Deployment控制器的模板相同</p><h2 id="job与cronjob控制器">Job与CronJob控制器</h2><h3 id="job工作负载">Job工作负载</h3><p>Job的工作负载对象基于某一特定任务而运行，当运行任务的容器完成工作后，就会成功退出。若需要执行一次性任务，而非提供连续的服务，则适合创建job工作负载。</p><p>Job控制器可以执行3种类型的任务：</p><ul><li><p>一次性任务：通常只会启动一个Pod（除非Pod失败）。一旦Pod成功终止，Job就算完成了。其模板如下：</p><p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">batch/v1</span> <span class="comment"># 使用的API版本，V1表示使用稳定版本</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Job</span> <span class="comment"># 要创建的资源对象，这里为关键字Job</span></span><br><span class="line"><span class="attr">metadata:</span> <span class="comment"># 表示该资源对象的元数据，一个资源对象可拥有多个元数据。表示资源的标识信息</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">String</span> <span class="comment"># 元数据，必填，Job工作负载的名字</span></span><br><span class="line"><span class="attr">spec:</span> </span><br><span class="line">  <span class="attr">template:</span>  <span class="comment"># 必填，Pod模板，它与Pod具有完全相同的结构，不过他是嵌套的，且不需要带apiVersion或kind字段</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">activeDeadlineSeconds:</span> <span class="string">int</span> <span class="comment"># 指定执行任务的上限时间（单位为秒），超时时任务将强制终止并删除</span></span><br><span class="line">      <span class="attr">ttlSecondsAfterFinished:</span> <span class="string">int</span> <span class="comment"># 用于确定在所有任务执行完成后，需要等待多少秒才可删除Job，默认关闭</span></span><br><span class="line">      <span class="attr">restartPolicy:</span> [<span class="string">Never|OnFailure</span>] </span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">String</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">String</span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span> </span><br><span class="line">        <span class="attr">command:</span> [<span class="string">String</span>]</span><br><span class="line">          <span class="bullet">-</span> <span class="string">--feature-gates=TTLSecondsAfterFinished=true</span> <span class="comment"># 手动开启自动删除Job功能</span></span><br><span class="line">        <span class="attr">args:</span> [<span class="string">String</span>] </span><br></pre></td></tr></table></figure></p></li><li><p>串行式任务：连续、多次地执行某一任务。当上一个任务完成时，接着执行下一个任务，直到全部任务执行完，可以通过spec.completions属性指定执行次数。其模板如下：</p><p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">batch/v1</span> <span class="comment"># 使用的API版本，V1表示使用稳定版本</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Job</span> <span class="comment"># 要创建的资源对象，这里为关键字Job</span></span><br><span class="line"><span class="attr">metadata:</span> <span class="comment"># 表示该资源对象的元数据，一个资源对象可拥有多个元数据。表示资源的标识信息</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">String</span> <span class="comment"># 元数据，必填，Job工作负载的名字</span></span><br><span class="line"><span class="attr">spec:</span> </span><br><span class="line">  <span class="attr">activeDeadlineSeconds:</span> <span class="string">int</span> <span class="comment"># 指定执行任务的上限时间（单位为秒），超时时任务将强制终止并删除</span></span><br><span class="line">  <span class="attr">completions:</span> <span class="string">int</span> <span class="comment"># 设置任务执行次数</span></span><br><span class="line">  <span class="attr">template:</span>  <span class="comment"># 必填，Pod模板，它与Pod具有完全相同的结构，不过他是嵌套的，且不需要带apiVersion或kind字段</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">restartPolicy:</span> [<span class="string">Never|OnFailure</span>] </span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">String</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">String</span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span> </span><br><span class="line">        <span class="attr">command:</span> [<span class="string">String</span>] </span><br><span class="line">        <span class="attr">args:</span> [<span class="string">String</span>] </span><br><span class="line">  </span><br></pre></td></tr></table></figure></p></li><li><p>并行式任务：同一时间并发多次执行任务。可以通过spec.parallelism属性指定并发数，也可以配合spec.completions属性指定总任务的执行次数。其模板如下：</p><p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">batch/v1</span> <span class="comment"># 使用的API版本，V1表示使用稳定版本</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Job</span> <span class="comment"># 要创建的资源对象，这里为关键字Job</span></span><br><span class="line"><span class="attr">metadata:</span> <span class="comment"># 表示该资源对象的元数据，一个资源对象可拥有多个元数据。表示资源的标识信息</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">String</span> <span class="comment"># 元数据，必填，Job工作负载的名字</span></span><br><span class="line"><span class="attr">spec:</span> </span><br><span class="line">  <span class="attr">activeDeadlineSeconds:</span> <span class="string">int</span> <span class="comment"># 指定执行任务的上限时间（单位为秒），超时时任务将强制终止并删除</span></span><br><span class="line">  <span class="attr">completions:</span> <span class="string">int</span> <span class="comment"># 设置任务执行次数</span></span><br><span class="line">  <span class="attr">parallelism:</span> <span class="string">int</span> <span class="comment"># 设置任务并行数 </span></span><br><span class="line">  <span class="attr">template:</span>  <span class="comment"># 必填，Pod模板，它与Pod具有完全相同的结构，不过他是嵌套的，且不需要带apiVersion或kind字段</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">restartPolicy:</span> [<span class="string">Never|OnFailure</span>] </span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">String</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">String</span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span> </span><br><span class="line">        <span class="attr">command:</span> [<span class="string">String</span>] </span><br><span class="line">        <span class="attr">args:</span> [<span class="string">String</span>] </span><br><span class="line">  </span><br></pre></td></tr></table></figure></p></li></ul><h3 id="cronjob控制器">CronJob控制器</h3><p>CronJob控制器是在Job的基础上增加了时间调度，可以在给定的时间点运行一个任务，也可以定期地运行。</p><p>通过CronJob控制器，可以实现以下类型的Job：</p><ul><li>在未来的某个指定时间执行一次Job，例如某项临时任务</li><li>周期性地运行Job，例如，定期备份，发送邮件等</li></ul><p>CronJob控制器的模板如下所示：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">batch/v1betal</span> <span class="comment"># CronJob控制器目前只存在betal版本中</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">CronJob</span> <span class="comment"># 要创建的资源对象，这里为关键字CronJob</span></span><br><span class="line"><span class="attr">metadata:</span> <span class="comment"># 表示该资源对象的元数据，一个资源对象可拥有多个元数据。表示资源的标识信息</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">String</span> <span class="comment"># 元数据，必填，CronJob控制器的名字</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">String</span> <span class="comment"># 元数据，CronJob控制器的命名空间</span></span><br><span class="line">  <span class="attr">labels:</span> <span class="comment"># 元数据，标签列表</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">value</span> <span class="comment"># 元数据，可定义多个标签的键值对 </span></span><br><span class="line">  <span class="attr">annotations:</span> <span class="comment"># 元数据，自定义注解列表</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">value</span> <span class="comment"># 元数据，可定义多个标签的键值对 </span></span><br><span class="line"><span class="attr">spec:</span> </span><br><span class="line">  <span class="attr">schedule:</span> <span class="string">String</span> <span class="comment"># 必填，指定任务运行周期，格式同Cron</span></span><br><span class="line">  <span class="attr">jobTemplate:</span> [<span class="string">JobTemplate</span>] <span class="comment"># 必填，Job模板</span></span><br><span class="line">  <span class="attr">startingDeadlineSeconds:</span> <span class="string">int</span> <span class="comment"># 启动Job的期限（秒）。若执行时间超时，Job将被任务是失败的。若没有指定，则没有期限</span></span><br><span class="line">  <span class="attr">concurrencyPolicy:</span> [<span class="string">Allow|Forbid|Replace</span>]</span><br><span class="line">  <span class="comment"># 若上一个周期的Job没执行完，而下一个周期已开始，在这种并发场景下默认采用Allow策略，允许并发运行Job</span></span><br><span class="line">  <span class="comment"># Forbid表示禁止并发运行，若上一个周期的Job没执行完，则下一个周期会被忽略并不再执行</span></span><br><span class="line">  <span class="comment"># Replace表示取消当前正在运行的Job，用一个新的来替换</span></span><br><span class="line">  <span class="attr">suspend:</span> <span class="string">boolean</span> <span class="comment"># 若设置为true，而上一个周期的Job没执行完，而下一个周期已开始，则后续所有执行都会被挂起</span></span><br><span class="line">  <span class="attr">successfulJobsHistoryLimit:</span> <span class="string">int</span> <span class="comment"># 保留多少条执行成功的Job记录，默认为3</span></span><br><span class="line">  <span class="attr">failedJobsHistoryLimit:</span> <span class="string">int</span> <span class="comment"># 保留多少条执行失败的Job记录，默认为1</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Kubernetes实践之从yaml创建工作负载</summary>
    
    
    
    <category term="Kubernetes" scheme="http://tangmenjue.top/categories/Kubernetes/"/>
    
    
    <category term="Kubernetes" scheme="http://tangmenjue.top/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>docker-compose一键部署Elasticsearch Logstash Kibana</title>
    <link href="http://tangmenjue.top/2023/03/07/docker-compose%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2Elasticsearch%20Logstash%20elasticsearch-head/"/>
    <id>http://tangmenjue.top/2023/03/07/docker-compose%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2Elasticsearch%20Logstash%20elasticsearch-head/</id>
    <published>2023-03-07T02:16:08.000Z</published>
    <updated>2023-03-07T02:16:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介">简介</h1><p>在使用Elasticsearch进行全文搜索时，会使用到Elasticsearch（搜索引擎）、Logstash（数据同步）、Kibana（数据可视化）这三个中间件。在开发或测试环境中部署项目时，常使用docker-compose一键部署项目所需的环境，因此本文记录使用docker-compose一键部署Elasticsearch、Logstash和Kibana的过程。</p><h1 id="部署">部署</h1><h2 id="端口说明">端口说明</h2><ul><li>Elasticsearch：9200（HTTP通信）和9300（TCP通信）</li><li>Logstash：5044和9600（TCP通信）</li><li>Kibana：5601</li></ul><h2 id="配置文件">配置文件</h2><h3 id="docker-compose.yml"><code>docker-compose.yml</code></h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">elasticsearch:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">docker.elastic.co/elasticsearch/elasticsearch:7.16.2</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">elasticsearch_server</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">discovery.type=single-node</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">discovery.zen.minimum_master_nodes=1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ES_JAVA_OPTS=-Xms3g</span> <span class="string">-Xmx3g</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;/home/docker_data/myproj/elasticsearch/data:/data&quot;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9200</span><span class="string">:9200</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9300</span><span class="string">:9300</span> </span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="attr">default:</span>     <span class="comment"># 指定使用的网络</span></span><br><span class="line">      <span class="attr">common:</span></span><br><span class="line">        <span class="attr">aliases:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">elasticsearch</span>     <span class="comment"># 该容器的别名，在 elk_net 网络中的其他容器可以通过别名 elasticsearch 来访问到该容器</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">kibana:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">docker.elastic.co/kibana/kibana:7.16.2</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">elasticsearch</span>    </span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">kibana_server</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span>    </span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ELASTICSEARCH_URL=http://elasticsearch:9200</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SERVER_NAME=kibana</span>    </span><br><span class="line">    <span class="comment"># 如需具体配置，可以创建./config/kibana.yml，并映射</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;/home/docker_data/myproj/config/kibana.yml:/config/kibana.yml&quot;</span>      </span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;5601:5601&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="attr">default:</span></span><br><span class="line">      <span class="attr">common:</span></span><br><span class="line">        <span class="attr">aliases:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">kibana</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">logstash:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">docker.elastic.co/logstash/logstash:7.16.2</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">elasticsearch</span>    </span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">logstash_server</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span> </span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">LS_JAVA_OPTS=-Xmx256m</span> <span class="string">-Xms256m</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;/home/docker_data/myproj/config/logstash.conf:/config/logstash.conf&quot;</span>      </span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="attr">default:</span></span><br><span class="line">      <span class="attr">common:</span></span><br><span class="line">        <span class="attr">aliases:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">logstash</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">entrypoint:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">logstash</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">-f</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/config/logstash.conf</span></span><br><span class="line">    <span class="attr">logging:</span></span><br><span class="line">      <span class="attr">driver:</span> <span class="string">&quot;json-file&quot;</span></span><br><span class="line">      <span class="attr">options:</span></span><br><span class="line">        <span class="attr">max-size:</span> <span class="string">&quot;200m&quot;</span></span><br><span class="line">        <span class="attr">max-file:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line"> <span class="attr">common:</span></span><br><span class="line">  <span class="attr">external:</span></span><br><span class="line">   <span class="attr">name:</span> <span class="string">nginx-bridge</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="elasticsearch.yml"><code>elasticsearch.yml</code></h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cluster.name:</span> <span class="string">&quot;es-server&quot;</span></span><br><span class="line"><span class="attr">network.host:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="attr">http.cors.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">http.cors.allow-origin:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line"><span class="attr">http.cors.allow-headers:</span> <span class="string">Authorization</span></span><br><span class="line"><span class="attr">xpack.security.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">xpack.security.transport.ssl.enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="kibana.yml"><code>kibana.yml</code></h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.host:</span> <span class="string">&quot;0.0.0.0&quot;</span></span><br><span class="line"><span class="attr">server.shutdownTimeout:</span> <span class="string">&quot;5s&quot;</span></span><br><span class="line"><span class="attr">elasticsearch.hosts:</span> [ <span class="string">&quot;http://elasticsearch:9200&quot;</span> ]</span><br><span class="line"><span class="attr">monitoring.ui.container.elasticsearch.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">elasticsearch.username:</span> <span class="string">&quot;elastic&quot;</span></span><br><span class="line"><span class="attr">elasticsearch.password:</span> <span class="string">&quot;123456&quot;</span></span><br></pre></td></tr></table></figure><h3 id="logstash.yml"><code>logstash.yml</code></h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">http.host:</span> <span class="string">&quot;0.0.0.0&quot;</span></span><br><span class="line"><span class="attr">xpack.monitoring.elasticsearch.hosts:</span> [ <span class="string">&quot;http://elasticsearch:9200&quot;</span> ]</span><br><span class="line"><span class="attr">xpack.monitoring.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">xpack.monitoring.elasticsearch.username:</span> <span class="string">logstash_system</span></span><br><span class="line"><span class="attr">xpack.monitoring.elasticsearch.password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure><h3 id="logstash.conf"><code>logstash.conf</code></h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">input</span> &#123;</span><br><span class="line">    <span class="string">stdin</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="string">jdbc</span> &#123;</span><br><span class="line">      <span class="comment"># 数据库连接地址</span></span><br><span class="line">      <span class="string">jdbc_connection_string</span> <span class="string">=&gt;</span> <span class="string">&quot;jdbc:postgresql://127.0.0.1:5432/postgres&quot;</span></span><br><span class="line">      <span class="comment"># 数据库连接账号密码：</span></span><br><span class="line">      <span class="string">jdbc_user</span> <span class="string">=&gt;</span> <span class="string">&quot;postgres&quot;</span></span><br><span class="line">      <span class="string">jdbc_password</span> <span class="string">=&gt;</span> <span class="string">&quot;123456&quot;</span></span><br><span class="line">      <span class="comment"># Pg依赖包路径</span></span><br><span class="line">      <span class="string">jdbc_driver_library</span> <span class="string">=&gt;</span> <span class="string">&quot;pgsql\postgresql-42.5.1.jar&quot;</span></span><br><span class="line">      <span class="string">jdbc_driver_class</span> <span class="string">=&gt;</span> <span class="string">&quot;org.postgresql.Driver&quot;</span></span><br><span class="line">      <span class="comment"># 开启分页查询，默认为false</span></span><br><span class="line">      <span class="string">jdbc_paging_enabled</span> <span class="string">=&gt;</span> <span class="string">&quot;true&quot;</span></span><br><span class="line">      <span class="comment"># 单次分页查询条数（默认100000，若字段较多且更新频率较高，则建议调低此值）</span></span><br><span class="line">      <span class="string">jdbc_page_size</span> <span class="string">=&gt;</span> <span class="string">&quot;300000&quot;</span></span><br><span class="line">      <span class="string">use_column_value</span> <span class="string">=&gt;</span> <span class="string">&quot;true&quot;</span></span><br><span class="line">      <span class="string">tracking_column</span> <span class="string">=&gt;</span> <span class="string">&quot;id&quot;</span> <span class="comment">#根据id字段更新</span></span><br><span class="line">      <span class="comment"># statement为查询数据sql，若sql较复杂，建议通过statement_filepath 配置sql文件的存放路径；</span></span><br><span class="line">      <span class="comment"># statement =&gt; &quot;SELECT * FROM public.SystemName&quot;</span></span><br><span class="line">      <span class="string">statement_filepath</span> <span class="string">=&gt;</span> <span class="string">&quot;pgsql\logstash-pgsql1.sql&quot;</span>  <span class="comment">#这是要操作的sql 表，下面会提供</span></span><br><span class="line">          <span class="comment"># 同步频率（分时天月年），全*默认为每分钟同步一次。现设置每天凌晨4点执行</span></span><br><span class="line">          <span class="string">schedule</span> <span class="string">=&gt;</span> <span class="string">&quot;* 4 * * *&quot;</span></span><br><span class="line">          <span class="comment"># 多表同步时，表类型区分，建议命名为“库名_表名”，每个jdbc模块需对应一个type；</span></span><br><span class="line">          <span class="string">type</span> <span class="string">=&gt;</span> <span class="string">&quot;postgres_SystemName&quot;</span></span><br><span class="line">          <span class="string">jdbc_default_timezone</span> <span class="string">=&gt;&quot;Asia/Shanghai&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="string">jdbc</span> &#123;</span><br><span class="line">      <span class="comment"># 数据库连接地址</span></span><br><span class="line">      <span class="string">jdbc_connection_string</span> <span class="string">=&gt;</span> <span class="string">&quot;jdbc:postgresql://127.0.0.1:5432/postgres&quot;</span></span><br><span class="line">      <span class="comment"># 数据库连接账号密码：</span></span><br><span class="line">      <span class="string">jdbc_user</span> <span class="string">=&gt;</span> <span class="string">&quot;postgres&quot;</span></span><br><span class="line">      <span class="string">jdbc_password</span> <span class="string">=&gt;</span> <span class="string">&quot;123456&quot;</span></span><br><span class="line">      <span class="comment"># Pg依赖包路径</span></span><br><span class="line">      <span class="string">jdbc_driver_library</span> <span class="string">=&gt;</span> <span class="string">&quot;pgsql\postgresql-42.5.1.jar&quot;</span></span><br><span class="line">      <span class="string">jdbc_driver_class</span> <span class="string">=&gt;</span> <span class="string">&quot;org.postgresql.Driver&quot;</span></span><br><span class="line">      <span class="comment"># 开启分页查询，默认为false</span></span><br><span class="line">      <span class="string">jdbc_paging_enabled</span> <span class="string">=&gt;</span> <span class="string">&quot;true&quot;</span></span><br><span class="line">      <span class="comment"># 单次分页查询条数（默认100000，若字段较多且更新频率较高，则建议调低此值）</span></span><br><span class="line">      <span class="string">jdbc_page_size</span> <span class="string">=&gt;</span> <span class="string">&quot;300000&quot;</span></span><br><span class="line">      <span class="string">use_column_value</span> <span class="string">=&gt;</span> <span class="string">&quot;true&quot;</span></span><br><span class="line">      <span class="string">tracking_column</span> <span class="string">=&gt;</span> <span class="string">&quot;id&quot;</span> <span class="comment">#根据id字段更新</span></span><br><span class="line">      <span class="comment"># statement为查询数据sql，若sql较复杂，建议通过statement_filepath 配置sql文件的存放路径；</span></span><br><span class="line">      <span class="comment"># statement =&gt; &quot;SELECT * FROM public.&quot;SystemDetail&quot;&quot;</span></span><br><span class="line">      <span class="string">statement_filepath</span> <span class="string">=&gt;</span> <span class="string">&quot;pgsql\logstash-pgsql2.sql&quot;</span>  <span class="comment">#这是要操作的sql 表，下面会提供</span></span><br><span class="line">          <span class="comment"># 同步频率（分时天月年），默认为每分钟同步一次</span></span><br><span class="line">          <span class="string">schedule</span> <span class="string">=&gt;</span> <span class="string">&quot;* 4 * * *&quot;</span></span><br><span class="line">          <span class="comment"># 多表同步时，表类型区分，建议命名为“库名_表名”，每个jdbc模块需对应一个type；</span></span><br><span class="line">          <span class="string">type</span> <span class="string">=&gt;</span> <span class="string">&quot;postgres_SystemDetail&quot;</span></span><br><span class="line">          <span class="string">jdbc_default_timezone</span> <span class="string">=&gt;&quot;Asia/Shanghai&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="string">jdbc</span> &#123;</span><br><span class="line">      <span class="comment"># 数据库连接地址</span></span><br><span class="line">      <span class="string">jdbc_connection_string</span> <span class="string">=&gt;</span> <span class="string">&quot;jdbc:postgresql://127.0.0.1:5432/postgres&quot;</span></span><br><span class="line">      <span class="comment"># 数据库连接账号密码：</span></span><br><span class="line">      <span class="string">jdbc_user</span> <span class="string">=&gt;</span> <span class="string">&quot;postgres&quot;</span></span><br><span class="line">      <span class="string">jdbc_password</span> <span class="string">=&gt;</span> <span class="string">&quot;123456&quot;</span></span><br><span class="line">      <span class="comment"># Pg依赖包路径</span></span><br><span class="line">      <span class="string">jdbc_driver_library</span> <span class="string">=&gt;</span> <span class="string">&quot;pgsql\postgresql-42.5.1.jar&quot;</span></span><br><span class="line">      <span class="string">jdbc_driver_class</span> <span class="string">=&gt;</span> <span class="string">&quot;org.postgresql.Driver&quot;</span></span><br><span class="line">      <span class="comment"># 开启分页查询，默认为false</span></span><br><span class="line">      <span class="string">jdbc_paging_enabled</span> <span class="string">=&gt;</span> <span class="string">&quot;true&quot;</span></span><br><span class="line">      <span class="comment"># 单次分页查询条数（默认100000，若字段较多且更新频率较高，则建议调低此值）</span></span><br><span class="line">      <span class="string">jdbc_page_size</span> <span class="string">=&gt;</span> <span class="string">&quot;300000&quot;</span></span><br><span class="line">      <span class="string">use_column_value</span> <span class="string">=&gt;</span> <span class="string">&quot;true&quot;</span></span><br><span class="line">      <span class="string">tracking_column</span> <span class="string">=&gt;</span> <span class="string">&quot;id&quot;</span> <span class="comment">#根据id字段更新</span></span><br><span class="line">      <span class="comment"># statement为查询数据sql，若sql较复杂，建议通过statement_filepath 配置sql文件的存放路径；</span></span><br><span class="line">      <span class="comment"># statement =&gt; &quot;SELECT * FROM public.&quot;ProblemList&quot;&quot;</span></span><br><span class="line">      <span class="string">statement_filepath</span> <span class="string">=&gt;</span> <span class="string">&quot;pgsql\logstash-pgsql3.sql&quot;</span>  <span class="comment">#这是要操作的sql 表，下面会提供</span></span><br><span class="line">          <span class="comment"># 同步频率（分时天月年），默认为每分钟同步一次</span></span><br><span class="line">          <span class="string">schedule</span> <span class="string">=&gt;</span> <span class="string">&quot;* 4 * * *&quot;</span></span><br><span class="line">          <span class="comment"># 多表同步时，表类型区分，建议命名为“库名_表名”，每个jdbc模块需对应一个type；</span></span><br><span class="line">          <span class="string">type</span> <span class="string">=&gt;</span> <span class="string">&quot;postgres_ProblemList&quot;</span></span><br><span class="line">          <span class="string">jdbc_default_timezone</span> <span class="string">=&gt;&quot;Asia/Shanghai&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">filter</span> &#123;</span><br><span class="line">    <span class="string">json</span> &#123;</span><br><span class="line">        <span class="string">source</span> <span class="string">=&gt;</span> <span class="string">&quot;message&quot;</span></span><br><span class="line">        <span class="string">remove_field</span> <span class="string">=&gt;</span> [<span class="string">&quot;message&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">output</span> &#123;</span><br><span class="line">    <span class="comment"># output模块的type需和jdbc模块的type一致</span></span><br><span class="line">    <span class="string">if</span> [<span class="string">type</span>] <span class="string">==</span> <span class="string">&quot;postgres_SystemName&quot;</span>&#123;</span><br><span class="line">        <span class="string">elasticsearch</span> &#123;</span><br><span class="line">            <span class="comment"># 配置es集群的地址</span></span><br><span class="line">            <span class="string">hosts</span> <span class="string">=&gt;</span> [<span class="string">&quot;localhost:9200&quot;</span>]</span><br><span class="line">            <span class="comment"># 索引名称，必须小写</span></span><br><span class="line">            <span class="string">index</span> <span class="string">=&gt;</span> <span class="string">&quot;test&quot;</span></span><br><span class="line">            <span class="comment"># 模板地址</span></span><br><span class="line">                  <span class="string">template</span> <span class="string">=&gt;</span> <span class="string">&quot;pgsql\es-template.json&quot;</span>   <span class="comment">#es 索引模板，可不定义</span></span><br><span class="line">                  <span class="string">template_name</span> <span class="string">=&gt;</span> <span class="string">&quot;t-statistic-out-logstash&quot;</span></span><br><span class="line">                  <span class="string">template_overwrite</span> <span class="string">=&gt;</span> <span class="literal">true</span></span><br><span class="line">                  <span class="string">document_type</span> <span class="string">=&gt;</span> <span class="string">&quot;text&quot;</span></span><br><span class="line">            <span class="comment"># 数据唯一索引</span></span><br><span class="line">            <span class="string">document_id</span> <span class="string">=&gt;</span> <span class="string">&quot;<span class="template-variable">%&#123;id&#125;</span>&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="string">if</span> [<span class="string">type</span>] <span class="string">==</span> <span class="string">&quot;postgres_SystemDetail&quot;</span>&#123;</span><br><span class="line">        <span class="string">elasticsearch</span> &#123;</span><br><span class="line">            <span class="comment"># 配置es集群的地址</span></span><br><span class="line">            <span class="string">hosts</span> <span class="string">=&gt;</span> [<span class="string">&quot;localhost:9200&quot;</span>]</span><br><span class="line">            <span class="comment"># 索引名称，必须小写</span></span><br><span class="line">            <span class="string">index</span> <span class="string">=&gt;</span> <span class="string">&quot;test&quot;</span></span><br><span class="line">            <span class="comment"># 模板地址</span></span><br><span class="line">                  <span class="string">template</span> <span class="string">=&gt;</span> <span class="string">&quot;pgsql\es-template.json&quot;</span>   <span class="comment">#es 索引模板，可不定义</span></span><br><span class="line">                  <span class="string">template_name</span> <span class="string">=&gt;</span> <span class="string">&quot;t-statistic-out-logstash&quot;</span></span><br><span class="line">                  <span class="string">template_overwrite</span> <span class="string">=&gt;</span> <span class="literal">true</span></span><br><span class="line">                  <span class="string">document_type</span> <span class="string">=&gt;</span> <span class="string">&quot;text&quot;</span></span><br><span class="line">            <span class="comment"># 数据唯一索引</span></span><br><span class="line">            <span class="string">document_id</span> <span class="string">=&gt;</span> <span class="string">&quot;<span class="template-variable">%&#123;id&#125;</span>&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="string">if</span> [<span class="string">type</span>] <span class="string">==</span> <span class="string">&quot;postgres_ProblemList&quot;</span>&#123;</span><br><span class="line">        <span class="string">elasticsearch</span> &#123;</span><br><span class="line">            <span class="comment"># 配置es集群的地址</span></span><br><span class="line">            <span class="string">hosts</span> <span class="string">=&gt;</span> [<span class="string">&quot;localhost:9200&quot;</span>]</span><br><span class="line">            <span class="comment"># 索引名称，必须小写</span></span><br><span class="line">            <span class="string">index</span> <span class="string">=&gt;</span> <span class="string">&quot;test&quot;</span></span><br><span class="line">            <span class="comment"># 模板地址</span></span><br><span class="line">                  <span class="string">template</span> <span class="string">=&gt;</span> <span class="string">&quot;pgsql\es-template.json&quot;</span>   <span class="comment">#es 索引模板，可不定义</span></span><br><span class="line">                  <span class="string">template_name</span> <span class="string">=&gt;</span> <span class="string">&quot;t-statistic-out-logstash&quot;</span></span><br><span class="line">                  <span class="string">template_overwrite</span> <span class="string">=&gt;</span> <span class="literal">true</span></span><br><span class="line">                  <span class="string">document_type</span> <span class="string">=&gt;</span> <span class="string">&quot;text&quot;</span></span><br><span class="line">            <span class="comment"># 数据唯一索引</span></span><br><span class="line">            <span class="string">document_id</span> <span class="string">=&gt;</span> <span class="string">&quot;<span class="template-variable">%&#123;id&#125;</span>&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="string">stdout</span> &#123;</span><br><span class="line">        <span class="string">codec</span> <span class="string">=&gt;</span> <span class="string">json_lines</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="设置配置密码">设置&amp;配置密码</h2><h3 id="elasticsearch">elasticsearch</h3><p>使用上述配置创建容器后，进入容器中执行以下命令，可配置elastic、kibana、logstash_system等账号的密码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">elasticsearch-setup-passwords interactive</span><br></pre></td></tr></table></figure><p>设置完成后，登录kibana的账号名是kibana，elasticsearch的账户名为elastic。</p><h1 id="一键部署">一键部署</h1><p>梳理好部署目录并创建好对应文件后，执行以下命令启动容器<code>docker-compose up -d</code>。</p><p>在内网使用Elasticsearch、Logstash时，可以不设置密码，但kibana需要设置。</p>]]></content>
    
    
    <summary type="html">使用docker-compose一键部署Elasticsearch Logstash Kibana</summary>
    
    
    
    <category term="Docker" scheme="http://tangmenjue.top/categories/Docker/"/>
    
    <category term="Elasticsearch" scheme="http://tangmenjue.top/categories/Elasticsearch/"/>
    
    
    <category term="Docker" scheme="http://tangmenjue.top/tags/Docker/"/>
    
    <category term="应用部署" scheme="http://tangmenjue.top/tags/%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2/"/>
    
    <category term="Elasticsearch" scheme="http://tangmenjue.top/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>初探vue-quill-editor</title>
    <link href="http://tangmenjue.top/2023/02/23/%E5%88%9D%E6%8E%A2vue-quill-editor/"/>
    <id>http://tangmenjue.top/2023/02/23/%E5%88%9D%E6%8E%A2vue-quill-editor/</id>
    <published>2023-02-23T09:34:16.000Z</published>
    <updated>2023-02-23T09:34:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="富文本编辑器vue-quill-editor">富文本编辑器：vue-quill-editor</h1><p>vue-quill-editor是一款可适配PC端和移动端富文本编辑器，具有可设置自定义配置项、外观简洁且轻量的优点。</p><p>PC端效果图如下：<img src="/2023/02/23/%E5%88%9D%E6%8E%A2vue-quill-editor/1.png"></p><p>移动端的效果图如下：<img src="/2023/02/23/%E5%88%9D%E6%8E%A2vue-quill-editor/2.png"></p><h1 id="vue-quill-editor配置">vue-quill-editor配置</h1><ul><li><p>在项目目录下载vue-quill-editor：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i vue-quill-editor -S</span><br></pre></td></tr></table></figure></p></li><li><p>在Vue页面的script模块中引入vue-quill-editor：</p><p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Quill</span> <span class="keyword">from</span> <span class="string">&quot;quill&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; quillEditor &#125; <span class="keyword">from</span> <span class="string">&quot;vue-quill-editor&quot;</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;quill/dist/quill.core.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;quill/dist/quill.snow.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;quill/dist/quill.bubble.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(quillEditor)<span class="comment">//注册组件的方式之一</span></span><br></pre></td></tr></table></figure></p></li><li><p>在Vue页面的template模块中引入组件：</p><p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">quill-editor</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">v-model</span>=<span class="string">&quot;content&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">ref</span>=<span class="string">&quot;myQuillEditor&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">:options</span>=<span class="string">&quot;editorOption&quot;</span> </span></span><br><span class="line"><span class="tag">    @<span class="attr">blur</span>=<span class="string">&quot;onEditorBlur($event)&quot;</span> </span></span><br><span class="line"><span class="tag">    @<span class="attr">focus</span>=<span class="string">&quot;onEditorFocus($event)&quot;</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">change</span>=<span class="string">&quot;onEditorChange($event)&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">quill-editor</span>&gt;</span></span><br></pre></td></tr></table></figure></p></li><li><p>在Vue页面的scripts模块中完善组件的设置，完整的scripts模块代码如下：</p><p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Quill</span> <span class="keyword">from</span> <span class="string">&quot;quill&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; quillEditor &#125; <span class="keyword">from</span> <span class="string">&quot;vue-quill-editor&quot;</span>; </span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;quill/dist/quill.core.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;quill/dist/quill.snow.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;quill/dist/quill.bubble.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    quillEditor,<span class="comment">//另一种组件注册方式</span></span><br><span class="line">&#125;,</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">content</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      <span class="attr">str</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      <span class="attr">editorOption</span>: &#123;</span><br><span class="line">        <span class="attr">placeholder</span>: <span class="string">&quot;请在这里输入&quot;</span>,</span><br><span class="line">        <span class="attr">modules</span>:&#123;</span><br><span class="line">          <span class="attr">toolbar</span>:[</span><br><span class="line">            [<span class="string">&#x27;bold&#x27;</span>, <span class="string">&#x27;italic&#x27;</span>, <span class="string">&#x27;underline&#x27;</span>, <span class="string">&#x27;strike&#x27;</span>],    <span class="comment">//加粗，斜体，下划线，删除线</span></span><br><span class="line">            [<span class="string">&#x27;blockquote&#x27;</span>, <span class="string">&#x27;code-block&#x27;</span>],     <span class="comment">//引用，代码块</span></span><br><span class="line">            [&#123; <span class="string">&#x27;header&#x27;</span>: <span class="number">1</span> &#125;, &#123; <span class="string">&#x27;header&#x27;</span>: <span class="number">2</span> &#125;],        <span class="comment">// 标题，键值对的形式；1、2表示字体大小</span></span><br><span class="line">            [&#123; <span class="string">&#x27;list&#x27;</span>: <span class="string">&#x27;ordered&#x27;</span>&#125;, &#123; <span class="string">&#x27;list&#x27;</span>: <span class="string">&#x27;bullet&#x27;</span> &#125;],     <span class="comment">//列表</span></span><br><span class="line">            [&#123; <span class="string">&#x27;script&#x27;</span>: <span class="string">&#x27;sub&#x27;</span>&#125;, &#123; <span class="string">&#x27;script&#x27;</span>: <span class="string">&#x27;super&#x27;</span> &#125;],   <span class="comment">// 上下标</span></span><br><span class="line">            [&#123; <span class="string">&#x27;indent&#x27;</span>: <span class="string">&#x27;-1&#x27;</span>&#125;, &#123; <span class="string">&#x27;indent&#x27;</span>: <span class="string">&#x27;+1&#x27;</span> &#125;],     <span class="comment">// 缩进</span></span><br><span class="line">            [&#123; <span class="string">&#x27;direction&#x27;</span>: <span class="string">&#x27;rtl&#x27;</span> &#125;], <span class="comment">// 文本方向</span></span><br><span class="line">            [&#123; <span class="string">&#x27;header&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="literal">false</span>] &#125;],     <span class="comment">//几级标题</span></span><br><span class="line">            [&#123; <span class="string">&#x27;color&#x27;</span>: [] &#125;, &#123; <span class="string">&#x27;background&#x27;</span>: [] &#125;],     <span class="comment">// 字体颜色，字体背景颜色</span></span><br><span class="line">            [&#123; <span class="string">&#x27;font&#x27;</span>: []&#125;],</span><br><span class="line">            [&#123;<span class="string">&#x27;align&#x27;</span>: []&#125;],    <span class="comment">//对齐方式</span></span><br><span class="line">            [<span class="string">&#x27;clean&#x27;</span>],    <span class="comment">//清除字体样式</span></span><br><span class="line">            [<span class="string">&#x27;image&#x27;</span>,<span class="string">&#x27;video&#x27;</span>]    <span class="comment">//上传图片、上传视频</span></span><br><span class="line">          ],</span><br><span class="line">        &#125;,   </span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">      <span class="title function_">onEditorReady</span>(<span class="params">editor</span>) &#123;&#125;,<span class="comment">// 准备编辑器</span></span><br><span class="line">      <span class="title function_">onEditorBlur</span>(<span class="params"></span>)&#123;&#125;, <span class="comment">// 失去焦点事件</span></span><br><span class="line">      <span class="title function_">onEditorFocus</span>(<span class="params"></span>)&#123;&#125;, <span class="comment">// 获得焦点事件</span></span><br><span class="line">      <span class="comment">// 内容改变事件--给父组件传值</span></span><br><span class="line">      <span class="title function_">onEditorChange</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.$emit(<span class="string">&quot;input&quot;</span>, <span class="variable language_">this</span>.<span class="property">content</span>);</span><br><span class="line">      &#125;, </span><br><span class="line">      <span class="comment">// 转码</span></span><br><span class="line">      <span class="title function_">escapeStringHTML</span>(<span class="params">str</span>) &#123;</span><br><span class="line">            str = str.<span class="title function_">replace</span>(<span class="regexp">/&amp;lt;/g</span>,<span class="string">&#x27;&lt;&#x27;</span>);</span><br><span class="line">            str = str.<span class="title function_">replace</span>(<span class="regexp">/&amp;gt;/g</span>,<span class="string">&#x27;&gt;&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span> str;</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">      <span class="title function_">editor</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">myQuillEditor</span>.<span class="property">quill</span>;</span><br><span class="line">      &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">    <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> content = <span class="string">&#x27;&#x27;</span>;  <span class="comment">// 请求后台返回的内容字符串</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">str</span> = <span class="variable language_">this</span>.escapeStringHTML(content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>至此便可以使用富文本了。需要注意的是，该富文本编辑器的所编辑的内容，在存储数据时会按照html的格式存储，例如：</p><p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入内容为123时，</span><br><span class="line">存储到后台的实际文本为<span class="tag">&lt;<span class="name">p</span>&gt;</span>123<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p></li><li><p>因此要从后台读取数据时，需要使用<code>v-html</code>的方式来解析数据，在需要让存储数据显示的Vue页面里，添加如下代码即可：</p><p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">&quot;item.answer&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ql-editor&quot;</span> &gt;</span></span><br><span class="line">  &#123;&#123;content&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&lt;--其中content为存储vue-quill-editor内容的参数--&gt;</span><br></pre></td></tr></table></figure></p></li></ul><p>使用<code>v-html</code>解析数据时，会出现所展示的图片尺寸异常的情况，若想让图片显示出正常的大小，只需在样式style中添加以下CSS代码即可：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.ql-editor</span> <span class="selector-tag">img</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="调整图片尺寸图片拖拽上传pc端">调整图片尺寸&amp;图片拖拽上传（PC端）</h1><p>直接使用vue-quill-editor上传图片时，图片是不能实现调整图片尺寸和图片拖拽上传的，若想要实现这些功能，则需要下载插件<code>quill-image-resize-module</code>和<code>quill-image-drop-module</code>。</p><h2 id="插件配置">插件配置</h2><ul><li><p>首先需要下载插件：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i quill-image-drop-module -S</span><br><span class="line">npm i quill-image-resize-module -S</span><br></pre></td></tr></table></figure></p></li><li><p>然后在Vue页面的script模块中引入这两个插件：</p><p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ImageDrop</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;quill-image-drop-module&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ImageResize</span> <span class="keyword">from</span> <span class="string">&#x27;quill-image-resize-module&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Quill</span>.<span class="title function_">register</span>(<span class="string">&#x27;modules/imageDrop&#x27;</span>,<span class="title class_">ImageDrop</span>);</span><br><span class="line"><span class="title class_">Quill</span>.<span class="title function_">register</span>(<span class="string">&#x27;modules/imageResize&#x27;</span>, <span class="title class_">ImageResize</span>);</span><br></pre></td></tr></table></figure></p></li><li><p>然后在<code>data return</code> 中引入插件的配置如下：</p><p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">editorOption</span>: &#123;</span><br><span class="line">  <span class="attr">modules</span>:&#123;               </span><br><span class="line">    <span class="attr">imageDrop</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="attr">imageResize</span>:&#123;</span><br><span class="line">      <span class="attr">displaySize</span>:&#123;</span><br><span class="line">        <span class="attr">backgroundColor</span>: <span class="string">&quot;black&quot;</span>,</span><br><span class="line">        <span class="attr">border</span>: <span class="string">&quot;none&quot;</span>,</span><br><span class="line">        <span class="attr">color</span>: <span class="string">&quot;white&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">modules</span>:[<span class="string">&#x27;Resize&#x27;</span>,<span class="string">&#x27;DisplaySize&#x27;</span>,<span class="string">&#x27;Toolbar&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>配置引入后，在<code>vue.config.js</code>文件中引入一下配置：</p><p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">configureWebpack</span>: &#123;</span><br><span class="line">    <span class="attr">plugins</span>:[</span><br><span class="line">      <span class="keyword">new</span> webpack.<span class="title class_">ProvidePlugin</span>(&#123;</span><br><span class="line">        <span class="string">&#x27;window.Quill&#x27;</span>:<span class="string">&#x27;quill/dist/quill.js&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Quill&#x27;</span>:<span class="string">&#x27;quill/dist/quill.js&#x27;</span></span><br><span class="line">      &#125;)</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p></li><li><p>重启vue-cli后，便可在PC端实现调整图片尺寸和图片拖拽上传的功能</p></li></ul>]]></content>
    
    
    <summary type="html">富文本编辑器vue-quill-editor的使用</summary>
    
    
    
    <category term="前端" scheme="http://tangmenjue.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Vue.js" scheme="http://tangmenjue.top/tags/Vue-js/"/>
    
    <category term="前端" scheme="http://tangmenjue.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Oracle Sql语句查库</title>
    <link href="http://tangmenjue.top/2023/02/21/Oracle%20Sql%E8%AF%AD%E5%8F%A5%E6%9F%A5%E5%BA%93/"/>
    <id>http://tangmenjue.top/2023/02/21/Oracle%20Sql%E8%AF%AD%E5%8F%A5%E6%9F%A5%E5%BA%93/</id>
    <published>2023-02-21T04:00:45.000Z</published>
    <updated>2023-02-21T04:00:45.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据库连接工具dbeaver">数据库连接工具：DBeaver</h1><p>本文中使用的数据库连接工具是DBeaver，其是一款免费且跨平台的数据库连接工具。其优势是会在首次链接数据库时，下载所需驱动，解决了数据库版本不兼容的问题。</p><p>该工具的下载地址为：<a href="https://dbeaver.io/download/">Download | DBeaver Community</a>，直接根据安装指示点击下一步即可完成安装。</p><p>安装好后打开软件，点击左上角的图标新建连接：<img src="/2023/02/21/Oracle%20Sql%E8%AF%AD%E5%8F%A5%E6%9F%A5%E5%BA%93/1.png"></p><p>在弹出的窗口里选择Oracle，填好相应的信息后，点击完成。然后会弹出下载驱动文件的页面，点击下载驱动：<img src="/2023/02/21/Oracle%20Sql%E8%AF%AD%E5%8F%A5%E6%9F%A5%E5%BA%93/2.png"></p><p>在左方便可看到已连接的数据库，右键数据库名字-SQL编辑器-SQL编辑器便可打开一个可以编写sql语句的脚本编辑器，其他模块的使用方法与pgAdmin 、Navicat等工具的相同。</p><h1 id="模糊查询">模糊查询</h1><p>查询test_table表中名字含有“张三”的数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test_table</span><br><span class="line"><span class="keyword">WHERE</span> name <span class="keyword">like</span> <span class="string">&#x27;%张三%&#x27;</span></span><br><span class="line"><span class="comment">-- %张三，表示匹配结尾为张三的数据</span></span><br><span class="line"><span class="comment">-- 张三%，表示匹配开头为张三的数据</span></span><br><span class="line"><span class="comment">-- %张三%，表示匹配任意位置含有张三的数据</span></span><br></pre></td></tr></table></figure><h1 id="查询语句中含有变量">查询语句中含有变量</h1><p>查询test_table表中年龄等于参数year值的数据，其中year参数的值在运行sql语句时输入：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test_table a</span><br><span class="line"><span class="keyword">WHERE</span> a.old<span class="operator">=</span>:<span class="keyword">year</span></span><br><span class="line"><span class="comment">-- test_table a，即设置表格test_table的别名为a，后续可用a来代替表格test_table</span></span><br><span class="line"><span class="comment">-- :year，表示变量year</span></span><br></pre></td></tr></table></figure><p>查询test_table表中名字含有参数search值的数据，其中search参数的值在运行sql语句时输入：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test_table</span><br><span class="line"><span class="keyword">WHERE</span> name <span class="keyword">like</span> <span class="string">&#x27;%&#x27;</span><span class="operator">||</span>:<span class="keyword">search</span><span class="operator">||</span><span class="string">&#x27;%&#x27;</span></span><br><span class="line"><span class="comment">-- :search，表示变量search</span></span><br><span class="line"><span class="comment">-- ||:search||中，||为连接符，类似于Python中print里的+号，即&#x27;%&#x27;||:search||&#x27;%&#x27;等价于Python中的print里的(&#x27;%&#x27;+search+&#x27;%&#x27;)</span></span><br></pre></td></tr></table></figure><p>查询test_table表中学号为参数num值的名字，其中num参数的值在运行sql语句时输入:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> name <span class="keyword">from</span> test_table a</span><br><span class="line"><span class="keyword">WHERE</span> a.snum<span class="operator">=</span>to_char(:num)</span><br><span class="line"><span class="comment">-- to_char函数用来将数组转为字符串</span></span><br><span class="line"><span class="comment">-- distinct参数用来去除重复数据</span></span><br></pre></td></tr></table></figure><p>查询test_table表中名字为参数search值的数据，所查询的结果中含有参数值的数据排在前面：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span>  <span class="operator">*</span> <span class="keyword">from</span> test_table</span><br><span class="line"><span class="keyword">WHERE</span> name <span class="keyword">like</span> <span class="string">&#x27;%&#x27;</span><span class="operator">||</span>:<span class="keyword">search</span><span class="operator">||</span><span class="string">&#x27;%&#x27;</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> (<span class="keyword">case</span> <span class="keyword">when</span> name <span class="keyword">like</span> <span class="string">&#x27;%&#x27;</span><span class="operator">||</span>:<span class="keyword">search</span><span class="operator">||</span><span class="string">&#x27;%&#x27;</span> <span class="keyword">then</span> <span class="number">0</span> <span class="keyword">end</span>)</span><br><span class="line"><span class="comment">-- case 条件 then 0 end，表示满足条件的数据排在第0位，即满足条件的数据优先显示</span></span><br></pre></td></tr></table></figure><h1 id="左连接查询">左连接查询</h1><p>进行左连接(Left join)时，查询将左边表格T1中的每一行都与右边表格T2中的行进行比较，返回的结果会有以下三种情况：</p><ul><li>若T1中的某条记录在T2中刚好只有一条记录可以匹配，则返回的结果中会生成一个新的行</li><li>若T1中的某条记录在T2中有N条记录可以匹配，则返回的结果中也会生成N个新的行，这些行所包含的T1的字段值是重复的</li><li>若T1中的某条记录在T2中没有可以匹配的记录，则返回的结果中会生成一个新的行，该行所包含的T2的字段值是NULL</li></ul><p>例如，左表为T1，其有如下数据：<img src="/2023/02/21/Oracle%20Sql%E8%AF%AD%E5%8F%A5%E6%9F%A5%E5%BA%93/3.png">右表为T2，其有如下数据：<img src="/2023/02/21/Oracle%20Sql%E8%AF%AD%E5%8F%A5%E6%9F%A5%E5%BA%93/4.png"></p><p>将两者进行左连接查询，即需要返回左表中所有行的数据以及右表中包含number行的数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> T1 </span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> T2 </span><br><span class="line"><span class="keyword">on</span> T1.num<span class="operator">=</span>T2.number</span><br><span class="line"><span class="comment">-- T1的num列引用T2表中的number列。其中num列的部分值是无效的</span></span><br><span class="line"><span class="comment">-- 若要过滤掉所有name为NULL的记录，可以增加以下where子句</span></span><br><span class="line"><span class="keyword">where</span> number <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br></pre></td></tr></table></figure><p>查询结果如下：<img src="/2023/02/21/Oracle%20Sql%E8%AF%AD%E5%8F%A5%E6%9F%A5%E5%BA%93/5.png"></p><p>去除NULL记录后的查询结果如下：<img src="/2023/02/21/Oracle%20Sql%E8%AF%AD%E5%8F%A5%E6%9F%A5%E5%BA%93/6.png"></p>]]></content>
    
    
    <summary type="html">使用Oracle Sql语句查库</summary>
    
    
    
    <category term="数据库" scheme="http://tangmenjue.top/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="数据库" scheme="http://tangmenjue.top/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>实现Postgresql与Elasticsearch的数据同步</title>
    <link href="http://tangmenjue.top/2023/01/17/%E5%AE%9E%E7%8E%B0Postgresql%E4%B8%8EElasticsearch%E7%9A%84%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/"/>
    <id>http://tangmenjue.top/2023/01/17/%E5%AE%9E%E7%8E%B0Postgresql%E4%B8%8EElasticsearch%E7%9A%84%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/</id>
    <published>2023-01-17T09:20:52.000Z</published>
    <updated>2023-01-17T09:20:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>遇到一个针对业务数据实现全文搜素的需求，而数据存在于pgsql数据库中，因此要将数据库中的数据同步到ES里。有两种方式可以实现：一是通过ES的API进行增删改查，二是通过中间件来进行数据全量、增量的同步。由于调用API的方式比较麻烦，本文便为第二种实现方式。</p><p>刚开始时是准备使用<code>multicorn</code>插件的，奈何在windows 10的环境下一直都无法进行<code>make&amp;&amp;make install</code>安装，而由于环境问题也无法使用<a href="https://github.com/appbaseio/abc">ABC</a>工具（不支持postgresql14），随即作罢，改换成实时数据采集引擎<code>logstash</code>来同步数据。</p><h1 id="logstash概要"><code>logstash</code>概要</h1><p><code>Logstash</code>作为Elasicsearch常用的实时数据采集引擎，可以采集来自不同数据源的数据，并对数据进行处理后输出到多种输出源，是Elastic Stack 的重要组成部分。官网网址为：<a href="https://www.elastic.co/cn/downloads/logstash">Logstash</a></p><p>其数据处理的过程包括Inputs、Filters、Outputs三部分，在Inputs和Outputs中可以使用Codecs对数据格式进行处理。这四个部分均是以插件形式存在，用户通过定义pipeline配置文件，设置需要使用的input、filter、output、codec插件以实现特定的数据采集、数据处理、数据输出等功能。</p><ul><li>Inputs：用于从数据源获取数据，常见的插件如<code>file</code>、<code>syslog</code>、<code>redis</code>、<code>beats</code>等</li><li>Filters：用于处理数据如格式转换、数据派生等，常见的插件如<code>grok</code>、<code>mutate</code>、<code>drop</code>、<code>clone</code>、<code>geoip</code>等</li><li>Outputs：用于数据输出，常见的插件如<code>elasticsearch</code>、<code>file</code>、<code>graphite</code>、<code>statsd</code>等</li><li><code>Codecs</code>：<code>Codecs</code>不是一个单独的流程，而是在输入和输出等插件中用于数据转换的模块，用于对数据进行编码处理，常见的插件如<code>json</code>、<code>multiline</code>等</li></ul><p>在<a href="https://github.com/appbaseio/abc/releases/tag/1.0.0">网页</a>中下载好对应版本的可运行文件并解压，将解压目录增加到环境变量中，即可在cmd命令行里运行。</p><h1 id="安装配置">安装配置</h1><h2 id="本文环境要求">本文环境要求</h2><p>系统版本：window10</p><p>JDK版本：1.8.0_351（要求jdk版本在1.8以上）</p><p>Elasticsearch版本：5.5.3</p><p>Postgresql版本：14.5</p><h2 id="安装--单表同步配置">安装--单表同步配置</h2><ul><li><p>安装logstash：5.5.3（ELK版本要求保持一致），下载网址：<a href="https://www.elastic.co/cn/downloads/past-releases/logstash-5-5-3">logstash 5.5.3</a></p></li><li><p>将安装包解压后，进入解压目录<code>logstash-5.5.3\bin</code>后，新建pgsql文件夹（名字随意）</p></li><li><p>下载连接postgreSQL数据库的pg引擎，即与JDK版本对应的jdbc驱动：<a href="https://jdbc.postgresql.org/download/">Java 8-42.5.1</a>，解压后放到pgsql文件夹中</p></li><li><p>在pgsql文件夹中新建文件<code>logstash-pgsql.conf</code>，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">input</span> &#123;</span><br><span class="line">    <span class="string">stdin</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="string">jdbc</span> &#123;</span><br><span class="line">      <span class="comment"># 数据库连接地址</span></span><br><span class="line">      <span class="string">jdbc_connection_string</span> <span class="string">=&gt;</span> <span class="string">&quot;jdbc:postgresql://127.0.0.1:5432/postgres&quot;</span></span><br><span class="line">      <span class="comment"># 数据库连接账号密码：</span></span><br><span class="line">      <span class="string">jdbc_user</span> <span class="string">=&gt;</span> <span class="string">&quot;***&quot;</span></span><br><span class="line">      <span class="string">jdbc_password</span> <span class="string">=&gt;</span> <span class="string">&quot;******&quot;</span></span><br><span class="line">      <span class="comment"># Pg依赖包路径</span></span><br><span class="line">      <span class="string">jdbc_driver_library</span> <span class="string">=&gt;</span> <span class="string">&quot;pgsql\postgresql-42.5.1.jar&quot;</span></span><br><span class="line">      <span class="string">jdbc_driver_class</span> <span class="string">=&gt;</span> <span class="string">&quot;org.postgresql.Driver&quot;</span></span><br><span class="line">      <span class="comment"># 开启分页查询，默认为false</span></span><br><span class="line">      <span class="string">jdbc_paging_enabled</span> <span class="string">=&gt;</span> <span class="string">&quot;true&quot;</span></span><br><span class="line">      <span class="comment"># 单次分页查询条数（默认100000，若字段较多且更新频率较高，则建议调低此值）</span></span><br><span class="line">      <span class="string">jdbc_page_size</span> <span class="string">=&gt;</span> <span class="string">&quot;300000&quot;</span></span><br><span class="line">      <span class="string">use_column_value</span> <span class="string">=&gt;</span> <span class="string">&quot;true&quot;</span></span><br><span class="line">      <span class="string">tracking_column</span> <span class="string">=&gt;</span> <span class="string">&quot;id&quot;</span> <span class="comment">#根据id字段更新</span></span><br><span class="line">      <span class="comment"># statement为查询数据sql，若sql较复杂，建议通过statement_filepath 配置sql文件的存放路径；</span></span><br><span class="line">      <span class="comment"># statement =&gt; &quot;SELECT * FROM public.表名&quot;</span></span><br><span class="line">      <span class="string">statement_filepath</span> <span class="string">=&gt;</span> <span class="string">&quot;pgsql\logstash-pgsql.sql&quot;</span>  <span class="comment">#这是要操作的sql 表，下面会提供</span></span><br><span class="line">          <span class="comment"># 同步频率（分时天月年），默认为每分钟同步一次</span></span><br><span class="line">          <span class="string">schedule</span> <span class="string">=&gt;</span> <span class="string">&quot;* * * * *&quot;</span></span><br><span class="line">          <span class="string">type</span> <span class="string">=&gt;</span> <span class="string">&quot;jdbc&quot;</span></span><br><span class="line">          <span class="string">jdbc_default_timezone</span> <span class="string">=&gt;&quot;Asia/Shanghai&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">filter</span> &#123;</span><br><span class="line">    <span class="string">json</span> &#123;</span><br><span class="line">        <span class="string">source</span> <span class="string">=&gt;</span> <span class="string">&quot;message&quot;</span></span><br><span class="line">        <span class="string">remove_field</span> <span class="string">=&gt;</span> [<span class="string">&quot;message&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">output</span> &#123;</span><br><span class="line">    <span class="string">elasticsearch</span> &#123;</span><br><span class="line">        <span class="comment"># 配置es集群的地址</span></span><br><span class="line">        <span class="string">hosts</span> <span class="string">=&gt;</span> [<span class="string">&quot;localhost:9200&quot;</span>]</span><br><span class="line">        <span class="comment"># 索引名称，必须小写</span></span><br><span class="line">        <span class="string">index</span> <span class="string">=&gt;</span> <span class="string">&quot;test&quot;</span></span><br><span class="line">        <span class="comment"># 模板地址</span></span><br><span class="line">              <span class="string">template</span> <span class="string">=&gt;</span> <span class="string">&quot;pgsql\es-template.json&quot;</span>   <span class="comment">#es 索引模板，可不定义</span></span><br><span class="line">              <span class="string">template_name</span> <span class="string">=&gt;</span> <span class="string">&quot;t-statistic-out-logstash&quot;</span></span><br><span class="line">              <span class="string">template_overwrite</span> <span class="string">=&gt;</span> <span class="literal">true</span></span><br><span class="line">              <span class="string">document_type</span> <span class="string">=&gt;</span> <span class="string">&quot;out&quot;</span></span><br><span class="line">        <span class="comment"># 数据唯一索引</span></span><br><span class="line">        <span class="string">document_id</span> <span class="string">=&gt;</span> <span class="string">&quot;<span class="template-variable">%&#123;id&#125;</span>&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="string">stdout</span> &#123;</span><br><span class="line">        <span class="string">codec</span> <span class="string">=&gt;</span> <span class="string">json_lines</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在pgsql文件夹中新建文件<code>logstash-pgsql.sql</code>，内容如下：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> public.&quot;表名&quot;</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> id <span class="keyword">ASC</span> </span><br></pre></td></tr></table></figure></p></li><li><p>在pgsql文件夹中新建文件<code>es-template.json</code>，内容如下：</p><p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;template&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;t-statistis-out-template&quot;</span><span class="punctuation">,</span> </span><br><span class="line">    <span class="attr">&quot;order&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;refresh_interval&quot;</span><span class="punctuation">:</span> <span class="string">&quot;5s&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;mappings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;_default_&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;_all&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;enabled&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">false</span></span><span class="punctuation">&#125;</span><span class="punctuation">,</span> </span><br><span class="line">                <span class="attr">&quot;dynamic_templates&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                    <span class="punctuation">&#123;</span> </span><br><span class="line">              <span class="attr">&quot;message_field&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span> </span><br><span class="line">                <span class="attr">&quot;match&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;message&quot;</span><span class="punctuation">,</span> </span><br><span class="line">                <span class="attr">&quot;match_mapping_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span> </span><br><span class="line">                <span class="attr">&quot;mapping&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;not_analyzed&quot;</span> <span class="punctuation">&#125;</span> </span><br><span class="line">              <span class="punctuation">&#125;</span> </span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span> </span><br><span class="line">              <span class="attr">&quot;string_fields&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span> </span><br><span class="line">                <span class="attr">&quot;match&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;*&quot;</span><span class="punctuation">,</span> </span><br><span class="line">                <span class="attr">&quot;match_mapping_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span> </span><br><span class="line">                <span class="attr">&quot;mapping&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;not_analyzed&quot;</span> <span class="punctuation">&#125;</span> </span><br><span class="line">              <span class="punctuation">&#125;</span> </span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">//将id、name、tag更换为自己表中的表头，其中keyword为Elasticsearch中用于索引结构化内容的字段</span></span><br><span class="line">                    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;integer&quot;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span><span class="punctuation">,</span>                    </span><br><span class="line">                    <span class="attr">&quot;tag&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span>                  </span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;aliases&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></p></li><li><p>打开cmd，将目录切换到<code>logstash-5.5.3\bin</code>，输入命令启动logstash：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logstash -f ./pgsql/logstash-pgsql.conf</span><br></pre></td></tr></table></figure></p></li><li><p>成功启动的截图如下：<img src="/2023/01/17/%E5%AE%9E%E7%8E%B0Postgresql%E4%B8%8EElasticsearch%E7%9A%84%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/1.png"></p></li></ul><h2 id="安装--多表同步配置">安装--多表同步配置</h2><p>多表配置和单表配置的区别在于input模块的jdbc模块有几个type，output模块就需对应有几个type：</p><ul><li><p><code>logstash-pgsql.conf</code>文件的内容如下：</p><p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">input</span> &#123;</span><br><span class="line">    <span class="string">stdin</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="string">jdbc</span> &#123;</span><br><span class="line">      <span class="comment"># 数据库连接地址</span></span><br><span class="line">      <span class="string">jdbc_connection_string</span> <span class="string">=&gt;</span> <span class="string">&quot;jdbc:postgresql://127.0.0.1:5432/postgres&quot;</span></span><br><span class="line">      <span class="comment"># 数据库连接账号密码：</span></span><br><span class="line">      <span class="string">jdbc_user</span> <span class="string">=&gt;</span> <span class="string">&quot;***&quot;</span></span><br><span class="line">      <span class="string">jdbc_password</span> <span class="string">=&gt;</span> <span class="string">&quot;******&quot;</span></span><br><span class="line">      <span class="comment"># Pg依赖包路径</span></span><br><span class="line">      <span class="string">jdbc_driver_library</span> <span class="string">=&gt;</span> <span class="string">&quot;pgsql\postgresql-42.5.1.jar&quot;</span></span><br><span class="line">      <span class="string">jdbc_driver_class</span> <span class="string">=&gt;</span> <span class="string">&quot;org.postgresql.Driver&quot;</span></span><br><span class="line">      <span class="comment"># 开启分页查询，默认为false</span></span><br><span class="line">      <span class="string">jdbc_paging_enabled</span> <span class="string">=&gt;</span> <span class="string">&quot;true&quot;</span></span><br><span class="line">      <span class="comment"># 单次分页查询条数（默认100000，若字段较多且更新频率较高，则建议调低此值）</span></span><br><span class="line">      <span class="string">jdbc_page_size</span> <span class="string">=&gt;</span> <span class="string">&quot;300000&quot;</span></span><br><span class="line">      <span class="string">use_column_value</span> <span class="string">=&gt;</span> <span class="string">&quot;true&quot;</span></span><br><span class="line">      <span class="string">tracking_column</span> <span class="string">=&gt;</span> <span class="string">&quot;id&quot;</span> <span class="comment">#根据id字段更新</span></span><br><span class="line">      <span class="comment"># statement为查询数据sql，若sql较复杂，建议通过statement_filepath 配置sql文件的存放路径；</span></span><br><span class="line">      <span class="comment"># statement =&gt; &quot;SELECT * FROM public.test1&quot;</span></span><br><span class="line">      <span class="string">statement_filepath</span> <span class="string">=&gt;</span> <span class="string">&quot;pgsql\logstash-pgsql1.sql&quot;</span>  <span class="comment">#这是要操作的sql 表，下面会提供</span></span><br><span class="line">          <span class="comment"># 同步频率（分时天月年），默认为每分钟同步一次</span></span><br><span class="line">          <span class="string">schedule</span> <span class="string">=&gt;</span> <span class="string">&quot;* * * * *&quot;</span></span><br><span class="line">          <span class="comment"># 多表同步时，表类型区分，建议命名为“库名_表名”，每个jdbc模块需对应一个type；</span></span><br><span class="line">          <span class="string">type</span> <span class="string">=&gt;</span> <span class="string">&quot;postgres_test1&quot;</span></span><br><span class="line">          <span class="string">jdbc_default_timezone</span> <span class="string">=&gt;&quot;Asia/Shanghai&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="string">jdbc</span> &#123;</span><br><span class="line">          <span class="comment">#其他配置此处省略，详情参考前一个jdbc的配置</span></span><br><span class="line">          <span class="comment"># ...</span></span><br><span class="line">          </span><br><span class="line">          <span class="comment"># 多表同步时，表类型区分，建议命名为“库名_表名”，每个jdbc模块需对应一个type；</span></span><br><span class="line">          <span class="string">type</span> <span class="string">=&gt;</span> <span class="string">&quot;postgres_test2&quot;</span></span><br><span class="line">          <span class="string">jdbc_default_timezone</span> <span class="string">=&gt;&quot;Asia/Shanghai&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">filter</span> &#123;</span><br><span class="line">    <span class="string">json</span> &#123;</span><br><span class="line">        <span class="string">source</span> <span class="string">=&gt;</span> <span class="string">&quot;message&quot;</span></span><br><span class="line">        <span class="string">remove_field</span> <span class="string">=&gt;</span> [<span class="string">&quot;message&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">output</span> &#123;</span><br><span class="line">    <span class="comment"># output模块的type需和jdbc模块的type一致</span></span><br><span class="line">    <span class="string">if</span> [<span class="string">type</span>] <span class="string">==</span> <span class="string">&quot;postgres_test1&quot;</span>&#123;</span><br><span class="line">        <span class="string">elasticsearch</span> &#123;</span><br><span class="line">            <span class="comment"># 配置es集群的地址</span></span><br><span class="line">            <span class="string">hosts</span> <span class="string">=&gt;</span> [<span class="string">&quot;localhost:9200&quot;</span>]</span><br><span class="line">            <span class="comment"># 索引名称，必须小写</span></span><br><span class="line">            <span class="string">index</span> <span class="string">=&gt;</span> <span class="string">&quot;test&quot;</span></span><br><span class="line">            <span class="comment"># 模板地址</span></span><br><span class="line">                  <span class="string">template</span> <span class="string">=&gt;</span> <span class="string">&quot;pgsql\es-template.json&quot;</span>   <span class="comment">#es 索引模板，可不定义</span></span><br><span class="line">                  <span class="string">template_name</span> <span class="string">=&gt;</span> <span class="string">&quot;t-statistic-out-logstash&quot;</span></span><br><span class="line">                  <span class="string">template_overwrite</span> <span class="string">=&gt;</span> <span class="literal">true</span></span><br><span class="line">                  <span class="string">document_type</span> <span class="string">=&gt;</span> <span class="string">&quot;out&quot;</span></span><br><span class="line">            <span class="comment"># 数据唯一索引</span></span><br><span class="line">            <span class="string">document_id</span> <span class="string">=&gt;</span> <span class="string">&quot;<span class="template-variable">%&#123;id&#125;</span>&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="string">if</span> [<span class="string">type</span>] <span class="string">==</span> <span class="string">&quot;postgres_test2&quot;</span>&#123;</span><br><span class="line">        <span class="string">elasticsearch</span> &#123;</span><br><span class="line">            <span class="comment"># 配置es集群的地址</span></span><br><span class="line">            <span class="string">hosts</span> <span class="string">=&gt;</span> [<span class="string">&quot;localhost:9200&quot;</span>]</span><br><span class="line">            <span class="comment"># 索引名称，必须小写</span></span><br><span class="line">            <span class="string">index</span> <span class="string">=&gt;</span> <span class="string">&quot;test&quot;</span></span><br><span class="line">            <span class="comment"># 模板地址</span></span><br><span class="line">                  <span class="string">template</span> <span class="string">=&gt;</span> <span class="string">&quot;pgsql\es-template.json&quot;</span>   <span class="comment">#es 索引模板，可不定义</span></span><br><span class="line">                  <span class="string">template_name</span> <span class="string">=&gt;</span> <span class="string">&quot;t-statistic-out-logstash&quot;</span></span><br><span class="line">                  <span class="string">template_overwrite</span> <span class="string">=&gt;</span> <span class="literal">true</span></span><br><span class="line">                  <span class="string">document_type</span> <span class="string">=&gt;</span> <span class="string">&quot;out&quot;</span></span><br><span class="line">            <span class="comment"># 数据唯一索引</span></span><br><span class="line">            <span class="string">document_id</span> <span class="string">=&gt;</span> <span class="string">&quot;<span class="template-variable">%&#123;id&#125;</span>&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="string">stdout</span> &#123;</span><br><span class="line">        <span class="string">codec</span> <span class="string">=&gt;</span> <span class="string">json_lines</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li></ul>]]></content>
    
    
    <summary type="html">python环境中使用Elasticsearch</summary>
    
    
    
    <category term="Elasticsearch" scheme="http://tangmenjue.top/categories/Elasticsearch/"/>
    
    <category term="python" scheme="http://tangmenjue.top/categories/python/"/>
    
    
    <category term="Elasticsearch" scheme="http://tangmenjue.top/tags/Elasticsearch/"/>
    
    <category term="python" scheme="http://tangmenjue.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python环境中Elasticsearch的使用</title>
    <link href="http://tangmenjue.top/2023/01/13/python%E7%8E%AF%E5%A2%83%E4%B8%ADElasticsearch%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://tangmenjue.top/2023/01/13/python%E7%8E%AF%E5%A2%83%E4%B8%ADElasticsearch%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2023-01-13T09:20:41.000Z</published>
    <updated>2023-01-13T09:20:41.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="elasticsearch简介">Elasticsearch简介</h1><p>Elasticsearch是目前全文搜索引擎的首选项，它可以快速地存储、搜索和分析海量数据。Elastic的底层是开源库Lucene，而Elastic是Lucene的封装，其提供了REST API的操作接口，使之可以开箱即用。维基百科、Stack Overflow、Github等网站的搜索引擎都是采用它。</p><h1 id="windows系统下elasticsearch的安装和配置">Windows系统下Elasticsearch的安装和配置</h1><h2 id="安装elasticsearch服务端">安装Elasticsearch服务端</h2><ul><li>在<a href="https://www.elastic.co/cn/downloads/elasticsearch">官网</a>中选择所需的合适版本下载即可。本文使用的Elasticsearch版本为5.5.3，下载链接为<a href="https://www.elastic.co/cn/downloads/past-releases/elasticsearch-5-5-3">Elasticsearch 5.5.3 | Elastic</a>，选择zip版本下载。</li><li>下载完成后将程序解压到电脑中，打开解压目录进入到bin文件夹，双击<code>elasticsearch.bat</code>文件即可启动Elasticsearch服务（若启动失败，则查看环境中是否安装了jdk），窗口出现以下结果则表示服务启动成功<img src="/2023/01/13/python%E7%8E%AF%E5%A2%83%E4%B8%ADElasticsearch%E7%9A%84%E4%BD%BF%E7%94%A8/0.png"></li><li>服务启动成功后，访问<code>localhost:9200</code>，若看到以下显示，则代表安装成功<img src="/2023/01/13/python%E7%8E%AF%E5%A2%83%E4%B8%ADElasticsearch%E7%9A%84%E4%BD%BF%E7%94%A8/1.png"></li></ul><h3 id="相关配置">相关配置</h3><ul><li><p>由于Elasticsearch可直接通过http请求访问，所以将9200端口直接暴露在网络当中是十分危险的，需要对访问进行限制。</p></li><li><p>在Elasticsearch安装目录下，进入config目录，打开<code>elasticsearch.yml</code>配置文件。在配置文件中，修改<code>network.host</code>配置如下：</p><p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置网络请求中的相关参数及设置</span></span><br><span class="line"><span class="attr">network.host:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="attr">http.cors.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">http.cors.allow-origin:</span> <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure></p><p>由于本人是自己测试，因此设为了允许所有来源访问且使Elasticsearch支持跨域请求，如对访问安全有要求或者是线上的服务，建议配置为具体的IP地址<img src="/2023/01/13/python%E7%8E%AF%E5%A2%83%E4%B8%ADElasticsearch%E7%9A%84%E4%BD%BF%E7%94%A8/2.png"></p></li></ul><h2 id="安装elasticsearch客户端">安装Elasticsearch客户端</h2><ul><li><p>打开cmd，使用pip命令在项目目录中安装Elasticsearch，由于本人服务端使用的版本是5.5.3，因此客户端版本也是安装.5.3版本：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装最新版本</span></span><br><span class="line">pip install elasticsearch</span><br><span class="line"><span class="comment"># 安装指定版本</span></span><br><span class="line">pip install elasticsearch==5.5.3</span><br></pre></td></tr></table></figure></p></li><li><p>安装完成后，在python代码中导入elasticsearch包：</p><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> elasticsearch <span class="keyword">import</span> Elasticsearch</span><br></pre></td></tr></table></figure></p></li><li><p>接着获取elasticsearch的示例对象，不传入参数时则默认连接本地的，这里介绍三种连接方式：</p><ul><li><p>默认连接本地elasticsearch：</p><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">es=Elasticsearch()</span><br></pre></td></tr></table></figure></p></li><li><p>连接本地9200端口：</p><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">es=Elasticsearch([<span class="string">&#x27;127.0.0.1:9200&#x27;</span>])</span><br><span class="line">es=Elasticsearch(hosts=<span class="string">&quot;127.0.0.1&quot;</span>,port=<span class="number">9200</span>,timeout=<span class="number">3600</span>) <span class="comment"># timeout为超时时间</span></span><br></pre></td></tr></table></figure></p></li><li><p>连接集群，以列表的形式存放各节点的ip地址</p><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">es=Elasticsearch(</span><br><span class="line">    [</span><br><span class="line">        &#123;<span class="string">&quot;host&quot;</span>:<span class="string">&quot;10.17.212.3&quot;</span>,<span class="string">&quot;port&quot;</span>:<span class="number">139</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;host&quot;</span>:<span class="string">&quot;192.168.233.1&quot;</span>,<span class="string">&quot;port&quot;</span>:<span class="number">139</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;host&quot;</span>:<span class="string">&quot;192.168.18.1&quot;</span>,<span class="string">&quot;port&quot;</span>:<span class="number">139</span>&#125;</span><br><span class="line">    ],</span><br></pre></td></tr></table></figure></p></li></ul></li><li><p>若需要配置忽略响应状态码，可编写代码如下：</p><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">es=Elasticsearch([<span class="string">&#x27;127.0.0.1:9200&#x27;</span>],ignore=<span class="number">400</span>) <span class="comment"># 忽略返回的400状态码</span></span><br><span class="line">es=Elasticsearch([<span class="string">&#x27;127.0.0.1:9200&#x27;</span>],ignore=<span class="number">400</span>) <span class="comment"># 以列表的形式忽略多个状态码</span></span><br></pre></td></tr></table></figure></p></li></ul><h4 id="一个简单的示例">一个简单的示例</h4><p>保持Elasticsearch服务端正在运行的情况下，运行以下代码，便可以检验Elasticsearch服务端与客户端之间是否能连接：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> elasticsearch <span class="keyword">import</span> Elasticsearch</span><br><span class="line">es=Elasticsearch([<span class="string">&#x27;127.0.0.1:9200&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(es.index(index=<span class="string">&#x27;py2&#x27;</span>,doc_type=<span class="string">&#x27;doc&#x27;</span>,<span class="built_in">id</span>=<span class="number">1</span>,body=&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">18</span>&#125;))</span><br><span class="line"><span class="built_in">print</span>(es.get(index=<span class="string">&#x27;py2&#x27;</span>,doc_type=<span class="string">&#x27;doc&#x27;</span>,<span class="built_in">id</span>=<span class="number">1</span>))</span><br><span class="line"><span class="comment"># 第1个print为创建py2索引，并插入一条数据，第2个print查询指定文档。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询结果如下：</span></span><br><span class="line">&#123;<span class="string">&#x27;_index&#x27;</span>: <span class="string">&#x27;py2&#x27;</span>, <span class="string">&#x27;_type&#x27;</span>: <span class="string">&#x27;doc&#x27;</span>, <span class="string">&#x27;_id&#x27;</span>: <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;_version&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;result&#x27;</span>: <span class="string">&#x27;updated&#x27;</span>, <span class="string">&#x27;_shards&#x27;</span>: &#123;<span class="string">&#x27;total&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;successful&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;failed&#x27;</span>: <span class="number">0</span>&#125;, <span class="string">&#x27;created&#x27;</span>: <span class="literal">False</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;_index&#x27;</span>: <span class="string">&#x27;py2&#x27;</span>, <span class="string">&#x27;_type&#x27;</span>: <span class="string">&#x27;doc&#x27;</span>, <span class="string">&#x27;_id&#x27;</span>: <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;_version&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;found&#x27;</span>: <span class="literal">True</span>, <span class="string">&#x27;_source&#x27;</span>: &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="安装图形化插件">安装图形化插件</h2><ul><li><p>点击<a href="https://github.com/mobz/elasticsearch-head">链接</a>下载head插件，下载后解压即可</p></li><li><p>确保node.js已安装，若未安装可以在<a href="https://nodejs.org/en/download/">官网</a>处下载安装</p></li><li><p>打开cmd，进入到head插件的解压目录中，打开<code>package.json</code>文件查看使用的grunt版本，输入以下命令安装相应版本的grunt-cli</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PS D:\elasticsearch-head-master&gt; npm install grunt@1.0.1</span><br><span class="line">PS D:\elasticsearch-head-master&gt; npm install grunt@1.0.1 --save-dev</span><br></pre></td></tr></table></figure></p></li><li><p>继续输入以下命令下载项目所需的插件，启动图形化插件：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PS D:\elasticsearch-head-master&gt; npm install</span><br><span class="line">PS D:\elasticsearch-head-master&gt; grunt server</span><br></pre></td></tr></table></figure></p><p>图像化插件成功启动的截图如下：<img src="/2023/01/13/python%E7%8E%AF%E5%A2%83%E4%B8%ADElasticsearch%E7%9A%84%E4%BD%BF%E7%94%A8/3.png"></p></li></ul><h1 id="python环境下操作elasticsearch">Python环境下操作Elasticsearch</h1><h2 id="基础操作">基础操作</h2><h3 id="创建索引">创建索引</h3><p><code>es.indices.create()</code>：创建索引</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个索引为test的索引</span></span><br><span class="line">es.indices.create(index=<span class="string">&#x27;test&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="删除索引">删除索引</h3><p><code>es.indices.delete()</code>：删除索引</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除索引为test的索引</span></span><br><span class="line">es.indices.delete(index=<span class="string">&#x27;test&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="插入数据">插入数据</h3><p><code>es.index()</code>：插入数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">doc = &#123;</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;方天&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;age&#x27;</span>: <span class="string">&#x27;23&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 在test索引id为2的位置插入一条数据</span></span><br><span class="line">es.index(index=<span class="string">&#x27;test&#x27;</span>, <span class="built_in">id</span>=<span class="string">&#x27;2&#x27;</span>, document=doc)</span><br></pre></td></tr></table></figure><h3 id="删除数据">删除数据</h3><p><code>es.delete()</code>：删除指定数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除test索引id为3的数据</span></span><br><span class="line">es.delete(index=<span class="string">&#x27;test&#x27;</span>,<span class="built_in">id</span>=<span class="string">&#x27;3&#x27;</span>,doc_type=<span class="string">&#x27;_doc&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="更新数据">更新数据</h3><p><code>es.update()</code>：更新指定字段</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">doc = &#123;</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;李邱俊&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;age&#x27;</span>: <span class="string">&#x27;20&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 将test索引id为2的数据更新为新数据</span></span><br><span class="line">es.update(index=<span class="string">&#x27;test&#x27;</span>,<span class="built_in">id</span>=<span class="string">&#x27;2&#x27;</span>,doc=doc)</span><br></pre></td></tr></table></figure><h3 id="查询操作">查询操作</h3><p><code>es.get()</code>：查询数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询test索引id为1的数据</span></span><br><span class="line">es.get(index=<span class="string">&#x27;test&#x27;</span>,<span class="built_in">id</span>=<span class="string">&#x27;1&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="查询函数">查询函数</h2><h3 id="基础查询">基础查询</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询test索引前10条数据，其中index为所需查询数据的索引</span></span><br><span class="line">es.search(index=<span class="string">&#x27;test&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="过滤字段查询">过滤字段查询</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 只显示test索引的age字段信息，其中filter_path参数为添加过滤路径，显示指定字段(默认显示所有字段信息)</span></span><br><span class="line">es.search(index=<span class="string">&#x27;test&#x27;</span>,filter_path=[<span class="string">&#x27;hits.hits._source.age&#x27;</span>])</span><br></pre></td></tr></table></figure><h3 id="切片查询">切片查询</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询test索引中，从序号为1的位置查询两条数据，其中from_参数为从指定索引开始查询，size为查询数据的条数</span></span><br><span class="line">es.search(index=<span class="string">&#x27;test&#x27;</span>, from_=<span class="number">1</span>, size=<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h3 id="模糊查询分词">模糊查询（分词）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询test索引中，age字段为20的数据</span></span><br><span class="line"><span class="comment"># 其中query为要查询数据的规则,match表示为模糊查询(分词)，语句query=&#123;&#x27;match&#x27;:&#123;&#x27;age&#x27;:20&#125;&#125;为检索指定的字段</span></span><br><span class="line">es.search(index=<span class="string">&#x27;test&#x27;</span>, query=&#123;<span class="string">&#x27;match&#x27;</span>:&#123;<span class="string">&#x27;age&#x27;</span>:<span class="number">20</span>&#125;&#125;)</span><br></pre></td></tr></table></figure><h3 id="模糊查询不分词">模糊查询（不分词）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询test索引中，name字段为杨晨的数据,match_phrase表示为模糊查询(不分词)，</span></span><br><span class="line">es.search(index=<span class="string">&#x27;test&#x27;</span>, query=&#123;<span class="string">&#x27;match_phrase&#x27;</span>:&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;杨晨&#x27;</span>&#125;&#125;)</span><br></pre></td></tr></table></figure><h3 id="精准单值查询">精准单值查询</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询test索引中，age为20的数据，term表示为精确单值查询，terms表示为精确多值查询</span></span><br><span class="line">es.search(index=<span class="string">&#x27;test&#x27;</span>, query=&#123;<span class="string">&#x27;term&#x27;</span>:&#123;<span class="string">&#x27;age&#x27;</span>:<span class="number">20</span>&#125;&#125;)</span><br><span class="line"><span class="comment"># 查询test索引中，name为杨晨的数据，查询中文，要在字段后面加上.keyword</span></span><br><span class="line">es.search(index=<span class="string">&#x27;test&#x27;</span>, query=&#123;<span class="string">&#x27;term&#x27;</span>:&#123;<span class="string">&#x27;name.keyword&#x27;</span>:<span class="string">&#x27;杨晨&#x27;</span>&#125;&#125;)</span><br></pre></td></tr></table></figure><h3 id="多字段查询">多字段查询</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询test索引中，name和about都为小美的数据，multi_match表示为多字段查询</span></span><br><span class="line">es.search(index=<span class="string">&#x27;test&#x27;</span>,query=&#123;<span class="string">&#x27;multi_match&#x27;</span>:&#123;<span class="string">&#x27;query&#x27;</span>:<span class="string">&#x27;小美&#x27;</span>,<span class="string">&quot;fields&quot;</span>:[<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;about&#x27;</span>]&#125;&#125;)</span><br></pre></td></tr></table></figure><h3 id="前缀查询">前缀查询</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询test索引中，name字段前缀为小的数据，prefix表示为前缀查询</span></span><br><span class="line">es.search(index=<span class="string">&#x27;test&#x27;</span>,query=&#123;<span class="string">&#x27;prefix&#x27;</span>:&#123;<span class="string">&#x27;name.keyword&#x27;</span>:<span class="string">&#x27;小&#x27;</span>&#125;&#125;)</span><br></pre></td></tr></table></figure><h3 id="通配符查询">通配符查询</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询test索引中，name字段为杨*的数据，wildcard表示启用通配符查询，?代表一个字符，*代表0或多个字符，只能查询单一格式的数据</span></span><br><span class="line">es.search(index=<span class="string">&#x27;test&#x27;</span>,query=&#123;<span class="string">&#x27;wildcard&#x27;</span>:&#123;<span class="string">&#x27;name.keyword&#x27;</span>:<span class="string">&#x27;杨?&#x27;</span>&#125;&#125;)</span><br></pre></td></tr></table></figure><h3 id="正则查询">正则查询</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询test索引中，name字段为杨*的数据，regexp表示启用正则查询</span></span><br><span class="line"><span class="built_in">print</span>(es.search(index=<span class="string">&#x27;test&#x27;</span>,query=&#123;<span class="string">&#x27;regexp&#x27;</span>:&#123;<span class="string">&#x27;name.keyword&#x27;</span>:<span class="string">&#x27;杨.&#x27;</span>&#125;&#125;))</span><br></pre></td></tr></table></figure><h3 id="多条件查询">多条件查询</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询test索引中，name字段为小美，id字段为1的数据</span></span><br><span class="line"><span class="comment"># 其中bool表示多条件查询，must表示与，should表示或,must_not表示非</span></span><br><span class="line"><span class="built_in">print</span>(es.search(index=<span class="string">&#x27;test&#x27;</span>,query=&#123;<span class="string">&#x27;bool&#x27;</span>:&#123;<span class="string">&#x27;must&#x27;</span>:&#123;<span class="string">&#x27;term&#x27;</span>:&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;小美&#x27;</span>&#125;,<span class="string">&#x27;term&#x27;</span>:&#123;<span class="string">&#x27;id&#x27;</span>:<span class="string">&#x27;1&#x27;</span>&#125;&#125;&#125;&#125;))</span><br></pre></td></tr></table></figure><h3 id="存在字段查询">存在字段查询</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询test索引中，包含age字段的数据，其中exists表示存在字段查询</span></span><br><span class="line"><span class="built_in">print</span>(es.search(index=<span class="string">&#x27;test&#x27;</span>,query=&#123;<span class="string">&#x27;exists&#x27;</span>:&#123;<span class="string">&#x27;field&#x27;</span>:<span class="string">&#x27;age&#x27;</span>&#125;&#125;))</span><br></pre></td></tr></table></figure><h3 id="范围查询">范围查询</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询test索引中，age字段大于20小于等于23的数据</span></span><br><span class="line"><span class="comment"># 其中range表示范围查询，gt表示大于，gte表示大于等于，lt表示小于，lte表示小于等于</span></span><br><span class="line"><span class="built_in">print</span>(es.search(index=<span class="string">&#x27;test&#x27;</span>,query=&#123;<span class="string">&#x27;range&#x27;</span>:&#123;<span class="string">&#x27;age&#x27;</span>:&#123;<span class="string">&#x27;gt&#x27;</span>:<span class="number">20</span>,<span class="string">&#x27;lte&#x27;</span>:<span class="number">23</span>&#125;&#125;&#125;))</span><br></pre></td></tr></table></figure><h3 id="json字段查询">Json字段查询</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询test索引中，jsonfield1字段下json数据jsonfield2字段的数据包含&#x27;json&#x27;的数据</span></span><br><span class="line"><span class="comment"># 其中nested表示json数据查询，path参数为指定json数据的字段，query参数为指定的查询方式</span></span><br><span class="line"><span class="built_in">print</span>(es.search(index=<span class="string">&#x27;test&#x27;</span>,query=&#123;<span class="string">&#x27;nested&#x27;</span>:&#123;<span class="string">&#x27;path&#x27;</span>:<span class="string">&#x27;jsonfield1&#x27;</span>,<span class="string">&#x27;query&#x27;</span>:&#123;<span class="string">&#x27;term&#x27;</span>:&#123;<span class="string">&#x27;jsonfield1.jsonfield2&#x27;</span>:<span class="string">&#x27;json&#x27;</span>&#125;&#125;&#125;&#125;))</span><br></pre></td></tr></table></figure><h3 id="排序">排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询test索引中的数据，按照age字段降序，其中sort表示排序查询，参数asc为升序，desc为降序</span></span><br><span class="line"><span class="built_in">print</span>(es.search(index=<span class="string">&#x27;test&#x27;</span>, sort=&#123;<span class="string">&#x27;age.keyword&#x27;</span>:&#123;<span class="string">&#x27;order&#x27;</span>:<span class="string">&#x27;desc&#x27;</span>&#125;&#125;))</span><br></pre></td></tr></table></figure><h1 id="通过网络请求操作elasticsearch">通过网络请求操作ElasticSearch</h1><h2 id="创建索引与映射字段">创建索引与映射字段</h2><p>创建索引的语法如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">PUT http://localhost:9200/索引库名</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;mappings&quot;</span>:&#123;</span><br><span class="line">    <span class="string">&quot;类型名称&quot;</span>:&#123;</span><br><span class="line">      <span class="string">&quot;properties&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;字段名&quot;</span>:&#123;</span><br><span class="line">          <span class="string">&quot;type&quot;</span>:<span class="string">&quot;类型&quot;</span>,</span><br><span class="line">          <span class="string">&quot;index&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">          <span class="string">&quot;store&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">          <span class="string">&quot;analyzer&quot;</span>:<span class="string">&quot;分词器&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参数详情如下：</p><ul><li>类型名称：就是type的概念，类似于数据库中的不同表</li><li>字段名：类似于数据库中的字段名称</li><li>type：类似于数据库中字段的类型，可以是text、long、short、data、object等</li><li>index：是否索引，默认为true。若需要根据该字段进行查询或排序，则需要将该字段index设置为true，否则设置为false</li><li>store：是否单独存储，默认为false，一般内容比较多的字段设置成true，可以提升查询性能</li><li>analyzer：分词器，如<code>ik_smart</code>、<code>ik_max_word</code>等</li></ul><p>示例</p><ul><li><p>通过postman发送PUT请求创建索引，以下代码在Elasticsearch 6.x以下能正常执行：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">PUT http://localhost:9200/sku</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;mappings&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;doc&quot;</span>:&#123;</span><br><span class="line">      <span class="string">&quot;properties&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>:&#123;</span><br><span class="line">          <span class="string">&quot;type&quot;</span>:<span class="string">&quot;text&quot;</span>,</span><br><span class="line">          <span class="string">&quot;analyzer&quot;</span>:<span class="string">&quot;ik_smart&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;price&quot;</span>:&#123;</span><br><span class="line">          <span class="string">&quot;type&quot;</span>:<span class="string">&quot;integer&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;image&quot;</span>:&#123;</span><br><span class="line">          <span class="string">&quot;type&quot;</span>:<span class="string">&quot;text&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;createTime&quot;</span>:&#123;</span><br><span class="line">          <span class="string">&quot;type&quot;</span>:<span class="string">&quot;date&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;spuId&quot;</span>:&#123;</span><br><span class="line">          <span class="string">&quot;type&quot;</span>:<span class="string">&quot;text&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;categoryName&quot;</span>:&#123;</span><br><span class="line">          <span class="string">&quot;type&quot;</span>:<span class="string">&quot;keyword&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;brandName&quot;</span>:&#123;</span><br><span class="line">          <span class="string">&quot;type&quot;</span>:<span class="string">&quot;keyword&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;spec&quot;</span>:&#123;</span><br><span class="line">          <span class="string">&quot;type&quot;</span>:<span class="string">&quot;object&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;selNum&quot;</span>:&#123;</span><br><span class="line">          <span class="string">&quot;type&quot;</span>:<span class="string">&quot;integer&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;commentNum&quot;</span>:&#123;</span><br><span class="line">          <span class="string">&quot;type&quot;</span>:<span class="string">&quot;integer&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>执行成功则返回的结果为：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;acknowledged&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;shards_acknowledged&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li></ul><h3 id="查看索引字段类型">查看索引字段类型</h3><p>使用postman查看索引字段类型语法如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看sku文档</span></span><br><span class="line">GET http://localhost:9200/sku/_mapping</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看group文档</span></span><br><span class="line">GET http://localhost:9200/group/_mapping</span><br></pre></td></tr></table></figure><h2 id="文档增加与修改">文档增加与修改</h2><h3 id="增加文档自动生成id">增加文档自动生成ID</h3><p>通过POST请求，可以向一个已经存在的索引库中添加数据，语法如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST http://localhost:9200/索引库名/类型名</span><br><span class="line">&#123;</span><br><span class="line">      <span class="string">&quot;key&quot;</span>:<span class="string">&quot;value&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用postman发送POST请求示例如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">POST http://localhost:9200/sku/doc</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>:<span class="string">&quot;小米手机&quot;</span>,</span><br><span class="line">  <span class="string">&quot;price&quot;</span>:200000,</span><br><span class="line">  <span class="string">&quot;spuId&quot;</span>:101,</span><br><span class="line">  <span class="string">&quot;createTime&quot;</span>:<span class="string">&quot;2020-05-09&quot;</span>,</span><br><span class="line">  <span class="string">&quot;brandName&quot;</span>:<span class="string">&quot;小米&quot;</span>,</span><br><span class="line">  <span class="string">&quot;categoryName&quot;</span>:<span class="string">&quot;手机&quot;</span>,</span><br><span class="line">  <span class="string">&quot;saleNum&quot;</span>:10012,</span><br><span class="line">  <span class="string">&quot;commentNum&quot;</span>:323,</span><br><span class="line">  <span class="string">&quot;spec&quot;</span>:&#123;</span><br><span class="line">    <span class="string">&quot;网络制式&quot;</span>:<span class="string">&quot;移动4g&quot;</span>,</span><br><span class="line">    <span class="string">&quot;屏幕尺寸&quot;</span>:<span class="string">&quot;4.5&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行成功时返回信息如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">    <span class="string">&quot;_index&quot;</span>: <span class="string">&quot;sku&quot;</span>,</span><br><span class="line">    <span class="string">&quot;_type&quot;</span>: <span class="string">&quot;doc&quot;</span>,</span><br><span class="line">    <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;AYWp1L_wYrK1VsxqV5G5&quot;</span>,</span><br><span class="line">    <span class="string">&quot;_version&quot;</span>: 1,</span><br><span class="line">    <span class="string">&quot;result&quot;</span>: <span class="string">&quot;created&quot;</span>,</span><br><span class="line">    <span class="string">&quot;_shards&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;total&quot;</span>: 2,</span><br><span class="line">        <span class="string">&quot;successful&quot;</span>: 1,</span><br><span class="line">        <span class="string">&quot;failed&quot;</span>: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;created&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="新增文档指定id">新增文档指定ID</h3><p>若想要在新增文档时指定ID，可以通过PUT命令，其语法如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PUT http://localhost:9200/索引库名/类型/ID值</span><br><span class="line">&#123;</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用postman发送PUT请求示例如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>:<span class="string">&quot;小米电视&quot;</span>,</span><br><span class="line">  <span class="string">&quot;price&quot;</span>:100000,</span><br><span class="line">  <span class="string">&quot;spuId&quot;</span>:10110,</span><br><span class="line">  <span class="string">&quot;createTime&quot;</span>:<span class="string">&quot;2020-05-09&quot;</span>,</span><br><span class="line">  <span class="string">&quot;brandName&quot;</span>:<span class="string">&quot;小米&quot;</span>,</span><br><span class="line">  <span class="string">&quot;categoryName&quot;</span>:<span class="string">&quot;电视&quot;</span>,</span><br><span class="line">  <span class="string">&quot;saleNum&quot;</span>:10012,</span><br><span class="line">  <span class="string">&quot;commentNum&quot;</span>:323,</span><br><span class="line">  <span class="string">&quot;spec&quot;</span>:&#123;</span><br><span class="line">    <span class="string">&quot;网络制式&quot;</span>:<span class="string">&quot;移动4g&quot;</span>,</span><br><span class="line">    <span class="string">&quot;屏幕尺寸&quot;</span>:<span class="string">&quot;39&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行成功时返回信息如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;_index&quot;</span>: <span class="string">&quot;sku&quot;</span>,</span><br><span class="line">    <span class="string">&quot;_type&quot;</span>: <span class="string">&quot;doc&quot;</span>,</span><br><span class="line">    <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;_version&quot;</span>: 1,</span><br><span class="line">    <span class="string">&quot;result&quot;</span>: <span class="string">&quot;created&quot;</span>,</span><br><span class="line">    <span class="string">&quot;_shards&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;total&quot;</span>: 2,</span><br><span class="line">        <span class="string">&quot;successful&quot;</span>: 1,</span><br><span class="line">        <span class="string">&quot;failed&quot;</span>: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;created&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过GET请求可以查询新增的数据：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">GET http://localhost:9200/sku/_search</span><br><span class="line"><span class="comment"># 返回的结果为</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;took&quot;</span>: 1,</span><br><span class="line">    <span class="string">&quot;timed_out&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">&quot;_shards&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;total&quot;</span>: 5,</span><br><span class="line">        <span class="string">&quot;successful&quot;</span>: 5,</span><br><span class="line">        <span class="string">&quot;failed&quot;</span>: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;hits&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;total&quot;</span>: 2,</span><br><span class="line">        <span class="string">&quot;max_score&quot;</span>: 1.0,</span><br><span class="line">        <span class="string">&quot;hits&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;_index&quot;</span>: <span class="string">&quot;sku&quot;</span>,</span><br><span class="line">                <span class="string">&quot;_type&quot;</span>: <span class="string">&quot;doc&quot;</span>,</span><br><span class="line">                <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;AYWp1L_wYrK1VsxqV5G5&quot;</span>,</span><br><span class="line">                <span class="string">&quot;_score&quot;</span>: 1.0,</span><br><span class="line">                <span class="string">&quot;_source&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;小米手机&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;price&quot;</span>: 200000,</span><br><span class="line">                    <span class="string">&quot;spuId&quot;</span>: 101,</span><br><span class="line">                    <span class="string">&quot;createTime&quot;</span>: <span class="string">&quot;2020-05-09&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;brandName&quot;</span>: <span class="string">&quot;小米&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;categoryName&quot;</span>: <span class="string">&quot;手机&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;saleNum&quot;</span>: 10012,</span><br><span class="line">                    <span class="string">&quot;commentNum&quot;</span>: 323,</span><br><span class="line">                    <span class="string">&quot;spec&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;网络制式&quot;</span>: <span class="string">&quot;移动4g&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;屏幕尺寸&quot;</span>: <span class="string">&quot;4.5&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;_index&quot;</span>: <span class="string">&quot;sku&quot;</span>,</span><br><span class="line">                <span class="string">&quot;_type&quot;</span>: <span class="string">&quot;doc&quot;</span>,</span><br><span class="line">                <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">                <span class="string">&quot;_score&quot;</span>: 1.0,</span><br><span class="line">                <span class="string">&quot;_source&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;小米电视&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;price&quot;</span>: 100000,</span><br><span class="line">                    <span class="string">&quot;spuId&quot;</span>: 10110,</span><br><span class="line">                    <span class="string">&quot;createTime&quot;</span>: <span class="string">&quot;2020-05-09&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;brandName&quot;</span>: <span class="string">&quot;小米&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;categoryName&quot;</span>: <span class="string">&quot;电视&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;saleNum&quot;</span>: 10012,</span><br><span class="line">                    <span class="string">&quot;commentNum&quot;</span>: 323,</span><br><span class="line">                    <span class="string">&quot;spec&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;网络制式&quot;</span>: <span class="string">&quot;移动4g&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;屏幕尺寸&quot;</span>: <span class="string">&quot;39&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改索引文档">修改索引文档</h3><p>可以继续通过<code>PUT/索引库名/类型/ID值</code>的方式来更改刚才插入的数据：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">PUT http://localhost:9200/sku/doc/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>:<span class="string">&quot;华为电视&quot;</span>,</span><br><span class="line">  <span class="string">&quot;price&quot;</span>:100000,</span><br><span class="line">  <span class="string">&quot;spuId&quot;</span>:10110,</span><br><span class="line">  <span class="string">&quot;createTime&quot;</span>:<span class="string">&quot;2020-05-09&quot;</span>,</span><br><span class="line">  <span class="string">&quot;brandName&quot;</span>:<span class="string">&quot;华为&quot;</span>,</span><br><span class="line">  <span class="string">&quot;categoryName&quot;</span>:<span class="string">&quot;电视&quot;</span>,</span><br><span class="line">  <span class="string">&quot;saleNum&quot;</span>:10012,</span><br><span class="line">  <span class="string">&quot;commentNum&quot;</span>:323,</span><br><span class="line">  <span class="string">&quot;spec&quot;</span>:&#123;</span><br><span class="line">    <span class="string">&quot;网络制式&quot;</span>:<span class="string">&quot;移动4g&quot;</span>,</span><br><span class="line">    <span class="string">&quot;屏幕尺寸&quot;</span>:<span class="string">&quot;39&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通过id删除索引文档">通过ID删除索引文档</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE http://localhost:9200/sku/doc/1</span><br></pre></td></tr></table></figure><h2 id="索引查询">索引查询</h2><p>基本语法如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET http://localhost:9200/索引库名/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;query&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;查询类型&quot;</span>:&#123;</span><br><span class="line">             <span class="string">&quot;查询条件&quot;</span>:<span class="string">&quot;查询条件值&quot;</span></span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的query代表一个查询对象，里面可以有不同的查询属性：</p><ul><li>查询类型：如match_all、match、term、range等</li><li>查询条件：查询条件会根据类型的不同，写法也有差异</li></ul><h3 id="查询所有数据match_all">查询所有数据(match_all)</h3><p>代码示例如下，其中query代表查询对象，match_all代表查询所有：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET http://localhost:9200/sku/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;match_all&quot;</span>: &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以简写成</span></span><br><span class="line">GET http://localhost:9200/sku/_search</span><br></pre></td></tr></table></figure><h3 id="匹配查询match">匹配查询(match)</h3><p>查询名称包含手机的记录代码示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET http://localhost:9200/sku/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;match&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;name&quot;</span>: <span class="string">&quot;手机&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认情况下，在查询时会先搜索关键字进行分词，对分词后的字符串进行查询，只要是包含这些字符串的都是要被查询出来的，多个词之间是or的关系。如查询“小米电视”，查询结果会有“小米手机”、“小米电视”、“三星电视”等包含了“小米”和“电视”的词汇。</p><p><strong>由于查询结果的匹配分值<code>_score</code>是不一样的，分值高的排在前面。</strong></p><p>若是想要精确查询，想要只查询包含“小米电视”的记录，语句该这样写：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET http://localhost:9200/sku/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;match&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;name&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;query&quot;</span>: <span class="string">&quot;小米电视&quot;</span>,</span><br><span class="line">        <span class="string">&quot;operator&quot;</span>: <span class="string">&quot;and&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="控制精度">控制精度</h3><p>若用户给定5个查询词项，想查找只包含其中4个的文档时，将operator操作符参数设置成and只会将此文档排除。此时match查询的最小匹配参数<code>minimum_should_match</code>便起到重要作用了，利用该参数便可以指定必须匹配的词项数用来表示一个文档是否相关。可以将这一参数设置为某个具体数字，最常用的是无法控制用户搜索时输入的单词数量时，将其设置为一个百分数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET http://localhost:9200/sku/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;match&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;title&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;query&quot;</span>: <span class="string">&quot;quick brown dog&quot;</span>,</span><br><span class="line">        <span class="string">&quot;minimum_should_match&quot;</span>: <span class="string">&quot;75%&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多字段查询multi_match">多字段查询(multi_match)</h3><p><code>multi_match</code>与<code>match</code>类似，不同的是它可以在多个字段中查询：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET http://localhost:9200/sku/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;multi_match&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;query&quot;</span>: <span class="string">&quot;小米&quot;</span>,</span><br><span class="line">      <span class="string">&quot;fields&quot;</span>: [<span class="string">&quot;name&quot;</span>,<span class="string">&quot;brandName&quot;</span>,<span class="string">&quot;categoryName&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="查询字段的模糊匹配">查询字段的模糊匹配</h4><p>字段名称可以用模糊匹配的方式给出：任何与模糊模式正则匹配的字段都会被包括在搜索条件中。如可以使用以下方式同时匹配book_title、chapter_title和section_title（书名、章名、节名）这三个字段：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;multi_match&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;query&quot;</span>:  <span class="string">&quot;Quick brown fox&quot;</span>,</span><br><span class="line">        <span class="string">&quot;fields&quot;</span>: <span class="string">&quot;*_title&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="提升单个字段的权重">提升单个字段的权重</h4><p>可以使用<code>^</code>字符语法为单个字段提升权重，在字段名称的末尾添加<code>^boost</code>，其中boost是一个浮点数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;multi_match&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;query&quot;</span>:  <span class="string">&quot;Quick brown fox&quot;</span>,</span><br><span class="line">        <span class="string">&quot;fields&quot;</span>: [ <span class="string">&quot;*_title&quot;</span>, <span class="string">&quot;chapter_title^2&quot;</span> ] </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时<code>chapter_title</code>字段的boost值为2，而其他两个字段的默认boost值为1。</p><h3 id="词条查询term">词条查询(term)</h3><p>term查询被用于精确匹配，这些精确值可能是数字、时间、布尔或者是那些未分词的字符串。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET http://localhost:9200/sku/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;term&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;price&quot;</span>: 200000</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多词条查询terms">多词条查询(terms)</h3><p>terms查询和term查询一样，区别是它允许指定多个值进行匹配。如果这个词段包含了指定中的任何一个值，那么这个文档便视为满足条件（类似于SQL中的in）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET http://localhost:9200/sku/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;terms&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;price&quot;</span>: [200000,100000]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="布尔组合bool">布尔组合(bool)</h3><p>bool把各种其他查询通过must(与)、must_not(非)、should(或)的方式进行组合。</p><p>如查询名称包含手机的，且品牌为小米的记录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">GET http://localhost:9200/sku/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;bool&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;must&quot;</span>: [</span><br><span class="line">        &#123;<span class="string">&quot;match&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;name&quot;</span>: <span class="string">&quot;手机&quot;</span></span><br><span class="line">        &#125;&#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;term&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;brandName&quot;</span>: &#123;</span><br><span class="line">              <span class="string">&quot;value&quot;</span>: <span class="string">&quot;小米&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如查询名称包含手机的，或品牌为小米的记录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">GET http://localhost:9200/sku/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;bool&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;should&quot;</span>: [</span><br><span class="line">        &#123;<span class="string">&quot;match&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;name&quot;</span>: <span class="string">&quot;手机&quot;</span></span><br><span class="line">        &#125;&#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;term&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;brandName&quot;</span>: &#123;</span><br><span class="line">              <span class="string">&quot;value&quot;</span>: <span class="string">&quot;小米&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="过滤查询">过滤查询</h3><p>过滤是针对搜索结果进行过滤，过滤器主要判断的是文档是否匹配，不去计算和判断文档的匹配度得分，因此过滤器性能比查询要高，且方便缓存。因此推荐尽量使用过滤器去实现查询或者过滤器和查询共同使用。</p><p>过滤品牌为小米的记录如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GET http://localhost:9200/sku/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;bool&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;filter&quot;</span>: [</span><br><span class="line">        &#123;<span class="string">&quot;match&quot;</span>:&#123;</span><br><span class="line">          <span class="string">&quot;brandName&quot;</span>:<span class="string">&quot;小米&quot;</span></span><br><span class="line">        &#125;&#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查询结果如下（注意<code>_score</code>为0）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;took&quot;</span>: 3,</span><br><span class="line">    <span class="string">&quot;timed_out&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">&quot;_shards&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;total&quot;</span>: 5,</span><br><span class="line">        <span class="string">&quot;successful&quot;</span>: 5,</span><br><span class="line">        <span class="string">&quot;failed&quot;</span>: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;hits&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;total&quot;</span>: 1,</span><br><span class="line">        <span class="string">&quot;max_score&quot;</span>: 0.0,</span><br><span class="line">        <span class="string">&quot;hits&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;_index&quot;</span>: <span class="string">&quot;sku&quot;</span>,</span><br><span class="line">                <span class="string">&quot;_type&quot;</span>: <span class="string">&quot;doc&quot;</span>,</span><br><span class="line">                <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;AYWp1L_wYrK1VsxqV5G5&quot;</span>,</span><br><span class="line">                <span class="string">&quot;_score&quot;</span>: 0.0,</span><br><span class="line">                <span class="string">&quot;_source&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;小米手机&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;price&quot;</span>: 200000,</span><br><span class="line">                    <span class="string">&quot;spuId&quot;</span>: 101,</span><br><span class="line">                    <span class="string">&quot;createTime&quot;</span>: <span class="string">&quot;2020-05-09&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;brandName&quot;</span>: <span class="string">&quot;小米&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;categoryName&quot;</span>: <span class="string">&quot;手机&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;saleNum&quot;</span>: 10012,</span><br><span class="line">                    <span class="string">&quot;commentNum&quot;</span>: 323,</span><br><span class="line">                    <span class="string">&quot;spec&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;网络制式&quot;</span>: <span class="string">&quot;移动4g&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;屏幕尺寸&quot;</span>: <span class="string">&quot;4.5&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分组查询">分组查询</h3><p>按分组名称聚合查询，统计每个分组的数量，类似于SQL中的group by，示例如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET http://localhost:9200/sku/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;size&quot;</span>: 0,</span><br><span class="line">  <span class="string">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;sku_category&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;terms&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;field&quot;</span>: <span class="string">&quot;categoryName&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将size设为0时，不会将数据查询出来，目的是让查询更快。</p><p>除此之外还可以查询多个分组：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">GET http://localhost:9200/sku/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;size&quot;</span>: 0,</span><br><span class="line">  <span class="string">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;sku_category&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;terms&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;field&quot;</span>: <span class="string">&quot;categoryName&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;sku_brand&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;terms&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;field&quot;</span>: <span class="string">&quot;brandName&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="范围">范围</h3><p>Elasticsearch的范围查询可以用来查询处于某个范围内的文档，range查询可同时提供包含(inclusive)和不包含(exclusive)这两种范围表达式，范围的选项如下：</p><ul><li>gt：大于</li><li>lt：小于</li><li>gte：大于或等于</li><li>lte：小于或等于</li></ul><p>示例如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">GET http://localhost:9200/sku/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;query&quot;</span> : &#123;</span><br><span class="line">        <span class="string">&quot;constant_score&quot;</span> : &#123;</span><br><span class="line">            <span class="string">&quot;filter&quot;</span> : &#123;</span><br><span class="line">                <span class="string">&quot;range&quot;</span> : &#123;</span><br><span class="line">                    <span class="string">&quot;price&quot;</span> : &#123;</span><br><span class="line">                        <span class="string">&quot;gte&quot;</span> : 20,</span><br><span class="line">                        <span class="string">&quot;lt&quot;</span>  : 40</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若想要范围是无界，如<code>[20,+∞)</code>，只须省略其中一边(gte)的限制即可。</p><h4 id="日期范围">日期范围</h4><p>range查询同样可以应用在日期字段上。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">GET http://localhost:9200/sku/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;query&quot;</span> : &#123;</span><br><span class="line">        <span class="string">&quot;constant_score&quot;</span> : &#123;</span><br><span class="line">            <span class="string">&quot;filter&quot;</span> : &#123;</span><br><span class="line">                <span class="string">&quot;range&quot;</span> : &#123;</span><br><span class="line">                    <span class="string">&quot;timestamp&quot;</span> : &#123;</span><br><span class="line">                        <span class="string">&quot;gt&quot;</span> : <span class="string">&quot;2014-01-01 00:00:00&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;lt&quot;</span> : <span class="string">&quot;2014-01-07 00:00:00&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当使用它处理日期字段时，range查询支持对日期计算进行操作，如查找时间戳在过去一小时内的所有文档：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;range&quot;</span> : &#123;</span><br><span class="line">    <span class="string">&quot;timestamp&quot;</span> : &#123;</span><br><span class="line">        <span class="string">&quot;gt&quot;</span> : <span class="string">&quot;now-1h&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>日期计算还可以被应用到某个具体的时间，并非只能是一个像now这样的占位符。只要在某个日期后加上一个双管符号(<code>||</code>)并紧跟一个日期数学表达式就能做到，如设置早于2014年1月1日的日期都额外加1个月：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;range&quot;</span> : &#123;</span><br><span class="line">    <span class="string">&quot;timestamp&quot;</span> : &#123;</span><br><span class="line">        <span class="string">&quot;gt&quot;</span> : <span class="string">&quot;2014-01-01 00:00:00&quot;</span>,</span><br><span class="line">        <span class="string">&quot;lt&quot;</span> : <span class="string">&quot;2014-01-01 00:00:00||+1M&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="存在查询exists">存在查询(exists)</h3><h4 id="处理非null值">处理非Null值</h4><p>设置各条测试数据的tags值：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">POST http://localhost:9200/my_index/posts/_bulk</span><br><span class="line">&#123; <span class="string">&quot;index&quot;</span>: &#123; <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;1&quot;</span>              &#125;&#125;</span><br><span class="line">&#123; <span class="string">&quot;tags&quot;</span> : [<span class="string">&quot;search&quot;</span>]                &#125;  </span><br><span class="line">&#123; <span class="string">&quot;index&quot;</span>: &#123; <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;2&quot;</span>              &#125;&#125;</span><br><span class="line">&#123; <span class="string">&quot;tags&quot;</span> : [<span class="string">&quot;search&quot;</span>, <span class="string">&quot;open_source&quot;</span>] &#125;  </span><br><span class="line">&#123; <span class="string">&quot;index&quot;</span>: &#123; <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;3&quot;</span>              &#125;&#125;</span><br><span class="line">&#123; <span class="string">&quot;other_field&quot;</span> : <span class="string">&quot;some data&quot;</span>        &#125;  </span><br><span class="line">&#123; <span class="string">&quot;index&quot;</span>: &#123; <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;4&quot;</span>              &#125;&#125;</span><br><span class="line">&#123; <span class="string">&quot;tags&quot;</span> : null                      &#125;  </span><br><span class="line">&#123; <span class="string">&quot;index&quot;</span>: &#123; <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;5&quot;</span>              &#125;&#125;</span><br><span class="line">&#123; <span class="string">&quot;tags&quot;</span> : [<span class="string">&quot;search&quot;</span>, null]          &#125;</span><br></pre></td></tr></table></figure><p>tags值顺序为：</p><p>1、tags 字段有 1 个值。 2、tags 字段有 2 个值。 3、tags 字段缺失。 4、tags 字段被置为 null 。 5、tags 字段有 1 个值和 1 个 null 。</p><p>现在要找到那些被设置过标签字段的文档，并不关心标签的具体内容，只要标签存在即可，使用exists查询如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET http://localhost:9200/my_index/posts/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;query&quot;</span> : &#123;</span><br><span class="line">        <span class="string">&quot;constant_score&quot;</span> : &#123;</span><br><span class="line">            <span class="string">&quot;filter&quot;</span> : &#123;</span><br><span class="line">                <span class="string">&quot;exists&quot;</span> : &#123; <span class="string">&quot;field&quot;</span> : <span class="string">&quot;tags&quot;</span> &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查询返回了3个文档：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;took&quot;</span>: 1,</span><br><span class="line">    <span class="string">&quot;timed_out&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">&quot;_shards&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;total&quot;</span>: 5,</span><br><span class="line">        <span class="string">&quot;successful&quot;</span>: 5,</span><br><span class="line">        <span class="string">&quot;failed&quot;</span>: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;hits&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;total&quot;</span>: 3,</span><br><span class="line">        <span class="string">&quot;max_score&quot;</span>: 1.0,</span><br><span class="line">        <span class="string">&quot;hits&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;_index&quot;</span>: <span class="string">&quot;my_index&quot;</span>,</span><br><span class="line">                <span class="string">&quot;_type&quot;</span>: <span class="string">&quot;posts&quot;</span>,</span><br><span class="line">                <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;5&quot;</span>,</span><br><span class="line">                <span class="string">&quot;_score&quot;</span>: 1.0,</span><br><span class="line">                <span class="string">&quot;_source&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;tags&quot;</span>: [</span><br><span class="line">                        <span class="string">&quot;search&quot;</span>,</span><br><span class="line">                        null</span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;_index&quot;</span>: <span class="string">&quot;my_index&quot;</span>,</span><br><span class="line">                <span class="string">&quot;_type&quot;</span>: <span class="string">&quot;posts&quot;</span>,</span><br><span class="line">                <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;2&quot;</span>,</span><br><span class="line">                <span class="string">&quot;_score&quot;</span>: 1.0,</span><br><span class="line">                <span class="string">&quot;_source&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;tags&quot;</span>: [</span><br><span class="line">                        <span class="string">&quot;search&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;open_source&quot;</span></span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;_index&quot;</span>: <span class="string">&quot;my_index&quot;</span>,</span><br><span class="line">                <span class="string">&quot;_type&quot;</span>: <span class="string">&quot;posts&quot;</span>,</span><br><span class="line">                <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">                <span class="string">&quot;_score&quot;</span>: 1.0,</span><br><span class="line">                <span class="string">&quot;_source&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;tags&quot;</span>: [</span><br><span class="line">                        <span class="string">&quot;search&quot;</span></span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>尽管文档5的tags存在null值，但它仍会被命中返回。该文档之所以存在，是因为标签有实际值（ search ）可以被索引，所以 null 对过滤不会产生任何影响。</p><p>因此，只要tags字段存在项(term)的文档都会命中并作为结果返回。</p><h4 id="处理null值">处理Null值</h4><p>exists查询字段为空的或没有这个字段时的代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GET http://localhost:9200/my_index/posts/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;bool&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;must_not&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;exists&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;field&quot;</span>: <span class="string">&quot;tags&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时的查询结果便只有3和4两个文档：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;took&quot;</span>: 1,</span><br><span class="line">    <span class="string">&quot;timed_out&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">&quot;_shards&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;total&quot;</span>: 5,</span><br><span class="line">        <span class="string">&quot;successful&quot;</span>: 5,</span><br><span class="line">        <span class="string">&quot;failed&quot;</span>: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;hits&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;total&quot;</span>: 2,</span><br><span class="line">        <span class="string">&quot;max_score&quot;</span>: 1.0,</span><br><span class="line">        <span class="string">&quot;hits&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;_index&quot;</span>: <span class="string">&quot;my_index&quot;</span>,</span><br><span class="line">                <span class="string">&quot;_type&quot;</span>: <span class="string">&quot;posts&quot;</span>,</span><br><span class="line">                <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;4&quot;</span>,</span><br><span class="line">                <span class="string">&quot;_score&quot;</span>: 1.0,</span><br><span class="line">                <span class="string">&quot;_source&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;tags&quot;</span>: null</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;_index&quot;</span>: <span class="string">&quot;my_index&quot;</span>,</span><br><span class="line">                <span class="string">&quot;_type&quot;</span>: <span class="string">&quot;posts&quot;</span>,</span><br><span class="line">                <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;3&quot;</span>,</span><br><span class="line">                <span class="string">&quot;_score&quot;</span>: 1.0,</span><br><span class="line">                <span class="string">&quot;_source&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;other_field&quot;</span>: <span class="string">&quot;some data&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最佳字段dis_max">最佳字段(<code>dis_max</code>)</h3><p>假设有个网站允许用户搜索博客的内容，以下面两篇博客内容文档为例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">PUT http://localhost:9200/my_index/my_type/1</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;title&quot;</span>: <span class="string">&quot;Quick brown rabbits&quot;</span>,</span><br><span class="line">    <span class="string">&quot;body&quot;</span>:  <span class="string">&quot;Brown rabbits are commonly seen.&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT http://localhost:9200/my_index/my_type/2</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;title&quot;</span>: <span class="string">&quot;Keeping pets healthy&quot;</span>,</span><br><span class="line">    <span class="string">&quot;body&quot;</span>:  <span class="string">&quot;My quick brown fox eats rabbits on a regular basis.&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用户输入词组 “Brown fox” 然后点击搜索按钮。事先，并不知道用户的搜索项是会在 title 还是在 body 字段中被找到，但是，用户很有可能是想搜索相关的词组。用肉眼判断，文档 2 的匹配度更高，因为它同时包括要查找的两个词。运行以下 bool 查询查看实际结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET http<span class="punctuation">:</span><span class="comment">//localhost:9200/my_index/my_type/_search</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;bool&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;should&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span> <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Brown fox&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="punctuation">&#123;</span> <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span>  <span class="string">&quot;Brown fox&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>查询结果发现是文档 1 的评分更高：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;took&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;timed_out&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;_shards&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;successful&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;failed&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hits&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;max_score&quot;</span><span class="punctuation">:</span> <span class="number">0.56977004</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;hits&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;my_index&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;my_type&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_score&quot;</span><span class="punctuation">:</span> <span class="number">0.56977004</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Keeping pets healthy&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="string">&quot;My quick brown fox eats rabbits on a regular basis.&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;my_index&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;my_type&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_score&quot;</span><span class="punctuation">:</span> <span class="number">0.53565365</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Quick brown rabbits&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Brown rabbits are commonly seen.&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>bool的评分如下：</p><p>1、它会执行 should 语句中的两个查询。 2、加和两个查询的评分。 3、乘以匹配语句的总数。 4、除以所有语句总数（这里为：2）。</p><p>由于文档 1 的两个字段都包含 brown 这个词，所以两个 match 语句都能成功匹配并且有一个评分。文档 2 的 body 字段同时包含 brown 和 fox 这两个词，但 title 字段没有包含任何词。这样， body 查询结果中的高分，加上 title 查询中的 0 分，然后乘以二分之一，就得到比文档 1 更低的整体评分。</p><p>在这个例子中title 和 body 字段是相互竞争的关系，因此需要找到单个最佳匹配的字段。</p><p>若不是简单将每个字段的评分结果加在一起，而是将最佳匹配字段的评分作为查询的整体评分，则结果中同时包含 brown 和 fox 的单个字段比反复出现相同词语的多个不同字段有更高的相关度。</p><h4 id="dis_max-查询">dis_max 查询</h4><p>不使用 bool 查询时，可以使用<code>dis_max</code>即分离最大化查询，其指的是： 将任何与任一查询匹配的文档作为结果返回，但只将最佳匹配的评分作为查询的评分结果返回 ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET http://localhost:9200/my_index/my_type/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;dis_max&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;queries&quot;</span>: [</span><br><span class="line">                &#123; <span class="string">&quot;match&quot;</span>: &#123; <span class="string">&quot;title&quot;</span>: <span class="string">&quot;Brown fox&quot;</span> &#125;&#125;,</span><br><span class="line">                &#123; <span class="string">&quot;match&quot;</span>: &#123; <span class="string">&quot;body&quot;</span>:  <span class="string">&quot;Brown fox&quot;</span> &#125;&#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到的结果为：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;took&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;timed_out&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;_shards&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;successful&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;failed&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hits&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;max_score&quot;</span><span class="punctuation">:</span> <span class="number">0.56977004</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;hits&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;my_index&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;my_type&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_score&quot;</span><span class="punctuation">:</span> <span class="number">0.56977004</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Keeping pets healthy&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="string">&quot;My quick brown fox eats rabbits on a regular basis.&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;my_index&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;my_type&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_score&quot;</span><span class="punctuation">:</span> <span class="number">0.2824934</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Quick brown rabbits&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Brown rabbits are commonly seen.&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="最佳字段调优"><strong>最佳字段调优</strong></h3><p>当用户搜索 “quick pets” 时会发生什么呢？在前面的例子中，两个文档都包含词 quick ，但是只有文档 2 包含词 pets ，两个文档中都不具有同时包含 两个词 的 相同字段 。而一个简单的 dis_max 查询会采用单个最佳匹配字段，而忽略其他的匹配：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET http://localhost:9200/my_index/my_type/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;dis_max&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;queries&quot;</span>: [</span><br><span class="line">                &#123; <span class="string">&quot;match&quot;</span>: &#123; <span class="string">&quot;title&quot;</span>: <span class="string">&quot;Quick pets&quot;</span> &#125;&#125;,</span><br><span class="line">                &#123; <span class="string">&quot;match&quot;</span>: &#123; <span class="string">&quot;body&quot;</span>:  <span class="string">&quot;Quick pets&quot;</span> &#125;&#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;took&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;timed_out&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;_shards&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;successful&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;failed&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hits&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;max_score&quot;</span><span class="punctuation">:</span> <span class="number">0.28488502</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;hits&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;my_index&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;my_type&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_score&quot;</span><span class="punctuation">:</span> <span class="number">0.28488502</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Keeping pets healthy&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="string">&quot;My quick brown fox eats rabbits on a regular basis.&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;my_index&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;my_type&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_score&quot;</span><span class="punctuation">:</span> <span class="number">0.25316024</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Quick brown rabbits&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Brown rabbits are commonly seen.&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>从结果中可以发现，两个评分是完全相同的。理想中同时匹配 title 和 body 字段的文档比只与一个字段匹配的文档的相关度理应更高，但事实并非如此，这是因为dis_max 查询只会简单地使用单个最佳匹配语句的评分<code>_score</code>作为整体评分。</p><h4 id="tie_breaker参数">tie_breaker参数</h4><p>可以通过指定 <code>tie_breaker</code> 这个参数将其他匹配语句的评分也考虑其中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GET http://localhost:9200/my_index/my_type/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;dis_max&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;queries&quot;</span>: [</span><br><span class="line">                &#123; <span class="string">&quot;match&quot;</span>: &#123; <span class="string">&quot;title&quot;</span>: <span class="string">&quot;Quick pets&quot;</span> &#125;&#125;,</span><br><span class="line">                &#123; <span class="string">&quot;match&quot;</span>: &#123; <span class="string">&quot;body&quot;</span>:  <span class="string">&quot;Quick pets&quot;</span> &#125;&#125;</span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;tie_breaker&quot;</span>: 0.3</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：文档 2 的相关度比文档 1 略高。</p><p>tie_breaker 参数提供了一种 dis_max 和 bool 之间的折中选择，它的评分方式如下：</p><ul><li>获得最佳匹配语句的评分 _score 。</li><li>将其他匹配语句的评分结果与 tie_breaker 相乘。</li><li>对以上评分求和并规范化。</li></ul><p>tie_breaker可以是 0 到 1 之间的浮点数，其中0代表使用dis_max最佳匹配语句的普通逻辑，1表示所有匹配语句同等重要。最佳的精确值需要根据数据与查询调试得出，但是合理值应该与零接近（处于0.1-0.4之间），这样就不会颠覆dis_max最佳匹配性质的根本。</p><h1 id="ik分词器">IK分词器</h1><p>分词是全文搜索引擎必用的技术，由于Elasticsearch原生的分词器不支持中文，因此需要安装一个中文分词器，这里用的分词器是IK分词器。</p><h2 id="安装">安装</h2><p>访问<a href="https://github.com/medcl/elasticsearch-analysis-ik/releases">IK分词器</a>下载与Elasticsearch对应版本的中文分词器，这里下载的版本为5.5.3，具体地址为<a href="https://github.com/medcl/elasticsearch-analysis-ik/releases/tag/v5.5.3">Release v5.5.3 · medcl/elasticsearch-analysis-ik (github.com)</a>。将解压后的文件夹放入Elasticsearch根目录里的<code>E:\elasticsearch-5.5.3\plugins\ik</code>下，重启Elasticsearch后便可使用</p><h2 id="配置">配置</h2><p>IK分词器提供了两个分词算法<code>ik_smart</code>和<code>ik_max_word</code>。其中<code>ik_smart</code>为智能最少切分，<code>ik_max_word</code>为最细粒度划分，</p><ul><li><code>ik_max_word</code>：会将文本做最细粒度划分，如「我是程序员」会被拆分为「我、是、程序员、程序、员」</li><li><code>ik_smart</code>：会将文本做最少切分，如「我是程序员」会被拆分为「我、是、程序员」</li></ul><h2 id="中文分词">中文分词</h2><ul><li><p>不使用ik分词器时的效果：</p><ul><li>通过postman发送GET请求查询分词：</li></ul><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET http://localhost:9200/_analyze</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;text&quot;</span>:<span class="string">&quot;我是程序员&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>postman操作如图所示：<img src="/2023/01/13/python%E7%8E%AF%E5%A2%83%E4%B8%ADElasticsearch%E7%9A%84%E4%BD%BF%E7%94%A8/4.png"></p><p>得到的结果如下，可以发现Elasticsearch的默认分词器无法识别中文：我、程序、程序员这样的词汇，而是简单地将每个字拆完分为一个词：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;tokens&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;token&quot;</span>: <span class="string">&quot;我&quot;</span>,</span><br><span class="line">            <span class="string">&quot;start_offset&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;end_offset&quot;</span>: 1,</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;&lt;IDEOGRAPHIC&gt;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;position&quot;</span>: 0</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;token&quot;</span>: <span class="string">&quot;是&quot;</span>,</span><br><span class="line">            <span class="string">&quot;start_offset&quot;</span>: 1,</span><br><span class="line">            <span class="string">&quot;end_offset&quot;</span>: 2,</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;&lt;IDEOGRAPHIC&gt;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;position&quot;</span>: 1</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;token&quot;</span>: <span class="string">&quot;程&quot;</span>,</span><br><span class="line">            <span class="string">&quot;start_offset&quot;</span>: 2,</span><br><span class="line">            <span class="string">&quot;end_offset&quot;</span>: 3,</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;&lt;IDEOGRAPHIC&gt;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;position&quot;</span>: 2</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;token&quot;</span>: <span class="string">&quot;序&quot;</span>,</span><br><span class="line">            <span class="string">&quot;start_offset&quot;</span>: 3,</span><br><span class="line">            <span class="string">&quot;end_offset&quot;</span>: 4,</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;&lt;IDEOGRAPHIC&gt;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;position&quot;</span>: 3</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;token&quot;</span>: <span class="string">&quot;员&quot;</span>,</span><br><span class="line">            <span class="string">&quot;start_offset&quot;</span>: 4,</span><br><span class="line">            <span class="string">&quot;end_offset&quot;</span>: 5,</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;&lt;IDEOGRAPHIC&gt;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;position&quot;</span>: 4</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>使用ik分词器后的效果：</p><ul><li><p>通过postman发送GET请求查询分词将文本做最少切分：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET http://localhost:9200/_analyze</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;analyzer&quot;</span>:<span class="string">&quot;ik_smart&quot;</span>,</span><br><span class="line">    <span class="string">&quot;text&quot;</span>:<span class="string">&quot;我是程序员&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>得到的结果如下：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;tokens&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;token&quot;</span>: <span class="string">&quot;我&quot;</span>,</span><br><span class="line">            <span class="string">&quot;start_offset&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;end_offset&quot;</span>: 1,</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;CN_CHAR&quot;</span>,</span><br><span class="line">            <span class="string">&quot;position&quot;</span>: 0</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;token&quot;</span>: <span class="string">&quot;是&quot;</span>,</span><br><span class="line">            <span class="string">&quot;start_offset&quot;</span>: 1,</span><br><span class="line">            <span class="string">&quot;end_offset&quot;</span>: 2,</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;CN_CHAR&quot;</span>,</span><br><span class="line">            <span class="string">&quot;position&quot;</span>: 1</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;token&quot;</span>: <span class="string">&quot;程序员&quot;</span>,</span><br><span class="line">            <span class="string">&quot;start_offset&quot;</span>: 2,</span><br><span class="line">            <span class="string">&quot;end_offset&quot;</span>: 5,</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">            <span class="string">&quot;position&quot;</span>: 2</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>通过postman发送GET请求查询分词将文本做最细粒度划分：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET http://localhost:9200/_analyze</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;analyzer&quot;</span>:<span class="string">&quot;ik_max_word&quot;</span>,</span><br><span class="line">    <span class="string">&quot;text&quot;</span>:<span class="string">&quot;我是程序员&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>得到的结果如下：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;tokens&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;token&quot;</span>: <span class="string">&quot;我&quot;</span>,</span><br><span class="line">            <span class="string">&quot;start_offset&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;end_offset&quot;</span>: 1,</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;CN_CHAR&quot;</span>,</span><br><span class="line">            <span class="string">&quot;position&quot;</span>: 0</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;token&quot;</span>: <span class="string">&quot;是&quot;</span>,</span><br><span class="line">            <span class="string">&quot;start_offset&quot;</span>: 1,</span><br><span class="line">            <span class="string">&quot;end_offset&quot;</span>: 2,</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;CN_CHAR&quot;</span>,</span><br><span class="line">            <span class="string">&quot;position&quot;</span>: 1</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;token&quot;</span>: <span class="string">&quot;程序员&quot;</span>,</span><br><span class="line">            <span class="string">&quot;start_offset&quot;</span>: 2,</span><br><span class="line">            <span class="string">&quot;end_offset&quot;</span>: 5,</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">            <span class="string">&quot;position&quot;</span>: 2</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;token&quot;</span>: <span class="string">&quot;程序&quot;</span>,</span><br><span class="line">            <span class="string">&quot;start_offset&quot;</span>: 2,</span><br><span class="line">            <span class="string">&quot;end_offset&quot;</span>: 4,</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">            <span class="string">&quot;position&quot;</span>: 3</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;token&quot;</span>: <span class="string">&quot;员&quot;</span>,</span><br><span class="line">            <span class="string">&quot;start_offset&quot;</span>: 4,</span><br><span class="line">            <span class="string">&quot;end_offset&quot;</span>: 5,</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;CN_CHAR&quot;</span>,</span><br><span class="line">            <span class="string">&quot;position&quot;</span>: 4</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li></ul></li></ul><h2 id="自定义词库">自定义词库</h2><p>随着各种新词的不断出现，分词器并不认识一些网络热词。若要补充新词到ik的词库中，则需要进入目录<code>E:\elasticsearch-5.5.3\plugins\ik\config</code>中创建<code>custom.dic</code>文件，写入新词。同时打开<code>IKAnalyzer.cfg.xml</code>文件，将添加<code>custom.dic</code>配置后，重启Elasticsearch。</p><p>配置文件参考如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">properties</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://java.sun.com/dtd/properties.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">comment</span>&gt;</span>IK Analyzer 扩展配置<span class="tag">&lt;/<span class="name">comment</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--用户可以在这里配置自己的扩展字典 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;ext_dict&quot;</span>&gt;</span>custom.dic<span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--用户可以在这里配置自己的扩展停止词字典--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;ext_stopwords&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--用户可以在这里配置远程扩展字典 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;entry key=&quot;remote_ext_dict&quot;&gt;words_location&lt;/entry&gt; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--用户可以在这里配置远程扩展停止词字典--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;entry key=&quot;remote_ext_stopwords&quot;&gt;words_location&lt;/entry&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在进行以上配置后，分词器在看到文件中的新词时，便会知道这是一个词汇。</p><ul><li><p>未设置自定义词库时的效果如下：</p><ul><li><p>通过postman发送GET请求查询分词：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET http://localhost:9200/_analyze</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;analyzer&quot;</span>:<span class="string">&quot;ik_smart&quot;</span>,</span><br><span class="line">    <span class="string">&quot;text&quot;</span>:<span class="string">&quot;阿里嘎多美羊羊桑&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>得到的结果如下：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;tokens&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;token&quot;</span>: <span class="string">&quot;阿里&quot;</span>,</span><br><span class="line">            <span class="string">&quot;start_offset&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;end_offset&quot;</span>: 2,</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">            <span class="string">&quot;position&quot;</span>: 0</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;token&quot;</span>: <span class="string">&quot;嘎&quot;</span>,</span><br><span class="line">            <span class="string">&quot;start_offset&quot;</span>: 2,</span><br><span class="line">            <span class="string">&quot;end_offset&quot;</span>: 3,</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;CN_CHAR&quot;</span>,</span><br><span class="line">            <span class="string">&quot;position&quot;</span>: 1</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;token&quot;</span>: <span class="string">&quot;多美&quot;</span>,</span><br><span class="line">            <span class="string">&quot;start_offset&quot;</span>: 3,</span><br><span class="line">            <span class="string">&quot;end_offset&quot;</span>: 5,</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">            <span class="string">&quot;position&quot;</span>: 2</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;token&quot;</span>: <span class="string">&quot;羊&quot;</span>,</span><br><span class="line">            <span class="string">&quot;start_offset&quot;</span>: 5,</span><br><span class="line">            <span class="string">&quot;end_offset&quot;</span>: 6,</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;CN_CHAR&quot;</span>,</span><br><span class="line">            <span class="string">&quot;position&quot;</span>: 3</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;token&quot;</span>: <span class="string">&quot;羊&quot;</span>,</span><br><span class="line">            <span class="string">&quot;start_offset&quot;</span>: 6,</span><br><span class="line">            <span class="string">&quot;end_offset&quot;</span>: 7,</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;CN_CHAR&quot;</span>,</span><br><span class="line">            <span class="string">&quot;position&quot;</span>: 4</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;token&quot;</span>: <span class="string">&quot;桑&quot;</span>,</span><br><span class="line">            <span class="string">&quot;start_offset&quot;</span>: 7,</span><br><span class="line">            <span class="string">&quot;end_offset&quot;</span>: 8,</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;CN_CHAR&quot;</span>,</span><br><span class="line">            <span class="string">&quot;position&quot;</span>: 5</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li></ul></li><li><p>设置自定义词库后的效果如下：</p><ul><li><p>通过postman发送GET请求查询分词：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET http://localhost:9200/_analyze</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;analyzer&quot;</span>:<span class="string">&quot;ik_smart&quot;</span>,</span><br><span class="line">    <span class="string">&quot;text&quot;</span>:<span class="string">&quot;阿里嘎多美羊羊桑&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>得到的结果如下：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;tokens&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;token&quot;</span>: <span class="string">&quot;阿里嘎多&quot;</span>,</span><br><span class="line">            <span class="string">&quot;start_offset&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;end_offset&quot;</span>: 4,</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">            <span class="string">&quot;position&quot;</span>: 0</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;token&quot;</span>: <span class="string">&quot;美羊羊&quot;</span>,</span><br><span class="line">            <span class="string">&quot;start_offset&quot;</span>: 4,</span><br><span class="line">            <span class="string">&quot;end_offset&quot;</span>: 7,</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">            <span class="string">&quot;position&quot;</span>: 1</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;token&quot;</span>: <span class="string">&quot;桑&quot;</span>,</span><br><span class="line">            <span class="string">&quot;start_offset&quot;</span>: 7,</span><br><span class="line">            <span class="string">&quot;end_offset&quot;</span>: 8,</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;CN_CHAR&quot;</span>,</span><br><span class="line">            <span class="string">&quot;position&quot;</span>: 2</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li></ul></li></ul>]]></content>
    
    
    <summary type="html">python环境中使用Elasticsearch</summary>
    
    
    
    <category term="Elasticsearch" scheme="http://tangmenjue.top/categories/Elasticsearch/"/>
    
    <category term="python" scheme="http://tangmenjue.top/categories/python/"/>
    
    
    <category term="Elasticsearch" scheme="http://tangmenjue.top/tags/Elasticsearch/"/>
    
    <category term="python" scheme="http://tangmenjue.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>YAML与Redis的基本运用</title>
    <link href="http://tangmenjue.top/2022/12/16/YAML%E4%B8%8ERedis%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%94%A8/"/>
    <id>http://tangmenjue.top/2022/12/16/YAML%E4%B8%8ERedis%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%94%A8/</id>
    <published>2022-12-16T07:08:50.000Z</published>
    <updated>2022-12-16T07:08:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="yaml">YAML</h1><p>YAML是一种<strong>数据序列化语言</strong>而不是标记语言，其语法比较简洁直观，特点是使用空格来表达层次结构，其最大的优势是在数据结构的表达上，且能配合大多数编程语言使用，因此YAML更多应用于配置文件的编写，其文件一般以<code>.yml</code>为后缀。</p><p>由于其语法的特殊性，没有编辑器可能容易写错，因而在此推荐一个无广告的yaml在线格式化网站：<a href="http://nodeca.github.io/js-yaml/">JS-YAML</a>，其可以直接将yaml转化为json。</p><h2 id="基础语法">基础语法</h2><ul><li><p>YAML对大小写敏感</p></li><li><p>YAML用<code>#</code>表示注释，且<strong>只支持单行注释</strong></p></li><li><p>用缩进表示层级关系</p><ul><li><strong>缩进只能使用空格</strong>，不能用TAB字符</li><li>缩进的空格数量不做要求，但要求<strong>同一层级的元素左侧必须对齐</strong></li></ul></li><li><p>一个文件中可以包含多个文件的内容</p><ul><li><p>用三个破折号<code>"---"</code>表示一份内容的开始</p></li><li><p>用三个小数点<code>"..."</code>表示一份内容的结束（非强制）</p><p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># 这是第一份内容</span></span><br><span class="line"><span class="string">one:1</span></span><br><span class="line"><span class="comment"># 其他内容</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># 这是第二份内容</span></span><br><span class="line"><span class="string">two:2</span></span><br><span class="line"><span class="comment"># 其他内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一份内容转换结果如下：</span></span><br><span class="line"><span class="comment"># &#x27;one:1&#x27;</span></span><br><span class="line"><span class="comment"># 第二份内容转换结果如下：</span></span><br><span class="line"><span class="comment"># &#x27;two:2&#x27;</span></span><br></pre></td></tr></table></figure></p></li></ul></li></ul><h2 id="数据结构与类型">数据结构与类型</h2><h3 id="对象">对象</h3><p>用来表示以键值对（key:value）形式出现的数据。</p><ul><li><p>使用“冒号+空格”来分开键与值，对应JSON中的<code>"key"："value"</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#yaml</span></span><br><span class="line"><span class="string">key:value</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 内容转换结果如下： </span></span><br><span class="line"><span class="comment"># &#x27;key:value&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>支持多层嵌套（<strong>用缩进表示层级关系</strong>）</p><p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">key:</span></span><br><span class="line">  <span class="string">child-key1:value1</span></span><br><span class="line">  <span class="string">child-key2:value2</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 内容转换结果如下：  </span></span><br><span class="line"><span class="comment"># &#123; key: &#x27;child-key1:value1 child-key2:value2&#x27; &#125;  </span></span><br></pre></td></tr></table></figure></p></li><li><p>支持用<strong>花括号包裹，逗号加空格分隔</strong>的流式风格语法：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">key:&#123;</span> <span class="string">child-key1:value1,</span> <span class="string">child-key2:value2</span> <span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 内容转换结果如下： </span></span><br><span class="line"><span class="comment"># &#x27;key:&#123; child-key1:value1, child-key2:value2 &#125;&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>用<strong>问号声明一个复杂对象</strong>，且允许使用多个词汇（数组）来组成键：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">?</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">keypart1</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">keypart2</span></span><br><span class="line"><span class="string">:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">value1</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">value2</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 内容转换结果如下：</span></span><br><span class="line"><span class="comment"># &#123; &#x27;keypart1,keypart2&#x27;: [ &#x27;value1&#x27;, &#x27;value2&#x27; ] &#125;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="数组">数组</h3><ul><li><p>一组以<strong>破折号+空格</strong>的区块形式为开头的数据便组成了一个数组：</p><p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">values:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">value1</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">value2</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">value3</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 内容转换结果如下：</span></span><br><span class="line"><span class="comment"># &#123; values: [ &#x27;value1&#x27;, &#x27;value2&#x27;, &#x27;value3&#x27; ] &#125;</span></span><br></pre></td></tr></table></figure></p></li><li><p>与此同时也支持<strong>用方括号包裹、逗号加空格分隔</strong>的内联格式来表达</p><p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">values:[value1,</span> <span class="string">value2,</span> <span class="string">value3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 内容转换结果如下：</span></span><br><span class="line"><span class="comment"># &#x27;values:[value1, value2, value3]&#x27;</span></span><br></pre></td></tr></table></figure></p></li><li><p>支持多为数组（用缩进表示层级关系）</p><p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">values:</span></span><br><span class="line">  <span class="bullet">-</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">value1</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">value2</span></span><br><span class="line">  <span class="bullet">-</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">value3</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">value4</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 内容转换结果如下：</span></span><br><span class="line"><span class="comment"># &#123; values: [ [ &#x27;value1&#x27;, &#x27;value2&#x27; ], [ &#x27;value3&#x27;, &#x27;value4&#x27; ] ] &#125;</span></span><br></pre></td></tr></table></figure></p></li></ul><h3 id="标量">标量</h3><p>表示YAML中最基本的数据类型</p><h3 id="字符串">字符串</h3><ul><li><p>字符串一般不需要引号包裹，但是如果字符串中使用了反斜杠<code>"\"</code>开头的转义字符就必须使用引号包裹</p><p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">strings:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Hello</span> <span class="string">without</span> <span class="string">quote</span> <span class="comment"># 不用引号包裹</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Hello</span></span><br><span class="line">   <span class="string">world</span> <span class="comment">#拆成多行后会自动在中间添加空格</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;Hello with single quotes&#x27;</span> <span class="comment"># 单引号包裹</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;Hello with double quotes&quot;</span> <span class="comment"># 双引号包裹</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;I am fine. \u263A&quot;</span> <span class="comment"># 使用双引号包裹时支持Unicode编码</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;\x0d\x0a is \r\n&quot;</span> <span class="comment"># 使用双引号包裹时还支持Hex编码</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;He said: &quot;Hello!&quot;&#x27;</span> <span class="comment"># 单双引号支持嵌套</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 内容转换结果如下：  </span></span><br><span class="line"><span class="comment"># &#123; strings: </span></span><br><span class="line"><span class="comment">#    [ &#x27;Hello without quote&#x27;,</span></span><br><span class="line"><span class="comment">#      &#x27;Hello world&#x27;,</span></span><br><span class="line"><span class="comment">#      &#x27;Hello with single quotes&#x27;,</span></span><br><span class="line"><span class="comment">#      &#x27;Hello with double quotes&#x27;,</span></span><br><span class="line"><span class="comment">#      &#x27;I am fine. ☺&#x27;,</span></span><br><span class="line"><span class="comment">#      &#x27;\r\n is \r\n&#x27;,</span></span><br><span class="line"><span class="comment">#      &#x27;He said: &quot;Hello!&quot;&#x27; ] &#125;</span></span><br></pre></td></tr></table></figure></p></li><li><p>对于多行的文字，YAML提供了两种特殊的语法支持</p></li><li><p>保留换行</p><ul><li><p>使用竖线符<code>"|"</code>来表示该语法，每行的缩进和行尾空白都会被去掉，而额外的缩进会被保留</p><p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">lines:</span> <span class="string">|</span></span><br><span class="line"><span class="string">  我是第一行</span></span><br><span class="line"><span class="string">  我是第二行</span></span><br><span class="line"><span class="string">    我是第三行</span></span><br><span class="line"><span class="string">      我是第四行</span></span><br><span class="line"><span class="string">  我是第五行  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="comment"># 内容转换结果如下：  </span></span><br><span class="line"><span class="comment"># &#123; lines: &#x27;我是第一行\n我是第二行\n  我是第三行\n    我是第四行\n我是第五行 \n&#x27; &#125;</span></span><br></pre></td></tr></table></figure></p></li></ul></li><li><p>折叠换行</p><ul><li><p>使用右尖括号<code>"&gt;"</code>来表示该语法，只有空白行才会被识别为换行，原来的换行符都会被转换成空格</p><p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">lines:</span> <span class="string">&gt;</span></span><br><span class="line"><span class="string">  我是第一行</span></span><br><span class="line"><span class="string">  我也是第一行</span></span><br><span class="line"><span class="string">  我还是第一行</span></span><br><span class="line"><span class="string">  我仍然是第一行</span></span><br><span class="line"><span class="string"></span>  </span><br><span class="line">  <span class="string">我是第二行</span></span><br><span class="line">  <span class="string">我也是第二行</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 内容转换结果如下：  </span></span><br><span class="line"><span class="comment"># &#123; lines: &#x27;我是第一行 我也是第一行 我还是第一行 我仍然是第一行\n我是第二行 我也是第二行\n&#x27; &#125;</span></span><br></pre></td></tr></table></figure></p></li></ul></li></ul><h3 id="布尔值">布尔值</h3><ul><li><p>"true"、"True"、"TRUE"、"yes"、"Yes"和“YES"皆为<strong>真</strong></p></li><li><p>"false"、"False"、"FALSE"、"no"、"No"和“NO"皆为<strong>假</strong></p><p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">boolean:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="literal">true</span> <span class="comment"># True、TRUE</span></span><br><span class="line">  <span class="bullet">-</span> <span class="literal">yes</span> <span class="comment"># Yes、YES</span></span><br><span class="line">  <span class="bullet">-</span> <span class="literal">false</span> <span class="comment"># False、FALSE</span></span><br><span class="line">  <span class="bullet">-</span> <span class="literal">no</span> <span class="comment"># No、NO</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 内容转换结果如下：</span></span><br><span class="line"><span class="comment"># &#123; boolean: [ true, &#x27;yes&#x27;, false, &#x27;no&#x27; ] &#125;</span></span><br></pre></td></tr></table></figure></p></li></ul><h3 id="整数">整数</h3><ul><li><p>支持二进制表示</p><p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">int:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">666</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">0001_0000</span> <span class="comment">#二进制表示</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 内容转换结果如下：</span></span><br><span class="line"><span class="comment"># &#123; int: [ 666, 10000 ] &#125;</span></span><br></pre></td></tr></table></figure></p></li></ul><h3 id="浮点数">浮点数</h3><ul><li><p>支持科学计数法</p><p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">float:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">3.14</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">6.8523015e+5</span> <span class="comment"># 使用科学计数法</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 内容转换结果如下：</span></span><br><span class="line"><span class="comment"># &#123; float: [ 3.14, 685230.15 ] &#125;</span></span><br></pre></td></tr></table></figure></p></li></ul><h3 id="空值null">空值（Null）</h3><ul><li><p>"null"、"Null"和"~"都是空，不指定值默认也是空</p><p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">nulls:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="literal">null</span></span><br><span class="line">  <span class="bullet">-</span> <span class="literal">Null</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">~</span></span><br><span class="line">  <span class="bullet">-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 内容转换结果如下：</span></span><br><span class="line"><span class="comment"># &#123; nulls: [ null, null, null, null ] &#125;</span></span><br></pre></td></tr></table></figure></p></li></ul><h3 id="时间戳">时间戳</h3><ul><li><p>YAML也支持ISO 8601格式的时间数据</p><p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">date1:</span> <span class="number">2020-05-26</span></span><br><span class="line"><span class="attr">date2:</span> <span class="number">2020-05-26T01:00:00+08:00</span></span><br><span class="line"><span class="attr">date3:</span> <span class="number">2020-05-26T02:00:00.10+08:00</span></span><br><span class="line"><span class="attr">date4:</span> <span class="number">2020-05-26 03:00:00.10 +8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 内容转换结果如下：</span></span><br><span class="line"><span class="comment"># &#123; date1: Tue May 26 2020 08:00:00 GMT+0800 (中国标准时间),</span></span><br><span class="line"><span class="comment">#   date2: Tue May 26 2020 01:00:00 GMT+0800 (中国标准时间),</span></span><br><span class="line"><span class="comment">#   date3: Tue May 26 2020 02:00:00 GMT+0800 (中国标准时间),</span></span><br><span class="line"><span class="comment">#   date4: Tue May 26 2020 03:00:00 GMT+0800 (中国标准时间) &#125;</span></span><br></pre></td></tr></table></figure></p></li></ul><h3 id="类型转换">类型转换</h3><ul><li><p>YAML支持使用严格类型标签的双感叹号+目标类型形式，即（"<code>!!</code>"）来强制转换类型</p><p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">a:</span> <span class="type">!!float</span> <span class="string">&#x27;666&#x27;</span></span><br><span class="line"><span class="attr">b:</span> <span class="string">&#x27;666&#x27;</span></span><br><span class="line"><span class="attr">c:</span> <span class="type">!!str</span> <span class="number">666</span></span><br><span class="line"><span class="attr">d:</span> <span class="type">!!str</span> <span class="number">666.66</span></span><br><span class="line"><span class="attr">e:</span> <span class="type">!!str</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">f:</span> <span class="type">!!str</span> <span class="literal">yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 内容转换结果如下：</span></span><br><span class="line"><span class="comment"># &#123; a: 666, b: &#x27;666&#x27;, c: &#x27;666&#x27;, d: &#x27;666.66&#x27;, e: &#x27;true&#x27;, f: &#x27;yes&#x27; &#125;</span></span><br></pre></td></tr></table></figure></p></li></ul><h3 id="其他高级类型">其他高级类型</h3><p>YAML也可以使用更高级的类型，但不一定兼容所有解析器，包括集合、有序映射、十六进制数据和二进制数据等</p><h3 id="数据重用与合并">数据重用与合并</h3><ul><li><p>为了避免过多重复的定义，YAML提供了由锚点标签<code>"&amp;"</code>和引用标签<code>"*"</code>组成的语法，凭借此可以快速引用一些相同的数据</p><p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">a:</span> <span class="string">&amp;anchor</span> <span class="comment">#设置锚点</span></span><br><span class="line">  <span class="attr">one:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">two:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">three:</span> <span class="number">3</span></span><br><span class="line"><span class="attr">b:</span> <span class="string">*anchor</span> <span class="comment">#引用锚点 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 内容转换结果如下：</span></span><br><span class="line"><span class="comment"># &#123; a: &#123; one: 1, two: 2, three: 3 &#125;,</span></span><br><span class="line"><span class="comment">#   b: &#123; one: 1, two: 2, three: 3 &#125; &#125;</span></span><br></pre></td></tr></table></figure></p></li><li><p>配合合并标签<code>"&lt;&lt;"</code>使用可以与任意数据进行合并，以此实现类似于C++中继承的功能</p><p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">human:</span> <span class="string">&amp;base</span> <span class="comment"># 添加名为base的锚点</span></span><br><span class="line">    <span class="attr">body:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">hair:</span> <span class="number">999</span></span><br><span class="line"><span class="attr">singer:</span></span><br><span class="line">    <span class="string">&lt;&lt;:</span> <span class="string">*base</span> <span class="comment"># 引用base锚点，实例化时会自动展开</span></span><br><span class="line">    <span class="attr">skill:</span> <span class="string">sing</span> <span class="comment"># 添加额外的属性</span></span><br><span class="line"><span class="attr">programer:</span></span><br><span class="line">    <span class="string">&lt;&lt;:</span> <span class="string">*base</span> <span class="comment"># 引用base锚点，实例化时会自动展开</span></span><br><span class="line">    <span class="attr">hair:</span> <span class="number">6</span> <span class="comment"># 复写base中的属性</span></span><br><span class="line">    <span class="attr">skill:</span> <span class="string">code</span> <span class="comment"># 添加额外的属性  </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 内容转换结果如下：</span></span><br><span class="line"><span class="comment"># &#123; human: &#123; body: 1, hair: 999 &#125;,</span></span><br><span class="line"><span class="comment">#   singer: &#123; body: 1, hair: 999, skill: &#x27;sing&#x27; &#125;,</span></span><br><span class="line"><span class="comment">#   programer: &#123; body: 1, hair: 6, skill: &#x27;code&#x27; &#125; &#125;</span></span><br></pre></td></tr></table></figure></p></li></ul><h1 id="redis">Redis</h1><p>Redis是一个用C语言编写的、开源的、基于内存运行并支持持久化的、高性能的NoSQL数据库，具有支持数据持久化、支持多种数据结构、支持数据备份等特点，通常被称为数据结构服务器。</p><p>NoSQL数据库泛指非关系型数据库，其去掉了关系数据库的关系型特性，是为了解决大规模数据集合多重数据种类带来的问题而生。</p><h2 id="windows安装">Windows安装</h2><p>Redis下载地址：<a href="https://github.com/microsoftarchive/redis/releases">点击前往</a></p><p>打开上述的下载地址后，可以在网页下方的Assets处看到目前支持的版本，找到最新的版本下载安装即可。</p><p>注：msi格式的为Windows的安装文件，双击即可进行安装，而zip包和tar.gz包则需要先解压再安装。</p><p>安装好后，需要<strong>着重关注</strong>以下几个文件：</p><table><thead><tr class="header"><th>文件名</th><th>作用</th></tr></thead><tbody><tr class="odd"><td>redis.windows.conf</td><td>Redis 运行的配置文件。</td></tr><tr class="even"><td>redis-benchmark.exe</td><td>Redis 性能测试的工具。</td></tr><tr class="odd"><td>redis-check-aof.exe</td><td>Redis 的 aof 文件修复的工具。</td></tr><tr class="even"><td>redis-check-dump.exe</td><td>Redis 的 rdb 文件修复的工具。</td></tr><tr class="odd"><td>redis-cli.exe</td><td>Redis 的客户端。</td></tr><tr class="even"><td>redis-server.exe</td><td>Redis 的服务端。</td></tr></tbody></table><ul><li></li></ul><h2 id="redis数据类型">Redis数据类型</h2><p>Redis支持五种数据类型：string（字符串）、hash（哈希）、list（列表）、set（集合）及zset（有序集合）。</p><h3 id="string类型">String类型</h3><p>string是Redis最基本的类型，一个key对应一个value（即键值对）。Redis的string可以包含任何数据，如jpg图片或序列化图像等，其一个键最大可以存储512MB的数据。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置website值</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> website tangmenjue.top</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取website值</span></span><br><span class="line">127.0.0.1:6379&gt; get website</span><br><span class="line"><span class="string">&quot;tangmenjue.top&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#删除website值</span></span><br><span class="line">127.0.0.1:6379&gt; del website</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure><h3 id="hash类型">Hash类型</h3><p>hash是一个键值对集合，其是一个string类型的field和value的映射表，适合用于存储对象，每个hash可以存储 4294967295个键值对。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置一个对象webinfo，它的键webname对应的值为tangmenjue，键weburl对应的值为tangmenjue.top，webtype对应的类型为it</span></span><br><span class="line">127.0.0.1:6379&gt; hmset webinfo webname tangmenjue  weburl tangmenjue.top  webtype it</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取webinfo对象中，weburl、webname、webtype的键值</span></span><br><span class="line">127.0.0.1:6379&gt; hmget webinfo weburl webname webtype</span><br><span class="line">1) <span class="string">&quot;tangmenjue.top&quot;</span></span><br><span class="line">2) <span class="string">&quot;tangmenjue&quot;</span></span><br><span class="line">3) <span class="string">&quot;it&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#删除对象webinfo</span></span><br><span class="line">127.0.0.1:6379&gt; del webinfo</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure><h3 id="list类型">List类型</h3><p>Redis的list类型是简单的字符串列表，按照插入顺序排序，可以添加一个元素到列表的左边或右边。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#向列表tangmenjue.top里添加Redis、Vue 和Pgsql3个元素</span></span><br><span class="line">127.0.0.1:6379&gt; lpush tangmenjue.top Redis Vue Pgsql</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取列表tangmenjue.top的下标从0到3的数据</span></span><br><span class="line">127.0.0.1:6379&gt; lrange tangmenjue.top 0 3</span><br><span class="line">1) <span class="string">&quot;Pgsql&quot;</span></span><br><span class="line">2) <span class="string">&quot;Vue&quot;</span></span><br><span class="line">3) <span class="string">&quot;Redis&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#删除值</span></span><br><span class="line">127.0.0.1:6379&gt; del tangmenjue.top</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure><h3 id="set类型">Set类型</h3><p>Redis的Set是string类型的无序集合，集合是通过哈希表来实现的，因此添加、删除、查找的复杂度都是O(1)。每个集合中最大可存储4294967295个成员。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#向集合tangmenjue.top添加Redis、Vue 和Pgsql3个元素</span></span><br><span class="line">127.0.0.1:6379&gt; sadd tangmenjue.top Redis Vue Pgsql</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line"></span><br><span class="line"><span class="comment">#继续向集合tangmenjue.top添加元素Sqlserver，此时返回1表示成功</span></span><br><span class="line">127.0.0.1:6379&gt; sadd tangmenjue.top Sqlserver</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"></span><br><span class="line"><span class="comment">#继续向集合tangmenjue.top添加元素Redis，此时返回0表示失败。因为集合中已有Redis，不可重复插入</span></span><br><span class="line">127.0.0.1:6379&gt; sadd tangmenjue.top Redis</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取集合tangmenjue.top的所有元素</span></span><br><span class="line">127.0.0.1:6379&gt; smembers tangmenjue.top</span><br><span class="line">1) <span class="string">&quot;Pgsql&quot;</span></span><br><span class="line">2) <span class="string">&quot;Sqlserver&quot;</span></span><br><span class="line">3) <span class="string">&quot;Vue&quot;</span></span><br><span class="line">4) <span class="string">&quot;Redis&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#删除集合tangmenjue.top</span></span><br><span class="line">127.0.0.1:6379&gt; del tangmenjue.top</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure><h3 id="zset类型">ZSet类型</h3><p>zset和set一样也是string类型元素的集合且不允许成员重复。</p><p>与set不同的是，每个元素都会关联一个double类型的分数，通过这个分数来为集合中的成员按从大到小进行排序。zset成员是唯一的，但分数（score）是可以重复的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#向有序集合tangmenjue.top添加分数为0的Redis值</span></span><br><span class="line">127.0.0.1:6379&gt; zadd tangmenjue.top 0 Redis</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"></span><br><span class="line"><span class="comment">#向有序集合tangmenjue.top添加分数为1的Vue值</span></span><br><span class="line">127.0.0.1:6379&gt; zadd tangmenjue.top 1 Vue</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"></span><br><span class="line"><span class="comment">#向有序集合tangmenjue.top添加分数为2的Pgsql值和分数为3的Sqlserver值</span></span><br><span class="line">127.0.0.1:6379&gt; zadd tangmenjue.top 2 Pgsql 3 Sqlserver</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取有序集合tangmenjue.top的所有数据，并打印出分数</span></span><br><span class="line">127.0.0.1:6379&gt; zrange tangmenjue.top 0 -1 withscores</span><br><span class="line">1) <span class="string">&quot;Redis&quot;</span></span><br><span class="line">2) <span class="string">&quot;0&quot;</span></span><br><span class="line">3) <span class="string">&quot;Vue&quot;</span></span><br><span class="line">4) <span class="string">&quot;1&quot;</span></span><br><span class="line">5) <span class="string">&quot;Pgsql&quot;</span></span><br><span class="line">6) <span class="string">&quot;2&quot;</span></span><br><span class="line">7) <span class="string">&quot;Sqlserver&quot;</span></span><br><span class="line">8) <span class="string">&quot;3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#删除有序集合tangmenjue.top</span></span><br><span class="line">127.0.0.1:6379&gt; del tangmenjue.top</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure><h2 id="连接本地redis">连接本地Redis</h2><p>进入到Redis所在目录，在地址栏输入cmd，此时会在当前目录打开命令行窗口，如下图所示：</p><p><img src="/2022/12/16/YAML%E4%B8%8ERedis%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%94%A8/1.png"></p><ul><li><p>在命令行中输入以下命令后回车，启动redis server客户端:</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">E:\Redis&gt;redis-server.exe</span><br><span class="line">[4524] 16 Dec 11:48:29.399 <span class="comment"># oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span></span><br><span class="line">[4524] 16 Dec 11:48:29.399 <span class="comment"># Redis version=5.0.14.1, bits=64, commit=ec77f72d, modified=0, pid=4524, just started</span></span><br><span class="line">[4524] 16 Dec 11:48:29.399 <span class="comment"># Configuration loaded</span></span><br><span class="line">[4524] 16 Dec 11:48:29.401 <span class="comment"># Could not create server TCP listening socket 127.0.0.1:6379: bind: 操作成功完成。</span></span><br></pre></td></tr></table></figure></p><p>此时可以看到redis server的运行信息，说明redis server运行成功。</p></li><li><p>接下来不要关闭这个Redis server，重新在地址栏输入cmd，打开一个新的命令行。在命令行中输入以下命令后回车，启动redis client端：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PS E:\Redis&gt; redis-cli.exe</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure></p><p>看到127.0.0.1:6379则表明此时已经成功连接上了本地Redis服务器。</p></li><li><p>在redis client端的cmd上输入以下命令后回车,以此来测试redis-cli客户端是否能连接上redis服务器：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ping</span><br><span class="line">PONG</span><br><span class="line"></span><br><span class="line"><span class="comment">#当看到输出PONG时则表示连接成功</span></span><br></pre></td></tr></table></figure></p></li></ul><p><strong>注意：</strong>若是启动redis server客户端时出现以下错误：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">E:\Redis&gt;redis-server.exe</span><br><span class="line">[7976] 16 Dec 11:41:31.720 <span class="comment"># oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span></span><br><span class="line">[7976] 16 Dec 11:41:31.720 <span class="comment"># Redis version=5.0.14.1, bits=64, commit=ec77f72d, modified=0, pid=7976, just started</span></span><br><span class="line">[7976] 16 Dec 11:41:31.721 <span class="comment"># Warning: no config file specified, using the default config. In order to specify a config file use redis-server.exe /path/to/redis.conf</span></span><br><span class="line">[7976] 16 Dec 11:41:31.724 <span class="comment"># Could not create server TCP listening socket *:6379: bind: 在一个非套接字上尝试了一个操作。</span></span><br></pre></td></tr></table></figure><p>出现这一错误则则可以将启动命令改为如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">E:\Redis&gt;redis-server.exe redis.windows.conf</span><br></pre></td></tr></table></figure><h2 id="连接远程redis">连接远程Redis</h2><p>在Redis根目录下打开cmd，使用redis-cli客户端，连接远程redis服务的语法为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -h host -p port -a password</span><br><span class="line"><span class="comment">#其中：host为服务器所在的ip地址</span></span><br><span class="line"><span class="comment">#port为Redis服务的监听端口</span></span><br><span class="line"><span class="comment">#password为Redis服务的密码，若没有开启认证则不需要这一参数</span></span><br></pre></td></tr></table></figure><h2 id="redis配置">Redis配置</h2><p>使用redis-cli客户端连接上redis服务器后，可以使用config命令来查看或设置redis的配置，也可以直接修改安装目录下的redis.windows.conf文件来修改配置。</p><p>config相关命令如下：</p><ul><li><code>config get key</code>：获取配置项为key的配置，配置项不存在时返回<code>(empty list or set)</code></li><li><code>config get *</code>：获取所有配置</li><li><code>config set key "value"</code>：设置配置项key的值为value</li></ul>]]></content>
    
    
    <summary type="html">YAML,Redis</summary>
    
    
    
    <category term="学习笔记" scheme="http://tangmenjue.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="YAML" scheme="http://tangmenjue.top/categories/YAML/"/>
    
    <category term="Redis" scheme="http://tangmenjue.top/categories/Redis/"/>
    
    
    <category term="YAML" scheme="http://tangmenjue.top/tags/YAML/"/>
    
    <category term="Redis" scheme="http://tangmenjue.top/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Docker应用部署实战</title>
    <link href="http://tangmenjue.top/2022/12/15/Docker%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2%E5%AE%9E%E6%88%98/"/>
    <id>http://tangmenjue.top/2022/12/15/Docker%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2%E5%AE%9E%E6%88%98/</id>
    <published>2022-12-14T16:16:08.000Z</published>
    <updated>2022-12-14T16:16:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="centos部署应用步骤">Centos部署应用步骤</h1><h2 id="配置代码运行环境">配置代码运行环境</h2><h3 id="nginx下载及配置">nginx下载及配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#centos下载apache</span></span><br><span class="line">[root@localhost admin]<span class="comment"># yum install httpd </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#centos下载nginx</span></span><br><span class="line">[root@localhost admin]<span class="comment"># yum install epel-release</span></span><br><span class="line">[root@localhost httpd]<span class="comment"># yum install -y update</span></span><br><span class="line">[root@localhost httpd]<span class="comment"># yum install -y nginx</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#打开防火墙端口80和443</span></span><br><span class="line">[root@localhost httpd]<span class="comment"># firewall-cmd --permanent --zone=public --add-service=http</span></span><br><span class="line">[root@localhost httpd]<span class="comment"># firewall-cmd --permanent --zone=public --add-service=https</span></span><br><span class="line">[root@localhost httpd]<span class="comment"># firewall-cmd --reload</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#启动nignx服务</span></span><br><span class="line">[root@localhost httpd]<span class="comment"># systemctl start nginx</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看nignx进程的状态</span></span><br><span class="line">[root@localhost admin]<span class="comment"># systemctl status nginx</span></span><br><span class="line">● nginx.service - The nginx HTTP and reverse proxy server</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/nginx.service; disabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since 日 2022-12-11 18:32:09 PST; 1min 10s ago</span><br><span class="line">  Process: 5678 ExecStart=/usr/sbin/nginx (code=exited, status=0/SUCCESS)</span><br><span class="line">  Process: 5675 ExecStartPre=/usr/sbin/nginx -t (code=exited, status=0/SUCCESS)</span><br><span class="line">  Process: 5670 ExecStartPre=/usr/bin/rm -f /run/nginx.pid (code=exited, status=0/SUCCESS)</span><br><span class="line"> Main PID: 5680 (nginx)</span><br><span class="line">    Tasks: 2</span><br><span class="line">   CGroup: /system.slice/nginx.service</span><br><span class="line">           ├─5680 nginx: master process /usr/sbin/nginx</span><br><span class="line">           └─5683 nginx: worker process</span><br><span class="line"></span><br><span class="line">12月 11 18:32:09 localhost.localdomain systemd[1]: Starting The nginx HTTP a...</span><br><span class="line">12月 11 18:32:09 localhost.localdomain nginx[5675]: nginx: the configuration...</span><br><span class="line">12月 11 18:32:09 localhost.localdomain nginx[5675]: nginx: configuration fil...</span><br><span class="line">12月 11 18:32:09 localhost.localdomain systemd[1]: Started The nginx HTTP an...</span><br><span class="line">Hint: Some lines were ellipsized, use -l to show <span class="keyword">in</span> full.</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置nignx服务开机自启动</span></span><br><span class="line">[root@localhost httpd]<span class="comment"># systemctl enable nginx</span></span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/nginx.service to /usr/lib/systemd/system/nginx.service.</span><br><span class="line"></span><br><span class="line"><span class="comment">#进入conf.d目录新建文件并填入以下内容</span></span><br><span class="line">[root@localhost httpd]<span class="comment"># cd /etc/nginx/conf.d</span></span><br><span class="line">[root@localhost conf.d]<span class="comment"># ls</span></span><br><span class="line">[root@localhost conf.d]<span class="comment"># touch flask_test.conf</span></span><br><span class="line">[root@localhost conf.d]<span class="comment"># vi flask_test.conf</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># api代理转发</span></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_redirect  off;</span><br><span class="line">        proxy_set_header    Host <span class="variable">$host</span>;</span><br><span class="line">        proxy_set_header    X-Real-IP            <span class="variable">$remote_addr</span>;</span><br><span class="line">        proxy_set_header    X-Forwarded-For      <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        proxy_set_header    X-Forwarded-Proto    <span class="variable">$scheme</span>;</span><br><span class="line">        proxy_pass http://127.0.0.1:8000;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#重启nginx</span></span><br><span class="line">[root@localhost conf.d]<span class="comment"># systemctl reload nginx</span></span><br></pre></td></tr></table></figure><h3 id="pgsql下载及配置">pgsql下载及配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#centos下载pgsql</span></span><br><span class="line">[root@localhost httpd]<span class="comment"># yum install https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm</span></span><br><span class="line">[root@localhost httpd]<span class="comment"># yum install postgresql12-server</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#启动pgsql服务</span></span><br><span class="line">[root@localhost httpd]<span class="comment"># postgresql-12-setup initdb</span></span><br><span class="line">Initializing database ... OK</span><br><span class="line">[root@localhost httpd]<span class="comment"># systemctl start postgresql-12</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置pgsql服务开机自启动</span></span><br><span class="line">[root@localhost httpd]<span class="comment"># systemctl enable postgresql-12</span></span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/postgresql-12.service to /usr/lib/systemd/system/postgresql-12.service.</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置pgsql</span></span><br><span class="line">[root@localhost bin]<span class="comment"># su - postgres</span></span><br><span class="line">-bash-4.2$ psql</span><br><span class="line">psql (12.13)</span><br><span class="line">Type <span class="string">&quot;help&quot;</span> <span class="keyword">for</span> <span class="built_in">help</span>.</span><br><span class="line">postgres=<span class="comment"># alter user postgres with password &#x27;123456&#x27;</span></span><br><span class="line">postgres-<span class="comment"># \q</span></span><br><span class="line">-bash-4.2$ <span class="built_in">exit</span></span><br><span class="line"><span class="built_in">logout</span></span><br><span class="line">[root@localhost bin]<span class="comment"># find / -name postgresql.conf</span></span><br><span class="line">find: ‘/run/user/1000/gvfs’: 权限不够</span><br><span class="line">/var/lib/pgsql/12/data/postgresql.conf</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置远程访问</span></span><br><span class="line">[root@localhost bin]<span class="comment"># vi /var/lib/pgsql/12/data/postgresql.conf</span></span><br><span class="line">listen_addressses=<span class="string">&quot;*&quot;</span></span><br><span class="line">port = 5432 </span><br></pre></td></tr></table></figure><h3 id="node.js安装">node.js安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装node.js</span></span><br><span class="line">[root@localhost admin]<span class="comment"># wget https://nodejs.org/dist/v16.16.0/node-v16.16.0-linux-x64.tar.xz</span></span><br><span class="line">[root@localhost admin]<span class="comment"># tar -xvf node-v16.16.0-linux-x64.tar.xz</span></span><br><span class="line">[root@localhost admin]<span class="comment"># mv node-v16.16.0-linux-x64  node.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查找node.js路径</span></span><br><span class="line">[root@localhost admin]<span class="comment"># find / -name node.js</span></span><br><span class="line">find: ‘/run/user/1000/gvfs’: 权限不够</span><br><span class="line">/home/admin/node.js</span><br><span class="line">/home/admin/node.js/lib/node_modules/npm/node_modules/debug/src/node.js</span><br><span class="line">/home/admin/node.js/lib/node_modules/npm/node_modules/@npmcli/arborist/lib/node.js</span><br><span class="line">/home/admin/node.js/lib/node_modules/npm/node_modules/@npmcli/fs/lib/common/node.js</span><br><span class="line">/home/admin/node.js/lib/node_modules/npm/node_modules/util-deprecate/node.js</span><br><span class="line"><span class="comment">#检查node版本</span></span><br><span class="line">[root@localhost admin]<span class="comment"># cd /home/admin/node.js/bin</span></span><br><span class="line">[root@localhost bin]<span class="comment"># ./node -v</span></span><br><span class="line">v16.16.0</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加node.js的环境变量：</span></span><br><span class="line">[root@localhost bin]<span class="comment"># vi /etc/profile</span></span><br><span class="line"><span class="comment">#在文件末尾加上两句代码如下：</span></span><br><span class="line"><span class="comment">#NODE_HOME为实际中node的安装位置目录</span></span><br><span class="line"><span class="built_in">export</span> NODE_HOME=/home/admin/node.js</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$NODE_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="comment">#按ESC+:+wq退出vim模式，输入以下命令使配置生效</span></span><br><span class="line">[root@localhost bin]<span class="comment"># source /etc/profile</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置软连接将环境配置放到开机自启动的脚本中</span></span><br><span class="line">[root@localhost bin]<span class="comment"># ln -s /usr/local/node.js/bin/node /usr/local/bin/node</span></span><br><span class="line">[root@localhost bin]<span class="comment"># ln -s /usr/local/node.js/bin/npm /usr/local/bin/npm</span></span><br><span class="line"><span class="comment">#查看虚拟机ip</span></span><br><span class="line">[root@localhost admin]<span class="comment"># ifconfig</span></span><br><span class="line">ens33: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.60.129  netmask 255.255.255.0  broadcast 192.168.60.255</span><br><span class="line">        inet6 fe80::b659:fb9c:695f:5eff  prefixlen 64  scopeid 0x20&lt;<span class="built_in">link</span>&gt;</span><br><span class="line">        ether 00:0c:29:b0:6f:2a  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 491682  bytes 725762513 (692.1 MiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 49960  bytes 3119454 (2.9 MiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        RX packets 1411  bytes 485777 (474.3 KiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 1411  bytes 485777 (474.3 KiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">virbr0: flags=4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.122.1  netmask 255.255.255.0  broadcast 192.168.122.255</span><br><span class="line">        ether 52:54:00:42:aa:9d  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="部署应用">部署应用</h2><h3 id="应用代码传输">应用代码传输</h3><p>在window系统中下载xftp并安装，官网地址如下：<a href="https://www.xshell.com/zh/free-for-home-school/">家庭/学校免费 - NetSarang Website (xshell.com)</a>，安装好后打开，点击新建，在主机一栏填上虚拟机的ip地址：192.168.60.129，用户名填root，密码填虚拟机的密码，其他默认，点击连接如下所示：</p><p><img src="/2022/12/15/Docker%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2%E5%AE%9E%E6%88%98/1.png"></p><p>左侧窗口为本地目录，右侧窗口为虚拟机目录。选中左侧文件后右键，点击传输便可将文件从本地的windows系统传输到Linux虚拟机中。</p><p><img src="/2022/12/15/Docker%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2%E5%AE%9E%E6%88%98/2.png"></p><h3 id="应用前端部署">应用前端部署</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#切换到前端代码目录</span></span><br><span class="line">[root@localhost bin]<span class="comment"># cd /root/WeChat_exercise/front-end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#下载vue及vue cli、加载项目所需的配置文件</span></span><br><span class="line">[root@localhost front-end]<span class="comment"># npm install vue</span></span><br><span class="line">[root@localhost front-end]<span class="comment"># npm install --global @vue/cli</span></span><br><span class="line">[root@localhost front-end]<span class="comment"># npm install yarn</span></span><br><span class="line">[root@localhost front-end]<span class="comment"># npm install</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#运行前端项目</span></span><br><span class="line">[root@localhost front-end]<span class="comment"># npm run serve</span></span><br><span class="line"> DONE  Compiled successfully <span class="keyword">in</span> 51145ms                                                                               01:47:08</span><br><span class="line">  App running at:</span><br><span class="line">  - Local:   http://localhost:8080 </span><br><span class="line">  - Network: http://192.168.60.129:8080</span><br><span class="line"></span><br><span class="line">  Note that the development build is not optimized.</span><br><span class="line">  To create a production build, run yarn build.</span><br></pre></td></tr></table></figure><h3 id="后端环境部署">后端环境部署</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#编译安装python3</span></span><br><span class="line">[root@localhost admin]<span class="comment"># wget https://www.Python.org/ftp/python/3.6.1/Python-3.6.1.tar.xz</span></span><br><span class="line">[root@localhost admin]<span class="comment"># tar xJf  Python-3.6.1.tar.xz</span></span><br><span class="line">[root@localhost admin]<span class="comment"># cd  Python-3.6.1</span></span><br><span class="line">[root@localhost Python-3.6.1]<span class="comment"># ./configure  --prefix=/usr/local/python3 &amp;&amp; make &amp;&amp; make install</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建软链接</span></span><br><span class="line">[root@localhost Python-3.6.1]<span class="comment"># ln -s /usr/local/python3/bin/python3 /usr/bin/python3</span></span><br><span class="line">[root@localhost Python-3.6.1]<span class="comment"># ln -s /usr/local/python3/bin/pip3 /usr/bin/pip3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#更换pip源</span></span><br><span class="line">[root@localhost ~]<span class="comment"># mkdir ~/.pip</span></span><br><span class="line">[root@localhost ~]<span class="comment">#  vi ~/.pip/pip.conf</span></span><br><span class="line"></span><br><span class="line">[global]</span><br><span class="line">index-url = http://mirrors.aliyun.com/pypi/simple/</span><br><span class="line">[install]</span><br><span class="line">trusted-host=mirrors.aliyun.com</span><br><span class="line"></span><br><span class="line"><span class="comment">#切换到后端项目目录，安装virtualenv</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cd /root/WeChat_exercise/back-end</span></span><br><span class="line">ot@localhost back-end]<span class="comment"># yum install python-virtualenv</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建虚拟环境venv并激活</span></span><br><span class="line">[root@localhost back-end]<span class="comment"># python3 -m venv venv</span></span><br><span class="line">[root@localhost back-end]<span class="comment"># . venv/bin/activate</span></span><br><span class="line">[root@localhost back-end]<span class="comment"># yum install postgresql-devel</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#安装Flask和项目所需环境</span></span><br><span class="line">(venv) [root@localhost back-end]<span class="comment"># pip3 install --upgrade pip setuptools wheel</span></span><br><span class="line">(venv) [root@localhost back-end]<span class="comment"># pip install Flask</span></span><br><span class="line">(venv) [root@localhost back-end]<span class="comment"># pip install -r requirements.txt</span></span><br><span class="line">(venv) [root@localhost back-end]<span class="comment"># pip install psycopg2</span></span><br><span class="line"><span class="comment">#运行Flask项目</span></span><br><span class="line">(venv) [root@localhost back-end]<span class="comment">#flask run</span></span><br></pre></td></tr></table></figure><h1 id="docker容器部署应用">docker容器部署应用</h1><p>这一部分先手动启动Pgsql、Python、Nginx等容器，然后再使用Docker Compose来编排容器。</p><h2 id="docker安装">Docker安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装并启动docker</span></span><br><span class="line">[root@localhost admin]<span class="comment"># curl -sSL https://get.daocloud.io/docker | sh</span></span><br><span class="line">[root@localhost admin]<span class="comment"># systemctl start docker</span></span><br><span class="line">[root@localhost admin]<span class="comment"># systemctl enable docker</span></span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.</span><br></pre></td></tr></table></figure><h2 id="构建pgsql容器">构建PgSQL容器</h2><ul><li><p>安装镜像</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># docker pull postgres</span></span><br></pre></td></tr></table></figure></p></li><li><p>创建配置文件夹，可以看到postgres镜像创建的容器是将数据保存在<code>/var/lib/postgresql/data</code>位置下的：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># cd /home</span></span><br><span class="line">[root@localhost home]<span class="comment"># mkdir -p /home/docker</span></span><br><span class="line">[root@localhost home]<span class="comment"># mkdir -p /home/docker/postgresql</span></span><br><span class="line">[root@localhost home]<span class="comment"># mkdir -p /home/docker/postgresql/data</span></span><br><span class="line">[root@localhost home]<span class="comment"># docker image inspect postgres</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;Id&quot;</span>: <span class="string">&quot;sha256:a26eb6069868e4bfd0095788e541bb40711861bdfb2a8252103dea85cc0758aa&quot;</span>,</span><br><span class="line">        <span class="string">&quot;RepoTags&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;postgres:latest&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;RepoDigests&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;postgres@sha256:f4cd32e7a418d9c9ba043e7d561243388202b654c740bcc85ca40b41d9fb4f1e&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;Parent&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Comment&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Created&quot;</span>: <span class="string">&quot;2022-12-22T23:19:59.856808957Z&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Container&quot;</span>: <span class="string">&quot;938c729969fbf6312f6563590395ed0bb4cbc982b039598c38ffa539c86a5df5&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ContainerConfig&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Hostname&quot;</span>: <span class="string">&quot;938c729969fb&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Domainname&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;User&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;AttachStdin&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;AttachStdout&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;AttachStderr&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;ExposedPorts&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;5432/tcp&quot;</span>: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;Tty&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;OpenStdin&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;StdinOnce&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;Env&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/lib/postgresql/15/bin&quot;</span>,</span><br><span class="line">                <span class="string">&quot;GOSU_VERSION=1.14&quot;</span>,</span><br><span class="line">                <span class="string">&quot;LANG=en_US.utf8&quot;</span>,</span><br><span class="line">                <span class="string">&quot;PG_MAJOR=15&quot;</span>,</span><br><span class="line">                <span class="string">&quot;PG_VERSION=15.1-1.pgdg110+1&quot;</span>,</span><br><span class="line">                <span class="string">&quot;PGDATA=/var/lib/postgresql/data&quot;</span></span><br><span class="line">            ],</span><br></pre></td></tr></table></figure></p></li><li><p>执行以下命令创建并启动PgSQL容器，自定义命名为<code>my-postgres</code>：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost home]<span class="comment"># docker run -p 5432:5432 -v /home/docker/postgresql/data:/var/lib/postgresql/data -e POSTGRES_PASSWORD=123456 -e TZ=PRC -d --name=my-postgres postgres</span></span><br><span class="line">165c63929bf341497816b85f28a060a2c6f75b7d9144627a560547b9ca92f9f4</span><br></pre></td></tr></table></figure></p></li><li><p>现在便可以用<code>docker ps -a</code>查看容器是否已经运行：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost home]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE               COMMAND                  CREATED              STATUS                          PORTS                                       NAMES</span><br><span class="line">165c63929bf3   postgres            <span class="string">&quot;docker-entrypoint.s…&quot;</span>   About a minute ago   Up About a minute               0.0.0.0:5432-&gt;5432/tcp, :::5432-&gt;5432/tcp   my-postgres</span><br><span class="line">4c1699cdc854   flask-test:latest   <span class="string">&quot;/bin/sh -c &#x27;gunicor…&quot;</span>   9 days ago           Restarting (1) 45 seconds ago                                               flask_test</span><br></pre></td></tr></table></figure></p></li></ul><h2 id="构建flask-api镜像">构建Flask API镜像</h2><ul><li><p>由于有多条命令，不方便直接写到Dockerfile中的CMD子命令中，因此在后端项目目录下新建boot.sh</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#切换到后端项目目录</span></span><br><span class="line">[root@localhost home]<span class="comment"># cd /root/WeChat_exercise/back-end</span></span><br><span class="line">[root@localhost back-end]<span class="comment"># ls</span></span><br><span class="line">app  config.py  invoke  migrations  package.json  __pycache__  Python.gitignore  requirements.txt  venv  weixin.py</span><br><span class="line">[root@localhost back-end]<span class="comment"># touch boot.sh</span></span><br><span class="line">[root@localhost back-end]<span class="comment"># vi boot.sh</span></span><br><span class="line"><span class="comment">#内容如下</span></span><br><span class="line"><span class="comment">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span>; <span class="keyword">do</span></span><br><span class="line">    flask db upgrade</span><br><span class="line">    <span class="keyword">if</span> [[ <span class="string">&quot;$?&quot;</span> == <span class="string">&quot;0&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">break</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="built_in">echo</span> Failed to apply the migration to the database, retrying <span class="keyword">in</span> 3 secs...</span><br><span class="line">    <span class="built_in">sleep</span> 3</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">flask deploy</span><br><span class="line"><span class="built_in">exec</span> gunicorn -w 3 -b 0.0.0.0:5000 --access-logfile - --error-logfile - weixin:app</span><br><span class="line"><span class="comment">#授予可执行权限</span></span><br><span class="line">[root@localhost back-end]<span class="comment"># chmod +x boot.sh</span></span><br></pre></td></tr></table></figure></p></li><li><p>新建一个Dockerfile</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost back-end]<span class="comment"># touch Dockerfile</span></span><br><span class="line">[root@localhost back-end]<span class="comment"># vi Dockerfile</span></span><br><span class="line"></span><br><span class="line">[root@CentOS www]<span class="comment"># vim back-end/Dockerfile</span></span><br><span class="line">内容如下：</span><br><span class="line"></span><br><span class="line">FROM python:3.6-alpine</span><br><span class="line"></span><br><span class="line">COPY ./back-end /usr/src/app</span><br><span class="line">WORKDIR /usr/src/app</span><br><span class="line">RUN pip --no-cache-dir install  -i https://mirrors.aliyun.com/pypi/simple/ --upgrade pip</span><br><span class="line">RUN pip install -r requirements.txt -i https://mirrors.aliyun.com/pypi/simple/ \ </span><br><span class="line">  &amp;&amp; pip install gunicorn</span><br><span class="line">ENV FLASK_APP weixin.py</span><br><span class="line">EXPOSE 5000</span><br><span class="line">ENTRYPOINT [<span class="string">&quot;./boot.sh&quot;</span>]</span><br></pre></td></tr></table></figure></p></li><li><p>开始构建后端Flask API镜像</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost back-end]<span class="comment"># cd ../</span></span><br><span class="line">[root@localhost WeChat_exercise]<span class="comment"># docker build -f back-end/Dockerfile -t weixin-api:0.0.1 .</span></span><br><span class="line">Sending build context to Docker daemon    573MB.2MB</span><br><span class="line">Step 1/8 : FROM python:3.6-alpine</span><br><span class="line"> ---&gt; 3a9e80fa4606</span><br><span class="line">Step 2/8 : COPY ./back-end /usr/src/app</span><br><span class="line"> ---&gt; f5a2a7ecb4cf</span><br><span class="line">...</span><br><span class="line">Step 6/8 : ENV FLASK_APP weixin.py</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> e9f4ebef3d13</span><br><span class="line">Removing intermediate container e9f4ebef3d13</span><br><span class="line"> ---&gt; 7317d7be0b13</span><br><span class="line">Step 7/8 : EXPOSE 5000</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> c544718548e6</span><br><span class="line">Removing intermediate container c544718548e6</span><br><span class="line"> ---&gt; c6e683ab97ff</span><br><span class="line">Step 8/8 : ENTRYPOINT [<span class="string">&quot;./boot.sh&quot;</span>]</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> c8e11997efb0</span><br><span class="line">Removing intermediate container c8e11997efb0</span><br><span class="line"> ---&gt; 64f072fbbbe5</span><br><span class="line">Successfully built 64f072fbbbe5</span><br><span class="line">Successfully tagged weixin-api:0.0.1</span><br><span class="line"></span><br></pre></td></tr></table></figure></p></li><li><p>启动Flask API容器</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost WeChat_exercise]<span class="comment"># docker run -d --name weixin-api --link my-postgres:postgres -e DATABASE_URL=postgresql://postgres:123456@localhost:5432/postgres -p 5000:5000 --rm weixin-api:0.0.1</span></span><br><span class="line">2b58b6f9a4984649df15eda6c7b5b849697b3fc6f9cdfd906009e52814763f19</span><br></pre></td></tr></table></figure></p></li></ul><h2 id="构建nginx容器">构建Nginx容器</h2><ul><li><p>修改WeChat_exercise/front-end/src/main.js文件，增加以下代码，其中192.168.60:131为虚拟机ip</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Vue.use(ElementUI);</span><br><span class="line"><span class="keyword">if</span> (process.env.NODE_ENV===<span class="string">&#x27;production&#x27;</span>)&#123;</span><br><span class="line">  axios.defaults.baseURL=<span class="string">&#x27;http://192.168.60:131:5000&#x27;</span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">  axios.defaults.baseURL = <span class="string">&#x27;http://127.0.0.1:5000&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>将打包后的静态文件，拷贝到 <code>../docker/nginx/data</code> 目录中，后续映射到 <code>Nginx</code> 容器中去</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost home]<span class="comment"># cd /root/WeChat_exercise/front-end</span></span><br><span class="line">[root@localhost front-end]<span class="comment"># npm install</span></span><br><span class="line">[root@localhost front-end]<span class="comment"># npm run build</span></span><br><span class="line">[root@localhost front-end]<span class="comment"># mkdir -p ../docker/nginx/data</span></span><br><span class="line">[root@localhost front-end]<span class="comment"># cp -a dist/* ../docker/nginx/data</span></span><br><span class="line">[root@localhost front-end]<span class="comment"># cd ..</span></span><br><span class="line">[root@localhost WeChat_exercise]<span class="comment"># </span></span><br></pre></td></tr></table></figure></p></li><li><p>启动Nginx容器</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost WeChat_exercise]<span class="comment"># docker run -d --name nginx -p 18080:80 --rm -v $PWD/docker/nginx/data:/usr/share/nginx/html nginx</span></span><br><span class="line">50f66f6ad75ec19220e37fe510724b70448b462a7e7c6b335f42de4893f44944</span><br></pre></td></tr></table></figure></p></li><li><p>浏览器访问<code>http://192.168.60.131:18080/#/ping</code>，前端应用能够正常访问到后端API接口：</p><p><img src="/2022/12/15/Docker%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2%E5%AE%9E%E6%88%98/3.png"></p></li></ul><h2 id="使用docker-compose编排容器">使用Docker Compose编排容器</h2><ul><li><p>安装docker-compose</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost WeChat_exercise]<span class="comment"># cd back-end</span></span><br><span class="line">[root@localhost back-end]<span class="comment"># curl -L https://get.daocloud.io/docker/compose/releases/download/v2.4.1/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose</span></span><br><span class="line">[root@localhost back-end]<span class="comment"># chmod +x /usr/local/bin/docker-compose</span></span><br><span class="line">[root@localhost back-end]<span class="comment"># ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose</span></span><br><span class="line">[root@localhost back-end]<span class="comment"># docker-compose version</span></span><br><span class="line">Docker Compose version v2.4.1</span><br></pre></td></tr></table></figure></p></li><li><p>创建并编写docker-compose.yaml文件</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost back-end]<span class="comment"># touch docker-compose.yaml</span></span><br><span class="line">[root@localhost back-end]<span class="comment"># vi docker-compose.yaml</span></span><br><span class="line"><span class="comment">#内容如下：</span></span><br><span class="line"></span><br><span class="line">version: <span class="string">&quot;3.7&quot;</span></span><br><span class="line">services:</span><br><span class="line">    my-postgres:</span><br><span class="line">        image: postgres</span><br><span class="line">        privileged: <span class="literal">true</span></span><br><span class="line">        <span class="comment"># 权限要加，不然启动会告错</span></span><br><span class="line">        environment:</span><br><span class="line">          POSTGRES_PASSWORD: 123456</span><br><span class="line">          POSTGRES_USER: postgres</span><br><span class="line">          POSTGRES_DB: postgres</span><br><span class="line">          TZ: Asia/Shanghai</span><br><span class="line">        ports:</span><br><span class="line">          - 5432:5432</span><br><span class="line">        volumes:</span><br><span class="line">          - /home/docker/postgresql/data:/var/lib/postgresql/data</span><br><span class="line">        restart: always</span><br><span class="line"></span><br><span class="line">    weixin-api:</span><br><span class="line">        image: weixin-api:0.0.1</span><br><span class="line">        build:</span><br><span class="line">            context: .</span><br><span class="line">            dockerfile: Dockerfile</span><br><span class="line">        restart: always</span><br><span class="line">        ports:</span><br><span class="line">            - <span class="string">&quot;5000:5000&quot;</span></span><br><span class="line">        depends_on:</span><br><span class="line">            - my-postgres</span><br><span class="line"></span><br><span class="line">    nginx:</span><br><span class="line">        image: nginx</span><br><span class="line">        ports:</span><br><span class="line">           - <span class="string">&quot;18080:80&quot;</span></span><br><span class="line">        volumes:</span><br><span class="line">           - <span class="string">&quot;<span class="variable">$PWD</span>/docker/nginx/data:/usr/share/nginx/html&quot;</span></span><br></pre></td></tr></table></figure></p></li><li><p>查看正在运行的容器并使它们全部停止运行</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看正在运行的容器</span></span><br><span class="line">[root@localhost back-end]<span class="comment"># docker ps </span></span><br><span class="line">CONTAINER ID   IMAGE               COMMAND                  CREATED          STATUS                          PORTS                                       NAMES</span><br><span class="line">2b58b6f9a498   weixin-api:0.0.1    <span class="string">&quot;./boot.sh&quot;</span>              47 minutes ago   Up 47 minutes                   0.0.0.0:5000-&gt;5000/tcp, :::5000-&gt;5000/tcp   weixin-api</span><br><span class="line">50f66f6ad75e   nginx               <span class="string">&quot;/docker-entrypoint.…&quot;</span>   2 hours ago      Up 2 hours                      0.0.0.0:18080-&gt;80/tcp, :::18080-&gt;80/tcp     nginx</span><br><span class="line">165c63929bf3   postgres            <span class="string">&quot;docker-entrypoint.s…&quot;</span>   2 hours ago      Up 2 hours                      0.0.0.0:5432-&gt;5432/tcp, :::5432-&gt;5432/tcp   my-postgres</span><br><span class="line">4c1699cdc854   flask-test:latest   <span class="string">&quot;/bin/sh -c &#x27;gunicor…&quot;</span>   9 days ago       Restarting (1) 14 seconds ago                                               flask_test</span><br><span class="line"></span><br><span class="line"><span class="comment">#停止所有正在运行的容器</span></span><br><span class="line">[root@localhost back-end]<span class="comment"># docker stop $(docker ps -a -q)</span></span><br><span class="line">27ddc44b2109</span><br><span class="line">a0704302049b</span><br><span class="line">d5e616940191</span><br><span class="line">2b58b6f9a498</span><br><span class="line">2d86579808e5</span><br><span class="line">bb1794163d8e</span><br><span class="line">be6acf36f0d6</span><br><span class="line">50f66f6ad75e</span><br><span class="line">165c63929bf3</span><br><span class="line">4a78c412395d</span><br><span class="line">80b4b9b47652</span><br><span class="line">4c1699cdc854</span><br><span class="line">d140e8d466d0</span><br><span class="line"></span><br><span class="line"><span class="comment">#检查是否还有容器正在运行</span></span><br><span class="line">[root@localhost back-end]<span class="comment"># docker ps </span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br></pre></td></tr></table></figure></p></li><li><p>使用Docker Compose启动应用所需的所有容器，'-d' 选项表示在后台运行 compose，否则在前台输出日志</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启动所有容器</span></span><br><span class="line">[root@localhost back-end]<span class="comment"># docker-compose up -d</span></span><br><span class="line"></span><br><span class="line">[+] Running 3/3</span><br><span class="line"> ⠿ Container back-end-nginx-1        Started                                                                                                                                                                  6.0s</span><br><span class="line"> ⠿ Container back-end-my-postgres-1  Started                                                                                                                                                                  6.1s</span><br><span class="line"> ⠿ Container back-end-weixin-api-1   Started                                                                                                                                                                 11.0s</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看容器状态</span></span><br><span class="line">[root@localhost back-end]<span class="comment"># docker-compose ps</span></span><br><span class="line">NAME                     COMMAND                  SERVICE             STATUS              PORTS</span><br><span class="line">back-end-my-postgres-1   <span class="string">&quot;docker-entrypoint.s…&quot;</span>   my-postgres         running             0.0.0.0:5432-&gt;5432/tcp, :::5432-&gt;5432/tcp</span><br><span class="line">back-end-nginx-1         <span class="string">&quot;/docker-entrypoint.…&quot;</span>   nginx               running             0.0.0.0:18080-&gt;80/tcp, :::18080-&gt;80/tcp</span><br><span class="line">back-end-weixin-api-1    <span class="string">&quot;./boot.sh&quot;</span>              weixin-api          running             0.0.0.0:5000-&gt;5000/tcp, :::5000-&gt;5000/tcp</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看各容器的运行日志，若含有&#x27;-f&#x27; 选项则持续输出</span></span><br><span class="line">[root@localhost back-end]<span class="comment"># docker-compose logs</span></span><br><span class="line"><span class="comment">#停止全部容器</span></span><br><span class="line">[root@localhost back-end]<span class="comment"># docker-compose stop</span></span><br><span class="line">[+] Running 3/3</span><br><span class="line"> ⠿ Container back-end-weixin-api-1   Stopped                                                                                                                                                                 16.3s</span><br><span class="line"> ⠿ Container back-end-nginx-1        Stopped                                                                                                                                                                  4.0s</span><br><span class="line"> ⠿ Container back-end-my-postgres-1  Stopped  </span><br></pre></td></tr></table></figure></p></li></ul><h1 id="端口被占用解决方法">端口被占用解决方法</h1><p>在docker部署的过程中，若端口被占用，如80端口，可使用以下命令解除端口占用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看占用80端口的进程</span></span><br><span class="line">[root@localhost back-end]<span class="comment"># netstat -lnp | grep 80</span></span><br><span class="line">tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      1159/nginx: master  </span><br><span class="line">tcp6       0      0 :::80                   :::*                    LISTEN      1159/nginx: master  </span><br><span class="line"><span class="comment">#杀死占用端口的进程</span></span><br><span class="line">[root@localhost back-end]<span class="comment"># kill -9 1159</span></span><br><span class="line"><span class="comment">#查看是否还有进程占用端口，若有，则继续杀死进程，若无，则端口占用已解除</span></span><br><span class="line">[root@localhost back-end]<span class="comment"># netstat -lnp | grep 80</span></span><br><span class="line">tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      1160/nginx: worker  </span><br><span class="line">tcp6       0      0 :::80                   :::*                    LISTEN      1160/nginx: worker  </span><br><span class="line">[root@localhost back-end]<span class="comment"># kill -9 1160</span></span><br><span class="line">[root@localhost back-end]<span class="comment"># netstat -lnp | grep 80</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Docker,应用部署</summary>
    
    
    
    <category term="Docker" scheme="http://tangmenjue.top/categories/Docker/"/>
    
    <category term="学习笔记" scheme="http://tangmenjue.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Docker" scheme="http://tangmenjue.top/tags/Docker/"/>
    
    <category term="应用部署" scheme="http://tangmenjue.top/tags/%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>Docker应用部署基础</title>
    <link href="http://tangmenjue.top/2022/12/06/Docker%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2%E5%9F%BA%E7%A1%80/"/>
    <id>http://tangmenjue.top/2022/12/06/Docker%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2%E5%9F%BA%E7%A1%80/</id>
    <published>2022-12-06T13:06:20.000Z</published>
    <updated>2022-12-06T13:06:20.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="docker">Docker</h1><h2 id="容器简介">容器简介</h2><h3 id="什么是linux容器">什么是Linux容器</h3><p>Linux容器是与系统其他部分隔离开的一系列进程。它在另一个镜像中运行，并由该镜像提供支持进程所需的全部文件。容器提供的镜像包括了应用的所有依赖项，因此在开发到测试再到生产的过程中，容器都具有可移植性和一致性。</p><h3 id="容器等同于虚拟化吗">容器等同于虚拟化吗</h3><p>容器不完全是虚拟化。虚拟化使得许多系统可同时在单个系统上运行，而容器可共享同一个操作系统的内核，将应用进程与系统其他部分隔离开。</p><p>这便意味着，即使是让多个操作系统在单个虚拟机监控程序上运行以实现虚拟化，也不能达到和使用容器同等的轻量级效果。Linux容器可从单个操作系统运行，在所有容器中共享该操作系统，因此应用和服务能够保持轻量级，并可以快速运行。</p><h3 id="什么是docker">什么是Docker</h3><p>IT软件中所说的Docker，是指容器化技术，用于支持创建和使用Linux容器。借助Docker，可将容器当作重量轻、模块化的虚拟机使用，同时还将获得高度的灵活性，从而实现对容器的高效创建、部署及复制，并能将其从一个环境顺利迁移至另一个环境。</p><p>Docker技术使用Linux内核和内核功能来分隔进行，以便各进程相互独立运行。</p><h3 id="docker的目标">Docker的目标</h3><p>Docker的主要目标是构建、运输、处处运行（Build, Ship and Run any App, Angwhere）</p><p>构建：做一个Docker镜像</p><p>运输：Docker pull</p><p>运行：启动一个容器</p><p>每个容器都有自己的文件系统rootfs</p><h2 id="安装docker">安装Docker</h2><p>在Centos系统中，安装命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看当前的内核版本</span></span><br><span class="line">[root@localhost admin]<span class="comment"># uname -r</span></span><br><span class="line">3.10.0-1160.el7.x86_64</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看已安装的CentOS版本信息</span></span><br><span class="line">[root@localhost admin]<span class="comment"># cat /etc/redhat-release</span></span><br><span class="line">CentOS Linux release 7.9.2009 (Core)</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装需要的软件包，yum-util提供yum-config-manager功能，另两个是devicemapper驱动依赖</span></span><br><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置yun源，下面两个都可用</span></span><br><span class="line"><span class="comment">#（中央仓库）</span></span><br><span class="line">yum-config-manager --add-repo http://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"><span class="comment">#（阿里仓库）</span></span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看可用的Docker版本</span></span><br><span class="line">yum list docker-ce --showduplicates | <span class="built_in">sort</span> -r</span><br><span class="line"><span class="comment">#选择一个Docker版本并安装</span></span><br><span class="line">yum -y install docker-ce-18.03.1.ce</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动Docker并设置开机自启</span></span><br><span class="line">systemctl start docker</span><br><span class="line">systemctl <span class="built_in">enable</span> docker</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看Docker相关信息来验证是否正确安装了Docker</span></span><br><span class="line">docker version</span><br><span class="line"><span class="comment">#配置Docker镜像加速</span></span><br><span class="line">vim /etc/docker/daemon.json</span><br><span class="line">&#123;<span class="string">&quot;registry-mirrors&quot;</span>:[<span class="string">&quot;https://registry.docker-cn.com&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#启动第一个容器</span></span><br><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure><h2 id="hello-world">Hello World</h2><p>Docker允许在容器中运行应用程序，使用<code>docker run</code>命令来在容器中运行一个应用程序，输出Hello World如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># docker run ubuntu:15.10 /bin/echo &quot;Hello world&quot;</span></span><br><span class="line">Hello world</span><br><span class="line"><span class="comment">#其中ubuntu:15.10为所指定的要运行的镜像，Docker会首先从本地主机上查找镜像是否存在，若不存在，Dockwe就会从镜像仓库中下载公共镜像</span></span><br><span class="line"><span class="comment"># /bin/echo &quot;Hello world&quot;为在启动的容器里执行的命令</span></span><br></pre></td></tr></table></figure><h3 id="运行交互式的容器">运行交互式的容器</h3><p>通过Docker的两个参数<code>-i -t</code>，可以让Docker运行的容器实现交互式对话的能力：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># docker run -i -t ubuntu:15.10 /bin/bash</span></span><br><span class="line">root@7cf8cc6326f7:/<span class="comment">#</span></span><br><span class="line"><span class="comment">#此时已经进入了一个ubuntu:15.10系统的容器</span></span><br><span class="line"><span class="comment">#查看当前系统的版本信息</span></span><br><span class="line">root@7cf8cc6326f7:/<span class="comment"># cat /proc/version</span></span><br><span class="line">Linux version 3.10.0-1160.el7.x86_64 (mockbuild@kbuilder.bsys.centos.org) (gcc version 4.8.5 20150623 (Red Hat 4.8.5-44) (GCC) ) <span class="comment">#1 SMP Mon Oct 19 16:18:59 UTC 2020</span></span><br><span class="line"><span class="comment">#查看当前目录下的文件列表</span></span><br><span class="line">root@7cf8cc6326f7:/<span class="comment"># ls</span></span><br><span class="line">bin   dev  home  lib64  mnt  proc  run   srv  tmp  var</span><br><span class="line">boot  etc  lib   media  opt  root  sbin  sys  usr</span><br><span class="line"><span class="comment">#可以通过运行exit命令或使用Ctrl+D来退出容器</span></span><br><span class="line">root@7cf8cc6326f7:/<span class="comment"># exit</span></span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><h3 id="后台模式启动容器">后台模式启动容器</h3><p>使用以下命令可以创建一个以进程方式运行的容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># docker run -d ubuntu:15.10 /bin/sh -c &quot;while true; do echo hello world; sleep 1;done&quot;</span></span><br><span class="line"><span class="comment">#输出的长字符串为容器的ID</span></span><br><span class="line">a26fa474ed2743ad2413c5e9c828faafa141ab1ec11ba3ffaf424de658b785de</span><br></pre></td></tr></table></figure><p>容器ID对每个容器来说都是唯一的，可以通过容器ID来查看对应的容器发生了什么。</p><p>另外打开一个终端，用<code>docker ps</code>查看容器是否进行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">54539564169f        ubuntu:15.10        <span class="string">&quot;/bin/bash&quot;</span>         31 seconds ago      Up 30 seconds                           nostalgic_jennings</span><br><span class="line"></span><br><span class="line"><span class="comment">#CONTAINER ID 为容器ID</span></span><br><span class="line"><span class="comment">#IMAGE 为使用的镜像</span></span><br><span class="line"><span class="comment">#COMMAND 为启动容器时运行的命令</span></span><br><span class="line"><span class="comment">#CREATED 为容器的创建时间</span></span><br><span class="line"><span class="comment">#STATUS 为容器状态</span></span><br><span class="line"><span class="comment">#PORTS 为容器的端口信息和使用的连接类型(tcp\udp)</span></span><br><span class="line"><span class="comment">#NAMES 为自动分配的容器名称</span></span><br></pre></td></tr></table></figure><p>容器的状态有7种：</p><ul><li>created（已创建）</li><li>restarting（重启中）</li><li>running或Up（运行中）</li><li>removing（迁移中）</li><li>paused（暂停）</li><li>exited（停止）</li><li>dead（死亡）</li></ul><h3 id="停止容器">停止容器</h3><p>使用<code>docker stop</code>命令可以使容器停止：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop 需要停止的容器ID</span><br></pre></td></tr></table></figure><h2 id="docker镜像管理">Docker镜像管理</h2><h3 id="docker镜像常用命令">Docker镜像常用命令</h3><p><strong>根据镜像名称获取镜像centos：</strong><code>docker pull centos</code></p><p><strong>查看当前主机镜像列表：</strong><code>docker image list</code></p><p><strong>查找镜像：</strong><code>docker search 镜像名</code></p><p><strong>导入镜像（docker-centos.tar.gz为镜像名）：</strong><code>docker image load -i docker-centos.tar.gz</code></p><p><strong>导出镜像centos：</strong><code>docker image save centos &gt; docker-centos.tar.gz</code></p><p><strong>删除镜像hello-world：</strong><code>docker rmi hello-world</code></p><p><strong>删除镜像centos：</strong><code>docker image rm centos:latest</code></p><p><strong>更新镜像</strong>：<code>docker run -t -i ubuntu:15.10 /bin/bash</code></p><p><strong>查看镜像的详细信息：</strong><code>docker image inspect centos</code></p><h3 id="使用dockerfile构建镜像">使用Dockerfile构建镜像</h3><p>当从docker镜像仓库中下载的镜像不能满足需求时，可以通过以下两种方式对镜像进行更改：</p><ul><li>从已经创建的容器中更新镜像，并提交这个镜像</li><li>使用Dockerfile命令来创建一个新的镜像</li></ul><p>首先，使用命令docker build 从零开始创建一个新的镜像，为此需要创建一个Dockerfile文件，其中包含一组指令来告诉Docker如何构建镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># touch Dockerfile</span></span><br><span class="line">[root@localhost admin]<span class="comment"># vim Dockerfile</span></span><br><span class="line">FROM    centos:6.7</span><br><span class="line">MAINTAINER      Fisher <span class="string">&quot;fisher@sudops.com&quot;</span></span><br><span class="line"></span><br><span class="line">RUN     /bin/echo <span class="string">&#x27;root:123456&#x27;</span> |chpasswd</span><br><span class="line">RUN     useradd runoob</span><br><span class="line">RUN     /bin/echo <span class="string">&#x27;runoob:123456&#x27;</span> |chpasswd</span><br><span class="line">RUN     /bin/echo -e <span class="string">&quot;LANG=\&quot;en_US.UTF-8\&quot;&quot;</span> &gt;/etc/default/local</span><br><span class="line">EXPOSE  22</span><br><span class="line">EXPOSE  80</span><br><span class="line">CMD     /usr/sbin/sshd -D</span><br></pre></td></tr></table></figure><p>每一个指令都会在镜像上创建一个新的层，每一个指令的前缀都必须是大写的。</p><p>dockerfile 命令详情如下：</p><ul><li><p>FROM：镜像从那里来</p></li><li><p>MAINTAINER：镜像维护者信息</p></li><li><p>RUN：构建镜像执行的命令，每一次RUN都会构建一层</p></li><li><p>CMD：容器启动的命令，如果有多个则以最后一个为准，也可以为ENTRYPOINT提供参数</p></li><li><p>VOLUME：定义数据卷，如果没有定义则使用默认</p></li><li><p>USER：指定后续执行的用户组和用户</p></li><li><p>WORKDIR：切换当前执行的工作目录</p></li><li><p>HEALTHCHECH：健康检测指令</p></li><li><p>ARG：变量属性值，但不在容器内部起作用</p></li><li><p>EXPOSE：暴露端口</p></li><li><p>ENV：变量属性值，容器内部也会起作用</p></li><li><p>ADD：添加文件，如果是压缩文件也解压</p></li><li><p>COPY：添加文件，以复制的形式</p></li><li><p>ENTRYPOINT：容器进入时执行的命令</p></li></ul><p>其中，FROM指令指定只用哪个镜像源，RUN指令告诉docker在镜像内执行命令安装了什么。然后便可以使用Dockerfile 文件通过docker build 命令来构建一个镜像。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># docker build -t runoob/centos:6.7 .</span></span><br><span class="line">Sending build context to Docker daemon  205.8MB</span><br><span class="line">Step 1/9 : FROM    centos:6.7</span><br><span class="line">6.7: Pulling from library/centos</span><br><span class="line">cbddbc0189a0: Pull complete </span><br><span class="line">Digest: sha256:4c952fc7d30ed134109c769387313ab864711d1bd8b4660017f9d27243622df1</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> centos:6.7</span><br><span class="line"> ---&gt; 9f1de3c6ad53</span><br><span class="line">Step 2/9 : MAINTAINER      Fisher <span class="string">&quot;fisher@sudops.com&quot;</span></span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> 5eaef1ca03a8</span><br><span class="line">Removing intermediate container 5eaef1ca03a8</span><br><span class="line"> ---&gt; fb3340e270e3</span><br><span class="line">...</span><br><span class="line">Step 9/9 : CMD     /usr/sbin/sshd -D</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> 5856113fd1c1</span><br><span class="line">Removing intermediate container 5856113fd1c1</span><br><span class="line"> ---&gt; 461a6483b47b</span><br><span class="line">Successfully built 461a6483b47b</span><br><span class="line">Successfully tagged runoob/centos:6.7</span><br><span class="line"></span><br><span class="line"><span class="comment">#其中参数-t为指定要创建的目标镜像名</span></span><br><span class="line"><span class="comment">#参数.为Dockerfile文件所在目录，也可以指定Dockerfile的绝对路径</span></span><br></pre></td></tr></table></figure><p>查看创建的镜像runoob/centos 是否已经存在：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">runoob/centos       6.7                 461a6483b47b        12 minutes ago      191MB</span><br><span class="line">nginx               latest              88736fe82739        2 weeks ago         142MB</span><br><span class="line">ubuntu              latest              a8780b506fa4        4 weeks ago         77.8MB</span><br><span class="line">hello-world         latest              feb5d9fea6a5        14 months ago       13.3kB</span><br><span class="line">centos              latest              5d0da3dc9764        14 months ago       231MB</span><br><span class="line">centos              6.7                 9f1de3c6ad53        3 years ago         191MB</span><br><span class="line">ubuntu              15.10               9b9cb95443b5        6 years ago         137MB</span><br><span class="line">training/webapp     latest              6fae60ef3446        7 years ago         349MB</span><br></pre></td></tr></table></figure><p>现在可以使用新的镜像来创建容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># docker run -t -i runoob/centos:6.7 /bin/bash</span></span><br><span class="line">[root@c256ace5a3db /]<span class="comment"># id runoob</span></span><br><span class="line">uid=500(runoob) gid=500(runoob) <span class="built_in">groups</span>=500(runoob)</span><br></pre></td></tr></table></figure><p>可以看到新镜像已经包含创建的用户runoob。</p><h3 id="设置镜像标签">设置镜像标签</h3><p>使用docker tag 命令可以为镜像添加一个新的标签：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">root@localhost admin]<span class="comment"># docker tag 461a6483b47b runoob/centos:dev</span></span><br><span class="line">[root@localhost admin]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">runoob/centos       6.7                 461a6483b47b        21 minutes ago      191MB</span><br><span class="line">runoob/centos       dev                 461a6483b47b        21 minutes ago      191MB</span><br><span class="line">nginx               latest              88736fe82739        2 weeks ago         142MB</span><br><span class="line">ubuntu              latest              a8780b506fa4        4 weeks ago         77.8MB</span><br><span class="line">hello-world         latest              feb5d9fea6a5        14 months ago       13.3kB</span><br><span class="line">centos              latest              5d0da3dc9764        14 months ago       231MB</span><br><span class="line">centos              6.7                 9f1de3c6ad53        3 years ago         191MB</span><br><span class="line">ubuntu              15.10               9b9cb95443b5        6 years ago         137MB</span><br><span class="line">training/webapp     latest              6fae60ef3446        7 years ago         349MB</span><br></pre></td></tr></table></figure><h2 id="容器的日常管理">容器的日常管理</h2><h3 id="启动容器">启动容器</h3><p>最简单的运行一个容器：<code>docker run nginx</code></p><p>使用ubuntu镜像启动一个容器，参数以命令行模式进入该容器：<code>docker run -it ubuntu /bin/bash</code>（<code>-it</code>是指交互式终端）</p><p>快速启动容器：<code>docker run  centos:latest  /usr/bin/sleep 20</code></p><p><strong>注意：容器内的第一个进程必须一直处于运行的状态，否则这个容器，就会处于退出状态！</strong></p><p>查看正在运行的容器：<code>docker container ls</code></p><p>查看容器详细信息/id：<code>docker container  inspect  容器名称/id</code></p><h3 id="启动已停止运行的容器">启动已停止运行的容器</h3><p>查看所有容器（包括未运行的）：<code>docker ps -a</code></p><p>启动一个已停止运行的容器：<code>docker start 容器名称/id</code></p><p>自命名启动一个容器：<code>docker run --name ubuntu-test ubuntu /bin/bash</code></p><p>让ubuntu-test容器在后台运行：<code>docker run -itd --name ubuntu-test ubuntu /bin/bash</code></p><p>停止容器:<code>docker stop 容器名称/id</code>或者<code>docker container kill 容器名称/id</code></p><p>重启停止的容器：<code>docker restart 容器名称/id</code></p><h3 id="进入容器">进入容器</h3><p>在使用<code>-d</code>参数时，容器启动后会进入后台。此时想要进入容器，可以通过以下指令进入：</p><ul><li><code>docker attach 容器名称/id</code> ：此命令会退出容器终端，且会导致容器停止</li><li><code>docker exec -it 容器名称/id /bin/bash</code>：（推荐使用此命令，此命令会退出容器终端，但不会导致容器的停止）</li></ul><h3 id="导入容器快照">导入容器快照</h3><p>可以使用docker import 从容器快照文件中再导入为镜像，如将快照文件ubuntu.tar导入到镜像test/ubuntu:v1中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> docker /ubuntu.tar | docker import - <span class="built_in">test</span>/ubuntu:v1</span><br></pre></td></tr></table></figure><p>也可以通过指定URL或某个目录来导入，如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker import http://example.com/exampleimage.tag example/imagerepo</span><br></pre></td></tr></table></figure><h3 id="删除容器">删除容器</h3><p>使用docker rm 命令可删除容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">rm</span> -f 容器名称/id</span><br></pre></td></tr></table></figure><p>清理掉所有处于终止状态的容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container prune</span><br></pre></td></tr></table></figure><p>删除所有容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">rm</span> -f `docker ps -a -q`</span><br></pre></td></tr></table></figure><h3 id="使用docker构建一个web应用程序">使用docker构建一个web应用程序</h3><p>在dockers容器中运行一个Python Flask应用来运行一个web应用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># docker pull training/webapp</span></span><br><span class="line">[root@localhost admin]<span class="comment"># docker run -d -P training/webapp python app.py</span></span><br><span class="line">8294ae65cc7397df396f1846582d2c55896646996eab41a26f9be0c01f3270f8</span><br><span class="line"></span><br><span class="line"><span class="comment">#-d:让容器在后台运行</span></span><br><span class="line"><span class="comment">#-P:将容器内部使用的网络端口随机映射到使用的主机上</span></span><br></pre></td></tr></table></figure><p>不同指定的映射方法：</p><table><thead><tr class="header"><th style="text-align: left;">参数</th><th style="text-align: left;">说明</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;"><code>-p hostPort:containerPort</code></td><td style="text-align: left;">端口映射 -p 8080:80</td></tr><tr class="even"><td style="text-align: left;"><code>-p ip:hostPort:containerPort</code></td><td style="text-align: left;">配置监听地址 -p 10.0.0.100:8080:80</td></tr><tr class="odd"><td style="text-align: left;"><code>-p ip::containerPort</code></td><td style="text-align: left;">随机分配端口 -p 10.0.0.100::80</td></tr><tr class="even"><td style="text-align: left;"><code>-p hostPort:containerPort:udp</code></td><td style="text-align: left;">指定协议 -p 8080:80:tcp</td></tr><tr class="odd"><td style="text-align: left;"><code>-p 81:80 –p 443:443</code></td><td style="text-align: left;">指定多个</td></tr></tbody></table><p>此时使用docker ps来查看正在运行的容器，会发现多了端口信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                     NAMES</span><br><span class="line">8294ae65cc73        training/webapp     <span class="string">&quot;python app.py&quot;</span>     49 seconds ago      Up 47 seconds       0.0.0.0:32768-&gt;5000/tcp   hardcore_brown</span><br></pre></td></tr></table></figure><p>从端口信息中可知，Docker开放了5000端口（默认Python Flask端口）映射到主机端口32768上，此时可以通过浏览器访问WEB应用：(路径为主机ip:32768端口)</p><p><img src="/2022/12/06/Docker%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2%E5%9F%BA%E7%A1%80/1.png"></p><p>可以通过参数<code>-p</code>来设置不一样的端口，如将容器内部的5000端口映射到本地主机的5000端口上：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost admin]# docker run -d -p 5000:5000 training/webapp python app.py</span><br><span class="line">743a62b49b70f9575690e2b85d4ea1eed94dd19fe9f6074f1d7069d977a2ecc8</span><br><span class="line">[root@localhost admin]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                     NAMES</span><br><span class="line">743a62b49b70        training/webapp     &quot;python app.py&quot;     22 seconds ago      Up 21 seconds       0.0.0.0:5000-&gt;5000/tcp    infallible_allen</span><br><span class="line">8294ae65cc73        training/webapp     &quot;python app.py&quot;     10 minutes ago      Up 10 minutes       0.0.0.0:32768-&gt;5000/tcp   hardcore_brown</span><br></pre></td></tr></table></figure><h3 id="网络端口的快捷方式">网络端口的快捷方式</h3><p>使用docker port 可以查看指定（ID或名字）容器的某个确定端口映射到宿主机的端口号。</p><p>查看容器端口情况可用：<code>docker port 容器名称/id</code>，如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># docker port 743a62b49b70</span></span><br><span class="line">5000/tcp -&gt; 0.0.0.0:5000</span><br><span class="line">[root@localhost admin]<span class="comment"># docker port infallible_allen</span></span><br><span class="line">5000/tcp -&gt; 0.0.0.0:5000</span><br></pre></td></tr></table></figure><h3 id="查看web应用程序日志">查看WEB应用程序日志</h3><p>查看容器内部的标准输出，可以查看端口信息和应用程序的访问日志：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># docker logs -f 743a62b49b70</span></span><br><span class="line"> * Running on http://0.0.0.0:5000/ (Press CTRL+C to quit)</span><br><span class="line">192.168.18.129 - - [06/Dec/2022 01:43:49] <span class="string">&quot;GET / HTTP/1.1&quot;</span> 200 -</span><br><span class="line">192.168.18.129 - - [06/Dec/2022 01:43:49] <span class="string">&quot;GET /favicon.ico HTTP/1.1&quot;</span> 404 -</span><br></pre></td></tr></table></figure><h3 id="检查web应用程序">检查WEB应用程序</h3><p>使用docker inspect来查看Docker的底层信息，它会返回一个JSON文件记录着Docker容器的配置和状态信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># docker inspect 743a62b49b70</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;Id&quot;</span>: <span class="string">&quot;743a62b49b70f9575690e2b85d4ea1eed94dd19fe9f6074f1d7069d977a2ecc8&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Created&quot;</span>: <span class="string">&quot;2022-12-06T01:42:44.255608149Z&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Path&quot;</span>: <span class="string">&quot;python&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Args&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;app.py&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;State&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Status&quot;</span>: <span class="string">&quot;running&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Running&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">&quot;Paused&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;Restarting&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;OOMKilled&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;Dead&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;Pid&quot;</span>: 17733,</span><br><span class="line">            <span class="string">&quot;ExitCode&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;Error&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;StartedAt&quot;</span>: <span class="string">&quot;2022-12-06T01:42:45.331479678Z&quot;</span>,</span><br><span class="line">            <span class="string">&quot;FinishedAt&quot;</span>: <span class="string">&quot;0001-01-01T00:00:00Z&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        ......</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="停止web应用容器">停止WEB应用容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># docker stop 743a62b49b70</span></span><br><span class="line">743a62b49b70</span><br></pre></td></tr></table></figure><h3 id="重启web应用容器">重启WEB应用容器</h3><p>已经停止的容器可以使用命令docker start来启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># docker start 743a62b49b70</span></span><br><span class="line">743a62b49b70</span><br><span class="line">[root@localhost admin]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                     NAMES</span><br><span class="line">743a62b49b70        training/webapp     <span class="string">&quot;python app.py&quot;</span>     14 minutes ago      Up 14 seconds       0.0.0.0:5000-&gt;5000/tcp    infallible_allen</span><br><span class="line">8294ae65cc73        training/webapp     <span class="string">&quot;python app.py&quot;</span>     24 minutes ago      Up 24 minutes       0.0.0.0:32768-&gt;5000/tcp   hardcore_brown</span><br></pre></td></tr></table></figure><h3 id="移除web应用容器">移除WEB应用容器</h3><p>使用docker rm 命令来删除不需要的容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#删除容器时，容器必须是停止状态，否则会报以下错误</span></span><br><span class="line">[root@localhost admin]<span class="comment"># docker rm 743a62b49b70</span></span><br><span class="line">Error response from daemon: You cannot remove a running container 743a62b49b70f9575690e2b85d4ea1eed94dd19fe9f6074f1d7069d977a2ecc8. Stop the container before attempting removal or force remove</span><br><span class="line"></span><br><span class="line">t@localhost admin]<span class="comment"># docker stop 743a62b49b70</span></span><br><span class="line">743a62b49b70</span><br><span class="line">[root@localhost admin]<span class="comment"># docker rm 743a62b49b70</span></span><br><span class="line">743a62b49b70</span><br><span class="line">[root@localhost admin]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                     NAMES</span><br><span class="line">8294ae65cc73        training/webapp     <span class="string">&quot;python app.py&quot;</span>     26 minutes ago      Up 26 minutes       0.0.0.0:32768-&gt;5000/tcp   hardcore_brown</span><br></pre></td></tr></table></figure><h2 id="docker数据卷的管理">Docker数据卷的管理</h2><h3 id="挂载时创建卷">挂载时创建卷</h3><p>挂载卷：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># docker run -d -p 80:80 -v /data:/usr/share/nginx/html nginx:latest</span></span><br><span class="line">5f2530020849d15287b8bfd4dd2274945c0fd07078ab281a17e47bf2243ea113</span><br><span class="line"></span><br><span class="line"><span class="comment">#/usr/share/nginx/html为容器内站点目录</span></span><br></pre></td></tr></table></figure><p>在宿主机写入数据，查看：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># echo &quot;http://www.nmtui.com&quot; &gt;/data/index.html</span></span><br><span class="line">[root@localhost admin]<span class="comment"># curl 192.168.18.129</span></span><br><span class="line">http://www.nmtui.com</span><br><span class="line"></span><br><span class="line"><span class="comment">#192.168.18.129为宿主机的ip地址</span></span><br></pre></td></tr></table></figure><p>设置共享卷，使用同一个卷启动一个新的容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># docker run -d -p 8080:80 -v /data:/usr/share/nginx/html nginx:latest</span></span><br><span class="line">ad8ef6db5021d356f6b56a62d6aaa584ad8be7b8c8cac73cc7bd08369acf41d4</span><br><span class="line">[root@localhost admin]<span class="comment"># curl 192.168.18.129:8080</span></span><br><span class="line">http://www.nmtui.com</span><br></pre></td></tr></table></figure><p>查看卷列表：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># docker volume ls</span></span><br><span class="line">DRIVER              VOLUME NAME</span><br></pre></td></tr></table></figure><h3 id="创建卷后挂载">创建卷后挂载</h3><p>创建一个卷：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># docker volume create</span></span><br><span class="line">8bbaf77b6495bbc8e50e75dfbd945badc0fdd2d2aced2359dc8d97308fa08d92</span><br><span class="line">[root@localhost admin]<span class="comment"># docker volume ls</span></span><br><span class="line">DRIVER              VOLUME NAME</span><br><span class="line"><span class="built_in">local</span>               8bbaf77b6495bbc8e50e75dfbd945badc0fdd2d2aced2359dc8d97308fa08d92</span><br></pre></td></tr></table></figure><p>指定卷名：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># docker volume create --name clsn</span></span><br><span class="line">clsn</span><br><span class="line">[root@localhost admin]<span class="comment"># docker volume ls</span></span><br><span class="line">DRIVER              VOLUME NAME</span><br><span class="line"><span class="built_in">local</span>               8bbaf77b6495bbc8e50e75dfbd945badc0fdd2d2aced2359dc8d97308fa08d92</span><br><span class="line"><span class="built_in">local</span>               clsn</span><br></pre></td></tr></table></figure><p>查看卷路径：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># docker volume inspect clsn</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;CreatedAt&quot;</span>: <span class="string">&quot;2022-12-06T00:50:33-08:00&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;local&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Labels&quot;</span>: &#123;&#125;,</span><br><span class="line">        <span class="string">&quot;Mountpoint&quot;</span>: <span class="string">&quot;/var/lib/docker/volumes/clsn/_data&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;clsn&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Options&quot;</span>: &#123;&#125;,</span><br><span class="line">        <span class="string">&quot;Scope&quot;</span>: <span class="string">&quot;local&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用卷创建：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># docker run -d -p 9000:80 -v clsn:/usr/share/nginx/html nginx:latest</span></span><br><span class="line">3d4e986ad050c199740ec6a2a4f38d0ba54ad78715cb72d21df396e0774f705f</span><br><span class="line"><span class="comment">#宿主机测试</span></span><br><span class="line">[root@localhost admin]<span class="comment"># echo &#x27;blog.nmtui.com&#x27; &gt;/var/lib/docker/volumes/clsn/_data/index.html</span></span><br><span class="line">[root@localhost admin]<span class="comment"># curl 192.168.18.129:9000</span></span><br><span class="line">blog.nmtui.com</span><br></pre></td></tr></table></figure><p>设置卷：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># docker run -d -P --volumes-from 5f2530020849d15287b8bfd4dd2274945c0fd07078ab281a17e47bf2243ea113 nginx:latest</span></span><br><span class="line">5e9a1d7ea93ea7b7fb2d6918cf1cc8805aff41daa21b7e7656be1a14b2662e94</span><br></pre></td></tr></table></figure><p>查看使用的端口：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># netstat -lntup</span></span><br><span class="line">Active Internet connections (only servers)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    </span><br><span class="line">tcp        0      0 0.0.0.0:111             0.0.0.0:*               LISTEN      595/rpcbind         </span><br><span class="line">tcp        0      0 192.168.122.1:53        0.0.0.0:*               LISTEN      1320/dnsmasq        </span><br><span class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      1074/sshd           </span><br><span class="line">tcp        0      0 127.0.0.1:631           0.0.0.0:*               LISTEN      1069/cupsd          </span><br><span class="line">tcp        0      0 127.0.0.1:25            0.0.0.0:*               LISTEN      1352/master         </span><br><span class="line">tcp6       0      0 :::9000                 :::*                    LISTEN      4270/docker-proxy   </span><br><span class="line">tcp6       0      0 :::111                  :::*                    LISTEN      595/rpcbind         </span><br><span class="line">tcp6       0      0 :::8080                 :::*                    LISTEN      3992/docker-proxy   </span><br><span class="line">tcp6       0      0 :::80                   :::*                    LISTEN      3794/docker-proxy   </span><br><span class="line">tcp6       0      0 :::22                   :::*                    LISTEN      1074/sshd           </span><br><span class="line">tcp6       0      0 ::1:631                 :::*                    LISTEN      1069/cupsd          </span><br><span class="line">tcp6       0      0 ::1:25                  :::*                    LISTEN      1352/master         </span><br><span class="line">tcp6       0      0 :::32768                :::*                    LISTEN      4388/docker-proxy   </span><br><span class="line">[root@localhost admin]<span class="comment"># curl 192.168.18.129:32768</span></span><br><span class="line">http://www.nmtui.com</span><br></pre></td></tr></table></figure><h3 id="手动将容器保存为镜像">手动将容器保存为镜像</h3><p>启动一个centos6.8的镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># docker pull centos:6.8</span></span><br><span class="line">[root@localhost admin]<span class="comment"># docker run -it -p 1022:22 centos:6.8 /bin/bash</span></span><br><span class="line"><span class="comment">#在容器中安装sshd服务并修改系统密码</span></span><br><span class="line">[root@4d61bc1e379d /]<span class="comment"># yum install openssh-server -y</span></span><br><span class="line">[root@4d61bc1e379d yum.repos.d]<span class="comment"># echo &quot;root:123456&quot; |chpasswd</span></span><br><span class="line">[root@4d61bc1e379d yum.repos.d]<span class="comment"># /etc/init.d/sshd start</span></span><br><span class="line">Generating SSH2 RSA host key:                              [  OK  ]</span><br><span class="line">Generating SSH1 RSA host key:                              [  OK  ]</span><br><span class="line">Generating SSH2 DSA host key:                              [  OK  ]</span><br><span class="line">Starting sshd:                                             [  OK  ]</span><br></pre></td></tr></table></figure><p>启动完成后镜像进行ssh连接测试。</p><p>将容器提交为镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># docker commit 4d61bc1e379d centos6-ssh</span></span><br><span class="line">sha256:9591270dae2dda5a96c94c47e291aae0eeab7599ada3cdf44701c4dfd72e8cee</span><br></pre></td></tr></table></figure><p>使用新的镜像启动容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># docker run -d -p 1122:22 centos6-ssh:latest /usr/sbin/sshd -D</span></span><br><span class="line">0019e8bb73550eec2526a101a19814ec92dfb045dd2fdca4d36175005e63ba20</span><br><span class="line">[root@localhost admin]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID        IMAGE                COMMAND                  CREATED             STATUS              PORTS                   NAMES</span><br><span class="line">0019e8bb7355        centos6-ssh:latest   <span class="string">&quot;/usr/sbin/sshd -D&quot;</span>      30 seconds ago      Up 28 seconds       0.0.0.0:1122-&gt;22/tcp    blissful_albattani</span><br><span class="line">5e9a1d7ea93e        nginx:latest         <span class="string">&quot;/docker-entrypoint.…&quot;</span>   2 hours ago         Up 2 hours          0.0.0.0:32768-&gt;80/tcp   xenodochial_kare</span><br><span class="line">3d4e986ad050        nginx:latest         <span class="string">&quot;/docker-entrypoint.…&quot;</span>   2 hours ago         Up 2 hours          0.0.0.0:9000-&gt;80/tcp    vibrant_bhabha</span><br><span class="line">ad8ef6db5021        nginx:latest         <span class="string">&quot;/docker-entrypoint.…&quot;</span>   2 hours ago         Up 2 hours          0.0.0.0:8080-&gt;80/tcp    awesome_jang</span><br><span class="line">5f2530020849        nginx:latest         <span class="string">&quot;/docker-entrypoint.…&quot;</span>   2 hours ago         Up 2 hours          0.0.0.0:80-&gt;80/tcp      pensive_lumiere</span><br><span class="line">76cf3b4dce49        ubuntu               <span class="string">&quot;/bin/bash&quot;</span>              8 hours ago         Up 2 hours                                  test2</span><br><span class="line">58bbd5afb8bf        ubuntu               <span class="string">&quot;/bin/bash&quot;</span>              8 hours ago         Up 2 hours                                  test1</span><br></pre></td></tr></table></figure><p>进入到容器内，在容器里安装httpd服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># docker exec -it 0019e8bb7355 /bin/bash</span></span><br><span class="line">[root@0019e8bb7355 /]<span class="comment"># yum install https -y</span></span><br></pre></td></tr></table></figure><p>编写启动脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@0019e8bb7355 /]<span class="comment"># touch init.sh</span></span><br><span class="line">[root@0019e8bb7355 /]<span class="comment"># vi init.sh</span></span><br><span class="line"><span class="comment">#!/bin/bash </span></span><br><span class="line">/etc/init.d/httpd start </span><br><span class="line">/usr/sbin/sshd -D</span><br><span class="line">[root@0019e8bb7355 /]<span class="comment"># chmod +x init.sh</span></span><br></pre></td></tr></table></figure><p>再次提交为新的镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># docker commit 0019e8bb7355 centos6-httpd</span></span><br><span class="line">sha256:bd9f5c339cd8494f82b8cb06396446143824f819c59c9b971687f6a9193c718a</span><br></pre></td></tr></table></figure><p>启动镜像，做好端口映射。并在浏览器中输入宿主机的ip地址进行测试访问：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># docker run -d -p 1222:22 -p 88:88 centos6-httpd /init.sh</span></span><br><span class="line">ecbc482a781975538e7c83763fb1573af811a5baf2bc7c93de176ebd5576f407</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2022/12/06/Docker%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2%E5%9F%BA%E7%A1%80/2.png"></p><h2 id="docker容器连接">Docker容器连接</h2><p>容器中可以运行一些网络应用，要让外部也可以访问这些应用，可以通过<code>-p</code>或<code>-P</code>参数来指定端口映射。下面来实现通过端口连接到一个docker容器。</p><h3 id="网络端口映射">网络端口映射</h3><p>使用-P绑定端口号后，使用docker ps可以看到容器端口5000绑定主机端口32770</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># docker run -d -p 32770:5000 training/webapp python app.py</span></span><br><span class="line">14a465d810df4e782f84c4e1ade99fd56f5e237c3de80d8f0c77dc7c3e642696</span><br><span class="line">[root@localhost admin]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                     NAMES</span><br><span class="line">14a465d810df        training/webapp     <span class="string">&quot;python app.py&quot;</span>     13 seconds ago      Up 12 seconds       0.0.0.0:32770-&gt;5000/tcp   angry_bassi</span><br></pre></td></tr></table></figure><p>此外，还可以指定容器绑定的网络地址，如绑定127.0.0.1。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># docker run -d -p 127.0.0.1:5001:5000 training/webapp python app.py</span></span><br><span class="line">6124b2108719c7e18b8b35992a06b3f66036ad0b951744bcfc1ca17158c2b6e3</span><br><span class="line">[root@localhost admin]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                      NAMES</span><br><span class="line">6124b2108719        training/webapp     <span class="string">&quot;python app.py&quot;</span>     6 seconds ago       Up 4 seconds        127.0.0.1:5001-&gt;5000/tcp   keen_sammet</span><br><span class="line">998f4a68770c        training/webapp     <span class="string">&quot;python app.py&quot;</span>     4 minutes ago       Up 4 minutes        0.0.0.0:32770-&gt;5000/tcp    angry_bassi</span><br></pre></td></tr></table></figure><p>这样便可以通过访问127.0.0.1:5001来访问容器的5000端口。这里默认都是绑定tcp端口，<strong>若要绑定UDP端口，则需要在端口后面加上/udp。</strong></p><h3 id="docker容器互联">Docker容器互联</h3><p>端口映射并不是唯一把docker连接到另一个容器的方法。docker有一个连接系统允许将多个容器连接在一起，共享连接信息。docker连接会创建一个父子关系，其中父容器可以看到子容器的信息。</p><h4 id="容器命名">容器命名</h4><p>当要创建一个容器时，docker会自动对他进行命名，此外也可以使用--name标识来命名容器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># docker run -d -P --name runoob training/webapp python app.py</span></span><br><span class="line">561d0028ee9aafe9d014340ad8cecbaf7f5e395f05432e3bd149c797e5dd5f13</span><br><span class="line">[root@localhost admin]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                      NAMES</span><br><span class="line">561d0028ee9a        training/webapp     <span class="string">&quot;python app.py&quot;</span>     5 seconds ago       Up 4 seconds        0.0.0.0:32771-&gt;5000/tcp    runoob</span><br></pre></td></tr></table></figure><h4 id="link参数连接容器"><code>--link参数</code>连接容器</h4><p>使用<code>--link</code>参数可以让容器之间安全的进行交互。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建一个新的数据库容器</span></span><br><span class="line">[root@localhost admin]<span class="comment"># docker run -d --name db training/postgres</span></span><br><span class="line">Unable to find image <span class="string">&#x27;training/postgres:latest&#x27;</span> locally</span><br><span class="line">latest: Pulling from training/postgres</span><br><span class="line">a3ed95caeb02: Pull complete </span><br><span class="line">6e71c809542e: Pull complete </span><br><span class="line">2978d9af87ba: Pull complete </span><br><span class="line">e1bca35b062f: Pull complete </span><br><span class="line">500b6decf741: Pull complete </span><br><span class="line">74b14ef2151f: Pull complete </span><br><span class="line">7afd5ed3826e: Pull complete </span><br><span class="line">3c69bb244f5e: Pull complete </span><br><span class="line">d86f9ec5aedf: Pull complete </span><br><span class="line">010fabf20157: Pull complete </span><br><span class="line">Digest: sha256:a945dc6dcfbc8d009c3d972931608344b76c2870ce796da00a827bd50791907e</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> training/postgres:latest</span><br><span class="line">ef6af7333f0af9302cc6935d48be863ba2db0fdb2c56eacf42c074aa62982b12</span><br><span class="line"><span class="comment">#然后创建一个新的web容器，并将他连接到db容器</span></span><br><span class="line">[root@localhost admin]<span class="comment"># docker run -d -P --name web --link db:db training/webapp python app.py</span></span><br><span class="line">62888e6365e6551d2ceb6a6ddf7afcd39e861119f97b691b5116dba8e250e444</span><br><span class="line">[root@localhost admin]<span class="comment"># </span></span><br></pre></td></tr></table></figure><p>此时db容器和web容器建立了互联关系。</p><p><code>--link</code>参数的格式为<code>--link name:alias</code>,其中<code>name</code>是要链接的容器的名称，<code>alias</code>是这个连接的别名。</p><p>此时使用<code>docker ps</code>来查看容器的连接：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                     NAMES</span><br><span class="line">62888e6365e6        training/webapp     <span class="string">&quot;python app.py&quot;</span>          4 minutes ago       Up 4 minutes        0.0.0.0:32769-&gt;5000/tcp   web</span><br><span class="line">ef6af7333f0a        training/postgres   <span class="string">&quot;su postgres -c &#x27;/us…&quot;</span>   7 minutes ago       Up 7 minutes        5432/tcp                  db</span><br></pre></td></tr></table></figure><p>Docker在两个互联的容器之间创建了一个安全隧道，而且不用映射他们的端口到宿主主机上、在启动db容器的时候并没有使用<code>-p</code>和<code>-P</code>标记，从而避免了暴露数据库端口到外部网络上的可能。</p><p>Docker通过2种方式为容器公开连接信息：</p><ul><li>环境变量</li><li>更新<code>/etc/hosts</code>文件</li></ul><p>使用<code>env</code>命令来查看web容器的环境变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># docker run --rm --name web2 --link db:db training/webapp env</span></span><br><span class="line">PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin</span><br><span class="line">HOSTNAME=1621d6dd6804</span><br><span class="line">DB_PORT=tcp://172.17.0.2:5432</span><br><span class="line">DB_PORT_5432_TCP=tcp://172.17.0.2:5432</span><br><span class="line">DB_PORT_5432_TCP_ADDR=172.17.0.2</span><br><span class="line">DB_PORT_5432_TCP_PORT=5432</span><br><span class="line">DB_PORT_5432_TCP_PROTO=tcp</span><br><span class="line">DB_NAME=/web2/db</span><br><span class="line">DB_ENV_PG_VERSION=9.3</span><br><span class="line">HOME=/root</span><br><span class="line"></span><br><span class="line"><span class="comment">#DB_开头的环境变量是供web容器连接db容器使用，前缀采用大写的连接别名</span></span><br></pre></td></tr></table></figure><p>除了环境变量，Docker还添加host信息到父容器的<code>/etc/hosts</code>的文件。下面是父容器web的hosts文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># docker run -t -i --rm --link db:db training/webapp /bin/bash</span></span><br><span class="line">root@5f57b7dcc730:/opt/webapp<span class="comment"># cat /etc/hosts</span></span><br><span class="line">127.0.0.1localhost</span><br><span class="line">::1localhost ip6-localhost ip6-loopback</span><br><span class="line">fe00::0ip6-localnet</span><br><span class="line">ff00::0ip6-mcastprefix</span><br><span class="line">ff02::1ip6-allnodes</span><br><span class="line">ff02::2ip6-allrouters</span><br><span class="line">172.17.0.2db ef6af7333f0a</span><br><span class="line">172.17.0.45f57b7dcc730</span><br><span class="line"></span><br><span class="line"><span class="comment">#这里有2个host，第一个是web容器，web容器用id作为它的主机名。第二个是db容器的ip和主机名</span></span><br></pre></td></tr></table></figure><p>在web容器中安装ping命令来测试是否跟db容器的连通：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@5f57b7dcc730:/opt/webapp<span class="comment"># apt-get install -yqq inetutils-ping</span></span><br><span class="line">root@5f57b7dcc730:/opt/webapp<span class="comment"># ping db</span></span><br><span class="line">PING db (172.17.0.2): 56 data bytes</span><br><span class="line">64 bytes from 172.17.0.2: icmp_seq=0 ttl=64 time=0.740 ms</span><br><span class="line">64 bytes from 172.17.0.2: icmp_seq=1 ttl=64 time=0.089 ms</span><br><span class="line">64 bytes from 172.17.0.2: icmp_seq=2 ttl=64 time=0.075 ms</span><br></pre></td></tr></table></figure><p>用ping来测试db容器，它会解析成172.17.0.2。</p><p>注意：官方的Ubuntu镜像默认没有安装ping，因此需要自行安装。</p><p>用户可以链接多个父容器到子容器，比如可以链接多个web到db容器上。</p><h4 id="通过局域网络连接容器">通过局域网络连接容器</h4><p>由于 centos-ssh镜像已失效，因此，上述步骤更新为如下：</p><ul><li><p>创建名为t-net的网络</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># docker network create -d bridge t-net </span></span><br><span class="line"><span class="comment">#其中-d表示网络类型，默认为bridge</span></span><br><span class="line"><span class="comment"># 列出当前主机下所有网络</span></span><br><span class="line">[root@localhost admin]<span class="comment"># docker network ls</span></span><br><span class="line">NETWORK ID     NAME               DRIVER    SCOPE</span><br><span class="line"></span><br><span class="line">fee646ecddfa   t-net              bridge    <span class="built_in">local</span></span><br><span class="line">ebdcdb71d1ba   test-net           bridge    <span class="built_in">local</span></span><br></pre></td></tr></table></figure></p></li><li><p>打开一个终端，基于镜像centos:7启动容器app1，并将容器app1加入到网络t-net中，进入到容器app1里：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># docker run -it --name app1 --network t-net centos:7</span></span><br><span class="line">Unable to find image <span class="string">&#x27;centos:7&#x27;</span> locally</span><br><span class="line">7: Pulling from library/centos</span><br><span class="line">2d473b07cdd5: Pull complete </span><br><span class="line">Digest: sha256:9d4bcbbb213dfd745b58be38b13b996ebb5ac315fe75711bd618426a630e0987</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> centos:7</span><br><span class="line">[root@0ab7505ff23e /]<span class="comment"># </span></span><br></pre></td></tr></table></figure></p></li><li><p>另外打开一个终端，基于镜像centos:7启动容器app2，并将容器app2也加入到网络t-net中，进入到容器app2里：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># docker run -it --name app2 --network t-net centos:7</span></span><br><span class="line">[root@6a32efbb3dbe /]<span class="comment"># </span></span><br></pre></td></tr></table></figure></p></li><li><p>在容器app1中<code>ping app2</code>,在容器app2中<code>ping app1</code>（注意区分两个终端）：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@0ab7505ff23e /]<span class="comment"># ping app2</span></span><br><span class="line">PING app2 (172.20.0.3) 56(84) bytes of data.</span><br><span class="line">64 bytes from app2.t-net (172.20.0.3): icmp_seq=1 ttl=64 time=0.045 ms</span><br><span class="line">64 bytes from app2.t-net (172.20.0.3): icmp_seq=2 ttl=64 time=0.064 ms</span><br><span class="line">^C</span><br><span class="line">--- app2 ping statistics ---</span><br><span class="line">2 packets transmitted, 2 received, 0% packet loss, time 1000ms</span><br><span class="line">rtt min/avg/max/mdev = 0.045/0.054/0.064/0.012 ms</span><br><span class="line"></span><br><span class="line">[root@6a32efbb3dbe /]<span class="comment"># ping app1</span></span><br><span class="line">PING app1 (172.20.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from app1.t-net (172.20.0.2): icmp_seq=1 ttl=64 time=0.092 ms</span><br><span class="line">64 bytes from app1.t-net (172.20.0.2): icmp_seq=2 ttl=64 time=0.214 ms</span><br><span class="line">64 bytes from app1.t-net (172.20.0.2): icmp_seq=3 ttl=64 time=0.077 ms</span><br><span class="line">^C</span><br><span class="line">--- app1 ping statistics ---</span><br><span class="line">3 packets transmitted, 3 received, 0% packet loss, time 2002ms</span><br><span class="line">rtt min/avg/max/mdev = 0.077/0.127/0.214/0.062 ms</span><br></pre></td></tr></table></figure></p></li><li><p><strong>以上结果则表示0丢包，容器之间能够正常通讯。</strong></p></li></ul><h2 id="docker仓库管理">Docker仓库管理</h2><p>仓库是集中存放镜像的地方，目前Docker官方维护了一个公共仓库Docker Hub，大部分需求的镜像都可以通过在Docker Hub中直接找到。</p><h3 id="登录和登出">登录和登出</h3><p>若还没有Docker账号，可在 <a href="https://hub.docker.com/">https://hub.docker.com</a> 上免费注册一个。然后输入用户名和密码登录，登录成功后便可以从Docker hub上拉去自己账号下的全部镜像。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># docker login</span></span><br><span class="line">Login with your Docker ID to push and pull images from Docker Hub. If you don<span class="string">&#x27;t have a Docker ID, head over to https://hub.docker.com to create one.</span></span><br><span class="line"><span class="string">Username: tangmenjue</span></span><br><span class="line"><span class="string">Password: </span></span><br><span class="line"><span class="string">Login Succeeded</span></span><br></pre></td></tr></table></figure><p>使用<code>docker logout</code>命令可以登出Docker hub。</p><h3 id="拉取镜像">拉取镜像</h3><p>使用<code>docker search</code>命令可以查找官方仓库中的镜像，并利用<code>docker pull</code>命令将其下载到本地，例如要下载ubuntu镜像，操作如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># docker search ubuntu</span></span><br><span class="line">NAME                             DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED</span><br><span class="line">ubuntu                           Ubuntu is a Debian-based Linux operating sys…   15312               [OK]                </span><br><span class="line">websphere-liberty                WebSphere Liberty multi-architecture images …   290                 [OK]                </span><br><span class="line">ubuntu-upstart                   DEPRECATED, as is Upstart (find other proces…   112                 [OK]                </span><br><span class="line">neurodebian                      NeuroDebian provides neuroscience research s…   97                  [OK]                </span><br><span class="line">ubuntu/nginx                     Nginx, a high-performance reverse proxy &amp; we…   69                                      </span><br><span class="line">open-liberty                     Open Liberty multi-architecture images based…   56                  [OK]                </span><br><span class="line">ubuntu/apache2                   Apache, a secure &amp; extensible open-source HT…   50                                      </span><br><span class="line">ubuntu-debootstrap               DEPRECATED; use <span class="string">&quot;ubuntu&quot;</span> instead                49                  [OK]                </span><br><span class="line">...</span><br><span class="line">[root@localhost admin]<span class="comment"># docker pull ubuntu</span></span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/ubuntu</span><br><span class="line">7b1a6ab2e44d: Pull complete </span><br><span class="line">Digest: sha256:626ffe58f6e7566e00254b638eb7e0f3b11d4da9675088f4781a50ae288f3322</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> ubuntu:latest</span><br></pre></td></tr></table></figure><h3 id="推送镜像">推送镜像</h3><p>用户登录后，可以通过<code>docker push</code>命令将自己的镜像推送到Docker Hub，如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看目前已有的镜像</span></span><br><span class="line">root@localhost admin]<span class="comment"># docker image ls</span></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">centos              latest              5d0da3dc9764        14 months ago       231MB</span><br><span class="line">centos              6.7                 9f1de3c6ad53        3 years ago         191MB</span><br><span class="line">centos              6.8                 82f3b5f3c58f        3 years ago         195MB</span><br><span class="line">ubuntu              15.10               9b9cb95443b5        6 years ago         137MB</span><br><span class="line">training/webapp     latest              6fae60ef3446        7 years ago         349MB</span><br><span class="line">training/postgres   latest              6fa973bb3c26        8 years ago         365MB</span><br><span class="line"><span class="comment">#给ubuntu:15.10镜像打上标签，以下的tangmenjue都要替换成自己的Docker账号用户名</span></span><br><span class="line">[root@localhost admin]<span class="comment"># docker tag ubuntu:15.10 tangmenjue/ubuntu:15.10</span></span><br><span class="line"><span class="comment">#查看镜像的变化</span></span><br><span class="line">[root@localhost admin]<span class="comment"># docker image ls</span></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">centos              latest              5d0da3dc9764        14 months ago       231MB</span><br><span class="line">centos              6.7                 9f1de3c6ad53        3 years ago         191MB</span><br><span class="line">centos              6.8                 82f3b5f3c58f        3 years ago         195MB</span><br><span class="line">ubuntu              15.10               9b9cb95443b5        6 years ago         137MB</span><br><span class="line">tangmenjue/ubuntu   15.10               9b9cb95443b5        6 years ago         137MB</span><br><span class="line">training/webapp     latest              6fae60ef3446        7 years ago         349MB</span><br><span class="line">training/postgres   latest</span><br><span class="line"></span><br><span class="line"><span class="comment">#将自己的镜像推送到Docker Hub</span></span><br><span class="line"></span><br><span class="line">[root@localhost admin]<span class="comment"># docker push tangmenjue/ubuntu:15.10</span></span><br><span class="line">The push refers to repository [docker.io/tangmenjue/ubuntu]</span><br><span class="line">98d59071f692: Pushed </span><br><span class="line">af288f00b8a7: Pushed </span><br><span class="line">4b955941a4d0: Mounted from library/ubuntu </span><br><span class="line">f121afdbbd5d: Pushed </span><br><span class="line">15.10: digest: sha256:cc56b237986f2b9282f058cc7875ff5e9d0d9081934c8982ea1ec21288eeefeb size: 1150</span><br><span class="line">[root@localhost admin]<span class="comment"># docker search tangmenjue/ubuntu</span></span><br><span class="line">NAME                DESCRIPTION         STARS               OFFICIAL            AUTOMATED</span><br><span class="line">tangmenjue/ubuntu                       0                               </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Docker,应用部署</summary>
    
    
    
    <category term="Docker" scheme="http://tangmenjue.top/categories/Docker/"/>
    
    <category term="学习笔记" scheme="http://tangmenjue.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Docker" scheme="http://tangmenjue.top/tags/Docker/"/>
    
    <category term="应用部署" scheme="http://tangmenjue.top/tags/%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>企业微信之企业应用开发流程</title>
    <link href="http://tangmenjue.top/2022/11/18/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E4%B9%8B%E4%BC%81%E4%B8%9A%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/"/>
    <id>http://tangmenjue.top/2022/11/18/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E4%B9%8B%E4%BC%81%E4%B8%9A%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/</id>
    <published>2022-11-18T08:26:24.000Z</published>
    <updated>2022-11-18T08:26:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="创建应用">创建应用</h1><h2 id="创建准备">创建准备</h2><ul><li>成功注册企业微信企业</li><li>企业微信账号拥有当前企业的超级管理员或分级管理员的权限</li></ul><h2 id="创建应用-1">创建应用</h2><p>登录 <a href="https://work.weixin.qq.com/wework_admin/loginpage_wx">企业微信管理后台</a>，在【应用管理】界面-【应用】-【自建】点击【创建应用】，在弹出框填写应用的图标、标题、描述和可见范围基本信息。填写完成后，点击【创建应用】，将会跳转至应用详情页面。</p><h2 id="配置信息">配置信息</h2><h3 id="可见范围">可见范围</h3><p>在【应用管理】界面-【应用】-【自建】点击刚刚创建好的应用，进入应用信息页面，点击编辑。</p><p><img src="/2022/11/18/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E4%B9%8B%E4%BC%81%E4%B8%9A%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/1.png"></p><p>点击可见范围旁边的添加，即可编辑可见范围。</p><h3 id="应用主页">应用主页</h3><p>配置成员从工作台打开应用时打开的页面URL，假设应用打开的网页为:<code>http://tangmenjue.top/</code>。</p><p>在应用信息页面点击编辑，点击应用主页旁边的设置，即可配置工作台打开的应用主页。</p><p><img src="/2022/11/18/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E4%B9%8B%E4%BC%81%E4%B8%9A%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/2.png"></p><p>配置完成后，在可见范围内的成员，将在工作台看到该应用。</p><p><img src="/2022/11/18/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E4%B9%8B%E4%BC%81%E4%B8%9A%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/3.png"></p><h3 id="配置host">配置HOST</h3><p>为了能在本地进行开发，需要将应用URL的访问指向本地。Window系统下打开<code>C:\Windows\System32\drivers\etc</code>目录，右键点击hosts，选择使用记事本打开，在文件末尾增加代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1localhost</span><br><span class="line">127.0.0.1tangmenjue.top</span><br></pre></td></tr></table></figure><h1 id="获取应用接口凭证">获取应用接口凭证</h1><h2 id="获取企业id-corp_id">获取企业ID <code>corp_id</code></h2><p>在登录管理后台后，在【管理后台】-【我的企业】-【企业信息】页面的最下面，便可找到【企业ID】</p><p><img src="/2022/11/18/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E4%B9%8B%E4%BC%81%E4%B8%9A%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/4.png"></p><h2 id="获取应用-secret">获取应用 Secret</h2><p>在应用信息页面便可查看Secret</p><p><img src="/2022/11/18/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E4%B9%8B%E4%BC%81%E4%B8%9A%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/5.png"></p><p>将Secret发送到企业微信中查看，点击【发送】，则在操作者的企业微信会话中，会收到企业微信推送过来的Secret信息</p><p><img src="/2022/11/18/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E4%B9%8B%E4%BC%81%E4%B8%9A%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/6.png"></p><h2 id="获取应用接口凭证-access_token">获取应用接口凭证 access_token</h2><p>access_token由corpid和secret产生，所有接口在通信时都需要携带此信息用于验证接口的访问权限。</p><p>借助PostMan接口工具进行获取：<code>https://qyapi.weixin.qq.com/cgi-bin/gettoken?corpid=id&amp;corpsecret=secret</code>，链接里的id自行替换为实际的corp_id值，secret自行替换为实际的secret值。</p><p>打开PostMan，在左上角处点击Create collection</p><p><img src="/2022/11/18/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E4%B9%8B%E4%BC%81%E4%B8%9A%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/7.png"></p><p>然后继续点击Add a request</p><p><img src="/2022/11/18/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E4%B9%8B%E4%BC%81%E4%B8%9A%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/8.png"></p><p>在新弹出的窗口的Get输入框里输入，点击Send：</p><p><img src="/2022/11/18/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E4%B9%8B%E4%BC%81%E4%B8%9A%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/9.png"></p><p>然后便可在Body处看到获取的access_token值：</p><p><img src="/2022/11/18/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E4%B9%8B%E4%BC%81%E4%B8%9A%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/10.png"></p><h1 id="发送应用信息">发送应用信息</h1><p>通过向企业微信信息推送接口POST对应的消息结构体即可实现应用消息的推送。对应的请求地址为：<code>https://qyapi.weixin.qq.com/cgi-bin/message/send?access_token=ACCESS_TOKEN</code>。</p><h2 id="基本参数">基本参数</h2><ul><li>调用接口凭证 access_token 作为 URL Params 带在请求的 URL 中。</li><li>应用的id agent_id 代表当前发送消息的应用 ID，可在应用的设置页面查看。</li><li>消息接收范围 touser、toparty、totag 分别表示接收消息的 成员、部门、标签，这几个范围标记不能同时为空。</li><li>消息类型 msgtype 用于指定消息的类型，当指定某一消息类型之后，接口服务只会读取该类型对应字段下的数据。</li><li>消息内容 不同的消息类型，会对应不同的消息内容字段。</li></ul><h2 id="基本流程">基本流程</h2><h3 id="发送基本类型消息">发送基本类型消息</h3><p>文本、图文消息、markdown类型的消息仅需要直接在业务后台服务器直接向企业微信消息推送接口发送对应的数据请求即可。</p><p>在示例代码的/server/messageController.js 文件中展示了向消息推送 Api 接口发送消息数据体的基本流程：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">&#x27;axios&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">AccessToken</span> = <span class="built_in">require</span>(<span class="string">&#x27;./accesstoken&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Config</span> = <span class="built_in">require</span>(<span class="string">&#x27;../configs/main.config.js&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span>(<span class="params">router</span>) &#123;</span><br><span class="line">    <span class="comment">// 发送推送消息</span></span><br><span class="line">    router.<span class="title function_">post</span>(<span class="string">&#x27;/message/send&#x27;</span>, <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params">req, res, next</span>) &#123;</span><br><span class="line">        <span class="comment">// 从前端请求中获取对应的参数</span></span><br><span class="line">        <span class="keyword">let</span> &#123;<span class="attr">form</span>:form_parames&#125; = req.<span class="property">body</span> || &#123;&#125;;        </span><br><span class="line">        <span class="comment">// 将 agentid 拼入请求的结构体中</span></span><br><span class="line">        <span class="keyword">let</span> request_data  = &#123;</span><br><span class="line">            ...form_parames,</span><br><span class="line">            <span class="attr">agentid</span>:<span class="title class_">Config</span>.<span class="property">agent_id</span>,</span><br><span class="line">        &#125;;</span><br><span class="line">        request_data.<span class="property">safe</span> = form_parames.<span class="property">safe</span> ? <span class="string">&#x27;1&#x27;</span> : <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        <span class="comment">// 获取 Access Token</span></span><br><span class="line">        <span class="keyword">const</span> access_token = <span class="keyword">await</span> <span class="title class_">AccessToken</span>.<span class="title function_">getToken</span>();</span><br><span class="line">        <span class="comment">// 向消息推送的 Api 发送对应的数据结构体</span></span><br><span class="line">        <span class="keyword">const</span> &#123;data&#125; =  <span class="keyword">await</span> axios.<span class="title function_">post</span>(<span class="string">&#x27;https://qyapi.weixin.qq.com/cgi-bin/message/send&#x27;</span>, </span><br><span class="line">        request_data,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">params</span>: &#123;</span><br><span class="line">                access_token</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 返回请求的结果</span></span><br><span class="line">        res.<span class="title function_">send</span>(data);</span><br><span class="line">    &#125;); </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="发送媒体类型消息">发送媒体类型消息</h3><p>当要推送图片、语言、适配、文件等媒体类型的消息时，需要将对应的文件通过临时素材的接口上传至企业微信的临时素材库。</p><p>在示例代码的 /server/mediaController.js 文件中，展示了通过企业微信临时素材接口上传临时素材的基本流程：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">FormData</span> = <span class="built_in">require</span>(<span class="string">&#x27;form-data&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">&#x27;axios&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">AccessToken</span> = <span class="built_in">require</span>(<span class="string">&#x27;./accesstoken&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span>(<span class="params">router</span>) &#123;</span><br><span class="line">    router.<span class="title function_">post</span>(<span class="string">&#x27;/media/upload&#x27;</span>, <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params">req, res, next</span>) &#123;</span><br><span class="line">   </span><br><span class="line">        <span class="keyword">let</span> &#123;<span class="attr">media</span>:file&#125; = req.<span class="property">files</span> || &#123;&#125;;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">files</span>);</span><br><span class="line">        <span class="keyword">let</span> &#123;type&#125; = req.<span class="property">body</span> || &#123;&#125; ;</span><br><span class="line">        <span class="keyword">const</span> access_token = <span class="keyword">await</span> <span class="title class_">AccessToken</span>.<span class="title function_">getToken</span>();</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 组件一个form，用来上传文件</span></span><br><span class="line">        <span class="keyword">const</span> form = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span><br><span class="line">        form.<span class="title function_">append</span>(<span class="string">&#x27;filename&#x27;</span>, file.<span class="property">name</span>);</span><br><span class="line">        form.<span class="title function_">append</span>(<span class="string">&#x27;filelength&#x27;</span>, file.<span class="property">size</span>);   </span><br><span class="line">        form.<span class="title function_">append</span>(<span class="string">&#x27;media&#x27;</span>,file.<span class="property">data</span>,file.<span class="property">name</span>);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">const</span> &#123;data&#125; =  <span class="keyword">await</span> axios.<span class="title function_">post</span>(<span class="string">&#x27;https://qyapi.weixin.qq.com/cgi-bin/media/upload&#x27;</span>, </span><br><span class="line">        form,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">params</span>: &#123;</span><br><span class="line">                access_token,</span><br><span class="line">                type</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">headers</span>: &#123;</span><br><span class="line">                <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;multipart/form-data&quot;</span></span><br><span class="line">            &#125;,        </span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">        res.<span class="title function_">send</span>(data);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="获取登录用户信息">获取登录用户信息</h1><p>企业微信提供了OAuth的授权登录方式，可以从企业微信终端打开的网页获取成员的身份信息，从而免去登录的环节。</p><h2 id="配置可信域名">配置可信域名</h2><p>为了保证访问授权的安全性，需要配置授权链接URL所在域名为可信域名。在【应用详情】-【开发者接口】-【网页授权及 JS-SDK】，点击【设置可信域名】，在【设置可信域名】弹窗，填写网页授权功能的回调域名it.zsnet.net.cn，网页授权回调域名的配置须与实际访问链接的域名完全一致：</p><p><img src="/2022/11/18/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E4%B9%8B%E4%BC%81%E4%B8%9A%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/11.png"></p><h2 id="构造网页授权链接">构造网页授权链接</h2><p>以下由几个URL要注意区别：</p><ul><li>应用主页URL<ul><li>从工作台点击打开的页面URL，在创建应用时配置填写的，用来授权链接URL跳转。</li></ul></li><li>重定向URL<ul><li>当用户授权成功后，会带着成员授权code跳转的URL，用来接收code并获取成员身份</li></ul></li><li>授权链接URL<ul><li>企业微信名下的URL，包含了suite_id、重定向URL等信息，当企业微信服务参数验证成功后，会跳转到重定向URL</li></ul></li></ul><p>在示例代码的 /routes/index.js 文件中，展示了构造网页授权链接的基本流程：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">get</span>(<span class="title class_">Config</span>.<span class="property">home_path</span>, <span class="keyword">function</span> (<span class="params">req, res, next</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> login_url = <span class="title function_">getLoginURL</span>(<span class="string">&#x27;base&#x27;</span>);</span><br><span class="line">    res.<span class="title function_">redirect</span>(login_url);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="解析成员授权code">解析成员授权code</h2><p>企业成员从工作台点击应用，打开应用主页URL，向授权链接URL跳转；企业微信对授权链接上的信息进行校验之后，会重定向URL跳转，并以query的形式带上当前访问成员的code信息。</p><p>在示例代码的 /routes/index.js 文件中，展示了从重定向URL里解析成员授权code的基本流程：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">get</span>(<span class="title class_">Config</span>.<span class="property">app_path</span>, <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params">req, res, next</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; code &#125; = req.<span class="property">query</span>;</span><br><span class="line">    <span class="keyword">if</span> (code) &#123;</span><br><span class="line">        <span class="keyword">let</span> access_token = <span class="keyword">await</span> <span class="title class_">AccessToken</span>.<span class="title function_">getToken</span>();</span><br><span class="line">        <span class="keyword">if</span> (access_token) &#123;</span><br><span class="line">            <span class="keyword">let</span> &#123; <span class="attr">data</span>: user_data &#125; = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">`https://qyapi.weixin.qq.com/cgi-bin/user/getuserinfo?access_token=<span class="subst">$&#123;access_token&#125;</span>&amp;code=<span class="subst">$&#123;code&#125;</span>`</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;获取 user_data 成功&#x27;</span>, user_data)</span><br><span class="line">            <span class="keyword">let</span> user_id = user_data.<span class="property">UserId</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            res.<span class="title function_">render</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="获取访问用户身份信息">获取访问用户身份信息</h2><p>在解析出成员授权code之后，使用access_token，调用获取访问用户身份的接口，即可得到访问用户的基本信息user_id，若想访问用户更详细的信息，则需要通过读取成员得到用户的姓名、头像等完整信息。</p><p>在示例代码的 /routes/index.js 文件中，展示了从重定向URL里解析成员授权code的基本流程：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">get</span>(<span class="title class_">Config</span>.<span class="property">app_path</span>, <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params">req, res, next</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; code &#125; = req.<span class="property">query</span>;</span><br><span class="line">    <span class="keyword">if</span> (code) &#123;</span><br><span class="line">        <span class="keyword">let</span> access_token = <span class="keyword">await</span> <span class="title class_">AccessToken</span>.<span class="title function_">getToken</span>();</span><br><span class="line">        <span class="keyword">if</span> (access_token) &#123;</span><br><span class="line">            <span class="keyword">let</span> &#123; <span class="attr">data</span>: user_detail_data &#125; = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">`https://qyapi.weixin.qq.com/cgi-bin/user/get?access_token=<span class="subst">$&#123;access_token&#125;</span>&amp;userid=<span class="subst">$&#123;user_id&#125;</span>`</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;获取成员详细信息成功&#x27;</span>, user_detail_data);</span><br><span class="line">            req.<span class="property">session</span>.<span class="property">user</span> = user_detail_data;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            res.<span class="title function_">render</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="实操过程">实操过程</h2><p>借助PostMan接口工具获取用户的userid（用手机号获取）：<code>https://qyapi.weixin.qq.com/cgi-bin/user/getuserid?access_token=ACCESS_TOKEN</code>，链接里的ACCESS_TOKEN自行替换为实际的access_token值。</p><p>打开PostMan，在左上角New collection处右键选择Add collection：</p><p><img src="/2022/11/18/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E4%B9%8B%E4%BC%81%E4%B8%9A%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/12.png"></p><p>点击新弹出的窗口的Get输入框选择POST，输入链接，选择下方的Body，选择row，填写对应的参数后，点击Send：</p><p><img src="/2022/11/18/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E4%B9%8B%E4%BC%81%E4%B8%9A%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/13.png"></p><p>然后便可在下方的Body处看到userid的值：</p><p><img src="/2022/11/18/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E4%B9%8B%E4%BC%81%E4%B8%9A%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/14.png"></p><h1 id="向成员发送信息">向成员发送信息</h1><p>调用企业内部的开放接口，都需要带上企业的接口凭证，且必须以 query 参数形式传递。而应用消息推送接口需要指定当前应用的 agent_id。</p><p>企业微信的应用消息推送支持不同的消息类型，比如文本、图片、语音、文件等，不同类型的消息类型需要指定对应的消息种类 msgtype。</p><p>在示例代码的 /routes/index.js 文件中，编写向成员发送信息的代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="title class_">Config</span>.<span class="property">app_path</span>, <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params">req, res, next</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; code &#125; = req.<span class="property">query</span>;</span><br><span class="line">    <span class="keyword">if</span> (code) &#123;</span><br><span class="line">        <span class="keyword">let</span> access_token = <span class="keyword">await</span> <span class="title class_">AccessToken</span>.<span class="title function_">getToken</span>();</span><br><span class="line">        <span class="keyword">if</span> (access_token) &#123;</span><br><span class="line">            <span class="keyword">let</span> &#123;<span class="attr">data</span>:message_data&#125; = <span class="keyword">await</span> axios.<span class="title function_">post</span>(<span class="string">`https://qyapi.weixin.qq.com/cgi-bin/message/send?access_token=<span class="subst">$&#123;access_token&#125;</span>`</span>,</span><br><span class="line">            &#123;<span class="string">&quot;touser&quot;</span> : user_detail_data.<span class="property">userid</span>,</span><br><span class="line">             <span class="string">&quot;agentid&quot;</span> : agent_id,</span><br><span class="line">             <span class="string">&quot;msgtype&quot;</span> : <span class="string">&quot;text&quot;</span>,</span><br><span class="line">             <span class="string">&quot;text&quot;</span> : &#123;</span><br><span class="line">             <span class="string">&quot;content&quot;</span> : <span class="string">`Hello World! <span class="subst">$&#123;user_detail_data.name&#125;</span>`</span>&#125;,</span><br><span class="line">             &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            res.<span class="title function_">render</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="实操过程-1">实操过程</h2><p><strong>参数说明：</strong></p><table><colgroup><col style="width: 26%"><col style="width: 8%"><col style="width: 65%"></colgroup><thead><tr class="header"><th>参数</th><th>是否必须</th><th>说明</th></tr></thead><tbody><tr class="odd"><td>touser</td><td>否</td><td>指定接收消息的成员，成员ID列表（多个接收者用‘|’分隔，最多支持1000个）。 特殊情况：指定为"<span class="citation" data-cites="all">@all</span>"，则向该企业应用的全部成员发送</td></tr><tr class="even"><td>toparty</td><td>否</td><td>指定接收消息的部门，部门ID列表，多个接收者用‘|’分隔，最多支持100个。 当touser为"<span class="citation" data-cites="all">@all</span>"时忽略本参数</td></tr><tr class="odd"><td>totag</td><td>否</td><td>指定接收消息的标签，标签ID列表，多个接收者用‘|’分隔，最多支持100个。 当touser为"<span class="citation" data-cites="all">@all</span>"时忽略本参数</td></tr><tr class="even"><td>msgtype</td><td>是</td><td>消息类型，此时固定为：text</td></tr><tr class="odd"><td>agentid</td><td>是</td><td>企业应用的id，整型。企业内部开发，可在应用的设置页面查看；第三方服务商，可通过接口 <a href="https://developer.work.weixin.qq.com/document/path/90236#10975/获取企业授权信息">获取企业授权信息</a> 获取该参数值</td></tr><tr class="even"><td>content</td><td>是</td><td>消息内容，最长不超过2048个字节，超过将截断<strong>（支持id转译）</strong></td></tr><tr class="odd"><td>safe</td><td>否</td><td>表示是否是保密消息，0表示可对外分享，1表示不能分享且内容显示水印，默认为0</td></tr><tr class="even"><td>enable_id_trans</td><td>否</td><td>表示是否开启id转译，0表示否，1表示是，默认0。仅第三方应用需要用到，企业自建应用可以忽略。</td></tr><tr class="odd"><td>enable_duplicate_check</td><td>否</td><td>表示是否开启重复消息检查，0表示否，1表示是，默认0</td></tr><tr class="even"><td>duplicate_check_interval</td><td>否</td><td>表示是否重复消息检查的时间间隔，默认1800s，最大不超过4小时</td></tr></tbody></table><blockquote><p>注意：touser、toparty、totag不能同时为空。</p><p>若操作过程中出现IP不合法的错误，在应用信息页面将IP添加进企业可信IP里便可正常访问。</p></blockquote><p>借助PostMan接口工具进行发送信息：<code>https://qyapi.weixin.qq.com/cgi-bin/message/send?access_token=ACCESS_TOKEN</code>，链接里的ACCESS_TOKEN自行替换为实际的access_token值。</p><p>打开PostMan，在左上角New collection处右键选择Add collection。点击新弹出的窗口的Get输入框选择POST，输入链接，选择下方的Body，选择row，填写对应的参数后，点击Send：</p><p><img src="/2022/11/18/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E4%B9%8B%E4%BC%81%E4%B8%9A%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/15.png"></p><p>然后便可在下方的Body处看到已经信息发送成功。</p><p><img src="/2022/11/18/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E4%B9%8B%E4%BC%81%E4%B8%9A%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/16.png"></p>]]></content>
    
    
    <summary type="html">企业微信</summary>
    
    
    
    <category term="企业微信" scheme="http://tangmenjue.top/categories/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1/"/>
    
    <category term="应用开发" scheme="http://tangmenjue.top/categories/%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="企业微信" scheme="http://tangmenjue.top/tags/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1/"/>
    
    <category term="应用开发" scheme="http://tangmenjue.top/tags/%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 7之关于网络管理的那些知识</title>
    <link href="http://tangmenjue.top/2022/11/16/CentOS%207%E4%B9%8B%E5%85%B3%E4%BA%8E%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E7%9A%84%E9%82%A3%E4%BA%9B%E7%9F%A5%E8%AF%86/"/>
    <id>http://tangmenjue.top/2022/11/16/CentOS%207%E4%B9%8B%E5%85%B3%E4%BA%8E%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E7%9A%84%E9%82%A3%E4%BA%9B%E7%9F%A5%E8%AF%86/</id>
    <published>2022-11-16T08:15:26.000Z</published>
    <updated>2022-11-16T08:15:26.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前置知识">前置知识</h1><h2 id="linux常见目录">Linux常见目录</h2><table><colgroup><col style="width: 15%"><col style="width: 84%"></colgroup><thead><tr class="header"><th>目录参数</th><th>说明</th></tr></thead><tbody><tr class="odd"><td>/</td><td>根目录，文件的最顶端，/etc、/bin、/dev、/lib、/sbin应和根目录放置在一个分区中，而类似/usr/local可以单独位于另一个分区</td></tr><tr class="even"><td>/bin</td><td>存放系统所需的重要命令，如文件或目录操作的命令ls、cp、mkdir等。/usr/bin也存放了一些系统命令，这些命令对于的文件都是可执行的，普通用户可以使用大部分的命令</td></tr><tr class="odd"><td>/boot</td><td>存放Linux启动时内核及引导系统程序所需要的核心文件，内核文件和grub系统引导管理器都位于此目录</td></tr><tr class="even"><td>/dev</td><td>存放Linux系统下的设备文件，如光驱、磁盘等。访问该目录下的文件相当于访问某个硬件设备，常用于挂载光驱</td></tr><tr class="odd"><td>/etc</td><td>存放系统的配置文件，作为一些软件启动时默认配置文件读取的目录，如/etc/fstab存放系统分区信息</td></tr><tr class="even"><td>/home</td><td>系统默认的用户主目录。若添加用户时不指定用户的主目录，默认在/home下创建与用户名同名的文件夹。代码中可以用HOME环境变量表示当前用户的主目录</td></tr><tr class="odd"><td>/lib</td><td>64位系统有/lib64文件夹，主要存放动态链接库，类似的目录还有/usr/lib、/usr/local/lib等</td></tr><tr class="even"><td>/lost+found</td><td>存放一些当系统意外崩溃或机器意外关机时产生的文件碎片</td></tr><tr class="odd"><td>/mnt</td><td>存放挂载储存设备的挂载目录，如光驱等</td></tr><tr class="even"><td>/proc</td><td>存放操作系统运行时的运行信息，如进程信息、内核信息、网络信息等。此目录的内容存在于内存中，实际不占用磁盘空间。如/etc/cpuinfo存放CPU相关信息</td></tr><tr class="odd"><td>/root</td><td>Linux超级权限用户root的主目录</td></tr><tr class="even"><td>/sbin</td><td>存放一些系统管理的命令，一般只能由超级权限用户root执行。大多数命令普通用户一般无权执行，如/sbin/ifconfig，普通用户使用绝对路径也可执行，用于查看当前系统网络配置，如/usr/sbin、/usr/local/sbin</td></tr><tr class="odd"><td>/tmp</td><td>临时文件目录，任何人都可以访问。系统软件或用户运行程序时产生的临时文件存放到这里。此目录数据需要定期清除，重要数据不能放在该目录下，其目录空间也不能过小</td></tr><tr class="even"><td>/usr:</td><td>应用程序存放目录，如命令、帮助文件等。安装Linux软件包时默认安装到/usr/local目录下，如/usr/share/fonts存放系统字体，/usr/share/man存放帮助文档，/usr/include存放软件的头文件等。建议将/usr/local目录单独分区并设置较大的磁盘空间</td></tr><tr class="odd"><td>/var</td><td>/var/log存放系统日志，/var/lib存放系统库文件。目录内容会经常变动</td></tr><tr class="even"><td>/sys</td><td>与/proc类似，是一个虚拟的文件系统，主要记录与系统核心相关的信息，如系统已经载入的模块信息等，该目录实际不占硬盘容量</td></tr></tbody></table><h2 id="网络管理协议">网络管理协议</h2><h3 id="tcpip协议">TCP/IP协议</h3><h4 id="tcpip协议体系">TCP/IP协议体系</h4><p>TCP/IP协议主要包含传输控制协议（TCP）和网际协议（IP）。</p><p>TCP/IP体系是一种分层结构，由基于硬件层次上的4个概念层次构成，从上往下看，即为应用层、传输层、网际互联层和网络接口层。</p><table><colgroup><col style="width: 14%"><col style="width: 85%"></colgroup><thead><tr class="header"><th>TCP/IP层次</th><th>功能及作用</th></tr></thead><tbody><tr class="odd"><td>应用层</td><td>为用户提供所需要的各自应用服务，如FTP、Telnet、DNS、SMTP等</td></tr><tr class="even"><td>传输层</td><td>为应用层提供端到端的通信功能，同时提供流量控制，确保数据完整和正确。TCP协议位于该层，提供一种可靠的、面向连接的数据传输服务，对之对应的是UDP协议，提供不可靠的、无连接的数据报传输服务</td></tr><tr class="odd"><td>网际互联层</td><td>解决主机到主机之间的通信问题。其主要协议有：网际协议（IP）、地址解析协议（ARP）、反向地址解析协议（RARP）和互联网控制报文协议（ICMP）</td></tr><tr class="even"><td>网络接口层</td><td>为上层提供服务，完成链路控制等功能</td></tr></tbody></table><h4 id="包packet">包（packet）</h4><p>包（packet）是网络上传输的数据片段，也称为分组或IP数据报。用户数据按照规定划分为大小适中的若干组，每个组加上包头构成一个包，该过程便称为封装。网络上使用包为单位进行数据传输。</p><p>包是一种统称，在不同的层次，包有不同的名字。如TCP/IP中称作帧，而IP层称之为IP数据报，TCP层称之为TCP报文等。</p><h4 id="网络字节顺序">网络字节顺序</h4><p>TCP/IP协议定义了一种所有机器在互联网分组的二进制字段中必须使用的网络标准字节顺序，与之对应的是主机字节顺序，主机字节顺序和各个主机密切相关。</p><p>传输时需遵循以下转换规则：<strong>主机字节顺序→网络字节顺序→主机字节顺序</strong>。</p><p>即发送方将主机字节顺序的整数转换为网络字节顺序后发送出去，接收方收到数据后将网络字节顺序的整数转换为自己的主机字节顺序，然后再进行处理。</p><h4 id="地址解析协议arp">地址解析协议（ARP）</h4><p>TCP/IP网络使用IP地址进行寻址，IP包在IP层实现路由选择，但IP包在网络接口层的传输却需要知道设备的物理地址，此时便需要一种IP地址到物理地址的转换协议ARP。</p><p>ARP协议是一种在以太网这种有广播能力的网络中解决地址转换问题的方法，该方法允许在不重新编译代码、不需维护一个集中式数据库的情况下，在网络中动态增加新机器。</p><p>其原理为：当主机A想转换某一IP地址时，通过向网络中广播一个专门的报文分组，要求具有该IP地址的机器以其物理地址做出应答。所有主机都将收到这个请求，但只有符合条件的主机才辨认该IP地址，同时发回一个包括其物理地址的应答。主机A收到应答时便知道该IP地址对应的物理地址，并使用这个地址将数据分组发过去。</p><h3 id="udp协议">UDP协议</h3><p>UDP是一种无连接的传输层协议，主要用于不要求分组顺序到达的传输中。其优点为资源消耗小、处理速度快。由于其不提供数据包分组、组装和不能对数据包进行排序的缺点，当报文发送后，无法得知其是否安全完整到达的，因此UDP协议丢包会比较严重。</p><h3 id="icmp协议">ICMP协议</h3><p>ICMP协议是Internet控制报文协议，属于TCP/IP协议族的一个子协议，用于在IP主机、路由器之间传递控制信息。控制信息是指网络是否通畅、主机是否可达、路由是否可用等网络本身的信息，<strong>其唯一的功能是报告问题</strong>，而不是纠正错误，纠错的任务由发送方完成。</p><h1 id="网络管理命令">网络管理命令</h1><h2 id="ping检查网络连接速度及网络是否通畅">Ping：检查网络连接速度及网络是否通畅</h2><p>ping常用于测试与目标主机或域名是否可达。ping的结果通常是可信的（部分服务器设置了禁止ping的除外）</p><p>ping命令不会自动终止，需要按"ctrl+c"终止，或是用参数"<code>-c</code>"指定要求完成的回应次数。</p><p>在CenOS 7中，ping的常用命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#ping目的ip地址如192.168.3.100</span></span><br><span class="line">ping 192.168.3.100</span><br><span class="line"></span><br><span class="line"><span class="comment">#ping外网域名如www.baidu.com</span></span><br><span class="line">ping www.baidu.com</span><br><span class="line"></span><br><span class="line"><span class="comment">#ping目的ip地址n次，下面命令中的n为次数</span></span><br><span class="line">ping -c n 192.168.3.100</span><br><span class="line"></span><br><span class="line"><span class="comment">#以0.01s的时间间隔来ping目的ip地址3次，下面命令中的0.01为指定的时间间隔0.01秒</span></span><br><span class="line">ping -c 3 -i 0.01 192.168.3.100</span><br></pre></td></tr></table></figure><h2 id="ifconfig配置网络或显示当前网络接口状态">ifconfig:配置网络或显示当前网络接口状态</h2><p>ifonfig命令可以用于查看、配置、启用或禁用指定网络接口，如配置网卡的IP地址、掩码、广播地址、网关等。</p><p>在CenOS 7中，查看网卡基本信息：</p><p><img src="/2022/11/16/CentOS%207%E4%B9%8B%E5%85%B3%E4%BA%8E%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E7%9A%84%E9%82%A3%E4%BA%9B%E7%9F%A5%E8%AF%86/1.png"></p><p>查看指定网络接口ens33的信息：</p><p><img src="/2022/11/16/CentOS%207%E4%B9%8B%E5%85%B3%E4%BA%8E%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E7%9A%84%E9%82%A3%E4%BA%9B%E7%9F%A5%E8%AF%86/2.png"></p><p>其中：</p><ul><li><p>第一行：UP表示该网络接口为启用状态。RUNNING表示网卡设备已连接，MULTICAST表示组播，mtu为数据包最大传输单元</p></li><li><p>第二行：网卡IP、子网掩码、广播地址</p></li><li><p>第三行：IPv6地址</p></li><li><p>第四行：ether为网卡的MAC地址，Ethernet表示连接类型</p></li><li><p>第五行：接收数据包个数、大小统计信息</p></li><li><p>第六行：异常接收数据包的数量，如丢包量、错误等</p></li><li><p>第七行：发送数据包个数、大小统计信息</p></li><li><p>第八行：产生错误数据包的数量，如丢包量，错误等</p></li></ul><p>ifconfig的常用命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#关闭ens33网卡</span></span><br><span class="line">ifconfig ens33 down</span><br><span class="line"></span><br><span class="line"><span class="comment">#开启ens33网卡</span></span><br><span class="line">ifconfig ens33 up</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置ip地址</span></span><br><span class="line">ifconfig ens33:1 192.168.100.100</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置ip地址和子网掩码</span></span><br><span class="line">ifconfig ens33:1 192.168.100.100 netmask 255.255.255.0</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置ip地址、子网掩码和广播地址</span></span><br><span class="line">ifconfig ens33:1 192.168.100.100 netmask 255.255.255.0 broadcast 192.168.1.255</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除ip地址</span></span><br><span class="line">ifconfig ens33 del 192.168.1.100</span><br><span class="line"></span><br><span class="line"><span class="comment">#启用arp协议</span></span><br><span class="line">ifconfig ens33 arp</span><br><span class="line"></span><br><span class="line"><span class="comment">#禁用arp协议</span></span><br><span class="line">ifconfig ens33 -arp</span><br></pre></td></tr></table></figure><h2 id="route显示添加或修改路由表">route：显示添加或修改路由表</h2><p>route命令用于查看或编辑计算机的IP路由表。</p><p>route的常用命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#显示所有路由表</span></span><br><span class="line">route -n</span><br><span class="line"><span class="comment">#添加一条路由：发往192.168.60.0网段的全部要经过网关192.168.19.1</span></span><br><span class="line">route add -net 192.168.18.0 netmask 255.255.255.0 gw 192.168.18.2</span><br><span class="line"><span class="comment">#删除一条路由：删除时不需要网关</span></span><br><span class="line">route del -net 192.168.18.0 netmask 255.255.255.0</span><br></pre></td></tr></table></figure><h2 id="scplinux系统之间复制文件和目录">scp：Linux系统之间复制文件和目录</h2><p>scp可以将本地文件传送到远程主机或从远程主机拉取文件到本地。注意由于各发行版本不同，scp语法也不同。</p><p>scp使用方法如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将本地/root/lk目录下所有文件传输到远程主机192.168.3.100的/home/lk/cpfile目录下：</span></span><br><span class="line">scp -r /root/lk root@192.168.3.100:/home/lk/cpfile</span><br><span class="line"></span><br><span class="line"><span class="comment">#将远程主机192.168.3.100的/home/lk/目录下所有文件全部复制到本地的/root目录下：</span></span><br><span class="line">scp -r root@192.168.3.100:/home/lk /root</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用端口号4588将本地文件test.py传送至远程主机198.168.3.100的/usr目录下：</span></span><br><span class="line">scp -P 4588 test.py root@192.168.3.100:/usr</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用端口号4588将远程主机198.168.3.100的/etc/1.txt文件复制到本地的/root目录下：</span></span><br><span class="line">scp -P 4588 root@192.168.3.100:/etc/1.txt /root</span><br></pre></td></tr></table></figure><h2 id="rsync数据镜像备份工具">rsync：数据镜像备份工具</h2><p>rsync是Linux系统下常用的数据镜像备份工具，用于在不同的主机之间同步文件。除了单个文件外，rsync还可以保存整个目录树和文件系统，可以增量同步，并保持文件原来的属性，数据传输过程是加密的，保证数据的安全。</p><p><strong>rsync不仅可以远程同步数据，还可以本地同步数据</strong>。与cp或scp不同的是，<strong>使用rsync备份数据时不会直接覆盖已经存在的数据</strong>，而是先判断已经存在的数据和新数据的差异，只有数据不同时才会把不相同的部分覆盖。</p><p>rsync使用方法如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将本地/etc/passwd文件同步到本地的/tmp/目录下，并改名为1.txt</span></span><br><span class="line">rsync -av /etc/passwd /tmp/1.txt</span><br><span class="line"></span><br><span class="line"><span class="comment">#将本地/etc/passwd文件备份到远程主机192.168.3.100的/tmp/目录下，并改名为1.txt</span></span><br><span class="line">rsync -av /etc/passwd 192.168.3.100:/tmp/1.txt</span><br></pre></td></tr></table></figure><h2 id="netstat显示网络连接路由表或接口状态">netstat：显示网络连接、路由表或接口状态</h2><p>netstat命令用于监控系统网络配置和工作状况，可以显示内核路由表、活动的网络状态以及每个网络接口有用的统计数字。</p><p>netstat的常用命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#显示所有端口，包含UDP和TCP端口</span></span><br><span class="line">netstat -a|<span class="built_in">head</span> -4</span><br><span class="line"><span class="comment">#显示所有TCP端口</span></span><br><span class="line">netstat -at</span><br><span class="line"><span class="comment">#显示所有UDP端口</span></span><br><span class="line">netstat -au</span><br><span class="line"><span class="comment">#显示所有处于监听状态的端口并以数字方式显示而非服务名</span></span><br><span class="line">netstat -<span class="built_in">ln</span></span><br><span class="line"><span class="comment">#显示所有TCP端口并显示对应的进程名称或进程号</span></span><br><span class="line">netstat -plnt</span><br><span class="line"><span class="comment">#显示核心路由信息</span></span><br><span class="line">netstat -r</span><br><span class="line"><span class="comment">#显示网络接口列表</span></span><br><span class="line">netstat -i</span><br><span class="line"><span class="comment">#统计各个TCP连接的各个状态对应的数量</span></span><br><span class="line">netstat -plinta|sed <span class="string">&#x27;1,2d&#x27;</span>|awk <span class="string">&#x27;&#123;print $6&#125;&#x27;</span>|<span class="built_in">sort</span>|<span class="built_in">uniq</span> -c</span><br></pre></td></tr></table></figure><h2 id="traceroute探测至目的地址的路由信息">traceroute：探测至目的地址的路由信息</h2><p>traceroute跟踪数据包到达网络主机所经过的路由，其原理是试图以最小的TTL发出探测包来跟踪数据包到达目标主机所经过的网关，然后监听一个来自网关ICMP的应答。</p><p>traceroute的常用命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#先检查主机与www.baidu.com之间的网络是否通畅</span></span><br><span class="line">ping www.baidu.com</span><br><span class="line"><span class="comment">#显示本地主机到www.baidu.com所经过的路由信息</span></span><br><span class="line">traceroute -n www.baidu.com</span><br><span class="line"><span class="comment">#运行结果的每行记录对应一跳，每跳表示一个网关，最大30跳。每行有3个时间，单位是ms。星号则表示ICMP信息没有返回</span></span><br></pre></td></tr></table></figure><h2 id="telnet测试登录或控制远程主机">telnet：测试、登录或控制远程主机</h2><p>telnet通常用来远程登录。在客户端使用telnet在程序中输入命令，可以在本地控制服务器。由于telnet采用明文传送报文，安全性较差。telnet可以确定远程服务端口的状态，以便确认服务是否正常。</p><p>telnet常用命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#检查198.168.3.100对应的56789端口服务是否正常</span></span><br><span class="line">telnet 198.168.3.100 56789</span><br><span class="line"><span class="comment">#检查www.pjp.net对应的80端口服务是否正常</span></span><br><span class="line">telnet www.php.net 80</span><br></pre></td></tr></table></figure><h2 id="wget下载网络文件">wget：下载网络文件</h2><p>wget可以断点续传，同时支持FTP或HTTP协议下载，并可以设置代理服务器。</p><p>wgett常用命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#下载文件http://ftp.gnu.org/gnu/wget/wget-1.14.tar.gz</span></span><br><span class="line">wget http://ftp.gnu.org/gnu/wget/wget-1.14.tar.gz</span><br><span class="line"><span class="comment">#断点续传</span></span><br><span class="line">wget -c http://ftp.gnu.org/gnu/wget/wget-1.14.tar.gz</span><br><span class="line"><span class="comment">#批量下载，其中download.txt文件里是一系列网址</span></span><br><span class="line">wget -i download.txt</span><br></pre></td></tr></table></figure><h1 id="linux网络配置">Linux网络配置</h1><p>与Linux网络配置相关的文件主要有以下这些：</p><table><colgroup><col style="width: 40%"><col style="width: 60%"></colgroup><thead><tr class="header"><th>目录</th><th>功能及作用</th></tr></thead><tbody><tr class="odd"><td>/etc/hostname</td><td>主要用于修改主机名称</td></tr><tr class="even"><td>/etc/sysconfig/network-scrips/ifcfg-enoN</td><td>设置网卡参数的文件，如IP地址、子网掩码、广播地址、网关等，N为一串数字</td></tr><tr class="odd"><td>/etc/resolv.conf</td><td>设置DNS相关的信息，用于将域名解析到IP</td></tr><tr class="even"><td>/etc/hosts</td><td>计算机IP对应的主机名称或域名对应的IP地址</td></tr><tr class="odd"><td>/etc/nsswitch.conf</td><td>规定通过哪些途径、按照什么顺序通过这些途径来查找特定类型的信息。通过修改选项可以选择是DNS解析优先还是本地设置优先</td></tr></tbody></table><h2 id="配置linux系统的ip地址">配置Linux系统的IP地址</h2><p>可以通过终端命令直接设置主机的IP地址，如想设置在系统重启后依然生效，可以通过设置对应的网络端口文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">oot@localhost admin]<span class="comment"># cat /etc/sysconfig/network-scripts/ifcfg-ens33</span></span><br><span class="line"></span><br><span class="line">TYPE=<span class="string">&quot;Ethernet&quot;</span>  <span class="comment">#设备连接类型，此处为以太网</span></span><br><span class="line">PROXY_METHOD=<span class="string">&quot;none&quot;</span>  </span><br><span class="line">BROWSER_ONLY=<span class="string">&quot;no&quot;</span></span><br><span class="line">BOOTPROTO=<span class="string">&quot;dhcp&quot;</span>  <span class="comment">#使用动态IP</span></span><br><span class="line">DEFROUTE=<span class="string">&quot;yes&quot;</span>  <span class="comment">#是否为默认路由</span></span><br><span class="line">IPV4_FAILURE_FATAL=<span class="string">&quot;no&quot;</span></span><br><span class="line">IPV6INIT=<span class="string">&quot;yes&quot;</span></span><br><span class="line">IPV6_AUTOCONF=<span class="string">&quot;yes&quot;</span></span><br><span class="line">IPV6_DEFROUTE=<span class="string">&quot;yes&quot;</span></span><br><span class="line">IPV6_FAILURE_FATAL=<span class="string">&quot;no&quot;</span></span><br><span class="line">IPV6_ADDR_GEN_MODE=<span class="string">&quot;stable-privacy&quot;</span></span><br><span class="line">NAME=<span class="string">&quot;ens33&quot;</span></span><br><span class="line">UUID=<span class="string">&quot;cc581056-9262-44ab-877f-645d0b306352&quot;</span></span><br><span class="line">DEVICE=<span class="string">&quot;ens33&quot;</span></span><br><span class="line">ONBOOT=<span class="string">&quot;yes&quot;</span>  <span class="comment">#系统启动时是否设置此网络接口</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#可以使用命令</span></span><br><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-ens33</span><br><span class="line"><span class="comment">#将BOOTPROTO=&quot;dhcp&quot; 修改为BOOTPROTO=none 后，增加以下字段。按i键即可输入，输入完成后按下Esc键，输入冒号：和wq将更改保存后退出</span></span><br><span class="line"></span><br><span class="line">IPADDR0=设定的ip地址</span><br><span class="line">PREFIX0=设定的子网掩码</span><br><span class="line">GATEWAT0=设定的网关</span><br><span class="line">DNS1=DNS服务器地址1</span><br><span class="line">DNS2=DNS服务器地址2</span><br></pre></td></tr></table></figure><p>设置完接口文件后，需要重启网络服务才能生效，重启后使用ifconfig查看设置是否生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service network restart</span><br></pre></td></tr></table></figure><p>同一个网络接口可以使用子接口的方式设置多个IP地址：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置网络接口ens33子接口1的ip地址和子网掩码</span></span><br><span class="line">ifconfig ens33:1 192.168.100.100 netmask 255.255.255.0</span><br></pre></td></tr></table></figure><p>当服务器重启或网络服务重启后，子接口的配置将消失。若需要重启后仍生效，可以将配置子接口命令加入/etc/rc.local文件中。</p><h2 id="使用hostname设置主机名">使用hostname设置主机名</h2><p>主机名是识别某个计算机在网络中的标识。在单机情况下，主机名可任意设置。执行以下命令修改主机名，重新登录后可以发现主机名已改变。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hostname mycomputername</span><br></pre></td></tr></table></figure><p>如要修改重启后依然生效，可以将主机名写入文件/etc/hostname中。</p><h2 id="设置默认网关">设置默认网关</h2><p>设置好IP地址后，若要访问其他的子网或Internet，用户还需要设置路由，这里采用设置默认网关的方法来设置路由。</p><p>在Linux中，设置默认网关有两种方法：</p><ul><li><p>第一种是直接使用route命令。在设置默认网关之前，先用<code>route -n</code> 命令查看路由表，而后执行下面命令设置网关：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">route add default gw 192.168.10.254</span><br></pre></td></tr></table></figure></p><p>若不想每次开机都执行route命令，则应把要执行的命令写入/etc/rc.d/re.local文件中。</p></li><li><p>第二种是在/ect/sysconfig/network-scripts/ifcfg-接口文件中添加如下字段：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GATEWAY=192.168.10.254</span><br></pre></td></tr></table></figure></p><p>然后重启网络服务来使设置生效。</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service network restart</span><br></pre></td></tr></table></figure></p></li></ul><h2 id="设置dns服务器">设置DNS服务器</h2><p>设置DNS服务器只需修改/etc/resolv.conf文件即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># cat /etc/resolv.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Generated by NetworkManager</span></span><br><span class="line">search localdomain</span><br><span class="line">nameserver 192.168.18.2  <span class="comment">#第一名字服务器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#如需添加DNS服务器，直接在下面添加nameserver即可，注意nameserver指定的DNS服务器只有前三条生效</span></span><br><span class="line"><span class="comment">#resolv.conf文件还有其他参数如下：</span></span><br><span class="line">option rotate  <span class="comment">#在这DNS server之间轮询</span></span><br><span class="line">option <span class="built_in">timeout</span>:1  <span class="comment">#表示解析超时时间1s（默认为5s）</span></span><br><span class="line">attempts:2  <span class="comment">#表示解析域名尝试的次数</span></span><br></pre></td></tr></table></figure><h1 id="ftp服务器">FTP服务器</h1><h2 id="ftp服务概述">FTP服务概述</h2><p>FTP文件共享基于TCP/IP协议，是一种通用性比较强的网络文件共享方式。FTP是仅基于TCP的服务，不支持UDP。FTP使用两个端口，一个数据端口和一个命令端口（控制端口）。通常这两个端口是21（命令端口）和20（数据端口）。由于FTP工作方式的不同，数据端口并不总是20，分为主动FTP和被动FTP。</p><ul><li>主动FTP<ul><li>主动模式是从服务器向客户端发起连接。主动模式下，服务端开启的是20和21端口，客户端开启的是1024以上的端口</li></ul></li><li>被动FTP<ul><li>被动模式是客户端向服务端发起连接。被动模式下，服务端开启的是21命令端口和大于1024的数据连接端口，客户端开启的是大于1024的两个端口</li></ul></li></ul><p>两者的共同点是都使用21端口进行用户验证及管理，差别在于传送数据的方式不同。</p><h2 id="vsftp的安装与配置">vsftp的安装与配置</h2><p>在Linux系统下，vsftp是一款应用比较广泛的FTP软件，其特点是小巧轻快、安全易用。</p><h3 id="vsftp安装">vsftp安装</h3><p>使用yum工具安装vsftp：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用yum工具下载vsftp</span></span><br><span class="line">yum install -y vsftpd</span><br><span class="line"><span class="comment">#使用rpm安装vsftp</span></span><br><span class="line">rpm -qa|grep vsftp</span><br><span class="line"><span class="comment">#安装依赖的库文件</span></span><br><span class="line">yum install -y libcap libcap-devel</span><br></pre></td></tr></table></figure><h3 id="匿名ftp设置">匿名FTP设置</h3><p>这种运行匿名用户访问并上传文件，配置文件路径一般为<code>/etc/vsftpd.conf</code>，若是使用rpm包安装，则配置文件位于<code>/etc/vsftpd/vsftpd.conf</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将默认目录赋予用户ftp权限以便可以上传文件</span></span><br><span class="line">[root@localhost admin]<span class="comment"># chown -R ftp.users /var/ftp/pub/</span></span><br><span class="line"><span class="comment">#取消配置文件中的注释并显示有效行</span></span><br><span class="line">[root@localhost admin]<span class="comment"># grep -v ^# /etc/vsftpd/vsftpd.conf</span></span><br><span class="line">anonymous_enable=YES  <span class="comment">#允许匿名用户登录和上传</span></span><br><span class="line">local_enable=YES  </span><br><span class="line">write_enable=YES  <span class="comment">#允许写</span></span><br><span class="line">local_umask=022  </span><br><span class="line">dirmessage_enable=YES</span><br><span class="line">xferlog_enable=YES</span><br><span class="line">connect_from_port_20=YES</span><br><span class="line">xferlog_std_format=YES</span><br><span class="line">listen=NO <span class="comment">#是否允许在监听</span></span><br><span class="line">listen_ipv6=YES <span class="comment">#是否允许IPv6上的监听</span></span><br><span class="line"></span><br><span class="line">pam_service_name=vsftpd</span><br><span class="line">userlist_enable=YES</span><br><span class="line">tcp_wrappers=YES</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置文件使用vim /etc/vsftpd/vsftpd.conf修改为如下：</span></span><br><span class="line">anonymous_enable=YES</span><br><span class="line">local_enable=YES</span><br><span class="line">write_enable=YES</span><br><span class="line">local_umask=022</span><br><span class="line">anon_upload_enable=YES</span><br><span class="line">dirmessage_enable=YES</span><br><span class="line">xferlog_enable=YES</span><br><span class="line">connect_from_port_20=YES</span><br><span class="line">xferlog_std_format=YES</span><br><span class="line">listen=YES</span><br><span class="line">listen_ipv6=NO</span><br><span class="line"></span><br><span class="line">pam_service_name=vsftpd</span><br><span class="line">userlist_enable=YES</span><br><span class="line">tcp_wrappers=YES</span><br></pre></td></tr></table></figure><h3 id="启动ftp服务">启动FTP服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启动vsftpd</span></span><br><span class="line">[root@localhost admin]<span class="comment"># systemctl start vsftpd</span></span><br><span class="line"><span class="comment">#检查是否启动成功，默认配置文件位于/etc/vsftpd/vsftpd.conf</span></span><br><span class="line">[root@localhost admin]<span class="comment"># ps -ef|grep vsftp</span></span><br><span class="line">root      60170      1  0 00:55 ?        00:00:00 /usr/sbin/vsftpd /etc/vsftpd/vsftpd.conf</span><br><span class="line">root      60223  54792  0 00:56 pts/0    00:00:00 grep --color=auto vsftp</span><br></pre></td></tr></table></figure><h3 id="匿名用户登录测试">匿名用户登录测试</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#登录ftp</span></span><br><span class="line">[root@localhost admin]<span class="comment"># ftp 192.168.18.128 21</span></span><br><span class="line">Connected to 192.168.18.128 (192.168.18.128).</span><br><span class="line">220 (vsFTPd 3.0.2)</span><br><span class="line"><span class="comment">#输入匿名用户名</span></span><br><span class="line">Name (192.168.18.128:root): anonymous</span><br><span class="line">331 Please specify the password.</span><br><span class="line"><span class="comment">#密码为空</span></span><br><span class="line">Password:</span><br><span class="line"><span class="comment">#登录成功</span></span><br><span class="line">230 Login successful.</span><br><span class="line">Remote system <span class="built_in">type</span> is UNIX.</span><br><span class="line">Using binary mode to transfer files.</span><br><span class="line">ftp&gt; </span><br><span class="line"><span class="comment">#切换目录</span></span><br><span class="line">ftp&gt; <span class="built_in">cd</span> pub</span><br><span class="line">250 Directory successfully changed.</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看当前目录下的文件</span></span><br><span class="line">ftp&gt; !<span class="built_in">ls</span> -l</span><br><span class="line">总用量 3048</span><br><span class="line">drwxr-xr-x. 2 admin admin       6 10月 12 05:13 Desktop</span><br><span class="line">drwxr-xr-x. 2 admin admin      19 11月 16 01:18 Documents</span><br><span class="line">drwxr-xr-x. 2 admin admin       6 10月 12 05:13 Downloads</span><br><span class="line">drwxr-xr-x. 2 admin admin       6 10月 12 05:13 Music</span><br><span class="line">drwxr-xr-x. 2 admin admin       6 10月 12 05:13 Pictures</span><br><span class="line">drwxr-xr-x. 2 admin admin       6 10月 12 05:13 Public</span><br><span class="line">drwxr-xr-x. 2 admin admin       6 10月 12 05:13 Templates</span><br><span class="line">drwxr-xr-x. 2 admin admin       6 10月 12 05:13 Videos</span><br><span class="line">-rw-r--r--. 1 root  root  3118130 8月   5 2012 wget-1.14.tar.gz</span><br><span class="line"><span class="comment">#上传文件测试</span></span><br><span class="line">ftp&gt; put wget-1.14.tar.gz</span><br><span class="line"><span class="built_in">local</span>: wget-1.14.tar.gz remote: wget-1.14.tar.gz</span><br><span class="line">227 Entering Passive Mode (192,168,18,128,72,253).</span><br><span class="line">553 Could not create file.</span><br></pre></td></tr></table></figure><p>上述上传文件时，遇到了553 Could not create file错误。解决方式如下：</p><ul><li><p>输入quit退出vsftpd，在ftp的目录创建一个目录，然后设置权限为777：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># mkdir /var/ftp/write</span></span><br><span class="line">[root@localhost admin]<span class="comment"># chmod -R 777 /var/ftp/write</span></span><br><span class="line">[root@localhost admin]<span class="comment"># vim /etc/vsftpd/vsftpd.conf</span></span><br></pre></td></tr></table></figure></p></li><li><p>然后修改位于/etc/vsftpd/vsftpd.conf的配置文件，在文件最后加上以下代码：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">local_root=/var/ftp</span><br></pre></td></tr></table></figure></p></li><li><p>杀死vsftpd进程，然后重启vsftpd服务器程序：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#杀死vsftpd进程</span></span><br><span class="line">[root@localhost admin]<span class="comment"># pkill vsftpd</span></span><br><span class="line"><span class="comment">#查看是否还有vsftpd进程</span></span><br><span class="line">[root@localhost admin]<span class="comment"># pgrep vsftpd</span></span><br><span class="line"><span class="comment">#启动vsftpd服务器</span></span><br><span class="line">[root@localhost admin]<span class="comment"># /usr/sbin/vsftpd &amp;</span></span><br><span class="line">[1] 61422</span><br><span class="line"><span class="comment">#查看是否有vsftpd进程</span></span><br><span class="line">[root@localhost admin]<span class="comment"># pgrep vsftpd</span></span><br><span class="line">61418</span><br></pre></td></tr></table></figure></p></li><li><p>然后再试试登录ftp上传文件：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#上传文件测试</span></span><br><span class="line">ftp&gt; put wget-1.14.tar.gz</span><br><span class="line"><span class="built_in">local</span>: wget-1.14.tar.gz remote: wget-1.14.tar.gz</span><br><span class="line">227 Entering Passive Mode (192,168,18,128,122,212).</span><br><span class="line">150 Ok to send data.</span><br><span class="line">226 Transfer complete.</span><br><span class="line">3118130 bytes sent <span class="keyword">in</span> 0.00845 secs (368834.88 Kbytes/sec)</span><br><span class="line"><span class="comment">#上传文件成功退出ftp</span></span><br><span class="line">ftp&gt; quit</span><br><span class="line">221 Goodbye.</span><br><span class="line"><span class="comment">#查看上传后的文件信息，文件属于ftp用户</span></span><br><span class="line">[root@localhost admin]<span class="comment"># ll /var/ftp/pub/</span></span><br><span class="line">总用量 3048</span><br><span class="line">-rw-------. 1 ftp ftp 3118130 11月 16 01:29 wget-1.14.tar.gz</span><br></pre></td></tr></table></figure></p></li></ul><h3 id="实名ftp设置">实名FTP设置</h3><p>除了配置匿名FTP服务外，vsftp还可以配置实名FTP服务器，以便实现更精确的权限控制。</p><p>实名需要的用户认证信息位于/etc/vsftpd/目录下，用户启动时可以单独指定其他的配置文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置文件使用vim /etc/vsftpd/vsftpd.conf修改为如下：</span></span><br><span class="line">[root@localhost admin]<span class="comment"># grep -v ^# /etc/vsftpd/vsftpd.conf</span></span><br><span class="line">anonymous_enable=NO  <span class="comment">#禁止匿名用户登录</span></span><br><span class="line">local_enable=YES    <span class="comment">#允许本地用户访问，默认为YES</span></span><br><span class="line">write_enable=YES  <span class="comment">#允许写入</span></span><br><span class="line">local_umask=022  <span class="comment">#上传后的文件默认的权限掩码</span></span><br><span class="line">anon_upload_enable=NO  <span class="comment">#匿名用户上传权限 </span></span><br><span class="line">anon_mkdir_write_enable=NO  <span class="comment">#匿名用户创建目录的同时上传文件</span></span><br><span class="line">anon_other_write_enable=NO  <span class="comment">#匿名用户删除权限</span></span><br><span class="line">chroot_local_user=YES <span class="comment">#禁止本地用户离开自己的ftp主目录</span></span><br><span class="line">chroot_list_enable=NO   <span class="comment">#禁止ftp用户离开自己的ftp主目录</span></span><br><span class="line">chroot_list_file=/etc/vsftpd.chroot_list  <span class="comment">#虚拟用户列表，每行一个用户名</span></span><br><span class="line">listen=YES</span><br><span class="line">listen_address=192.168.18.128  <span class="comment">#绑定本机ip</span></span><br><span class="line"></span><br><span class="line">pam_service_name=vsftpd.vu  <span class="comment">#验证方式</span></span><br><span class="line">local_root=/var/ftp  <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">guest_enable=YES  <span class="comment">#开启虚拟用户功能</span></span><br><span class="line">guest_username=ftp  <span class="comment">#虚拟用户的宿主目录</span></span><br><span class="line">virtual_use_local_privs=YES  <span class="comment">#用户登录后操作主目录和本地用户具有同样的权限</span></span><br><span class="line">user_config_dir=/etc/vsftpd/vconf  <span class="comment">#虚拟用户主目录设置文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#新建/etc/vsftpd.chroot_list文件</span></span><br><span class="line">[root@localhost admin]<span class="comment"># touch /etc/vsftpd.chroot_list</span></span><br><span class="line"><span class="comment">#编辑/etc/vsftpd.chroot_list如下，每行一个用户名</span></span><br><span class="line">[root@localhost admin]<span class="comment"># vim /etc/vsftpd.chroot_list</span></span><br><span class="line">[root@localhost admin]<span class="comment"># cat /etc/vsftpd.chroot_list</span></span><br><span class="line">user1</span><br><span class="line">user2</span><br><span class="line"></span><br><span class="line"><span class="comment">#增加用户并指定主目录</span></span><br><span class="line">[root@localhost admin]<span class="comment"># mkdir /data</span></span><br><span class="line">[root@localhost admin]<span class="comment"># mkdir /data/user1</span></span><br><span class="line">[root@localhost admin]<span class="comment"># mkdir /data/user2</span></span><br><span class="line">[root@localhost admin]<span class="comment"># chmod -R 775 /data/user1 /data/user2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置用户名密码数据库</span></span><br><span class="line">[root@localhost admin]<span class="comment"># echo -e &quot;user1\npass1\nuser2\npass2&quot;&gt;/etc/vsftpd/vusers.list</span></span><br><span class="line">[root@localhost admin]<span class="comment"># cd /etc/vsftpd</span></span><br><span class="line">[root@localhost vsftpd]<span class="comment"># db_load -T -t hash -f vusers.list vusers.db</span></span><br><span class="line">[root@localhost vsftpd]<span class="comment"># chmod 600 vusers.*</span></span><br><span class="line"><span class="comment">#指定认证方式</span></span><br><span class="line">[root@localhost vsftpd]<span class="comment"># echo -e &quot;#%PAM-1.0\n\nauth required pam_userdb.so db=/etc/vsftpd/vusers\naccount required pam_userdb.so db=/etc/vsftpd/vusers&quot;&gt;/etc/pam.d/vsftpd.vu</span></span><br><span class="line">[root@localhost vsftpd]<span class="comment"># mkdir -p /etc/vsftpd/vconf</span></span><br><span class="line">[root@localhost vsftpd]<span class="comment"># cd /etc/vsftpd/vconf</span></span><br><span class="line">[root@localhost vconf]<span class="comment"># ls</span></span><br><span class="line">[root@localhost vconf]<span class="comment"># touch user1</span></span><br><span class="line">[root@localhost vconf]<span class="comment"># touch user2</span></span><br><span class="line">[root@localhost vconf]<span class="comment"># ls</span></span><br><span class="line">user1  user2</span><br><span class="line"></span><br><span class="line"><span class="comment">#编辑用户的用户名文件，指定主目录</span></span><br><span class="line">[root@localhost vconf]<span class="comment"># vim user1</span></span><br><span class="line">[root@localhost vconf]<span class="comment"># cat user1</span></span><br><span class="line">local_root=/data/user1</span><br><span class="line">[root@localhost vconf]<span class="comment"># vim user2</span></span><br><span class="line">[root@localhost vconf]<span class="comment"># cat user2</span></span><br><span class="line">local_root=/data/user2</span><br><span class="line"><span class="comment">#创建标识文件</span></span><br><span class="line">[root@localhost vconf]<span class="comment"># touch /data/user1/user1</span></span><br><span class="line">[root@localhost vconf]<span class="comment"># touch /data/user2/user2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#若连接ftp显示连接被拒绝，重启vsftpd服务后即可解决</span></span><br><span class="line">[root@localhost vconf]<span class="comment"># ftp 192.168.18.128 21</span></span><br><span class="line">Connected to 192.168.18.128 (192.168.18.128).</span><br><span class="line">220 (vsFTPd 3.0.2)</span><br><span class="line"><span class="comment">#输入用户名user1</span></span><br><span class="line">Name (192.168.18.128:root): user1</span><br><span class="line">331 Please specify the password.</span><br><span class="line"><span class="comment">#密码为之前设置的pass1</span></span><br><span class="line">Password:</span><br><span class="line">230 Login successful.</span><br><span class="line">Remote system <span class="built_in">type</span> is UNIX.</span><br><span class="line">Using binary mode to transfer files.</span><br><span class="line"><span class="comment">#查看文件</span></span><br><span class="line">ftp&gt; <span class="built_in">ls</span></span><br><span class="line">227 Entering Passive Mode (192,168,18,128,47,84).</span><br><span class="line">150 Here comes the directory listing.</span><br><span class="line">-rw-r--r--    1 0        0               0 Nov 17 01:53 user1</span><br><span class="line">226 Directory send OK.</span><br><span class="line"><span class="comment">#退出vsftpd</span></span><br><span class="line">ftp&gt; quit</span><br><span class="line">221 Goodbye.</span><br><span class="line"></span><br><span class="line"><span class="comment">#测试用户user2</span></span><br><span class="line">[root@localhost vconf]<span class="comment"># ftp 192.168.18.128 21</span></span><br><span class="line">Connected to 192.168.18.128 (192.168.18.128).</span><br><span class="line">220 (vsFTPd 3.0.2)</span><br><span class="line">Name (192.168.18.128:root): user2</span><br><span class="line">331 Please specify the password.</span><br><span class="line">Password:</span><br><span class="line">230 Login successful.</span><br><span class="line">Remote system <span class="built_in">type</span> is UNIX.</span><br><span class="line">Using binary mode to transfer files.</span><br><span class="line">ftp&gt; <span class="built_in">ls</span></span><br><span class="line">227 Entering Passive Mode (192,168,18,128,75,91).</span><br><span class="line">150 Here comes the directory listing.</span><br><span class="line">-rw-r--r--    1 0        0               0 Nov 17 01:53 user2</span><br><span class="line">226 Directory send OK.</span><br><span class="line"><span class="comment">#退出vsftpd</span></span><br><span class="line">ftp&gt; quit</span><br><span class="line">221 Goodbye.</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">CentOS 7</summary>
    
    
    
    <category term="Linux" scheme="http://tangmenjue.top/categories/Linux/"/>
    
    <category term="操作系统" scheme="http://tangmenjue.top/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="学习笔记" scheme="http://tangmenjue.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="CentOS 7" scheme="http://tangmenjue.top/tags/CentOS-7/"/>
    
    <category term="Linux" scheme="http://tangmenjue.top/tags/Linux/"/>
    
    <category term="网络管理" scheme="http://tangmenjue.top/tags/%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js实战之博客页面前端</title>
    <link href="http://tangmenjue.top/2022/11/14/Vue.js%E5%AE%9E%E6%88%98%E4%B9%8B%E5%8D%9A%E5%AE%A2%E9%A1%B5%E9%9D%A2%E5%89%8D%E7%AB%AF/"/>
    <id>http://tangmenjue.top/2022/11/14/Vue.js%E5%AE%9E%E6%88%98%E4%B9%8B%E5%8D%9A%E5%AE%A2%E9%A1%B5%E9%9D%A2%E5%89%8D%E7%AB%AF/</id>
    <published>2022-11-14T09:33:51.000Z</published>
    <updated>2022-11-14T09:33:51.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基于vue-cli的前端项目初始化">基于Vue-cli的前端项目初始化</h1><h2 id="初始化">初始化</h2><p>Vue-cli环境配置详情见<a href="http://tangmenjue.top/2022/11/03/前端框架之Vue.js（一）/#/使用npm安装">前端框架之Vue.js（一）</a>安装小节里的“<strong>使用npm安装</strong>”内容。</p><ul><li><p>初始化一个新项目，创建文件夹tutorproject作为项目目录，打开一个终端将切换路径到tutorproject，运行代码以创建front-end文件夹：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject&gt; vue create front-end</span><br><span class="line"></span><br><span class="line">运行结果如下：</span><br><span class="line">Vue CLI v5.0.8</span><br><span class="line">? Please pick a preset: (Use arrow keys)</span><br><span class="line">&gt; first ([Vue 3] babel, eslint)</span><br><span class="line">  ssecond ([Vue 3] babel, eslint)</span><br><span class="line">  Default ([Vue 3] babel, eslint)</span><br><span class="line">  Default ([Vue 2] babel, eslint)</span><br><span class="line">  Manually select features</span><br></pre></td></tr></table></figure></p></li><li><p>使用方向键选中<code>Default ([Vue 2] babel, eslint)</code>选项后按下键盘上的回车键，然后脚手架工具就开始构建项目，并且安装所需的依赖。</p></li><li><p>将切换路径到front-end，运行代码以启动Vue应用程序：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject&gt; <span class="built_in">cd</span> front-end</span><br><span class="line">PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\front-end&gt; npm run serve</span><br></pre></td></tr></table></figure></p></li><li><p>打开浏览器输入网址<code>http://localhost:8080/</code>，即可看到应用程序：</p><p><img src="/2022/11/14/Vue.js%E5%AE%9E%E6%88%98%E4%B9%8B%E5%8D%9A%E5%AE%A2%E9%A1%B5%E9%9D%A2%E5%89%8D%E7%AB%AF/1.png"></p></li></ul><h2 id="组件ping.vue">组件Ping.vue</h2><p>将<code>\tutorproject\front-end\src\components</code>目录下的<code>HelloWorld.vue</code>文件删除，并在当前目录下新建文件<code>Ping.vue</code>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&#x27;Ping&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">msg</span>:<span class="string">&#x27;Hello,This is Ping.vue component&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在<code>tutorproject\front-end\src</code>目录下新建路由文件夹<code>router</code>，并在<code>router</code>文件夹中新建文件<code>index.js</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Router</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Ping</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/Ping&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Router</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Router</span>(&#123;</span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">            <span class="attr">name</span>:<span class="string">&#x27;Ping&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Ping</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>修改<code>front-end\src\App.vue</code>中<code>&lt;script&gt;...&lt;/script&gt;</code>部分的import代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">HelloWorld</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Ping.vue&#x27;</span></span></span><br></pre></td></tr></table></figure><p>修改<code>front-end\vue.config.js</code>文件的代码以关闭语法检查：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; defineConfig &#125; = <span class="built_in">require</span>(<span class="string">&#x27;@vue/cli-service&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">transpileDependencies</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">lintOnSave</span>:<span class="literal">false</span> <span class="comment">//关闭语法检查</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>此时的代码结构如下：</p><p><img src="/2022/11/14/Vue.js%E5%AE%9E%E6%88%98%E4%B9%8B%E5%8D%9A%E5%AE%A2%E9%A1%B5%E9%9D%A2%E5%89%8D%E7%AB%AF/2.png"></p><p>再次在浏览器中访问<code>http://localhost:8080/</code>，可以看到页面发生了变化：</p><p><img src="/2022/11/14/Vue.js%E5%AE%9E%E6%88%98%E4%B9%8B%E5%8D%9A%E5%AE%A2%E9%A1%B5%E9%9D%A2%E5%89%8D%E7%AB%AF/3.png"></p><h2 id="使用axios与api交互">使用axios与API交互</h2><p>在<code>cmd</code>中按下<code>ctrl+c</code>停止应用程序，使用以下命令安装axios:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\front-end&gt; cnpm install axios --save</span><br></pre></td></tr></table></figure><p>依赖关系自动写进了<code>front-end\package.json</code>中，在package.json文件的<code>dependencies</code>里可以看到刚安装的axios。</p><p>输入<code>npm run serve</code>重新启动<code>Vue</code>。</p><p>修改<code>\front-end\src\components\Ping.vue</code>中<code>&lt;script&gt;...&lt;/script&gt;</code>部分的代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&#x27;Ping&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">msg</span>:<span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">getMessage</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> path=<span class="string">&#x27;http://localhost:5000/api/ping&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      axios.<span class="title function_">get</span>(path)</span></span><br><span class="line"><span class="language-javascript">        .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">msg</span>=res.<span class="property">data</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">error</span>(error);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">created</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="title function_">getMessage</span>()</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>另外打开一个终端将切换路径到<code>tutorproject\back-end</code>（博客后端的项目文件），运行代码以运行flask服务端：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end&gt; venv\Scripts\activate</span><br><span class="line">(venv) PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end&gt; flask run</span><br></pre></td></tr></table></figure><p>此时在浏览器中访问<code>http://localhost:8080/</code>，可以看到页面再次发生了变化：</p><p><img src="/2022/11/14/Vue.js%E5%AE%9E%E6%88%98%E4%B9%8B%E5%8D%9A%E5%AE%A2%E9%A1%B5%E9%9D%A2%E5%89%8D%E7%AB%AF/4.png"></p><p>若没有获取到后端API端口的数据<code>pong!</code>，解决方案如下：</p><ul><li><p>停止flask的运行，使用pip安装<code>Flask-Cors</code>包</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(venv) PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end&gt; pip install flask-Cors</span><br><span class="line">(venv) PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end&gt; pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure></p></li><li><p>然后修改<code>tutorproject\back-end\tutorweb\__init__.py</code>：</p><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_cors <span class="keyword">import</span> CORS</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"><span class="keyword">from</span> flask_migrate <span class="keyword">import</span> Migrate</span><br><span class="line"><span class="keyword">from</span> config <span class="keyword">import</span> Config</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义Flack_SQLAlchemy</span></span><br><span class="line">db=SQLAlchemy()</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义Flack_Migrate </span></span><br><span class="line">migrate=Migrate()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_app</span>(<span class="params">config_class=Config</span>):</span><br><span class="line">    app=Flask(__name__)</span><br><span class="line">    app.config.from_object(config_class)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#启用CORS</span></span><br><span class="line">    CORS(app)</span><br><span class="line">    <span class="comment">#初始化Flack_SQLAlchemy</span></span><br><span class="line">    db.init_app(app)</span><br><span class="line">    <span class="comment">#初始化Flack_Migrate </span></span><br><span class="line">    migrate.init_app(app,db)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#注册blueprint</span></span><br><span class="line">    <span class="keyword">from</span> tutorweb.api <span class="keyword">import</span> bp <span class="keyword">as</span> api_bp</span><br><span class="line">    app.register_blueprint(api_bp,url_prefix=<span class="string">&#x27;/api&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> app </span><br><span class="line"><span class="keyword">from</span> tutorweb <span class="keyword">import</span> models</span><br></pre></td></tr></table></figure></p></li><li><p>然后再启动flask，访问<code>http://localhost:8080/</code>页面即可。</p></li></ul><h2 id="引入element-ui">引入element-UI</h2><p>使用<code>cnpm</code>命令安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\front-end&gt; cnpm install element-ui -S</span><br></pre></td></tr></table></figure><p>修改<code>\front-end\src\main.js</code>，引入element-UI样式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ElementUI</span> <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">ElementUI</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p>修改<code>\front-end\src\components\Ping.vue</code>中<code>&lt;template&gt;...&lt;/template&gt;</code>部分的代码，创建element-UI风格的按钮：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">round</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在浏览器中访问<code>http://localhost:8080/</code>，可以看到element-UI风格的按钮<code>pong!</code>：</p><p><img src="/2022/11/14/Vue.js%E5%AE%9E%E6%88%98%E4%B9%8B%E5%8D%9A%E5%AE%A2%E9%A1%B5%E9%9D%A2%E5%89%8D%E7%AB%AF/5.png"></p><p>至此，博客前端的欢迎页面完成，页面的具体样式可以根据自己的喜好自行更改。</p><p>博客后续的登录注册等页面，由于代码过多且繁杂，暂且不表，该部分的后续看心情更新。（除非...评论区呼声高，嗯！）</p>]]></content>
    
    
    <summary type="html">前端,Vue.js</summary>
    
    
    
    <category term="学习笔记" scheme="http://tangmenjue.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="前端" scheme="http://tangmenjue.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="前端框架" scheme="http://tangmenjue.top/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="Vue.js" scheme="http://tangmenjue.top/tags/Vue-js/"/>
    
    <category term="前端" scheme="http://tangmenjue.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>前端框架之Vue.js（六）</title>
    <link href="http://tangmenjue.top/2022/11/11/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E5%85%AD%EF%BC%89/"/>
    <id>http://tangmenjue.top/2022/11/11/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E5%85%AD%EF%BC%89/</id>
    <published>2022-11-11T09:20:06.000Z</published>
    <updated>2022-11-11T09:20:06.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="可复用性组合">可复用性&amp;组合</h1><h2 id="混入">混入</h2><h3 id="基础">基础</h3><p>混入用于分发Vue组件中是可复用功能。一个混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被“混合”进入该组件本身的选项。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个混入对象</span></span><br><span class="line"><span class="keyword">var</span> myMixin=&#123;</span><br><span class="line">  <span class="attr">created</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">hello</span>()</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="attr">hello</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello from mixin!&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义一个使用混入对象的组件</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Component</span>=<span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span><br><span class="line">  <span class="attr">mixins</span>:[myMixin]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">var</span> component=<span class="keyword">new</span> <span class="title class_">Component</span>()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="选项合并">选项合并</h3><p>当组件和混入对象含有同名选项时，这些选项将以恰当的方式进行合并。如数据对象在内部会进行递归合并，并在发生冲突时会以组件数据为优先：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myMixin=&#123;</span><br><span class="line">  <span class="attr">data</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">      <span class="attr">message</span>:<span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line">      <span class="attr">foo</span>:<span class="string">&#x27;abc&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">mixins</span>:[myMixin],</span><br><span class="line">  <span class="attr">data</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">      <span class="attr">message</span>:<span class="string">&#x27;goodbye&#x27;</span>,</span><br><span class="line">      <span class="attr">bar</span>:<span class="string">&#x27;def&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">created</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$data</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">/*合并结果为:</span></span><br><span class="line"><span class="comment">&#123; message: &quot;goodbye&quot;, foo: &quot;abc&quot;, bar: &quot;def&quot; &#125;*/</span></span><br></pre></td></tr></table></figure><p>同名钩子函数将合并为一个数组，因此都将被调用。<strong>混入对象的钩子将在组件自身钩子之前被调用。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myMixin=&#123;</span><br><span class="line">  <span class="attr">created</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;混入对象的钩子被调用&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">mixins</span>:[myMixin],</span><br><span class="line">  <span class="attr">created</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;组件钩子被调用&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">created</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$data</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">/*合并结果为：</span></span><br><span class="line"><span class="comment">混入对象的钩子被调用</span></span><br><span class="line"><span class="comment">组件钩子被调用*/</span></span><br></pre></td></tr></table></figure><p>值为对象的选项如<code>methods</code>、<code>components</code>和<code>directives</code>，将被合并为同一个对象。两个对象键名冲突时，取组件对象的键值对：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mixin=&#123;</span><br><span class="line">  <span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="attr">foo</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">conflicting</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;from mixin&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> vm=<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">mixins</span>:[mixin],</span><br><span class="line">  <span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="attr">bar</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;bar&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">conflicting</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;from self&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">vm.<span class="title function_">foo</span>()</span><br><span class="line">vm.<span class="title function_">bar</span>()</span><br><span class="line">vm.<span class="title function_">conflicting</span>()</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">foo</span></span><br><span class="line"><span class="comment">bar</span></span><br><span class="line"><span class="comment">from self*/</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong><code>Vue.extend()</code>也使用同样的策略进行合并</p><h3 id="全局混入">全局混入</h3><p>混入也可以进行全局注册。一旦使用全局混入，它将影响每一个之后创建的Vue实例。<strong>恰当使用时</strong>，可以用来为自定义选项注入处理逻辑。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//为自定义的选项myOption注入一个处理器</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">mixin</span>(&#123;</span><br><span class="line"> <span class="attr">created</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> myOption=<span class="variable language_">this</span>.<span class="property">$options</span>.<span class="property">myOption</span></span><br><span class="line">  <span class="keyword">if</span>(myOption)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(myOption)</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">myOption</span>:<span class="string">&#x27;hello!&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">hello!*/</span></span><br></pre></td></tr></table></figure><h3 id="自定义选项合并策略">自定义选项合并策略</h3><p>自定义选项合并将使用默认策略，即简单地覆盖已有值。若想让自定义选项以自定义逻辑合并，可以向<code>Vue.config.optionMergeStrategies</code>添加一个函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">optionMergeStrategies</span>.<span class="property">myOption</span>=<span class="keyword">function</span>(<span class="params">toVal,fromVal</span>)&#123;</span><br><span class="line">  <span class="comment">//返回合并后的值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于多数值为对象的选项，可以使用与<code>methods</code>相同的合并策略：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> strategies=<span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">optionMergeStrategies</span></span><br><span class="line">strategies.<span class="property">myOption</span>=strategies.<span class="property">methods</span></span><br></pre></td></tr></table></figure><h2 id="过滤器">过滤器</h2><p>Vue.js允许自定义过滤器，可被用于一些常见的文本格式化。<strong>过滤器可以用在两个地方：双花括号插值和<code>v-bind</code>表达式。</strong>过滤器应该被添加在JavaScript表达式的尾部，由“管道符号”表示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在双花括号中 --&gt;</span></span><br><span class="line">&#123;&#123;message | capitalize&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 在v-bind中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">&quot;rawId | formatId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以在一个组件的选项中定义本地的过滤器：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">filters</span>:&#123;</span><br><span class="line">  <span class="attr">capitalize</span>:<span class="keyword">function</span>(<span class="params">value</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!value) <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    value=value.<span class="title function_">toString</span>()</span><br><span class="line">    <span class="keyword">return</span> value.<span class="title function_">charAt</span>(<span class="number">0</span>).<span class="title function_">toUpperCase</span>()+value.<span class="title function_">slice</span>(<span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以在创建Vue实例之前全局定义过滤器：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">filters</span>(<span class="string">&#x27;capitalize&#x27;</span>,<span class="keyword">function</span>(<span class="params">value</span>)&#123;</span><br><span class="line">  <span class="keyword">if</span>(!value) <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  value=value.<span class="title function_">toString</span>()</span><br><span class="line">  <span class="keyword">return</span> value.<span class="title function_">charAt</span>(<span class="number">0</span>).<span class="title function_">toUpperCase</span>()+value.<span class="title function_">slice</span>(<span class="number">1</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>当全局过滤器和局部过滤器重名时，会采用局部过滤器。</p><p>过滤器函数总接收表达式的值作为第一个参数。如上述代码中，<code>capitalize</code>过滤器函数将会收到<code>message</code>的值作为第一个参数。</p><p>过滤器可以串联：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;message&#125;&#125; | filterA | filterB&#125;&#125;</span><br><span class="line"><span class="comment">&lt;!-- filterA为接收单个参数的过滤器参数，message值将作为参数传入到filterA中</span></span><br><span class="line"><span class="comment">然后调用fliterB，将filterA的结果传递到fliterB中 --&gt;</span></span><br></pre></td></tr></table></figure><p>过滤器是JavaScript函数，因此可以接收参数：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;message&#125;&#125; | filterA(&#x27;arg1&#x27;,arg2)&#125;&#125;</span><br><span class="line"><span class="comment">&lt;!-- filterA为接收三个参数的过滤器参数</span></span><br><span class="line"><span class="comment">message值将作为第一个参数，普通字符串arg1作为第二个参数，表达式arg2的值作为第三个参数 --&gt;</span></span><br></pre></td></tr></table></figure><h1 id="从零开始简单的路由">从零开始简单的路由</h1><p>若只需要非常简单的路由而不想引入一个功能完整的路由库，可以想这样动态渲染一个页面级的组件，结合HTML5 History API，便可以搭建一个客户端路由：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">NotFound</span>=&#123;<span class="attr">template</span>:<span class="string">&#x27;&lt;p&gt;Page not found&lt;/p&gt;&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Home</span>=&#123;<span class="attr">template</span>:<span class="string">&#x27;&lt;p&gt;Home Page&lt;/p&gt;&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">About</span>=&#123;<span class="attr">template</span>:<span class="string">&#x27;&lt;p&gt;About Page&lt;/p&gt;&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes=&#123;</span><br><span class="line">  <span class="string">&#x27;/&#x27;</span>:<span class="title class_">Home</span>,</span><br><span class="line">  <span class="string">&#x27;/about&#x27;</span>:<span class="title class_">About</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>:&#123;</span><br><span class="line">    <span class="attr">currentRoute</span>:<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">pathname</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">computed</span>:&#123;</span><br><span class="line">    <span class="title class_">ViewComponent</span>()&#123;</span><br><span class="line">      <span class="keyword">return</span> routes[<span class="variable language_">this</span>.<span class="property">crruentRoute</span>]||<span class="title class_">NotFound</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">render</span>(<span class="params">h</span>)&#123;<span class="keyword">return</span> <span class="title function_">h</span>(<span class="variable language_">this</span>.<span class="property">ViewComponent</span>)&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="vue-router路由基础">vue-router路由基础</h1><p>对于大多数单页面应用，推荐使用官方支持的vue-router库。</p><h2 id="下载安装">下载安装</h2><p>使用npm下载vue-router库：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-router@4</span><br></pre></td></tr></table></figure><h2 id="rounter-link"><code>rounter-link</code></h2><p>在vue-router里，不是使用常规的<code>&lt;a&gt;</code>标签，而是使用一个自定义组件<code>rounter-link</code>来创建链接。这样Vue Router可以在不重新加载页面的情况下更改URL，处理URL的生成及编码。</p><h2 id="rounter-view"><code>rounter-view</code></h2><p><code>rounter-view</code>将显示与URL对应的组件，可以将其放在任何地方。</p><p>使用Vue Router创建单页应用例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue-router@4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello App！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用router-link组件进行导航 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 通过传递to来指定连接 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;rounter-link&gt;将呈现以一个带有正确href属性的&lt;a&gt;标签 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>Go to Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>Go to About<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 路由出口 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 路由匹配到的组件将渲染在这里 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//定义路由组件,也可以从其他文件中导入</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title class_">Home</span>=&#123;<span class="attr">template</span>:<span class="string">&#x27;&lt;div&gt;Home&lt;/div&gt;&#x27;</span>&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title class_">About</span>=&#123;<span class="attr">template</span>:<span class="string">&#x27;&lt;div&gt;About&lt;/div&gt;&#x27;</span>&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//定义一些路由.每个路由都需要映射到一个组件中</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> routes=[</span></span><br><span class="line"><span class="language-javascript">  &#123;<span class="attr">path</span>:<span class="string">&#x27;/&#x27;</span>,<span class="attr">component</span>:<span class="title class_">Home</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">  &#123;<span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,<span class="attr">component</span>:<span class="title class_">About</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">]</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 创建路由实例并传递routes配置</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> router=<span class="title class_">VueRouter</span>.<span class="title function_">createRouter</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 内部提供了history模式的实现,为了简便,这里使用hash模式</span></span></span><br><span class="line"><span class="language-javascript">  <span class="attr">history</span>:<span class="title class_">VueRouter</span>.<span class="title function_">createWebHashHistory</span>(),</span></span><br><span class="line"><span class="language-javascript">  routes,<span class="comment">//这句为routes:routes的缩写</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 创建并挂载根示例</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> app=<span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 确保user路由实例使整个应用支持路由</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 在任意组件中能以this.$router的形式访问它,且能以this.$route的形式访问当前路由</span></span></span><br><span class="line"><span class="language-javascript">app.<span class="title function_">use</span>(router)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 启动应用</span></span></span><br><span class="line"><span class="language-javascript">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过调用<code>app.use(router)</code>，可以在任意组件中以<code>this.$router</code>的形式访问它,且能以<code>this.$route</code>的形式访问当前路由：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Home.vue文件中</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">  <span class="attr">computed</span>:&#123;</span><br><span class="line">    <span class="title function_">username</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">params</span>.<span class="property">username</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="title function_">goToDashboard</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="keyword">if</span>(isAuthenticated)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&#x27;/dashboard&#x27;</span>)</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&#x27;/login&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要在<code>setup</code>函数中访问路由，则可以调用<code>useRouter</code>或<code>useRoute</code>函数。</p><h2 id="动态路由匹配">动态路由匹配</h2><h3 id="带参数的动态路由匹配">带参数的动态路由匹配</h3><p>很多时候需要将给定匹配模式的路由映射到同一个组件中。例如有一个<code>User</code>组件，它应该对所有用户进行渲染，但用户ID不同。在Vue Router中，可以在路径中使用一个动态字段来实现，该字段称之为路径参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">User</span>=&#123;</span><br><span class="line">  <span class="attr">template</span>:<span class="string">&#x27;&lt;div&gt;User&lt;/div&gt;&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这些都会传递给createRouter</span></span><br><span class="line"><span class="keyword">const</span> routes=[</span><br><span class="line">  <span class="comment">//动态字段以冒号开始</span></span><br><span class="line">  &#123;<span class="attr">path</span>:<span class="string">&#x27;/users/:id&#x27;</span>,<span class="attr">component</span>:<span class="title class_">User</span>&#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>这样不同用户的URL都会映射到同一个路由上。</p><p>路径参数用冒号<code>:</code>表示。当一个路由被匹配时，它的<code>params</code>的值将在每个组件中以<code>this.$route.params</code>的形式暴露出来。因此可以通过更新<code>User</code>的模板来呈现当前的用户ID：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">User</span>=&#123;</span><br><span class="line">    <span class="attr">template</span>:<span class="string">&#x27;&lt;div&gt;User&#123;&#123;$route.params.id&#125;&#125;&lt;/div&gt;&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以在同一个路由中设置有多个路径参数，它们会映射到<code>$route.params</code>上的相应字段上。</p><table><colgroup><col style="width: 31%"><col style="width: 25%"><col style="width: 42%"></colgroup><thead><tr class="header"><th style="text-align: left;">匹配模式</th><th>匹配路径</th><th style="text-align: left;">$route.params</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">/users/:username</td><td>/users/eduardo</td><td style="text-align: left;"><code>&#123; username: 'eduardo' &#125;</code></td></tr><tr class="even"><td style="text-align: left;">/users/:username/posts/:postId</td><td>/users/eduardo/posts/123</td><td style="text-align: left;"><code>&#123; username: 'eduardo', postId: '123' &#125;</code></td></tr></tbody></table><p>除了<code>$route.params</code>之外，<code>route</code>对象还公开了其他有用的信息，如<code>route.query</code>（若URL中存在参数）、<code>$route.hash</code>等。</p><h3 id="相应路由参数的变化">相应路由参数的变化</h3><p>使用带有参数的路由时需要注意的时，当用户从<code>/users/johnny</code>导航到<code>/users/jolyne</code>时，<strong>相同的组件实例将会被重复使用，这也意味着组件的生命周期钩子不会被调用。</strong></p><p>要对同一个组件中参数的变化做出相应，可以用watch <code>$route</code>对象上的任意属性，如下列代码中是<code>$route.params</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">User</span>=&#123;</span><br><span class="line">  <span class="attr">template</span>:<span class="string">&#x27;...&#x27;</span>,</span><br><span class="line">  <span class="title function_">created</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.$watch(</span><br><span class="line">      <span class="function">()=&gt;</span><span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">params</span>,</span><br><span class="line">      <span class="function">(<span class="params">toParams,previousParams</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//对路由变化做出响应</span></span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或使用<code>beforeRouteUpdate</code>导航守卫，也可以取消导航：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">User</span>=&#123;</span><br><span class="line">  <span class="attr">template</span>:<span class="string">&#x27;...&#x27;</span>,</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">beforeRouteUpdate</span>(<span class="params">to,<span class="keyword">from</span></span>)&#123;</span><br><span class="line">    <span class="comment">//对路由变化做出响应</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">userData</span>=<span class="keyword">await</span> <span class="title function_">fetchUser</span>(to,params.<span class="property">id</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="捕获所有路由或404-not-found路由">捕获所有路由或404 Not found路由</h3><p>常规参数只匹配url片段之间的字符，用<code>/</code>分隔。若想匹配任意路径，可使用自定义的路径参数正则表达式，在路径参数后面的括号中加入正则表达式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes=[</span><br><span class="line">  <span class="comment">//将匹配所有内容并将其放在$route.params.pathMatch下</span></span><br><span class="line">  <span class="comment">//pathMatch标记为可选可重复,可以在需要时将path拆分成数组,直接导航到路由</span></span><br><span class="line">  &#123;<span class="attr">path</span>:<span class="string">&#x27;/:pathMatch(.*)*&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;NotFound&#x27;</span>,<span class="attr">component</span>:<span class="title class_">NotFound</span>&#125;,</span><br><span class="line">  <span class="comment">//将匹配以/user-开头的所有内容并将其放在$route.params.afterUser下</span></span><br><span class="line">  &#123;<span class="attr">path</span>:<span class="string">&#x27;/user-:afterUser(.*)&#x27;</span>,<span class="attr">component</span>:<span class="title class_">UserGeneric</span>&#125;,</span><br><span class="line">]</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;NotFound&#x27;</span>,</span><br><span class="line">  <span class="comment">//保留当前路径并删除第一个字符,以避免目标URL以//开头</span></span><br><span class="line">  <span class="attr">params</span>:&#123;<span class="attr">pathMatch</span>:<span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">path</span>.<span class="title function_">substring</span>(<span class="number">1</span>).<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>)&#125;,</span><br><span class="line">  <span class="comment">//保留现有的查询和hash值</span></span><br><span class="line">  <span class="attr">query</span>:<span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">query</span>,</span><br><span class="line">  <span class="attr">hash</span>:<span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">hash</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="高级匹配模式">高级匹配模式</h3><p>Vue Router使用自己的路径匹配语法，它支持许多高级匹配模式，如可选的参数，零或多个/一个或多个，甚至是自定义的正则匹配规则。</p><h2 id="路由的匹配语法">路由的匹配语法</h2><h3 id="在参数中自定义正则">在参数中自定义正则</h3><p>当定义像<code>:userId</code>这样的参数时，在内部使用以下正则<code>([^/]+)</code>（至少有一个字符不是斜杠<code>/</code>）来从URL中提取参数。这个方法很好用，除非是需要根据参数的内容来区分两个路由，此时最简单的方法是在路径中添加一个静态部分来区分它们：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes=[</span><br><span class="line">  <span class="comment">//匹配/0/3549</span></span><br><span class="line">  &#123;<span class="attr">path</span>:<span class="string">&#x27;/o/:orderId&#x27;</span>&#125;,</span><br><span class="line">  <span class="comment">//匹配/p/books</span></span><br><span class="line">  &#123;<span class="attr">path</span>:<span class="string">&#x27;/p/:productName&#x27;</span>&#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>但在一些情况下，并不想添加静态的<code>/o</code>、<code>/p</code>部分。由于<code>orderId</code>总是一个数字，而<code>productName</code>可以是任何东西，因此可以在括号中为参数指定一个自定义的正则：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes=[</span><br><span class="line">  <span class="comment">// /:orderId只匹配数字</span></span><br><span class="line">  <span class="comment">//&#x27;\\dd&#x27;是为了确保反斜杠能被转义出来</span></span><br><span class="line">  &#123;<span class="attr">path</span>:<span class="string">&#x27;/:orderId(\\d+)&#x27;</span>&#125;,</span><br><span class="line">  <span class="comment">// /:productName匹配其他任何内容</span></span><br><span class="line">  &#123;<span class="attr">path</span>:<span class="string">&#x27;/:productName&#x27;</span>&#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="可重复的参数">可重复的参数</h3><p>若需要匹配具有多个部分的路由，如<code>/first/second/third</code>，则应该使用<code>*</code>（0个或多个）和<code>+</code>（1个或多个）将参数标记为可重复：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes=[</span><br><span class="line">  <span class="comment">//匹配1个以上的参数,如/one,/one/two,/one/two/three等</span></span><br><span class="line">  &#123;<span class="attr">path</span>:<span class="string">&#x27;/:chapters+&#x27;</span>&#125;,</span><br><span class="line">  <span class="comment">//匹配0个以上的参数,如/,/one,/one/two,/one/two/three等</span></span><br><span class="line">  &#123;<span class="attr">path</span>:<span class="string">&#x27;/:chapters*&#x27;</span>&#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>这将是提供一个参数数组而不是一个字符串，并且在使用命名路由时也需要传递一个数组：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给定&#123;path:&#x27;/:chapters*&#x27;,name:&#x27;chapters&#x27;&#125;,</span></span><br><span class="line">router.<span class="title function_">resolve</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;chapters&#x27;</span>,<span class="attr">params</span>:&#123;<span class="attr">chapters</span>:[]&#125;&#125;).<span class="property">href</span><span class="comment">//产生路由/</span></span><br><span class="line">router.<span class="title function_">resolve</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;chapters&#x27;</span>,<span class="attr">params</span>:&#123;<span class="attr">chapters</span>:[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>]&#125;&#125;).<span class="property">href</span><span class="comment">//产生路由/a/b</span></span><br><span class="line"><span class="comment">//给定&#123;path:&#x27;/:chapters+&#x27;,name:&#x27;chapters&#x27;&#125;,</span></span><br><span class="line">router.<span class="title function_">resolve</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;chapters&#x27;</span>,<span class="attr">params</span>:&#123;<span class="attr">chapters</span>:[]&#125;&#125;).<span class="property">href</span><span class="comment">//chapters为空,抛出错误</span></span><br></pre></td></tr></table></figure><p>这些也可以通过右括号后添加它们与自定义正则结合使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes=[</span><br><span class="line">  <span class="comment">//只匹配1个以上的数字,如/1,/1/2,/1/2/3等</span></span><br><span class="line">  &#123;<span class="attr">path</span>:<span class="string">&#x27;/:chapters(\\d+)+&#x27;</span>&#125;,</span><br><span class="line">  <span class="comment">//匹配0个以上的数字,如/,/1,/1/2,/1/2/3等</span></span><br><span class="line">  &#123;<span class="attr">path</span>:<span class="string">&#x27;/:chapters(\\d+)*&#x27;</span>&#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="sensitive与strict路由配置">Sensitive与strict路由配置</h3><p>默认情况下，所有路由是不区分大小写的，且能匹配带有或不带有尾部斜线的路由。这种行为可以通过<code>sensitive</code>和<code>strict</code>选项来修改，它们既可以应用在整个全局路由上，又可以应用在当前路由上：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router=<span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>:<span class="title function_">createWebHistory</span>(),</span><br><span class="line">  <span class="attr">routes</span>:[</span><br><span class="line">    <span class="comment">//匹配/users/zhangsan</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    当strict:true时,不匹配/users/zhangsan/</span></span><br><span class="line"><span class="comment">    当sensitive:true时,不匹配/Users/zhangsan</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">&#x27;/users/:id&#x27;</span>,<span class="attr">sensitive</span>:<span class="literal">true</span>&#125;,</span><br><span class="line">    <span class="comment">//匹配/users,/Users,以及/users/42,不匹配/users/或users/42/</span></span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">&#x27;/users/:id?&#x27;</span>&#125;,</span><br><span class="line">  ]</span><br><span class="line">  <span class="attr">strict</span>:<span class="literal">true</span>,<span class="comment">//应用于所有路由</span></span><br><span class="line">  <span class="attr">sensitive</span>:<span class="literal">true</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="可选参数">可选参数</h3><p>也可以通过使用<code>?</code>修饰符（0个或1个）将一个参数标记为可选：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routers=[</span><br><span class="line">  <span class="comment">//匹配/users和/users/zhangsan</span></span><br><span class="line">  &#123;<span class="attr">path</span>:<span class="string">&#x27;/users/:userId?&#x27;</span>&#125;,</span><br><span class="line">  <span class="comment">//匹配/users和/users/42</span></span><br><span class="line">  &#123;<span class="attr">path</span>:<span class="string">&#x27;/users/:userID(\\d)?&#x27;</span>&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="命名路由">命名路由</h2><p>除了<code>path</code>外，还可以为任何路由提供<code>name</code>。命名路由有以下优点：</p><ul><li>没有硬编码的URL</li><li><code>params</code>的自动编码/解码</li><li>防止在URL中出现打字错误</li><li>绕过路径排序（如显示1个）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> route=[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/user/:username&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="title class_">User</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>链接一个命名路由，可以向<code>router-link</code>组件的<code>to</code>属性传递一个对象：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;name:&#x27;user&#x27;,params:&#123;username:&#x27;lisi&#x27;&#125;&#125;&quot;</span>&gt;</span>User<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 等价于 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  router.<span class="title function_">push</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;user&#x27;</span>,<span class="attr">params</span>:&#123;<span class="attr">username</span>:<span class="string">&#x27;lisi&#x27;</span>&#125;&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 两种方法路由都将导航到路径/user/lisi中 --&gt;</span></span><br></pre></td></tr></table></figure><h3 id="嵌套路由">嵌套路由</h3><p>通过Vue Router可以使用嵌套路由配置来对于应用程序的多层嵌套组件结构：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 这是一个顶层的router-view,其渲染顶层路由匹配的组件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title class_">User</span>=&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//被渲染的组件中包含自己嵌套的router-view</span></span></span><br><span class="line"><span class="language-javascript">  <span class="attr">template</span>:<span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">    &lt;div class=&quot;User&quot;&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">      &lt;h2&gt;User&#123;&#123;$route.params.id&#125;&#125;&lt;/h2&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">      &lt;router-view&gt;&lt;/router-view&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">    &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">      `</span>,</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//这些传递给createRouter</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> routes=[</span></span><br><span class="line"><span class="language-javascript">  &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//当/user/:id/profile匹配成功时,UserProfile将被渲染到User的router-view内部</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">path</span>:<span class="string">&#x27;/user/:id&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">component</span>:<span class="title class_">User</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//将组件渲染到嵌套的router-view中  </span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">children</span>:[</span></span><br><span class="line"><span class="language-javascript">      &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">path</span>:<span class="string">&#x27;profile&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">component</span>:<span class="title class_">UserProfile</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//当/user/:id/posts匹配成功时,UserPosts将被渲染到User的router-view内部</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">path</span>:<span class="string">&#x27;posts&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">component</span>:<span class="title class_">UserPosts</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">    ],</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">]</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意：以<code>/</code>开头的嵌套路径将被视为根路径，这便允许利用组件嵌套而不必使用嵌套URL。</strong></p><p>上述代码中<code>children</code>的配置只是另一个路由数组。因此可以根据需要，不断地嵌套视图。</p><p>由于没有匹配到嵌套路由，当访问<code>/user/eduardo</code>时，在<code>User</code>的<code>router-view</code>里什么都不会呈现。若想在那里渲染一些东西，可以提供一个空的嵌套路径：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes=[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/user/:id&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="title class_">User</span>,</span><br><span class="line">    <span class="attr">children</span>:[</span><br><span class="line">      &#123; <span class="comment">//当/user/:id匹配成功时,UserHome将被渲染到User的router-view内部</span></span><br><span class="line">        <span class="attr">path</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>:<span class="title class_">UserHome</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">//其他子路由</span></span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="嵌套命名路由">嵌套命名路由</h3><p>在处理命名路由时，通常会给子路由命名如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes=[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/user/:id&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="title class_">User</span>,</span><br><span class="line">    <span class="attr">children</span>:[</span><br><span class="line">      &#123; <span class="comment">//只有子路由具有名称</span></span><br><span class="line">        <span class="attr">path</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>:<span class="title class_">UserHome</span></span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>这将确保导航到<code>/user/:id</code>时始终显示嵌套路由。</p><p>若希望<strong>导航到命名路由而不导航到嵌套路由</strong>，还可以<strong>命名父路由</strong>，但要<strong>注意重新加载页面将始终显示嵌套的子路由</strong>，这是以为它被指向路径<code>/users/:id</code>的导航，而不是命名路由：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes=[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/user/:id&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;user-parent&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="title class_">User</span>,</span><br><span class="line">    <span class="attr">children</span>:[</span><br><span class="line">      &#123; </span><br><span class="line">        <span class="attr">path</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>:<span class="title class_">UserHome</span></span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="命名视图">命名视图</h2><p>命名视图可以同时展示多个视图而不是嵌套展示。一个界面中可以拥有多个单独命名的视图，而不是只有一个单独的出口。若<code>router-view</code>没有设置名字，则默认为<code>default</code>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-view</span> <span class="attr">class</span>=<span class="string">&quot;view left-sidebar&quot;</span> <span class="attr">name</span>=<span class="string">&quot;LeftSidevar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span> <span class="attr">class</span>=<span class="string">&quot;view main-content&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span> <span class="attr">class</span>=<span class="string">&quot;view right-sidebar&quot;</span> <span class="attr">name</span>=<span class="string">&quot;RightSidebar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一个视图使用一个组件渲染。因此在同一个路由下，多个视图就需要多个组件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router=<span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>:<span class="title function_">createWebHashHistory</span>(),</span><br><span class="line">  <span class="attr">routes</span>:[</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>:<span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">      <span class="attr">components</span>:&#123;</span><br><span class="line">        <span class="attr">default</span>:<span class="title class_">Home</span>,</span><br><span class="line">        <span class="comment">//LeftSidebar:LeftSidebar的缩写</span></span><br><span class="line">        <span class="title class_">LeftSidebar</span>,</span><br><span class="line">        <span class="comment">//与&lt;router-view&gt;上的name属性相匹配</span></span><br><span class="line">        <span class="title class_">RightSidebar</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="嵌套命名视图">嵌套命名视图</h3><p>当要实现切换路由的同时，其页面下的视图也要从一个<code>UserEmailsSubscriptions</code>切换成两个<code>UserProfile</code>和<code>UserProfilePreview</code>，便应使用命名视图来创建嵌套视图的布局：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/settings/emails                                       /settings/profile</span><br><span class="line">+-----------------------------------+                  +------------------------------+</span><br><span class="line">| UserSettings                      |                  | UserSettings                 |</span><br><span class="line">| +-----+-------------------------+ |                  | +-----+--------------------+ |</span><br><span class="line">| | Nav | UserEmailsSubscriptions | |  +------------&gt;  | | Nav | UserProfile        | |</span><br><span class="line">| |     +-------------------------+ |                  | |     +--------------------+ |</span><br><span class="line">| |     |                         | |                  | |     | UserProfilePreview | |</span><br><span class="line">| +-----+-------------------------+ |                  | +-----+--------------------+ |</span><br><span class="line">+-----------------------------------+                  +------------------------------+</span><br></pre></td></tr></table></figure><ul><li><code>Nav</code> 是一个常规组件</li><li><code>UserSettings</code> 是一个视图组件</li><li><code>UserEmailsSubscriptions</code>、<code>UserProfile</code>、<code>UserProfilePreview</code> 是嵌套的视图组件</li></ul><p><code>UserSetting</code>组件的<code>&lt;template&gt;</code>部分大致如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>User Settings<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">NavVar</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">&quot;helper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过这个路由配置来实现上述布局：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router=<span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>:[</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>:<span class="string">&#x27;/settings&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>:<span class="title class_">UserSettings</span>,</span><br><span class="line">      <span class="attr">children</span>:[&#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&#x27;emails&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>:<span class="title class_">UserEmailsSubscriptions</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>:<span class="string">&#x27;profile&#x27;</span>,</span><br><span class="line">      <span class="attr">components</span>:&#123;</span><br><span class="line">        <span class="attr">default</span>:<span class="title class_">UserProfile</span>,</span><br><span class="line">        <span class="attr">helper</span>:<span class="title class_">UserProfilePreview</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="编程式导航">编程式导航</h2><h3 id="使用router.push导航到不同的位置">使用<code>router.push</code>导航到不同的位置</h3><p>若想要导航到不同的URL，可以使用<code>router.push</code>方法向history栈添加一个新的记录，当用户点击浏览器后退按钮时，会回到之前的URL。</p><p>当点击<code>&lt;router-link&gt;</code>时，内部会调用<code>router.push</code>这个方法。因此点击<code>&lt;router-link :to="..."&gt;</code>便相当于调用<code>router.push(...)</code>：</p><table><thead><tr class="header"><th>声明式</th><th>编程式</th></tr></thead><tbody><tr class="odd"><td><code>&lt;router-link :to="..."&gt;</code></td><td><code>router.push(...)</code></td></tr></tbody></table><p><strong>注意：</strong>在Vue实例中，可以通过<code>$router</code>访问路由实例，因此也可以在实例中调用<code>this.$router.push</code>。</p><p><code>router.push</code>方法的参数可以时一个字符串路径，或者一个描述地址的对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串路径</span></span><br><span class="line">router.<span class="title function_">push</span>(<span class="string">&#x27;/users/zhangsan&#x27;</span>)</span><br><span class="line"><span class="comment">// 带有路径的对象</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123;<span class="attr">path</span>:<span class="string">&#x27;/users/zhangsan&#x27;</span>&#125;)</span><br><span class="line"><span class="comment">// 命名的路由，并加上参数，让路由建立url</span></span><br><span class="line"><span class="comment">// 注意params不能与path一起使用，若提供了path,params会被忽略，而query不会</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;user&#x27;</span>,<span class="attr">params</span>:&#123;<span class="attr">username</span>:<span class="string">&#x27;zhangsan&#x27;</span>&#125;&#125;)</span><br><span class="line"><span class="comment">// 带查询参数，其结果是/register?plan=private</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123;<span class="attr">path</span>:<span class="string">&#x27;/register&#x27;</span>,<span class="attr">query</span>:&#123;<span class="attr">plan</span>:<span class="string">&#x27;private&#x27;</span>&#125;&#125;)</span><br><span class="line"><span class="comment">// 带hash，其结果是/about#team</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123;<span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,<span class="attr">hash</span>:<span class="string">&#x27;#team&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> username=<span class="string">&#x27;zhangsan&#x27;</span></span><br><span class="line"><span class="comment">// 可以手动建立url，但必须自己处理编码</span></span><br><span class="line">router.<span class="title function_">push</span>(<span class="string">`/user/<span class="subst">$&#123;username&#125;</span>`</span>)<span class="comment">//其结果为/user/zhangsan</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123;<span class="attr">path</span>:<span class="string">`/user/<span class="subst">$&#123;username&#125;</span>`</span>&#125;)<span class="comment">//其结果为/user/zhangsan</span></span><br><span class="line"><span class="comment">// 使用name和params从自动url编码中获益</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;user&#x27;</span>,<span class="attr">params</span>:&#123;username&#125;&#125;)<span class="comment">//其结果为/user/zhangsan</span></span><br><span class="line"><span class="comment">//params不能与path一起使用</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123;<span class="attr">path</span>:<span class="string">&#x27;/user&#x27;</span>,<span class="attr">params</span>:&#123;username&#125;&#125;)<span class="comment">//其结果为/user</span></span><br></pre></td></tr></table></figure><p>当指定<code>params</code>时，可提供<code>string</code>或<code>number</code>参数（或对于可重复从参数可以提供一个数组）。任何其他类型（如<code>undefined</code>、<code>false</code>等）都将被自动字符串化。对于可选参数，可以提供一个空字符串(<code>""</code>)来跳过它。</p><p>由于属性<code>to</code>与<code>router.push</code>接收的对象种类相同，一次你两者的规则相同。</p><p><code>router.push</code>和所有其他导航方法都会返回一个Promise，等到导航完成后才知道是成功还是失败。</p><h3 id="使用router.replace替换当前位置">使用<code>router.replace</code>替换当前位置</h3><p><code>router.replace</code>与<code>router.push</code>不同的是，<code>router.replace</code>在导航时不会向history添加新记录，它直接取代了当前的条目。</p><table><thead><tr class="header"><th>声明式</th><th>编程式</th></tr></thead><tbody><tr class="odd"><td><code>&lt;router-link :to="..." replace&gt;</code></td><td><code>router.replace(...)</code></td></tr></tbody></table><p>可以直接使用<code>router.replace</code>，也可以在传递给<code>router.push</code>的<code>routeLocation</code>中增加一个属性<code>replace:true</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">replace</span>(&#123;<span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>&#125;)</span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123;<span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,<span class="attr">replace</span>:<span class="literal">true</span>&#125;)</span><br></pre></td></tr></table></figure><h3 id="使用router.go横跨历史">使用<code>router.go</code>横跨历史</h3><p><code>router.go</code>采用一个整数作为参数，表示在历史堆栈中前进或后退多少步：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 向前移动1条记录，与router.forward()作用相同</span></span><br><span class="line">router.<span class="title function_">go</span>(<span class="number">1</span>)</span><br><span class="line"><span class="comment">// 向后移动1条记录，与router.back()作用相同</span></span><br><span class="line">router.<span class="title function_">go</span>(-<span class="number">1</span>)</span><br><span class="line"><span class="comment">// 前进3条记录</span></span><br><span class="line">router.<span class="title function_">go</span>(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 若没有那么多记录，静默失败，即不执行也不报错</span></span><br><span class="line">router.<span class="title function_">go</span>(-<span class="number">100</span>)</span><br><span class="line">router.<span class="title function_">gi</span>(<span class="number">100</span>)</span><br></pre></td></tr></table></figure><h2 id="重定向和别名">重定向和别名</h2><h3 id="通过redirect属性实现重定向">通过<code>redirect</code>属性实现重定向</h3><p>通过<code>routes</code>实现重定向：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将/home重定向到/</span></span><br><span class="line"><span class="keyword">const</span> routes=[&#123;<span class="attr">path</span>:<span class="string">&#x27;home&#x27;</span>,<span class="attr">redirect</span>:<span class="string">&#x27;/&#x27;</span>&#125;]</span><br><span class="line"><span class="comment">// 重定向的目标也可以是一个命名的路由</span></span><br><span class="line"><span class="keyword">const</span> routes=[&#123;<span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,<span class="attr">redirect</span>:&#123;<span class="attr">name</span>:<span class="string">&#x27;homepage&#x27;</span>&#125;&#125;]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重定向的目标还可以是一个方法，动态返回重定向目标</span></span><br><span class="line"><span class="keyword">const</span> routes=[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// 将/search/screens重定向到/search?q=screens</span></span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;search/:searchText&#x27;</span>,</span><br><span class="line">    <span class="attr">redirect</span>: <span class="function"><span class="params">to</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="comment">//方法接收目标路由作为参数</span></span><br><span class="line">      <span class="comment">//return 重定向的字符串路径/路径对象</span></span><br><span class="line">      <span class="keyword">return</span> &#123;<span class="attr">path</span>:<span class="string">&#x27;/search&#x27;</span>,<span class="attr">query</span>:&#123;<span class="attr">q</span>:to.<span class="property">parpams</span>.<span class="property">searchText</span>&#125;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/search&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>在写<code>redirect</code>时，可以省略component配置。</strong>由于组件从来没有被直接渲染过，因此没有组件要渲染，<strong>嵌套路由除外</strong>。若一个路由有<code>children</code>和<code>redirect</code>属性，那么它也应该有<code>component</code>属性。</p><p>导航守卫没有应用在跳转路由上，仅应用在其目标上。在上述代码中，在<code>/home</code>路由中添加<code>beforeEnter</code>守卫也不会有任何效果。</p><h3 id="相对重定向">相对重定向</h3><p>即重定向到相对位置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes=[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// 将/users/123/posts重定向到/users/123/profile</span></span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;users/:id/posts&#x27;</span>,</span><br><span class="line">    <span class="attr">redirect</span>: <span class="function"><span class="params">to</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="comment">//方法接收目标路由作为参数</span></span><br><span class="line">      <span class="comment">//相对位置不以/开头</span></span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;profile&#x27;</span></span><br><span class="line">      <span class="comment">//或是return &#123;path:&#x27;profile&#x27;&#125;</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="使用alias设置别名">使用alias设置别名</h3><p>将<code>/</code>别名为<code>/home</code>，便意味着当用户访问<code>/home</code>时，URL仍然是<code>/home</code>，但会被匹配为用户正在访问<code>/</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes=[&#123;<span class="attr">path</span>:<span class="string">&#x27;/&#x27;</span>,<span class="attr">component</span>:<span class="title class_">Homepage</span>,<span class="attr">alias</span>:<span class="string">&#x27;/home&#x27;</span>&#125;]</span><br></pre></td></tr></table></figure><p>通过别名可以自由地将UI结构映射到一个任意的URL，而不受配置的嵌套结构的限制。</p><p>别名以<code>/</code>开头，以使嵌套路径中的路径成为绝对路径，也可以用一个数组来提供多个别名：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes=[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/users&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="title class_">UsersLayout</span>,</span><br><span class="line">    <span class="attr">children</span>:[</span><br><span class="line">      <span class="comment">//为/users、/users/list、/people这3个URL呈现UserList</span></span><br><span class="line">      &#123;<span class="attr">path</span>:<span class="string">&#x27;&#x27;</span>,<span class="attr">component</span>:<span class="title class_">UserList</span>,<span class="attr">alias</span>:[<span class="string">&#x27;/people&#x27;</span>,<span class="string">&#x27;list&#x27;</span>]&#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>若路由有参数，则要确保在任何绝对别名中包含它们：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes=[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/users:id&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="title class_">UsersByIdLayout</span>,</span><br><span class="line">    <span class="attr">children</span>:[</span><br><span class="line">      <span class="comment">//为/users/123、/users/123/profile、/123这3个URL呈现UserDetails</span></span><br><span class="line">      &#123;<span class="attr">path</span>:<span class="string">&#x27;profile&#x27;</span>,<span class="attr">component</span>:<span class="title class_">UserDetails</span>,<span class="attr">alias</span>:[<span class="string">&#x27;/:id&#x27;</span>,<span class="string">&#x27;&#x27;</span>]&#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>关于SEO的注意事项：使用别名是，一定要定义规范链接</strong></p><h2 id="路由组件传参">路由组件传参</h2><h3 id="将props传递给路由组件">将props传递给路由组件</h3><p>在组件中使用<code>$route</code>会与路由紧密耦合，由于它只能用于特定的URL，这将限制了组件的灵活性。通过配置<code>props</code>来解除这种行为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">User</span>=&#123;</span><br><span class="line">  <span class="attr">template</span>:<span class="string">&#x27;&lt;div&gt;User&#123;&#123;$route.params.id&#125;&#125;&lt;/div&gt;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> routes=[&#123;<span class="attr">path</span>:<span class="string">&#x27;/user/:id&#x27;</span>,<span class="attr">component</span>:<span class="title class_">User</span>&#125;]</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以通过配置props将代码替换成如下所示</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">User</span>=&#123;</span><br><span class="line">  <span class="comment">//添加一个与路由参数完全相同的prop名</span></span><br><span class="line">  <span class="attr">props</span>:[<span class="string">&#x27;id&#x27;</span>],</span><br><span class="line">  <span class="attr">template</span>:<span class="string">&#x27;&lt;div&gt;User&#123;&#123;id&#125;&#125;&lt;/div&gt;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> routes=[&#123;<span class="attr">path</span>:<span class="string">&#x27;/user/:id&#x27;</span>,<span class="attr">component</span>:<span class="title class_">User</span>,<span class="attr">props</span>:<span class="literal">true</span>&#125;]</span><br></pre></td></tr></table></figure><p>这允许在任何地方使用该组件，使得该组件更容易重用和测试。</p><h3 id="布尔模式">布尔模式</h3><p>当<code>props</code>设置为<code>true</code>时，<code>route.params</code>将被设置为组件的props。</p><h3 id="命名视图-1">命名视图</h3><p>对于有命名视图的路由，则必须为每个命名视图定义<code>props</code>配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes=[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/user/:id&#x27;</span>,</span><br><span class="line">    <span class="attr">components</span>:&#123;<span class="attr">default</span>:<span class="title class_">User</span>,<span class="attr">sidebar</span>:<span class="title class_">Sidebar</span>&#125;,</span><br><span class="line">    <span class="attr">props</span>:&#123;<span class="attr">default</span>:<span class="literal">true</span>,<span class="attr">sidebar</span>:<span class="literal">false</span>&#125;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="对象模式">对象模式</h3><p>当<code>props</code>是一个对象时，它将原样设置为组件props。当组件props是静态时很有用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes=[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/promotion/from-newsletter&#x27;</span>,</span><br><span class="line">    <span class="attr">components</span>:<span class="title class_">Promotion</span>,</span><br><span class="line">    <span class="attr">props</span>:&#123;<span class="attr">newsletterPopup</span>:<span class="literal">false</span>&#125;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="函数模式">函数模式</h3><p>创建一个返回props的函数，可以将参数转换为其他类型，将静态值与基于路由的值相结合等：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes=[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/search&#x27;</span>,</span><br><span class="line">    <span class="attr">components</span>:<span class="title class_">SearchUser</span>,</span><br><span class="line">    <span class="attr">props</span>:<span class="function"><span class="params">route</span>=&gt;</span>(&#123;<span class="attr">query</span>:route.<span class="property">query</span>.<span class="property">q</span>&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>URL<code>/search?q=vue</code>将传递<code>&#123;query:'vue'&#125;</code>作为props传给<code>SearchUser</code>组件。</p><p>尽可能保持props函数为无状态的，因此它只会在路由发生变化时起作用。若需要状态来定义props，建议使用包装组件。</p><h2 id="不同的历史记录模式">不同的历史记录模式</h2><p>创建路由实例时，允许在不同的历史模式中选中<code>history</code>配置。</p><h3 id="hash模式">Hash模式</h3><p>hash模式是用<code>createWebHashHistory()</code>创建的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>&#123;createRouter,createWebHashHistory&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router=<span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>:<span class="title function_">createWebHashHistory</span>(),</span><br><span class="line">  <span class="attr">routes</span>:[</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  ],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>它在内部传递的实际URL之前使用了一个哈希字符（<code>#</code>）。由于这部分URL从未被发送到服务器中，因此不需要再服务器上进行任何特殊处理。<strong>不过它在SEO中确实有不会的影响。若担心这个问题，可以使用HTML5模式。</strong></p><h3 id="html5模式">HTML5模式</h3><p>用<code>createWebHistory()</code>创建HTML5模式，推荐使用这个模式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>&#123;createRouter,createWebHistory&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router=<span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>:<span class="title function_">createWebHistory</span>(),</span><br><span class="line">  <span class="attr">routes</span>:[</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  ],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>当应用是单页的客户端应用时，若没有适当的服务器配置，用户在浏览器中直接访问URL会得到一个404错误。</p><p>要想解决这个问题，便是要在服务器上添加一个简单的回退路由。URL不匹配任何静态资源，则应提供与应用程序中<code>index.html</code>相同的页面。</p><h3 id="服务器配置实例">服务器配置实例</h3><p>假设正在从根目录提供服务。若要部署到子目录中，则应使用Vue CLI的<code>publicPath</code>配置和相关路由的<code>base</code>属性。除此之外还需要调整服务端，使其使用子目录而不是根目录。</p><p>如在原生Node.js中，应调整为如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http=<span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> fs=<span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> httpPort=<span class="number">80</span></span><br><span class="line"></span><br><span class="line">http</span><br><span class="line">  .<span class="title function_">createServer</span>(<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    fs.<span class="title function_">readFile</span>(<span class="string">&#x27;index.html&#x27;</span>,<span class="string">&#x27;utf-8&#x27;</span>,<span class="function">(<span class="params">err,content</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;We cannot open &quot;index.html&quot; file.&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      res.<span class="title function_">writeHead</span>(<span class="number">200</span>,&#123;</span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>:<span class="string">&#x27;text/html;charset=utf-8&#x27;</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">      res.<span class="title function_">end</span>(content)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">listen</span>(httpPort,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Server listening on:http://localhost:%s&#x27;</span>,httpPort)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>配置完成后，所有未找到的路径都会显示<code>index.html</code>文件，因此应该在Vue应用程序中实现一个万能路由来显示404页面：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router=<span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>:<span class="title function_">createWebHistory</span>(),</span><br><span class="line">  <span class="attr">routes</span>:[&#123;<span class="attr">path</span>:<span class="string">&#x27;/:pathMatch(.*)&#x27;</span>,<span class="attr">component</span>:<span class="title class_">NotFoundComponent</span>&#125;],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>若使用的是Node.js服务器，则可以通过在服务器端使用路由来匹配URL，若没有匹配到路由，则用404来回应，从而实现回退。</p><h1 id="内在">内在</h1><h2 id="深入响应式原理">深入响应式原理</h2><p>Vue最独特的特性之一是其非侵入性的响应式系统。数据模型仅仅是普通的JavaScript对象。当修改它们时，视图会进行更新。</p><h3 id="如何追踪变化">如何追踪变化</h3><p>当一个普通的JavaScript对象传入Vue实例作为<code>data</code>选项式，Vue将遍历此对象的所有property并使用<code>Object.defineProperty</code>把这些property全部转为<strong>getter/setter</strong>。这些getter/setter对用户来说是不可见的。但在内部它们能够让Vue追踪依赖，并在property被访问和修改是同时变更。</p><p>需要注意的是，不同浏览器在控制台打印数据对象时，对getter/setter的格式化也不同。</p><p>每个组件实例都对应一个watcher实例，它会在组件渲染时把“接触”过的数据property记录为依赖，随后依赖项的setter触发时会通知watcher，从而使它关联的组件重新渲染。</p><h3 id="检测变化的注意事项">检测变化的注意事项</h3><p>由于JavaScript的限制，Vue不能检测数组和对象的变化。但也还是有一些方法来回避这些限制并保证它们的响应性。</p><h4 id="对于对象">对于对象</h4><p>Vue无法检测property的添加或移除。由于Vue会在初始化实例时对property执行getter/setter转化，因此property必须在<code>data</code>对象上存在，才能让Vue将他转换为响应式的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm=<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">data</span>:&#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//vm.a是响应式的</span></span><br><span class="line"></span><br><span class="line">vm.<span class="property">b</span>=<span class="number">2</span></span><br><span class="line"><span class="comment">//vm.b是非响应式的</span></span><br></pre></td></tr></table></figure><p>对于已经创建的实例，Vue不允许动态添加根级别的响应式property，但可以使用<code>Vue.set(Object,propertName,value)</code>方法向嵌套对象添加响应式property，如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">set</span>(vm.<span class="property">someObject</span>,<span class="string">&#x27;b&#x27;</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>除此之外还可以使用<code>vm.$set</code>实例方法，也是全局<code>Vue.set</code>方法的别名：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.$set(<span class="variable language_">this</span>.<span class="property">someObject</span>,<span class="string">&#x27;b&#x27;</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>有时需要为已有对象赋值多个新property，若使用<code>Object.assign()</code>或<code>_.extend()</code>，则它们添加到对象上的新property不会触发更新。此时应该用原对象与要混合进入对象的property一起创建一个新的对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代替Object.assign(this.someObject,&#123;a:1,b:2&#125;)</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">someObject</span>=<span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;,<span class="variable language_">this</span>.<span class="property">someObject</span>,&#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>&#125;)</span><br></pre></td></tr></table></figure><h4 id="对于数组">对于数组</h4><p>Vue不能检测以下数组的变动：</p><ol type="1"><li>利用索引直接设置一个数组项，如<code>vm.items[indexOfItem]=newValue</code></li><li>修改数组长度，如<code>vm.items.length=newLength</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm=<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">data</span>:&#123;</span><br><span class="line">    <span class="attr">items</span>:[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 非响应式的</span></span><br><span class="line">vm.<span class="property">items</span>[<span class="number">1</span>]=<span class="string">&#x27;x&#x27;</span></span><br><span class="line">vm.<span class="property">items</span>.<span class="property">length</span>=<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应式的</span></span><br><span class="line"><span class="comment">//Vue.set方法设置数组项</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">set</span>(vm.<span class="property">items</span>,indexOfItem,newValue)</span><br><span class="line"><span class="comment">//vm.$set实例方法设置数组项，是Vue.set方法的一个别名</span></span><br><span class="line">vm.$set(vm.<span class="property">items</span>,indexOfItem,newValue)</span><br><span class="line"><span class="comment">//Array.prototype.splice方法设置数组项</span></span><br><span class="line">vm.<span class="property">items</span>.<span class="title function_">splice</span>(indexOfItem,<span class="number">1</span>,newValue)</span><br><span class="line"></span><br><span class="line"><span class="comment">//splice方法设置数组长度</span></span><br><span class="line">vm.<span class="property">items</span>.<span class="title function_">splice</span>(newLength)</span><br></pre></td></tr></table></figure><h3 id="声明响应式property">声明响应式property</h3><p>由于Vue不允许动态添加根级响应式property，因此<strong>必须要在初始化实例之前声明所有根级响应式property，包括空值</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm=<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">data</span>:&#123;</span><br><span class="line">    <span class="comment">//声明message为一个空值字符串</span></span><br><span class="line">    <span class="attr">message</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">template</span>:<span class="string">&#x27;&lt;div&gt;&#123;&#123;message&#125;&#125;&lt;/div&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 给message赋值</span></span><br><span class="line">vm.<span class="property">message</span>=<span class="string">&#x27;Hello!&#x27;</span></span><br></pre></td></tr></table></figure><p>若未在<code>data</code>选项中声明<code>message</code>，Vue将警告渲染函数正在视图访问不存在的property。</p><h3 id="异步更新队列">异步更新队列</h3><p>Vue在更新DOM时是异步执行的。只要侦听到数据变化，Vue将开启一个队列，并缓冲在同一事件循环中发生的所有数据变更。若同一个watcher被多次触发，其也只会被推入到队列中一次。</p><p>Vue在缓冲时去除重复数据避免了不必要的计算和DOM操作。然后在下一个事件循环的“tick”中，Vue刷新队列并执行实际（已去重后的）工作。Vue在内部对异步队列尝试使用原生的<code>Promise.then</code>、<code>MutationObserver</code>和<code>setImmediate</code>。若执行环境不支持，则会采用<code>setTimeout(fn,0)</code>代替。</p><p>为了在数据变化之后等待Vue完成更新DOM，可以在数据变化之后立即使用<code>Vue.nextTick(callback)</code>，这样回调函数将在DOM更新完成后被调用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;example&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123;message&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> vm=<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">el</span>:<span class="string">&#x27;#example&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">message</span>:<span class="string">&#x27;123&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript">vm.<span class="property">message</span>=<span class="string">&#x27;new message&#x27;</span><span class="comment">//更改数据</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(vm.<span class="property">$el</span>.<span class="property">textContent</span>)<span class="comment">//返回123</span></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="title function_">nextTick</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(vm.<span class="property">$el</span>.<span class="property">textContent</span>)<span class="comment">//返回new message</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br></pre></td></tr></table></figure><p>在组件内使用<code>vm.$nextTick()</code>实例特别方便，因此它不需要全局<code>Vue</code>，且回调函数中的<code>this</code>将自动绑定在当前的Vue实例上：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;example&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">example-oi</span>&gt;</span><span class="tag">&lt;/<span class="name">example-oi</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;example-oi&#x27;</span>,&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">data</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">message</span>:<span class="string">&#x27;未更新&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,  </span></span><br><span class="line"><span class="language-javascript">  <span class="attr">template</span>:<span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">    &lt;div&gt;  </span></span></span><br><span class="line"><span class="string"><span class="language-javascript">      &lt;button v-on:click=&quot;updateMessage&quot;&gt;点击我更新文字&lt;/button&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">      &lt;span&gt;&#123;&#123;message&#125;&#125;&lt;/span&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">    &lt;/div&gt;  </span></span></span><br><span class="line"><span class="string"><span class="language-javascript">  `</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">updateMessage</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">message</span>=<span class="string">&#x27;已更新&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$el</span>.<span class="property">textContent</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.$nextTick(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$el</span>.<span class="property">textContent</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">el</span>:<span class="string">&#x27;#example&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>因为<code>$nextTick()</code>返回一个<code>Promise</code>对象，因此可以使用新的ES2017 async/await 语法来完成相同的事情：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">  <span class="attr">updateMessage</span>:<span class="keyword">async</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">message</span>=<span class="string">&#x27;已更新&#x27;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$el</span>.<span class="property">textContent</span>)</span><br><span class="line">    <span class="keyword">await</span> <span class="variable language_">this</span>.$nextTick()</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$el</span>.<span class="property">textContent</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="vue-router路由进阶">vue-router路由进阶</h1><h2 id="导航守卫">导航守卫</h2><p>vue-router提供的导航守卫主要通过跳转或取消的方式来守卫导航。</p><h3 id="全局前置守卫">全局前置守卫</h3><p>可以使用<code>router.beforeEach</code>注册一个全局前置守卫：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router=<span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;)</span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span></span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  <span class="comment">//返回false以取消导航</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>当一个导航触发时，全局前置守卫按照创建顺序调用。守卫是异步解析执行，此时导航在所有守卫resolve完之前，一直处于等待中。</p>]]></content>
    
    
    <summary type="html">前端,Vue.js</summary>
    
    
    
    <category term="学习笔记" scheme="http://tangmenjue.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="前端" scheme="http://tangmenjue.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="前端框架" scheme="http://tangmenjue.top/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="Vue.js" scheme="http://tangmenjue.top/tags/Vue-js/"/>
    
    <category term="前端" scheme="http://tangmenjue.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>前端框架之Vue.js（五）</title>
    <link href="http://tangmenjue.top/2022/11/10/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E4%BA%94%EF%BC%89/"/>
    <id>http://tangmenjue.top/2022/11/10/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E4%BA%94%EF%BC%89/</id>
    <published>2022-11-10T09:20:06.000Z</published>
    <updated>2022-11-10T09:20:06.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="深入了解组件">深入了解组件</h1><h2 id="动态组件异步组件">动态组件&amp;异步组件</h2><h3 id="在动态组件上使用keep-alive">在动态组件上使用keep-alive</h3><p>之前曾在一个多标签的页面使用<code>is</code> attribute来切换不同的组件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">component</span> <span class="attr">v-bind:is</span>=<span class="string">&quot;currentTabComponent&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当这些组件之间来回切换时，会发现原来点击的内容被销毁了，由于 每次切换新标签时，Vue都创建了一个新实例，因此切回去时是不会保留之前选择的选项的。</p><p>若想把那些标签的组件实例能够被在它们第一次被创建时缓存下来，可以使用<code>&lt;keep-alive&gt;</code>元素把动态组件包裹起来，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 失活的组件将会被缓存 --&gt;</span><br><span class="line">&lt;keep-alive&gt;</span><br><span class="line">  &lt;component v-bind:is=&quot;currentTabComponent&quot;&gt;&lt;/component&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br></pre></td></tr></table></figure><p>动态组件及使用keep-alive的例子如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&quot;example&quot; class=&quot;demo&quot;&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;button </span><br><span class="line">      v-for=&quot;tab in tabs&quot; </span><br><span class="line">      v-bind:key=&quot;tab&quot; </span><br><span class="line">      v-on:click=&quot;currentTab=tab&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &#123;&#123;tab&#125;&#125;</span><br><span class="line">    &lt;/button&gt;</span><br><span class="line">    &lt;!-- &lt;component v-bind:is=&quot;currentTabComponent&quot;&gt;&lt;/component&gt; --&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!-- 失活的组件将会被缓存 --&gt;</span><br><span class="line">    &lt;keep-alive&gt;</span><br><span class="line">      &lt;component v-bind:is=&quot;currentTabComponent&quot;&gt;&lt;/component&gt;</span><br><span class="line">    &lt;/keep-alive&gt;</span><br><span class="line">  &lt;/div&gt;  </span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var postOne=&#123;</span><br><span class="line">  id:1,</span><br><span class="line">  title:&#x27;Cat Ipsum&#x27;,</span><br><span class="line">  content:&#x27;&lt;p&gt;That is a content of Cat Ipsum &lt;/p&gt;&#x27;</span><br><span class="line">&#125;;</span><br><span class="line">var postTwo=&#123;</span><br><span class="line">  id:2,</span><br><span class="line">  title:&#x27;Hipster Ipsum&#x27;,</span><br><span class="line">  content:&#x27;&lt;p&gt;That is a content of Hipster Ipsum &lt;/p&gt;&#x27; </span><br><span class="line">&#125;;</span><br><span class="line">var postThree=&#123;</span><br><span class="line">  id:3,</span><br><span class="line">  title:&#x27;Cupcake Ipsum&#x27;,</span><br><span class="line">  content:&#x27;&lt;p&gt;That is a content of Cupcake Ipsum &lt;/p&gt;&#x27;</span><br><span class="line">&#125;;</span><br><span class="line">Vue.component(&#x27;tab-posts&#x27;,&#123;</span><br><span class="line">  data:function()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">      posts:[postOne,postTwo,postThree],</span><br><span class="line">      selectedPost:null</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  template:`</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;ul&gt;</span><br><span class="line">        &lt;li </span><br><span class="line">          v-for=&quot;post in posts&quot; </span><br><span class="line">          v-bind:key=&quot;post.id&quot;</span><br><span class="line">          v-on:click=&quot;selectedPost=post&quot;</span><br><span class="line">        &gt;</span><br><span class="line">          &#123;&#123;post.title&#125;&#125;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;div v-if=&quot;selectedPost&quot;&gt;</span><br><span class="line">          &lt;div v-html=&quot;selectedPost.content&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;strong v-else&gt;</span><br><span class="line">          Click on a blog title to the left to view it.</span><br><span class="line">        &lt;/strong&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  `        </span><br><span class="line">&#125;)</span><br><span class="line">Vue.component(&#x27;tab-archive&#x27;,&#123;</span><br><span class="line">  template:&#x27;&lt;div&gt;Archive component&lt;/div&gt;&#x27;</span><br><span class="line">&#125;)</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el:&#x27;#example&#x27;,</span><br><span class="line">  data:&#123;</span><br><span class="line">    currentTab:&#x27;Posts&#x27;,</span><br><span class="line">    tabs:[&#x27;Posts&#x27;,&#x27;Archive&#x27;]</span><br><span class="line">  &#125;,</span><br><span class="line">  computed:&#123;</span><br><span class="line">    currentTabComponent:function()&#123;</span><br><span class="line">      return &#x27;tab-&#x27;+this.currentTab.toLowerCase()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><code>&lt;keep-alive&gt;</code>包裹动态组件时，会缓存不活动的组件实例，而不是销毁它们。</p><p>若使用v-if也想保留组件内容，可以用<code>&lt;keep-alive&gt;</code>包裹：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;keep-alive&gt;</span><br><span class="line">  &lt;component-a v-if=&quot;a&gt;1&quot;&gt;&lt;/component-a&gt;</span><br><span class="line">  &lt;component-b v-else&gt;&lt;/component-b&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br></pre></td></tr></table></figure><p>若想使用<code>include&amp;exclude</code>属性也保存组件内容，也能用<code>&lt;keep-alive&gt;</code>包裹。其中，<strong>与include的值匹配的路由/组件会被缓存，不匹配的不会被缓存</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;keep-alive include=&quot;tab-archive&quot;&gt;</span><br><span class="line">  &lt;component v-bind:is=&quot;currentTabComponent&quot;&gt;&lt;/component&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br></pre></td></tr></table></figure><p>可以通过逗号分隔的字符串形式、正则形式、数组形式进行匹配：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">include</span>=<span class="string">&quot;[&#x27;tab-archive&#x27;,&#x27;tab-posts&#x27;]&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">v-bind:is</span>=<span class="string">&quot;currentTabComponent&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure><p>还可以利用<code>&lt;keep-alive&gt;</code>来设计最多可以缓存多少组件实例，一旦这个数字达到了，则在新实例被创建之前，<strong>已缓存组件中最久没有被访问的实例会被销毁</strong>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">max</span>=<span class="string">&quot;10&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">v-bind:is</span>=<span class="string">&quot;currentTabComponent&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="异步组件">异步组件</h3><p>在大型应用中，可能需要将应用分割成小一些的代码块，并且只在需要时才从服务器加载一个模块。</p><p>为了简化，Vue允许以一个工厂函数的方式定义组件，这个工厂函数会异步解析组件的定义，只在这个组件需要被渲染时才会触发该工厂函数，并把结果缓存起来供后续重渲染。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;async-example&#x27;</span>,<span class="keyword">function</span>(<span class="params">resolve,reject</span>)&#123;</span><br><span class="line">  <span class="title function_">seTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//向resolve回调传递组件定义</span></span><br><span class="line">    <span class="title function_">resolve</span>(&#123;</span><br><span class="line">      <span class="attr">template</span>:<span class="string">&#x27;&lt;div&gt; I am async! &lt;/div&gt;&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>上述代码的工厂函数会收到一个<code>resolve</code>回调，这个回调函数会在从服务器得到组件定义时被调用，也可以调用<code>reject(reason)</code>来表示加载失败。</p><p>将异步组件和webpack的code-splitting功能一起配合使用时，可以自动将所构建的代码切割成多个包，这些包会通过Ajax请求加载：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;async-webpack-example&#x27;</span>,<span class="keyword">function</span>(<span class="params">resolve</span>)&#123;</span><br><span class="line">  <span class="comment">//告诉webpack自动切割构建代码</span></span><br><span class="line">  <span class="built_in">require</span>([<span class="string">&#x27;./my-async-component&#x27;</span>],resolve)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>将webpack 2和ES2015语法结合使用动态导入时，可以在工厂中返回一个<code>Promise</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(</span><br><span class="line">  <span class="string">&#x27;async-webpack-example&#x27;</span>,</span><br><span class="line">  <span class="comment">//这个动态导入会返回一个Promise对象</span></span><br><span class="line">  <span class="function">()=&gt;</span><span class="keyword">import</span>(<span class="string">&#x27;./my-async-component&#x27;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>当使用局部注册时，也可以直接提供一个返回<code>Promise</code>的函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">components</span>:&#123;</span><br><span class="line">    <span class="string">&#x27;my-component&#x27;</span>:<span class="function">()=&gt;</span><span class="keyword">import</span>(<span class="string">&#x27;./my-async-component&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="处理加载状态">处理加载状态</h4><p>异步组件工厂函数也可以返回一个如下格式的对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">AsyncComponent</span>=(<span class="params"></span>)=&gt;(&#123;</span><br><span class="line">  <span class="attr">component</span>:<span class="keyword">import</span>(<span class="string">&#x27;./MyComponent.vue&#x27;</span>),<span class="comment">//需要加载的组件，返回一个promise对象</span></span><br><span class="line">  <span class="attr">loading</span>:<span class="title class_">LoadingComponent</span>,<span class="comment">//异步组件加载时使用的组件</span></span><br><span class="line">  <span class="attr">error</span>:<span class="title class_">ErrorComponent</span>,<span class="comment">//加载失败时使用的组件</span></span><br><span class="line">  <span class="attr">delay</span>:<span class="number">200</span>,<span class="comment">//展示加载时组件的延时时间，默认值是200毫秒</span></span><br><span class="line">  <span class="attr">timeout</span>:<span class="number">3000</span><span class="comment">//若提供了超时时间且组件也加载超时了，则使用加载失败时使用的组件。默认值是infinity</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="处理边界情况">处理边界情况</h2><h3 id="访问元素组件">访问元素&amp;组件</h3><h4 id="访问根实例">访问根实例</h4><p>在每个<code>new Vue</code>实例的子组件中，其根示例可以通过<code>$root</code> property进行访问，如<code>this.$root.data</code>。</p><h4 id="访问父级组件实例">访问父级组件实例</h4><p>可以通过<code>$parent</code> property来从一个子组件访问父组件的实例，如<code>this.$parent.getData</code>。</p><h4 id="访问子组件实例或子元素">访问子组件实例或子元素</h4><p>在JavaScript里直接访问一个子组件，可以先通过<code>ref</code> attribute为子组件赋予一个ID引用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">base-input</span> <span class="attr">ref</span>=<span class="string">&quot;usernameInput&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">base-input</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后便可以使用<code>this.$refs.usernameInput</code>来访问这个<code>&lt;base-input&gt;</code>实例。</p><p><strong>注意：</strong>当<code>ref</code>和<code>v-for</code>一起使用时，得到的ref将会是一个包含了对应数据源的子组件数组。</p><p><code>$refs</code>只会在组件渲染完成后生效，且它们不是响应式的，因此应该避免在模板或计算属性中访问<code>$refs</code>。</p><h4 id="依赖注入">依赖注入</h4><p>依赖注入可以将子组件的共用方法拓展到更深层级的嵌套组件上，使得任意后代组件中都能访问该方法，且不需要暴露该组件实例。</p><p>依赖注入用到了两个实例选项：<code>provide</code>和<code>inject</code>。</p><p><code>provide</code>选项允许指定想要提供给后代组件的数据/方法。</p><p><code>inject</code>选项用于接收指定的想要添加在实例上的property。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">provide</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span>&#123;</span><br><span class="line">    <span class="attr">getMap</span>:<span class="variable language_">this</span>.<span class="property">getMap</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">inject</span>:[<span class="string">&#x27;getMap&#x27;</span>]</span><br></pre></td></tr></table></figure><h3 id="程序化的事件侦听器">程序化的事件侦听器</h3><p>处理可以被<code>v-on</code>侦听的<code>$emit</code>外，Vue实例还同时在其事件接口提供了其他的方法：</p><ul><li><code>$on(eventName,eventHandler)</code>：侦听一个事件</li><li><code>$once(eventName,eventHandler)</code>：一次性侦听一个事件</li><li><code>$off(eventName,eventHandler)</code>：停止侦听一个事件</li></ul><h3 id="循环引用">循环引用</h3><h4 id="递归组件">递归组件</h4><p>组件可以通过<code>name</code>选项在自己的模板中调用自身。当使用<code>Vue.component</code>全局注册一个组件时，全局的ID会自动设置为该组件的<code>name</code>选项。</p><h4 id="组件之间的循环引用">组件之间的循环引用</h4><p>有两个组件A和组件B，A依赖B，B又依赖A，两者之间反复进行循环引用，模块系统不知道要如果不经过其中一个组件而完全解析另一个组件而报错。</p><p>为了解决这个问题，需要把其中一个组件设为一个点，如将<code>&lt;tree-folder&gt;</code>组件设为哪个点，另一个子组件为<code>&lt;tree-folder-contents&gt;</code>，此时会等到生命周期钩子<code>beforeCreate</code>时去注册它：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">beforeCreate</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$options</span>.<span class="property">components</span>.<span class="property">TreeFolderContents</span>=<span class="built_in">require</span>(<span class="string">&#x27;./tree-folder-contents.vue&#x27;</span>).<span class="property">default</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者在本地注册组件时，用webpack的异步import来解决:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">components</span>:&#123;</span><br><span class="line">  <span class="title class_">TreeFolderContents</span>:<span class="function">()=&gt;</span><span class="keyword">import</span>(<span class="string">&#x27;./tree-folder-contents.vue&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="模板定义的替代品">模板定义的替代品</h3><h4 id="内联模板">内联模板</h4><p>当子组件中出现<code>inline-template</code> attribute时，这个组件将会使用其里面的内容作为模板，而不是作为被分发的内容：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">inline-template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>123<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure><p>内联模板需定义在Vue所属的DOM元素内。</p><h4 id="x-template">X-Template</h4><p>另一个定义模板的方式是在一个<code>&lt;script&gt;</code>元素中，并为其带上<code>text/x-template</code>的类型，然后通过一个id将模板引用过去：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/x-template&quot;</span> <span class="attr">id</span>=<span class="string">&quot;hello-world-template&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello world <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="控制更新">控制更新</h3><h4 id="强制更新">强制更新</h4><p>可以使用<code>$forceUpdate</code>来进行强制更新。</p><h4 id="通过v-once创建低开销的静态组件">通过<code>v-once</code>创建低开销的静态组件</h4><p>在包括了大量静态内容的组件里，可以在其根元素上添加<code>v-once</code> attribute来确保这些内容只计算一次后缓存起来。</p><h1 id="过渡动画">过渡&amp;动画</h1><h2 id="进入离开列表过渡">进入/离开&amp;列表过渡</h2><h3 id="单元素组件的过渡">单元素/组件的过渡</h3><p>Vue提供了<code>transition</code>封装组件，在以下情形中，可以给任何元素和组件添加进入/离开过渡：</p><ul><li>条件渲染（使用<code>v-if</code>）</li><li>条件展示（使用<code>v-show</code>）</li><li>动态组件</li><li>组件根节点</li></ul><p>例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;show=!show&quot;</span>&gt;</span>Toggle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;fade&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;show&quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">el</span>:<span class="string">&#x27;#demo&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">show</span>:<span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.fade-enter-active</span>,<span class="selector-class">.fade-leave-active</span>&#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">transition</span>:opacity .<span class="number">5s</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.fade-enter</span>,<span class="selector-class">.fade-leave-to</span>&#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当插入或删除包含在transition组件中的元素时，Vue将会做以下处理：</p><ol type="1"><li>自动嗅探目标元素是否应用了CSS过渡或动画，若是，在恰当的时机添加/删除CSS类名</li><li>若过渡组件提供了JavaScript钩子函数，这些钩子函数将在恰当的时机被调用</li><li>若没有找到JavaScript钩子函数，也没有检测到CSS过渡/动画，DOM操作（插入/删除）在下一帧中立即执行</li></ol><h4 id="过渡的类名">过渡的类名</h4><p>在进入/离开的过渡中，会有6个class切换：</p><ul><li><code>v-enter-active</code>：定义进入过渡生效时的状态。在整个进入过渡的阶段中应用，在元素被插入之前生效，在过渡/动画完成之后移除。这个类可以被用来定义进入过渡的过程时间、延迟和曲线函数。<ul><li><code>v-enter</code>：定义进入过渡的开始状态。在元素被插入之前生效，在元素被插入之后的下一帧移除</li><li><code>v-enter-to</code>：定义进入过渡的结束状态。在元素被插入之后下一帧生效，在过渡/动画完成之后移除</li></ul></li><li><code>v-leave-active</code>：定义离开过渡生效时的状态。在整个离开过渡的阶段中应用，在离开过渡被触发时立刻生效，在过渡/动画完成之后移除。这个类可以被用来定义离开过渡的过程时间、延迟和曲线函数。<ul><li><code>v-leave</code>：定义离开过渡的开始状态。在离开过渡被触发时立刻生效，下一帧被移除</li><li><code>v-leave-to</code>：定义离开过渡的结束状态。在离开过渡被触发之后下一帧生效，在过渡/动画完成之后移除</li></ul></li></ul><p>对于在过渡切换的来命名来说，若使用的是没有名字的<code>&lt;transition&gt;</code>，则<code>v-</code>是这些类名的默认前缀。若使用了<code>&lt;transition name="my-transition"&gt;</code>，那么<code>v-enter</code>会替换成<code>my-transition-enter</code></p><h4 id="css过渡">CSS过渡</h4><p>常用的过渡都是使用CSS过渡。</p><p>例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;show=!show&quot;</span>&gt;</span>Toggle render<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;slide-fade&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;show&quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">el</span>:<span class="string">&#x27;#demo&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">show</span>:<span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.slide-fade-enter-active</span>&#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">transition</span>:all .<span class="number">3s</span> ease;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.slide-fade-leave-active</span>&#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">transition</span>:all .<span class="number">8s</span> <span class="built_in">cubic-bezier</span>(<span class="number">1.0</span>,<span class="number">0.5</span>,<span class="number">0.8</span>,<span class="number">1.0</span>);</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.slide-fade-enter</span>,<span class="selector-class">.slide-fade-leave-to</span>&#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">10px</span>);</span></span><br><span class="line"><span class="language-css">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="css动画">CSS动画</h4><p>CSS动画用法与CSS过渡相同，其区别是在动画中<code>v-enter</code>类名在节点插入DOM后不会立即删除，而是在<code>animationend</code>时间触发时删除。</p><p>例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;show=!show&quot;</span>&gt;</span>Toggle show<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;bounce&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;show&quot;</span>&gt;</span>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris facilisis enim libero, at lacinia diam fermentum id. Pellentesque habitant morbi tristique senectus et netus.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">el</span>:<span class="string">&#x27;#demo&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">show</span>:<span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.bounce-enter-active</span>&#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">animation</span>: bounce-in .<span class="number">5s</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.bounce-leave-active</span>&#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">animation</span>: bounce-in .<span class="number">5s</span> reverse;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="keyword">@keyframes</span> bounce-in&#123;</span></span><br><span class="line"><span class="language-css">  <span class="number">0%</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0</span>);</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="number">50%</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.5</span>);</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="number">100%</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1</span>);</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="自定义过渡的类名">自定义过渡的类名</h4><p>可以通过以下attribute来自定义过渡类名：</p><ul><li><code>enter-active-class</code></li><li><code>enter-class</code></li><li><code>enter-to-class</code></li><li><code>leave-active-class</code></li><li><code>leave-class</code></li><li><code>leave-to-class</code></li></ul><p>这些attribute的优先级高于普通的类名，这对Vue的过渡系统和其他第三方CSS动画库的使用十分有用。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;show=!show&quot;</span>&gt;</span>Toggle render<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">name</span>=<span class="string">&quot;custom-classes-transition&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">enter-active-class</span>=<span class="string">&quot;animated data&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">leave-active-class</span>=<span class="string">&quot;animated bounceOutRight&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;show&quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">el</span>:<span class="string">&#x27;#demo&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">show</span>:<span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="同时使用过渡和动画">同时使用过渡和动画</h4><p>Vue为了知道过渡的完成，必须设置相应的事件监听器。其可以是<code>transitionend</code>或<code>animationend</code>，这取决于给元素应用的CSS规则，若使用其中任何一种，Vue能自动识别类型并设置监听。</p><p>若给同一种元素同时设置两种过渡动效时，需要使用<code>type</code> attribute来设置<code>animationend</code>或<code>transitionend</code>来明确声明需要Vue监听的类型。</p><h4 id="显性的过渡持续时间">显性的过渡持续时间</h4><p>大多数情况下，Vue可以自动得出过渡效果的完成时机。默认情况下，Vue会等待其在过渡效果根元素的第一个<code>transitionend</code>或<code>animationend</code>时间。</p><p>也可以使用<code>transition</code>组件上的<code>duration</code> prop来定制一个显性的过渡持续时间（以毫秒为单位）：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">:duration</span>=<span class="string">&quot;1000&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">transition</span>&gt;</span>   </span><br><span class="line"><span class="comment">&lt;!-- 也可以定制进入和移除的持续时间 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">:duration</span>=<span class="string">&quot;&#123;enter:500,leave:800&#125;&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">transition</span>&gt;</span>  </span><br></pre></td></tr></table></figure><h4 id="javascript钩子">JavaScript钩子</h4><p>可以在attribute中声明JavaScript钩子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;show=!show&quot;</span>&gt;</span>Toggle render<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">v-on:before-enter</span>=<span class="string">&quot;beforeEnter&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-on:enter</span>=<span class="string">&quot;enter&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-on:after-enter</span>=<span class="string">&quot;afterEnter&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-on:enter-cancelled</span>=<span class="string">&quot;enterCancelled&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">      <span class="attr">v-on:before-leave</span>=<span class="string">&quot;beforeLeave&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-on:leave</span>=<span class="string">&quot;leave&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-on:after-leave</span>=<span class="string">&quot;afterLeave&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-on:leave-cancelled</span>=<span class="string">&quot;leaveCancelled&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;show&quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">el</span>:<span class="string">&#x27;#demo&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">show</span>:<span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//进入中</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">beforeEnter</span>:<span class="keyword">function</span>(<span class="params">el</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//...</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">     <span class="comment">//当与CSS结合使用时，回调函数done是可选的</span></span></span><br><span class="line"><span class="language-javascript">     <span class="attr">enter</span>:<span class="keyword">function</span>(<span class="params">el,done</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//...</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">done</span>()</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">     <span class="attr">afterEnter</span>:<span class="keyword">function</span>(<span class="params">el</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//...</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">enterCancelled</span>:<span class="keyword">function</span>(<span class="params">el</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//...</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//离开时</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">beforeLeave</span>:<span class="keyword">function</span>(<span class="params">el</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//...</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">     <span class="comment">//当与CSS结合使用时，回调函数done是可选的</span></span></span><br><span class="line"><span class="language-javascript">     <span class="attr">leave</span>:<span class="keyword">function</span>(<span class="params">el,done</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//...</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">done</span>()</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">afterLeave</span>:<span class="keyword">function</span>(<span class="params">el</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//...</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">leaveCancelled</span>:<span class="keyword">function</span>(<span class="params">el</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//...</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这些钩子函数可以结合CSS <code>transitions/animations</code>使用，也可以单独使用。</p><p>当只用JavaScript过渡时，在<code>enter</code>和<code>leave</code>中必须使用<code>done</code>进行回调，否则两者将被同步调用，过渡会立即完成。</p><p>对于仅使用JavaScript过渡的元素添加<code>v-bind:css="false"</code>,Vue会跳过CSS的检测。这可以避免过渡过程中CSS的影响。</p><h3 id="初始渲染的过渡">初始渲染的过渡</h3><p>可以通过<code>appear</code> attribute来设置节点在初始渲染的过渡：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- 可以自定义CSS类名，也可以自定义JavaScript钩子 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">transition</span></span></span><br><span class="line"><span class="tag"> <span class="attr">appear</span></span></span><br><span class="line"><span class="tag"> <span class="attr">appear-class</span>=<span class="string">&quot;custom-appear-class&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">appear-to-class</span>=<span class="string">&quot;custom-appear-to-class&quot;</span>(<span class="attr">2.1.8</span>)</span></span><br><span class="line"><span class="tag"> <span class="attr">appear-active-class</span>=<span class="string">&quot;custom-appear-active-class&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">v-on:before-appear</span>=<span class="string">&quot;customBeforeAppearHook&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">v-on:appear</span>=<span class="string">&quot;customAppearHook&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="多个元素的过渡">多个元素的过渡</h3><p>对于原生标签可以使用<code>v-if</code>/<code>v-else</code>来实现多个组件的过渡，最常见的多标签过渡是一个列表和描述这个列表为空消息的元素：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 当有相同标签名的元素切换时，需要通过key attribute来设置唯一的值来标记 --&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">buttion</span> <span class="attr">v-if</span>=<span class="string">&quot;isEditing&quot;</span> <span class="attr">key</span>=<span class="string">&quot;save&quot;</span>&gt;</span>Save<span class="tag">&lt;/<span class="name">buttion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">buttion</span> <span class="attr">v-else</span> <span class="attr">key</span>=<span class="string">&quot;edit&quot;</span>&gt;</span>Edit<span class="tag">&lt;/<span class="name">buttion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在一些场景中，也可以通过给同一个元素的<code>key</code> attribute设置不同的状态来代替<code>v-if</code>和<code>v-else</code>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">buttion</span> <span class="attr">v-bind:key</span>=<span class="string">&quot;isEditing&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;isEdting?&quot;Save&quot;:&quot;Edit&quot;&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">buttion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用多个<code>v-if</code>的多个元素过渡，可以重写为绑定了动态property的单个元素过渡，如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">buttion</span> <span class="attr">v-if</span>=<span class="string">&quot;docState===&#x27;saved&#x27;&quot;</span> <span class="attr">key</span>=<span class="string">&quot;saved&quot;</span>&gt;</span>Edit<span class="tag">&lt;/<span class="name">buttion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">buttion</span> <span class="attr">v-if</span>=<span class="string">&quot;docState===&#x27;edited&#x27;&quot;</span> <span class="attr">key</span>=<span class="string">&quot;edited&quot;</span>&gt;</span>Save<span class="tag">&lt;/<span class="name">buttion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">buttion</span> <span class="attr">v-if</span>=<span class="string">&quot;docState===&#x27;editing&#x27;&quot;</span> <span class="attr">key</span>=<span class="string">&quot;editing&quot;</span>&gt;</span>Cancel<span class="tag">&lt;/<span class="name">buttion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">buttion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以重写为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-bind:key</span>=<span class="string">&quot;docState&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;buttonMessage&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//...</span></span></span><br><span class="line"><span class="language-javascript"><span class="attr">computed</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">buttonMessage</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">switch</span>(<span class="variable language_">this</span>.<span class="property">docSate</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">case</span> <span class="string">&#x27;saved&#x27;</span>:<span class="keyword">return</span> <span class="string">&#x27;Edit&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">case</span> <span class="string">&#x27;edited&#x27;</span>:<span class="keyword">return</span> <span class="string">&#x27;Save&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">case</span> <span class="string">&#x27;editing&#x27;</span>:<span class="keyword">return</span> <span class="string">&#x27;Cancel&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;    </span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="过渡模式">过渡模式</h4><p>由于同时生效的进入和离开的过渡不能满足所有要求，因此Vue提供了过渡模式：</p><ul><li><code>in-out</code>：新元素先进行过渡，完成之后当前元素过渡离开</li><li><code>out-in</code>：当前元素先进行过渡，完成之后新元素过渡进入</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;fade&quot;</span> <span class="attr">mode</span>=<span class="string">&quot;out-in&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="多个组件的过渡">多个组件的过渡</h3><p>只需要使用动态组件便可以使用<code>key</code> attribute：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;view=&#x27;v-a&#x27;&quot;</span> <span class="attr">name</span>=<span class="string">&quot;view&quot;</span> <span class="attr">checked</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;a&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;view=&#x27;v-b&#x27;&quot;</span> <span class="attr">name</span>=<span class="string">&quot;view&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;b&quot;</span>&gt;</span>B<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;component-fade&quot;</span> <span class="attr">mode</span>=<span class="string">&quot;out-in&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">component</span> <span class="attr">v-bind:is</span>=<span class="string">&quot;view&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">el</span>:<span class="string">&#x27;#demo&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">view</span>:<span class="string">&#x27;v-a&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&#x27;v-a&#x27;</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">template</span>:<span class="string">&#x27;&lt;div&gt;Component A&lt;/div&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&#x27;v-b&#x27;</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">template</span>:<span class="string">&#x27;&lt;div&gt;Component B&lt;/div&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.component-fade-enter-active</span>,<span class="selector-class">.component-fade-leave-active</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">transition</span>:opacity .<span class="number">3s</span> ease;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.component-fade-enter</span>,<span class="selector-class">.component-fade-leave-to</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="列表过渡">列表过渡</h3><p>需要同时渲染整个列表时，使用<code>&lt;transition-group&gt;</code>组件，这个组件的特点如下：</p><ul><li>不同于<code>&lt;transition&gt;</code>，它会以一个真实元素呈现：默认为一个<code>&lt;span&gt;</code>，也可以通过<code>tag</code> attribute更换为其他元素</li><li><strong>过渡模式不可用</strong></li><li>内部元素总是需要提供一个<strong>唯一的<code>key</code> attribute</strong></li><li><strong>CSS过渡的类将会应用在内部的元素中</strong>，而不是这个组/容器本身。</li></ul><h4 id="列表的进入离开过渡">列表的进入/离开过渡</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;list-demo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>Add<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;remove&quot;</span>&gt;</span>Remove<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition-group</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span> <span class="attr">tag</span>=<span class="string">&quot;p&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span> <span class="attr">v-bind:key</span>=<span class="string">&quot;item&quot;</span> <span class="attr">class</span>=<span class="string">&quot;list-item&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123;item&#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transition-group</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">el</span>:<span class="string">&#x27;#list-demo&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">items</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>],</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">nextNum</span>:<span class="number">10</span></span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">randomIndex</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="variable language_">this</span>.<span class="property">items</span>.<span class="property">length</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">add</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">splice</span>(<span class="variable language_">this</span>.<span class="title function_">randomIndex</span>(),<span class="number">0</span>,<span class="variable language_">this</span>.<span class="property">nextNum</span>++)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">remove</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">splice</span>(<span class="variable language_">this</span>.<span class="title function_">randomIndex</span>(),<span class="number">1</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.list-item</span>&#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.list-enter-active</span>,<span class="selector-class">.list-leave-active</span>&#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">transition</span>: all <span class="number">1s</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.list-enter</span>,<span class="selector-class">.list-leave-to</span>&#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">30px</span>);</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="列表的排序过渡">列表的排序过渡</h4><p><code>&lt;transition-group&gt;</code>组件不仅可以进入和离开动画，还可以使用<code>v-model</code> class改变定位。对于<code>v-model</code> class，可以通过<code>name</code> attribute来自定义前缀，也可以通过<code>move-class</code> attribute手动设置。</p><p><code>v-model</code> class对于设置过渡的切换时机和过渡曲线非常有用，以下例子使用了一个FLIP的简单动画队列，使用transforms将元素从之前的位置平滑过渡到新位置中：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.14.1/lodash.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;flip-list-demo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;shuffle&quot;</span>&gt;</span>Shuffle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition-group</span> <span class="attr">name</span>=<span class="string">&quot;flip-list&quot;</span> <span class="attr">tag</span>=<span class="string">&quot;ul&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span> <span class="attr">v-bind:key</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123;item&#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transition-group</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">el</span>:<span class="string">&#x27;#flip-list-demo&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">items</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>],</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">shuffle</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">items</span>=_.<span class="title function_">shuffle</span>(<span class="variable language_">this</span>.<span class="property">items</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.flip-list-move</span>&#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">transition</span>: transform <span class="number">1s</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>将上述代码与列表进入/离开过渡的例子结合，可式列表的一切变动都会有动画过渡：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.14.1/lodash.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;list-complete-demo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;shuffle&quot;</span>&gt;</span>Shuffle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>Add<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;remove&quot;</span>&gt;</span>Remove<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition-group</span> <span class="attr">name</span>=<span class="string">&quot;list-complete&quot;</span> <span class="attr">tag</span>=<span class="string">&quot;p&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span> <span class="attr">v-bind:key</span>=<span class="string">&quot;item&quot;</span> <span class="attr">class</span>=<span class="string">&quot;list-complete-item&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123;item&#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transition-group</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">el</span>:<span class="string">&#x27;#list-complete-demo&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">items</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>],</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">nextNum</span>:<span class="number">10</span></span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">randomIndex</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="variable language_">this</span>.<span class="property">items</span>.<span class="property">length</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">add</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">splice</span>(<span class="variable language_">this</span>.<span class="title function_">randomIndex</span>(),<span class="number">0</span>,<span class="variable language_">this</span>.<span class="property">nextNum</span>++)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">remove</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">splice</span>(<span class="variable language_">this</span>.<span class="title function_">randomIndex</span>(),<span class="number">1</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">shuffle</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">items</span>=_.<span class="title function_">shuffle</span>(<span class="variable language_">this</span>.<span class="property">items</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.list-complete-item</span>&#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">transition</span>: all <span class="number">1s</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.list-complete-leave-active</span>&#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.list-complete-enter</span>,<span class="selector-class">.list-complete-leave-to</span>&#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">30px</span>);</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong>使用FLIP过渡的元素不能设置为<code>display:inline</code>，可以设为<code>display:inline-block</code>或者放置于flex中。</p><h4 id="列表的交错过渡">列表的交错过渡</h4><p>通过data attribute与JavaScript通信，可以实现列表的交错过渡：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/velocity/1.2.3/velocity.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;staggered-list-demo&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;query&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition-group</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">name</span>=<span class="string">&quot;staggered-fade&quot;</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">tag</span>=<span class="string">&quot;ul&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-bind:css</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-on:before-enter</span>=<span class="string">&quot;beforeEnter&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-on:enter</span>=<span class="string">&quot;enter&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-on:leave</span>=<span class="string">&quot;leave&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in computedList&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-bind:key</span>=<span class="string">&quot;item.msg&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-bind:data-index</span>=<span class="string">&quot;index&quot;</span></span></span><br><span class="line"><span class="tag">      &gt;</span>&#123;&#123;item.msg&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transition-group</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">el</span>:<span class="string">&#x27;#staggered-list-demo&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">query</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">list</span>:[</span></span><br><span class="line"><span class="language-javascript">      &#123;<span class="attr">msg</span>:<span class="string">&#x27;Bruce Lee&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">      &#123;<span class="attr">msg</span>:<span class="string">&#x27;Jackie Chan&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">      &#123;<span class="attr">msg</span>:<span class="string">&#x27;Chuck Norris&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">      &#123;<span class="attr">msg</span>:<span class="string">&#x27;Jet Li&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">      &#123;<span class="attr">msg</span>:<span class="string">&#x27;Kung Fury&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">    ]</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">computed</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">computedList</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> vm=<span class="variable language_">this</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">list</span>.<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">item</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> item.<span class="property">msg</span>.<span class="title function_">toLowerCase</span>().<span class="title function_">indexOf</span>(vm.<span class="property">query</span>.<span class="title function_">toLowerCase</span>())!==-<span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">beforeEnter</span>:<span class="keyword">function</span>(<span class="params">el</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      el.<span class="property">style</span>.<span class="property">opacity</span>=<span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">      el.<span class="property">style</span>.<span class="property">height</span>=<span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">enter</span>:<span class="keyword">function</span>(<span class="params">el,done</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> delay=el.<span class="property">dataset</span>.<span class="property">index</span>*<span class="number">150</span></span></span><br><span class="line"><span class="language-javascript">      <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Velocity</span>(</span></span><br><span class="line"><span class="language-javascript">          el,</span></span><br><span class="line"><span class="language-javascript">          &#123;<span class="attr">opacity</span>:<span class="number">1</span>,<span class="attr">height</span>:<span class="string">&#x27;1.6em&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">          &#123;<span class="attr">complete</span>:done&#125;</span></span><br><span class="line"><span class="language-javascript">        )</span></span><br><span class="line"><span class="language-javascript">      &#125;,delay)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">leave</span>:<span class="keyword">function</span>(<span class="params">el,done</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> delay=el.<span class="property">dataset</span>.<span class="property">index</span>*<span class="number">150</span></span></span><br><span class="line"><span class="language-javascript">      <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Velocity</span>(</span></span><br><span class="line"><span class="language-javascript">          el,</span></span><br><span class="line"><span class="language-javascript">          &#123;<span class="attr">opacity</span>:<span class="number">0</span>,<span class="attr">height</span>:<span class="number">0</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">          &#123;<span class="attr">complete</span>:done&#125;</span></span><br><span class="line"><span class="language-javascript">        )</span></span><br><span class="line"><span class="language-javascript">      &#125;,delay)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="可复用的过渡">可复用的过渡</h3><p>过渡可以通过Vue的组件系统实现复用。创建一个可复用过渡组件，只需将<code>&lt;transition&gt;</code>或<code>&lt;transition-group&gt;</code>作为根组件，然后将任何子组件放置在其中即可：</p><h3 id="动态过渡">动态过渡</h3><p>在Vue中即使是过渡也是数据驱动的，通过<code>name</code> attribute来绑定动态之是动态过渡最基本的例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">v-bind:name</span>=<span class="string">&quot;transitionName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用Vue的过渡系统来定义CSS过渡/动画在不同过渡间切换会非常有用。</p><p>所有过渡attribute都可以动态绑定，不仅只有attribute可以利用，还可以通过事件钩子获取上下文中的所有数据，即可实现根据组件状态不同，JavaScript过渡也会有不同的表现。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/velocity/1.2.3/velocity.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;dynamic-fade-demo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">    Fade In:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;range&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;fadeInDuration&quot;</span> <span class="attr">min</span>=<span class="string">&quot;0&quot;</span> <span class="attr">v-bind:max</span>=<span class="string">&quot;maxFadeDuration&quot;</span>&gt;</span></span><br><span class="line">    Fade Out:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;range&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;fadeOutDuration&quot;</span> <span class="attr">min</span>=<span class="string">&quot;0&quot;</span> <span class="attr">v-bind:max</span>=<span class="string">&quot;maxFadeDuration&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-bind:css</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-on:before-enter</span>=<span class="string">&quot;beforeEnter&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-on:enter</span>=<span class="string">&quot;enter&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-on:leave</span>=<span class="string">&quot;leave&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;show&quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-if</span>=<span class="string">&quot;stop&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-on:click</span>=<span class="string">&quot;stop=false;show=false&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span>Start animating<span class="tag">&lt;/<span class="name">button</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-else</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-on:click</span>=<span class="string">&quot;stop=true&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span>Stop it!<span class="tag">&lt;/<span class="name">button</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">el</span>:<span class="string">&#x27;#dynamic-fade-demo&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">show</span>:<span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">fadeInDuration</span>:<span class="number">1000</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">fadeOutDuration</span>:<span class="number">1000</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">maxFadeDuration</span>:<span class="number">1500</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">stop</span>:<span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">mounted</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">show</span>=<span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">beforeEnter</span>:<span class="keyword">function</span>(<span class="params">el</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      el.<span class="property">style</span>.<span class="property">opacity</span>=<span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">enter</span>:<span class="keyword">function</span>(<span class="params">el,done</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> vm=<span class="variable language_">this</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">Velocity</span>(el,</span></span><br><span class="line"><span class="language-javascript">          &#123;<span class="attr">opacity</span>:<span class="number">1</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">          &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">duration</span>:<span class="variable language_">this</span>.<span class="property">fadeInDuration</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">complete</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="title function_">done</span>()</span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">if</span>(!vm.<span class="property">stop</span>) vm.<span class="property">show</span>=<span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        )</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">leave</span>:<span class="keyword">function</span>(<span class="params">el,done</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> vm=<span class="variable language_">this</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">Velocity</span>(el,</span></span><br><span class="line"><span class="language-javascript">          &#123;<span class="attr">opacity</span>:<span class="number">0</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">          &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">duration</span>:<span class="variable language_">this</span>.<span class="property">fadeOutDuration</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">complete</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="title function_">done</span>()</span></span><br><span class="line"><span class="language-javascript">              vm.<span class="property">show</span>=<span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        )</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建动态过渡的最终方案是组件通过接收props来动态修改之前的过渡。</p>]]></content>
    
    
    <summary type="html">前端,Vue.js</summary>
    
    
    
    <category term="学习笔记" scheme="http://tangmenjue.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="前端" scheme="http://tangmenjue.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="前端框架" scheme="http://tangmenjue.top/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="Vue.js" scheme="http://tangmenjue.top/tags/Vue-js/"/>
    
    <category term="前端" scheme="http://tangmenjue.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>前端框架之Vue.js（四）</title>
    <link href="http://tangmenjue.top/2022/11/09/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
    <id>http://tangmenjue.top/2022/11/09/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E5%9B%9B%EF%BC%89/</id>
    <published>2022-11-09T09:18:37.000Z</published>
    <updated>2022-11-09T09:18:37.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="深入了解组件">深入了解组件</h1><h2 id="组件注册">组件注册</h2><h3 id="组件名">组件名</h3><p>注册一个组件时，要给组件起名，如在全局注册中，组件名就是<code>Vue.component</code>的第一个参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span> <span class="title function_">component</span>(<span class="string">&#x27;my-component-name&#x27;</span>,&#123;&#125;)</span><br></pre></td></tr></table></figure><p>组件名应当遵守W3C规范中的自定义组件名（字母全小写且必须包含一个连字符）</p><h4 id="组件名大小写">组件名大小写</h4><p>定义组件名的方式由两种：</p><ul><li>使用短横线分隔命名:my-component-name</li><li>使用首字母大写命名：MyComponentName</li></ul><p>两种命名法都可以使用，但需注意的是，直接在DOM（即非字符串的模板）中使用时，只有短横线分隔命名是有效的。</p><h3 id="全局注册">全局注册</h3><p>使用全局注册的组件，在它们注册之后可以用在任何新创建的Vue根实例的模板中，在子组件的内部也可以相互使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span> <span class="title function_">component</span>(<span class="string">&#x27;my-component-name&#x27;</span>,&#123;&#125;)</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;<span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure><h3 id="局部注册">局部注册</h3><p>若使用webpack这个的构建系统，全局注册所有的组件便意味着即使不再使用这个组件了，它仍然会被包含在最终的构建结果中。此时，可以将组件局部注册：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过一个普通的JavaScript对象来定义组件</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">ComponentA</span>=&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">ComponentB</span>=&#123;&#125;</span><br><span class="line"><span class="comment">// 在component中定义要使用的组件</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">components</span>:&#123;</span><br><span class="line">    <span class="string">&#x27;components-a&#x27;</span>:<span class="title class_">ComponentA</span>,</span><br><span class="line">    <span class="string">&#x27;components-b&#x27;</span>:<span class="title class_">ComponentB</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>对于<code>components</code>对象中的每个property来说，其property名就是自定义元素的名字，其property值就是这个组件的选项对象。</p><p><strong>局部注册的组件在其子组件中不可用。</strong>所希望上述代码中的<code>ComponentA</code>在<code>ComponentB</code>中可用，则要写成：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">ComponentA</span>=&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">ComponentB</span>=&#123;</span><br><span class="line">  <span class="attr">components</span>:&#123;</span><br><span class="line">    <span class="string">&#x27;components-a&#x27;</span>:<span class="title class_">ComponentA</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="模块系统">模块系统</h3><h4 id="在模块系统中局部注册">在模块系统中局部注册</h4><p>若使用了注入Babel和webpack的模块系统，需要创建一个<code>components</code>目录，并将每个组件放置在其各自的文件中，然后在局部注册之前导入每个想使用的组件。如在一个<code>ComponentB.vue</code>文件中使用<code>ComponentA</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">ComponentA</span> <span class="keyword">from</span> <span class="string">&#x27;./ComponentA.vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">  <span class="attr">components</span>:&#123;</span><br><span class="line">    <span class="title class_">ComponentA</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在ES2015+中，在对象中放一个类似<code>ComponentA</code>的变量名便是<code>'ComponentsA':ComponentA</code>的缩写，即这个变量名同时是用在模板中的自定义元素的名称，也包含了这个组件选项的变量名。</p><h4 id="基础组件的自动化全局注册">基础组件的自动化全局注册</h4><p>当组件中只是包裹了一个输入框或按钮之类的通用元素时，将其称之为基础组件，它们会在各个组件中被频繁地用到。</p><p>这往往会导致组件里都会由一个包含基础组件的长列表，但用于模板中的仅是一小部分组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&quot;example&quot;&gt;</span><br><span class="line">    &lt;BaseInput v-model=&quot;searchText&quot; @keydown.enter=&quot;search&quot; /&gt;</span><br><span class="line">    &lt;BaseButton @click=&quot;search&quot;&gt;</span><br><span class="line">      &lt;BaseIcon name=&quot;search&quot; /&gt;</span><br><span class="line">    &lt;/BaseButton&gt;</span><br><span class="line">  &lt;/div&gt;  </span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import BaseButton from &#x27;./BaseButton.vue&#x27;</span><br><span class="line">import BaseIcon from &#x27;./BaseIcon.vue&#x27;</span><br><span class="line">import BaseInput from &#x27;./BaseInput.vue&#x27;</span><br><span class="line"></span><br><span class="line">export default&#123;</span><br><span class="line">  components:&#123;</span><br><span class="line">    BaseButton,</span><br><span class="line">    BaseIcon,</span><br><span class="line">    BaseInput</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>若使用webpack（或在内部使用了webpack的Vue CLI 3+），则可以使用<code>require.context</code>只全局注册这些通用的基础组件。如在应用入口文件（如<code>src/main.js</code>）中全局导入基础组件的代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&quot;example&quot;&gt;</span><br><span class="line">    &lt;BaseInput v-model=&quot;searchText&quot; @keydown.enter=&quot;search&quot; /&gt;</span><br><span class="line">    &lt;BaseButton @click=&quot;search&quot;&gt;</span><br><span class="line">      &lt;BaseIcon name=&quot;search&quot; /&gt;</span><br><span class="line">    &lt;/BaseButton&gt;</span><br><span class="line">  &lt;/div&gt;  </span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line">import upperFirst from &#x27;lodash/upperFirst&#x27;</span><br><span class="line">import camelCase from &#x27;lodash/camelCase&#x27;</span><br><span class="line"></span><br><span class="line">const requireComponent=require.context(</span><br><span class="line">  &#x27;./components&#x27;,//组件目录的相对路径</span><br><span class="line">  false,//是否查询其子目录</span><br><span class="line">  //匹配基础组件文件名的正则表达式</span><br><span class="line">  /Base[A-Z]\w+\.(vue|js)$/</span><br><span class="line">)</span><br><span class="line">requireComponent.keys().forEach(fileName=&gt;&#123;</span><br><span class="line">  const componentConfig=requireComponent(fileName)//获取组件配置</span><br><span class="line">  const componentName=upperFirst(//获取组件的PascalCase命名</span><br><span class="line">    camelCase(</span><br><span class="line">      fileName//获取和目录深度无关的文件名</span><br><span class="line">      .split(&#x27;/&#x27;)</span><br><span class="line">      .pop()</span><br><span class="line">      .replace(/\.\w+$/,&#x27;&#x27;)</span><br><span class="line">    )</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  //全局注册组件</span><br><span class="line">  Vue.component(</span><br><span class="line">    componentName,</span><br><span class="line">    // 若这个组件选项是通过export default导出的，就优先使用.default，否则回退到使用模块的根</span><br><span class="line">    componentConfig.default||componentConfig</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="prop">Prop</h2><h3 id="prop的大小写">Prop的大小写</h3><p>HTML中的attribute名是大小写不敏感的，浏览器会把所有大写字符解释为小写字符。这意味着在使用DOM模板时，驼峰命名的prop名需要使用其等价的短横线分隔来命名：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&#x27;blog-post&#x27;,&#123;</span><br><span class="line">  //在JavaScript中是驼峰命名</span><br><span class="line">  props:&#123;&#x27;postTitle&#x27;&#125;,</span><br><span class="line">  template:&#x27;&lt;h3&gt;&#123;&#123;postTitle&#125;&#125;&lt;/h3&gt;&#x27;</span><br><span class="line">&#125;)</span><br><span class="line">// 在HTML中是短横线分隔命名</span><br><span class="line">&lt;blog-post post-title=&quot;hello!&quot;&gt;&lt;/blog-post&gt;</span><br></pre></td></tr></table></figure><p>而在字符串模板中便不存在这个限制。</p><h3 id="prop类型">Prop类型</h3><p>Prop的类型有以下八种：</p><ul><li>String</li><li>Number</li><li>Boolean</li><li>Array</li><li>Object</li><li>Date</li><li>Function</li><li>Symbol</li></ul><p>props的写法（无默认值）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">props:&#123;</span><br><span class="line">  title:String,</span><br><span class="line">  likes:Number,</span><br><span class="line">  isPublished:Boolean,</span><br><span class="line">  commentIds:Array,</span><br><span class="line">  author:Object,</span><br><span class="line">  callback:Function,</span><br><span class="line">  contactsPromise:promise</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="传递静态或动态prop">传递静态或动态Prop</h3><p>任何类型的值都可以传给一个prop，不仅能传入静态的值，还能通过<code>v-bind</code>动态赋值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 给prop传入静态的值</span><br><span class="line">&lt;blog-post title=&quot;My journey with Vue&quot;&gt;&lt;/blog-post&gt;</span><br><span class="line"></span><br><span class="line">// 通过v-bind动态赋予一个变量的值</span><br><span class="line">&lt;blog-post v-bind:title=&quot;post.title&quot;&gt;&lt;/blog-post&gt;</span><br><span class="line"></span><br><span class="line">// 通过v-bind动态赋予一个复杂表达式的值</span><br><span class="line">&lt;blog-post v-bind:title=&quot;post.title+&#x27;by&#x27;+post.author.name&quot;&gt;&lt;/blog-post&gt;</span><br></pre></td></tr></table></figure><h4 id="传入一个数字">传入一个数字</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 即使42是静态的，但仍需v-bind来告诉Vue</span><br><span class="line">// 这是一个JavaScript表达式而不是一个字符串</span><br><span class="line">&lt;blog-post v-bind:likes=&quot;42&quot;&gt;&lt;/blog-post&gt;</span><br><span class="line"></span><br><span class="line">// 通过v-bind动态赋予一个变量的值</span><br><span class="line">&lt;blog-post v-bind:likes=&quot;post.likes&quot;&gt;&lt;/blog-post&gt;</span><br></pre></td></tr></table></figure><h4 id="传入一个布尔值">传入一个布尔值</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 即使prop没有值，结果都是true</span><br><span class="line">&lt;blog-post is-published&gt;&lt;/blog-post&gt;</span><br><span class="line"></span><br><span class="line">// 即使false是静态的，但仍需v-bind来告诉Vue</span><br><span class="line">// 这是一个JavaScript表达式而不是一个字符串</span><br><span class="line">&lt;blog-post v-bind:is-published=&quot;false&quot;&gt;&lt;/blog-post&gt;</span><br><span class="line"></span><br><span class="line">// 通过v-bind动态赋予一个变量的值</span><br><span class="line">&lt;blog-post v-bind:is-published=&quot;post.isPublished&quot;&gt;&lt;/blog-post&gt;</span><br></pre></td></tr></table></figure><h4 id="传入一个数组">传入一个数组</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 即使数组是静态的，但仍需v-bind来告诉Vue</span><br><span class="line">// 这是一个JavaScript表达式而不是一个字符串</span><br><span class="line">&lt;blog-post v-bind:comment-ids=&quot;[234,266,273]&quot;&gt;&lt;/blog-post&gt;</span><br><span class="line"></span><br><span class="line">// 通过v-bind动态赋予一个变量的值</span><br><span class="line">&lt;blog-post v-bind:comment-ids=&quot;post.commentIds&quot;&gt;&lt;/blog-post&gt;</span><br></pre></td></tr></table></figure><h4 id="传入一个对象">传入一个对象</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 即使对象是静态的，但仍需v-bind来告诉Vue</span><br><span class="line">// 这是一个JavaScript表达式而不是一个字符串</span><br><span class="line">&lt;blog-post v-bind:author=&quot;&#123;</span><br><span class="line">  name:&#x27;Veronica&#x27;,</span><br><span class="line">  company:&#x27;Veridian Dynamics&#x27;</span><br><span class="line">  &#125;&quot;</span><br><span class="line">&gt;&lt;/blog-post&gt;</span><br><span class="line"></span><br><span class="line">// 通过v-bind动态赋予一个变量的值</span><br><span class="line">&lt;blog-post v-bind:author=&quot;post.author&quot;&gt;&lt;/blog-post&gt;</span><br></pre></td></tr></table></figure><h4 id="传入一个对象的所有property">传入一个对象的所有property</h4><p>若要将一个对象的所有property都作为prop传入，可以使用不带参数的<code>v-bind</code>来取代<code>v-bind:prop-name</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//给定的对象post</span><br><span class="line">post:&#123;</span><br><span class="line">  id:1,</span><br><span class="line">  title:&#x27;My Journey with Vue&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 通过v-bind动态赋予一个变量的值</span><br><span class="line">&lt;blog-post v-bind=&quot;post&quot;&gt;&lt;/blog-post&gt;</span><br><span class="line"></span><br><span class="line">//等价于</span><br><span class="line">&lt;blog-post </span><br><span class="line">  v-bind:id=&quot;post.id&quot;</span><br><span class="line">  v-bind:title=&quot;post.title&quot;</span><br><span class="line">&gt;&lt;/blog-post&gt;</span><br></pre></td></tr></table></figure><h3 id="单向数据流">单向数据流</h3><p>所有的prop都使得其父子prop之间形成了一个单向下行绑定：<strong>父级prop的更新会向下流动到子组件中</strong>，但反过来则不行，这样防止了从子组件意外变更父级组件的状态。</p><p><strong>每次父级组件发生变更时，子组件中所有的prop都将会刷新为最新的值</strong>，因此不应在一个子组件内部改变prop。</p><p>若要变更一个prop，可通过以下方法进行变更：</p><ol type="1"><li><p>这样prop用来传递一个初始值，子组件希望将其作为一个本地的prop数据来使用。此时最好定义一个本地的data property并将这个prop用作其初始值：</p><p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">props</span>:[<span class="string">&#x27;initialCounter&#x27;</span>],</span><br><span class="line"><span class="attr">data</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">counter</span>:<span class="variable language_">this</span>.<span class="property">initialCounter</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>这个prop以一种原始的值传入且需要进行转化。此时最好使用这个prop的值来定义一个计算属性：</p><p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">props</span>:[<span class="string">&#x27;size&#x27;</span>],</span><br><span class="line"><span class="attr">computed</span>:&#123;</span><br><span class="line">  <span class="attr">normalizeSize</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">size</span>.<span class="title function_">trim</span>().<span class="title function_">toLowerCase</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li></ol><p><strong>注意：</strong>在JavaScript中对象和数组是通过引用传入的，所以对于一个数组或对象类型的prop来说，在子组件中改变变更这个对象或数组本身将会影响到父组件的状态。</p><h3 id="prop验证">Prop验证</h3><p>可以通过在<code>props</code>中的值提供一个带有验证需求的对象，从而指定组件的prop验证方式。即为<code>props</code>设定默认值如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">props:&#123;</span><br><span class="line">  propA:Number,//基础的类型检查</span><br><span class="line">  propB:[String,Number],//多个可能的类型</span><br><span class="line">  //必填的字符串</span><br><span class="line">  propC:&#123;</span><br><span class="line">    type:String,</span><br><span class="line">    required:true</span><br><span class="line">  &#125;,</span><br><span class="line">  // 带有默认值的数字</span><br><span class="line">  propD:&#123;</span><br><span class="line">    type:Number,</span><br><span class="line">    default:100</span><br><span class="line">  &#125;,</span><br><span class="line">  // 带有默认值的对象</span><br><span class="line">  propE:&#123;</span><br><span class="line">    type:Object,</span><br><span class="line">    // 对象或数组默认值必须从一个工厂函数获取</span><br><span class="line">    default:function()&#123;</span><br><span class="line">      return &#123;message:&#x27;hello&#x27;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  // 自定义验证函数</span><br><span class="line">  propF:&#123;</span><br><span class="line">    validator:function(value)&#123;</span><br><span class="line">      // 这个值必须匹配下列字符串中的一个</span><br><span class="line">      return [&#x27;success&#x27;,&#x27;warning&#x27;,&#x27;danger&#x27;].indexOf(value)!==-1</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当prop验证失败时，Vue将会产生一个控制台的警告。</p><p>prop会在组件实例创建之前进行验证，因此实例的property（如<code>data</code>、<code>computed</code>等）在<code>default</code>或<code>validator</code>函数中是不可用的。</p><h4 id="类型检查">类型检查</h4><p>prop类型除了可以是八种原生类型之外，还可以是自定义的构造函数，并且通过<code>instanceof</code>来进行检查确认：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给定构造函数Person</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span> (firstName,lastName)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">firstName</span>=firstName</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">lastName</span>=lastName</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//验证 author prop的值是否是通过new Person创建的</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;blog-post&#x27;</span>,&#123;</span><br><span class="line">  <span class="attr">props</span>:&#123;</span><br><span class="line">    <span class="attr">author</span>:<span class="title class_">Person</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="非prop的attribute">非Prop的Attribute</h3><p>传向一个组件，但组件中没有相应prop定义的attribute称之为非prop的attribute。显式定义的prop适用于向一个子组件传入信息。组件可以接收任意的attribute，而这些attribute会被添加到这个组件的根元素上。</p><h4 id="替换合并已有的attribute">替换/合并已有的Attribute</h4><p>现有一个Bootstrap插件里使用了第三方组件<code>&lt;bootstrap-date-input&gt;</code>，其模板如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;data&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>若要为这个插件定制一个主体，则需要添加一个特别的类名如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bootstrap-date-input</span></span></span><br><span class="line"><span class="tag">  <span class="attr">data-date-picker</span>=<span class="string">&quot;activated&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">&quot;date-picker-theme-dark&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">bootstrap-date-input</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在这种情况下共定义了两个不同的class值：</p><ul><li><code>form-control</code>：组件模板内设置好的class</li><li><code>date-picker-theme-dark</code>：从组件父级传入的</li></ul><p>对于绝大多数attribute来说，从外部提供给组件的值会替换掉组件内部设置好的值，<strong>因此若直接传入<code>type="text"</code>就会替换掉<code>type="date"</code>并将其破坏掉。</strong>而<strong><code>class</code>和<code>style</code> attribute会将两边的值合起来</strong>，从而得到最终值：<code>form-control date-picker-theme-dark</code>。</p><h4 id="禁用attribute继承">禁用Attribute继承</h4><p>若不希望组件的根元素继承attribute，可以在组件的选项中设置<code>inheritAttris:false</code>，配合实例的<code>$attrs</code> property使用，便可以手动决定这些attribute会被赋予哪个元素，<strong>常用于撰写基础组件中</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;base-input&#x27;</span>,&#123;</span><br><span class="line">  <span class="attr">inheritAttrs</span>:<span class="literal">false</span>,</span><br><span class="line">  <span class="attr">props</span>:[<span class="string">&#x27;label&#x27;</span>,<span class="string">&#x27;value&#x27;</span>],</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;label&gt;</span></span><br><span class="line"><span class="string">      &#123;&#123;label&#125;&#125;</span></span><br><span class="line"><span class="string">      &lt;input</span></span><br><span class="line"><span class="string">        v-bind=&quot;$attrs&quot;</span></span><br><span class="line"><span class="string">        v-bind:value=&quot;value&quot;</span></span><br><span class="line"><span class="string">        v-on:input=&quot;$emit(&#x27;input&#x27;,$event.target.value)&quot;</span></span><br><span class="line"><span class="string">      &gt;</span></span><br><span class="line"><span class="string">    &lt;/label&gt;</span></span><br><span class="line"><span class="string">  `</span>    </span><br><span class="line">&#125;)xxxxxxxxxx16 1Vue.<span class="title function_">component</span>(<span class="string">&#x27;base-input&#x27;</span>,&#123;<span class="number">2</span>  <span class="attr">inheritAttrs</span>:<span class="literal">false</span>,<span class="number">3</span>  <span class="attr">props</span>:[<span class="string">&#x27;label&#x27;</span>,<span class="string">&#x27;value&#x27;</span>],<span class="number">4</span>  <span class="attr">template</span>: <span class="string">`5    &lt;label&gt;6      &#123;&#123;label&#125;&#125;7      &lt;input8        v-bind=&quot;$attrs&quot;9        v-bind:value=&quot;value&quot;10        v-on:input=&quot;$emit(&#x27;input&#x27;,$event.target.value)&quot;11      &gt;12    &lt;/label&gt;13  `</span>    <span class="number">14</span>&#125;)<span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;my-component&#x27;</span>,&#123;<span class="number">15</span>  <span class="attr">inheritAttrs</span>:<span class="literal">false</span>,<span class="number">16</span>&#125;)</span><br></pre></td></tr></table></figure><p>其中，<strong><code>inheritAttris:false</code>选项不会影响<code>style</code>和<code>class</code>的绑定。</strong></p><p>这个模式允许在使用基础组件时更像是使用原始的HTML元素，而不用担心哪个元素才是真正的根元素。</p><h2 id="自定义事件">自定义事件</h2><h3 id="事件名">事件名</h3><p>不同于组件和prop，事件名不存在任何自动化的大小写转化，<strong>触发的事件名需要完全匹配监听这个事件所用的名称</strong>。如触发事件名是驼峰式命名的，则监听该名字的短横线分隔命名版本是不会有任何效果的。</p><p>不同于组件和prop，事件名不会被用作一个JavaScript变量名或property名，因此不会使用驼峰命名或首字母大写命名。且<code>v-on</code>事件监听器在DOM模板中会被自动转换为全小写，因此<strong>推荐事件名使用短横线分隔命名</strong>。</p><h3 id="自定义组件的v-model">自定义组件的<code>v-model</code></h3><p>一个组件上的<code>v-model</code>默认会利用名为<code>value</code>的prop和名为<code>input</code>的事件。但像单选框、复选框等类型的输入控件可能会将<code>value</code> attribute用于不同的目的，为避免冲突，可使用<code>model</code>选项：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&quot;example&quot;&gt;</span><br><span class="line">    &lt;!-- lovingVue的值将会传如名为checked的prop --&gt;</span><br><span class="line">    &lt;!-- 当&lt;base-checkbox&gt;触发一个change事件并附带一个新值时，lovingVue的property将会被更新 --&gt;</span><br><span class="line">    &lt;base-checkbox v-model=&quot;lovingVue&quot;&gt;&lt;/base-checkbox&gt;</span><br><span class="line">  &lt;/div&gt;  </span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">Vue.component(&#x27;base-checkbox&#x27;,&#123;</span><br><span class="line">  model:&#123;</span><br><span class="line">    prop:&#x27;checked&#x27;,</span><br><span class="line">    event:&#x27;change&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  props:&#123;</span><br><span class="line">    checked:Boolean//props里仍需要声明checked这个prop</span><br><span class="line">  &#125;,</span><br><span class="line">  template:`</span><br><span class="line">    &lt;input </span><br><span class="line">      type=&quot;checkbox&quot;</span><br><span class="line">      v-bind:checked=&quot;checked&quot;</span><br><span class="line">      v-on:change=&quot;$emit(&#x27;change&#x27;,$event.target.checked)&quot;</span><br><span class="line">    &gt;</span><br><span class="line">  `    </span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="将原生事件绑定到组件">将原生事件绑定到组件</h3><p>若要在一个组件的根元素上直接监听一个原生事件，可以使用<code>v-on</code>的<code>.native</code>修饰符：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">base-input</span> <span class="attr">v-on:focus.native</span>=<span class="string">&quot;onFocus&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">base-input</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当监听一个类似<code>&lt;input&gt;</code>的特定元素时，父级的<code>.native</code>监听器将会静默失败，其不会产生任何报错，但<code>onFocus</code>处理函数也不会被调用。</p><p>Vue提供了一个<code>$listeners</code> property来解决这一问题，它是一个对象，里面包含了作用在这个组件上的所有监听器，如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">focus</span>:<span class="keyword">function</span>(<span class="params">event</span>)&#123;&#125;,</span><br><span class="line">  <span class="attr">input</span>:<span class="keyword">function</span>(<span class="params">event</span>)&#123;&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有了<code>$listeners</code> property，再配合<code>v-on=$listeners</code>便可以将所有的事件监听器指向这个组件的某个特定的子元素。</p><p>对于希望<code>&lt;input&gt;</code>也能配合<code>v-model</code>工作的组件，应为这些监听器创建一个<code>inputListeners</code>计算属性如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">Vue.component(&#x27;base-input&#x27;,&#123;</span><br><span class="line">  inheritAttrs:false,</span><br><span class="line">  props:[&#x27;label&#x27;,&#x27;value&#x27;],</span><br><span class="line">  computed:&#123;</span><br><span class="line">    inputListeners:function()&#123;</span><br><span class="line">      var vm=this</span><br><span class="line">      return Object.assign(&#123;&#125;,</span><br><span class="line">        this.$listeners,</span><br><span class="line">        &#123;</span><br><span class="line">          input:function(event)&#123;</span><br><span class="line">            vm.$emit(&#x27;input&#x27;,event.target.value)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  template: `</span><br><span class="line">    &lt;label&gt;</span><br><span class="line">      &#123;&#123;label&#125;&#125;</span><br><span class="line">      &lt;input</span><br><span class="line">        v-bind=&quot;$attrs&quot;</span><br><span class="line">        v-bind:value=&quot;value&quot;</span><br><span class="line">        v-on=&quot;inputListeners&quot;</span><br><span class="line">      &gt;</span><br><span class="line">    &lt;/label&gt;</span><br><span class="line">  `      </span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>此时<code>&lt;base-input&gt;</code>组件是一个完全透明的包裹器了，即它可以像一个普通的<code>&lt;input&gt;</code>元素一样使用。所有跟<code>&lt;base-input&gt;</code>组件相同的attribute和监听器都可以工作，不必再使用<code>.native</code>监听器来监听事件。</p><h3 id="sync修饰符"><code>.sync</code>修饰符</h3><p>若需要对一个prop进行”双向绑定“时，可以用<code>update:myPropName</code>的模式触发事件来处理。</p><p>如在一个包含<code>title</code> prop的组件中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">Vue.component(&#x27;text-document&#x27;,&#123;</span><br><span class="line">  props:[&#x27;title&#x27;],</span><br><span class="line">  template: `</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      我是子节点</span><br><span class="line">      &lt;button @click=&quot;handleClick&quot;&gt;点击我改变父级Title&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  `,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    handleClick()&#123;</span><br><span class="line">      this.count+=1;</span><br><span class="line">      newTitle=this.title+this.count;//对title赋新值</span><br><span class="line">      this.$emit(&#x27;update:childTitle&#x27;,newTitle)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  data()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">      count:0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">const app=new Vue(&#123;</span><br><span class="line">  el:&#x27;#example&#x27;,</span><br><span class="line">  data:&#123;</span><br><span class="line">    parentTitle:&quot;我是父级title&quot;,</span><br><span class="line">  &#125;,</span><br><span class="line">    //父组件可以监听那个事件并根据需要更新一个本地的数据property</span><br><span class="line">  template: `</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      我是父级节点</span><br><span class="line">      &lt;text-document </span><br><span class="line">        v-bind:title=&quot;parentTitle&quot; </span><br><span class="line">        v-on:update:title=&quot;parentTitle=$event&quot;</span><br><span class="line">      &gt;&lt;/text-document&gt;</span><br><span class="line">        &#123;&#123;parentTitle&#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  `    </span><br><span class="line">  //上述代码可用.sync修饰符缩写为</span><br><span class="line">  //&lt;text-document :title=&quot;parentTitle&quot; :title.sync=&quot;parentTitle&quot;&gt;&lt;/text-document&gt;  </span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>注意带有<code>.sync</code>修饰符的<code>v-bind</code>不能和表达式一起使用（如<code>v-bind:title.sync="doc.title+'!'"</code>是无效的），只能提供想绑定的property名，如<code>v-model</code>。</p><p>当用一个对象同时设置多个prop时，也可以将<code>.sync</code>修饰符和<code>v-bind</code>配合使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;text-document v-bind.sync=&quot;doc&quot;&gt;&lt;/text-document&gt;</span><br></pre></td></tr></table></figure><p>这样会把<code>doc</code>对象中的每个property都作为一个独立的prop传进去，然后各自添加用于更新的<code>v-on</code>监听器。</p><p><strong>注意：</strong>将<code>v-bind.sync</code>用在一个字面量的对象上（如整数、浮点数及字符串等）时是无法正常工作的，如<code>v-bind.sync="&#123;title:doc.title&#125;"</code>。</p><h2 id="插槽">插槽</h2><p>在Vue2.6.0版本中引入了具名插槽和作用域插槽的因语法<code>v-slot</code>指令，它取代了<code>slot</code>和<code>slot-scope</code>这两个已被废除但未被移除的attribute。</p><h3 id="插槽内容">插槽内容</h3><p>Vue实现了一套内容分发的API，其将<code>&lt;slot&gt;</code>元素作为承载分发内容的出口。</p><p>它允许像这样合成组件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">navigation-link</span> <span class="attr">url</span>=<span class="string">&quot;/profile&quot;</span>&gt;</span></span><br><span class="line">  Your Profile</span><br><span class="line"><span class="tag">&lt;/<span class="name">navigation-link</span>&gt;</span> </span><br></pre></td></tr></table></figure><p>其中，<code>&lt;/navigation-link&gt;</code>的模板如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;url&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nav-link&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span> </span><br></pre></td></tr></table></figure><p>当组件渲染时，<code>&lt;slot&gt;&lt;/slot&gt;</code>将会被替换为Your Profile的内容。插槽内可以包含任何模板代码，包括HTML或是它的组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;navigation-link url=&quot;/profile&quot;&gt;</span><br><span class="line">  &lt;!-- 添加一个Font Awesome图标 --&gt;</span><br><span class="line">  &lt;span class=&quot;fa fa-user&quot;&gt;&lt;/span&gt;</span><br><span class="line">    Your Profile</span><br><span class="line">&lt;/navigation-link&gt; </span><br><span class="line"></span><br><span class="line">&lt;navigation-link url=&quot;/profile&quot;&gt;</span><br><span class="line">  &lt;!-- 添加一个图标的组件 --&gt;</span><br><span class="line">  &lt;font-awesome-icon name=&quot;user&quot;&gt;&lt;/font-awesome-icon&gt;</span><br><span class="line">    Your Profile</span><br><span class="line">&lt;/navigation-link&gt;</span><br></pre></td></tr></table></figure><p>若<code>&lt;navigation-link&gt;</code>的<code>template</code>中没有包含一个<code>&lt;slot&gt;</code>元素，则该组件起始标签和结束标签之间的内容都会被抛弃。</p><h3 id="编译作用域">编译作用域</h3><p>当想在一个插槽中使用数据时，<strong>该插槽跟模板其他地方一样可以访问相同的实例property，而不能访问<code>&lt;navigation-link&gt;</code>的作用域</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;navigation-link url=&quot;/profile&quot;&gt;</span><br><span class="line">  &lt;!-- user.name的数据能正常访问 --&gt;</span><br><span class="line">  Logged in as &#123;&#123;user.name&#125;&#125;</span><br><span class="line">  &lt;!-- 这里的url的值是undefined --&gt;</span><br><span class="line">  &lt;!-- 因为该插槽的内容是传递给&lt;navigation-link&gt;的而不是在其组件内部定义的 --&gt;</span><br><span class="line">  Clicking here will send you to:&#123;&#123;url&#125;&#125;</span><br><span class="line">&lt;/navigation-link&gt; </span><br></pre></td></tr></table></figure><p><strong>父级模板里的所有内容都是在父级作用域中编译的，子模板里的所有内容都是在子作用域中编译的。</strong></p><h3 id="后备内容">后备内容</h3><p>为一个插槽设置具体的后备内容（即默认内容）是很有必要的，它只会在没有提供内容的时候被渲染。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;button type=&quot;submit&quot;&gt;</span><br><span class="line">  &lt;!-- button绝大多数都渲染文本Submit --&gt;</span><br><span class="line">  &lt;slot&gt;Submit&lt;/slot&gt;</span><br><span class="line">&lt;/button&gt;</span><br></pre></td></tr></table></figure><p>此时若在父级组件中使用<code>&lt;submit-button&gt;</code>且不提供任何插槽内容时，后备内容“Submit”将会被渲染；若提供内容时，在这个提供的内容将会取代后备内容被渲染</p><h3 id="具名插槽">具名插槽</h3><p>有时在一个模板里需要多个插槽时，可以使用<code>&lt;slot&gt;</code>元素中的<code>name</code> attribute，其可以用来定义额外的插槽：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;container&quot;&gt;</span><br><span class="line">  &lt;header&gt;</span><br><span class="line">    &lt;slot name=&quot;header&quot;&gt;&lt;/slot&gt;</span><br><span class="line">  &lt;/header&gt;</span><br><span class="line">  &lt;main&gt;</span><br><span class="line">    &lt;!-- 不带name的&lt;slot&gt;，会默认带有一个隐含的名字default --&gt;</span><br><span class="line">    &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">  &lt;/main&gt;</span><br><span class="line">  &lt;footer&gt;</span><br><span class="line">    &lt;slot name=&quot;footer&quot;&gt;&lt;/slot&gt;</span><br><span class="line">  &lt;/footer&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>在向具名插槽提供内容时，可以在一个<code>&lt;template&gt;</code>元素上使用<code>v-slot</code>指令，并以<code>v-slot</code>参数的形式提供其名称：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;base-layout&gt;</span><br><span class="line">  &lt;template v-slot:header&gt;</span><br><span class="line">    &lt;h1&gt;Here might be a page title&lt;/h1&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">    </span><br><span class="line">  &lt;p&gt;A paragraph for the main content.&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;And another one.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">  &lt;template v-slot:footer&gt;</span><br><span class="line">    &lt;p&gt;Here&#x27;s some contact info&lt;/p&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">&lt;/base-layout&gt;</span><br></pre></td></tr></table></figure><p>现在<code>&lt;template&gt;</code>元素中的所有内容都将会被传入相应的插槽，任何没有被包裹在带有<code>v-slot</code>的<code>&lt;template&gt;</code>中的内容都会被视为默认插槽的内容。</p><p>即上述代码等价于：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;base-layout&gt;</span><br><span class="line">  &lt;template v-slot:header&gt;</span><br><span class="line">    &lt;h1&gt;Here might be a page title&lt;/h1&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">  &lt;template v-slot:default&gt;</span><br><span class="line">    &lt;p&gt;A paragraph for the main content.&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;And another one.&lt;/p&gt;</span><br><span class="line">  &lt;/template&gt; </span><br><span class="line">  </span><br><span class="line">  &lt;template v-slot:footer&gt;</span><br><span class="line">    &lt;p&gt;Here&#x27;s some contact info&lt;/p&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">&lt;/base-layout&gt;</span><br></pre></td></tr></table></figure><p><strong>注意：<code>v-slot</code>只能添加在<code>&lt;template&gt;</code>上。</strong></p><h3 id="作用域插槽">作用域插槽</h3><p>有时会让插槽内容能够访问子组件中才有的数据。如这里有个组件<code>&lt;current-user&gt;</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;span&gt;</span><br><span class="line">  &lt;slot&gt;&#123;&#123;user.lastName&#125;&#125;&lt;/slot&gt;</span><br><span class="line">&lt;/span&gt;</span><br></pre></td></tr></table></figure><p>若想换掉备用内容，用名来显示，直接将组件中的<code>user.lastName</code>换成<code>user.firstName</code>是不行的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;current-user&gt;</span><br><span class="line">  &#123;&#123;user.firstName&#125;&#125;</span><br><span class="line">&lt;/current-user&gt;</span><br></pre></td></tr></table></figure><p>由于只有<code>&lt;current-user&gt;</code>组件可以访问到<code>user</code>，而所提供的内容是在父级渲染的。因此为了让<code>user</code>在父级的插槽内容中可用，<strong>将<code>user</code>作为<code>&lt;slot&gt;</code>元素的一个attribute绑定上去</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;span&gt;</span><br><span class="line">  &lt;slot v-bind:user=&quot;user&quot;&gt;&#123;&#123;user.lastName&#125;&#125;&lt;/slot&gt;</span><br><span class="line">&lt;/span&gt;</span><br></pre></td></tr></table></figure><p>绑定在<code>&lt;slot&gt;</code>元素上的attribute被称为插槽prop。在父级作用域中，可以使用带值的<code>v-slot</code>来定义所提供插槽prop的名字：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;current-user&gt;</span><br><span class="line">  &lt;!-- slotProps为包含所有插槽prop的对象 --&gt;</span><br><span class="line">  &lt;template v-slot:default=&quot;slotProps&quot;&gt;</span><br><span class="line">    &#123;&#123;slotProps.user.firstName&#125;&#125;</span><br><span class="line">  &lt;/template&gt;  </span><br><span class="line">&lt;/current-user&gt;</span><br></pre></td></tr></table></figure><h4 id="独占默认插槽的缩写语法">独占默认插槽的缩写语法</h4><p><strong>当被提供的内容只有默认插槽时，组件的标签才可以被当作插槽的模板来使用。</strong>此时可以把<code>v-slot</code>直接用在组件上：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;current-user v-slot:default=&quot;slotProps&quot;&gt;</span><br><span class="line">  &#123;&#123;slotProps.user.firstName&#125;&#125; </span><br><span class="line">&lt;/current-user&gt;</span><br></pre></td></tr></table></figure><p>由于不带参数的<code>v-slot</code>被假定为对应默认的插槽，因此还有更简化的写法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;current-user v-slot=&quot;slotProps&quot;&gt;</span><br><span class="line">  &#123;&#123;slotProps.user.firstName&#125;&#125; </span><br><span class="line">&lt;/current-user&gt;</span><br></pre></td></tr></table></figure><p><strong>默认插槽的缩写写法不能和具名插槽混用，这会导致作用域不明确。</strong></p><p>只要出现多个插槽，则始终要为所有的插槽使用完整的基于<code>&lt;template&gt;</code>的语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;current-user&gt;</span><br><span class="line">  &lt;template v-slot:default=&quot;slotProps&quot;&gt;</span><br><span class="line">    &#123;&#123;slotProps.user.firstName&#125;&#125;</span><br><span class="line">  &lt;/template&gt;  </span><br><span class="line"></span><br><span class="line">  &lt;template v-slot:other=&quot;otherSlotProps&quot;&gt;</span><br><span class="line">    ...</span><br><span class="line">  &lt;/template&gt;  </span><br><span class="line">&lt;/current-user&gt;</span><br></pre></td></tr></table></figure><h4 id="解析插槽prop">解析插槽Prop</h4><p>作用域插槽的内部工作原理是将插槽内容包裹在一个拥有单个参数的函数里：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>(<span class="params">slotProps</span>)&#123;</span><br><span class="line">  <span class="comment">//插槽内容</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这意味着<code>v-slot</code>的值实际上可以是任何能够作为函数定义中参数的JavaScript表达式。因此在支持的环境下（单文件组件或现代浏览器），也可以使用ES2015解构来传入具体的插槽prop：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;current-user v-slot=&quot;&#123;user&#125;&quot;&gt;</span><br><span class="line">  &#123;&#123;user.firstName&#125;&#125; </span><br><span class="line">&lt;/current-user&gt;</span><br></pre></td></tr></table></figure><p>这样可以在该插槽提供了多个prop时让代码更简洁。它同样开启了prop重命名等功能，如把<code>user</code>重命名为<code>person</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;current-user v-slot=&quot;&#123;user:person&#125;&quot;&gt;</span><br><span class="line">  &#123;&#123;person.firstName&#125;&#125; </span><br><span class="line">&lt;/current-user&gt;</span><br></pre></td></tr></table></figure><p>还可以定义后备内容，用于插槽prop是undefined的情形：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;current-user v-slot=&quot;&#123;user=&#123;firstName:&#x27;Guest&#x27;&#125;&#125;&quot;&gt;</span><br><span class="line">  &#123;&#123;user.firstName&#125;&#125; </span><br><span class="line">&lt;/current-user&gt;</span><br></pre></td></tr></table></figure><h3 id="动态插槽名">动态插槽名</h3><p>动态指令参数也可以用在<code>v-slot</code>上，来定义动态的插槽名：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;base-layout&gt;</span><br><span class="line">  &lt;template v-slot:[dynamicSlotName]&gt;</span><br><span class="line">    ...</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">&lt;/base-layout&gt;</span><br></pre></td></tr></table></figure><h3 id="具名插槽的缩写">具名插槽的缩写</h3><p>与<code>v-on</code>和<code>v-bind</code>一样，<code>v-slot</code>也有缩写，即把参数之前的所有内容（<code>v-slot:</code>）替换为字符<code>#</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;base-layout&gt;</span><br><span class="line">  &lt;template #header&gt;</span><br><span class="line">    &lt;h1&gt;Here might be a page title&lt;/h1&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">    </span><br><span class="line">  &lt;p&gt;A paragraph for the main content.&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;And another one.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">  &lt;template #footer&gt;</span><br><span class="line">    &lt;p&gt;Here&#x27;s some contact info&lt;/p&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">&lt;/base-layout&gt;</span><br></pre></td></tr></table></figure><p>与其他指令相同，该缩写只在其有参数时才可用。若希望无参数时也能使用缩写的话，就必须始终明确插槽名：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;current-user #default=&quot;&#123;user&#125;&quot;&gt;</span><br><span class="line">    &#123;&#123;user.firstName&#125;&#125; </span><br><span class="line">&lt;/current-user&gt;</span><br></pre></td></tr></table></figure><h3 id="其他实例">其他实例</h3><p>插槽prop允许将插槽转换为可复用的模板，这些模板可以基于输入的prop渲染出不同的内容。这在设<strong>计封装数据逻辑的同时允许父级组件自定义部分布局的可复用组件</strong>是最有用的。</p><p>如要实现一个<code>&lt;todo-list&gt;</code>组件，它是一个列表且包含布局和过滤逻辑：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li</span><br><span class="line">    v-for=&quot;todo in filteredTodos&quot;</span><br><span class="line">    v-bind:key=&quot;todo.id&quot;</span><br><span class="line">  &gt;</span><br><span class="line">    &#123;&#123;todo.text&#125;&#125;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><p>可以考虑将每个todo作为父级组件的插槽，以此通过父级组件对其进行控制，然后将<code>todo</code>作为一个插槽prop进行绑定：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li</span><br><span class="line">    v-for=&quot;todo in filteredTodos&quot;</span><br><span class="line">    v-bind:key=&quot;todo.id&quot;</span><br><span class="line">  &gt;</span><br><span class="line">    &lt;!-- 为每个todo准备了插槽，将todo对象作为一个插槽的prop传入 --&gt;</span><br><span class="line">    &lt;slot name=&quot;todo&quot; v-bind:todo=&quot;todo&quot;&gt;</span><br><span class="line">      &#123;&#123;todo.text&#125;&#125;</span><br><span class="line">    &lt;/slot&gt;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><p>现在使用<code>&lt;itodo-list&gt;</code>组件时，可以选择为todo定义一个不一样的<code>&lt;template&gt;</code>作为替代方案，并且可以从子组件中获取数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;todo-list v-bind:todo=&quot;todos&quot;&gt;</span><br><span class="line">  &lt;template v-slot:todo=&quot;&#123;todo&#125;&quot;&gt;</span><br><span class="line">    &lt;span v-if=&quot;todo.isComplete&quot;&gt;&lt;/span&gt;</span><br><span class="line">    &#123;&#123;todo.text&#125;&#125;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">&lt;/todo-list&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">前端,Vue.js</summary>
    
    
    
    <category term="学习笔记" scheme="http://tangmenjue.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="前端" scheme="http://tangmenjue.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="前端框架" scheme="http://tangmenjue.top/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="Vue.js" scheme="http://tangmenjue.top/tags/Vue-js/"/>
    
    <category term="前端" scheme="http://tangmenjue.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js实战之todolist待办项目</title>
    <link href="http://tangmenjue.top/2022/11/05/Vue.js%E5%AE%9E%E6%88%98%E4%B9%8Btodolist%E5%BE%85%E5%8A%9E%E9%A1%B9%E7%9B%AE/"/>
    <id>http://tangmenjue.top/2022/11/05/Vue.js%E5%AE%9E%E6%88%98%E4%B9%8Btodolist%E5%BE%85%E5%8A%9E%E9%A1%B9%E7%9B%AE/</id>
    <published>2022-11-05T09:33:51.000Z</published>
    <updated>2022-11-05T09:33:51.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初始化一个新项目">初始化一个新项目</h1><ul><li><p>要初始化一个新项目，创建一个文件夹test作为项目目录，打开一个终端将切换路径到test，运行代码：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\Administrator\Desktop\<span class="built_in">test</span>&gt; vue create <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line">运行结果如下：</span><br><span class="line"> Your connection to the default yarn registry seems to be slow.</span><br><span class="line">   Use https://registry.npmmirror.com <span class="keyword">for</span> faster installation? (Y/n)输入Y回车</span><br><span class="line">   Vue CLI v5.0.8</span><br><span class="line">? Please pick a preset: (Use arrow keys)</span><br><span class="line">&gt; Default ([Vue 3] babel, eslint)</span><br><span class="line">  Default ([Vue 2] babel, eslint)</span><br><span class="line">  Manually select features</span><br></pre></td></tr></table></figure></p></li><li><p>使用方向键选择<code>“ Manually select features”</code>（手动选择）选项后按下键盘上的回车键继续。</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Vue CLI v5.0.8</span><br><span class="line">? Please pick a preset: Manually select features</span><br><span class="line">? Check the features needed <span class="keyword">for</span> your project: (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection, and</span><br><span class="line">&lt;enter&gt; to proceed)</span><br><span class="line">&gt;(*) Babel</span><br><span class="line"> ( ) TypeScript</span><br><span class="line"> ( ) Progressive Web App (PWA) Support</span><br><span class="line"> ( ) Router</span><br><span class="line"> ( ) Vuex</span><br><span class="line"> ( ) CSS Pre-processors</span><br><span class="line"> (*) Linter / Formatter</span><br><span class="line"> ( ) Unit Testing</span><br><span class="line"> ( ) E2E Testing</span><br></pre></td></tr></table></figure></p></li><li><p>可以看到第一个菜单允许选择想要包含在项目中的功能，确保<code>“Babel”</code>和<code>“Linter / Formatter”</code>这两项是被选中的。若它们没有被选中，使用方向键切换，按空格键来选中它们，若它们被选中，按下回车键继续。</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Vue CLI v5.0.8</span><br><span class="line">? Please pick a preset: Manually select features</span><br><span class="line">? Check the features needed <span class="keyword">for</span> your project: Babel, Linter</span><br><span class="line">? Choose a version of Vue.js that you want to start the project with (Use arrow keys)</span><br><span class="line">&gt; 3.x</span><br><span class="line">  2.x</span><br></pre></td></tr></table></figure></p></li><li><p>接下来为选择Vue.js版本，使用方向键选中3.x选项后按下键盘上的回车键继续。</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Vue CLI v5.0.8</span><br><span class="line">? Please pick a preset: Manually select features</span><br><span class="line">? Check the features needed <span class="keyword">for</span> your project: Babel, Linter</span><br><span class="line">? Choose a version of Vue.js that you want to start the project with 3.x</span><br><span class="line">? Pick a linter / formatter config: (Use arrow keys)</span><br><span class="line">&gt; ESLint with error prevention only</span><br><span class="line">  ESLint + Airbnb config</span><br><span class="line">  ESLint + Standard config</span><br><span class="line">  ESLint + Prettier</span><br></pre></td></tr></table></figure></p></li><li><p>接下来为<code>linter / formatter</code>选择一个配置，使用方向键选中<code>"ESLint with error prevention only"</code>选项后按下键盘上的回车键继续。这样可以辅助我们捕获常见的错误。</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Vue CLI v5.0.8</span><br><span class="line">? Please pick a preset: Manually select features</span><br><span class="line">? Check the features needed <span class="keyword">for</span> your project: Babel, Linter</span><br><span class="line">? Choose a version of Vue.js that you want to start the project with 3.x</span><br><span class="line">? Pick a linter / formatter config: Basic</span><br><span class="line">? Pick additional lint features: (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection, and &lt;enter&gt; to</span><br><span class="line">proceed)</span><br><span class="line">&gt;(*) Lint on save</span><br><span class="line"> ( ) Lint and fix on commit</span><br></pre></td></tr></table></figure></p></li><li><p>接下来选择需要哪种自动化的Lint，使用方向键选中<code>"Lint on save"</code>选项后按下键盘上的回车键继续。</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Vue CLI v5.0.8</span><br><span class="line">? Please pick a preset: Manually select features</span><br><span class="line">? Check the features needed <span class="keyword">for</span> your project: Babel, Linter</span><br><span class="line">? Choose a version of Vue.js that you want to start the project with 3.x</span><br><span class="line">? Pick a linter / formatter config: Basic</span><br><span class="line">? Pick additional lint features: (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection, and &lt;enter&gt; to</span><br><span class="line">proceed)</span><br><span class="line">&gt;(*) Lint on save</span><br><span class="line"> ( ) Lint and fix on commit</span><br></pre></td></tr></table></figure></p></li><li><p>接下来选择把配置文件放在哪里。<code>"In dedicated config files"</code>这个选项会把配置文件单独放在一个文件里，另一个选项<code>"In package.json"</code>会把配置文件放仅项目文件<code>package.json</code>里。选择<code>"In dedicated config files"</code>选项后按下键盘上的回车键继续。</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Vue CLI v5.0.8</span><br><span class="line">? Please pick a preset: Manually select features</span><br><span class="line">? Check the features needed <span class="keyword">for</span> your project: Babel, Linter</span><br><span class="line">? Choose a version of Vue.js that you want to start the project with 3.x</span><br><span class="line">? Pick a linter / formatter config: Basic</span><br><span class="line">? Pick additional lint features: Lint on save</span><br><span class="line">? Where <span class="keyword">do</span> you prefer placing config <span class="keyword">for</span> Babel, ESLint, etc.? (Use arrow keys)</span><br><span class="line">&gt; In dedicated config files</span><br><span class="line">  In package.json</span><br></pre></td></tr></table></figure></p></li><li><p>最后选择是否把这次的选择作为未来的预设配置。输入<code>y</code>后按下键盘上的回车键后输入保存的配置名称。然后脚手架工具就开始构建项目，并且安装所需的依赖。</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Vue CLI v5.0.8</span><br><span class="line">? Please pick a preset: Manually select features</span><br><span class="line">? Check the features needed <span class="keyword">for</span> your project: Babel, Linter</span><br><span class="line">? Choose a version of Vue.js that you want to start the project with 3.x</span><br><span class="line">? Pick a linter / formatter config: Basic</span><br><span class="line">? Pick additional lint features: Lint on save</span><br><span class="line">? Where <span class="keyword">do</span> you prefer placing config <span class="keyword">for</span> Babel, ESLint, etc.? In dedicated config files</span><br><span class="line">? Save this as a preset <span class="keyword">for</span> future projects? (y/N)</span><br></pre></td></tr></table></figure></p></li></ul><h2 id="项目结构">项目结构</h2><p>如果前面的步骤都顺利执行的话，脚手架工具已经在项目中创建了一系列的文件和目录，其项目结构如下：</p><p><img src="/2022/11/05/Vue.js%E5%AE%9E%E6%88%98%E4%B9%8Btodolist%E5%BE%85%E5%8A%9E%E9%A1%B9%E7%9B%AE/1.png"></p><ul><li><p><code>eslintrc.js</code>：是<code>eslint</code>的配置文件，可以通过它来管理校验规则</p></li><li><p><code>babel.config.js</code>：是<code>Babel</code>的配置文件，可以在开发中使用JavaScript的新特性，并且将其转换为在生成环境中可以跨浏览器运行的旧语法代码，也可以在这里配置额外的babel插件</p></li><li><p><code>.browserslistrc</code>：是<code>Browserslist</code>的配置文件，可以通过它来控制需要对哪些浏览器进行支持和优化</p></li><li><p><code>public</code>：该目录包含一些在<code>Webpack</code>编译过程中没有架构处理过的文件（<code>index.html</code>除外）</p><ul><li><code>favicon.ico</code>：项目的图标，当前是一个Vue的logo</li><li><code>index.html</code>：应用模板文件，Vue应用会通过这个HTML页面来运行，也可以通过<code>lodash</code>这种模板语法在这个文件里插值</li></ul></li><li><p><code>src</code>：Vue应用的核心代码目录</p><ul><li><code>main.js</code>：应用的入口文件。目前它会初始化Vue应用并指定将应用挂载到index.html文件中的哪个HTML元素上。通常还会做一些注册全局组件或者添加额外的Vue库的操作</li><li><code>App.vue</code>：Vue应用的根节点组件</li><li><code>components</code>：用来存放自定义组件的目录，当前里面会有一个示例组件</li><li><code>assets</code>：用来存放如CSS、图片这类的静态资源，可以用<code>webpack</code>来操作和处理 根据创建项目时的配置项不同，可能会有一些其他的预设目录，比如选择了路由配置，会看到一个<code>views</code>文件夹。</li></ul></li></ul><h2 id="vue文件单文件组件"><code>.vue</code>文件（单文件组件）</h2><p>组件是构建Vue应用中非常重要的一部分，其可以把一个很大的应用程序拆分为独立创建和管理的不相干区块，然后彼此按需传递数据。</p><p>在其他框架鼓励把模板、逻辑和样式的代码区分成不同文件时，Vue提倡使用单文件组件，把模板、相关脚本和CSS整合到一起放在<code>.vue</code>结尾的单文件中。这些文件最终会通过JS打包工具（如<code>Webpack</code>）处理。</p><p>使用Vue CLI创建的项目被配置为开箱即用的情况下，可以在CLI创建项目中的<code>src</code>文件夹里看到第一个<code>.vue</code>文件：<code>App.vue</code>。</p><h2 id="app.vue"><code>App.vue</code></h2><p>打开<code>App.vue</code>文件，可以看到有<code>&lt;template&gt;</code>、<code>&lt;script&gt;</code>和<code>&lt;style&gt;</code>三部分组成，分别包含了组件的模板、脚本和样式相关的内容。所有单文件组件内的结构都是这种类似的结构。</p><p><strong><code>&lt;tamplate&gt;</code>包含了所有的标记结构和组件的展示逻辑。tamplate可以包含任何合法的HTML以及Vue特点的语法。</strong>如通过设置<code>&lt;tamplate lang="pug"&gt;</code>可以使用Pug模板来替代标准HTML。</p><p><strong><code>&lt;script&gt;</code>包含组件中所有的非显示逻辑，<code>&lt;script&gt;</code>标签默认导出一个JS对象。</strong>该对象用于在本地注册组件、定义属性、处理本地状态、定义方法等地方。在构建阶段这个包含<code>&lt;tamplate&gt;</code>的对象会被处理和转换成为一个有<code>render()</code>函数的Vue组件。</p><p>对于<code>App.vue</code>，默认导出将组件的名称设置为<code>app</code>，并通过将<code>HelloWorld</code>组件添加到<code>components</code>属性中来注册它。以这种方式注册组件时，意味着就是在本地注册，本地注册的组件只能在注册它们的组件内部使用，因此需要将其导入并注册到使用它们的每个组件文件中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">HelloWorld</span> form <span class="string">&#x27;./components/Helloworld.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>:<span class="string">&#x27;app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">components</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//在这里本地注册组件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">HelloWorld</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>若想要使用<code>TypeScript</code>语法，可以将<code>&lt;script&gt;</code>标签的<code>lang</code>属性设置为<code>&lt;script lang='ts'&gt;</code>。</p><p>组件的CSS应写在<code>&lt;style&gt;</code>标签里，<strong>若添加了<code>&lt;scoped&gt;</code>属性（如<code>&lt;style scoped&gt;</code>)，Vue会把样式的范围显示在单文件组件的内容里。</strong>设置类似于CSS-in-JS的解决方案，只不过是允许书写纯粹的CSS。</p><p><strong>注意：</strong>若通过CLI创建项目是选择了CSS预处理器，则可以将<code>lang</code>属性添加到<code>&lt;style&gt;</code>标签中，以便<code>Webpack</code>可以在构建时处理内容。如<code>&lt;style lang="scss"&gt;</code>将允许在样式信息中使用SCSS语法。</p><h2 id="本地运行程序">本地运行程序</h2><p>Vue CLI带有内置的开发服务器，因此可以无需自己配置服务器便可在本地运行并测试应用程序。CLI会以npm脚本的形式将<code>serve</code>命令添加到项目的<code>package.json</code>文件中，因此可以轻松地运行它。</p><p>在终端中，切换到项目所在的路径，输入<code>npm run serve</code>或者<code>yarn run serve</code>即可运行服务器，此时的终端应输出以下类似的内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\Administrator\Desktop\<span class="built_in">test</span>\<span class="built_in">test</span>&gt; npm run serve</span><br><span class="line"></span><br><span class="line">&gt; <span class="built_in">test</span>@0.1.0 serve</span><br><span class="line">&gt; vue-cli-service serve</span><br><span class="line"></span><br><span class="line"> INFO  Starting development server...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> DONE  Compiled successfully <span class="keyword">in</span> 1995ms                                                                          14:28:36</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  App running at:</span><br><span class="line">  - Local:   http://localhost:8080/</span><br><span class="line">  - Network: http://10.17.212.3:8080/</span><br><span class="line"></span><br><span class="line">  Note that the development build is not optimized.</span><br><span class="line">  To create a production build, run yarn build.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> WAIT  Compiling...                                                                                             14:28:36</span><br><span class="line"></span><br><span class="line">Compiling...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> DONE  Compiled successfully <span class="keyword">in</span> 70ms                                                                            14:28:36</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  App running at:</span><br><span class="line">  - Local:   http://localhost:8080/</span><br><span class="line">  - Network: http://10.17.212.3:8080/</span><br></pre></td></tr></table></figure><p>若在浏览器中打开<code>http://localhost:8080/</code>或<code>http://10.17.212.3:8080/</code>，便可以看到应用程序。当前它应该包含欢迎信息、Vue文档的链接、使用CLI初始化应用程序时添加的插件链接，以及指向Vue社区和生态系统的其他有用链接。</p><p><img src="/2022/11/05/Vue.js%E5%AE%9E%E6%88%98%E4%B9%8Btodolist%E5%BE%85%E5%8A%9E%E9%A1%B9%E7%9B%AE/2.png"></p><h2 id="改动应用">改动应用</h2><p>对应用做出第一步改动，删除Vue logo。打开<code>App.vue</code>文件，在template部分删除<code>&lt;img&gt;</code>元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&quot;Vue logo&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./assets/logo.png&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>服务器仍在正常运行时，可以看到logo是即时从之前渲染的页面中消失。接下来再把<code>HelloWorld</code>组件也删掉。</p><p>首先删除下面这一行：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">HelloWorld</span> <span class="keyword">from</span> <span class="string">&#x27;./components/HelloWorld.vue&#x27;</span></span><br></pre></td></tr></table></figure><p>若这时候保存<code>App.vue</code>文件，渲染好的应用会因为找不到<code>HelloWorld</code>组件而抛出一个错误。</p><p>在<code>&lt;script&gt;</code>中将引入和注册组件的那几行删掉：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">components</span>: &#123;</span><br><span class="line">  <span class="title class_">HelloWorld</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时渲染好的应用不再显示错误了，只有一个空页面。</p><p>接下来来创建一个任务清单的应用。打开<code>App.vue</code>文件，将下列代码删除：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">HelloWorld</span> <span class="attr">msg</span>=<span class="string">&quot;Welcome to Your Vue.js App&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>编写代码如下，在<code>&lt;div id="app"&gt;</code>中新增一个<code>&lt;h1&gt;</code>标签，并将标题文案设为"To-Do List"：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;h1&gt;To-Do List&lt;/h1&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>此时服务器会展示<code>To-Do List</code>标题。</p><h2 id="小结">小结</h2><p>学习至此，我们已经为示例应用程序创建了一些脚手架，使其可以运行，检查并进行了一些初步更改。后续将进一步研究并构建示例应用程序。使之允许存储项目列表，完成后将其选中，并按所有、已完成和未完成待办事项来过滤。</p><h1 id="创建第一个vue组件">创建第一个Vue组件</h1><p>Vue组件是由管理应用程序数据的JavaScript对象和映射到基础DOM结构的基于HTML语法的模板语法组成的。接下来要创建一个组件来表示待办事项列表中的每一个项目。</p><h2 id="创建一个todoitem组件">创建一个<code>ToDoItem</code>组件</h2><p><code>ToDoItem</code>组件将用来显示单一的待办事项，用它来建立待办事项列表。</p><ul><li><p>在<code>test/srx/components</code>目录下，创建一个<code>ToDoItem.vue</code>的新文件并打开</p></li><li><p>在文件顶部添加<code>&lt;template&gt;&lt;/template&gt;</code>部分来创建组件中的模板部分</p></li><li><p>在模板部分下面创建一个<code>&lt;script&gt;&lt;/script&gt;</code>部分。在<code>&lt;script&gt;</code>标签内，添加一个默认导出对象<code>export default&#123;&#125;</code>作为组件对象:</p><p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt; &lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default&#123;&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p></li></ul><p>现在加上为<code>ToDoItem</code>添加实际内容。Vue模板目前只允许一个根元素--一个元素需要包裹模板内的所有内容，因此要为该根元素使用一个<code>&lt;div&gt;</code>。</p><ul><li><p>在组件模板中添加一个空的<code>&lt;div&gt;</code></p></li><li><p>在<code>&lt;div&gt;</code>里添加一个<code>checkbox</code>和一个对应的<code>label</code>。给复选框添加一个<code>id</code>，并添加一个<code>for</code>属性，将复选框映射到标签上。</p><p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;input type=&quot;checkbox&quot; id=&quot;todo-item&quot; checked=&quot;false&quot; /&gt;</span><br><span class="line">        &lt;label for=&quot;todo-item&quot;&gt;My Todo Item&lt;/label&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></p></li></ul><h2 id="在应用程序中使用todoitem组件">在应用程序中使用TodoItem组件</h2><p>​</p>]]></content>
    
    
    <summary type="html">前端,Vue.js</summary>
    
    
    
    <category term="学习笔记" scheme="http://tangmenjue.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="前端" scheme="http://tangmenjue.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="前端框架" scheme="http://tangmenjue.top/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="Vue.js" scheme="http://tangmenjue.top/tags/Vue-js/"/>
    
    <category term="前端" scheme="http://tangmenjue.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>前端框架之Vue.js（三）</title>
    <link href="http://tangmenjue.top/2022/11/04/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>http://tangmenjue.top/2022/11/04/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E4%B8%89%EF%BC%89/</id>
    <published>2022-11-04T09:53:16.000Z</published>
    <updated>2022-11-04T09:53:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue.js基础">Vue.js基础</h1><h2 id="列表渲染">列表渲染</h2><h3 id="用v-for把一个数组对应为一组元素">用<code>v-for</code>把一个数组对应为一组元素</h3><p>基于一个数组来渲染列表可以使用<code>v-for</code>指令。<code>v-for</code>指令需要通过<code>item in items</code>形式的特殊语法，其中<code>items</code>是源数据数组，而<code>item</code>是被迭代的数组元素的别名。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;ul id=&quot;example-1&quot;&gt;</span><br><span class="line">    &lt;li v-for=&quot;item in items&quot; :key=&quot;item.message&quot;&gt;</span><br><span class="line">        &#123;&#123;item.message&#125;&#125;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;   </span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var example1=new Vue(&#123;</span><br><span class="line">        el:&#x27;#example-1&#x27;,</span><br><span class="line">        data:&#123;</span><br><span class="line">            items:[</span><br><span class="line">                &#123;message:&#x27;First&#x27;&#125;,</span><br><span class="line">                &#123;message:&#x27;Second&#x27;&#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="/2022/11/04/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E4%B8%89%EF%BC%89/1.png"></p><p>在<code>v=for</code>块中，可以访问所有父作用域的property。<code>v-for</code>还支持一个可选的第二个参数，即当前项的索引。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul id=&quot;example-2&quot;&gt;</span><br><span class="line">    &lt;li v-for=&quot;(item,index) in items&quot;&gt;</span><br><span class="line">        &#123;&#123;parentMessage&#125;&#125;-&#123;&#123;index&#125;&#125;-&#123;&#123;item.message&#125;&#125;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var example2=new Vue(&#123;</span><br><span class="line">        el:&#x27;#example-2&#x27;,</span><br><span class="line">        data:&#123;</span><br><span class="line">            parentMessage:&#x27;Parent&#x27;,</span><br><span class="line">            items:[</span><br><span class="line">                &#123;message:&#x27;First&#x27;&#125;,</span><br><span class="line">                &#123;message:&#x27;Second&#x27;&#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="/2022/11/04/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E4%B8%89%EF%BC%89/2.png"></p><p>其中，也可以用<code>of</code>替代<code>in</code>作为分隔符，<code>if</code>更接近Javascript迭代器的语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;item of items&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="在v-for里使用对象">在<code>v-for</code>里使用对象</h3><p>遍历一个对象的property可以用<code>v-for</code>指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;ul id=&quot;v-for-object&quot; class=&quot;demo&quot;&gt;</span><br><span class="line">    &lt;li v-for=&quot;value in object&quot;&gt;</span><br><span class="line">        &#123;&#123;value&#125;&#125;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el:&#x27;#v-for-object&#x27;,</span><br><span class="line">        data:&#123;</span><br><span class="line">            object:&#123;</span><br><span class="line">                title:&#x27;How to do lists in Vue&#x27;,</span><br><span class="line">                author:&#x27;ZhangSan&#x27;,</span><br><span class="line">                publicshedAt:&#x27;2022-11-04&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="/2022/11/04/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E4%B8%89%EF%BC%89/3.png"></p><p>也可以提供第二个参数为property名称（即键名）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;ul id=&quot;v-for-object&quot; class=&quot;demo&quot;&gt;</span><br><span class="line">    &lt;li v-for=&quot;(value,name) in object&quot;&gt;</span><br><span class="line">        &#123;&#123;name&#125;&#125;:&#123;&#123;value&#125;&#125;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="/2022/11/04/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E4%B8%89%EF%BC%89/4.png"></p><p>还可以用第三个参数作为索引：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;ul id=&quot;v-for-object&quot; class=&quot;demo&quot;&gt;</span><br><span class="line">    &lt;li v-for=&quot;(value,name,index) in object&quot;&gt;</span><br><span class="line">        &#123;&#123;index&#125;&#125;:&#123;&#123;name&#125;&#125;:&#123;&#123;value&#125;&#125;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="/2022/11/04/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E4%B8%89%EF%BC%89/5.png"></p><p>在遍历对象时，会按<code>Object.keys()</code>的结果遍历，但不能保证它的结果在不同的JavaScript引擎下都一致。</p><h3 id="维护状态">维护状态</h3><p>当Vue正在更新使用<code>v-for</code>渲染的元素列表时，默认使用“就地更新”的策略。若数据项的顺序被改变，Vue将不会移动DOM元素来匹配数据项的顺序，而是就地更新每个元素，并且确保它们在每个索引位置正确渲染。<strong>这个默认模式只适用于不依赖子组件状态或临时DOM状态的列表渲染输出（如表单输入值）。</strong></p><p>为了给Vue一个提示以便它能够跟踪每个节点的身份，从而重用和重新排序现有元素，需要为每项提供一个唯一的<code>key</code> attribute：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span> <span class="attr">v-bind:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--内容--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>尽可能在使用<code>v-for</code>时提供<code>key</code> attribute</strong>，除非遍历输出的DOM内容非常简单，或是刻意依赖默认行为以获取性能上的提升。由于它是Vue识别节点的一个通用机制，<code>key</code>并不仅与<code>v-for</code>特别关联。</p><p>不要使用对象或数组之类的非基本类型值作为<code>v-for</code>的<code>key</code>，要用字符串或数值类型的值。</p><h3 id="数组更新检测">数组更新检测</h3><h4 id="变更方法">变更方法</h4><p>Vue将被侦听的数组的变更方法进行了包裹，因此它们也将会触发视图更新。</p><p>这些被包裹过的方法有：</p><ul><li>push()</li><li>pop()</li><li>shift()</li><li>unshift()</li><li>splice()</li><li>sort()</li><li>reverse()</li></ul><h4 id="替换数组">替换数组</h4><p>变更方法会变更调用了这些方法的原始数组。相比之下，也有非变更方法。如<code>filter()</code>、<code>concat()</code>和<code>slice()</code>。<strong>它们不会变更原始数组，而是总是返回一个新数组</strong>。当使用非变更方法时，可以用新数组替换旧数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">example.<span class="property">items</span>=example.<span class="property">items</span>.<span class="title function_">filter</span>(<span class="keyword">function</span> (<span class="params">item</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> item.<span class="property">message</span>.<span class="title function_">match</span>(<span class="regexp">/Foo/</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>由于JavaScript的限制，Vue不能检测数组和对象的变化。</p><h3 id="显示过滤排序后的结果">显示过滤/排序后的结果</h3><p>若要显示一个数组经过过滤或排序后的版本，而不实际变更或重置原始数据，可以通过创建一个计算属性来返回过滤或排序后的数组：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;test&quot;&gt;</span><br><span class="line">    &lt;li  v-for=&quot;n in evenNumbers&quot;&gt;&#123;&#123;n&#125;&#125;&lt;/li&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el:&#x27;#test&#x27;,</span><br><span class="line">        data:&#123;</span><br><span class="line">            numbers:[1,2,3,4,5]</span><br><span class="line">        &#125;,</span><br><span class="line">        computed:&#123;</span><br><span class="line">            evenNumbers:function()&#123;</span><br><span class="line">                return this.numbers.filter(function (number)&#123;</span><br><span class="line">                    return number %2===0</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>注意：<code>v-for</code>指令不能在根节点使用！</strong></p><p>在嵌套<code>v-for</code>循环中不适应计算属性的情况下，可以使用一个方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;test&quot;&gt;</span><br><span class="line">    &lt;ul v-for=&quot;set in sets&quot;&gt;</span><br><span class="line">        &lt;li  v-for=&quot;n in even(set)&quot;&gt;&#123;&#123;n&#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el:&#x27;#test&#x27;,</span><br><span class="line">        data:&#123;</span><br><span class="line">            sets:[[1,2,3,4,5],[6,7,8,9,10]]</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            even:function(numbers)&#123;</span><br><span class="line">                return numbers.filter(function (number)&#123;</span><br><span class="line">                    return number %2===0</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="在v-for里使用值范围">在<code>v-for</code>里使用值范围</h3><p><code>v-for</code>也可以接收整数。在这种情况下，它会把模板重复对应次数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;test&quot;&gt;</span><br><span class="line">    &lt;span v-for=&quot;n in 10&quot;&gt;&#123;&#123;n&#125;&#125;&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el:&#x27;#test&#x27;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="在template上是使用v-for">在<code>&lt;template&gt;</code>上是使用<code>v-for</code></h3><p>与<code>v-if</code>类似，也可以利用带有<code>v-for</code>的<code>&lt;template&gt;</code>来循环渲染一段包含多个元素的内容：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;item.msg&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;divider&quot;</span> <span class="attr">role</span>=<span class="string">&quot;presentation&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="在组件上使用v-for">在组件上使用<code>v-for</code></h3><p>在自定义组件上，可以像在任何普通元素上一样使用<code>v-for</code>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>在Vue2.2.0+的版本里，在组件上使用<code>v-for</code>时，<code>key</code>是必须的。</strong></p><p>由于组件有自己独立的作用域，任何数据都不会被自动传递到组件里。使用prop把迭代数据传递到组件里：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in items&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">v-bind:item</span>=<span class="string">&quot;item&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">v-bind:index</span>=<span class="string">&quot;index&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">v-bind:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure><p>若是自动将<code>item</code>注入到组件里，会使得组件与<code>v-for</code>的运行紧密耦合。明确组件数据的来源能够使组件在其他场合重复使用。</p><p>下面是个简单的todo列表的完整代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;   </span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;todo-list-example&quot;&gt;</span><br><span class="line">    &lt;form v-on:submit.prevent=&quot;addNewTodo&quot;&gt;</span><br><span class="line">        &lt;label for=&quot;new-todo&quot;&gt;Add a todo&lt;/label&gt;</span><br><span class="line">        &lt;input v-model=&quot;newTodoText&quot; id=&quot;new-todo&quot; placeholder=&quot;E.g. Feed the cat&quot;&gt;</span><br><span class="line">        &lt;button&gt;Add&lt;/button&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;!--这里的is=&quot;todo-item&quot; attribute在使用DOM模板时是十分必要的。</span><br><span class="line">在&lt;ul&gt;元素内只有&lt;li&gt;元素会被看作有效内容。</span><br><span class="line">这样做实现的效果与&lt;todo-item&gt;相同，但可以避开一些潜在的浏览器解析错误--&gt;</span><br><span class="line">        &lt;li is=&quot;todo-item&quot; v-for=&quot;(todo,index) in todos&quot; </span><br><span class="line">        v-bind:key=&quot;todo.id&quot; v-bind:title=&quot;todo.title&quot; </span><br><span class="line">        v-on:remove=&quot;todos.splice(index,1)&quot;&gt;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    Vue.component(&#x27;todo-item&#x27;,&#123;</span><br><span class="line">        template:&#x27;\</span><br><span class="line">        &lt;li&gt;\</span><br><span class="line">          &#123;&#123; title &#125;&#125;\</span><br><span class="line">          &lt;button v-on:click=&quot;$emit(\&#x27;remove\&#x27;)&quot;&gt;Remove&lt;/button&gt;\</span><br><span class="line">        &lt;/li&gt;\</span><br><span class="line">        &#x27;,</span><br><span class="line">        props:[&#x27;title&#x27;]</span><br><span class="line">    &#125;)</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el:&#x27;#todo-list-example&#x27;,</span><br><span class="line">        data:&#123;</span><br><span class="line">            newTodoText:&#x27;&#x27;,</span><br><span class="line">            todos:[</span><br><span class="line">                &#123;</span><br><span class="line">                    id:1,</span><br><span class="line">                    title:&#x27;Do the dishes&#x27;,</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    id:2,</span><br><span class="line">                    title:&#x27;Take out the trash&#x27;,</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    id:3,</span><br><span class="line">                    title:&#x27;Mow the lawn&#x27;</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            nextTodoId:4</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            addNewTodo:function()&#123;</span><br><span class="line">                this.todos.push(&#123;</span><br><span class="line">                    id:this.nextTodoId++,</span><br><span class="line">                    title:this.newTodoText</span><br><span class="line">                &#125;)</span><br><span class="line">                this.newTodoText=&#x27;&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="/2022/11/04/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E4%B8%89%EF%BC%89/6.png"></p><h2 id="事件处理">事件处理</h2><h3 id="使用v-on监听事件">使用<code>v-on</code>监听事件</h3><p>可以用<code>v-on</code>指令监听DOM事件，并在触发时运行一些JavaScriptdiamond：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;example-1&quot;&gt;</span><br><span class="line">    &lt;button v-on:click=&quot;counter+=1&quot;&gt;Add 1&lt;/button&gt;</span><br><span class="line">    &lt;p&gt;The button above has been clicked &#123;&#123;counter&#125;&#125; times.&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var example1=new Vue(&#123;</span><br><span class="line">    el:&#x27;#example-1&#x27;,</span><br><span class="line">    data:&#123;</span><br><span class="line">        counter:0</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="/2022/11/04/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E4%B8%89%EF%BC%89/7.png"></p><p>使用<code>v-on</code>指令有几个好处：</p><ul><li>看一眼HTML模板就可以定位在JavaScript代码里对应的方法</li><li>由于无需在JavaScript里手动绑定事件，因此所编写的ViewModel代码是纯粹的逻辑，与DOM完全解耦，更易于测试</li><li>当一个ViewModel被销毁时，所有的事件处理器都会自动被删除，无需额外清理。</li></ul><h3 id="事件处理方法">事件处理方法</h3><p>由于许多事件处理逻辑会更为复杂，因此直接把JavaScript代码写在<code>v-on</code>指令中是不可行的，<code>v-on</code>还可以接收一个需要调用的方法名称：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;example-2&quot;&gt;</span><br><span class="line">    &lt;!--greet是定义的方法名--&gt;</span><br><span class="line">    &lt;button v-on:click=&quot;greet&quot;&gt;Greet&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var example2=new Vue(&#123;</span><br><span class="line">    el:&#x27;#example-2&#x27;,</span><br><span class="line">    data:&#123;</span><br><span class="line">        name:&#x27;Vue.js&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    //在methods对象中定义方法</span><br><span class="line">    methods:&#123;</span><br><span class="line">        greet:function(event)&#123;</span><br><span class="line">            //this在方法里指向当前Vue示例</span><br><span class="line">            alert(&#x27;Hello &#x27;+this.name+&#x27;!&#x27;)</span><br><span class="line">            //event是原生DOM事件</span><br><span class="line">            if(event)&#123;</span><br><span class="line">                alert(event.target.tagName)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="/2022/11/04/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E4%B8%89%EF%BC%89/8.png"></p><p><img src="/2022/11/04/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E4%B8%89%EF%BC%89/9.png"></p><p>与此同时，也可以在F12的JavaScript控制台里使用<code>example2.greet()</code>直接调用方法。</p><h3 id="内联处理器中的方法">内联处理器中的方法</h3><p>除了直接绑定到一个方法，也可以在内联JavaScript语句中调用方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;example-3&quot;&gt;</span><br><span class="line">    &lt;button v-on:click=&quot;say(&#x27;hi&#x27;)&quot;&gt;Say hi&lt;/button&gt;</span><br><span class="line">    &lt;button v-on:click=&quot;say(&#x27;what&#x27;)&quot;&gt;Say what&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">    el:&#x27;#example-3&#x27;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        say:function(message)&#123;</span><br><span class="line">            alert(message)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="/2022/11/04/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E4%B8%89%EF%BC%89/10.png"></p><p>若需要在内联语句处理器中访问原始的DOM事件，可以使用特殊变量<code>$event</code>把它传入方法中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;example-3&quot;&gt;</span><br><span class="line">    &lt;button v-on:click=&quot;warn(&#x27;Form cannot be submitted yet.&#x27;,$event)&quot;&gt; </span><br><span class="line">        Submit&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">    el:&#x27;#example-3&#x27;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        warn:function(message, event)&#123;</span><br><span class="line">            //现在可以访问原生事件对象</span><br><span class="line">            if(event)&#123;</span><br><span class="line">                event.preventDefault()</span><br><span class="line">            &#125;</span><br><span class="line">            alert(message)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="/2022/11/04/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E4%B8%89%EF%BC%89/11.png"></p><h3 id="事件修饰符">事件修饰符</h3><p>比在事件处理程序中调用<code>event.preventDefault()</code>或<code>event.stopPropagation()</code>更好的方式是：方法只有纯粹的数据逻辑，而不是去处理DOM事件细节。</p><p>Vue.js为<code>v-on</code>提供了事件修饰符，修饰符由点开头的指令后缀来表示：</p><ul><li><code>.stop</code>：阻止事件向上级DOM元素传递</li><li><code>.prevent</code>：阻止默认事件的发生</li><li><code>.capture</code>：添加事件侦听器时使用事件捕获模式</li><li><code>.self</code>：将事件绑定到自身，只有自身才能触发</li><li><code>.once</code>：设置事件只能触发一次</li><li><code>.passive</code>：启动被动监听器，默认行为会立即触发。添加了<code>.passive</code> 表示不会在监听函数里添加 <code>preventDefault()</code>来阻止默认行为。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 阻止单击事件继续传播 --&gt;</span><br><span class="line">&lt;a v-on:click.stop=&quot;doThis&quot;&gt;&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 提交事件不再重载页面 --&gt;</span><br><span class="line">&lt;form v-on:submit.prevent=&quot;onSubmit&quot;&gt;&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 修饰符可以串联 --&gt;</span><br><span class="line">&lt;a v-on:click.stop.prevent=&quot;doThat&quot;&gt;&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 只有修饰符 --&gt;</span><br><span class="line">&lt;form v-on:submit.prevent&gt;&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 添加事件监听器时使用事件捕获模式 --&gt;</span><br><span class="line">&lt;!-- 即内部元素触发的事件先在此处理，然后才交由内部元素进行处理 --&gt;</span><br><span class="line">&lt;div v-on:click.capture=&quot;doThis&quot;&gt;...&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 只当在event.target是当前元素自身时触发处理函数 --&gt;</span><br><span class="line">&lt;!-- 即事件不是从内部元素触发的 --&gt;</span><br><span class="line">&lt;div v-on:click.self=&quot;doThat&quot;&gt;...&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--点击事件将只会触发一次--&gt;</span><br><span class="line">&lt;a v-on:click.once=&quot;doThis&quot;&gt;&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--滚动事件的默认行为将会立即触发，而不会等待onScroll完成--&gt;</span><br><span class="line">&lt;div v-on:scroll.passive=&quot;onScroll&quot;&gt;...&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>使用修饰符时要注意顺序，<strong>相应的代码会以同样的顺序产生</strong>。因此用<code>v-on:click.prevent.self</code><strong>会阻止所有的点击</strong>，而<code>v-on:click.self.prevent</code><strong>只会阻止对元素本身的点击。</strong></p><p>不像其他只能对原生的DOM事件起作用的修饰符，<code>.once</code>修饰符还能被用到<strong>自定义的组件事件</strong>上。</p><p><strong>注意：</strong>不要把<code>.passive</code>和<code>.prevent</code>一起使用，因为<code>.prevent</code>将会被忽略，同时浏览器可能会展示一个警告。<code>.passive</code>会告诉浏览器不阻止事件的默认行为。</p><h3 id="按键修饰符">按键修饰符</h3><p>在监听键盘事件时，经常需要检查详细的按键。Vue允许为<code>v-on</code>在监听键盘事件时添加按键修饰符：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--处理函数vm.submit()只会在$event.key被Enter时（即按下回车键）被调用--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.enter</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>也可以直接将<code>KeyboardEvent.key</code>暴露的任意有效按键名转换为kebab-case来作为修饰符：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--处理函数只会在$event.key等于PageDown时被调用--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.page-down</span>=<span class="string">&quot;onPageDown&quot;</span></span></span><br></pre></td></tr></table></figure><h4 id="按键码">按键码</h4><p>注：<strong>keyCode的事件用法已经被废弃了，可能不会被最新的浏览器支持。</strong></p><p>使用<code>keyCode</code>attribute的形式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.13</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>为了在必要的情况下支持旧浏览器，Vue提供了绝大多数常用的按键码别名：</p><ul><li>回车：<code>.enter</code></li><li>换行：<code>.tab</code></li><li>删除：<code>.delete</code>（捕获删除和退格键）</li><li>退出：<code>.esc</code></li><li>空格：<code>.space</code></li><li>上：<code>.up</code></li><li>下：<code>.down</code></li><li>左：<code>.left</code></li><li>右：<code>.right</code></li></ul><p>有一些按键（如<code>.esc</code>以及所有的方向键）在IE9中有不同的<code>key</code>值。若想要支持IE9，首选这些内置的别名。</p><p>除此之外，还可以通过全局<code>config.keyCodes</code>对象自定义按键修饰符别名：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可以使用v-on:keyup.f1</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">keyCodes</span>.<span class="property">f1</span>=<span class="number">112</span></span><br></pre></td></tr></table></figure><h3 id="系统修饰键">系统修饰键</h3><p>可以用如下修饰符来实现仅在按下相应按键时才触发鼠标或键盘事件的监听器：</p><ul><li><code>.ctrl</code></li><li><code>.alt</code></li><li><code>.shift</code></li><li><code>.meta</code></li></ul><p>注意：在注意：在 Mac 系统键盘上，meta 对应 command 键 (⌘)。在 Windows 系统键盘 meta 对应 Windows 徽标键 (⊞)。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Alt+C --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.alt.76</span>=<span class="string">&quot;clear&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Ctrl+Click --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.ctrl</span>=<span class="string">&quot;doSomething&quot;</span>&gt;</span>Do something<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修饰键与常规按键不同，在和<code>keyup</code>事件一起用时，事件触发时修饰键必须处于按下状态。即只有在按住<code>ctrl</code>的情况下释放其他按键，才会触发<code>keyup.ctrl</code>。而单单释放<code>ctrl</code>也不会触发事件。若想这样做，请为<code>ctrl</code>换用<code>keyCode:keyup.17</code>。</p><h4 id="exact修饰符"><code>.exact</code>修饰符</h4><p>使用<code>.exact</code>修饰符可以精确地控制由系统修饰符组合触发的事件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 非ctrl独有，即使是Alt和Shift一起按下时，也会触发 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click.ctrl</span>=<span class="string">&quot;onClick&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 当且仅当Ctrl被按下时才触发 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click.ctrl.exact</span>=<span class="string">&quot;onCtrlClick&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 没有任何系统修饰符被按下时才触发 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click.exact</span>=<span class="string">&quot;onClick&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="鼠标按钮修饰符">鼠标按钮修饰符</h4><p>以下修饰符会限制处理函数仅响应特定的鼠标按钮：</p><ul><li>鼠标左键：<code>.left</code></li><li>鼠标右键：<code>.right</code></li><li>鼠标中键：<code>.middle</code></li></ul><h2 id="表单输入绑定">表单输入绑定</h2><h3 id="v-model基础用法"><code>v-model</code>基础用法</h3><p>可以使用<code>v-model</code>指令在表单<code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code>及<code>&lt;select&gt;</code>元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。<code>v-model</code>还可以在自定义的输入组件中使用。</p><p><code>v-model</code>指令本质上是语法糖，负责监听用户的输入事件以更新数据，并对一些极端场景进行特殊处理。</p><p><code>v-model</code>会<strong>忽略所有表单元素的<code>value</code>、<code>checked</code>、<code>selected</code> attribute 的初始值，并将Vue示例的数据作为数据来源。</strong>不过可以通过在JavaScript在组件的<code>data</code>选项中声明初始值。</p><p><code>v-model</code>在内部为不同的输入元素使用不同的preperty并抛出不同的事件：</p><ul><li>text和textarea元素使用<code>value</code> property和<code>input</code>事件</li><li>checkbox和radio使用<code>checked</code> property和<code>change</code>事件</li><li>select字段将<code>value</code>作为prop并将<code>change</code>作为事件</li></ul><p>注意：<code>v-model</code>不会在输入法组合文字过程中得到更新。若想处理这个过程，可以使用<code>input</code>事件处理。</p><h4 id="文本">文本</h4><p><code>v-model</code>用于表单中输入文本并绑定值时：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&quot;example&quot;&gt;</span><br><span class="line">    &lt;input v-model=&quot;message&quot; placeholder=&quot;edit me&quot;&gt;</span><br><span class="line">    &lt;p&gt;Message is:&#123;&#123;message&#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">    el:&#x27;#example&#x27;,</span><br><span class="line">    data:&#123;</span><br><span class="line">        message:&#x27;&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="/2022/11/04/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E4%B8%89%EF%BC%89/12.png"></p><h4 id="多行文本">多行文本</h4><p><code>v-model</code>用于表单中输入多行文本textarea并绑定值时：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&quot;example&quot;&gt;</span><br><span class="line">    &lt;span&gt;Multiline message is :&lt;/span&gt;</span><br><span class="line">    &lt;p style=&quot;white-space:pre-line;&quot;&gt;&#123;&#123;message&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;br /&gt;</span><br><span class="line">    &lt;textarea v-model=&quot;message&quot; placeholder=&quot;add multiple lines&quot;&gt;&lt;/textarea&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">    el:&#x27;#example&#x27;,</span><br><span class="line">    data:&#123;</span><br><span class="line">        message:&#x27;&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="/2022/11/04/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E4%B8%89%EF%BC%89/13.png"></p><p>注意：在文本区域插值(<code>&lt;textarea&gt;&#123;&#123;text&#125;&#125;&lt;/textarea&gt;</code>)并不会生效，要用<code>v-model</code>来代替。</p><h4 id="复选框">复选框</h4><p>单个复选框，将值绑定到布尔值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&quot;example&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;checkbox&quot; id=&quot;checkbox&quot; v-model=&quot;checked&quot;&gt;</span><br><span class="line">    &lt;label for=&quot;checkbox&quot;&gt;&#123;&#123;checked&#125;&#125;&lt;/label&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">    el:&#x27;#example&#x27;,</span><br><span class="line">    data:&#123;</span><br><span class="line">        checked:&#x27;&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="/2022/11/04/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E4%B8%89%EF%BC%89/14.png"></p><p>多个复选框，将值绑定到同一个数组：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&quot;example&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;checkbox&quot; id=&quot;jack&quot; value=&quot;Jack&quot; v-model=&quot;checkedNames&quot;&gt;</span><br><span class="line">    &lt;label for=&quot;jack&quot;&gt;Jack&lt;/label&gt;</span><br><span class="line">    &lt;input type=&quot;checkbox&quot; id=&quot;john&quot; value=&quot;John&quot; v-model=&quot;checkedNames&quot;&gt;</span><br><span class="line">    &lt;label for=&quot;john&quot;&gt;John&lt;/label&gt;</span><br><span class="line">    &lt;input type=&quot;checkbox&quot; id=&quot;mike&quot; value=&quot;Mike&quot; v-model=&quot;checkedNames&quot;&gt;</span><br><span class="line">    &lt;label for=&quot;mike&quot;&gt;Mike&lt;/label&gt;</span><br><span class="line">    &lt;br /&gt;</span><br><span class="line">    &lt;span&gt;Checked names:&#123;&#123;checkedNames&#125;&#125;&lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">    el:&#x27;#example&#x27;,</span><br><span class="line">    data:&#123;</span><br><span class="line">        checkedNames:[]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="/2022/11/04/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E4%B8%89%EF%BC%89/15.png"></p><h4 id="单选按钮">单选按钮</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&quot;example&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;radio&quot; id=&quot;one&quot; value=&quot;one&quot; v-model=&quot;picked&quot;&gt;</span><br><span class="line">    &lt;label for=&quot;one&quot;&gt;One&lt;/label&gt;</span><br><span class="line">    &lt;br /&gt;</span><br><span class="line">    &lt;input type=&quot;radio&quot; id=&quot;two&quot; value=&quot;Two&quot; v-model=&quot;picked&quot;&gt;</span><br><span class="line">    &lt;label for=&quot;two&quot;&gt;Two&lt;/label&gt;</span><br><span class="line">    &lt;br /&gt;</span><br><span class="line">    &lt;span&gt;Picked:&#123;&#123;picked&#125;&#125;&lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">    el:&#x27;#example&#x27;,</span><br><span class="line">    data:&#123;</span><br><span class="line">        picked:&#x27;&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="/2022/11/04/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E4%B8%89%EF%BC%89/16.png"></p><h4 id="选择框">选择框</h4><p>需要单选时代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&quot;example&quot;&gt;</span><br><span class="line">    &lt;select v-model=&quot;selected&quot;&gt;</span><br><span class="line">      &lt;option disabled value=&quot;&quot;&gt;请选择&lt;/option&gt;</span><br><span class="line">      &lt;option&gt;A&lt;/option&gt;</span><br><span class="line">      &lt;option&gt;B&lt;/option&gt;</span><br><span class="line">      &lt;option&gt;C&lt;/option&gt;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    &lt;span&gt;Selected:&#123;&#123;selected&#125;&#125;&lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">    el:&#x27;#example&#x27;,</span><br><span class="line">    data:&#123;</span><br><span class="line">        selected:&#x27;&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="/2022/11/04/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E4%B8%89%EF%BC%89/17.png"></p><p><strong>若<code>v-model</code>表达式的初始值未能匹配任何选项，<code>&lt;select&gt;</code>元素将被渲染为未选中的状态。</strong>在iOS中这会使用户无法选择第一个选项。因此<strong>推荐提供一个值为空的禁用选项。</strong></p><p>多选时即将值绑定到一个数组中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&quot;example&quot;&gt;</span><br><span class="line">    &lt;select v-model=&quot;selected&quot; multiple style=&quot;width:50px;&quot;&gt;</span><br><span class="line">      &lt;option&gt;A&lt;/option&gt;</span><br><span class="line">      &lt;option&gt;B&lt;/option&gt;</span><br><span class="line">      &lt;option&gt;C&lt;/option&gt;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    &lt;span&gt;Selected:&#123;&#123;selected&#125;&#125;&lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">    el:&#x27;#example&#x27;,</span><br><span class="line">    data:&#123;</span><br><span class="line">        selected:[]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="/2022/11/04/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E4%B8%89%EF%BC%89/18.png"></p><p>配合<code>v-for</code>渲染的动态选项，其代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&quot;example&quot;&gt;</span><br><span class="line">    &lt;select v-model=&quot;selected&quot;&gt;</span><br><span class="line">      &lt;option v-for=&quot;option in options&quot; v-bind:value=&quot;option.value&quot;&gt; </span><br><span class="line">        &#123;&#123;option.text&#125;&#125;</span><br><span class="line">      &lt;/option&gt; </span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    &lt;span&gt;Selected:&#123;&#123;selected&#125;&#125;&lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">    el:&#x27;#example&#x27;,</span><br><span class="line">    data:&#123;</span><br><span class="line">        selected:&#x27;A&#x27;,</span><br><span class="line">        options:[</span><br><span class="line">            &#123;text:&#x27;One&#x27;,value:&#x27;A&#x27;&#125;,</span><br><span class="line">            &#123;text:&#x27;Two&#x27;,value:&#x27;B&#x27;&#125;,</span><br><span class="line">            &#123;text:&#x27;Three&#x27;,value:&#x27;C&#x27;&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="/2022/11/04/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E4%B8%89%EF%BC%89/19.png"></p><h3 id="值绑定">值绑定</h3><p>对于单选按钮、复选框及选择框的选项，<code>v-model</code>绑定的值通常是静态字符串（对于复选框来说是布尔值）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 当选中时，picked字符串为a --&gt;</span><br><span class="line">&lt;input type=&quot;radio&quot; v-model=&quot;picked&quot; value=&quot;a&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- toggle为true或false --&gt;</span><br><span class="line">&lt;input type=&quot;checkbox&quot; v-model=&quot;toggle&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 当选中第一个选项时，selected为字符串abc --&gt;</span><br><span class="line">&lt;select v-model=&quot;selected&quot;&gt;</span><br><span class="line">  &lt;option value=&quot;abc&quot;&gt;ABC&lt;/option&gt;    </span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><p>当想把值绑定到Vue实例的一个动态property上时，可以使用<code>v-bind</code>实现，且这个property的值可以不是字符串。</p><h4 id="复选框-1">复选框</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;checkbox&quot; v-model=&quot;toggle&quot; true-value=&quot;yes&quot; false-value=&quot;no&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 当选中时 --&gt;</span><br><span class="line">vm.toggle===&#x27;yes&#x27;</span><br><span class="line">&lt;!-- 当没有选中时 --&gt;</span><br><span class="line">vm.toggle===&#x27;no&#x27;</span><br></pre></td></tr></table></figure><p>由于浏览器在提交表单时并不会包含未被选中的复选框，因此这里的<code>true-value</code>和<code>false-value</code> attribute并不会影响输入控件的<code>value</code> attribute。若要确保表单中这两个值中的一个能够被提交，则要换用单选按钮。</p><h4 id="单选按钮-1">单选按钮</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;radio&quot; v-model=&quot;pick&quot; v-bind:value=&quot;a&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 当选中时 --&gt;</span><br><span class="line">vm.pick===vm.a</span><br></pre></td></tr></table></figure><h4 id="选择框的选项">选择框的选项</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;select v-model=&quot;selected&quot;&gt;</span><br><span class="line">  &lt;option v-bind:value=&quot;&#123;number:123&#125;&quot;&gt;123&lt;/option&gt;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 当选中时 --&gt;</span><br><span class="line">typeof vm.selected</span><br><span class="line">&lt;!-- vm.selected的类型为object--&gt;</span><br><span class="line">vm.selected.number</span><br><span class="line">&lt;!-- selected.number的值为123--&gt;</span><br></pre></td></tr></table></figure><h3 id="修饰符">修饰符</h3><h4 id="lazy"><code>.lazy</code></h4><p>在默认情况下，<code>v-model</code>在每次<code>input</code>事件触发后将输入框的值与数据进行同步。若将其转为在<code>change</code>事件之后进行同步，可以添加<code>.lazy</code>修饰符：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--在change时更新，而不是在input时--&gt;</span><br><span class="line">&lt;input v-model.lazy=&quot;msg&quot;&gt;</span><br></pre></td></tr></table></figure><h4 id="number"><code>.number</code></h4><p>即使在<code>type="number"</code>时，HTML输入元素的值也总会返回字符串。若这个值无法被<code>parseFloat()</code>解析，则会返回原始的值。</p><p>若想自动将用户的输入值转为数值类型，可以给<code>v-model</code>添加<code>number</code>修饰符：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input v-model.number=&quot;age&quot; type=&quot;number&quot;&gt;</span><br></pre></td></tr></table></figure><h4 id="trim"><code>.trim</code></h4><p>若想要自动过滤用户输入的首尾空白字符，可以给<code>v-model</code>添加<code>trim</code>修饰符：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input v-model.trim=&quot;msg&quot;&gt;</span><br></pre></td></tr></table></figure><h2 id="组件基础">组件基础</h2><h3 id="基本实例">基本实例</h3><p>一个Vue组件的实例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&quot;example&quot;&gt;</span><br><span class="line">    &lt;button-counter&gt;&lt;/button-counter&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">//定义了一个名为button-counter的新组件    </span><br><span class="line">Vue.component(&#x27;button-counter&#x27;,&#123;</span><br><span class="line">    data:function()&#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            count:0</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    template:&#x27;&lt;button v-on:click=&quot;count++&quot;&gt;You clicked me &#123;&#123;count&#125;&#125; times.&lt;/button&gt;&#x27;</span><br><span class="line">&#125;)</span><br><span class="line">new Vue(&#123;</span><br><span class="line">    el:&#x27;#example&#x27;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>因为组件是可复用的Vue实例，所有它与<code>new Vue</code>接收相同的选项，如<code>data</code>、<code>computed</code>、<code>watch</code>、<code>methods</code>以及生命周期钩子等，像<code>el</code>这种根特例特有的选项除外。</p><h3 id="组件的复用">组件的复用</h3><p>组件可以进行任意次数的复用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&quot;example&quot;&gt;</span><br><span class="line">    &lt;button-counter&gt;&lt;/button-counter&gt;</span><br><span class="line">    &lt;button-counter&gt;&lt;/button-counter&gt;</span><br><span class="line">    &lt;button-counter&gt;&lt;/button-counter&gt;</span><br><span class="line">    &lt;button-counter&gt;&lt;/button-counter&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>由于每用一次组件，就由一个组件的新实例被创建，因此当点击按钮时，每个组件都会各自独立维护自己的<code>count</code>。</p><h4 id="data必须是一个函数">data必须是一个函数</h4><p>在定义组件的过程中，data并不是直接提供一个对象或是变量的值。组件的data选项必须是一个函数，因此每个实例可以维护一份独立的被返回的拷贝：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">data</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">count</span>:<span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="组件的组织">组件的组织</h3><p>通常一个应用会以一颗嵌套的组件树的形式来组织，一个应用由各类组件组成。</p><p>为了能在模板中使用，这些组件必须先注册以便Vue能够识别。</p><p>组件的注册类型有两种：全局注册和局部注册。</p><p>组件通过<code>Vue.component</code>来进行全局注册：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;component-name&#x27;</span>,&#123;</span><br><span class="line">  <span class="comment">//options</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>全局注册的组件可以用在其被注册之后的任何通过<code>new Vue</code>新创建的Vue根实例，包括其组件树种的左右子组件的模板。</p><h3 id="通过prop向子组件传递数据">通过Prop向子组件传递数据</h3><p>通过Prop可以在组件上注册一些自定义attribute。当一个值传递给一个prop attribute时会变成那个组件实例的一个property。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&quot;example&quot;&gt;</span><br><span class="line">    &lt;post-counter title=&quot;Blogging with Vue&quot;&gt;&lt;/post-counter&gt;</span><br><span class="line">    &lt;post-counter title=&quot;Hello world&quot;&gt;&lt;/post-counter&gt;</span><br><span class="line">    &lt;post-counter title=&quot;Zhangsan&quot;&gt;&lt;/post-counter&gt;</span><br><span class="line">    &lt;post-counter title=&quot;My journey with Vue&quot;&gt;&lt;/post-counter&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">Vue.component(&#x27;post-counter&#x27;,&#123;</span><br><span class="line">    props:[&#x27;title&#x27;],</span><br><span class="line">    template:&#x27;&lt;h3&gt;&#123;&#123;title&#125;&#125;&lt;/h3&gt;&#x27;</span><br><span class="line">&#125;)</span><br><span class="line">new Vue(&#123;</span><br><span class="line">    el:&#x27;#example&#x27;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>一个组件默认可以拥有任意数量的prop，任何值都可以传递给任何prop。</p><p>一个prop被注册后，就可以把数据作为一个自定义attribute传递到子组件中。</p><p>与此同时，也可以使用<code>v-bind</code>来动态传递prop：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&quot;example&quot;&gt;</span><br><span class="line">    &lt;post-counter v-for=&quot;post in posts&quot; v-bind:key=&quot;post.id&quot; v-bind:title=&quot;post.title&quot;&gt;&lt;/post-counter&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">Vue.component(&#x27;post-counter&#x27;,&#123;</span><br><span class="line">    props:[&#x27;title&#x27;],</span><br><span class="line">    template:&#x27;&lt;h3&gt;&#123;&#123;title&#125;&#125;&lt;/h3&gt;&#x27;</span><br><span class="line">&#125;)</span><br><span class="line">new Vue(&#123;</span><br><span class="line">    el:&#x27;#example&#x27;,</span><br><span class="line">    data:&#123;</span><br><span class="line">        posts:[</span><br><span class="line">            &#123;id:1,title:&#x27;Blogging with Vue&#x27;&#125;,</span><br><span class="line">            &#123;id:2,title:&#x27;Hello world&#x27;&#125;,</span><br><span class="line">            &#123;id:3,title:&#x27;Zhangsan&#x27;&#125;,</span><br><span class="line">            &#123;id:4,title:&#x27;My journey with Vue&#x27;&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="单个根元素">单个根元素</h3><p>当构建一个<code>post-counter</code>组件时，模板里最终包含的东西远不止一个标题信息，至少会包含正文的信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;h3&gt;&#123;&#123;title&#125;&#125;&lt;/h3&gt;</span><br><span class="line">&lt;div v-html=&quot;content&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>但在模板中这样写时，Vue会显示一个错误说每个组件必须只有一个根元素。因此需要将模板中的内容包裹在一个父元素<code>&lt;div&gt;</code>内，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;post-counter&quot;&gt;</span><br><span class="line">  &lt;h3&gt;&#123;&#123;title&#125;&#125;&lt;/h3&gt;</span><br><span class="line">  &lt;div v-html=&quot;content&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>当不满足于标题和内容信息时，组件会变得越来越复杂。此时为每个相关的信息都定义一个prop会变得很麻烦。故此时需要重构组件，让组件变成接收一个单独的<code>post</code> prop：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&quot;example&quot;&gt;</span><br><span class="line">    &lt;post-counter </span><br><span class="line">      v-for=&quot;post in posts&quot; </span><br><span class="line">      v-bind:key=&quot;post.id&quot; </span><br><span class="line">      v-bind:post=&quot;post&quot;&gt;&lt;/post-counter&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">Vue.component(&#x27;post-counter&#x27;,&#123;</span><br><span class="line">    props:[&#x27;post&#x27;],</span><br><span class="line">    template:`</span><br><span class="line">      &lt;div class=&quot;post-counter&quot;&gt;  </span><br><span class="line">        &lt;h3&gt;&#123;&#123;post.title&#125;&#125;&lt;/h3&gt;</span><br><span class="line">        &lt;div v-html=&quot;post.content&quot;&gt;&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;  `</span><br><span class="line">&#125;)</span><br><span class="line">new Vue(&#123;</span><br><span class="line">    el:&#x27;#example&#x27;,</span><br><span class="line">    data:&#123;</span><br><span class="line">        posts:[</span><br><span class="line">            &#123;id:1,title:&#x27;Blogging with Vue&#x27;&#125;,</span><br><span class="line">            &#123;id:2,title:&#x27;Hello world&#x27;&#125;,</span><br><span class="line">            &#123;id:3,title:&#x27;Zhangsan&#x27;&#125;,</span><br><span class="line">            &#123;id:4,title:&#x27;My journey with Vue&#x27;&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>无论何时为post对象添加新的property，都能自动地在重构后的组件内可用。</p><h3 id="监听子组件事件">监听子组件事件</h3><p>在开发组件时，其一些功能可能要求和父级组件进行沟通。如引入一个辅助功能来放大博文部分的字号，同时让页面的其他部分保持默认的字号。</p><p>则可以在父组件中添加一个<code>postFontSize</code>数据 property：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&quot;example&quot;&gt;</span><br><span class="line">    &lt;!-- 在模板中用来控制所有博文的字号 --&gt;</span><br><span class="line">    &lt;div :style=&quot;&#123;fontSize:postFontSize+&#x27;em&#x27;&#125;&quot;&gt;</span><br><span class="line">      &lt;!-- 增加监听器，父级组件可通过v-on监听子组件实例的事件，可接收该事件并刷新对应的值 --&gt;</span><br><span class="line">      &lt;post-counter </span><br><span class="line">      v-for=&quot;post in posts&quot; </span><br><span class="line">      v-bind:key=&quot;post.id&quot; </span><br><span class="line">      v-bind:post=&quot;post&quot;</span><br><span class="line">      v-on:enlarge-text=&quot;postFontSize+=0.1&quot;</span><br><span class="line">    &gt;&lt;/post-counter&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;  </span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">Vue.component(&#x27;post-counter&#x27;,&#123;</span><br><span class="line">    props:[&#x27;post&#x27;],</span><br><span class="line">    //添加一个放大字号的按钮,通过调用$emit方法并传入事件名称类触发一个事件</span><br><span class="line">    template:`</span><br><span class="line">      &lt;div class=&quot;post-counter&quot;&gt;  </span><br><span class="line">        &lt;h3&gt;&#123;&#123;post.title&#125;&#125;&lt;/h3&gt;</span><br><span class="line">        &lt;button v-on:click=&quot;$emit(&#x27;enlarge-text&#x27;)&quot;&gt;</span><br><span class="line">            Enlarge text</span><br><span class="line">        &lt;/button&gt;    </span><br><span class="line">        &lt;div v-html=&quot;post.content&quot;&gt;&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;  `</span><br><span class="line">&#125;)</span><br><span class="line">new Vue(&#123;</span><br><span class="line">    el:&#x27;#example&#x27;,</span><br><span class="line">    data:&#123;</span><br><span class="line">        posts:[</span><br><span class="line">            &#123;id:1,title:&#x27;Blogging with Vue&#x27;&#125;,</span><br><span class="line">            &#123;id:2,title:&#x27;Hello world&#x27;&#125;,</span><br><span class="line">            &#123;id:3,title:&#x27;Zhangsan&#x27;&#125;,</span><br><span class="line">            &#123;id:4,title:&#x27;My journey with Vue&#x27;&#125;</span><br><span class="line">        ],</span><br><span class="line">        postFontSize:1//添加postFontSize数据property</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="使用事件抛出一个值">使用事件抛出一个值</h4><p>用一个事件来抛出一个特定的值是非常实用的。如上面例子中，想让<code>post-counter</code>组件自行决定它的文本要放大多少，就是使用<code>$emit</code>的第二个参数来提供这个值：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;$emit(&#x27;enlarge-text&#x27;)&quot;</span>&gt;</span></span><br><span class="line">    Enlarge text</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span>  </span><br></pre></td></tr></table></figure><p>当父级组件监听这个事件时，可以通过<code>$emit</code>访问到被抛出的这个值：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v-on:enlarge-text=&quot;postFontSize+=$event&quot;</span><br></pre></td></tr></table></figure><p>若事件处理函数是一个方法，则这个值将会作为第一个参数传入这个方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;post-counter </span><br><span class="line">  v-for=&quot;post in posts&quot; </span><br><span class="line">  v-bind:key=&quot;post.id&quot; </span><br><span class="line">  v-bind:post=&quot;post&quot;</span><br><span class="line">  v-on:enlarge-text=&quot;onEnlargeText&quot;</span><br><span class="line">&gt;&lt;/post-counter&gt;</span><br><span class="line"></span><br><span class="line">methods:&#123;</span><br><span class="line">    onEnlargeText:function(enlargeAmount)&#123;</span><br><span class="line">        this.postFontSize+=enlargeAmount</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="在组件上使用v-model">在组件上使用<code>v-model</code></h4><p>自定义事件也可以用于创建支持<code>v-model</code>的自定义输入组件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;input v-model=&quot;searchText&quot;&gt;</span><br><span class="line">&lt;!-- 等价于 --&gt;</span><br><span class="line">&lt;input </span><br><span class="line">  v-bind:value=&quot;searchText&quot;</span><br><span class="line">  v-on:input=&quot;searchText=$event.target.value&quot;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>当用在组件上时，<code>v-model</code>则会变成这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;custom-input </span><br><span class="line">  v-bind:value=&quot;searchText&quot;</span><br><span class="line">  v-on:input=&quot;searchText=$event&quot;</span><br><span class="line">&gt;&lt;/custom-input&gt;</span><br></pre></td></tr></table></figure><p>为了使<code>v-model</code>能够正常工作，这个组件内的<code>&lt;input&gt;</code>必须将其<code>value</code> attribute绑定到名叫<code>value</code>的prop上，并在其<code>input</code>事件被触发时，将新的值通过自定义的<code>input</code>事件抛出，即：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!--调用组件--&gt;</span><br><span class="line">    &lt;custom-input v-model=&quot;searchText&quot;&gt;&lt;/custom-input&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">Vue.component(&#x27;custom-input&#x27;,&#123;</span><br><span class="line">    props:[&#x27;value&#x27;],</span><br><span class="line">    template:`</span><br><span class="line">      &lt;input</span><br><span class="line">        v-bind:value=&quot;value&quot;</span><br><span class="line">        v-on:input=&quot;$emit(&#x27;input&#x27;,$event.target.value)&quot;</span><br><span class="line">      &gt;  </span><br><span class="line">    `</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="通过插槽分发内容">通过插槽分发内容</h3><p>Vue自定义的<code>&lt;slot&gt;</code>元素可以向一个组件传递内容，只要在需要的地方加入插槽就行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&#x27;alert-box&#x27;,&#123;</span><br><span class="line">    template:`</span><br><span class="line">      &lt;div class=&quot;demo-alert-box&quot;&gt;</span><br><span class="line">        &lt;strong&gt;Error!&lt;/strong&gt;</span><br><span class="line">        &lt;slot&gt;&lt;/slot&gt;  </span><br><span class="line">  &lt;/div&gt;  </span><br><span class="line">    `</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="动态组件">动态组件</h3><p>可以通过Vue的<code>&lt;component&gt;</code>元素加一个特殊的<code>is</code> attribute实现<strong>在不同组件之间进行动态切换</strong>，如在一个多标签的页面里实现无跳转切换标签：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 组件会在currentTabComponent改变时改变 --&gt;</span><br><span class="line">&lt;component v-bind:is=&quot;currentTabComponent&quot;&gt;&lt;/component&gt;</span><br></pre></td></tr></table></figure><p>其中，<code>currentTabComponent</code>可以包括已注册组件的名字或是一个组件的选项对象。</p><p>这个attribute可以用于常规HTML元素，但这些元素将被视为组件，即所有的attribute都会作为DOM attribute被绑定。若想让其正常工作，则需要使用<code>.prop</code>修饰器。</p><h3 id="解析dom模板时的注意事项">解析DOM模板时的注意事项</h3><p>对于一些HTML元素如<code>&lt;ul&gt;</code>、<code>&lt;ol&gt;</code>、<code>&lt;table&gt;</code>和<code>&lt;select&gt;</code>，哪些可以出现在其内部是由严格限制的。而另一些HTML元素如<code>&lt;li&gt;</code>、<code>&lt;tr&gt;</code>和<code>&lt;option&gt;</code>，只能出现在其其他某些特定的元素内部。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--自定义组件blog-post-row会被作为无效内容--&gt;</span><br><span class="line">&lt;table&gt;</span><br><span class="line">  &lt;blog-post-row&gt;&lt;/blog-post-row&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--使用is attribute可以让自定义组件不会被作为无效内容--&gt;</span><br><span class="line">&lt;table&gt;</span><br><span class="line">  &lt;tr is=&quot;blog-post-row&quot;&gt;&lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure><p>若是从以下来源使用模板则没有这个限制：</p><ul><li>字符串</li><li>单文件组件（<code>.vue</code>）</li><li><code>&lt;script type="text/x-template"&gt;</code></li></ul>]]></content>
    
    
    <summary type="html">前端,Vue.js</summary>
    
    
    
    <category term="学习笔记" scheme="http://tangmenjue.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="前端" scheme="http://tangmenjue.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="前端框架" scheme="http://tangmenjue.top/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="Vue.js" scheme="http://tangmenjue.top/tags/Vue-js/"/>
    
    <category term="前端" scheme="http://tangmenjue.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>前端框架之Vue.js（二）</title>
    <link href="http://tangmenjue.top/2022/11/04/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://tangmenjue.top/2022/11/04/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E4%BA%8C%EF%BC%89/</id>
    <published>2022-11-04T08:25:59.000Z</published>
    <updated>2022-11-04T08:25:59.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue.js基础">Vue.js基础</h1><h2 id="模板语法">模板语法</h2><p>Vue.js使用了基于HTML的模板语法，允许开发者声明式地将DOM绑定至底层Vue实例的数据。所有的Vue.js模板都是合法的HTML。</p><h3 id="插值">插值</h3><h4 id="文本">文本</h4><p>数据绑定最常见的形式就是使用"Mustache"语法（双大括号）的文本插值：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>message:&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app=<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>:&#123;</span><br><span class="line">        <span class="attr">message</span>:<span class="string">&#x27;Hello Vue!&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Mustache标签将会被替代为对应数据对象上<code>msg</code> property的值。当绑定的数据对象上<code>msg</code> property发生了改变，插值的内容都会更新。</p><p>使用<code>v-once</code>指令，可以执行一次性地插值。当数据改变时，插值处的内容不会更新，但这会影响到该节点上的其他数据绑定：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-once</span>&gt;</span>本句话将不会改变：&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>    </span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="property">message</span>=<span class="string">&#x27;nihao&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="原始html">原始HTML</h4><p>双大括号会将数据解释为普通文本，并非是HTML代码。使用<code>v-html</code>指令可以输出HTML代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Using mushaches:&#123;&#123;rewHtml&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Using v-html directive:<span class="tag">&lt;<span class="name">span</span> <span class="attr">v-html</span>=<span class="string">&quot;rewHtml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app=<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>:&#123;</span><br><span class="line">        <span class="attr">message</span>:<span class="string">&#x27;Hello Vue!&#x27;</span>,</span><br><span class="line">        <span class="attr">rewHtml</span>:<span class="string">&#x27;&lt;span style=&quot;color:red&quot;&gt;This should be red.&lt;/span&gt;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这个<code>span</code>的内容将会被替换成为property值<code>rawHtml</code>，忽略解析property值中的数据绑定后，直接作为HTML。<strong>注意不能使用<code>v-html</code>来复合局部模板。</strong></p><p>在站点上动态渲染任意的HTML可能会非常危险，其很容易导致XSS攻击。因此要只对可信内容使用HTML插值，不要对用户提供的内容使用插值。</p><h4 id="attribute">Attribute</h4><p>Mustache语法不能作用在HTML attribute上，此时应该使用<code>v-bind</code>指令：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">&quot;dynamicId&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-bind:disabled</span>=<span class="string">&quot;isButtonDisabled&quot;</span>&gt;</span>Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app=<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&#x27;#dynamicId&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>:&#123;</span><br><span class="line">        <span class="attr">isButtonDisabled</span>:<span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>若<code>isButtonDisabled</code>的值是<code>null</code>、<code>undefined</code>或<code>false</code>，则<code>disable</code>attribute是不会被包含在渲染出来的<code>&lt;button&gt;</code>元素中。</p><h4 id="使用javascript表达式">使用JavaScript表达式</h4><p>对于所有的数据绑定，Vue.js提供了完全的JavaScript表达式支持。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;p&gt;number:&#123;&#123;number+1&#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;ok:&#123;&#123;ok?&#x27;YES&#x27;:&#x27;NO&#x27;&#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;&#123;&#123;message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;)&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var app=new Vue(&#123;</span><br><span class="line">        el:&#x27;#app&#x27;,</span><br><span class="line">        data:&#123;</span><br><span class="line">            number:123,</span><br><span class="line">            ok:&#x27;1&gt;2&#x27;,</span><br><span class="line">            message:&#x27;hello&#x27;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;xxxxxxxxxx17 1&lt;body&gt;2    &lt;div id=&quot;app&quot;&gt;3        &lt;p&gt;number:&#123;&#123;number+1&#125;&#125;&lt;/p&gt;4        &lt;p&gt;ok:&#123;&#123;ok?&#x27;YES&#x27;:&#x27;NO&#x27;&#125;&#125;&lt;/p&gt;5        &lt;p&gt;&#123;&#123;message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;)&#125;&#125;&lt;/p&gt;6    &lt;/div&gt;7&lt;/body&gt;8&lt;script&gt;9    var app=new Vue(&#123;10        el:&#x27;#app&#x27;,11        data:&#123;12            number:123,13            ok:&#x27;1&gt;2&#x27;,14            message:&#x27;hello&#x27;,15        &#125;16    &#125;)17&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>上述表达式会在所属Vue实例的数据作用域下作为JavaScript被解析。注意：每个绑定都只能包含单个表达式。因此下面的例子不会生效：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--这是语句，不是表达式--&gt;</span><br><span class="line">&#123;&#123;var a=1&#125;&#125;</span><br><span class="line">&lt;!--流控制也不会生效，请使用三元表达式--&gt;</span><br><span class="line">&#123;&#123;if (ok)&#123; return message &#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p><strong>模板表达式</strong>都被放在沙盒中，<strong>只能访问全局变量的一个白名单</strong>，如Math和Date。不要在模板表达式中视图访问用户定义的全局变量。</p><h3 id="指令">指令</h3><p>指令是带有<code>v-</code>前缀的特殊attribute。指令attribute的值预期是<strong>单个JavaScript表达式</strong>（<code>v-for</code>除外）指令的职责是，当表达式的值改变时，将其产生的连带影响，响应式地作用于DOM，如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;seen&quot;</span>&gt;</span>现在可以看到我<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在这里，<code>v-if</code>指令将根据表达式<code>seen</code>值的真假来插入/移除<code>&lt;p&gt;</code>元素。</p><h4 id="参数">参数</h4><p>一些指令能够接收一个“参数”，在指令名称之后以冒号表示。如<code>v-bind</code>指令可以用于响应式地更新HTML attribute:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在这里，<code>href</code>是参数，告知<code>v-bind</code>指令将该元素的<code>href</code> attribute与表达式<code>url</code>的值绑定。</p><p>另一个<code>v-on</code>指令可用于监听DOM事件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click</span>=<span class="string">&quot;doSomething&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在这里参数是监听的事件名。</p><h4 id="动态参数">动态参数</h4><p>从Vue2.6.0开始，可以用方括号括起来的JavaScript表达式作为一个指令的参数：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:</span>[<span class="attr">attributeName</span>]=<span class="string">&quot;url&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里的<code>attributeName</code>会被作为一个JavaScript表达式进行动态求值，求得的值将会作为最终的参数来使用。如，若Vue实例中有一个名为<code>attributeName</code>的<code>data</code>property，其值为<code>href</code>，则上面的语句等价于<code>v-bind:href="url"</code>。</p><p>动态参数可以为一个动态的事件名绑定处理函数：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:</span>[<span class="attr">eventName</span>]=<span class="string">&quot;doSomething&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在这里，当<code>eventName</code>的值为<code>"focus"</code>时，<code>v-on:&#123;eventName&#125;</code>将等价于<code>v-on:focus</code>。</p><p><strong>对动态参数值的约束</strong>：</p><p>动态函数预期会求出一个字符串，异常情况下值为<code>null</code>。这个特殊的<code>null</code>值可以被显性地用于移除绑定。任何其它非字符串类型的值都将会触发一个警告。</p><p><strong>对动态参数表达式的约束：</strong></p><p>动态参数表达式有一些语法约束，如空格和引号，放在HTML attribute名里是无效的。因此使用没有空格或引号的表达式，或使用计算属性来替代这种复杂表达式。</p><p>在DOM中使用模板时（即直接在HTML文件里撰写模板），由于浏览器会把attribute名全部强制转为小写，还要避免使用大写字符来命名键名。</p><h4 id="修饰符">修饰符</h4><p>修饰符是以半角句号<code>.</code>指明的特殊后缀，用于指出一个指令应该以特殊方式绑定。如<code>.prevent</code>修饰符告诉<code>v-on</code>指令对于触发的事件调用<code>event.preventDefault()</code>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>=<span class="string">&quot;onSubmit&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="缩写">缩写</h3><p><code>v-</code>前缀作为一种视觉提示，用来识别模板中Vue特定的attribute。<code>v-</code>前缀有助于为现有标签添加动态行为，但在一些频繁用到的指令以及构建由Vue管理所有模板的单页面应用程序里，<code>v-</code>前缀的作用不大。</p><h4 id="v-bind缩写"><code>v-bind</code>缩写</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 完整语法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 缩写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 动态参数的缩写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:</span>[<span class="attr">key</span>]=<span class="string">&quot;url&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a:</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="v-on缩写"><code>v-on</code>缩写</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 完整语法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click</span>=<span class="string">&quot;doSomething&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 缩写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">&quot;doSomething&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 动态参数的缩写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> @[<span class="attr">event</span>]=<span class="string">&quot;doSomething&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a:</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="计算属性和侦听器">计算属性和侦听器</h2><h3 id="计算属性">计算属性</h3><p>对于任何复杂逻辑，应当使用计算属性。</p><h4 id="基础例子">基础例子</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;example&quot;&gt;</span><br><span class="line">        &lt;p&gt;Original message:&quot;&#123;&#123;message&#125;&#125;&quot;&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;Computed reversed message:&quot;&#123;&#123;reversedMessage&#125;&#125;&quot;&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var vm=new Vue(&#123;</span><br><span class="line">        el:&#x27;#example&#x27;,</span><br><span class="line">        data:&#123;</span><br><span class="line">            message:&#x27;Hello&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        computed:&#123;</span><br><span class="line">            reversedMessage:function()&#123;</span><br><span class="line">                return this.message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>在这里声明了一个计算属性<code>reversedMessage</code>，提供的函数将用作property<code>vm.reversedMessage</code>的getter函数。</p><p>打开F12中的JavaScript控制台，输入以下JavaScript代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(vm.<span class="property">reversedMessage</span>)</span><br><span class="line"><span class="comment">//返回olleH</span></span><br><span class="line">vm.<span class="property">message</span>=<span class="string">&#x27;Goodbye&#x27;</span></span><br><span class="line"><span class="comment">//返回&#x27;Goodbye&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(vm.<span class="property">reversedMessage</span>)</span><br><span class="line"><span class="comment">//返回eybdooG</span></span><br></pre></td></tr></table></figure><p>可以看到，<code>vm.reversedMessage</code>的值始终取决于<code>vm.message</code>的值。</p><p><code>vm.reversedMessage</code>依赖于<code>vm.message</code>，因此当<code>vm.message</code>发生改变时，所有依赖<code>vm.reversedMessage</code>的绑定也会更新。由于已经以声明的方式创建了这种依赖关系，因此计算属性的getter函数是没有副作用的。</p><h4 id="计算属性缓存-vs-方法">计算属性缓存 vs 方法</h4><p>通过在表达式中调用方法也可以达到与基础例子同样的效果，将同一函数定义为一个方法而不是一个计算属性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;example&quot;&gt;</span><br><span class="line">        &lt;p&gt;Reverssed message:&quot;&#123;&#123;reversedMessage()&#125;&#125;&quot;&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var vm=new Vue(&#123;</span><br><span class="line">        el:&#x27;#example&#x27;,</span><br><span class="line">        data:&#123;</span><br><span class="line">            message:&#x27;hello&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            reversedMessage:function()&#123;</span><br><span class="line">                return this.message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>打开F12中的JavaScript控制台，输入以下JavaScript代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(vm.<span class="title function_">reversedMessage</span>())</span><br><span class="line"><span class="comment">//返回olleh</span></span><br><span class="line">vm.<span class="property">message</span>=<span class="string">&#x27;exam&#x27;</span></span><br><span class="line"><span class="comment">//返回&#x27;exam&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(vm.<span class="title function_">reversedMessage</span>())</span><br><span class="line"><span class="comment">//返回maxe</span></span><br></pre></td></tr></table></figure><p>可以看到这两种方式的最终结果是相同的。不同的是<strong>计算属性是基于响应式依赖进行缓存的。</strong>只在相关响应式依赖发生改变时它们才会重新求值。也就是说，只要<code>message</code>还没有发生改变，多次访问<code>reversedMessage</code>计算属性会立即返回之前的计算结果，而不必再次执行函数。但这也意味着下面的计算属性将不再更新，因为其不是响应式依赖：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>:&#123;</span><br><span class="line">    <span class="attr">now</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而每次触发重新渲染时，调用方法总会再次执行函数。</p><h4 id="计算属性-vs-侦听属性">计算属性 vs 侦听属性</h4><p>Vue的侦听属性可以用来观察和响应Vue实例上的数据变动。当有一些数据需要随着其他数据变动而变动时，很容易会滥用<code>watch</code>。通常更好的做法是使用计算数学而不是命令是的<code>watch</code>回调。</p><p><code>watch</code>回调版本的代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;demo&quot;&gt;</span><br><span class="line">        &#123;&#123;fullName&#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var vm=new Vue(&#123;</span><br><span class="line">        el:&#x27;#demo&#x27;,</span><br><span class="line">        data:&#123;</span><br><span class="line">            firstName:&#x27;Foo&#x27;,</span><br><span class="line">            lastName:&#x27;Bar&#x27;,</span><br><span class="line">            fullName:&#x27;Foo Bar&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        watch:&#123;</span><br><span class="line">            firstName:function(val)&#123;</span><br><span class="line">                this.fullName=val+&#x27; &#x27;+this.lastName</span><br><span class="line">            &#125;,</span><br><span class="line">            lastName:function(val)&#123;</span><br><span class="line">                this.fullName=this.firstName+&#x27; &#x27;+val</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>计算属性版本的代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;demo&quot;&gt;</span><br><span class="line">        &#123;&#123;fullName&#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var vm=new Vue(&#123;</span><br><span class="line">        el:&#x27;#demo&#x27;,</span><br><span class="line">        data:&#123;</span><br><span class="line">            firstName:&#x27;Foo&#x27;,</span><br><span class="line">            lastName:&#x27;Bar&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        computed:&#123;</span><br><span class="line">            fullName:function()&#123;</span><br><span class="line">                return this.fullName=this.firstName+&#x27; &#x27;+this.lastName</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>由此可见计算属性版本的代码比<code>watch</code>回调版本的代码好多了。</p><h4 id="计算属性的setter">计算属性的setter</h4><p>计算属性默认只有getter，但在需要时也可以提供一个setter：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>:&#123;</span><br><span class="line">    <span class="attr">fullName</span>:&#123;</span><br><span class="line">        <span class="comment">//getter</span></span><br><span class="line">        <span class="attr">get</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span>+<span class="string">&#x27; &#x27;</span>+<span class="variable language_">this</span>.<span class="property">lastName</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//setter</span></span><br><span class="line">        <span class="attr">set</span>:<span class="keyword">function</span>(<span class="params">newValue</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> names=newValue.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">firstName</span>=names[<span class="number">0</span>]</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">lastName</span>=names[names.<span class="property">length</span>-<span class="number">1</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打开F12中的JavaScript控制台，运行<code>vm.fullName='zhangsan'</code>时，setter会被调用，<code>vm.firstName</code>和<code>vm.lastName</code>也会随之更新。</p><h3 id="侦听器">侦听器</h3><p>虽然计算属性在大多数情况下更合适，但有时也需要一个自定义的侦听器。<strong>当需要在数据变化时执行异步或开销较大的操作时，自定义侦听器的方式是最有用的。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;   </span><br><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/axios@0.12.0/dist/axios.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/lodash@4.13.1/lodash.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;watch-example&quot;&gt;</span><br><span class="line">        &lt;p&gt;Ask a yes/no question:</span><br><span class="line">            &lt;input v-model=&quot;question&quot;&gt;</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">        &lt;p&gt;&#123;&#123;answer&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var watchExampleVM=new Vue(&#123;</span><br><span class="line">        el:&#x27;#watch-example&#x27;,</span><br><span class="line">        data:&#123;</span><br><span class="line">            question:&#x27;&#x27;,</span><br><span class="line">            answer:&#x27;I cannot give you an answer until you ask a question!&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        watch:&#123;</span><br><span class="line">            question:function(newQuestion,oldQuestion)&#123;</span><br><span class="line">                this.answer=&#x27;Waiting for you to stop typing...&#x27;</span><br><span class="line">                this.debouncedGetAnswer()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        created:function()&#123;</span><br><span class="line">            this.debouncedGetAnswer=_.debounce(this.getAnswer,500)</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            getAnswer:function()&#123;</span><br><span class="line">                if(this.question.indexOf(&#x27;?&#x27;)===-1)&#123;</span><br><span class="line">                    this.answer=&#x27;Questions usually contain a question mark. ;-)&#x27;</span><br><span class="line">                    return</span><br><span class="line">                &#125;</span><br><span class="line">                this.answer=&#x27;Thinking...&#x27;</span><br><span class="line">                var vm=this</span><br><span class="line">                axios.get(&#x27;https://yesno.wtf/api&#x27;)</span><br><span class="line">                    .then(function(response)&#123;</span><br><span class="line">                        vm.answer=_.capitalize(response.data.answer)</span><br><span class="line">                    &#125;)</span><br><span class="line">                    .catch(function(error)&#123;</span><br><span class="line">                        vm.answer=&#x27;Error! Could not reach the API. &#x27;+error</span><br><span class="line">                    &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>在这个示例中，<strong>使用<code>watch</code>选项执行异步操作（访问一个API），限制执行该操作的频率，并在得到最终结果前，设置中间状态</strong>。这些都是计算属性无法做到的。</p><h2 id="class与style绑定">Class与Style绑定</h2><p>操作元素的class列表和内联样式是数据绑定的常见需求。由于它们都是attribute，因此可以用<code>v-bind</code>来处理它们。将<code>v-bind</code>用于<code>class</code>和<code>style</code>时，表达式结果的类型除了字符串之外，还可以是对象或数组。</p><h3 id="绑定html-class">绑定HTML Class</h3><h4 id="对象语法">对象语法</h4><p>动态地切换class可以传给<code>v-bind:class</code>一个对象：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;&#123;active:isActive&#125;&quot;</span>&gt;</span>Hello Vue!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面的代码表示<code>active</code>这个class存在与否将取决于数据property <code>isActive</code>的truthiness。</p><p>可以在对象中传入更多字段来动态切换多个class。<code>v-bind:class</code>指令也可以与普通的class attribute共存：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div </span><br><span class="line">    class=&#x27;static&#x27;</span><br><span class="line">    v-bind:class=&quot;&#123;active:isActive,&#x27;text-danger&#x27;:hasError&#125;&quot;</span><br><span class="line">    &gt;Hello Vue!&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var tes=new Vue(&#123;</span><br><span class="line">    data:&#123;</span><br><span class="line">        isActive:true,</span><br><span class="line">        hasError:false</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>渲染后就等价于</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;static active&#x27;</span>&gt;</span>Hello Vue!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当<code>isActive</code>或者<code>hasError</code>变化时，class列表将相应地更新。若<code>hasError</code>的值为<code>true</code>，则class列表将变为<code>class='static active text-danger'</code>。</p><p>绑定的数据对象不必内联定义在模板里：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div v-bind:class=&quot;classObject&quot;&gt;Hello Vue!&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var tes=new Vue(&#123;</span><br><span class="line">        data:&#123;</span><br><span class="line">            classObject:&#123;</span><br><span class="line">                active:true,</span><br><span class="line">                &#x27;text-danger&#x27;:false</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>其渲染结果和上面是一样的。也可以在这里绑定一个返回对象的计算属性，这是一个常用的模式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&#x27;test&#x27; v-bind:class=&quot;classObject&quot;&gt;Hello Vue!&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var tes=new Vue(&#123;</span><br><span class="line">        data:&#123;</span><br><span class="line">            isActive:true,</span><br><span class="line">            error:null</span><br><span class="line">        &#125;,</span><br><span class="line">        computed:&#123;</span><br><span class="line">            classObject:function()&#123;</span><br><span class="line">                return &#123;</span><br><span class="line">                    active:this.isActive &amp;&amp; !this.error,</span><br><span class="line">                    &#x27;text-danger&#x27;:this.error &amp;&amp; this.error.type===&#x27;fatal&#x27;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="数组语法">数组语法</h4><p>应用一个class列表可以把一个数组传给<code>v-bind:class</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div v-bind:class=&quot;[activeClass, errorClass]&quot;&gt;Hello Vue!&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var tes=new Vue(&#123;</span><br><span class="line">        data:&#123;</span><br><span class="line">            activeClass:&#x27;active&#x27;,</span><br><span class="line">            errorClass:&#x27;text-danger&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>渲染后就等价于</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;active text-danger&#x27;</span>&gt;</span>Hello Vue!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>若想根据条件切换列表中的class，可以用三元表达式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;[isActive ? activeClass:&#x27;&#x27;,errorClass]&quot;</span>&gt;</span>Hello Vue!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样便是始终添加<code>errorClass</code>，但只有在<code>isActive</code>是truthy时才添加<code>activeClass</code>。</p><p><strong>注意：</strong>truthy是指再布尔值上下文中，转换后的值为<code>'true'</code>，其不是true。</p><p>当有多个条件class时这样写有些繁琐，因此在数组语法中也可以使用对象语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;[&#123;active:isActive&#125;,errorClass]&quot;</span>&gt;</span>Hello Vue!</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="用在组件上">用在组件上</h4><p>当在一个自定义组件上使用<code>class</code> property时，这些class将被追加到该组件的根元素上面，已存在的class不会被覆盖。</p><p>若这有一组件声明如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span> <span class="title function_">component</span>(<span class="string">&#x27;my-component&#x27;</span>,&#123;</span><br><span class="line">    <span class="attr">template</span>:<span class="string">&#x27;&lt;p class=&quot;foo bar&quot;&gt;Hi&lt;/p&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>使用它时添加一些class：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure><p>HTML将被渲染为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;foo bar text&quot;</span>&gt;</span></span><br><span class="line">    Hi</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对于带数据绑定的class也同样适用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;&#123;active:isActive&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--当isActive为truthy时，HTML将被渲染为--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;foo far active&quot;</span>&gt;</span></span><br><span class="line">    Hi</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="绑定内联样式">绑定内联样式</h3><h4 id="对象语法-1">对象语法</h4><p><code>v-bind:style</code>的对象语法看起来非常像CSS，但实际上是个JavaScript对象。CSS property名可以用驼峰式（camelCase）或短横线分隔（kebab-case，记得用括号括起来）来命名：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&#x27;test&#x27; v-bind:style=&quot;&#123;color:activeColor,fontSize:fontSize+&#x27;px&#x27;&#125;&quot;&gt;Hello Vue!&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var tes=new Vue(&#123;</span><br><span class="line">        el:&#x27;#test&#x27;,</span><br><span class="line">        data:&#123;</span><br><span class="line">            activeColor:&#x27;red&#x27;,</span><br><span class="line">            fontSize:30</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>通常直接绑定到一个样式对象，让模板更清晰：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&#x27;test&#x27; v-bind:style=&quot;styleObject&quot;&gt;Hello Vue!&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var tes=new Vue(&#123;</span><br><span class="line">        el:&#x27;#test&#x27;,</span><br><span class="line">        data:&#123;</span><br><span class="line">            styleObject:&#123;</span><br><span class="line">                color:&#x27;red&#x27;,</span><br><span class="line">                fontSize:&#x27;13px&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>对象语法常会结合返回对象的计算熟悉使用。</p><h4 id="数组语法-1">数组语法</h4><p><code>v-bind:style</code>的数组书法可以将多个样式对象应用到同一个元素上：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;test&#x27;</span> <span class="attr">v-bind:style</span>=<span class="string">&quot;[baseStyles,overridingStyles]&quot;</span>&gt;</span>Hello Vue!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="自动添加前缀">自动添加前缀</h4><p>当<code>v-bind:style</code>需要使用添加浏览器引擎前缀的CSS property时，如<code>tranform</code>，<strong>Vue.js会自动侦测并添加相应的前缀。</strong></p><h4 id="多重值">多重值</h4><p>从Vue2.3.0版本起，可以为<code>style</code>绑定中的property提供一个包含多个值的数组，常用于提供多个带前缀的值：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;display:[&#x27;-webkit-box&#x27;,&#x27;-ms-flexbox&#x27;,&#x27;flex&#x27;]&#125;&quot;</span>&gt;</span>Helo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上述代码只会渲染数组中最后一个被浏览器支持的值。若浏览器支持不带浏览器前缀的flexbox，那么就只会渲染<code>display:flex</code>。</p><h2 id="条件渲染">条件渲染</h2><h3 id="v-if"><code>v-if</code></h3><p><code>v-if</code>指令用于条件性地渲染一块内容。这块内容只会再指令的表达式返回truthy值时被渲染：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;awesome&quot;</span>&gt;</span>Vue is awesome!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p>也可以用<code>v-else</code>添加一个<code>"else"</code>块：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;awesome&quot;</span>&gt;</span>Vue is awesome!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>Oh no!!!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="在template元素上使用v-if条件渲染分组">在<code>&lt;template&gt;</code>元素上使用<code>v-if</code>条件渲染分组</h4><p>由于<code>v-if</code>是一个指令，所以必须将它添加到一个元素上。若想要切换多个元素时，可以把一个<code>&lt;template&gt;</code>元素当作不可见的包裹元素并在<code>&lt;template&gt;</code>元素上使用<code>v-if</code>，最终的渲染结果将不包含<code>&lt;template&gt;</code>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">&quot;ok&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Paragraph 1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>paragraph 2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="v-else"><code>v-else</code></h4><p>可以用<code>v-else</code>指令来表示<code>v-if</code>的<code>"else"</code>块：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;test&quot;&gt;</span><br><span class="line">    &lt;div v-if=&quot;Math.random()&gt;0.5&quot;&gt;</span><br><span class="line">        Now you see me!</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div v-else&gt;</span><br><span class="line">        Now you can not see me!</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var tes=new Vue(&#123;</span><br><span class="line">        el:&#x27;#test&#x27;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><code>v-else</code>元素必须紧跟在带<code>v-if</code>或<code>v-else-if</code>的元素后面，否则它将不会被之别。</p><h4 id="v-else-if"><code>v-else-if</code></h4><p><code>v-else-if</code>指令表示<code>v-if</code>的<code>"else-if"</code>块，可以连续使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;test&quot;&gt;</span><br><span class="line">    &lt;div v-if=&quot;type===&#x27;A&#x27;&quot;&gt;A&lt;/div&gt;</span><br><span class="line">    &lt;div v-else-if=&quot;type===&#x27;B&#x27;&quot;&gt;B&lt;/div&gt;</span><br><span class="line">    &lt;div v-else-if=&quot;type===&#x27;c&#x27;&quot;&gt;C&lt;/div&gt;</span><br><span class="line">    &lt;div v-else&gt;Not A/B/c&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var tes=new Vue(&#123;</span><br><span class="line">        el:&#x27;#test&#x27;,</span><br><span class="line">        data:&#123;</span><br><span class="line">            type:&#x27;D&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>类似于<code>v-else</code>，<code>v-else-if</code>也必须紧跟在带<code>v-if</code>或<code>v-else-if</code>的元素之后。</p><h4 id="用key管理可复用的元素">用<code>key</code>管理可复用的元素</h4><p>Vue通常会复用已有元素而不是从头开始渲染。这样除了让Vue变得非常快之外，还有其他一些好处。如允许用户在不同的登录方式之间切换：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;test&quot;&gt;</span><br><span class="line">    &lt;template v-if=&quot;loginType===&#x27;username&#x27;&quot;&gt;</span><br><span class="line">        &lt;label&gt;Username&lt;/label&gt;</span><br><span class="line">        &lt;input placeholder=&quot;Enter your username&quot; &gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">    &lt;template v-else&gt;</span><br><span class="line">        &lt;label&gt;Email&lt;/label&gt;</span><br><span class="line">        &lt;input placeholder=&quot;Enter your email address&quot; &gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">    &lt;button v-on:click=&quot;changeMessage&quot;&gt;Toggle login type&lt;/button&gt;    </span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var tes=new Vue(&#123;</span><br><span class="line">        el:&#x27;#test&#x27;,</span><br><span class="line">        data:&#123;</span><br><span class="line">            loginType:&#x27;zhangsan&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            changeMessage:function()&#123;</span><br><span class="line">                return this.loginType=this.loginType===&#x27;username&#x27;?&#x27;eamil&#x27;:&#x27;username&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="/2022/11/04/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E4%BA%8C%EF%BC%89/1.png"></p><p>在输入框输入一些文本，然后按下切换按钮。可以看到用户输入在输入框的内容是不变的。</p><p>这意味着在上面的代码中切换<code>loginType</code>将不会清除用户已经输入的内容。因为两个模板使用了相同的元素，<code>&lt;input&gt;</code>不会被替换掉，仅只是替换了它的<code>placeholder</code>。</p><p>Vue还提供一种方式来表达“这两个元素是完全独立的，不要复用它们”，只需要添加一个具有唯一值的<code>key</code> attribute即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;test&quot;&gt;</span><br><span class="line">    &lt;template v-if=&quot;loginType===&#x27;username&#x27;&quot;&gt;</span><br><span class="line">        &lt;label&gt;Username&lt;/label&gt;</span><br><span class="line">        &lt;input placeholder=&quot;Enter your username&quot; key=&quot;username-input&quot;&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">    &lt;template v-else&gt;</span><br><span class="line">        &lt;label&gt;Email&lt;/label&gt;</span><br><span class="line">        &lt;input placeholder=&quot;Enter your email address&quot; key=&quot;email-input&quot;&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">    &lt;button v-on:click=&quot;changeMessage&quot;&gt;Toggle login type&lt;/button&gt;    </span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var tes=new Vue(&#123;</span><br><span class="line">        el:&#x27;#test&#x27;,</span><br><span class="line">        data:&#123;</span><br><span class="line">            loginType:&#x27;zhangsan&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            changeMessage:function()&#123;</span><br><span class="line">                return this.loginType=this.loginType===&#x27;username&#x27;?&#x27;eamil&#x27;:&#x27;username&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>运行代码后，再次在输入框输入一些文本，然后按下切换按钮。可以看到每次切换时，输入框都将被重新渲染。</p><p>需要注意的是：这里的<code>&lt;label&gt;</code>仍然会被高效得复用，因为它们没有添加<code>key</code>attribute。</p><h3 id="v-show"><code>v-show</code></h3><p>另一个用于根据条件展示元素的选项是<code>v-show</code>指令：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;ok&quot;</span>&gt;</span>Hello!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p>与<code>v-if</code>不同的是，<code>v-show</code>的元素始终会被渲染并保留在DOM中，其只是简单地切换元素的CSS property <code>display</code>。</p><p>注意：<strong><code>v-show</code>不支持<code>&lt;template&gt;</code>元素，也不支持`<code>v-else</code></strong>。</p><h3 id="v-if-vs-v-show"><code>v-if</code> VS <code>v-show</code></h3><ul><li><p><code>v-if</code> 是真正的条件渲染，它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。</p></li><li><p><code>v-if</code> 是惰性的：<strong>若在初始渲染时条件为假，则什么也不做。直至条件第一次变为真时，才会开始渲染条件块。</strong></p></li><li><p>而<code>v-show</code><strong>不管初始条件是什么，元素总是会被渲染，并且只是简单地基于CSS进行切换。</strong></p></li></ul><p>一般来说，<code>v-if</code> 有更高的切换开销，<code>v-show</code>有更高的初始渲染开销。<strong>因此若需要非常频繁地切换，则使用<code>v-show</code>；若在运行时条件很少改变，则使用<code>v-if</code> 。</strong></p><h3 id="v-if-与v-for一起使用"><code>v-if</code> 与<code>v-for</code>一起使用</h3><p>不推荐同时使用<code>v-if</code> 和<code>v-for</code>。</p><p>当<code>v-if</code> 和<code>v-for</code>一起使用时，<code>v-for</code> 具有比<code>v-if</code> 更高的优先级。这意味着<code>v-if</code>将分别重复运行于每个<code>v-for</code>循环中。当只想为部分项渲染节点时，这种优先节点十分有用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;todo in todos&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;!todo.isComplete&quot;</span>&gt;</span>&#123;&#123;todo&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面的代码只渲染未完成的todo。</p><p>而若是想要有条件地跳过循环的执行，则可以将<code>v-if</code>置于外层元素（或<code>&lt;template&gt;</code>）上：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">v-if</span>=<span class="string">&quot;todos.length&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;todo in todos&quot;</span>&gt;</span>&#123;&#123;todo&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else</span>&gt;</span>No todos left!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">前端,Vue.js</summary>
    
    
    
    <category term="学习笔记" scheme="http://tangmenjue.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="前端" scheme="http://tangmenjue.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="前端框架" scheme="http://tangmenjue.top/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="Vue.js" scheme="http://tangmenjue.top/tags/Vue-js/"/>
    
    <category term="前端" scheme="http://tangmenjue.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>前端框架之Vue.js（一）</title>
    <link href="http://tangmenjue.top/2022/11/03/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://tangmenjue.top/2022/11/03/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2022-11-03T03:30:59.000Z</published>
    <updated>2022-11-03T03:30:59.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue.js基础">Vue.js基础</h1><p>Vue是一套用于构建用户界面的渐进式框架。与其他大型框架不同的是，Vue被设计为可以自底向上逐层应用。Vue的核心库只关注视图层，易于上手且便于与第三方库或既有项目结合。</p><p>Vue不支持IE8及以下的版本，它支持所有兼容ECMA Script 5的浏览器。</p><h2 id="安装">安装</h2><h3 id="直接用script引入">直接用<code>&lt;script&gt;</code>引入</h3><p>若要在现有站点中使用Vue，可以通过<code>&lt;script&gt;</code>元素在页面中使用。</p><ul><li><p>开发环境版本，包含了有帮助的命令行警告：</p><p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p></li><li><p>生产环境版本，优化了尺寸和速度。在站点上包含Vue时要指定版本号：</p><p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p></li></ul><h3 id="使用npm安装">使用npm安装</h3><p>直接用<code>&lt;script&gt;</code>引入vue的方法有一些局限性，若要构建更复杂的应用程序，需要使用npm软件包和脚手架CLI。在此之前，需要安装node.js 8.11及以上的版本，安装有包管理器npm。</p><p>在cmd里使用node.js的<code>npm</code>命令安装Vue：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue</span><br></pre></td></tr></table></figure><p>在cmd里使用node.js的<code>npm</code>命令安装脚手架CLI：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install --global @vue/cli</span><br><span class="line">若安装不上使用下面命令进行安装</span><br><span class="line">cnpm install -g @vue/cli</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>不推荐新手直接使用<code>vue-cli</code>，尤其是还不熟悉基于Node.js的构建工具时。</p><h3 id="vue-devtools">Vue Devtools</h3><p>在使用vue时，推荐在浏览器上安装 <a href="https://github.com/vuejs/vue-devtools#vue-devtools">Vue Devtools</a>。它允许在一个更友好的界面中审查和调试 Vue 应用。</p><h2 id="声明式渲染">声明式渲染</h2><p>Vue.js的核心是一个允许采用简洁的模板语法来声明式地将数据渲染进DOM系统。</p><p>新建一个html文件，编写以下代码后运行，即可创建第一个Vue应用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123;message&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> app=<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">message</span>:<span class="string">&#x27;Hello Vue!&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--运行结果如下：--&gt;</span></span><br><span class="line">Hello Vue!</span><br></pre></td></tr></table></figure><p>创建应用的过程看起来与渲染一个字符串模板类似。现在数据和DOM已经被建立了管理，所有东西都是响应式的。</p><p>在运行代码的浏览器上按F12打开开发人员工具，选择控制台（后续简称为JavaScript控制台），修改<code>app.message</code>的值，即可看到浏览器中也会及时更新显示的值：</p><p><img src="/2022/11/03/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E4%B8%80%EF%BC%89/1.png"></p><p>一个Vue应用会将其挂载到一个DOM元素上（上述代码中是<code>#app</code>），然后对其进行完全控制。</p><p>除了文本插值，还可以绑定元素attribute如下所示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123;message&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app-2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-bind:title</span>=<span class="string">&quot;message&quot;</span>&gt;</span></span><br><span class="line">            鼠标悬停几秒查看此处动态绑定的提示信息！</span><br><span class="line">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> app=<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">message</span>:<span class="string">&#x27;Hello Vue!&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> app2=<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&#x27;#app-2&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">message</span>:<span class="string">&#x27;页面加载于 &#x27;</span>+<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toLocaleString</span>()</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里的<code>v-bind</code> attribute被称为指令。指令带有前缀<code>v-</code>以表示它们是Vue提供的特殊attribute。它们会在渲染的DOM上应用特殊的响应式行为。在上述代码中，该实例的意思是：将这个元素节点的<code>title</code> atrribute和Vue实例的message property保持一致。</p><p>若再次打开JavaScript控制台，输入<code>app2.message='新消息'</code>，就会再次看到这个绑定了<code>title</code> attribute的HTML已经进行了更新。</p><h2 id="条件与循环">条件与循环</h2><p>可以利用条件判断来控制切换一个元素是否显示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app-3&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;seen&quot;</span>&gt;</span>现在你看到我了<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app3=<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&#x27;#app-3&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>:&#123;</span><br><span class="line">        <span class="attr">seen</span>:<span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>若打开JavaScript控制台，输入<code>app3.seen=false</code>，就会再次看到之前显示的消息消失了。</p><p>上述例子演示了不仅可以把数据绑定到DOM文本或attribute，还可以绑定到DOM结构。除此之外，Vue也提供了一个强大的过渡效果系统，可以在Vue插入/更新/移除元素时自动应用过渡效果。</p><p>还有很多其他指令，每个都有特殊的功能，如<code>v-for</code>指令可以绑定数组的数据来渲染一个项目列表：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app-4&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;todo in todos&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123;todo.text&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app4=<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&#x27;#app-4&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>:&#123;</span><br><span class="line">        <span class="attr">todos</span>:[</span><br><span class="line">            &#123; <span class="attr">text</span>:<span class="string">&#x27;学习 JavaScript&#x27;</span>&#125;,</span><br><span class="line">            &#123; <span class="attr">text</span>:<span class="string">&#x27;学习 Vue&#x27;</span>&#125;,</span><br><span class="line">            &#123; <span class="attr">text</span>:<span class="string">&#x27;搞个项目&#x27;</span>&#125;</span><br><span class="line">            ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在控制台里，输入<code>app4.todos.push(&#123; text: '新项目'&#125;)</code>，会发现列表最后添加了一个新项目。</p><h2 id="处理用户输入">处理用户输入</h2><p>为了让用户和应用进行交互，可以用<code>v-on</code>指令添加一个事件监听器，通过它调用在Vue实例中定义的方法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app-5&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;reverseMessage&quot;</span>&gt;</span>反转信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app5=<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&#x27;#app-5&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>:&#123;</span><br><span class="line">        <span class="attr">message</span>:<span class="string">&#x27;Hello Vue.js!&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>:&#123;</span><br><span class="line">        <span class="attr">reverseMessage</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">message</span>=<span class="variable language_">this</span>.<span class="property">message</span>.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>在reverseMessage方法中，虽然更新了应用状态，但没有触碰DOM，所有的DOM操作都有Vue来处理。</p><p>Vue还提供了<code>v-model</code>指令，可以实现表单输入和应用状态之间的双向绑定：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app-6&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app6=<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&#x27;#app-6&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>:&#123;</span><br><span class="line">        <span class="attr">message</span>:<span class="string">&#x27;Hello Vue!&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="组件化应用创建">组件化应用创建</h2><p>组件系统是Vue的另一个重要概念。它是一种抽象，允许使用小型、独立和通常可复用的组件构建大型应用。因此任意类型的应用界面都可以抽象为一个组件树。</p><p>在Vue里，一个组件本质上是一个拥有预定义选项的一个Vue实例。其中使用 <code>v-bind</code> 指令将待办项传到循环输出的每个组件中：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app-7&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--使用v-bind指令将待办项传到循环输出的每个组件中--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--为每个todo-item提供todo对象--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--todo对象是变量，其内容是动态的。同时也需要为每个组件提供一个&quot;key&quot;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">todo-item</span> <span class="attr">v-for</span>=<span class="string">&quot;item in groceryList&quot;</span> <span class="attr">v-bind:todo</span>=<span class="string">&quot;item&quot;</span> <span class="attr">v-bind:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">todo-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;todo-item&#x27;</span>,&#123;</span><br><span class="line">        <span class="comment">//todo-item组件接收一个名为todo的prop，类似于一个自定义attribute</span></span><br><span class="line">        <span class="attr">props</span>:[<span class="string">&#x27;todo&#x27;</span>],</span><br><span class="line">        <span class="attr">template</span>:<span class="string">&#x27;&lt;li&gt;&#123;&#123;todo.text&#125;&#125;&lt;/li&gt;&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">var</span> app7=<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">        <span class="attr">el</span>:<span class="string">&#x27;#app-7&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>:&#123;</span><br><span class="line">            <span class="attr">groceryList</span>:[</span><br><span class="line">                &#123; <span class="attr">id</span>:<span class="number">0</span>,<span class="attr">text</span>:<span class="string">&#x27;蔬菜&#x27;</span>&#125;,</span><br><span class="line">                &#123; <span class="attr">id</span>:<span class="number">1</span>,<span class="attr">text</span>:<span class="string">&#x27;奶酪&#x27;</span>&#125;,</span><br><span class="line">                &#123; <span class="attr">id</span>:<span class="number">2</span>,<span class="attr">text</span>:<span class="string">&#x27;薯条&#x27;</span>&#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>上述代码中，将应用分割成了两个更小的单元。子单元通过prop接口与负担也进行了良好的解耦，后续可以进一步改进<code>&lt;todo-item&gt;</code>组件，提供更为复杂的模板和逻辑，而不会影响到父单元。在一个大型应用中，将整个应用程序划分为组件是有必要的。</p><h3 id="组件与自定义元素的关系">组件与自定义元素的关系</h3><p>Vue组件是Web组件规范的一部分，其与自定义元素十分类似，但还是有关键的差别：</p><ul><li>Web Components规范已完成并通过，但未被所有浏览器原生实现。相比之下，Vue组件不需要任何polyfill，且在所有支持的浏览器中表现一致。必要时，Vue组件也可以包装与原生自定义元素之内</li><li>Vue组件提供了纯自定义元素所不具备的一些重要功能，最突出的是跨组件数据流、自定义事件通信以及构建工具集成。</li></ul><p>因此，虽然Vue内部没有使用自定义元素，但在应用使用自定义元素或以自定义元素发布时，仍然有着很好的操作性。Vue CLI脚手架 也支持将Vue组件构建成为原生的自定义元素。</p><h2 id="vue实例">Vue实例</h2><h3 id="创建一个vue实例">创建一个Vue实例</h3><p>每个Vue应用都是通过用Vue函数创建一个新的Vue实例开始的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var vm=new Vue(&#123;</span><br><span class="line">//选项</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在文档中经常会使用<code>vm</code>这个变量名表示Vue实例。当创建一个实例时，可以传入一个选项对象。</p><p>一个Vue应用由一个通过new Vue创建的根Vue实例，以及可选的嵌套的、可复用的组件树组成。所有的Vue组件都是Vue实例，并且接受相同的选项对象。</p><h4 id="数据与方法">数据与方法</h4><p>当一个Vue实例被创建时，它将data对象中的所有property加入到Vue的响应式系统中。当这些property的值发生改变时，视图将会产生响应， 即匹配更新为新的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">var</span> data=&#123;<span class="attr">a</span>:<span class="number">1</span>&#125;<span class="comment">//数据对象</span></span><br><span class="line">   <span class="keyword">var</span> vm=<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;<span class="comment">//该对象被加入到一个Vue实例中</span></span><br><span class="line">       <span class="attr">data</span>:data </span><br><span class="line">   &#125;)</span><br><span class="line">   <span class="comment">//获得这个实例上的property,返回源数据中对应的字段</span></span><br><span class="line">   vm.<span class="property">a</span>==data.<span class="property">a</span></span><br><span class="line"><span class="comment">//设置property会影响到原始数据</span></span><br><span class="line">   vm.<span class="property">a</span>=<span class="number">2</span></span><br><span class="line">   data.<span class="property">a</span><span class="comment">//返回2</span></span><br><span class="line"><span class="comment">//反过来也一样</span></span><br><span class="line">   data.<span class="property">a</span>=<span class="number">3</span></span><br><span class="line">   vm.<span class="property">a</span><span class="comment">//返回3</span></span><br></pre></td></tr></table></figure><p>当这些数据改变时，视图会进行重渲染。<strong>只有当实例被创建时就已经存在与property才是响应式的。</strong>若后面才添加一个新的property</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vm.<span class="property">b</span>=<span class="string">&#x27;h1&#x27;</span></span><br></pre></td></tr></table></figure><p>那么对<code>b</code>的改动将不会触发任何视图的更新。若是知道后续是需要一个property，但一开始时它为空或不存在，则需要设置一些初始值以保证视图能同步更新：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">data&#123;</span><br><span class="line">    <span class="attr">newTodoText</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">visitVount</span>:<span class="number">0</span>,</span><br><span class="line">    <span class="attr">hideCompletedTodos</span>:<span class="literal">false</span>,</span><br><span class="line">    <span class="attr">todos</span>:[],</span><br><span class="line">    <span class="attr">error</span>:<span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>Object.freeze()</code>会阻止修改现有的property，也意味着响应系统无法再追踪其变化：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;foo&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--这里的foo不会更新！--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;foo = &#x27;baz&#x27;&quot;</span>&gt;</span>Change it <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> obj=&#123;</span><br><span class="line">     <span class="attr">foo</span>:<span class="string">&#x27;bar&#x27;</span></span><br><span class="line"> &#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">freeze</span>(obj)</span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> app8=<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">     <span class="attr">el</span>:<span class="string">&#x27;#app-8&#x27;</span>,</span><br><span class="line">     <span class="attr">data</span>:obj</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><p>除了数据property，Vue实例还暴露了一些有用的实例property与方法。它们都有前缀<code>$</code>，以便与用户定义的property区分开来：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vm.<span class="property">$data</span>===data<span class="comment">//返回true</span></span><br><span class="line">vm.<span class="property">$el</span>===<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;example&#x27;</span>)<span class="comment">//返回true</span></span><br><span class="line">$watch是一个实例方法</span><br><span class="line">vm.$watch(<span class="string">&#x27;a&#x27;</span>,<span class="keyword">function</span>(<span class="params">newValue,oldValue</span>)&#123;</span><br><span class="line">    <span class="comment">//这个回调将在&#x27;vm.a&#x27;改变后调用</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="实例生命周期钩子">实例生命周期钩子</h3><p>每个Vue实例在被创建时都要经过一系列的初始化过程，如设置数据监听、编译模板、将实例挂载到DOM并在数据变化时更新DOM等。同时在这个过程中也会运行一些名为<strong>生命周期钩子</strong>的函数。</p><p>如<code>created</code>钩子可以用来在一个实例被创建之后执行代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">        <span class="attr">data</span>:&#123;</span><br><span class="line">            <span class="attr">a</span>:<span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">created</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a is: &#x27;</span>+<span class="variable language_">this</span>.<span class="property">a</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="comment">//返回a is: 1</span></span><br></pre></td></tr></table></figure><p>也有一些其他的钩子，在实例生命周期的不同阶段被调用，如<code>mounted</code>、<code>updated</code>和<code>destroyed</code>。生命周期钩子的<code>this</code>上下文指向调用它的Vue实例。</p><p><strong>注意：不要在选项property或回调上使用箭头函数</strong>，如<code>created:()=&gt;console.log(this.a)</code>或是<code>vm.$watch('a',newValue=&gt;this.myMethod())</code><strong>。因为箭头函数并没有<code>this</code></strong>，<code>this</code>作为变量一直向上级词法作用域查找，直至找到为止，<strong>经常会报错。</strong></p><h3 id="生命周期图示">生命周期图示</h3><p><img src="/2022/11/03/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E4%B8%80%EF%BC%89/2.png"></p>]]></content>
    
    
    <summary type="html">前端,Vue.js</summary>
    
    
    
    <category term="学习笔记" scheme="http://tangmenjue.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="前端" scheme="http://tangmenjue.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="前端框架" scheme="http://tangmenjue.top/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="Vue.js" scheme="http://tangmenjue.top/tags/Vue-js/"/>
    
    <category term="前端" scheme="http://tangmenjue.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>前端三件套之JavaScript（三）</title>
    <link href="http://tangmenjue.top/2022/11/01/%E5%89%8D%E7%AB%AF%E4%B8%89%E4%BB%B6%E5%A5%97%E4%B9%8BJavaScript%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>http://tangmenjue.top/2022/11/01/%E5%89%8D%E7%AB%AF%E4%B8%89%E4%BB%B6%E5%A5%97%E4%B9%8BJavaScript%EF%BC%88%E4%B8%89%EF%BC%89/</id>
    <published>2022-11-01T09:33:51.000Z</published>
    <updated>2022-11-01T09:33:51.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="标准对象">标准对象</h1><p>在JavaScript的世界里，一切皆是对象。但某些对象与其他对象不太一样。为了区分对象的类型，通常用<code>typeof</code>操作符获取对象的类型：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="number">123</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="title class_">NaN</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="string">&#x27;str&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">true</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">undefined</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="title class_">Math</span>.<span class="property">abs</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">null</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> []);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> &#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">number</span></span><br><span class="line"><span class="comment">number</span></span><br><span class="line"><span class="comment">string</span></span><br><span class="line"><span class="comment">boolean</span></span><br><span class="line"><span class="comment">undefined</span></span><br><span class="line"><span class="comment">function</span></span><br><span class="line"><span class="comment">object</span></span><br><span class="line"><span class="comment">object</span></span><br><span class="line"><span class="comment">object</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>注意，null、Array的类型都是object，若用<code>typeof</code>将无法区分出null、Array和object。</p><p><strong>包装对象</strong></p><p>除了这些类型外，JavaScript还提供了包装对象。<code>Number</code>、<code>boolean</code>和<code>string</code>都有包装对象。包装对象用new创建：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n=<span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">123</span>);</span><br><span class="line"><span class="keyword">var</span> b=<span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="literal">true</span>);</span><br><span class="line"><span class="keyword">var</span> s=<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;str&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s);</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">Number (123)</span></span><br><span class="line"><span class="comment">Boolean (true)</span></span><br><span class="line"><span class="comment">String (&#x27;str&#x27;)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>虽然包装对象看上去和原来的值一样，但类型已经变为object了，用<code>===</code>与原始值比较会返回<code>false</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n=<span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">123</span>);</span><br><span class="line"><span class="keyword">var</span> b=<span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="literal">true</span>);</span><br><span class="line"><span class="keyword">var</span> s=<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;str&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n===<span class="number">123</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b===<span class="literal">true</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s===<span class="string">&#x27;str&#x27;</span>);</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">false</span></span><br><span class="line"><span class="comment">false</span></span><br><span class="line"><span class="comment">false</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>因此，要注意以下几点：</p><ul><li>不要使用<code>new Number()</code>、<code>new Boolean()</code>、<code>new String()</code>创建包装对象</li><li>用<code>parseInt()</code>或<code>parseFloat()</code>来转换任意类型的<code>number</code></li><li>用<code>Sting()</code>来转换任意类型到<code>string</code>，或直接调用某个对象的<code>toString()</code>方法，只有<code>null</code>和<code>undedined</code>没有<code>toString()</code>方法，number对象调用<code>toString()</code>要写成：<code>123..toString();</code>或<code>(123).toStirng();</code></li><li>通常不用把任意类型转换为<code>boolean</code>再判断</li><li>用<code>typeof</code>可以判断出<code>number</code>、<code>boolean</code>、<code>string</code>、<code>function</code>和<code>undefined</code></li><li>判断Array要用<code>Array.isArray(arr)</code></li><li>判断null要用<code>myvar===null</code></li><li>判断某个全局变量是否存在用<code>typeof window.myvar==='undefined'</code></li><li>函数内部判断某个变量是否存在用<code>typeof myvar==='undefined'</code></li></ul><h2 id="date">Date</h2><p>在JavaScript里，Date对象用来表示日期和时间。</p><p>用Date获取系统时间：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> now=<span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(now);<span class="comment">//显示当前的时间</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(now.<span class="title function_">getFullYear</span>());<span class="comment">//显示今年</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(now.<span class="title function_">getMonth</span>());<span class="comment">//显示这个月，月份范围是0~11，10表示11月</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(now.<span class="title function_">getDate</span>());<span class="comment">//显示今天多少号</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(now.<span class="title function_">getDay</span>());<span class="comment">//显示今天星期几</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(now.<span class="title function_">getHours</span>());<span class="comment">//显示现在几时，24小时制</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(now.<span class="title function_">getMinutes</span>());<span class="comment">//显示现在是多少分钟</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(now.<span class="title function_">getSeconds</span>());<span class="comment">//显示现在是多少秒</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(now.<span class="title function_">getMilliseconds</span>());<span class="comment">//显示现在是多少毫秒</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(now.<span class="title function_">getTime</span>());<span class="comment">//以number形式表示的时间戳</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">Tue Nov 01 2022 11:01:14 GMT+0800 (中国标准时间)</span></span><br><span class="line"><span class="comment">2022</span></span><br><span class="line"><span class="comment">10</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">11</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">14</span></span><br><span class="line"><span class="comment">217</span></span><br><span class="line"><span class="comment">1667271674217</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>当前时间是浏览器从本机操作系统获取的时间所以不一定准确。</p><p>若要创建一个指定日期和时间的Date对象，可以用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> d=<span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2015</span>,<span class="number">5</span>,<span class="number">19</span>,<span class="number">20</span>,<span class="number">15</span>,<span class="number">30</span>,<span class="number">123</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d);</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">Fri Jun 19 2015 20:15:30 GMT+0800 (中国标准时间)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>第二种创建一个指定日期和时间的方法是解析一个符号ISO 8601格式的字符串：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> d=<span class="title class_">Date</span>.<span class="title function_">parse</span>(<span class="string">&#x27;2015-06-24T19:49:22.875+08:00&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d);<span class="comment">//返回时间戳</span></span><br><span class="line"><span class="keyword">var</span> dd=<span class="keyword">new</span> <span class="title class_">Date</span>(d)<span class="comment">//时间戳转Date</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dd);</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">1435146562875</span></span><br><span class="line"><span class="comment">Wed Jun 24 2015 19:49:22 GMT+0800 (中国标准时间)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="时区">时区</h2><p>Date对象表示的时间总是按浏览器所在时区显示的，不过既可以显示本地时间，也可以显示调整后的UTC时间：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> d=<span class="title class_">Date</span>.<span class="title function_">parse</span>(<span class="string">&#x27;2015-06-24T19:49:22.875+08:00&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d);</span><br><span class="line"><span class="keyword">var</span> dd=<span class="keyword">new</span> <span class="title class_">Date</span>(d)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dd.<span class="title function_">toLocaleString</span>());<span class="comment">//显示的字符串与操作系统设定的格式有关</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dd.<span class="title function_">toUTCString</span>());<span class="comment">//UTC时间与本地时间相差8小时</span></span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">1435146562875</span></span><br><span class="line"><span class="comment">2015/6/24 19:49:22</span></span><br><span class="line"><span class="comment">Wed, 24 Jun 2015 11:49:22 GMT</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>获取当前时间戳：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="title class_">Date</span>.<span class="property">now</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Date</span>.<span class="title function_">now</span>());</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;<span class="comment">//老版本IE没有now()方法</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">1667272652007</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="练习题">练习题</h3><p>小明为了和女友庆祝情人节，特意制作了网页，并提前预定了法式餐厅。小明打算用JavaScript给女友一个惊喜留言,结果女友并未出现。小明非常郁闷，请你帮忙分析他的JavaScript代码有何问题：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> today = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="keyword">if</span> (today.<span class="title function_">getMonth</span>() === <span class="number">2</span> &amp;&amp; today.<span class="title function_">getDate</span>() === <span class="number">14</span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;亲爱的，我预定了晚餐，晚上6点在餐厅见！&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改后的代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//分析：JavaScript中getMonth() 实际时间为0~11，数值为2时，实际月份为3。</span></span><br><span class="line"><span class="keyword">var</span> today = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="keyword">if</span> (today.<span class="title function_">getMonth</span>() === <span class="number">1</span> &amp;&amp; today.<span class="title function_">getDate</span>() === <span class="number">14</span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;亲爱的，我预定了晚餐，晚上6点在餐厅见！&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="regexp"><code>RegExp</code></h2><p>JavaScript有两种方式创建一个正则表达式：</p><p>第一种是直接通过<code>/正则表达式/</code>写出来，第二种是通过<code>new RegExp(正则表达式)</code>创建一个RegExp对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> re1=<span class="regexp">/ABC\-001/</span>;</span><br><span class="line"><span class="keyword">var</span> re2=<span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&#x27;ABC\\-001&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(re1);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(re2);</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">/ABC\-001/</span></span><br><span class="line"><span class="comment">/ABC\-001/</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>判断正则表达式是否匹配：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> re=<span class="regexp">/^\d&#123;3&#125;\-\d&#123;3,8&#125;$/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(re.<span class="title function_">test</span>(<span class="string">&#x27;010-12345&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(re.<span class="title function_">test</span>(<span class="string">&#x27;010-1234x&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(re.<span class="title function_">test</span>(<span class="string">&#x27;010 12345&#x27;</span>));</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment">false</span></span><br><span class="line"><span class="comment">false</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="切分字符串">切分字符串</h3><p>用正则表达式切分字符串：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a b  c , ; ; d&#x27;</span>.<span class="title function_">split</span>(<span class="regexp">/[\s\,\;]+/</span>));</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">(4) [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="分组">分组</h3><p>正则表达式用<code>()</code>表示要提取的分组，可以提取子串。若正则表达式种定义了组，就可以在<code>RegExp</code>对象上用<code>exec()</code>方法提取出子串来：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> re=<span class="regexp">/^(\d&#123;3&#125;)-(\d&#123;3,8&#125;)$/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(re.<span class="title function_">exec</span>(<span class="string">&#x27;010-12345&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(re.<span class="title function_">exec</span>(<span class="string">&#x27;010 12345&#x27;</span>));</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">(3) [&#x27;010-12345&#x27;, &#x27;010&#x27;, &#x27;12345&#x27;, index: 0, input: &#x27;010-12345&#x27;, groups: undefined]</span></span><br><span class="line"><span class="comment">null</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><code>exec()</code>方法在匹配成功后会返回一个Array，第一个元素是正则表达式匹配到的整个字符串，后面的字符串表示匹配成功的子串。在匹配失败是返回<code>null</code>。</p><p>正则表达式可以直接识别合法的世界，但无法做到完全识别日期：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> re1=<span class="regexp">/^(0[0-9]|1[0-9]|2[0-3]|[0-9])\:(0[0-9]|1[0-9]|2[0-0]|3[0-9]|4[0-9]|5[0-9]|[0-9])\:(0[0-9]|1[0-9]|2[0-0]|3[0-9]|4[0-9]|5[0-9]|[0-9])$/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(re1.<span class="title function_">exec</span>(<span class="string">&#x27;11:43:59&#x27;</span>));</span><br><span class="line"><span class="keyword">var</span> re2=<span class="regexp">/^(0[1-9]|1[0-2]|[0-9])-(0[1-9]|1[0-9]|2[0-9]|3[0-1]|[0-9])$/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(re2.<span class="title function_">exec</span>(<span class="string">&#x27;2-30&#x27;</span>));<span class="comment">//2-30号不存在，应该返回null</span></span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">(4) [&#x27;11:43:59&#x27;, &#x27;11&#x27;, &#x27;43&#x27;, &#x27;59&#x27;, index: 0, input: &#x27;11:43:59&#x27;, groups: undefined]</span></span><br><span class="line"><span class="comment">(3) [&#x27;2-30&#x27;, &#x27;2&#x27;, &#x27;30&#x27;, index: 0, input: &#x27;2-30&#x27;, groups: undefined]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="贪婪匹配">贪婪匹配</h3><p>正则匹配默认是贪婪匹配。在需要培贪婪匹配的语句后加问号<code>?</code>，可以让该语句采用非贪婪匹配。</p><h3 id="全局搜索">全局搜索</h3><p>JavaScript的正则表达式有几个特殊的标志，最常用的是全局匹配<code>g</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s=<span class="string">&#x27;JavaScript,VBScript,JScript and ECMAScript&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> re=<span class="regexp">/[a-zA-Z]+Script/g</span>;<span class="comment">//使用全局匹配</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(re.<span class="title function_">exec</span>(s));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(re.<span class="property">lastIndex</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(re.<span class="title function_">exec</span>(s));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(re.<span class="property">lastIndex</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(re.<span class="title function_">exec</span>(s));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(re.<span class="property">lastIndex</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(re.<span class="title function_">exec</span>(s));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(re.<span class="property">lastIndex</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(re.<span class="title function_">exec</span>(s));<span class="comment">//直至结束都没有匹配到</span></span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">(1) [&#x27;JavaScript&#x27;, index: 0, input: &#x27;JavaScript,VBScript,JScript and ECMAScript&#x27;, groups: undefined]</span></span><br><span class="line"><span class="comment">10</span></span><br><span class="line"><span class="comment">(1) [&#x27;VBScript&#x27;, index: 11, input: &#x27;JavaScript,VBScript,JScript and ECMAScript&#x27;, groups: undefined]</span></span><br><span class="line"><span class="comment">19</span></span><br><span class="line"><span class="comment">(1) [&#x27;JScript&#x27;, index: 20, input: &#x27;JavaScript,VBScript,JScript and ECMAScript&#x27;, groups: undefined]</span></span><br><span class="line"><span class="comment">27</span></span><br><span class="line"><span class="comment">(1) [&#x27;ECMAScript&#x27;, index: 32, input: &#x27;JavaScript,VBScript,JScript and ECMAScript&#x27;, groups: undefined]</span></span><br><span class="line"><span class="comment">42</span></span><br><span class="line"><span class="comment">null</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>JavaScript的正则表达式还可以指定<code>i</code>标志，表示忽略大小写；<code>m</code>标志表示执行多行匹配。</p><h3 id="练习题-1">练习题</h3><p>请尝试写一个验证Email地址的正则表达式。版本一应该可以验证出类似的Email：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> re = <span class="regexp">/^([a-z\.0-9])+@+([a-z0-9]+\.+[a-z]&#123;3&#125;)$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试:</span></span><br><span class="line"><span class="keyword">var</span></span><br><span class="line">    i,</span><br><span class="line">    success = <span class="literal">true</span>,</span><br><span class="line">    should_pass = [<span class="string">&#x27;someone@gmail.com&#x27;</span>, <span class="string">&#x27;bill.gates@microsoft.com&#x27;</span>, <span class="string">&#x27;tom@voyager.org&#x27;</span>, <span class="string">&#x27;bob2015@163.com&#x27;</span>],</span><br><span class="line">    should_fail = [<span class="string">&#x27;test#gmail.com&#x27;</span>, <span class="string">&#x27;bill@microsoft&#x27;</span>, <span class="string">&#x27;bill%gates@ms.com&#x27;</span>, <span class="string">&#x27;@voyager.org&#x27;</span>];</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; should_pass.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!re.<span class="title function_">test</span>(should_pass[i])) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;测试失败: &#x27;</span> + should_pass[i]);</span><br><span class="line">        success = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; should_fail.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (re.<span class="title function_">test</span>(should_fail[i])) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;测试失败: &#x27;</span> + should_fail[i]);</span><br><span class="line">        success = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (success) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;测试通过!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">测试成功!</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>版本二可以验证并提取出带名字的Email地址：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> re = <span class="regexp">/^&lt;?([a-zA-Z]+\s?[a-zA-Z]+)&gt;?\s?([a-zA-Z]*@[a-zA-Z]+\.[a-zA-Z]+)$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试:</span></span><br><span class="line"><span class="keyword">var</span> r = re.<span class="title function_">exec</span>(<span class="string">&#x27;&lt;Tom Paris&gt; tom@voyager.org&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> (r === <span class="literal">null</span> || r.<span class="title function_">toString</span>() !== [<span class="string">&#x27;&lt;Tom Paris&gt; tom@voyager.org&#x27;</span>, <span class="string">&#x27;Tom Paris&#x27;</span>, <span class="string">&#x27;tom@voyager.org&#x27;</span>].<span class="title function_">toString</span>()) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;测试失败!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;测试成功!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">测试成功!</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="json">JSON</h2><p>JSON是一种数据交换格式，字符集必须是UTF-8。为了统一解析，JSON的字符串规定必须用双引号<code>""</code>，Object的键也必须用双引号<code>""</code>。</p><p>JavaScript内置了JSON的解析，把任何JavaScript对象序列化成一个JSON格式的字符串，才能通过网络传递给其他计算机。</p><h3 id="序列化">序列化</h3><p>用<code>JSON.stringify()</code>把JavaScript对象序列化成JSON格式的字符串：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person=&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">18</span>,</span><br><span class="line">    <span class="attr">gender</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="attr">height</span>:<span class="number">1.65</span>,</span><br><span class="line">    <span class="attr">grade</span>:<span class="literal">null</span>,</span><br><span class="line">    <span class="string">&#x27;middel-school&#x27;</span>:<span class="string">&#x27;No.1 Middle School&#x27;</span>,</span><br><span class="line">    <span class="attr">skills</span>:[<span class="string">&#x27;JavaScript&#x27;</span>,<span class="string">&#x27;Java&#x27;</span>,<span class="string">&#x27;Python&#x27;</span>,<span class="string">&#x27;Lisp&#x27;</span>]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> s=<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(person);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s);</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">&#123;&quot;name&quot;:&quot;zhangsan&quot;,&quot;age&quot;:18,&quot;gender&quot;:true,&quot;height&quot;:1.65,&quot;grade&quot;:null,&quot;middel-school&quot;:&quot;No.1 Middle School&quot;,&quot;skills&quot;:[&quot;JavaScript&quot;,&quot;Java&quot;,&quot;Python&quot;,&quot;Lisp&quot;]&#125;*/</span></span><br></pre></td></tr></table></figure><p><code>JSON.stringify()</code>还可以通过参数来控制按缩进输出</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s=<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(person,<span class="literal">null</span>,<span class="string">&#x27; &#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s);</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment"> &quot;name&quot;: &quot;zhangsan&quot;,</span></span><br><span class="line"><span class="comment"> &quot;age&quot;: 18,</span></span><br><span class="line"><span class="comment"> &quot;gender&quot;: true,</span></span><br><span class="line"><span class="comment"> &quot;height&quot;: 1.65,</span></span><br><span class="line"><span class="comment"> &quot;grade&quot;: null,</span></span><br><span class="line"><span class="comment"> &quot;middel-school&quot;: &quot;No.1 Middle School&quot;,</span></span><br><span class="line"><span class="comment"> &quot;skills&quot;: [</span></span><br><span class="line"><span class="comment">  &quot;JavaScript&quot;,</span></span><br><span class="line"><span class="comment">  &quot;Java&quot;,</span></span><br><span class="line"><span class="comment">  &quot;Python&quot;,</span></span><br><span class="line"><span class="comment">  &quot;Lisp&quot;</span></span><br><span class="line"><span class="comment"> ]</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br></pre></td></tr></table></figure><p>其第二个参数用于控制如何筛选对象的键值，如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s=<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(person,[<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;skills&#x27;</span>],<span class="string">&#x27; &#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s);</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment"> &quot;name&quot;: &quot;zhangsan&quot;,</span></span><br><span class="line"><span class="comment"> &quot;skills&quot;: [</span></span><br><span class="line"><span class="comment">  &quot;JavaScript&quot;,</span></span><br><span class="line"><span class="comment">  &quot;Java&quot;,</span></span><br><span class="line"><span class="comment">  &quot;Python&quot;,</span></span><br><span class="line"><span class="comment">  &quot;Lisp&quot;</span></span><br><span class="line"><span class="comment"> ]</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br></pre></td></tr></table></figure><p>还可以往第二个参数里传入一个函数，使得对象的每个键值对都会被函数先处理：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">convert</span>(<span class="params">key,value</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> value===<span class="string">&#x27;string&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> value.<span class="title function_">toUpperCase</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> s=<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(person,[<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;skills&#x27;</span>],<span class="string">&#x27; &#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s);</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">E:\node.exe .\test.js</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment"> &quot;name&quot;: &quot;ZHANGSAN&quot;,</span></span><br><span class="line"><span class="comment"> &quot;age&quot;: 18,</span></span><br><span class="line"><span class="comment"> &quot;gender&quot;: true,</span></span><br><span class="line"><span class="comment"> &quot;height&quot;: 1.65,</span></span><br><span class="line"><span class="comment"> &quot;grade&quot;: null,</span></span><br><span class="line"><span class="comment"> &quot;middel-school&quot;: &quot;NO.1 MIDDLE SCHOOL&quot;,</span></span><br><span class="line"><span class="comment"> &quot;skills&quot;: [</span></span><br><span class="line"><span class="comment">  &quot;JAVASCRIPT&quot;,</span></span><br><span class="line"><span class="comment">  &quot;JAVA&quot;,</span></span><br><span class="line"><span class="comment">  &quot;PYTHON&quot;,</span></span><br><span class="line"><span class="comment">  &quot;LISP&quot;</span></span><br><span class="line"><span class="comment"> ]</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br></pre></td></tr></table></figure><p>除此之外，还可以给person对象定义一个<code>toJSON()</code>的方法，直接返回序列化数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person=&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">18</span>,</span><br><span class="line">    <span class="attr">gender</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="attr">height</span>:<span class="number">1.65</span>,</span><br><span class="line">    <span class="attr">grade</span>:<span class="literal">null</span>,</span><br><span class="line">    <span class="string">&#x27;middel-school&#x27;</span>:<span class="string">&#x27;No.1 Middle School&#x27;</span>,</span><br><span class="line">    <span class="attr">skills</span>:[<span class="string">&#x27;JavaScript&#x27;</span>,<span class="string">&#x27;Java&#x27;</span>,<span class="string">&#x27;Python&#x27;</span>,<span class="string">&#x27;Lisp&#x27;</span>],</span><br><span class="line">    <span class="attr">toJSON</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>&#123;</span><br><span class="line">            <span class="string">&#x27;Name&#x27;</span>:<span class="variable language_">this</span>.<span class="property">name</span>,</span><br><span class="line">            <span class="string">&#x27;Age&#x27;</span>:<span class="variable language_">this</span>.<span class="property">age</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> s=<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(person);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s);</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">&#123;&quot;Name&quot;:&quot;zhangsan&quot;,&quot;Age&quot;:18&#125;*/</span></span><br></pre></td></tr></table></figure><h3 id="反序列化">反序列化</h3><p>把一个JSON格式的字符串，用<code>JSON.parse()</code>把它变成一个JavaScript对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="string">&#x27;[1,2,3,true]&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="string">&#x27;&#123;&quot;name&quot;:&quot;zhangsan&quot;,&quot;age&quot;:14&#125;&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="string">&#x27;true&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="string">&#x27;123.45&#x27;</span>));</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">(4) [1, 2, 3, true]</span></span><br><span class="line"><span class="comment">&#123;name: &#x27;zhangsan&#x27;, age: 14&#125;</span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment">123.45*/</span></span><br></pre></td></tr></table></figure><p><code>JSON.parse()</code>还可以接收一个函数，用来转换解析出的属性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=<span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="string">&#x27;&#123;&quot;name&quot;:&quot;zhangsan&quot;,&quot;age&quot;:14&#125;&#x27;</span>,<span class="keyword">function</span>(<span class="params">key,value</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span> (key===<span class="string">&#x27;name&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> value+<span class="string">&#x27; classmate&#x27;</span>;</span><br><span class="line">    &#125;        </span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj));</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">&#123;&quot;name&quot;:&quot;zhangsan classmate&quot;,&quot;age&quot;:14&#125;*/</span></span><br></pre></td></tr></table></figure><h1 id="面向对象编程">面向对象编程</h1><p>在JavaScript种不区分类和实例的概念，而是通过原型(prototype)来实现面向对象编程。所谓的继承关系是把对象的原型指向另一个对象。</p><p>以下是创建原型继承的一种方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Student</span>=&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;Robot&#x27;</span>,</span><br><span class="line">    <span class="attr">heighe</span>:<span class="number">1.2</span>,</span><br><span class="line">    <span class="attr">run</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>+<span class="string">&#x27; is running...&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createStudent</span>(<span class="params">name</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> s=<span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Student</span>);</span><br><span class="line">    s.<span class="property">name</span>=name;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> zhangsan=<span class="title function_">createStudent</span>(<span class="string">&#x27;ZhangSan&#x27;</span>);</span><br><span class="line">zhangsan.<span class="title function_">run</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(zhangsan.<span class="property">__proto__</span>===<span class="title class_">Student</span>);</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">ZhangSan is running...</span></span><br><span class="line"><span class="comment">true*/</span></span><br></pre></td></tr></table></figure><h2 id="创建对象">创建对象</h2><p>除了直接用<code>&#123;...&#125;</code>创建一个对象外，JavaScript还可以用构造函数的方法来创建对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params">name</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span>=name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">hello</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello, &#x27;</span>+<span class="variable language_">this</span>.<span class="property">name</span>+<span class="string">&#x27;!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用构造函数，返回一个对象</span></span><br><span class="line"><span class="keyword">var</span> zhangsan=<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&#x27;ZhangSan&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(zhangsan.<span class="property">name</span>);</span><br><span class="line">zhangsan.<span class="title function_">hello</span>();</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">ZhangSan</span></span><br><span class="line"><span class="comment">Hello, ZhangSan!*/</span></span><br></pre></td></tr></table></figure><p>注意：若不写<code>new</code>，<code>student</code>就是一个普通函数，它返回<code>undefined</code>，若写了<code>new</code>，<code>student</code>就是一个构造函数，它绑定的this指向新创建的对象，并默认返回<code>this</code>。</p><p>用<code>new Student()</code>创建的对象还从原型上获得了一个<code>constructor</code>属性，它指向函数<code>Student</code>本身：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(zhangsan.<span class="property">constructor</span>===<span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span>===<span class="title class_">Student</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(zhangsan)===<span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>上述代码主要描述以下关系：</p><p><img src="/2022/11/01/%E5%89%8D%E7%AB%AF%E4%B8%89%E4%BB%B6%E5%A5%97%E4%B9%8BJavaScript%EF%BC%88%E4%B8%89%EF%BC%89/1.png"></p><p>若要让通过构造函数创建的对象共享一个<code>hello</code>函数，将函数放到这些对象共同的原型<code>Student.prototype</code>上即可：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params">name</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span>=name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">hello</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello, &#x27;</span>+<span class="variable language_">this</span>.<span class="property">name</span>+<span class="string">&#x27;!&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> zhangsan=<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&#x27;ZhangSan&#x27;</span>);</span><br><span class="line">zhangsan.<span class="title function_">hello</span>();</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">Hello, ZhangSan!</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><strong>构造函数的首字母应当大写，普通函数首字母应当小写。</strong></p><p>可以编写一个函数，在内部封装所有的<code>new</code>操作：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createStudent</span>(<span class="params">props</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Student</span>(props||&#123;&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习题-2">练习题</h3><p>请利用构造函数定义<code>Cat</code>，并让所有的Cat对象有一个<code>name</code>属性，并共享一个方法<code>say()</code>，返回字符串<code>'Hello, xxx!'</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Cat</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span>=name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Cat</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">say</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello, &#x27;</span>+<span class="variable language_">this</span>.<span class="property">name</span>+<span class="string">&#x27;!&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 测试:</span></span><br><span class="line"><span class="keyword">var</span> kitty = <span class="keyword">new</span> <span class="title class_">Cat</span>(<span class="string">&#x27;Kitty&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> doraemon = <span class="keyword">new</span> <span class="title class_">Cat</span>(<span class="string">&#x27;哆啦A梦&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> (kitty &amp;&amp; kitty.<span class="property">name</span> === <span class="string">&#x27;Kitty&#x27;</span></span><br><span class="line">    &amp;&amp; kitty.<span class="property">say</span></span><br><span class="line">    &amp;&amp; <span class="keyword">typeof</span> kitty.<span class="property">say</span> === <span class="string">&#x27;function&#x27;</span></span><br><span class="line">    &amp;&amp; kitty.<span class="title function_">say</span>() === <span class="string">&#x27;Hello, Kitty!&#x27;</span></span><br><span class="line">    &amp;&amp; kitty.<span class="property">say</span> === doraemon.<span class="property">say</span></span><br><span class="line">) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;测试通过!&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;测试失败!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">测试通过!</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="原型继承">原型继承</h2><p>JavaScript的原型继承实现方式为：</p><ol type="1"><li>定义新的构造函数，并在内部用<code>call()</code>调用希望“继承”的构造函数，并绑定<code>this</code>；</li><li>借助中间函数<code>F</code>实现原型链继承，最好通过封装的<code>inherits</code>函数完成；</li><li>继续在新的构造函数原型上定义新方法。</li></ol><p>现有一构造函数<code>Student</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Student的构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params">props</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span>=props.<span class="property">name</span>||<span class="string">&#x27;Unnamed&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">hello</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello, &#x27;</span>+<span class="variable language_">this</span>.<span class="property">name</span>+<span class="string">&#x27;!&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Student</code>的原型链如下：</p><p><img src="/2022/11/01/%E5%89%8D%E7%AB%AF%E4%B8%89%E4%BB%B6%E5%A5%97%E4%B9%8BJavaScript%EF%BC%88%E4%B8%89%EF%BC%89/1.png"></p><p>现在要基于<code>Student</code>扩展出<code>PrimaryStudent</code>。因此先定义新的构造函数<code>PrimaryStudent</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//新构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">PrimaryStudent</span>(<span class="params">props</span>)&#123;</span><br><span class="line">    <span class="title class_">Student</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>.<span class="property">props</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">grade</span>=props.<span class="property">grade</span>||<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用空函数<code>F</code>来修改原型链，使得<code>PrimaryStudent</code>指向<code>Student.prototype</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Student的构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params">props</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span>=props.<span class="property">name</span>||<span class="string">&#x27;Unnamed&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">hello</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello, &#x27;</span>+<span class="variable language_">this</span>.<span class="property">name</span>+<span class="string">&#x27;!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//新构造函数PrimaryStudent</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">PrimaryStudent</span>(<span class="params">props</span>)&#123;</span><br><span class="line">    <span class="title class_">Student</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>,props);<span class="comment">//调用Student构造函数，绑定this变量</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">grade</span>=props.<span class="property">grade</span>||<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//空函数F</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">F</span>(<span class="params"></span>)&#123;</span><br><span class="line">&#125;</span><br><span class="line">F.<span class="property"><span class="keyword">prototype</span></span>=<span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span>;<span class="comment">//将F的原型指向Student.prototype</span></span><br><span class="line"><span class="title class_">PrimaryStudent</span>.<span class="property"><span class="keyword">prototype</span></span>=<span class="keyword">new</span> <span class="title function_">F</span>();<span class="comment">//将PrimaryStudent的原型指向一个新的F对象</span></span><br><span class="line"><span class="title class_">PrimaryStudent</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span>=<span class="title class_">PrimaryStudent</span>;<span class="comment">//将PrimaryStudent原型的构造函数指向PrimaryStudent</span></span><br><span class="line"><span class="title class_">PrimaryStudent</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getGrade</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="comment">//在PrimaryStudent原型的构造函数上定义方法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">grade</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> lisi=<span class="keyword">new</span> <span class="title class_">PrimaryStudent</span>(&#123;<span class="comment">//创建lisi</span></span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;lisi&#x27;</span>,</span><br><span class="line">    <span class="attr">grade</span>:<span class="number">3</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(lisi.<span class="property">name</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(lisi.<span class="property">grade</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//验证原型</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(lisi.<span class="property">__proto__</span>===<span class="title class_">PrimaryStudent</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(lisi.<span class="property">__proto__</span>.<span class="property">__proto__</span>===<span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//验证继承关系</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(lisi <span class="keyword">instanceof</span> <span class="title class_">PrimaryStudent</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(lisi <span class="keyword">instanceof</span> <span class="title class_">Student</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">lisi</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>此时的新型原型链如下：</p><p><img src="/2022/11/01/%E5%89%8D%E7%AB%AF%E4%B8%89%E4%BB%B6%E5%A5%97%E4%B9%8BJavaScript%EF%BC%88%E4%B8%89%EF%BC%89/2.png"></p><p>如果把整个继承动作用一个<code>inherits()</code>函数封装起来，还可以隐藏空函数<code>F</code>的定义，<code>inherits()</code>函数可以复用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Student的构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params">props</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span>=props.<span class="property">name</span>||<span class="string">&#x27;Unnamed&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">hello</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello, &#x27;</span>+<span class="variable language_">this</span>.<span class="property">name</span>+<span class="string">&#x27;!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//新构造函数PrimaryStudent</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">PrimaryStudent</span>(<span class="params">props</span>)&#123;</span><br><span class="line">    <span class="title class_">Student</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>,props);<span class="comment">//调用Student构造函数，绑定this变量</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">grade</span>=props.<span class="property">grade</span>||<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">inherits</span>(<span class="params">Child,Parent</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> F=<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;;</span><br><span class="line">    F.<span class="property"><span class="keyword">prototype</span></span>=<span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line">    <span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span>=<span class="keyword">new</span> <span class="title function_">F</span>();</span><br><span class="line">    <span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span>=<span class="title class_">Child</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">inherits</span>(<span class="title class_">PrimaryStudent</span>,<span class="title class_">Student</span>);<span class="comment">//实现原型继承链</span></span><br><span class="line"><span class="title class_">PrimaryStudent</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getGrade</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="comment">//绑定其他方法到PrimaryStudent原型</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">grade</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> lisi=<span class="keyword">new</span> <span class="title class_">PrimaryStudent</span>(&#123;<span class="comment">//创建lisi</span></span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;lisi&#x27;</span>,</span><br><span class="line">    <span class="attr">grade</span>:<span class="number">3</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(lisi.<span class="property">name</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(lisi.<span class="property">grade</span>);</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">lisi</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="class继承">class继承</h2><h3 id="class定义">class定义</h3><p>ES6中引入了新的关键字<code>class</code>，使类的定义更简单。</p><p>用<code>class</code>定义<code>Student</code>类并创建一个对象如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span>=name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">hello</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello, &#x27;</span>+<span class="variable language_">this</span>.<span class="property">name</span>+<span class="string">&#x27;!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> lisi=<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&#x27;Lisi&#x27;</span>);</span><br><span class="line">lisi.<span class="title function_">hello</span>();</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">Hello, Lisi!</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="原型继承-1">原型继承</h3><p>可以通过<code>extends</code>实现原型继承：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span>=name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">hello</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello, &#x27;</span>+<span class="variable language_">this</span>.<span class="property">name</span>+<span class="string">&#x27;!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PrimaryStudent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Student</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name,grade</span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>(name);<span class="comment">//用super调用父类的构造方法</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">grade</span>=grade;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">myGrade</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;I am at grade &#x27;</span>+<span class="variable language_">this</span>.<span class="property">grade</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> lisi=<span class="keyword">new</span> <span class="title class_">PrimaryStudent</span>(<span class="string">&#x27;Lisi&#x27;</span>,<span class="number">3</span>);</span><br><span class="line">lisi.<span class="title function_">hello</span>();</span><br><span class="line">lisi.<span class="title function_">myGrade</span>();</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">Hello, Lisi!</span></span><br><span class="line"><span class="comment">I am at grade 3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>不是所有的浏览器都支持ES6的class，当浏览器不支持时，需要<a href="https://babeljs.io/">Babel</a>这个工具把<code>class</code>代码转换为传统的<code>prototype</code>代码。</p><h3 id="练习题-3">练习题</h3><p>请利用<code>class</code>重新定义<code>Cat</code>，并让它从已有的<code>Animal</code>继承，然后新增一个方法<code>say()</code>，返回字符串<code>'Hello, xxx!'</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name</span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">say</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Hello, &#x27;</span>+<span class="variable language_">this</span>.<span class="property">name</span>+<span class="string">&#x27;!&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 测试:</span></span><br><span class="line"><span class="keyword">var</span> kitty = <span class="keyword">new</span> <span class="title class_">Cat</span>(<span class="string">&#x27;Kitty&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> doraemon = <span class="keyword">new</span> <span class="title class_">Cat</span>(<span class="string">&#x27;哆啦A梦&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> ((<span class="keyword">new</span> <span class="title class_">Cat</span>(<span class="string">&#x27;x&#x27;</span>) <span class="keyword">instanceof</span> <span class="title class_">Animal</span>)</span><br><span class="line">    &amp;&amp; kitty </span><br><span class="line">    &amp;&amp; kitty.<span class="property">name</span> === <span class="string">&#x27;Kitty&#x27;</span></span><br><span class="line">    &amp;&amp; kitty.<span class="property">say</span></span><br><span class="line">    &amp;&amp; <span class="keyword">typeof</span> kitty.<span class="property">say</span> === <span class="string">&#x27;function&#x27;</span></span><br><span class="line">    &amp;&amp; kitty.<span class="title function_">say</span>() === <span class="string">&#x27;Hello, Kitty!&#x27;</span></span><br><span class="line">    &amp;&amp; kitty.<span class="property">say</span> === doraemon.<span class="property">say</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;测试通过!&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;测试失败!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">测试通过!</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h1 id="浏览器">浏览器</h1><p>目前主流的浏览器分为以下几种：</p><ul><li>IE6-11：国内用的最多的IE浏览器，从IE10开始支持ES6标准</li><li>Chrome：Google出品的基于Webkit内核浏览器，由于Chrome一经安装就时刻保持自升级，因此不用管它的版本，最新版肯定支持ES6</li><li>Safari：Apple的Mac系统自带的基于Webkit内核浏览器，从OSX 10.7 Lion自带的6.1版本开始支持ES6</li><li>Firefox：Mozilla自研的Gecko内核，也是时刻保持自升级。</li><li>移动设备上目前IOS和Android两大阵营分别主要使用Apple的Safari和Google的Chrome，两种都是Webkit核心，最新版本均支持ES6</li></ul><h2 id="浏览器对象">浏览器对象</h2><p>JavaScript可以获取浏览器提供的很对对象，并进行操作。</p><h3 id="window">window</h3><p>window对象不但充当全局作用域，而且表示浏览器窗口。</p><p>window对象有<code>innerWidth</code>和<code>innerHeight</code>属性，可以获取浏览器窗口的内部宽度和高度。内部宽高是指出去菜单栏、工具栏、边框等占位元素后，用于显示页面的净宽高。IE&lt;=8版本的浏览器不支持这一特性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;window inner size: &#x27;</span>+<span class="variable language_">window</span>.<span class="property">innerWidth</span>+<span class="string">&#x27;x&#x27;</span>+<span class="variable language_">window</span>.<span class="property">innerHeight</span>);</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">window inner size: 987x752</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>与之对应的，还有一个<code>outerWidth</code>和<code>outerHeight</code>属性，可以获取浏览器窗口的整个宽高。</p><h3 id="navigator">navigator</h3><p><code>navigator</code>对象表示浏览器的信息，最常用的属性包括：</p><ul><li>navigator.appName：浏览器名称</li><li>navigator.appVersion：浏览器版本</li><li>navigator.language：浏览器设置的语言</li><li>navigator.platform：操作系统类型</li><li>navigator.userAgent：浏览器设定的<code>user-Agent</code>字符串</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;appName=&#x27;</span>+navigator.<span class="property">appName</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;appVersion=&#x27;</span>+navigator.<span class="property">appVersion</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;language=&#x27;</span>+navigator.<span class="property">language</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;platform=&#x27;</span>+navigator.<span class="property">platform</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;userAgent=&#x27;</span>+navigator.<span class="property">userAgrnt</span>);</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">appName=Netscape</span></span><br><span class="line"><span class="comment">Users/Administrator/Desktop/test.js:1</span></span><br><span class="line"><span class="comment">appVersion=5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36 Edg/107.0.1418.26</span></span><br><span class="line"><span class="comment">Users/Administrator/Desktop/test.js:2</span></span><br><span class="line"><span class="comment">language=zh-CN</span></span><br><span class="line"><span class="comment">Users/Administrator/Desktop/test.js:3</span></span><br><span class="line"><span class="comment">platform=Win32</span></span><br><span class="line"><span class="comment">Users/Administrator/Desktop/test.js:4</span></span><br><span class="line"><span class="comment">userAgent=undefined</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>注意，由于navigator的信息很容易被用户修改，所以常用JavaScript对不存在属性返回unfinded的特性，计算浏览器的信息是否又被改动：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> width=<span class="variable language_">window</span>.<span class="property">innerWith</span>||<span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">clientWidth</span>;</span><br></pre></td></tr></table></figure><h3 id="screen">screen</h3><p>screen对象表示屏幕的信息，常用的属性有：</p><ul><li>screen.width：屏幕宽度，以像素为单位</li><li>screen.height：屏幕高度，以像素为单位</li><li>sreen.colorDepth：返回颜色位数，如8、16、24</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Screen size=&#x27;</span>+screen.<span class="property">width</span>+<span class="string">&#x27;x&#x27;</span>+screen.<span class="property">height</span>);</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">Screen size=1440x900</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="location">location</h3><p>location对象表示当前页面的URL信息。一个完整的URL可以用<code>location.href</code>获取。要获取URL各部分的值，可以这么写：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如URL：http://www.example.com:8080/path/index.html?a=1&amp;b=2#TOP</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">protocol</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">host</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">post</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">pathname</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">search</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">hash</span>);</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">http</span></span><br><span class="line"><span class="comment">www.example.com</span></span><br><span class="line"><span class="comment">8080</span></span><br><span class="line"><span class="comment">/path/index.html</span></span><br><span class="line"><span class="comment">a=1&amp;b=2</span></span><br><span class="line"><span class="comment">TOP</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>要加载一个新页面，可以调用<code>location.assign()</code>方法，要重新加载当前页面，可以调用<code>location.reload()</code>方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="title function_">confirm</span>(<span class="string">&#x27;要重新加载当前页&#x27;</span>+location.<span class="property">href</span>+<span class="string">&#x27;?&#x27;</span>))&#123;</span><br><span class="line">    location.<span class="title function_">reload</span>();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    location.<span class="title function_">assign</span>(<span class="string">&#x27;/&#x27;</span>);<span class="comment">//设置一个新的URL地址</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="document">document</h3><p>document对象表示当前页面。由于HTML在浏览器中以DOM形式表示为树形结构，document对象就是整个DOM树的根节点。</p><p>document的title属性是从HTML文档中的<code>&lt;title&gt;...&lt;/title&gt;</code>读取的，但其也可以动态改变：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">title</span>=<span class="string">&#x27;helloJavaScript!&#x27;</span>;<span class="comment">//修改浏览器窗口标题</span></span><br></pre></td></tr></table></figure><p>若要查找DOM树的某个节点，需要从document对象开始查找。最常用的方法是根据ID和Tag Name。</p><p>有一HTML数据如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span> <span class="attr">id</span>=<span class="string">&quot;drink-menu&quot;</span> <span class="attr">style</span>=<span class="string">&quot;border:solid 1px #ccc;padding:6px;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>摩卡<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>热摩卡咖啡<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>酸奶<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>北京老酸奶<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>果汁<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>鲜榨苹果汁<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><p>用document对象提供的<code>getElementById()</code>和<code>getElementsByTagName()</code>可以按ID获得一个DOM节点和按Tag名称获得一组DOM节点：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> menu=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;drink-menu&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> drinks=<span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;dt&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> i,s;</span><br><span class="line">s=<span class="string">&#x27;提供的饮料有：&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;drinks.<span class="property">length</span>;i++)&#123;</span><br><span class="line">    s=s+drinks[i].<span class="property">innerHTNL</span>+<span class="string">&#x27;,&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s);</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">提供的饮料有:摩卡,酸奶,果汁,</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>document对象还有一个<code>cookie</code>属性，可以获取当前页面的Cookie：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="property">cookie</span>);</span><br></pre></td></tr></table></figure><p>由于JavaScript能读到页面的Cookie，而用户的登录信息通常也存在Cookie中，且HTML页面中允许引入第三方的JavaScript代码。为了防止第三方的JavaScript直接能获取网站的用户登录信息，<strong>服务器在设置Cookie时可以使用<code>httpOnly</code>，以防止被JavaScript读取。</strong>IE浏览器从IE6 SP1开始支持。</p><h3 id="history">history</h3><p>history对象保持了浏览器的历史记录，JavaScript可以调用history对象的<code>back()</code>或<code>forward()</code>，相当于用户点击了浏览器的后退或前进按钮。<strong>在任何情况都不应该使用history这个对象。</strong></p>]]></content>
    
    
    <summary type="html">JavaScript,前端</summary>
    
    
    
    <category term="学习笔记" scheme="http://tangmenjue.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="前端" scheme="http://tangmenjue.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="http://tangmenjue.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="http://tangmenjue.top/tags/JavaScript/"/>
    
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CentOS 7之关于网络管理的那些知识</title>
    <url>/2022/11/16/CentOS%207%E4%B9%8B%E5%85%B3%E4%BA%8E%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E7%9A%84%E9%82%A3%E4%BA%9B%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h1 id="前置知识">前置知识</h1>
<h2 id="linux常见目录">Linux常见目录</h2>
<table>
<colgroup>
<col style="width: 15%">
<col style="width: 84%">
</colgroup>
<thead>
<tr class="header">
<th>目录参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>/</td>
<td>根目录，文件的最顶端，/etc、/bin、/dev、/lib、/sbin应和根目录放置在一个分区中，而类似/usr/local可以单独位于另一个分区</td>
</tr>
<tr class="even">
<td>/bin</td>
<td>存放系统所需的重要命令，如文件或目录操作的命令ls、cp、mkdir等。/usr/bin也存放了一些系统命令，这些命令对于的文件都是可执行的，普通用户可以使用大部分的命令</td>
</tr>
<tr class="odd">
<td>/boot</td>
<td>存放Linux启动时内核及引导系统程序所需要的核心文件，内核文件和grub系统引导管理器都位于此目录</td>
</tr>
<tr class="even">
<td>/dev</td>
<td>存放Linux系统下的设备文件，如光驱、磁盘等。访问该目录下的文件相当于访问某个硬件设备，常用于挂载光驱</td>
</tr>
<tr class="odd">
<td>/etc</td>
<td>存放系统的配置文件，作为一些软件启动时默认配置文件读取的目录，如/etc/fstab存放系统分区信息</td>
</tr>
<tr class="even">
<td>/home</td>
<td>系统默认的用户主目录。若添加用户时不指定用户的主目录，默认在/home下创建与用户名同名的文件夹。代码中可以用HOME环境变量表示当前用户的主目录</td>
</tr>
<tr class="odd">
<td>/lib</td>
<td>64位系统有/lib64文件夹，主要存放动态链接库，类似的目录还有/usr/lib、/usr/local/lib等</td>
</tr>
<tr class="even">
<td>/lost+found</td>
<td>存放一些当系统意外崩溃或机器意外关机时产生的文件碎片</td>
</tr>
<tr class="odd">
<td>/mnt</td>
<td>存放挂载储存设备的挂载目录，如光驱等</td>
</tr>
<tr class="even">
<td>/proc</td>
<td>存放操作系统运行时的运行信息，如进程信息、内核信息、网络信息等。此目录的内容存在于内存中，实际不占用磁盘空间。如/etc/cpuinfo存放CPU相关信息</td>
</tr>
<tr class="odd">
<td>/root</td>
<td>Linux超级权限用户root的主目录</td>
</tr>
<tr class="even">
<td>/sbin</td>
<td>存放一些系统管理的命令，一般只能由超级权限用户root执行。大多数命令普通用户一般无权执行，如/sbin/ifconfig，普通用户使用绝对路径也可执行，用于查看当前系统网络配置，如/usr/sbin、/usr/local/sbin</td>
</tr>
<tr class="odd">
<td>/tmp</td>
<td>临时文件目录，任何人都可以访问。系统软件或用户运行程序时产生的临时文件存放到这里。此目录数据需要定期清除，重要数据不能放在该目录下，其目录空间也不能过小</td>
</tr>
<tr class="even">
<td>/usr:</td>
<td>应用程序存放目录，如命令、帮助文件等。安装Linux软件包时默认安装到/usr/local目录下，如/usr/share/fonts存放系统字体，/usr/share/man存放帮助文档，/usr/include存放软件的头文件等。建议将/usr/local目录单独分区并设置较大的磁盘空间</td>
</tr>
<tr class="odd">
<td>/var</td>
<td>/var/log存放系统日志，/var/lib存放系统库文件。目录内容会经常变动</td>
</tr>
<tr class="even">
<td>/sys</td>
<td>与/proc类似，是一个虚拟的文件系统，主要记录与系统核心相关的信息，如系统已经载入的模块信息等，该目录实际不占硬盘容量</td>
</tr>
</tbody>
</table>
<h2 id="网络管理协议">网络管理协议</h2>
<h3 id="tcpip协议">TCP/IP协议</h3>
<h4 id="tcpip协议体系">TCP/IP协议体系</h4>
<p>TCP/IP协议主要包含传输控制协议（TCP）和网际协议（IP）。</p>
<p>TCP/IP体系是一种分层结构，由基于硬件层次上的4个概念层次构成，从上往下看，即为应用层、传输层、网际互联层和网络接口层。</p>
<table>
<colgroup>
<col style="width: 14%">
<col style="width: 85%">
</colgroup>
<thead>
<tr class="header">
<th>TCP/IP层次</th>
<th>功能及作用</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>应用层</td>
<td>为用户提供所需要的各自应用服务，如FTP、Telnet、DNS、SMTP等</td>
</tr>
<tr class="even">
<td>传输层</td>
<td>为应用层提供端到端的通信功能，同时提供流量控制，确保数据完整和正确。TCP协议位于该层，提供一种可靠的、面向连接的数据传输服务，对之对应的是UDP协议，提供不可靠的、无连接的数据报传输服务</td>
</tr>
<tr class="odd">
<td>网际互联层</td>
<td>解决主机到主机之间的通信问题。其主要协议有：网际协议（IP）、地址解析协议（ARP）、反向地址解析协议（RARP）和互联网控制报文协议（ICMP）</td>
</tr>
<tr class="even">
<td>网络接口层</td>
<td>为上层提供服务，完成链路控制等功能</td>
</tr>
</tbody>
</table>
<h4 id="包packet">包（packet）</h4>
<p>包（packet）是网络上传输的数据片段，也称为分组或IP数据报。用户数据按照规定划分为大小适中的若干组，每个组加上包头构成一个包，该过程便称为封装。网络上使用包为单位进行数据传输。</p>
<p>包是一种统称，在不同的层次，包有不同的名字。如TCP/IP中称作帧，而IP层称之为IP数据报，TCP层称之为TCP报文等。</p>
<h4 id="网络字节顺序">网络字节顺序</h4>
<p>TCP/IP协议定义了一种所有机器在互联网分组的二进制字段中必须使用的网络标准字节顺序，与之对应的是主机字节顺序，主机字节顺序和各个主机密切相关。</p>
<p>传输时需遵循以下转换规则：<strong>主机字节顺序→网络字节顺序→主机字节顺序</strong>。</p>
<p>即发送方将主机字节顺序的整数转换为网络字节顺序后发送出去，接收方收到数据后将网络字节顺序的整数转换为自己的主机字节顺序，然后再进行处理。</p>
<h4 id="地址解析协议arp">地址解析协议（ARP）</h4>
<p>TCP/IP网络使用IP地址进行寻址，IP包在IP层实现路由选择，但IP包在网络接口层的传输却需要知道设备的物理地址，此时便需要一种IP地址到物理地址的转换协议ARP。</p>
<p>ARP协议是一种在以太网这种有广播能力的网络中解决地址转换问题的方法，该方法允许在不重新编译代码、不需维护一个集中式数据库的情况下，在网络中动态增加新机器。</p>
<p>其原理为：当主机A想转换某一IP地址时，通过向网络中广播一个专门的报文分组，要求具有该IP地址的机器以其物理地址做出应答。所有主机都将收到这个请求，但只有符合条件的主机才辨认该IP地址，同时发回一个包括其物理地址的应答。主机A收到应答时便知道该IP地址对应的物理地址，并使用这个地址将数据分组发过去。</p>
<h3 id="udp协议">UDP协议</h3>
<p>UDP是一种无连接的传输层协议，主要用于不要求分组顺序到达的传输中。其优点为资源消耗小、处理速度快。由于其不提供数据包分组、组装和不能对数据包进行排序的缺点，当报文发送后，无法得知其是否安全完整到达的，因此UDP协议丢包会比较严重。</p>
<h3 id="icmp协议">ICMP协议</h3>
<p>ICMP协议是Internet控制报文协议，属于TCP/IP协议族的一个子协议，用于在IP主机、路由器之间传递控制信息。控制信息是指网络是否通畅、主机是否可达、路由是否可用等网络本身的信息，<strong>其唯一的功能是报告问题</strong>，而不是纠正错误，纠错的任务由发送方完成。</p>
<h1 id="网络管理命令">网络管理命令</h1>
<h2 id="ping检查网络连接速度及网络是否通畅">Ping：检查网络连接速度及网络是否通畅</h2>
<p>ping常用于测试与目标主机或域名是否可达。ping的结果通常是可信的（部分服务器设置了禁止ping的除外）</p>
<p>ping命令不会自动终止，需要按"ctrl+c"终止，或是用参数"<code>-c</code>"指定要求完成的回应次数。</p>
<p>在CenOS 7中，ping的常用命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#ping目的ip地址如192.168.3.100</span></span><br><span class="line">ping 192.168.3.100</span><br><span class="line"></span><br><span class="line"><span class="comment">#ping外网域名如www.baidu.com</span></span><br><span class="line">ping www.baidu.com</span><br><span class="line"></span><br><span class="line"><span class="comment">#ping目的ip地址n次，下面命令中的n为次数</span></span><br><span class="line">ping -c n 192.168.3.100</span><br><span class="line"></span><br><span class="line"><span class="comment">#以0.01s的时间间隔来ping目的ip地址3次，下面命令中的0.01为指定的时间间隔0.01秒</span></span><br><span class="line">ping -c 3 -i 0.01 192.168.3.100</span><br></pre></td></tr></table></figure>
<h2 id="ifconfig配置网络或显示当前网络接口状态">ifconfig:配置网络或显示当前网络接口状态</h2>
<p>ifonfig命令可以用于查看、配置、启用或禁用指定网络接口，如配置网卡的IP地址、掩码、广播地址、网关等。</p>
<p>在CenOS 7中，查看网卡基本信息：</p>
<p><img src="/2022/11/16/CentOS%207%E4%B9%8B%E5%85%B3%E4%BA%8E%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E7%9A%84%E9%82%A3%E4%BA%9B%E7%9F%A5%E8%AF%86/1.png"></p>
<p>查看指定网络接口ens33的信息：</p>
<p><img src="/2022/11/16/CentOS%207%E4%B9%8B%E5%85%B3%E4%BA%8E%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E7%9A%84%E9%82%A3%E4%BA%9B%E7%9F%A5%E8%AF%86/2.png"></p>
<p>其中：</p>
<ul>
<li><p>第一行：UP表示该网络接口为启用状态。RUNNING表示网卡设备已连接，MULTICAST表示组播，mtu为数据包最大传输单元</p></li>
<li><p>第二行：网卡IP、子网掩码、广播地址</p></li>
<li><p>第三行：IPv6地址</p></li>
<li><p>第四行：ether为网卡的MAC地址，Ethernet表示连接类型</p></li>
<li><p>第五行：接收数据包个数、大小统计信息</p></li>
<li><p>第六行：异常接收数据包的数量，如丢包量、错误等</p></li>
<li><p>第七行：发送数据包个数、大小统计信息</p></li>
<li><p>第八行：产生错误数据包的数量，如丢包量，错误等</p></li>
</ul>
<p>ifconfig的常用命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#关闭ens33网卡</span></span><br><span class="line">ifconfig ens33 down</span><br><span class="line"></span><br><span class="line"><span class="comment">#开启ens33网卡</span></span><br><span class="line">ifconfig ens33 up</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置ip地址</span></span><br><span class="line">ifconfig ens33:1 192.168.100.100</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置ip地址和子网掩码</span></span><br><span class="line">ifconfig ens33:1 192.168.100.100 netmask 255.255.255.0</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置ip地址、子网掩码和广播地址</span></span><br><span class="line">ifconfig ens33:1 192.168.100.100 netmask 255.255.255.0 broadcast 192.168.1.255</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除ip地址</span></span><br><span class="line">ifconfig ens33 del 192.168.1.100</span><br><span class="line"></span><br><span class="line"><span class="comment">#启用arp协议</span></span><br><span class="line">ifconfig ens33 arp</span><br><span class="line"></span><br><span class="line"><span class="comment">#禁用arp协议</span></span><br><span class="line">ifconfig ens33 -arp</span><br></pre></td></tr></table></figure>
<h2 id="route显示添加或修改路由表">route：显示添加或修改路由表</h2>
<p>route命令用于查看或编辑计算机的IP路由表。</p>
<p>route的常用命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#显示所有路由表</span></span><br><span class="line">route -n</span><br><span class="line"><span class="comment">#添加一条路由：发往192.168.60.0网段的全部要经过网关192.168.19.1</span></span><br><span class="line">route add -net 192.168.18.0 netmask 255.255.255.0 gw 192.168.18.2</span><br><span class="line"><span class="comment">#删除一条路由：删除时不需要网关</span></span><br><span class="line">route del -net 192.168.18.0 netmask 255.255.255.0</span><br></pre></td></tr></table></figure>
<h2 id="scplinux系统之间复制文件和目录">scp：Linux系统之间复制文件和目录</h2>
<p>scp可以将本地文件传送到远程主机或从远程主机拉取文件到本地。注意由于各发行版本不同，scp语法也不同。</p>
<p>scp使用方法如下所示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将本地/root/lk目录下所有文件传输到远程主机192.168.3.100的/home/lk/cpfile目录下：</span></span><br><span class="line">scp -r /root/lk root@192.168.3.100:/home/lk/cpfile</span><br><span class="line"></span><br><span class="line"><span class="comment">#将远程主机192.168.3.100的/home/lk/目录下所有文件全部复制到本地的/root目录下：</span></span><br><span class="line">scp -r root@192.168.3.100:/home/lk /root</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用端口号4588将本地文件test.py传送至远程主机198.168.3.100的/usr目录下：</span></span><br><span class="line">scp -P 4588 test.py root@192.168.3.100:/usr</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用端口号4588将远程主机198.168.3.100的/etc/1.txt文件复制到本地的/root目录下：</span></span><br><span class="line">scp -P 4588 root@192.168.3.100:/etc/1.txt /root</span><br></pre></td></tr></table></figure>
<h2 id="rsync数据镜像备份工具">rsync：数据镜像备份工具</h2>
<p>rsync是Linux系统下常用的数据镜像备份工具，用于在不同的主机之间同步文件。除了单个文件外，rsync还可以保存整个目录树和文件系统，可以增量同步，并保持文件原来的属性，数据传输过程是加密的，保证数据的安全。</p>
<p><strong>rsync不仅可以远程同步数据，还可以本地同步数据</strong>。与cp或scp不同的是，<strong>使用rsync备份数据时不会直接覆盖已经存在的数据</strong>，而是先判断已经存在的数据和新数据的差异，只有数据不同时才会把不相同的部分覆盖。</p>
<p>rsync使用方法如下所示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将本地/etc/passwd文件同步到本地的/tmp/目录下，并改名为1.txt</span></span><br><span class="line">rsync -av /etc/passwd /tmp/1.txt</span><br><span class="line"></span><br><span class="line"><span class="comment">#将本地/etc/passwd文件备份到远程主机192.168.3.100的/tmp/目录下，并改名为1.txt</span></span><br><span class="line">rsync -av /etc/passwd 192.168.3.100:/tmp/1.txt</span><br></pre></td></tr></table></figure>
<h2 id="netstat显示网络连接路由表或接口状态">netstat：显示网络连接、路由表或接口状态</h2>
<p>netstat命令用于监控系统网络配置和工作状况，可以显示内核路由表、活动的网络状态以及每个网络接口有用的统计数字。</p>
<p>netstat的常用命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#显示所有端口，包含UDP和TCP端口</span></span><br><span class="line">netstat -a|<span class="built_in">head</span> -4</span><br><span class="line"><span class="comment">#显示所有TCP端口</span></span><br><span class="line">netstat -at</span><br><span class="line"><span class="comment">#显示所有UDP端口</span></span><br><span class="line">netstat -au</span><br><span class="line"><span class="comment">#显示所有处于监听状态的端口并以数字方式显示而非服务名</span></span><br><span class="line">netstat -<span class="built_in">ln</span></span><br><span class="line"><span class="comment">#显示所有TCP端口并显示对应的进程名称或进程号</span></span><br><span class="line">netstat -plnt</span><br><span class="line"><span class="comment">#显示核心路由信息</span></span><br><span class="line">netstat -r</span><br><span class="line"><span class="comment">#显示网络接口列表</span></span><br><span class="line">netstat -i</span><br><span class="line"><span class="comment">#统计各个TCP连接的各个状态对应的数量</span></span><br><span class="line">netstat -plinta|sed <span class="string">&#x27;1,2d&#x27;</span>|awk <span class="string">&#x27;&#123;print $6&#125;&#x27;</span>|<span class="built_in">sort</span>|<span class="built_in">uniq</span> -c</span><br></pre></td></tr></table></figure>
<h2 id="traceroute探测至目的地址的路由信息">traceroute：探测至目的地址的路由信息</h2>
<p>traceroute跟踪数据包到达网络主机所经过的路由，其原理是试图以最小的TTL发出探测包来跟踪数据包到达目标主机所经过的网关，然后监听一个来自网关ICMP的应答。</p>
<p>traceroute的常用命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#先检查主机与www.baidu.com之间的网络是否通畅</span></span><br><span class="line">ping www.baidu.com</span><br><span class="line"><span class="comment">#显示本地主机到www.baidu.com所经过的路由信息</span></span><br><span class="line">traceroute -n www.baidu.com</span><br><span class="line"><span class="comment">#运行结果的每行记录对应一跳，每跳表示一个网关，最大30跳。每行有3个时间，单位是ms。星号则表示ICMP信息没有返回</span></span><br></pre></td></tr></table></figure>
<h2 id="telnet测试登录或控制远程主机">telnet：测试、登录或控制远程主机</h2>
<p>telnet通常用来远程登录。在客户端使用telnet在程序中输入命令，可以在本地控制服务器。由于telnet采用明文传送报文，安全性较差。telnet可以确定远程服务端口的状态，以便确认服务是否正常。</p>
<p>telnet常用命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#检查198.168.3.100对应的56789端口服务是否正常</span></span><br><span class="line">telnet 198.168.3.100 56789</span><br><span class="line"><span class="comment">#检查www.pjp.net对应的80端口服务是否正常</span></span><br><span class="line">telnet www.php.net 80</span><br></pre></td></tr></table></figure>
<h2 id="wget下载网络文件">wget：下载网络文件</h2>
<p>wget可以断点续传，同时支持FTP或HTTP协议下载，并可以设置代理服务器。</p>
<p>wgett常用命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#下载文件http://ftp.gnu.org/gnu/wget/wget-1.14.tar.gz</span></span><br><span class="line">wget http://ftp.gnu.org/gnu/wget/wget-1.14.tar.gz</span><br><span class="line"><span class="comment">#断点续传</span></span><br><span class="line">wget -c http://ftp.gnu.org/gnu/wget/wget-1.14.tar.gz</span><br><span class="line"><span class="comment">#批量下载，其中download.txt文件里是一系列网址</span></span><br><span class="line">wget -i download.txt</span><br></pre></td></tr></table></figure>
<h1 id="linux网络配置">Linux网络配置</h1>
<p>与Linux网络配置相关的文件主要有以下这些：</p>
<table>
<colgroup>
<col style="width: 40%">
<col style="width: 60%">
</colgroup>
<thead>
<tr class="header">
<th>目录</th>
<th>功能及作用</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>/etc/hostname</td>
<td>主要用于修改主机名称</td>
</tr>
<tr class="even">
<td>/etc/sysconfig/network-scrips/ifcfg-enoN</td>
<td>设置网卡参数的文件，如IP地址、子网掩码、广播地址、网关等，N为一串数字</td>
</tr>
<tr class="odd">
<td>/etc/resolv.conf</td>
<td>设置DNS相关的信息，用于将域名解析到IP</td>
</tr>
<tr class="even">
<td>/etc/hosts</td>
<td>计算机IP对应的主机名称或域名对应的IP地址</td>
</tr>
<tr class="odd">
<td>/etc/nsswitch.conf</td>
<td>规定通过哪些途径、按照什么顺序通过这些途径来查找特定类型的信息。通过修改选项可以选择是DNS解析优先还是本地设置优先</td>
</tr>
</tbody>
</table>
<h2 id="配置linux系统的ip地址">配置Linux系统的IP地址</h2>
<p>可以通过终端命令直接设置主机的IP地址，如想设置在系统重启后依然生效，可以通过设置对应的网络端口文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">oot@localhost admin]<span class="comment"># cat /etc/sysconfig/network-scripts/ifcfg-ens33</span></span><br><span class="line"></span><br><span class="line">TYPE=<span class="string">&quot;Ethernet&quot;</span>  <span class="comment">#设备连接类型，此处为以太网</span></span><br><span class="line">PROXY_METHOD=<span class="string">&quot;none&quot;</span>  </span><br><span class="line">BROWSER_ONLY=<span class="string">&quot;no&quot;</span></span><br><span class="line">BOOTPROTO=<span class="string">&quot;dhcp&quot;</span>  <span class="comment">#使用动态IP</span></span><br><span class="line">DEFROUTE=<span class="string">&quot;yes&quot;</span>  <span class="comment">#是否为默认路由</span></span><br><span class="line">IPV4_FAILURE_FATAL=<span class="string">&quot;no&quot;</span></span><br><span class="line">IPV6INIT=<span class="string">&quot;yes&quot;</span></span><br><span class="line">IPV6_AUTOCONF=<span class="string">&quot;yes&quot;</span></span><br><span class="line">IPV6_DEFROUTE=<span class="string">&quot;yes&quot;</span></span><br><span class="line">IPV6_FAILURE_FATAL=<span class="string">&quot;no&quot;</span></span><br><span class="line">IPV6_ADDR_GEN_MODE=<span class="string">&quot;stable-privacy&quot;</span></span><br><span class="line">NAME=<span class="string">&quot;ens33&quot;</span></span><br><span class="line">UUID=<span class="string">&quot;cc581056-9262-44ab-877f-645d0b306352&quot;</span></span><br><span class="line">DEVICE=<span class="string">&quot;ens33&quot;</span></span><br><span class="line">ONBOOT=<span class="string">&quot;yes&quot;</span>  <span class="comment">#系统启动时是否设置此网络接口</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#可以使用命令</span></span><br><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-ens33</span><br><span class="line"><span class="comment">#将BOOTPROTO=&quot;dhcp&quot; 修改为BOOTPROTO=none 后，增加以下字段。按i键即可输入，输入完成后按下Esc键，输入冒号：和wq将更改保存后退出</span></span><br><span class="line"></span><br><span class="line">IPADDR0=设定的ip地址</span><br><span class="line">PREFIX0=设定的子网掩码</span><br><span class="line">GATEWAT0=设定的网关</span><br><span class="line">DNS1=DNS服务器地址1</span><br><span class="line">DNS2=DNS服务器地址2</span><br></pre></td></tr></table></figure>
<p>设置完接口文件后，需要重启网络服务才能生效，重启后使用ifconfig查看设置是否生效：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service network restart</span><br></pre></td></tr></table></figure>
<p>同一个网络接口可以使用子接口的方式设置多个IP地址：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置网络接口ens33子接口1的ip地址和子网掩码</span></span><br><span class="line">ifconfig ens33:1 192.168.100.100 netmask 255.255.255.0</span><br></pre></td></tr></table></figure>
<p>当服务器重启或网络服务重启后，子接口的配置将消失。若需要重启后仍生效，可以将配置子接口命令加入/etc/rc.local文件中。</p>
<h2 id="使用hostname设置主机名">使用hostname设置主机名</h2>
<p>主机名是识别某个计算机在网络中的标识。在单机情况下，主机名可任意设置。执行以下命令修改主机名，重新登录后可以发现主机名已改变。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hostname mycomputername</span><br></pre></td></tr></table></figure>
<p>如要修改重启后依然生效，可以将主机名写入文件/etc/hostname中。</p>
<h2 id="设置默认网关">设置默认网关</h2>
<p>设置好IP地址后，若要访问其他的子网或Internet，用户还需要设置路由，这里采用设置默认网关的方法来设置路由。</p>
<p>在Linux中，设置默认网关有两种方法：</p>
<ul>
<li><p>第一种是直接使用route命令。在设置默认网关之前，先用<code>route -n</code> 命令查看路由表，而后执行下面命令设置网关：</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">route add default gw 192.168.10.254</span><br></pre></td></tr></table></figure></p>
<p>若不想每次开机都执行route命令，则应把要执行的命令写入/etc/rc.d/re.local文件中。</p></li>
<li><p>第二种是在/ect/sysconfig/network-scripts/ifcfg-接口文件中添加如下字段：</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GATEWAY=192.168.10.254</span><br></pre></td></tr></table></figure></p>
<p>然后重启网络服务来使设置生效。</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service network restart</span><br></pre></td></tr></table></figure></p></li>
</ul>
<h2 id="设置dns服务器">设置DNS服务器</h2>
<p>设置DNS服务器只需修改/etc/resolv.conf文件即可：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># cat /etc/resolv.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Generated by NetworkManager</span></span><br><span class="line">search localdomain</span><br><span class="line">nameserver 192.168.18.2  <span class="comment">#第一名字服务器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#如需添加DNS服务器，直接在下面添加nameserver即可，注意nameserver指定的DNS服务器只有前三条生效</span></span><br><span class="line"><span class="comment">#resolv.conf文件还有其他参数如下：</span></span><br><span class="line">option rotate  <span class="comment">#在这DNS server之间轮询</span></span><br><span class="line">option <span class="built_in">timeout</span>:1  <span class="comment">#表示解析超时时间1s（默认为5s）</span></span><br><span class="line">attempts:2  <span class="comment">#表示解析域名尝试的次数</span></span><br></pre></td></tr></table></figure>
<h1 id="ftp服务器">FTP服务器</h1>
<h2 id="ftp服务概述">FTP服务概述</h2>
<p>FTP文件共享基于TCP/IP协议，是一种通用性比较强的网络文件共享方式。FTP是仅基于TCP的服务，不支持UDP。FTP使用两个端口，一个数据端口和一个命令端口（控制端口）。通常这两个端口是21（命令端口）和20（数据端口）。由于FTP工作方式的不同，数据端口并不总是20，分为主动FTP和被动FTP。</p>
<ul>
<li>主动FTP
<ul>
<li>主动模式是从服务器向客户端发起连接。主动模式下，服务端开启的是20和21端口，客户端开启的是1024以上的端口</li>
</ul></li>
<li>被动FTP
<ul>
<li>被动模式是客户端向服务端发起连接。被动模式下，服务端开启的是21命令端口和大于1024的数据连接端口，客户端开启的是大于1024的两个端口</li>
</ul></li>
</ul>
<p>两者的共同点是都使用21端口进行用户验证及管理，差别在于传送数据的方式不同。</p>
<h2 id="vsftp的安装与配置">vsftp的安装与配置</h2>
<p>在Linux系统下，vsftp是一款应用比较广泛的FTP软件，其特点是小巧轻快、安全易用。</p>
<h3 id="vsftp安装">vsftp安装</h3>
<p>使用yum工具安装vsftp：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#使用yum工具下载vsftp</span></span><br><span class="line">yum install -y vsftpd</span><br><span class="line"><span class="comment">#使用rpm安装vsftp</span></span><br><span class="line">rpm -qa|grep vsftp</span><br><span class="line"><span class="comment">#安装依赖的库文件</span></span><br><span class="line">yum install -y libcap libcap-devel</span><br></pre></td></tr></table></figure>
<h3 id="匿名ftp设置">匿名FTP设置</h3>
<p>这种运行匿名用户访问并上传文件，配置文件路径一般为<code>/etc/vsftpd.conf</code>，若是使用rpm包安装，则配置文件位于<code>/etc/vsftpd/vsftpd.conf</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将默认目录赋予用户ftp权限以便可以上传文件</span></span><br><span class="line">[root@localhost admin]<span class="comment"># chown -R ftp.users /var/ftp/pub/</span></span><br><span class="line"><span class="comment">#取消配置文件中的注释并显示有效行</span></span><br><span class="line">[root@localhost admin]<span class="comment"># grep -v ^# /etc/vsftpd/vsftpd.conf</span></span><br><span class="line">anonymous_enable=YES  <span class="comment">#允许匿名用户登录和上传</span></span><br><span class="line">local_enable=YES  </span><br><span class="line">write_enable=YES  <span class="comment">#允许写</span></span><br><span class="line">local_umask=022  </span><br><span class="line">dirmessage_enable=YES</span><br><span class="line">xferlog_enable=YES</span><br><span class="line">connect_from_port_20=YES</span><br><span class="line">xferlog_std_format=YES</span><br><span class="line">listen=NO <span class="comment">#是否允许在监听</span></span><br><span class="line">listen_ipv6=YES <span class="comment">#是否允许IPv6上的监听</span></span><br><span class="line"></span><br><span class="line">pam_service_name=vsftpd</span><br><span class="line">userlist_enable=YES</span><br><span class="line">tcp_wrappers=YES</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置文件使用vim /etc/vsftpd/vsftpd.conf修改为如下：</span></span><br><span class="line">anonymous_enable=YES</span><br><span class="line">local_enable=YES</span><br><span class="line">write_enable=YES</span><br><span class="line">local_umask=022</span><br><span class="line">anon_upload_enable=YES</span><br><span class="line">dirmessage_enable=YES</span><br><span class="line">xferlog_enable=YES</span><br><span class="line">connect_from_port_20=YES</span><br><span class="line">xferlog_std_format=YES</span><br><span class="line">listen=YES</span><br><span class="line">listen_ipv6=NO</span><br><span class="line"></span><br><span class="line">pam_service_name=vsftpd</span><br><span class="line">userlist_enable=YES</span><br><span class="line">tcp_wrappers=YES</span><br></pre></td></tr></table></figure>
<h3 id="启动ftp服务">启动FTP服务</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#启动vsftpd</span></span><br><span class="line">[root@localhost admin]<span class="comment"># systemctl start vsftpd</span></span><br><span class="line"><span class="comment">#检查是否启动成功，默认配置文件位于/etc/vsftpd/vsftpd.conf</span></span><br><span class="line">[root@localhost admin]<span class="comment"># ps -ef|grep vsftp</span></span><br><span class="line">root      60170      1  0 00:55 ?        00:00:00 /usr/sbin/vsftpd /etc/vsftpd/vsftpd.conf</span><br><span class="line">root      60223  54792  0 00:56 pts/0    00:00:00 grep --color=auto vsftp</span><br></pre></td></tr></table></figure>
<h3 id="匿名用户登录测试">匿名用户登录测试</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#登录ftp</span></span><br><span class="line">[root@localhost admin]<span class="comment"># ftp 192.168.18.128 21</span></span><br><span class="line">Connected to 192.168.18.128 (192.168.18.128).</span><br><span class="line">220 (vsFTPd 3.0.2)</span><br><span class="line"><span class="comment">#输入匿名用户名</span></span><br><span class="line">Name (192.168.18.128:root): anonymous</span><br><span class="line">331 Please specify the password.</span><br><span class="line"><span class="comment">#密码为空</span></span><br><span class="line">Password:</span><br><span class="line"><span class="comment">#登录成功</span></span><br><span class="line">230 Login successful.</span><br><span class="line">Remote system <span class="built_in">type</span> is UNIX.</span><br><span class="line">Using binary mode to transfer files.</span><br><span class="line">ftp&gt; </span><br><span class="line"><span class="comment">#切换目录</span></span><br><span class="line">ftp&gt; <span class="built_in">cd</span> pub</span><br><span class="line">250 Directory successfully changed.</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看当前目录下的文件</span></span><br><span class="line">ftp&gt; !<span class="built_in">ls</span> -l</span><br><span class="line">总用量 3048</span><br><span class="line">drwxr-xr-x. 2 admin admin       6 10月 12 05:13 Desktop</span><br><span class="line">drwxr-xr-x. 2 admin admin      19 11月 16 01:18 Documents</span><br><span class="line">drwxr-xr-x. 2 admin admin       6 10月 12 05:13 Downloads</span><br><span class="line">drwxr-xr-x. 2 admin admin       6 10月 12 05:13 Music</span><br><span class="line">drwxr-xr-x. 2 admin admin       6 10月 12 05:13 Pictures</span><br><span class="line">drwxr-xr-x. 2 admin admin       6 10月 12 05:13 Public</span><br><span class="line">drwxr-xr-x. 2 admin admin       6 10月 12 05:13 Templates</span><br><span class="line">drwxr-xr-x. 2 admin admin       6 10月 12 05:13 Videos</span><br><span class="line">-rw-r--r--. 1 root  root  3118130 8月   5 2012 wget-1.14.tar.gz</span><br><span class="line"><span class="comment">#上传文件测试</span></span><br><span class="line">ftp&gt; put wget-1.14.tar.gz</span><br><span class="line"><span class="built_in">local</span>: wget-1.14.tar.gz remote: wget-1.14.tar.gz</span><br><span class="line">227 Entering Passive Mode (192,168,18,128,72,253).</span><br><span class="line">553 Could not create file.</span><br></pre></td></tr></table></figure>
<p>上述上传文件时，遇到了553 Could not create file错误。解决方式如下：</p>
<ul>
<li><p>输入quit退出vsftpd，在ftp的目录创建一个目录，然后设置权限为777：</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># mkdir /var/ftp/write</span></span><br><span class="line">[root@localhost admin]<span class="comment"># chmod -R 777 /var/ftp/write</span></span><br><span class="line">[root@localhost admin]<span class="comment"># vim /etc/vsftpd/vsftpd.conf</span></span><br></pre></td></tr></table></figure></p></li>
<li><p>然后修改位于/etc/vsftpd/vsftpd.conf的配置文件，在文件最后加上以下代码：</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">local_root=/var/ftp</span><br></pre></td></tr></table></figure></p></li>
<li><p>杀死vsftpd进程，然后重启vsftpd服务器程序：</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#杀死vsftpd进程</span></span><br><span class="line">[root@localhost admin]<span class="comment"># pkill vsftpd</span></span><br><span class="line"><span class="comment">#查看是否还有vsftpd进程</span></span><br><span class="line">[root@localhost admin]<span class="comment"># pgrep vsftpd</span></span><br><span class="line"><span class="comment">#启动vsftpd服务器</span></span><br><span class="line">[root@localhost admin]<span class="comment"># /usr/sbin/vsftpd &amp;</span></span><br><span class="line">[1] 61422</span><br><span class="line"><span class="comment">#查看是否有vsftpd进程</span></span><br><span class="line">[root@localhost admin]<span class="comment"># pgrep vsftpd</span></span><br><span class="line">61418</span><br></pre></td></tr></table></figure></p></li>
<li><p>然后再试试登录ftp上传文件：</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#上传文件测试</span></span><br><span class="line">ftp&gt; put wget-1.14.tar.gz</span><br><span class="line"><span class="built_in">local</span>: wget-1.14.tar.gz remote: wget-1.14.tar.gz</span><br><span class="line">227 Entering Passive Mode (192,168,18,128,122,212).</span><br><span class="line">150 Ok to send data.</span><br><span class="line">226 Transfer complete.</span><br><span class="line">3118130 bytes sent <span class="keyword">in</span> 0.00845 secs (368834.88 Kbytes/sec)</span><br><span class="line"><span class="comment">#上传文件成功退出ftp</span></span><br><span class="line">ftp&gt; quit</span><br><span class="line">221 Goodbye.</span><br><span class="line"><span class="comment">#查看上传后的文件信息，文件属于ftp用户</span></span><br><span class="line">[root@localhost admin]<span class="comment"># ll /var/ftp/pub/</span></span><br><span class="line">总用量 3048</span><br><span class="line">-rw-------. 1 ftp ftp 3118130 11月 16 01:29 wget-1.14.tar.gz</span><br></pre></td></tr></table></figure></p></li>
</ul>
<h3 id="实名ftp设置">实名FTP设置</h3>
<p>除了配置匿名FTP服务外，vsftp还可以配置实名FTP服务器，以便实现更精确的权限控制。</p>
<p>实名需要的用户认证信息位于/etc/vsftpd/目录下，用户启动时可以单独指定其他的配置文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置文件使用vim /etc/vsftpd/vsftpd.conf修改为如下：</span></span><br><span class="line">[root@localhost admin]<span class="comment"># grep -v ^# /etc/vsftpd/vsftpd.conf</span></span><br><span class="line">anonymous_enable=NO  <span class="comment">#禁止匿名用户登录</span></span><br><span class="line">local_enable=YES    <span class="comment">#允许本地用户访问，默认为YES</span></span><br><span class="line">write_enable=YES  <span class="comment">#允许写入</span></span><br><span class="line">local_umask=022  <span class="comment">#上传后的文件默认的权限掩码</span></span><br><span class="line">anon_upload_enable=NO  <span class="comment">#匿名用户上传权限 </span></span><br><span class="line">anon_mkdir_write_enable=NO  <span class="comment">#匿名用户创建目录的同时上传文件</span></span><br><span class="line">anon_other_write_enable=NO  <span class="comment">#匿名用户删除权限</span></span><br><span class="line">chroot_local_user=YES <span class="comment">#禁止本地用户离开自己的ftp主目录</span></span><br><span class="line">chroot_list_enable=NO   <span class="comment">#禁止ftp用户离开自己的ftp主目录</span></span><br><span class="line">chroot_list_file=/etc/vsftpd.chroot_list  <span class="comment">#虚拟用户列表，每行一个用户名</span></span><br><span class="line">listen=YES</span><br><span class="line">listen_address=192.168.18.128  <span class="comment">#绑定本机ip</span></span><br><span class="line"></span><br><span class="line">pam_service_name=vsftpd.vu  <span class="comment">#验证方式</span></span><br><span class="line">local_root=/var/ftp  <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">guest_enable=YES  <span class="comment">#开启虚拟用户功能</span></span><br><span class="line">guest_username=ftp  <span class="comment">#虚拟用户的宿主目录</span></span><br><span class="line">virtual_use_local_privs=YES  <span class="comment">#用户登录后操作主目录和本地用户具有同样的权限</span></span><br><span class="line">user_config_dir=/etc/vsftpd/vconf  <span class="comment">#虚拟用户主目录设置文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#新建/etc/vsftpd.chroot_list文件</span></span><br><span class="line">[root@localhost admin]<span class="comment"># touch /etc/vsftpd.chroot_list</span></span><br><span class="line"><span class="comment">#编辑/etc/vsftpd.chroot_list如下，每行一个用户名</span></span><br><span class="line">[root@localhost admin]<span class="comment"># vim /etc/vsftpd.chroot_list</span></span><br><span class="line">[root@localhost admin]<span class="comment"># cat /etc/vsftpd.chroot_list</span></span><br><span class="line">user1</span><br><span class="line">user2</span><br><span class="line"></span><br><span class="line"><span class="comment">#增加用户并指定主目录</span></span><br><span class="line">[root@localhost admin]<span class="comment"># mkdir /data</span></span><br><span class="line">[root@localhost admin]<span class="comment"># mkdir /data/user1</span></span><br><span class="line">[root@localhost admin]<span class="comment"># mkdir /data/user2</span></span><br><span class="line">[root@localhost admin]<span class="comment"># chmod -R 775 /data/user1 /data/user2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置用户名密码数据库</span></span><br><span class="line">[root@localhost admin]<span class="comment"># echo -e &quot;user1\npass1\nuser2\npass2&quot;&gt;/etc/vsftpd/vusers.list</span></span><br><span class="line">[root@localhost admin]<span class="comment"># cd /etc/vsftpd</span></span><br><span class="line">[root@localhost vsftpd]<span class="comment"># db_load -T -t hash -f vusers.list vusers.db</span></span><br><span class="line">[root@localhost vsftpd]<span class="comment"># chmod 600 vusers.*</span></span><br><span class="line"><span class="comment">#指定认证方式</span></span><br><span class="line">[root@localhost vsftpd]<span class="comment"># echo -e &quot;#%PAM-1.0\n\nauth required pam_userdb.so db=/etc/vsftpd/vusers\naccount required pam_userdb.so db=/etc/vsftpd/vusers&quot;&gt;/etc/pam.d/vsftpd.vu</span></span><br><span class="line">[root@localhost vsftpd]<span class="comment"># mkdir -p /etc/vsftpd/vconf</span></span><br><span class="line">[root@localhost vsftpd]<span class="comment"># cd /etc/vsftpd/vconf</span></span><br><span class="line">[root@localhost vconf]<span class="comment"># ls</span></span><br><span class="line">[root@localhost vconf]<span class="comment"># touch user1</span></span><br><span class="line">[root@localhost vconf]<span class="comment"># touch user2</span></span><br><span class="line">[root@localhost vconf]<span class="comment"># ls</span></span><br><span class="line">user1  user2</span><br><span class="line"></span><br><span class="line"><span class="comment">#编辑用户的用户名文件，指定主目录</span></span><br><span class="line">[root@localhost vconf]<span class="comment"># vim user1</span></span><br><span class="line">[root@localhost vconf]<span class="comment"># cat user1</span></span><br><span class="line">local_root=/data/user1</span><br><span class="line">[root@localhost vconf]<span class="comment"># vim user2</span></span><br><span class="line">[root@localhost vconf]<span class="comment"># cat user2</span></span><br><span class="line">local_root=/data/user2</span><br><span class="line"><span class="comment">#创建标识文件</span></span><br><span class="line">[root@localhost vconf]<span class="comment"># touch /data/user1/user1</span></span><br><span class="line">[root@localhost vconf]<span class="comment"># touch /data/user2/user2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#若连接ftp显示连接被拒绝，重启vsftpd服务后即可解决</span></span><br><span class="line">[root@localhost vconf]<span class="comment"># ftp 192.168.18.128 21</span></span><br><span class="line">Connected to 192.168.18.128 (192.168.18.128).</span><br><span class="line">220 (vsFTPd 3.0.2)</span><br><span class="line"><span class="comment">#输入用户名user1</span></span><br><span class="line">Name (192.168.18.128:root): user1</span><br><span class="line">331 Please specify the password.</span><br><span class="line"><span class="comment">#密码为之前设置的pass1</span></span><br><span class="line">Password:</span><br><span class="line">230 Login successful.</span><br><span class="line">Remote system <span class="built_in">type</span> is UNIX.</span><br><span class="line">Using binary mode to transfer files.</span><br><span class="line"><span class="comment">#查看文件</span></span><br><span class="line">ftp&gt; <span class="built_in">ls</span></span><br><span class="line">227 Entering Passive Mode (192,168,18,128,47,84).</span><br><span class="line">150 Here comes the directory listing.</span><br><span class="line">-rw-r--r--    1 0        0               0 Nov 17 01:53 user1</span><br><span class="line">226 Directory send OK.</span><br><span class="line"><span class="comment">#退出vsftpd</span></span><br><span class="line">ftp&gt; quit</span><br><span class="line">221 Goodbye.</span><br><span class="line"></span><br><span class="line"><span class="comment">#测试用户user2</span></span><br><span class="line">[root@localhost vconf]<span class="comment"># ftp 192.168.18.128 21</span></span><br><span class="line">Connected to 192.168.18.128 (192.168.18.128).</span><br><span class="line">220 (vsFTPd 3.0.2)</span><br><span class="line">Name (192.168.18.128:root): user2</span><br><span class="line">331 Please specify the password.</span><br><span class="line">Password:</span><br><span class="line">230 Login successful.</span><br><span class="line">Remote system <span class="built_in">type</span> is UNIX.</span><br><span class="line">Using binary mode to transfer files.</span><br><span class="line">ftp&gt; <span class="built_in">ls</span></span><br><span class="line">227 Entering Passive Mode (192,168,18,128,75,91).</span><br><span class="line">150 Here comes the directory listing.</span><br><span class="line">-rw-r--r--    1 0        0               0 Nov 17 01:53 user2</span><br><span class="line">226 Directory send OK.</span><br><span class="line"><span class="comment">#退出vsftpd</span></span><br><span class="line">ftp&gt; quit</span><br><span class="line">221 Goodbye.</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
        <category>操作系统</category>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>CentOS 7</tag>
        <tag>Linux</tag>
        <tag>网络管理</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker应用部署基础</title>
    <url>/2022/12/06/Docker%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="docker">Docker</h1>
<h2 id="容器简介">容器简介</h2>
<h3 id="什么是linux容器">什么是Linux容器</h3>
<p>Linux容器是与系统其他部分隔离开的一系列进程。它在另一个镜像中运行，并由该镜像提供支持进程所需的全部文件。容器提供的镜像包括了应用的所有依赖项，因此在开发到测试再到生产的过程中，容器都具有可移植性和一致性。</p>
<h3 id="容器等同于虚拟化吗">容器等同于虚拟化吗</h3>
<p>容器不完全是虚拟化。虚拟化使得许多系统可同时在单个系统上运行，而容器可共享同一个操作系统的内核，将应用进程与系统其他部分隔离开。</p>
<p>这便意味着，即使是让多个操作系统在单个虚拟机监控程序上运行以实现虚拟化，也不能达到和使用容器同等的轻量级效果。Linux容器可从单个操作系统运行，在所有容器中共享该操作系统，因此应用和服务能够保持轻量级，并可以快速运行。</p>
<h3 id="什么是docker">什么是Docker</h3>
<p>IT软件中所说的Docker，是指容器化技术，用于支持创建和使用Linux容器。借助Docker，可将容器当作重量轻、模块化的虚拟机使用，同时还将获得高度的灵活性，从而实现对容器的高效创建、部署及复制，并能将其从一个环境顺利迁移至另一个环境。</p>
<p>Docker技术使用Linux内核和内核功能来分隔进行，以便各进程相互独立运行。</p>
<h3 id="docker的目标">Docker的目标</h3>
<p>Docker的主要目标是构建、运输、处处运行（Build, Ship and Run any App, Angwhere）</p>
<p>构建：做一个Docker镜像</p>
<p>运输：Docker pull</p>
<p>运行：启动一个容器</p>
<p>每个容器都有自己的文件系统rootfs</p>
<h2 id="安装docker">安装Docker</h2>
<p>在Centos系统中，安装命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看当前的内核版本</span></span><br><span class="line">[root@localhost admin]<span class="comment"># uname -r</span></span><br><span class="line">3.10.0-1160.el7.x86_64</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看已安装的CentOS版本信息</span></span><br><span class="line">[root@localhost admin]<span class="comment"># cat /etc/redhat-release</span></span><br><span class="line">CentOS Linux release 7.9.2009 (Core)</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装需要的软件包，yum-util提供yum-config-manager功能，另两个是devicemapper驱动依赖</span></span><br><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置yun源，下面两个都可用</span></span><br><span class="line"><span class="comment">#（中央仓库）</span></span><br><span class="line">yum-config-manager --add-repo http://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"><span class="comment">#（阿里仓库）</span></span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看可用的Docker版本</span></span><br><span class="line">yum list docker-ce --showduplicates | <span class="built_in">sort</span> -r</span><br><span class="line"><span class="comment">#选择一个Docker版本并安装</span></span><br><span class="line">yum -y install docker-ce-18.03.1.ce</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动Docker并设置开机自启</span></span><br><span class="line">systemctl start docker</span><br><span class="line">systemctl <span class="built_in">enable</span> docker</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看Docker相关信息来验证是否正确安装了Docker</span></span><br><span class="line">docker version</span><br><span class="line"><span class="comment">#配置Docker镜像加速</span></span><br><span class="line">vim /etc/docker/daemon.json</span><br><span class="line">&#123;<span class="string">&quot;registry-mirrors&quot;</span>:[<span class="string">&quot;https://registry.docker-cn.com&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#启动第一个容器</span></span><br><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure>
<h2 id="hello-world">Hello World</h2>
<p>Docker允许在容器中运行应用程序，使用<code>docker run</code>命令来在容器中运行一个应用程序，输出Hello World如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># docker run ubuntu:15.10 /bin/echo &quot;Hello world&quot;</span></span><br><span class="line">Hello world</span><br><span class="line"><span class="comment">#其中ubuntu:15.10为所指定的要运行的镜像，Docker会首先从本地主机上查找镜像是否存在，若不存在，Dockwe就会从镜像仓库中下载公共镜像</span></span><br><span class="line"><span class="comment"># /bin/echo &quot;Hello world&quot;为在启动的容器里执行的命令</span></span><br></pre></td></tr></table></figure>
<h3 id="运行交互式的容器">运行交互式的容器</h3>
<p>通过Docker的两个参数<code>-i -t</code>，可以让Docker运行的容器实现交互式对话的能力：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># docker run -i -t ubuntu:15.10 /bin/bash</span></span><br><span class="line">root@7cf8cc6326f7:/<span class="comment">#</span></span><br><span class="line"><span class="comment">#此时已经进入了一个ubuntu:15.10系统的容器</span></span><br><span class="line"><span class="comment">#查看当前系统的版本信息</span></span><br><span class="line">root@7cf8cc6326f7:/<span class="comment"># cat /proc/version</span></span><br><span class="line">Linux version 3.10.0-1160.el7.x86_64 (mockbuild@kbuilder.bsys.centos.org) (gcc version 4.8.5 20150623 (Red Hat 4.8.5-44) (GCC) ) <span class="comment">#1 SMP Mon Oct 19 16:18:59 UTC 2020</span></span><br><span class="line"><span class="comment">#查看当前目录下的文件列表</span></span><br><span class="line">root@7cf8cc6326f7:/<span class="comment"># ls</span></span><br><span class="line">bin   dev  home  lib64  mnt  proc  run   srv  tmp  var</span><br><span class="line">boot  etc  lib   media  opt  root  sbin  sys  usr</span><br><span class="line"><span class="comment">#可以通过运行exit命令或使用Ctrl+D来退出容器</span></span><br><span class="line">root@7cf8cc6326f7:/<span class="comment"># exit</span></span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>
<h3 id="后台模式启动容器">后台模式启动容器</h3>
<p>使用以下命令可以创建一个以进程方式运行的容器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># docker run -d ubuntu:15.10 /bin/sh -c &quot;while true&#x27;do echo hello world; sleep 1;done&quot;</span></span><br><span class="line"><span class="comment">#输出的长字符串为容器的ID</span></span><br><span class="line">a26fa474ed2743ad2413c5e9c828faafa141ab1ec11ba3ffaf424de658b785de</span><br></pre></td></tr></table></figure>
<p>容器ID对每个容器来说都是唯一的，可以通过容器ID来查看对应的容器发生了什么。</p>
<p>另外打开一个终端，用<code>docker ps</code>查看容器是否进行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">54539564169f        ubuntu:15.10        <span class="string">&quot;/bin/bash&quot;</span>         31 seconds ago      Up 30 seconds                           nostalgic_jennings</span><br><span class="line"></span><br><span class="line"><span class="comment">#CONTAINER ID 为容器ID</span></span><br><span class="line"><span class="comment">#IMAGE 为使用的镜像</span></span><br><span class="line"><span class="comment">#COMMAND 为启动容器时运行的命令</span></span><br><span class="line"><span class="comment">#CREATED 为容器的创建时间</span></span><br><span class="line"><span class="comment">#STATUS 为容器状态</span></span><br><span class="line"><span class="comment">#PORTS 为容器的端口信息和使用的连接类型(tcp\udp)</span></span><br><span class="line"><span class="comment">#NAMES 为自动分配的容器名称</span></span><br></pre></td></tr></table></figure>
<p>容器的状态有7种：</p>
<ul>
<li>created（已创建）</li>
<li>restarting（重启中）</li>
<li>running或Up（运行中）</li>
<li>removing（迁移中）</li>
<li>paused（暂停）</li>
<li>exited（停止）</li>
<li>dead（死亡）</li>
</ul>
<h3 id="停止容器">停止容器</h3>
<p>使用<code>docker stop</code>命令可以使容器停止：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker stop 需要停止的容器ID</span><br></pre></td></tr></table></figure>
<h2 id="docker镜像管理">Docker镜像管理</h2>
<h3 id="docker镜像常用命令">Docker镜像常用命令</h3>
<p><strong>根据镜像名称获取镜像centos：</strong><code>docker pull centos</code></p>
<p><strong>查看当前主机镜像列表：</strong><code>docker image list</code></p>
<p><strong>查找镜像：</strong><code>docker search 镜像名</code></p>
<p><strong>导入镜像（docker-centos.tar.gz为镜像名）：</strong><code>docker image load -i docker-centos.tar.gz</code></p>
<p><strong>导出镜像centos：</strong><code>docker image save centos &gt; docker-centos.tar.gz</code></p>
<p><strong>删除镜像hello-world：</strong><code>docker rmi hello-world</code></p>
<p><strong>删除镜像centos：</strong><code>docker image rm centos:latest</code></p>
<p><strong>更新镜像</strong>：<code>docker run -t -i ubuntu:15.10 /bin/bash</code></p>
<p><strong>查看镜像的详细信息：</strong><code>docker image inspect centos</code></p>
<h3 id="使用dockerfile构建镜像">使用Dockerfile构建镜像</h3>
<p>当从docker镜像仓库中下载的镜像不能满足需求时，可以通过以下两种方式对镜像进行更改：</p>
<ul>
<li>从已经创建的容器中更新镜像，并提交这个镜像</li>
<li>使用Dockerfile命令来创建一个新的镜像</li>
</ul>
<p>首先，使用命令docker build 从零开始创建一个新的镜像，为此需要创建一个Dockerfile文件，其中包含一组指令来告诉Docker如何构建镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># touch Dockerfile</span></span><br><span class="line">[root@localhost admin]<span class="comment"># vim Dockerfile</span></span><br><span class="line">FROM    centos:6.7</span><br><span class="line">MAINTAINER      Fisher <span class="string">&quot;fisher@sudops.com&quot;</span></span><br><span class="line"></span><br><span class="line">RUN     /bin/echo <span class="string">&#x27;root:123456&#x27;</span> |chpasswd</span><br><span class="line">RUN     useradd runoob</span><br><span class="line">RUN     /bin/echo <span class="string">&#x27;runoob:123456&#x27;</span> |chpasswd</span><br><span class="line">RUN     /bin/echo -e <span class="string">&quot;LANG=\&quot;en_US.UTF-8\&quot;&quot;</span> &gt;/etc/default/local</span><br><span class="line">EXPOSE  22</span><br><span class="line">EXPOSE  80</span><br><span class="line">CMD     /usr/sbin/sshd -D</span><br></pre></td></tr></table></figure>
<p>每一个指令都会在镜像上创建一个新的层，每一个指令的前缀都必须是大写的。</p>
<p>dockerfile 命令详情如下：</p>
<ul>
<li><p>FROM：镜像从那里来</p></li>
<li><p>MAINTAINER：镜像维护者信息</p></li>
<li><p>RUN：构建镜像执行的命令，每一次RUN都会构建一层</p></li>
<li><p>CMD：容器启动的命令，如果有多个则以最后一个为准，也可以为ENTRYPOINT提供参数</p></li>
<li><p>VOLUME：定义数据卷，如果没有定义则使用默认</p></li>
<li><p>USER：指定后续执行的用户组和用户</p></li>
<li><p>WORKDIR：切换当前执行的工作目录</p></li>
<li><p>HEALTHCHECH：健康检测指令</p></li>
<li><p>ARG：变量属性值，但不在容器内部起作用</p></li>
<li><p>EXPOSE：暴露端口</p></li>
<li><p>ENV：变量属性值，容器内部也会起作用</p></li>
<li><p>ADD：添加文件，如果是压缩文件也解压</p></li>
<li><p>COPY：添加文件，以复制的形式</p></li>
<li><p>ENTRYPOINT：容器进入时执行的命令</p></li>
</ul>
<p>其中，FROM指令指定只用哪个镜像源，RUN指令告诉docker在镜像内执行命令安装了什么。然后便可以使用Dockerfile 文件通过docker build 命令来构建一个镜像。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># docker build -t runoob/centos:6.7 .</span></span><br><span class="line">Sending build context to Docker daemon  205.8MB</span><br><span class="line">Step 1/9 : FROM    centos:6.7</span><br><span class="line">6.7: Pulling from library/centos</span><br><span class="line">cbddbc0189a0: Pull complete </span><br><span class="line">Digest: sha256:4c952fc7d30ed134109c769387313ab864711d1bd8b4660017f9d27243622df1</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> centos:6.7</span><br><span class="line"> ---&gt; 9f1de3c6ad53</span><br><span class="line">Step 2/9 : MAINTAINER      Fisher <span class="string">&quot;fisher@sudops.com&quot;</span></span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> 5eaef1ca03a8</span><br><span class="line">Removing intermediate container 5eaef1ca03a8</span><br><span class="line"> ---&gt; fb3340e270e3</span><br><span class="line">...</span><br><span class="line">Step 9/9 : CMD     /usr/sbin/sshd -D</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> 5856113fd1c1</span><br><span class="line">Removing intermediate container 5856113fd1c1</span><br><span class="line"> ---&gt; 461a6483b47b</span><br><span class="line">Successfully built 461a6483b47b</span><br><span class="line">Successfully tagged runoob/centos:6.7</span><br><span class="line"></span><br><span class="line"><span class="comment">#其中参数-t为指定要创建的目标镜像名</span></span><br><span class="line"><span class="comment">#参数.为Dockerfile文件所在目录，也可以指定Dockerfile的绝对路径</span></span><br></pre></td></tr></table></figure>
<p>查看创建的镜像runoob/centos 是否已经存在：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">runoob/centos       6.7                 461a6483b47b        12 minutes ago      191MB</span><br><span class="line">nginx               latest              88736fe82739        2 weeks ago         142MB</span><br><span class="line">ubuntu              latest              a8780b506fa4        4 weeks ago         77.8MB</span><br><span class="line">hello-world         latest              feb5d9fea6a5        14 months ago       13.3kB</span><br><span class="line">centos              latest              5d0da3dc9764        14 months ago       231MB</span><br><span class="line">centos              6.7                 9f1de3c6ad53        3 years ago         191MB</span><br><span class="line">ubuntu              15.10               9b9cb95443b5        6 years ago         137MB</span><br><span class="line">training/webapp     latest              6fae60ef3446        7 years ago         349MB</span><br></pre></td></tr></table></figure>
<p>现在可以使用新的镜像来创建容器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># docker run -t -i runoob/centos:6.7 /bin/bash</span></span><br><span class="line">[root@c256ace5a3db /]<span class="comment"># id runoob</span></span><br><span class="line">uid=500(runoob) gid=500(runoob) <span class="built_in">groups</span>=500(runoob)</span><br></pre></td></tr></table></figure>
<p>可以看到新镜像已经包含创建的用户runoob。</p>
<h3 id="设置镜像标签">设置镜像标签</h3>
<p>使用docker tag 命令可以为镜像添加一个新的标签：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@localhost admin]<span class="comment"># docker tag 461a6483b47b runoob/centos:dev</span></span><br><span class="line">[root@localhost admin]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">runoob/centos       6.7                 461a6483b47b        21 minutes ago      191MB</span><br><span class="line">runoob/centos       dev                 461a6483b47b        21 minutes ago      191MB</span><br><span class="line">nginx               latest              88736fe82739        2 weeks ago         142MB</span><br><span class="line">ubuntu              latest              a8780b506fa4        4 weeks ago         77.8MB</span><br><span class="line">hello-world         latest              feb5d9fea6a5        14 months ago       13.3kB</span><br><span class="line">centos              latest              5d0da3dc9764        14 months ago       231MB</span><br><span class="line">centos              6.7                 9f1de3c6ad53        3 years ago         191MB</span><br><span class="line">ubuntu              15.10               9b9cb95443b5        6 years ago         137MB</span><br><span class="line">training/webapp     latest              6fae60ef3446        7 years ago         349MB</span><br></pre></td></tr></table></figure>
<h2 id="容器的日常管理">容器的日常管理</h2>
<h3 id="启动容器">启动容器</h3>
<p>最简单的运行一个容器：<code>docker run nginx</code></p>
<p>使用ubuntu镜像启动一个容器，参数以命令行模式进入该容器：<code>docker run -it ubuntu /bin/bash</code>（<code>-it</code>是指交互式终端）</p>
<p>快速启动容器：<code>docker run  centos:latest  /usr/bin/sleep 20</code></p>
<p><strong>注意：容器内的第一个进程必须一直处于运行的状态，否则这个容器，就会处于退出状态！</strong></p>
<p>查看正在运行的容器：<code>docker container ls</code></p>
<p>查看容器详细信息/id：<code>docker container  inspect  容器名称/id</code></p>
<h3 id="启动已停止运行的容器">启动已停止运行的容器</h3>
<p>查看所有容器（包括未运行的）：<code>docker ps -a</code></p>
<p>启动一个已停止运行的容器：<code>docker start 容器名称/id</code></p>
<p>自命名启动一个容器：<code>docker run --name ubuntu-test ubuntu /bin/bash</code></p>
<p>让ubuntu-test容器在后台运行：<code>docker run -itd --name ubuntu-test ubuntu /bin/bash</code></p>
<p>停止容器:<code>docker stop 容器名称/id</code>或者<code>docker container kill 容器名称/id</code></p>
<p>重启停止的容器：<code>docker restart 容器名称/id</code></p>
<h3 id="进入容器">进入容器</h3>
<p>在使用<code>-d</code>参数时，容器启动后会进入后台。此时想要进入容器，可以通过以下指令进入：</p>
<ul>
<li><code>docker attach 容器名称/id</code> ：此命令会退出容器终端，且会导致容器停止</li>
<li><code>docker exec -it 容器名称/id /bin/bash</code>：（推荐使用此命令，此命令会退出容器终端，但不会导致容器的停止）</li>
</ul>
<h3 id="导入容器快照">导入容器快照</h3>
<p>可以使用docker import 从容器快照文件中再导入为镜像，如将快照文件ubuntu.tar导入到镜像test/ubuntu:v1中：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> docker /ubuntu.tar | docker import - <span class="built_in">test</span>/ubuntu:v1</span><br></pre></td></tr></table></figure>
<p>也可以通过指定URL或某个目录来导入，如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker import http://example.com/exampleimage.tag example/imagerepo</span><br></pre></td></tr></table></figure>
<h3 id="删除容器">删除容器</h3>
<p>使用docker rm 命令可删除容器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">rm</span> -f 容器名称/id</span><br></pre></td></tr></table></figure>
<p>清理掉所有处于终止状态的容器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker container prune</span><br></pre></td></tr></table></figure>
<p>删除所有容器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">rm</span> -f `docker ps -a -q`</span><br></pre></td></tr></table></figure>
<h3 id="使用docker构建一个web应用程序">使用docker构建一个web应用程序</h3>
<p>在dockers容器中运行一个Python Flask应用来运行一个web应用：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># docker pull training/webapp</span></span><br><span class="line">[root@localhost admin]<span class="comment"># docker run -d -P training/webapp python app.py</span></span><br><span class="line">8294ae65cc7397df396f1846582d2c55896646996eab41a26f9be0c01f3270f8</span><br><span class="line"></span><br><span class="line"><span class="comment">#-d:让容器在后台运行</span></span><br><span class="line"><span class="comment">#-P:将容器内部使用的网络端口随机映射到使用的主机上</span></span><br></pre></td></tr></table></figure>
<p>不同指定的映射方法：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">参数</th>
<th style="text-align: left;">说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><code>-p hostPort:containerPort</code></td>
<td style="text-align: left;">端口映射 -p 8080:80</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>-p ip:hostPort:containerPort</code></td>
<td style="text-align: left;">配置监听地址 -p 10.0.0.100:8080:80</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>-p ip::containerPort</code></td>
<td style="text-align: left;">随机分配端口 -p 10.0.0.100::80</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>-p hostPort:containerPort:udp</code></td>
<td style="text-align: left;">指定协议 -p 8080:80:tcp</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>-p 81:80 –p 443:443</code></td>
<td style="text-align: left;">指定多个</td>
</tr>
</tbody>
</table>
<p>此时使用docker ps来查看正在运行的容器，会发现多了端口信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                     NAMES</span><br><span class="line">8294ae65cc73        training/webapp     <span class="string">&quot;python app.py&quot;</span>     49 seconds ago      Up 47 seconds       0.0.0.0:32768-&gt;5000/tcp   hardcore_brown</span><br></pre></td></tr></table></figure>
<p>从端口信息中可知，Docker开放了5000端口（默认Python Flask端口）映射到主机端口32768上，此时可以通过浏览器访问WEB应用：(路径为主机ip:32768端口)</p>
<p><img src="/2022/12/06/Docker%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2%E5%9F%BA%E7%A1%80/1.png"></p>
<p>可以通过参数<code>-p</code>来设置不一样的端口，如将容器内部的5000端口映射到本地主机的5000端口上：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost admin]# docker run -d -p 5000:5000 training/webapp python app.py</span><br><span class="line">743a62b49b70f9575690e2b85d4ea1eed94dd19fe9f6074f1d7069d977a2ecc8</span><br><span class="line">[root@localhost admin]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                     NAMES</span><br><span class="line">743a62b49b70        training/webapp     &quot;python app.py&quot;     22 seconds ago      Up 21 seconds       0.0.0.0:5000-&gt;5000/tcp    infallible_allen</span><br><span class="line">8294ae65cc73        training/webapp     &quot;python app.py&quot;     10 minutes ago      Up 10 minutes       0.0.0.0:32768-&gt;5000/tcp   hardcore_brown</span><br></pre></td></tr></table></figure>
<h3 id="网络端口的快捷方式">网络端口的快捷方式</h3>
<p>使用docker port 可以查看指定（ID或名字）容器的某个确定端口映射到宿主机的端口号。</p>
<p>查看容器端口情况可用：<code>docker port 容器名称/id</code>，如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># docker port 743a62b49b70</span></span><br><span class="line">5000/tcp -&gt; 0.0.0.0:5000</span><br><span class="line">[root@localhost admin]<span class="comment"># docker port infallible_allen</span></span><br><span class="line">5000/tcp -&gt; 0.0.0.0:5000</span><br></pre></td></tr></table></figure>
<h3 id="查看web应用程序日志">查看WEB应用程序日志</h3>
<p>查看容器内部的标准输出，可以查看端口信息和应用程序的访问日志：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># docker logs -f 743a62b49b70</span></span><br><span class="line"> * Running on http://0.0.0.0:5000/ (Press CTRL+C to quit)</span><br><span class="line">192.168.18.129 - - [06/Dec/2022 01:43:49] <span class="string">&quot;GET / HTTP/1.1&quot;</span> 200 -</span><br><span class="line">192.168.18.129 - - [06/Dec/2022 01:43:49] <span class="string">&quot;GET /favicon.ico HTTP/1.1&quot;</span> 404 -</span><br></pre></td></tr></table></figure>
<h3 id="检查web应用程序">检查WEB应用程序</h3>
<p>使用docker inspect来查看Docker的底层信息，它会返回一个JSON文件记录着Docker容器的配置和状态信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># docker inspect 743a62b49b70</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;Id&quot;</span>: <span class="string">&quot;743a62b49b70f9575690e2b85d4ea1eed94dd19fe9f6074f1d7069d977a2ecc8&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Created&quot;</span>: <span class="string">&quot;2022-12-06T01:42:44.255608149Z&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Path&quot;</span>: <span class="string">&quot;python&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Args&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;app.py&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;State&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Status&quot;</span>: <span class="string">&quot;running&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Running&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">&quot;Paused&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;Restarting&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;OOMKilled&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;Dead&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;Pid&quot;</span>: 17733,</span><br><span class="line">            <span class="string">&quot;ExitCode&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;Error&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;StartedAt&quot;</span>: <span class="string">&quot;2022-12-06T01:42:45.331479678Z&quot;</span>,</span><br><span class="line">            <span class="string">&quot;FinishedAt&quot;</span>: <span class="string">&quot;0001-01-01T00:00:00Z&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        ......</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h3 id="停止web应用容器">停止WEB应用容器</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># docker stop 743a62b49b70</span></span><br><span class="line">743a62b49b70</span><br></pre></td></tr></table></figure>
<h3 id="重启web应用容器">重启WEB应用容器</h3>
<p>已经停止的容器可以使用命令docker start来启动：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># docker start 743a62b49b70</span></span><br><span class="line">743a62b49b70</span><br><span class="line">[root@localhost admin]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                     NAMES</span><br><span class="line">743a62b49b70        training/webapp     <span class="string">&quot;python app.py&quot;</span>     14 minutes ago      Up 14 seconds       0.0.0.0:5000-&gt;5000/tcp    infallible_allen</span><br><span class="line">8294ae65cc73        training/webapp     <span class="string">&quot;python app.py&quot;</span>     24 minutes ago      Up 24 minutes       0.0.0.0:32768-&gt;5000/tcp   hardcore_brown</span><br></pre></td></tr></table></figure>
<h3 id="移除web应用容器">移除WEB应用容器</h3>
<p>使用docker rm 命令来删除不需要的容器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#删除容器时，容器必须是停止状态，否则会报以下错误</span></span><br><span class="line">[root@localhost admin]<span class="comment"># docker rm 743a62b49b70</span></span><br><span class="line">Error response from daemon: You cannot remove a running container 743a62b49b70f9575690e2b85d4ea1eed94dd19fe9f6074f1d7069d977a2ecc8. Stop the container before attempting removal or force remove</span><br><span class="line"></span><br><span class="line">t@localhost admin]<span class="comment"># docker stop 743a62b49b70</span></span><br><span class="line">743a62b49b70</span><br><span class="line">[root@localhost admin]<span class="comment"># docker rm 743a62b49b70</span></span><br><span class="line">743a62b49b70</span><br><span class="line">[root@localhost admin]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                     NAMES</span><br><span class="line">8294ae65cc73        training/webapp     <span class="string">&quot;python app.py&quot;</span>     26 minutes ago      Up 26 minutes       0.0.0.0:32768-&gt;5000/tcp   hardcore_brown</span><br></pre></td></tr></table></figure>
<h2 id="docker数据卷的管理">Docker数据卷的管理</h2>
<h3 id="挂载时创建卷">挂载时创建卷</h3>
<p>挂载卷：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># docker run -d -p 80:80 -v /data:/usr/share/nginx/html nginx:latest</span></span><br><span class="line">5f2530020849d15287b8bfd4dd2274945c0fd07078ab281a17e47bf2243ea113</span><br><span class="line"></span><br><span class="line"><span class="comment">#/usr/share/nginx/html为容器内站点目录</span></span><br></pre></td></tr></table></figure>
<p>在宿主机写入数据，查看：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># echo &quot;http://www.nmtui.com&quot; &gt;/data/index.html</span></span><br><span class="line">[root@localhost admin]<span class="comment"># curl 192.168.18.129</span></span><br><span class="line">http://www.nmtui.com</span><br><span class="line"></span><br><span class="line"><span class="comment">#192.168.18.129为宿主机的ip地址</span></span><br></pre></td></tr></table></figure>
<p>设置共享卷，使用同一个卷启动一个新的容器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># docker run -d -p 8080:80 -v /data:/usr/share/nginx/html nginx:latest</span></span><br><span class="line">ad8ef6db5021d356f6b56a62d6aaa584ad8be7b8c8cac73cc7bd08369acf41d4</span><br><span class="line">[root@localhost admin]<span class="comment"># curl 192.168.18.129:8080</span></span><br><span class="line">http://www.nmtui.com</span><br></pre></td></tr></table></figure>
<p>查看卷列表：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># docker volume ls</span></span><br><span class="line">DRIVER              VOLUME NAME</span><br></pre></td></tr></table></figure>
<h3 id="创建卷后挂载">创建卷后挂载</h3>
<p>创建一个卷：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># docker volume create</span></span><br><span class="line">8bbaf77b6495bbc8e50e75dfbd945badc0fdd2d2aced2359dc8d97308fa08d92</span><br><span class="line">[root@localhost admin]<span class="comment"># docker volume ls</span></span><br><span class="line">DRIVER              VOLUME NAME</span><br><span class="line"><span class="built_in">local</span>               8bbaf77b6495bbc8e50e75dfbd945badc0fdd2d2aced2359dc8d97308fa08d92</span><br></pre></td></tr></table></figure>
<p>指定卷名：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># docker volume create --name clsn</span></span><br><span class="line">clsn</span><br><span class="line">[root@localhost admin]<span class="comment"># docker volume ls</span></span><br><span class="line">DRIVER              VOLUME NAME</span><br><span class="line"><span class="built_in">local</span>               8bbaf77b6495bbc8e50e75dfbd945badc0fdd2d2aced2359dc8d97308fa08d92</span><br><span class="line"><span class="built_in">local</span>               clsn</span><br></pre></td></tr></table></figure>
<p>查看卷路径：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># docker volume inspect clsn</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;CreatedAt&quot;</span>: <span class="string">&quot;2022-12-06T00:50:33-08:00&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;local&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Labels&quot;</span>: &#123;&#125;,</span><br><span class="line">        <span class="string">&quot;Mountpoint&quot;</span>: <span class="string">&quot;/var/lib/docker/volumes/clsn/_data&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;clsn&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Options&quot;</span>: &#123;&#125;,</span><br><span class="line">        <span class="string">&quot;Scope&quot;</span>: <span class="string">&quot;local&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>使用卷创建：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># docker run -d -p 9000:80 -v clsn:/usr/share/nginx/html nginx:latest</span></span><br><span class="line">3d4e986ad050c199740ec6a2a4f38d0ba54ad78715cb72d21df396e0774f705f</span><br><span class="line"><span class="comment">#宿主机测试</span></span><br><span class="line">[root@localhost admin]<span class="comment"># echo &#x27;blog.nmtui.com&#x27; &gt;/var/lib/docker/volumes/clsn/_data/index.html</span></span><br><span class="line">[root@localhost admin]<span class="comment"># curl 192.168.18.129:9000</span></span><br><span class="line">blog.nmtui.com</span><br></pre></td></tr></table></figure>
<p>设置卷：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># docker run -d -P --volumes-from 5f2530020849d15287b8bfd4dd2274945c0fd07078ab281a17e47bf2243ea113 nginx:latest</span></span><br><span class="line">5e9a1d7ea93ea7b7fb2d6918cf1cc8805aff41daa21b7e7656be1a14b2662e94</span><br></pre></td></tr></table></figure>
<p>查看使用的端口：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># netstat -lntup</span></span><br><span class="line">Active Internet connections (only servers)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    </span><br><span class="line">tcp        0      0 0.0.0.0:111             0.0.0.0:*               LISTEN      595/rpcbind         </span><br><span class="line">tcp        0      0 192.168.122.1:53        0.0.0.0:*               LISTEN      1320/dnsmasq        </span><br><span class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      1074/sshd           </span><br><span class="line">tcp        0      0 127.0.0.1:631           0.0.0.0:*               LISTEN      1069/cupsd          </span><br><span class="line">tcp        0      0 127.0.0.1:25            0.0.0.0:*               LISTEN      1352/master         </span><br><span class="line">tcp6       0      0 :::9000                 :::*                    LISTEN      4270/docker-proxy   </span><br><span class="line">tcp6       0      0 :::111                  :::*                    LISTEN      595/rpcbind         </span><br><span class="line">tcp6       0      0 :::8080                 :::*                    LISTEN      3992/docker-proxy   </span><br><span class="line">tcp6       0      0 :::80                   :::*                    LISTEN      3794/docker-proxy   </span><br><span class="line">tcp6       0      0 :::22                   :::*                    LISTEN      1074/sshd           </span><br><span class="line">tcp6       0      0 ::1:631                 :::*                    LISTEN      1069/cupsd          </span><br><span class="line">tcp6       0      0 ::1:25                  :::*                    LISTEN      1352/master         </span><br><span class="line">tcp6       0      0 :::32768                :::*                    LISTEN      4388/docker-proxy   </span><br><span class="line">[root@localhost admin]<span class="comment"># curl 192.168.18.129:32768</span></span><br><span class="line">http://www.nmtui.com</span><br></pre></td></tr></table></figure>
<h3 id="手动将容器保存为镜像">手动将容器保存为镜像</h3>
<p>启动一个centos6.8的镜像：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># docker pull centos:6.8</span></span><br><span class="line">[root@localhost admin]<span class="comment"># docker run -it -p 1022:22 centos:6.8 /bin/bash</span></span><br><span class="line"><span class="comment">#在容器中安装sshd服务并修改系统密码</span></span><br><span class="line">[root@4d61bc1e379d /]<span class="comment"># yum install openssh-server -y</span></span><br><span class="line">[root@4d61bc1e379d yum.repos.d]<span class="comment"># echo &quot;root:123456&quot; |chpasswd</span></span><br><span class="line">[root@4d61bc1e379d yum.repos.d]<span class="comment"># /etc/init.d/sshd start</span></span><br><span class="line">Generating SSH2 RSA host key:                              [  OK  ]</span><br><span class="line">Generating SSH1 RSA host key:                              [  OK  ]</span><br><span class="line">Generating SSH2 DSA host key:                              [  OK  ]</span><br><span class="line">Starting sshd:                                             [  OK  ]</span><br></pre></td></tr></table></figure>
<p>启动完成后镜像进行ssh连接测试。</p>
<p>将容器提交为镜像：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># docker commit 4d61bc1e379d centos6-ssh</span></span><br><span class="line">sha256:9591270dae2dda5a96c94c47e291aae0eeab7599ada3cdf44701c4dfd72e8cee</span><br></pre></td></tr></table></figure>
<p>使用新的镜像启动容器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># docker run -d -p 1122:22 centos6-ssh:latest /usr/sbin/sshd -D</span></span><br><span class="line">0019e8bb73550eec2526a101a19814ec92dfb045dd2fdca4d36175005e63ba20</span><br><span class="line">[root@localhost admin]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID        IMAGE                COMMAND                  CREATED             STATUS              PORTS                   NAMES</span><br><span class="line">0019e8bb7355        centos6-ssh:latest   <span class="string">&quot;/usr/sbin/sshd -D&quot;</span>      30 seconds ago      Up 28 seconds       0.0.0.0:1122-&gt;22/tcp    blissful_albattani</span><br><span class="line">5e9a1d7ea93e        nginx:latest         <span class="string">&quot;/docker-entrypoint.…&quot;</span>   2 hours ago         Up 2 hours          0.0.0.0:32768-&gt;80/tcp   xenodochial_kare</span><br><span class="line">3d4e986ad050        nginx:latest         <span class="string">&quot;/docker-entrypoint.…&quot;</span>   2 hours ago         Up 2 hours          0.0.0.0:9000-&gt;80/tcp    vibrant_bhabha</span><br><span class="line">ad8ef6db5021        nginx:latest         <span class="string">&quot;/docker-entrypoint.…&quot;</span>   2 hours ago         Up 2 hours          0.0.0.0:8080-&gt;80/tcp    awesome_jang</span><br><span class="line">5f2530020849        nginx:latest         <span class="string">&quot;/docker-entrypoint.…&quot;</span>   2 hours ago         Up 2 hours          0.0.0.0:80-&gt;80/tcp      pensive_lumiere</span><br><span class="line">76cf3b4dce49        ubuntu               <span class="string">&quot;/bin/bash&quot;</span>              8 hours ago         Up 2 hours                                  test2</span><br><span class="line">58bbd5afb8bf        ubuntu               <span class="string">&quot;/bin/bash&quot;</span>              8 hours ago         Up 2 hours                                  test1</span><br></pre></td></tr></table></figure>
<p>进入到容器内，在容器里安装httpd服务：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># docker exec -it 0019e8bb7355 /bin/bash</span></span><br><span class="line">[root@0019e8bb7355 /]<span class="comment"># yum install https -y</span></span><br></pre></td></tr></table></figure>
<p>编写启动脚本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@0019e8bb7355 /]<span class="comment"># touch init.sh</span></span><br><span class="line">[root@0019e8bb7355 /]<span class="comment"># vi init.sh</span></span><br><span class="line"><span class="comment">#!/bin/bash </span></span><br><span class="line">/etc/init.d/httpd start </span><br><span class="line">/usr/sbin/sshd -D</span><br><span class="line">[root@0019e8bb7355 /]<span class="comment"># chmod +x init.sh</span></span><br></pre></td></tr></table></figure>
<p>再次提交为新的镜像：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># docker commit 0019e8bb7355 centos6-httpd</span></span><br><span class="line">sha256:bd9f5c339cd8494f82b8cb06396446143824f819c59c9b971687f6a9193c718a</span><br></pre></td></tr></table></figure>
<p>启动镜像，做好端口映射。并在浏览器中输入宿主机的ip地址进行测试访问：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># docker run -d -p 1222:22 -p 88:88 centos6-httpd /init.sh</span></span><br><span class="line">ecbc482a781975538e7c83763fb1573af811a5baf2bc7c93de176ebd5576f407</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="/2022/12/06/Docker%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2%E5%9F%BA%E7%A1%80/2.png"></p>
<h2 id="docker容器连接">Docker容器连接</h2>
<p>容器中可以运行一些网络应用，要让外部也可以访问这些应用，可以通过<code>-p</code>或<code>-P</code>参数来指定端口映射。下面来实现通过端口连接到一个docker容器。</p>
<h3 id="网络端口映射">网络端口映射</h3>
<p>首先创建一个nginx容器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># docker run -d -p 80:80 nginx</span></span><br><span class="line">6675f5ad199295dd4b69f33e9b3f5b6a0e0b7b67df371f229a12e381f5083440</span><br><span class="line"><span class="comment">#创建容器，做link，并进入容器中</span></span><br><span class="line">[root@localhost admin]<span class="comment"># docker run -it --link quirky_brown:web01 centos-ssh /bin/bash</span></span><br><span class="line"><span class="comment">#在容器中访问nginx容器是否可以ping通</span></span><br><span class="line">ping web01</span><br></pre></td></tr></table></figure>
<p>使用-P绑定端口号后，使用docker ps可以看到容器端口5000绑定主机端口32770</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                     NAMES</span><br><span class="line">998f4a68770c        training/webapp     <span class="string">&quot;python app.py&quot;</span>     13 seconds ago      Up 12 seconds       0.0.0.0:32770-&gt;5000/tcp   angry_bassi</span><br></pre></td></tr></table></figure>
<p>此外，还可以指定容器绑定的网络地址，如绑定127.0.0.1。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># docker run -d -p 127.0.0.1:5001:5000 training/webapp python app.py</span></span><br><span class="line">6124b2108719c7e18b8b35992a06b3f66036ad0b951744bcfc1ca17158c2b6e3</span><br><span class="line">[root@localhost admin]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                      NAMES</span><br><span class="line">6124b2108719        training/webapp     <span class="string">&quot;python app.py&quot;</span>     6 seconds ago       Up 4 seconds        127.0.0.1:5001-&gt;5000/tcp   keen_sammet</span><br><span class="line">998f4a68770c        training/webapp     <span class="string">&quot;python app.py&quot;</span>     4 minutes ago       Up 4 minutes        0.0.0.0:32770-&gt;5000/tcp    angry_bassi</span><br></pre></td></tr></table></figure>
<p>这样便可以通过访问127.0.0.1:5001来访问容器的5000端口。这里默认都是绑定tcp端口，<strong>若要绑定UDP端口，则需要在端口后面加上/udp。</strong></p>
<h3 id="docker容器互联">Docker容器互联</h3>
<p>端口映射并不是唯一把docker连接到另一个容器的方法。docker有一个连接系统允许将多个容器连接在一起，共享连接信息。docker连接会创建一个父子关系，其中父容器可以看到子容器的信息。</p>
<h4 id="容器命名">容器命名</h4>
<p>当要创建一个容器时，docker会自动对他进行命名，此外也可以使用--name标识来命名容器。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># docker run -d -P --name runoob training/webapp python app.py</span></span><br><span class="line">561d0028ee9aafe9d014340ad8cecbaf7f5e395f05432e3bd149c797e5dd5f13</span><br><span class="line">[root@localhost admin]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                      NAMES</span><br><span class="line">561d0028ee9a        training/webapp     <span class="string">&quot;python app.py&quot;</span>     5 seconds ago       Up 4 seconds        0.0.0.0:32771-&gt;5000/tcp    runoob</span><br></pre></td></tr></table></figure>
<h4 id="连接容器">连接容器</h4>
<p>使用<code>--link</code>参数可以让容器之间安全的进行交互。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建一个新的数据库容器</span></span><br><span class="line">[root@localhost admin]<span class="comment"># docker run -d --name db training/postgres</span></span><br><span class="line">Unable to find image <span class="string">&#x27;training/postgres:latest&#x27;</span> locally</span><br><span class="line">latest: Pulling from training/postgres</span><br><span class="line">a3ed95caeb02: Pull complete </span><br><span class="line">6e71c809542e: Pull complete </span><br><span class="line">2978d9af87ba: Pull complete </span><br><span class="line">e1bca35b062f: Pull complete </span><br><span class="line">500b6decf741: Pull complete </span><br><span class="line">74b14ef2151f: Pull complete </span><br><span class="line">7afd5ed3826e: Pull complete </span><br><span class="line">3c69bb244f5e: Pull complete </span><br><span class="line">d86f9ec5aedf: Pull complete </span><br><span class="line">010fabf20157: Pull complete </span><br><span class="line">Digest: sha256:a945dc6dcfbc8d009c3d972931608344b76c2870ce796da00a827bd50791907e</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> training/postgres:latest</span><br><span class="line">ef6af7333f0af9302cc6935d48be863ba2db0fdb2c56eacf42c074aa62982b12</span><br><span class="line"><span class="comment">#然后创建一个新的web容器，并将他连接到db容器</span></span><br><span class="line">[root@localhost admin]<span class="comment"># docker run -d -P --name web --link db:db training/webapp python app.py</span></span><br><span class="line">62888e6365e6551d2ceb6a6ddf7afcd39e861119f97b691b5116dba8e250e444</span><br><span class="line">[root@localhost admin]<span class="comment"># </span></span><br></pre></td></tr></table></figure>
<p>此时db容器和web容器建立了互联关系。</p>
<p><code>--link</code>参数的格式为<code>--link name:alias</code>,其中<code>name</code>是要链接的容器的名称，<code>alias</code>是这个连接的别名。</p>
<p>此时使用<code>docker ps</code>来查看容器的连接：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                     NAMES</span><br><span class="line">62888e6365e6        training/webapp     <span class="string">&quot;python app.py&quot;</span>          4 minutes ago       Up 4 minutes        0.0.0.0:32769-&gt;5000/tcp   web</span><br><span class="line">ef6af7333f0a        training/postgres   <span class="string">&quot;su postgres -c &#x27;/us…&quot;</span>   7 minutes ago       Up 7 minutes        5432/tcp                  db</span><br></pre></td></tr></table></figure>
<p>Docker在两个互联的容器之间创建了一个安全隧道，而且不用映射他们的端口到宿主主机上、在启动db容器的时候并没有使用<code>-p</code>和<code>-P</code>标记，从而避免了暴露数据库端口到外部网络上的可能。</p>
<p>Docker通过2种方式为容器公开连接信息：</p>
<ul>
<li>环境变量</li>
<li>更新<code>/etc/hosts</code>文件</li>
</ul>
<p>使用<code>env</code>命令来查看web容器的环境变量：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># docker run --rm --name web2 --link db:db training/webapp env</span></span><br><span class="line">PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin</span><br><span class="line">HOSTNAME=1621d6dd6804</span><br><span class="line">DB_PORT=tcp://172.17.0.2:5432</span><br><span class="line">DB_PORT_5432_TCP=tcp://172.17.0.2:5432</span><br><span class="line">DB_PORT_5432_TCP_ADDR=172.17.0.2</span><br><span class="line">DB_PORT_5432_TCP_PORT=5432</span><br><span class="line">DB_PORT_5432_TCP_PROTO=tcp</span><br><span class="line">DB_NAME=/web2/db</span><br><span class="line">DB_ENV_PG_VERSION=9.3</span><br><span class="line">HOME=/root</span><br><span class="line"></span><br><span class="line"><span class="comment">#DB_开头的环境变量是供web容器连接db容器使用，前缀采用大写的连接别名</span></span><br></pre></td></tr></table></figure>
<p>除了环境变量，Docker还添加host信息到父容器的<code>/etc/hosts</code>的文件。下面是父容器web的hosts文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># docker run -t -i --rm --link db:db training/webapp /bin/bash</span></span><br><span class="line">root@5f57b7dcc730:/opt/webapp<span class="comment"># cat /etc/hosts</span></span><br><span class="line">127.0.0.1	localhost</span><br><span class="line">::1	localhost ip6-localhost ip6-loopback</span><br><span class="line">fe00::0	ip6-localnet</span><br><span class="line">ff00::0	ip6-mcastprefix</span><br><span class="line">ff02::1	ip6-allnodes</span><br><span class="line">ff02::2	ip6-allrouters</span><br><span class="line">172.17.0.2	db ef6af7333f0a</span><br><span class="line">172.17.0.4	5f57b7dcc730</span><br><span class="line"></span><br><span class="line"><span class="comment">#这里有2个host，第一个是web容器，web容器用id作为它的主机名。第二个是db容器的ip和主机名</span></span><br></pre></td></tr></table></figure>
<p>在web容器中安装ping命令来测试是否跟db容器的连通：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@5f57b7dcc730:/opt/webapp<span class="comment"># apt-get install -yqq inetutils-ping</span></span><br><span class="line">root@5f57b7dcc730:/opt/webapp<span class="comment"># ping db</span></span><br><span class="line">PING db (172.17.0.2): 56 data bytes</span><br><span class="line">64 bytes from 172.17.0.2: icmp_seq=0 ttl=64 time=0.740 ms</span><br><span class="line">64 bytes from 172.17.0.2: icmp_seq=1 ttl=64 time=0.089 ms</span><br><span class="line">64 bytes from 172.17.0.2: icmp_seq=2 ttl=64 time=0.075 ms</span><br></pre></td></tr></table></figure>
<p>用ping来测试db容器，它会解析成172.17.0.2。</p>
<p>注意：官方的Ubuntu镜像默认没有安装ping，因此需要自行安装。</p>
<p>用户可以链接多个父容器到子容器，比如可以链接多个web到db容器上。</p>
<h2 id="docker仓库管理">Docker仓库管理</h2>
<p>仓库是集中存放镜像的地方，目前Docker官方维护了一个公共仓库Docker Hub，大部分需求的镜像都可以通过在Docker Hub中直接找到。</p>
<h3 id="登录和登出">登录和登出</h3>
<p>若还没有Docker账号，可在 <a href="https://hub.docker.com/">https://hub.docker.com</a> 上免费注册一个。然后输入用户名和密码登录，登录成功后便可以从Docker hub上拉去自己账号下的全部镜像。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># docker login</span></span><br><span class="line">Login with your Docker ID to push and pull images from Docker Hub. If you don<span class="string">&#x27;t have a Docker ID, head over to https://hub.docker.com to create one.</span></span><br><span class="line"><span class="string">Username: tangmenjue</span></span><br><span class="line"><span class="string">Password: </span></span><br><span class="line"><span class="string">Login Succeeded</span></span><br></pre></td></tr></table></figure>
<p>使用<code>docker logout</code>命令可以登出Docker hub。</p>
<h3 id="拉取镜像">拉取镜像</h3>
<p>使用<code>docker search</code>命令可以查找官方仓库中的镜像，并利用<code>docker pull</code>命令将其下载到本地，例如要下载ubuntu镜像，操作如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># docker search ubuntu</span></span><br><span class="line">NAME                             DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED</span><br><span class="line">ubuntu                           Ubuntu is a Debian-based Linux operating sys…   15312               [OK]                </span><br><span class="line">websphere-liberty                WebSphere Liberty multi-architecture images …   290                 [OK]                </span><br><span class="line">ubuntu-upstart                   DEPRECATED, as is Upstart (find other proces…   112                 [OK]                </span><br><span class="line">neurodebian                      NeuroDebian provides neuroscience research s…   97                  [OK]                </span><br><span class="line">ubuntu/nginx                     Nginx, a high-performance reverse proxy &amp; we…   69                                      </span><br><span class="line">open-liberty                     Open Liberty multi-architecture images based…   56                  [OK]                </span><br><span class="line">ubuntu/apache2                   Apache, a secure &amp; extensible open-source HT…   50                                      </span><br><span class="line">ubuntu-debootstrap               DEPRECATED; use <span class="string">&quot;ubuntu&quot;</span> instead                49                  [OK]                </span><br><span class="line">...</span><br><span class="line">[root@localhost admin]<span class="comment"># docker pull ubuntu</span></span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/ubuntu</span><br><span class="line">7b1a6ab2e44d: Pull complete </span><br><span class="line">Digest: sha256:626ffe58f6e7566e00254b638eb7e0f3b11d4da9675088f4781a50ae288f3322</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> ubuntu:latest</span><br></pre></td></tr></table></figure>
<h3 id="推送镜像">推送镜像</h3>
<p>用户登录后，可以通过<code>docker push</code>命令将自己的镜像推送到Docker Hub，如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看目前已有的镜像</span></span><br><span class="line">root@localhost admin]<span class="comment"># docker image ls</span></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">centos              latest              5d0da3dc9764        14 months ago       231MB</span><br><span class="line">centos              6.7                 9f1de3c6ad53        3 years ago         191MB</span><br><span class="line">centos              6.8                 82f3b5f3c58f        3 years ago         195MB</span><br><span class="line">ubuntu              15.10               9b9cb95443b5        6 years ago         137MB</span><br><span class="line">training/webapp     latest              6fae60ef3446        7 years ago         349MB</span><br><span class="line">training/postgres   latest              6fa973bb3c26        8 years ago         365MB</span><br><span class="line"><span class="comment">#给ubuntu:15.10镜像打上标签，以下的tangmenjue都要替换成自己的Docker账号用户名</span></span><br><span class="line">[root@localhost admin]<span class="comment"># docker tag ubuntu:15.10 tangmenjue/ubuntu:15.10</span></span><br><span class="line"><span class="comment">#查看镜像的变化</span></span><br><span class="line">[root@localhost admin]<span class="comment"># docker image ls</span></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">centos              latest              5d0da3dc9764        14 months ago       231MB</span><br><span class="line">centos              6.7                 9f1de3c6ad53        3 years ago         191MB</span><br><span class="line">centos              6.8                 82f3b5f3c58f        3 years ago         195MB</span><br><span class="line">ubuntu              15.10               9b9cb95443b5        6 years ago         137MB</span><br><span class="line">tangmenjue/ubuntu   15.10               9b9cb95443b5        6 years ago         137MB</span><br><span class="line">training/webapp     latest              6fae60ef3446        7 years ago         349MB</span><br><span class="line">training/postgres   latest</span><br><span class="line"></span><br><span class="line"><span class="comment">#将自己的镜像推送到Docker Hub</span></span><br><span class="line"></span><br><span class="line">[root@localhost admin]<span class="comment"># docker push tangmenjue/ubuntu:15.10</span></span><br><span class="line">The push refers to repository [docker.io/tangmenjue/ubuntu]</span><br><span class="line">98d59071f692: Pushed </span><br><span class="line">af288f00b8a7: Pushed </span><br><span class="line">4b955941a4d0: Mounted from library/ubuntu </span><br><span class="line">f121afdbbd5d: Pushed </span><br><span class="line">15.10: digest: sha256:cc56b237986f2b9282f058cc7875ff5e9d0d9081934c8982ea1ec21288eeefeb size: 1150</span><br><span class="line">[root@localhost admin]<span class="comment"># docker search tangmenjue/ubuntu</span></span><br><span class="line">NAME                DESCRIPTION         STARS               OFFICIAL            AUTOMATED</span><br><span class="line">tangmenjue/ubuntu                       0                               </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Docker</category>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>应用部署</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker应用部署实战</title>
    <url>/2022/12/15/Docker%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2%E5%AE%9E%E6%88%98/</url>
    <content><![CDATA[<h1 id="centos部署应用步骤">Centos部署应用步骤</h1>
<h2 id="配置代码运行环境">配置代码运行环境</h2>
<h3 id="nginx下载及配置">nginx下载及配置</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#centos下载apache</span></span><br><span class="line">[root@localhost admin]<span class="comment"># yum install httpd </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#centos下载nginx</span></span><br><span class="line">[root@localhost admin]<span class="comment"># yum install epel-release</span></span><br><span class="line">[root@localhost httpd]<span class="comment"># yum install -y update</span></span><br><span class="line">[root@localhost httpd]<span class="comment"># yum install -y nginx</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#打开防火墙端口80和443</span></span><br><span class="line">[root@localhost httpd]<span class="comment"># firewall-cmd --permanent --zone=public --add-service=http</span></span><br><span class="line">[root@localhost httpd]<span class="comment"># firewall-cmd --permanent --zone=public --add-service=https</span></span><br><span class="line">[root@localhost httpd]<span class="comment"># firewall-cmd --reload</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#启动nignx服务</span></span><br><span class="line">[root@localhost httpd]<span class="comment"># systemctl start nginx</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看nignx进程的状态</span></span><br><span class="line">[root@localhost admin]<span class="comment"># systemctl status nginx</span></span><br><span class="line">● nginx.service - The nginx HTTP and reverse proxy server</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/nginx.service; disabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since 日 2022-12-11 18:32:09 PST; 1min 10s ago</span><br><span class="line">  Process: 5678 ExecStart=/usr/sbin/nginx (code=exited, status=0/SUCCESS)</span><br><span class="line">  Process: 5675 ExecStartPre=/usr/sbin/nginx -t (code=exited, status=0/SUCCESS)</span><br><span class="line">  Process: 5670 ExecStartPre=/usr/bin/rm -f /run/nginx.pid (code=exited, status=0/SUCCESS)</span><br><span class="line"> Main PID: 5680 (nginx)</span><br><span class="line">    Tasks: 2</span><br><span class="line">   CGroup: /system.slice/nginx.service</span><br><span class="line">           ├─5680 nginx: master process /usr/sbin/nginx</span><br><span class="line">           └─5683 nginx: worker process</span><br><span class="line"></span><br><span class="line">12月 11 18:32:09 localhost.localdomain systemd[1]: Starting The nginx HTTP a...</span><br><span class="line">12月 11 18:32:09 localhost.localdomain nginx[5675]: nginx: the configuration...</span><br><span class="line">12月 11 18:32:09 localhost.localdomain nginx[5675]: nginx: configuration fil...</span><br><span class="line">12月 11 18:32:09 localhost.localdomain systemd[1]: Started The nginx HTTP an...</span><br><span class="line">Hint: Some lines were ellipsized, use -l to show <span class="keyword">in</span> full.</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置nignx服务开机自启动</span></span><br><span class="line">[root@localhost httpd]<span class="comment"># systemctl enable nginx</span></span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/nginx.service to /usr/lib/systemd/system/nginx.service.</span><br><span class="line"></span><br><span class="line"><span class="comment">#进入conf.d目录新建文件并填入以下内容</span></span><br><span class="line">[root@localhost httpd]<span class="comment"># cd /etc/nginx/conf.d</span></span><br><span class="line">[root@localhost conf.d]<span class="comment"># ls</span></span><br><span class="line">[root@localhost conf.d]<span class="comment"># touch flask_test.conf</span></span><br><span class="line">[root@localhost conf.d]<span class="comment"># vi flask_test.conf</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># api代理转发</span></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_redirect  off;</span><br><span class="line">        proxy_set_header    Host <span class="variable">$host</span>;</span><br><span class="line">        proxy_set_header    X-Real-IP            <span class="variable">$remote_addr</span>;</span><br><span class="line">        proxy_set_header    X-Forwarded-For      <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        proxy_set_header    X-Forwarded-Proto    <span class="variable">$scheme</span>;</span><br><span class="line">        proxy_pass http://127.0.0.1:8000;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#重启nginx</span></span><br><span class="line">[root@localhost conf.d]<span class="comment"># systemctl reload nginx</span></span><br></pre></td></tr></table></figure>
<h3 id="pgsql下载及配置">pgsql下载及配置</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#centos下载pgsql</span></span><br><span class="line">[root@localhost httpd]<span class="comment"># yum install https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm</span></span><br><span class="line">[root@localhost httpd]<span class="comment"># yum install postgresql12-server</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#启动pgsql服务</span></span><br><span class="line">[root@localhost httpd]<span class="comment"># postgresql-12-setup initdb</span></span><br><span class="line">Initializing database ... OK</span><br><span class="line">[root@localhost httpd]<span class="comment"># systemctl start postgresql-12</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置pgsql服务开机自启动</span></span><br><span class="line">[root@localhost httpd]<span class="comment"># systemctl enable postgresql-12</span></span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/postgresql-12.service to /usr/lib/systemd/system/postgresql-12.service.</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置pgsql</span></span><br><span class="line">[root@localhost bin]<span class="comment"># su - postgres</span></span><br><span class="line">-bash-4.2$ psql</span><br><span class="line">psql (12.13)</span><br><span class="line">Type <span class="string">&quot;help&quot;</span> <span class="keyword">for</span> <span class="built_in">help</span>.</span><br><span class="line">postgres=<span class="comment"># alter user postgres with password &#x27;123456&#x27;</span></span><br><span class="line">postgres-<span class="comment"># \q</span></span><br><span class="line">-bash-4.2$ <span class="built_in">exit</span></span><br><span class="line"><span class="built_in">logout</span></span><br><span class="line">[root@localhost bin]<span class="comment"># find / -name postgresql.conf</span></span><br><span class="line">find: ‘/run/user/1000/gvfs’: 权限不够</span><br><span class="line">/var/lib/pgsql/12/data/postgresql.conf</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置远程访问</span></span><br><span class="line">[root@localhost bin]<span class="comment"># vi /var/lib/pgsql/12/data/postgresql.conf</span></span><br><span class="line">listen_addressses=<span class="string">&quot;*&quot;</span></span><br><span class="line">port = 5432 </span><br></pre></td></tr></table></figure>
<h3 id="node.js安装">node.js安装</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装node.js</span></span><br><span class="line">[root@localhost admin]<span class="comment"># wget https://nodejs.org/dist/v16.16.0/node-v16.16.0-linux-x64.tar.xz</span></span><br><span class="line">[root@localhost admin]<span class="comment"># tar -xvf node-v16.16.0-linux-x64.tar.xz</span></span><br><span class="line">[root@localhost admin]<span class="comment"># mv node-v16.16.0-linux-x64  node.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查找node.js路径</span></span><br><span class="line">[root@localhost admin]<span class="comment"># find / -name node.js</span></span><br><span class="line">find: ‘/run/user/1000/gvfs’: 权限不够</span><br><span class="line">/home/admin/node.js</span><br><span class="line">/home/admin/node.js/lib/node_modules/npm/node_modules/debug/src/node.js</span><br><span class="line">/home/admin/node.js/lib/node_modules/npm/node_modules/@npmcli/arborist/lib/node.js</span><br><span class="line">/home/admin/node.js/lib/node_modules/npm/node_modules/@npmcli/fs/lib/common/node.js</span><br><span class="line">/home/admin/node.js/lib/node_modules/npm/node_modules/util-deprecate/node.js</span><br><span class="line"><span class="comment">#检查node版本</span></span><br><span class="line">[root@localhost admin]<span class="comment"># cd /home/admin/node.js/bin</span></span><br><span class="line">[root@localhost bin]<span class="comment"># ./node -v</span></span><br><span class="line">v16.16.0</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加node.js的环境变量：</span></span><br><span class="line">[root@localhost bin]<span class="comment"># vi /etc/profile</span></span><br><span class="line"><span class="comment">#在文件末尾加上两句代码如下：</span></span><br><span class="line"><span class="comment">#NODE_HOME为实际中node的安装位置目录</span></span><br><span class="line"><span class="built_in">export</span> NODE_HOME=/home/admin/node.js</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$NODE_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="comment">#按ESC+:+wq退出vim模式，输入以下命令使配置生效</span></span><br><span class="line">[root@localhost bin]<span class="comment"># source /etc/profile</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置软连接将环境配置放到开机自启动的脚本中</span></span><br><span class="line">[root@localhost bin]<span class="comment"># ln -s /usr/local/node.js/bin/node /usr/local/bin/node</span></span><br><span class="line">[root@localhost bin]<span class="comment"># ln -s /usr/local/node.js/bin/npm /usr/local/bin/npm</span></span><br><span class="line"><span class="comment">#查看虚拟机ip</span></span><br><span class="line">[root@localhost admin]<span class="comment"># ifconfig</span></span><br><span class="line">ens33: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.60.129  netmask 255.255.255.0  broadcast 192.168.60.255</span><br><span class="line">        inet6 fe80::b659:fb9c:695f:5eff  prefixlen 64  scopeid 0x20&lt;<span class="built_in">link</span>&gt;</span><br><span class="line">        ether 00:0c:29:b0:6f:2a  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 491682  bytes 725762513 (692.1 MiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 49960  bytes 3119454 (2.9 MiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        RX packets 1411  bytes 485777 (474.3 KiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 1411  bytes 485777 (474.3 KiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">virbr0: flags=4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.122.1  netmask 255.255.255.0  broadcast 192.168.122.255</span><br><span class="line">        ether 52:54:00:42:aa:9d  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="部署应用">部署应用</h2>
<h3 id="应用代码传输">应用代码传输</h3>
<p>在window系统中下载xftp并安装，官网地址如下：<a href="https://www.xshell.com/zh/free-for-home-school/">家庭/学校免费 - NetSarang Website (xshell.com)</a>，安装好后打开，点击新建，在主机一栏填上虚拟机的ip地址：192.168.60.129，用户名填root，密码填虚拟机的密码，其他默认，点击连接如下所示：</p>
<p><img src="/2022/12/15/Docker%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2%E5%AE%9E%E6%88%98/1.png"></p>
<p>左侧窗口为本地目录，右侧窗口为虚拟机目录。选中左侧文件后右键，点击传输便可将文件从本地的windows系统传输到Linux虚拟机中。</p>
<p><img src="/2022/12/15/Docker%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2%E5%AE%9E%E6%88%98/2.png"></p>
<h3 id="应用前端部署">应用前端部署</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#切换到前端代码目录</span></span><br><span class="line">[root@localhost bin]<span class="comment"># cd /root/WeChat_exercise/front-end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#下载vue及vue cli、加载项目所需的配置文件</span></span><br><span class="line">[root@localhost front-end]<span class="comment"># npm install vue</span></span><br><span class="line">[root@localhost front-end]<span class="comment"># npm install --global @vue/cli</span></span><br><span class="line">[root@localhost front-end]<span class="comment"># npm install yarn</span></span><br><span class="line">[root@localhost front-end]<span class="comment"># npm install</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#运行前端项目</span></span><br><span class="line">[root@localhost front-end]<span class="comment"># npm run serve</span></span><br><span class="line"> DONE  Compiled successfully <span class="keyword">in</span> 51145ms                                                                               01:47:08</span><br><span class="line">  App running at:</span><br><span class="line">  - Local:   http://localhost:8080 </span><br><span class="line">  - Network: http://192.168.60.129:8080</span><br><span class="line"></span><br><span class="line">  Note that the development build is not optimized.</span><br><span class="line">  To create a production build, run yarn build.</span><br></pre></td></tr></table></figure>
<h3 id="后端环境部署">后端环境部署</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#编译安装python3</span></span><br><span class="line">[root@localhost admin]<span class="comment"># wget https://www.Python.org/ftp/python/3.6.1/Python-3.6.1.tar.xz</span></span><br><span class="line">[root@localhost admin]<span class="comment"># tar xJf  Python-3.6.1.tar.xz</span></span><br><span class="line">[root@localhost admin]<span class="comment"># cd  Python-3.6.1</span></span><br><span class="line">[root@localhost Python-3.6.1]<span class="comment"># ./configure  --prefix=/usr/local/python3 &amp;&amp; make &amp;&amp; make install</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建软链接</span></span><br><span class="line">[root@localhost Python-3.6.1]<span class="comment"># ln -s /usr/local/python3/bin/python3 /usr/bin/python3</span></span><br><span class="line">[root@localhost Python-3.6.1]<span class="comment"># ln -s /usr/local/python3/bin/pip3 /usr/bin/pip3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#更换pip源</span></span><br><span class="line">[root@localhost ~]<span class="comment"># mkdir ~/.pip</span></span><br><span class="line">[root@localhost ~]<span class="comment">#  vi ~/.pip/pip.conf</span></span><br><span class="line"></span><br><span class="line">[global]</span><br><span class="line">index-url = http://mirrors.aliyun.com/pypi/simple/</span><br><span class="line">[install]</span><br><span class="line">trusted-host=mirrors.aliyun.com</span><br><span class="line"></span><br><span class="line"><span class="comment">#切换到后端项目目录，安装virtualenv</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cd /root/WeChat_exercise/back-end</span></span><br><span class="line">ot@localhost back-end]<span class="comment"># yum install python-virtualenv</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建虚拟环境venv并激活</span></span><br><span class="line">[root@localhost back-end]<span class="comment"># python3 -m venv venv</span></span><br><span class="line">[root@localhost back-end]<span class="comment"># . venv/bin/activate</span></span><br><span class="line">[root@localhost back-end]<span class="comment"># yum install postgresql-devel</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#安装Flask和项目所需环境</span></span><br><span class="line">(venv) [root@localhost back-end]<span class="comment"># pip3 install --upgrade pip setuptools wheel</span></span><br><span class="line">(venv) [root@localhost back-end]<span class="comment"># pip install Flask</span></span><br><span class="line">(venv) [root@localhost back-end]<span class="comment"># pip install -r requirements.txt</span></span><br><span class="line">(venv) [root@localhost back-end]<span class="comment"># pip install psycopg2</span></span><br><span class="line"><span class="comment">#运行Flask项目</span></span><br><span class="line">(venv) [root@localhost back-end]<span class="comment">#flask run</span></span><br></pre></td></tr></table></figure>
<h1 id="docker容器部署应用">docker容器部署应用</h1>
<p>这一部分先手动启动Pgsql、Python、Nginx等容器，然后再使用Docker Compose来编排容器。</p>
<h2 id="docker安装">Docker安装</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装并启动docker</span></span><br><span class="line">[root@localhost admin]<span class="comment"># curl -sSL https://get.daocloud.io/docker | sh</span></span><br><span class="line">[root@localhost admin]<span class="comment"># systemctl start docker</span></span><br><span class="line">[root@localhost admin]<span class="comment"># systemctl enable docker</span></span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.</span><br></pre></td></tr></table></figure>
<h2 id="构建pgsql容器">构建PgSQL容器</h2>
<ul>
<li><p>安装镜像</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># docker pull postgres</span></span><br></pre></td></tr></table></figure></p></li>
<li><p>创建配置文件夹，可以看到postgres镜像创建的容器是将数据保存在<code>/var/lib/postgresql/data</code>位置下的：</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost admin]<span class="comment"># cd /home</span></span><br><span class="line">[root@localhost home]<span class="comment"># mkdir -p /home/docker</span></span><br><span class="line">[root@localhost home]<span class="comment"># mkdir -p /home/docker/postgresql</span></span><br><span class="line">[root@localhost home]<span class="comment"># mkdir -p /home/docker/postgresql/data</span></span><br><span class="line">[root@localhost home]<span class="comment"># docker image inspect postgres</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;Id&quot;</span>: <span class="string">&quot;sha256:a26eb6069868e4bfd0095788e541bb40711861bdfb2a8252103dea85cc0758aa&quot;</span>,</span><br><span class="line">        <span class="string">&quot;RepoTags&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;postgres:latest&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;RepoDigests&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;postgres@sha256:f4cd32e7a418d9c9ba043e7d561243388202b654c740bcc85ca40b41d9fb4f1e&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;Parent&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Comment&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Created&quot;</span>: <span class="string">&quot;2022-12-22T23:19:59.856808957Z&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Container&quot;</span>: <span class="string">&quot;938c729969fbf6312f6563590395ed0bb4cbc982b039598c38ffa539c86a5df5&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ContainerConfig&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Hostname&quot;</span>: <span class="string">&quot;938c729969fb&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Domainname&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;User&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;AttachStdin&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;AttachStdout&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;AttachStderr&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;ExposedPorts&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;5432/tcp&quot;</span>: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;Tty&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;OpenStdin&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;StdinOnce&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;Env&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/lib/postgresql/15/bin&quot;</span>,</span><br><span class="line">                <span class="string">&quot;GOSU_VERSION=1.14&quot;</span>,</span><br><span class="line">                <span class="string">&quot;LANG=en_US.utf8&quot;</span>,</span><br><span class="line">                <span class="string">&quot;PG_MAJOR=15&quot;</span>,</span><br><span class="line">                <span class="string">&quot;PG_VERSION=15.1-1.pgdg110+1&quot;</span>,</span><br><span class="line">                <span class="string">&quot;PGDATA=/var/lib/postgresql/data&quot;</span></span><br><span class="line">            ],</span><br></pre></td></tr></table></figure></p></li>
<li><p>执行以下命令创建并启动PgSQL容器，自定义命名为<code>my-postgres</code>：</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost home]<span class="comment"># docker run -p 5432:5432 -v /home/docker/postgresql/data:/var/lib/postgresql/data -e POSTGRES_PASSWORD=123456 -e TZ=PRC -d --name=my-postgres postgres</span></span><br><span class="line">165c63929bf341497816b85f28a060a2c6f75b7d9144627a560547b9ca92f9f4</span><br></pre></td></tr></table></figure></p></li>
<li><p>现在便可以用<code>docker ps -a</code>查看容器是否已经运行：</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost home]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE               COMMAND                  CREATED              STATUS                          PORTS                                       NAMES</span><br><span class="line">165c63929bf3   postgres            <span class="string">&quot;docker-entrypoint.s…&quot;</span>   About a minute ago   Up About a minute               0.0.0.0:5432-&gt;5432/tcp, :::5432-&gt;5432/tcp   my-postgres</span><br><span class="line">4c1699cdc854   flask-test:latest   <span class="string">&quot;/bin/sh -c &#x27;gunicor…&quot;</span>   9 days ago           Restarting (1) 45 seconds ago                                               flask_test</span><br></pre></td></tr></table></figure></p></li>
</ul>
<h2 id="构建flask-api镜像">构建Flask API镜像</h2>
<ul>
<li><p>由于有多条命令，不方便直接写到Dockerfile中的CMD子命令中，因此在后端项目目录下新建boot.sh</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#切换到后端项目目录</span></span><br><span class="line">[root@localhost home]<span class="comment"># cd /root/WeChat_exercise/back-end</span></span><br><span class="line">[root@localhost back-end]<span class="comment"># ls</span></span><br><span class="line">app  config.py  invoke  migrations  package.json  __pycache__  Python.gitignore  requirements.txt  venv  weixin.py</span><br><span class="line">[root@localhost back-end]<span class="comment"># touch boot.sh</span></span><br><span class="line">[root@localhost back-end]<span class="comment"># vi boot.sh</span></span><br><span class="line"><span class="comment">#内容如下</span></span><br><span class="line"><span class="comment">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span>; <span class="keyword">do</span></span><br><span class="line">    flask db upgrade</span><br><span class="line">    <span class="keyword">if</span> [[ <span class="string">&quot;$?&quot;</span> == <span class="string">&quot;0&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">break</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="built_in">echo</span> Failed to apply the migration to the database, retrying <span class="keyword">in</span> 3 secs...</span><br><span class="line">    <span class="built_in">sleep</span> 3</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">flask deploy</span><br><span class="line"><span class="built_in">exec</span> gunicorn -w 3 -b 0.0.0.0:5000 --access-logfile - --error-logfile - weixin:app</span><br><span class="line"><span class="comment">#授予可执行权限</span></span><br><span class="line">[root@localhost back-end]<span class="comment"># chmod +x boot.sh</span></span><br></pre></td></tr></table></figure></p></li>
<li><p>新建一个Dockerfile</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost back-end]<span class="comment"># touch Dockerfile</span></span><br><span class="line">[root@localhost back-end]<span class="comment"># vi Dockerfile</span></span><br><span class="line"></span><br><span class="line">[root@CentOS www]<span class="comment"># vim back-end/Dockerfile</span></span><br><span class="line">内容如下：</span><br><span class="line"></span><br><span class="line">FROM python:3.6-alpine</span><br><span class="line"></span><br><span class="line">COPY ./back-end /usr/src/app</span><br><span class="line">WORKDIR /usr/src/app</span><br><span class="line">RUN pip --no-cache-dir install  -i https://mirrors.aliyun.com/pypi/simple/ --upgrade pip</span><br><span class="line">RUN pip install -r requirements.txt -i https://mirrors.aliyun.com/pypi/simple/ \ </span><br><span class="line">  &amp;&amp; pip install gunicorn</span><br><span class="line">ENV FLASK_APP weixin.py</span><br><span class="line">EXPOSE 5000</span><br><span class="line">ENTRYPOINT [<span class="string">&quot;./boot.sh&quot;</span>]</span><br></pre></td></tr></table></figure></p></li>
<li><p>开始构建后端Flask API镜像</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost back-end]<span class="comment"># cd ../</span></span><br><span class="line">[root@localhost WeChat_exercise]<span class="comment"># docker build -f back-end/Dockerfile -t weixin-api:0.0.1 .</span></span><br><span class="line">Sending build context to Docker daemon    573MB.2MB</span><br><span class="line">Step 1/8 : FROM python:3.6-alpine</span><br><span class="line"> ---&gt; 3a9e80fa4606</span><br><span class="line">Step 2/8 : COPY ./back-end /usr/src/app</span><br><span class="line"> ---&gt; f5a2a7ecb4cf</span><br><span class="line">...</span><br><span class="line">Step 6/8 : ENV FLASK_APP weixin.py</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> e9f4ebef3d13</span><br><span class="line">Removing intermediate container e9f4ebef3d13</span><br><span class="line"> ---&gt; 7317d7be0b13</span><br><span class="line">Step 7/8 : EXPOSE 5000</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> c544718548e6</span><br><span class="line">Removing intermediate container c544718548e6</span><br><span class="line"> ---&gt; c6e683ab97ff</span><br><span class="line">Step 8/8 : ENTRYPOINT [<span class="string">&quot;./boot.sh&quot;</span>]</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> c8e11997efb0</span><br><span class="line">Removing intermediate container c8e11997efb0</span><br><span class="line"> ---&gt; 64f072fbbbe5</span><br><span class="line">Successfully built 64f072fbbbe5</span><br><span class="line">Successfully tagged weixin-api:0.0.1</span><br><span class="line"></span><br></pre></td></tr></table></figure></p></li>
<li><p>启动Flask API容器</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost WeChat_exercise]<span class="comment"># docker run -d --name weixin-api --link my-postgres:postgres -e DATABASE_URL=postgresql://postgres:123456@localhost:5432/postgres -p 5000:5000 --rm weixin-api:0.0.1</span></span><br><span class="line">2b58b6f9a4984649df15eda6c7b5b849697b3fc6f9cdfd906009e52814763f19</span><br></pre></td></tr></table></figure></p></li>
</ul>
<h2 id="构建nginx容器">构建Nginx容器</h2>
<ul>
<li><p>修改WeChat_exercise/front-end/src/main.js文件，增加以下代码，其中192.168.60:131为虚拟机ip</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Vue.use(ElementUI);</span><br><span class="line"><span class="keyword">if</span> (process.env.NODE_ENV===<span class="string">&#x27;production&#x27;</span>)&#123;</span><br><span class="line">  axios.defaults.baseURL=<span class="string">&#x27;http://192.168.60:131:5000&#x27;</span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">  axios.defaults.baseURL = <span class="string">&#x27;http://127.0.0.1:5000&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li>
<li><p>将打包后的静态文件，拷贝到 <code>../docker/nginx/data</code> 目录中，后续映射到 <code>Nginx</code> 容器中去</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost home]<span class="comment"># cd /root/WeChat_exercise/front-end</span></span><br><span class="line">[root@localhost front-end]<span class="comment"># npm install</span></span><br><span class="line">[root@localhost front-end]<span class="comment"># npm run build</span></span><br><span class="line">[root@localhost front-end]<span class="comment"># mkdir -p ../docker/nginx/data</span></span><br><span class="line">[root@localhost front-end]<span class="comment"># cp -a dist/* ../docker/nginx/data</span></span><br><span class="line">[root@localhost front-end]<span class="comment"># cd ..</span></span><br><span class="line">[root@localhost WeChat_exercise]<span class="comment"># </span></span><br></pre></td></tr></table></figure></p></li>
<li><p>启动Nginx容器</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost WeChat_exercise]<span class="comment"># docker run -d --name nginx -p 18080:80 --rm -v $PWD/docker/nginx/data:/usr/share/nginx/html nginx</span></span><br><span class="line">50f66f6ad75ec19220e37fe510724b70448b462a7e7c6b335f42de4893f44944</span><br></pre></td></tr></table></figure></p></li>
<li><p>浏览器访问<code>http://192.168.60.131:18080/#/ping</code>，前端应用能够正常访问到后端API接口：</p>
<p><img src="/2022/12/15/Docker%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2%E5%AE%9E%E6%88%98/3.png"></p></li>
</ul>
<h2 id="使用docker-compose编排容器">使用Docker Compose编排容器</h2>
<ul>
<li><p>安装docker-compose</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost WeChat_exercise]<span class="comment"># cd back-end</span></span><br><span class="line">[root@localhost back-end]<span class="comment"># curl -L https://get.daocloud.io/docker/compose/releases/download/v2.4.1/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose</span></span><br><span class="line">[root@localhost back-end]<span class="comment"># chmod +x /usr/local/bin/docker-compose</span></span><br><span class="line">[root@localhost back-end]<span class="comment"># ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose</span></span><br><span class="line">[root@localhost back-end]<span class="comment"># docker-compose version</span></span><br><span class="line">Docker Compose version v2.4.1</span><br></pre></td></tr></table></figure></p></li>
<li><p>创建并编写docker-compose.yaml文件</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost back-end]<span class="comment"># touch docker-compose.yaml</span></span><br><span class="line">[root@localhost back-end]<span class="comment"># vi docker-compose.yaml</span></span><br><span class="line"><span class="comment">#内容如下：</span></span><br><span class="line"></span><br><span class="line">version: <span class="string">&quot;3.7&quot;</span></span><br><span class="line">services:</span><br><span class="line">    my-postgres:</span><br><span class="line">        image: postgres</span><br><span class="line">        privileged: <span class="literal">true</span></span><br><span class="line">        <span class="comment"># 权限要加，不然启动会告错</span></span><br><span class="line">        environment:</span><br><span class="line">          POSTGRES_PASSWORD: 123456</span><br><span class="line">          POSTGRES_USER: postgres</span><br><span class="line">          POSTGRES_DB: postgres</span><br><span class="line">          TZ: Asia/Shanghai</span><br><span class="line">        ports:</span><br><span class="line">          - 5432:5432</span><br><span class="line">        volumes:</span><br><span class="line">          - /home/docker/postgresql/data:/var/lib/postgresql/data</span><br><span class="line">        restart: always</span><br><span class="line"></span><br><span class="line">    weixin-api:</span><br><span class="line">        image: weixin-api:0.0.1</span><br><span class="line">        build:</span><br><span class="line">            context: .</span><br><span class="line">            dockerfile: Dockerfile</span><br><span class="line">        restart: always</span><br><span class="line">        ports:</span><br><span class="line">            - <span class="string">&quot;5000:5000&quot;</span></span><br><span class="line">        depends_on:</span><br><span class="line">            - my-postgres</span><br><span class="line"></span><br><span class="line">    nginx:</span><br><span class="line">        image: nginx</span><br><span class="line">        ports:</span><br><span class="line">           - <span class="string">&quot;18080:80&quot;</span></span><br><span class="line">        volumes:</span><br><span class="line">           - <span class="string">&quot;<span class="variable">$PWD</span>/docker/nginx/data:/usr/share/nginx/html&quot;</span></span><br></pre></td></tr></table></figure></p></li>
<li><p>查看正在运行的容器并使它们全部停止运行</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看正在运行的容器</span></span><br><span class="line">[root@localhost back-end]<span class="comment"># docker ps </span></span><br><span class="line">CONTAINER ID   IMAGE               COMMAND                  CREATED          STATUS                          PORTS                                       NAMES</span><br><span class="line">2b58b6f9a498   weixin-api:0.0.1    <span class="string">&quot;./boot.sh&quot;</span>              47 minutes ago   Up 47 minutes                   0.0.0.0:5000-&gt;5000/tcp, :::5000-&gt;5000/tcp   weixin-api</span><br><span class="line">50f66f6ad75e   nginx               <span class="string">&quot;/docker-entrypoint.…&quot;</span>   2 hours ago      Up 2 hours                      0.0.0.0:18080-&gt;80/tcp, :::18080-&gt;80/tcp     nginx</span><br><span class="line">165c63929bf3   postgres            <span class="string">&quot;docker-entrypoint.s…&quot;</span>   2 hours ago      Up 2 hours                      0.0.0.0:5432-&gt;5432/tcp, :::5432-&gt;5432/tcp   my-postgres</span><br><span class="line">4c1699cdc854   flask-test:latest   <span class="string">&quot;/bin/sh -c &#x27;gunicor…&quot;</span>   9 days ago       Restarting (1) 14 seconds ago                                               flask_test</span><br><span class="line"></span><br><span class="line"><span class="comment">#停止所有正在运行的容器</span></span><br><span class="line">[root@localhost back-end]<span class="comment"># docker stop $(docker ps -a -q)</span></span><br><span class="line">27ddc44b2109</span><br><span class="line">a0704302049b</span><br><span class="line">d5e616940191</span><br><span class="line">2b58b6f9a498</span><br><span class="line">2d86579808e5</span><br><span class="line">bb1794163d8e</span><br><span class="line">be6acf36f0d6</span><br><span class="line">50f66f6ad75e</span><br><span class="line">165c63929bf3</span><br><span class="line">4a78c412395d</span><br><span class="line">80b4b9b47652</span><br><span class="line">4c1699cdc854</span><br><span class="line">d140e8d466d0</span><br><span class="line"></span><br><span class="line"><span class="comment">#检查是否还有容器正在运行</span></span><br><span class="line">[root@localhost back-end]<span class="comment"># docker ps </span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br></pre></td></tr></table></figure></p></li>
<li><p>使用Docker Compose启动应用所需的所有容器，'-d' 选项表示在后台运行 compose，否则在前台输出日志</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#启动所有容器</span></span><br><span class="line">[root@localhost back-end]<span class="comment"># docker-compose up -d</span></span><br><span class="line"></span><br><span class="line">[+] Running 3/3</span><br><span class="line"> ⠿ Container back-end-nginx-1        Started                                                                                                                                                                  6.0s</span><br><span class="line"> ⠿ Container back-end-my-postgres-1  Started                                                                                                                                                                  6.1s</span><br><span class="line"> ⠿ Container back-end-weixin-api-1   Started                                                                                                                                                                 11.0s</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看容器状态</span></span><br><span class="line">[root@localhost back-end]<span class="comment"># docker-compose ps</span></span><br><span class="line">NAME                     COMMAND                  SERVICE             STATUS              PORTS</span><br><span class="line">back-end-my-postgres-1   <span class="string">&quot;docker-entrypoint.s…&quot;</span>   my-postgres         running             0.0.0.0:5432-&gt;5432/tcp, :::5432-&gt;5432/tcp</span><br><span class="line">back-end-nginx-1         <span class="string">&quot;/docker-entrypoint.…&quot;</span>   nginx               running             0.0.0.0:18080-&gt;80/tcp, :::18080-&gt;80/tcp</span><br><span class="line">back-end-weixin-api-1    <span class="string">&quot;./boot.sh&quot;</span>              weixin-api          running             0.0.0.0:5000-&gt;5000/tcp, :::5000-&gt;5000/tcp</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看各容器的运行日志，若含有&#x27;-f&#x27; 选项则持续输出</span></span><br><span class="line">[root@localhost back-end]<span class="comment"># docker-compose logs</span></span><br><span class="line"><span class="comment">#停止全部容器</span></span><br><span class="line">[root@localhost back-end]<span class="comment"># docker-compose stop</span></span><br><span class="line">[+] Running 3/3</span><br><span class="line"> ⠿ Container back-end-weixin-api-1   Stopped                                                                                                                                                                 16.3s</span><br><span class="line"> ⠿ Container back-end-nginx-1        Stopped                                                                                                                                                                  4.0s</span><br><span class="line"> ⠿ Container back-end-my-postgres-1  Stopped  </span><br></pre></td></tr></table></figure></p></li>
</ul>
<h1 id="端口被占用解决方法">端口被占用解决方法</h1>
<p>在docker部署的过程中，若端口被占用，如80端口，可使用以下命令解除端口占用：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看占用80端口的进程</span></span><br><span class="line">[root@localhost back-end]<span class="comment"># netstat -lnp | grep 80</span></span><br><span class="line">tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      1159/nginx: master  </span><br><span class="line">tcp6       0      0 :::80                   :::*                    LISTEN      1159/nginx: master  </span><br><span class="line"><span class="comment">#杀死占用端口的进程</span></span><br><span class="line">[root@localhost back-end]<span class="comment"># kill -9 1159</span></span><br><span class="line"><span class="comment">#查看是否还有进程占用端口，若有，则继续杀死进程，若无，则端口占用已解除</span></span><br><span class="line">[root@localhost back-end]<span class="comment"># netstat -lnp | grep 80</span></span><br><span class="line">tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      1160/nginx: worker  </span><br><span class="line">tcp6       0      0 :::80                   :::*                    LISTEN      1160/nginx: worker  </span><br><span class="line">[root@localhost back-end]<span class="comment"># kill -9 1160</span></span><br><span class="line">[root@localhost back-end]<span class="comment"># netstat -lnp | grep 80</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Docker</category>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>应用部署</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask Web开发学习笔记（一）</title>
    <url>/2022/10/18/Flask%20Web%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="安装部署">安装部署</h1>
<h2 id="创建环境">创建环境</h2>
<p>使用pip分别安装virtualenv、simplejson、flask、sqlalchemy模块，其命令用法为：<code>pip install 安装的模块名</code>。</p>
<p>virtualenv安装完毕后，新建一个项目文件夹myproject，打开cmd，使用cd切换到myproject目录，通过下列命令来创建虚拟环境venv，命令完成后会在myproject文件夹里生成一个venv文件夹。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> myproject</span><br><span class="line">virtualenv venv </span><br></pre></td></tr></table></figure>
<h2 id="激活venv环境">激活venv环境</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">venv\scripts\activate</span><br></pre></td></tr></table></figure>
<h2 id="激活virtualenv中的flask">激活virtualenv中的Flask</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install Flask</span><br></pre></td></tr></table></figure>
<h1 id="快速入门">快速入门</h1>
<h2 id="一个最小的应用">一个最小的应用</h2>
<p>在一个.py文件中输入以下代码，并运行，可以得到一个最小的Flask应用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask <span class="comment">#导出Flask类</span></span><br><span class="line"><span class="comment"># 创建了该类的实例，第一个参数为应用模块名，单一模块使用__name__</span></span><br><span class="line">app=Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span><span class="comment"># 使用装饰器告诉Flask什么样的URL能触发函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()<span class="comment"># run函数让应用运行在本地服务器上</span></span><br></pre></td></tr></table></figure>
<p>运行代码后访问http://127.0.0.1:5000，可以在页面中看到Hello World!的问候。</p>
<h2 id="外部可访问的服务器">外部可访问的服务器：</h2>
<p>若运行这个服务器时，会发现它只能从本地的计算机上访问，网络中其他的用户都不能访问。在调试模式下，用户可以在本地计算机上执行任意Python代码。因此这个行为是默认的。</p>
<p>若禁用了debug或信任所在网络的用户，可以修改调用run()方法来使服务器是公开可用的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>)<span class="comment"># 让操作系统监听所有公网IP</span></span><br></pre></td></tr></table></figure>
<h2 id="调试模式">调试模式</h2>
<p>若启动了调试支持，服务器会在代码修改后自动重新载入，并在发送错误时提供一个相对有用的调试器。</p>
<h3 id="方法一启动调试模式">方法一启动调试模式：</h3>
<p>直接在应用对象上设置：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">app.debug=<span class="literal">True</span></span><br><span class="line">app.run()</span><br></pre></td></tr></table></figure>
<h3 id="方法二启动调试模式">方法二启动调试模式：</h3>
<p>作为run方法的一个参数传入：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<p><strong>注意：交互式调试器绝对不能用于生产环境。</strong></p>
<h2 id="路由">路由</h2>
<p>Web应用的URL易于人们辨识记忆，对于面向使用低速网络连接移动设备访问的应用特别有用。用route()装饰器把一个函数绑定到对于的URL上，可以实现不访问索引页，直接访问想要的页面。例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask </span><br><span class="line">app=Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Index Page&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/hello&#x27;</span></span>)    </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">默认页面 Index Page</span><br><span class="line">输入<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span>/hello路由时，跳转到Hello World!的页面</span><br></pre></td></tr></table></figure>
<p>不仅如此，还可以构造含有动态部分的URL，也可以在一个函数上附着多个规则。</p>
<h2 id="变量规则">变量规则</h2>
<p>给URL添加变量部分，可以把这些特殊的字段标记为<code>&lt;variable_name&gt;</code>，这个部分将会作为命名参数传递到函数中。规则可以用<code>&lt;converter:variable_name&gt;</code>指定一个可选的转换器。例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask </span><br><span class="line">app=Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Index Page&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/user/&lt;username&gt;&#x27;</span></span>)    </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_user_profile</span>(<span class="params">username</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;User %s&#x27;</span> % username</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/post/&lt;int:post_id&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_post</span>(<span class="params">post_id</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Post %d&#x27;</span> % post_id</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">默认页面 Index Page</span><br><span class="line">输入<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span>/user/ok路由时，跳转到User ok的页面</span><br><span class="line">输入<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span>/post/<span class="number">8080</span>路由时，跳转到Post <span class="number">8080</span>的页面    </span><br></pre></td></tr></table></figure>
<p>转换器有下面几种：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;"><strong>int</strong></th>
<th style="text-align: center;"><strong>接受整数</strong></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><strong>float</strong></td>
<td style="text-align: center;"><strong>同 int ，但是接受浮点数</strong></td>
</tr>
<tr class="even">
<td style="text-align: center;"><strong>path</strong></td>
<td style="text-align: center;"><strong>和默认的相似，但也接受斜线</strong></td>
</tr>
</tbody>
</table>
<h2 id="唯一url重定向行为">唯一URL/重定向行为：</h2>
<p>Flack的URL规则基于Werkzeug的路由模块，该模块基于Apache以及更早的HTTP服务器主张的先例，保证优雅且唯一的URL。例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask </span><br><span class="line">app=Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Index Page&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/projects/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">projects</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;The project page&#x27;</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/about&#x27;</span></span>)    </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">about</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;The about page&#x27;</span></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">默认页面 Index Page  </span><br><span class="line">输入<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span>/projects/路由时，跳转到The project page的页面</span><br><span class="line">输入<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span>/projects路由时，跳转到The project page的页面</span><br><span class="line">输入<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span>/about路由时，跳转到The about page的页面    </span><br><span class="line">输入<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span>/about/路由时，跳转到<span class="number">404</span> Not Found的页面      </span><br></pre></td></tr></table></figure>
<p>如此可见，指向projects的规范带结尾斜线，访问结尾不带斜线的URL会被Flask重定向到带斜线的规范URL中。而指向about的规范不带结尾斜线，访问结尾带斜线的URL会产生一个404"Not Found"错误。</p>
<p>这一行为使得在遗忘结尾斜线时，允许关联的URL接任工作，同时也保证了URL的唯一，有助于避免搜索引擎索引同一个页面两次。</p>
<h2 id="构造url">构造URL</h2>
<p>FLask不仅可以匹配URL，还可以用<code>url_for()</code>来给指定的函数构造URL。它接收函数名作为第一个参数，也接受对于URL规则的变量部分的命名函数。位置变量部分会添加到URL末尾作为查询函数。例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,url_for</span><br><span class="line">app=Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;The index page&#x27;</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;The login page&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/user/&lt;username&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">profile</span>(<span class="params">username</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;The profile page&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> app.test_request_context():</span><br><span class="line">    <span class="built_in">print</span>(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(url_for(<span class="string">&#x27;login&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(url_for(<span class="string">&#x27;login&#x27;</span>,<span class="built_in">next</span>=<span class="string">&#x27;/&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(url_for(<span class="string">&#x27;profile&#x27;</span>,username=<span class="string">&#x27;Bob&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">默认页面 Index Page  </span><br><span class="line">输入<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span>/login路由时，跳转到The login page的页面</span><br><span class="line">输入<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span>/login?<span class="built_in">next</span>=路由时，跳转到The login page的页面</span><br><span class="line">输入<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span>/user/Bob路由时，跳转到The profile page的页面    </span><br></pre></td></tr></table></figure>
<p><strong>构建URL而非在模板中硬编码的理由：</strong></p>
<ul>
<li>反向构建通常比硬编码的描述性更好，它允许一次性修改URL，而不是到处边找边改</li>
<li>URL构建会转义特殊字符和Unicode数据</li>
<li>若应用不位于URL的根路径，url_for()会妥善处理这个问题</li>
</ul>
<h2 id="http方法">HTTP方法</h2>
<p>HTTP方法告知服务器，客户端想对请求的页面做些什么，下面是<strong>常见的HTTP方法</strong>：</p>
<h3 id="get">GET</h3>
<p>浏览器告知服务器：只获取页面上的信息并发给我。</p>
<h3 id="head">HEAD</h3>
<p>浏览器告诉服务器：欲获取信息，但是只关心消息头。应用应像处理GET请求一样来处理它，但不分发实际内容。在Flask中完全无需人工干预。</p>
<h3 id="post">POST</h3>
<p>浏览器告诉服务器：想在URL上发布新消息。并且服务器必须确保数据已存储且只存储一次。这是HTML表通常发送数据到服务器的方法。</p>
<h3 id="put">PUT</h3>
<p>类似于POST但服务器可能触发了存储过程多次，多次覆盖掉旧值。考虑到传输中连接可能会丢失，在这种情况下浏览器和服务器之间的系统可能安全地第二次接收请求，而不破坏其他东西。</p>
<h3 id="delete">DELETE</h3>
<p>删除给定位置的信息。</p>
<h3 id="options">OPTIONS</h3>
<p>给客户端提供一个途径来弄清这个URL支持哪些HTTP方法。</p>
<p>HTTP有许多不同的访问URL方法。默认情况下，路由只回应GET请求，但是通过route()装饰器传递methods参数可以改变这个行为。例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;login&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method==<span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        de_the_login()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        show_the_login_form()</span><br></pre></td></tr></table></figure>
<p>若存在GET，会自动添加HEAD，无需干预，确保遵照HTTP协议处理HEAD请求。</p>
<h2 id="静态文件">静态文件</h2>
<p>动态web应用也会需要静态文件，通常是CSS和JavaScript文件。理想状况下，已经配置好Web服务器来提供静态文件，但在开发中，Flask也可以做到。只要在包中或是，模块所在的目录中创建一个名为static的文件夹，在应用中使用<code>/static</code>即可访问。</p>
<p>给静态文件生成URL，使用特殊的<code>static</code>端，所生成的文件应该存储在<code>static/style.css</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url_for(<span class="string">&#x27;static&#x27;</span>,filename=<span class="string">&#x27;style.css&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="模板渲染">模板渲染</h2>
<p>Flask配备了Jinja2模板引擎来生成HTML，可以使用render_template()方法来渲染模板，将模板名和关键字参数传入模板的变量。例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> render_template</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/hello/&#x27;</span></span>)</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;hello/&lt;name&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>(<span class="params">name=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;hello.html&#x27;</span>,name=name)</span><br></pre></td></tr></table></figure>
<p>Flask会在templates文件夹里寻找模板，若应用是个模块，则该文件夹与模块通缉，它是个包，则该文件夹作为包的子目录：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#应用是个模块</span></span><br><span class="line">/application.py</span><br><span class="line">/templates</span><br><span class="line">    /hello.html</span><br><span class="line"><span class="comment">#应用是个包    </span></span><br><span class="line">/application.py</span><br><span class="line">    /__init__.py</span><br><span class="line">    /templates</span><br><span class="line">        /hello.html</span><br></pre></td></tr></table></figure>
<p>自动转义功能在<code>.html</code>、<code>.htm</code>、<code>.xml</code>、<code>xhtml</code>扩展名的模板中是默认是开启的，若name包含HTML，它将会被自动转义。从字符串加载的模板禁用自动转义。若信任一个变量，并且知道它是安全的，可以用Markup类或<code>|safe</code>过滤器在模板中把它标记为安全的。</p>
<h2 id="访问请求数据">访问请求数据</h2>
<p>对于Web应用，与客户端发送给服务端的数据交互至关重要。在Flask中由全局的request对象来提供这些信息。环境作用域保证了对象是全局的情况下，线程也是安全的。</p>
<h3 id="环境局部变量">环境局部变量</h3>
<p>依赖于一段请求对象的代码，因没有请求对象无法正常运行，需要自行创建一个请求对象并把它绑定到环境中。做单元测试最简单的解决方案是：用test_request_context()环境管理器，结合with声明，绑定一个测试请求使之能进行交互。例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request </span><br><span class="line"><span class="keyword">with</span> app.test_request_context(<span class="string">&#x27;/hello&#x27;</span>,method=<span class="string">&#x27;POST&#x27;</span>):</span><br><span class="line">    <span class="keyword">assert</span> request.path==<span class="string">&#x27;/hello&#x27;</span></span><br><span class="line">    <span class="keyword">assert</span> request.method==<span class="string">&#x27;POST&#x27;</span></span><br><span class="line"><span class="comment">#或者传递整个WSGI环境给request_context()方法</span></span><br><span class="line"><span class="keyword">with</span> app.request_context(environ):</span><br><span class="line">    <span class="keyword">assert</span> request.method==<span class="string">&#x27;POST&#x27;</span></span><br></pre></td></tr></table></figure>
<h3 id="请求对象">请求对象</h3>
<p>当前请求的HTTP方法可通过method属性来访问，通过request.form属性来访问表单数据。例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;login&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    error=<span class="literal">None</span></span><br><span class="line">    <span class="keyword">if</span> request.method==<span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> valid_login(request.form[<span class="string">&#x27;username&#x27;</span>],request.form[<span class="string">&#x27;password&#x27;</span>]):</span><br><span class="line">            <span class="keyword">return</span> log_the_user_in(request.form[<span class="string">&#x27;username&#x27;</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        error=<span class="string">&#x27;Invalid username/password&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;login.html&#x27;</span>,error=error)  </span><br></pre></td></tr></table></figure>
<p>当访问form属性中不存在的键时会抛出一个特殊的KeyError异常，可以想捕获标准的KeyError一样来捕获它，若对其不做处理，他会显示一个HTTP 400 Bad Request页面。</p>
<p>可以通过args属性来访问URL中 提交的参数，可以用get参数或捕获KeyError。：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">searchword=request.args.get(<span class="string">&#x27;q&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="文件上传">文件上传</h2>
<p>上传文件需要先在HTML表单中设置`enctype="multipart/form-data"属性。已上传的文件存储在内存或者是临时文件夹里，可以通过请求对象的files属性访问它们。每个上传的文件都会存储在这个字典里，可以通过save()方法把文件保存到服务器的文件系统上。例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/upload&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload_file</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method==<span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        f=request.files[<span class="string">&#x27;the file&#x27;</span>]</span><br><span class="line">        f.save(/var/www/uploads/uploaded_file.txt)</span><br></pre></td></tr></table></figure>
<p>若想知道上传前文件在客户端的文件名是什么，可以访问filename属性，但由于这个值是可以伪造的，故不要信任这个值。若要把文件按客户端提供的文件名存储在服务器上，可以把它传递给Werkzrug提供的secure_filename()函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> werkzeug <span class="keyword">import</span> secure_filename</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/upload&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload_file</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method==<span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        f=request.files[<span class="string">&#x27;the file&#x27;</span>]</span><br><span class="line">        f.save(<span class="string">&#x27;/var/www/uploads/&#x27;</span>+secure_filename(f.filename))</span><br></pre></td></tr></table></figure>
<h2 id="cookies">Cookies</h2>
<p>可以通过<code>cookies</code>属性来访问Cookies，用响应对象的<code>set_cookie</code>方法来设置Cookies。请求对象的<code>cookies</code>属性是一个内容为客户端提交的所有Cookies的字典。</p>
<p><strong>读取Cookies:</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    username=request.cookies.get(<span class="string">&#x27;username&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p><strong>存储Cookies：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    resp=make_response(render_template(...))</span><br><span class="line">    resp.set_cookie(<span class="string">&#x27;username&#x27;</span>,<span class="string">&#x27;the username&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> resp</span><br></pre></td></tr></table></figure>
<p>Cookie是设置在响应对象上的。由于通常视图函数只是返回字符串，之后Flask将字符串转换为响应对象。若要显式地转换，可以使用<code>make_response()</code>函数然后再进行修改。</p>
<h2 id="重定向和错误">重定向和错误</h2>
<p>用redirect()函数把用户重定向到其他地方。用abort()函数放弃请求并返回错误代码。例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,request</span><br><span class="line">app=Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;login&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span></span>)    </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    abort(<span class="number">401</span>)</span><br><span class="line">    this_is_never_executed()</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()    </span><br></pre></td></tr></table></figure>
<p>默认情况下，错误代码会显示一个黑白的错误页面。可以用errorhandler()装饰器来定制错误页面：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> render_template</span><br><span class="line"><span class="meta">@app.errorhandler(<span class="params"><span class="number">404</span></span>)    </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">page_not_found</span>(<span class="params">error</span>):</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;page_not_found.html&#x27;</span>),<span class="number">404</span></span><br><span class="line"><span class="comment">#404即告诉Flask该页的错误代码是404，即没有找到，默认为200，即一切正常</span></span><br></pre></td></tr></table></figure>
<h2 id="关于响应">关于响应</h2>
<p>视图函数的返回值会被自动转换为一个响应对象。若返回值是一个字符串，它 被转换为该字符串为主体的、状态码为<code>200 OK</code>，MIME类型是<code>text/html</code>的响应对象。</p>
<p>Flask把返回值转换为响应对象的逻辑如下：</p>
<ol type="1">
<li>若返回的是一个合法的响应对象，它会从视图直接返回。</li>
<li>若返回的是一个字符串，响应对象会用字符串数据和默认参数创建。</li>
<li>若返回的是一个元组且元组中的元素可以提供额外的信息。这样的元组必须是<code>(response,status,headers)</code>的形式，且至少包含一个元素。status值会覆盖状态代码，headers可以是一个列表或字典，作为额外的消息标头值。</li>
<li>若上述条件都不满足，、Flask会假设返回值是一个合法的WSGI应用程序，并转换为一个请求对象。</li>
<li>若想再视图里操纵上述步骤结果的响应对象，可以使用make_response()函数。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#假设有以下视图</span></span><br><span class="line"><span class="meta">@app.errorhandler(<span class="params"><span class="number">404</span></span>)    </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">not_found</span>(<span class="params">error</span>):</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;error.html&#x27;</span>),<span class="number">404</span></span><br><span class="line"><span class="comment">#只需要把返回值表达式传递给make_response()，获取结果对象并修改，然后再返回它</span></span><br><span class="line"><span class="meta">@app.errorhandler(<span class="params"><span class="number">404</span></span>)    </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">not_found</span>(<span class="params">error</span>):</span><br><span class="line">    resp=make_response(render_template(<span class="string">&#x27;error.html&#x27;</span>),<span class="number">404</span>)</span><br><span class="line">    resp.headers[<span class="string">&#x27;X-Somthing&#x27;</span>]=<span class="string">&#x27;A value&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> resp</span><br></pre></td></tr></table></figure>
<h2 id="会话">会话</h2>
<p>除请求对象外，还有一个会话（session）对象。它允许在不同请求间存储特定用户的信息。他说在Cookies的基础上实现的，并且对Cookies进行密钥签名。这意味着用户可以查看Cookies内容但由于没有签名的密钥不能修改它。会话工作的例子如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,session,redirect,url_for,escape,request</span><br><span class="line">app=Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;username&#x27;</span> <span class="keyword">in</span> session:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Logged in as %s&#x27;</span> % escape(session[<span class="string">&#x27;username&#x27;</span>])</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;You are not logged in&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;POST&#x27;</span>]</span>)    </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method==<span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        session[<span class="string">&#x27;username&#x27;</span>]=request.form[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        &lt;form action=&quot;&quot; method=&quot;post&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;p&gt;&lt;input type=text name=username&gt;</span></span><br><span class="line"><span class="string">            &lt;p&gt;&lt;input type=submit value=Login&gt;</span></span><br><span class="line"><span class="string">        &lt;/form&gt;</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/logout&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">logout</span>():</span><br><span class="line">    session.pop(<span class="string">&#x27;username&#x27;</span>,<span class="literal">None</span>)</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line">app.secret_kry=<span class="string">&#x27;A0Zr98j/3yX R~XHH!jmN]LWX/,?R&#x27;</span>    </span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()    </span><br></pre></td></tr></table></figure>
<p>生成强密钥：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os    </span><br><span class="line"><span class="built_in">print</span>(os.urandom(<span class="number">24</span>))</span><br><span class="line"><span class="comment">#运行结果如下</span></span><br><span class="line"><span class="string">b&#x27;\x9b\xc9@\x9bN]\xd9]H\xd6,\xfam\x9c\x90\xddu\x19^\x14COG\x93&#x27;</span></span><br></pre></td></tr></table></figure>
<p>使用基于cookie的会话需注意：Flask会将放进会话对象的值序列化值Cookies。若发现某些值在请求之间没有持久存在，而Cookies已经启用且没有明显的错误信息。此时应检查页面响应中Cookies的大小，并与Web浏览器所支持的大小对比。</p>
<h2 id="消息闪现">消息闪现</h2>
<p>Flask提供了消息闪现系统，可以简单地给用户返回。消息闪现系统通常会在请求结束时记录信息，并在下一个（且仅在下一个）请求中访问记录的信息。展现这些信息通常要结果模板布局。使用flash()方法可以闪现一条消息，在模板中也可以使用。</p>
<h2 id="日志记录">日志记录</h2>
<p>Flask预置了日志系统，附带的logger是一个标准日志类Logger：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">app.logger.debug(<span class="string">&#x27;A value for debugging&#x27;</span>)</span><br><span class="line">app.logger.warning(<span class="string">&#x27;A warning occurred (%d apples)&#x27;</span>,<span class="number">42</span>)</span><br><span class="line">app.logger.error(<span class="string">&#x27;An error occurred&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="整合wsgi中间件">整合WSGI中间件</h2>
<p>若想给应用添加WSGI中间件，可以封装内部WSGI应用。如想用Werkzrug包中的某个中间件来应付lighttpd中的bugs：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> werkzeug.contrib.fixers <span class="keyword">import</span> LighttpdCGIRootFix</span><br><span class="line">app.wsgi_app=LighttpdCGIRootFix(app.wsgi_app)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Web框架</category>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Flask Web</tag>
        <tag>后端</tag>
        <tag>Web框架</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask Web开发学习笔记（三）</title>
    <url>/2022/10/21/Flask%20Web%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[<h1 id="模板">模板</h1>
<h2 id="jinja配置">Jinja配置</h2>
<p>Jinja2默认配置为：</p>
<ul>
<li><p>所有扩展名为<code>.html</code>、<code>.htm</code>、<code>.xml</code>以及<code>.xhtml</code>的模板会开启自动转义</p></li>
<li><p>模板可以利用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% autoescape %&#125;</span><br></pre></td></tr></table></figure>
<p>标签选择自动转义的开关</p></li>
<li><p>Flask在Jinja2上下文中插入了几个全局函数和助手，另外还有一些目前默认的值。</p></li>
</ul>
<h2 id="标准上下文">标准上下文</h2>
<p>默认在Jinja2模板中可用的全局变量有：</p>
<p><strong>config：</strong> 当前的配置对象(flask.config)。</p>
<p><strong>request：</strong> 当前的请求对象(flask.request) 。当模板不是在活动的请求上下文中渲染时，这个变量不可用。</p>
<p><strong>session：</strong> 当前的会话对象(flask.session)。当模板不是在活动的请求上下文中渲染时，这个变量不可用。</p>
<p><strong>g：</strong> 请求相关的全局变量(flask.g)。当模板不是在活动的请求上下文中渲染时，这个变量不可用。</p>
<p><strong>url_for()：</strong> flask.url_for()函数。</p>
<p><strong>get_flashed_messages()： </strong>flask.get_flashed_messages()函数。</p>
<h3 id="jinja上下文行为">Jinja上下文行为</h3>
<p>这些变量被添加到了请求的上下文中，而非全局变量。其区别在于，默认不会在导入模板的上下文中出现。这样一方面是考虑到性能，另一方面是为了让事情显式透明。</p>
<p>若想要导入一个需要访问请求对象的宏，有两种方法：</p>
<ul>
<li>显式地传入请求或请求对象的属性作为宏的参数</li>
<li>与上下文一起导入宏，其方式如下：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">from</span> <span class="string">&#x27;_helpers.html&#x27;</span> <span class="keyword">import</span> my_macro <span class="keyword">with</span> contexr %&#125;</span><br></pre></td></tr></table></figure>
<h2 id="标准过滤器">标准过滤器</h2>
<p><code>tojson()</code>函数把给定的对象转换为JSON表示。例如动态生成JavaScript：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">text/javascript</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    doSomethingWith( &#123; &#123;user.username|tojson|safe &#125; &#125; );<span class="comment">&lt;!--|safe禁用转义--&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>    </span><br></pre></td></tr></table></figure>
<h2 id="控制自动转义">控制自动转义</h2>
<p>自动转义的概念是自动转义特殊字符。HTML（或XML）意义下的特殊字符是<code>&amp;</code>、<code>&gt;</code>、<code>&lt;</code>、<code>"</code>、<code>'</code>。</p>
<p>控制自动转义可以有三种方法：</p>
<ul>
<li>在传递到模板之前，用Markup对象封装HTML字符串。一般推荐这个方法。</li>
<li>在模板中，使用<code>|safe</code>过滤器显式地标记一个字符串为安全的HTML(<code>myvariable|safe</code>)。</li>
<li>临时地完全禁用自动转移系统，其方式如下：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% autoescape false %&#125;</span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>autoescaping is disabled here</span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123; &#123; wii_not_be_escaped &#125; &#125;</span><br><span class="line">&#123;% endautoescape %&#125;	</span><br></pre></td></tr></table></figure>
<h2 id="注册过滤器">注册过滤器</h2>
<p>若要在Jinja2中注册过滤器，可以把它们手动添加到应用的jinja_env或使用template_filter()装饰器：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#使用template_filter()装饰器</span></span><br><span class="line"><span class="meta">@app.template_filter(<span class="params"><span class="string">&#x27;reverse&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">reverse_filter</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">return</span> s[::-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#手动添加到应用的jinja_env</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">reverse_filter</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">return</span> s[::-<span class="number">1</span>]</span><br><span class="line">app.jinja_env.filters[<span class="string">&#x27;reverse&#x27;</span>]=reverse_filter</span><br></pre></td></tr></table></figure>
<p>在使用装饰器的情况下，若想以函数名作为过滤器名，参数是可选的。注册之后，可以在模板中使用过。例如在上下文中有一个名为mylist的Python列表：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% for x in mylist | reverse %&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure>
<h2 id="上下文处理器">上下文处理器</h2>
<p>Flask上下文处理器自动向模板的上下文中插入新变量。上下文处理器在模板渲染之前运行，并且可以在模板上下文中插入新值。上下文处理器是一个返回字典的函数，这个字典的键值最终将传入应用中所有模板的上下文。：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#上下文处理器</span></span><br><span class="line"><span class="meta">@app.context_processor</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inject_user</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">dict</span>(user=g.user)<span class="comment">#模板可以使用一个名为user，值为g.user的变量</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.context_processor</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">utility_processor</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">format_price</span>(<span class="params">amount,currency=<span class="string">u&#x27;$&#x27;</span></span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">u&#x27;&#123;0:.2f&#125; &#123;1&#125;.format(amount,currency)</span></span><br><span class="line"><span class="string">    return dict(format_price=format_price)#format_price函数在所有模板中可用</span></span><br><span class="line"><span class="string">#调用format_price函数</span></span><br><span class="line"><span class="string">&#123; &#123;format_price(0.33)&#125; &#125;</span></span><br></pre></td></tr></table></figure>
<p>由于Python允许传递函数，其变量不仅仅限于值，上下文处理器也可以使某个函数在模板中可用。</p>
<h1 id="即插视图">即插视图</h1>
<p>即插视图主要目的是可以替换已实现的部分，并且这个方式可以定制即插视图。</p>
<h2 id="基本原则">基本原则</h2>
<p>若有一个从数据库载入一个对象列表并渲染到视图的函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/users/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_users</span>(<span class="params">page</span>):</span><br><span class="line">    users=User.query.<span class="built_in">all</span>()</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;user.html&#x27;</span>,users=users)</span><br></pre></td></tr></table></figure>
<p>这是简单而灵活的实现，但若想要用一种通用的，同样可以适应其他模型和模板的方式来提供这个视图，会需要更大的灵活性，而这就是基于类的即插视图所做的。</p>
<p>第一步，把它转换为基于类的视图：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask.views <span class="keyword">import</span> View</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ShowUsers</span>(<span class="title class_ inherited__">View</span>):<span class="comment">#创建flask.views.View的子类</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dispatch_request</span>(<span class="params">self</span>):</span><br><span class="line">        users=User.query.<span class="built_in">all</span>()</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;users.html&#x27;</span>,objects=users)</span><br><span class="line">app.add_url_rule(<span class="string">&#x27;/users/&#x27;</span>,ShowUsers.as_view(<span class="string">&#x27;show_users&#x27;</span>))<span class="comment">#as_view把类转换到实际的视图</span></span><br></pre></td></tr></table></figure>
<p>上面实现的方法还不够有效，因此需要重构一下代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask.views <span class="keyword">import</span> View</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ListView</span>(<span class="title class_ inherited__">View</span>):</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">get_template_name</span>(<span class="params">self</span>):<span class="comment">#self无论何时请求被调度都会创建这个类的新实例</span></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">render_template</span>(<span class="params">self,context</span>):</span><br><span class="line">        <span class="keyword">return</span> render_template(self.get_template_name(),**context)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dispatch_request</span>(<span class="params">self</span>):<span class="comment">#以URL规则为参数调用</span></span><br><span class="line">        context=&#123; <span class="string">&#x27;objects&#x27;</span>:self.get_objects() &#125;</span><br><span class="line">        <span class="keyword">return</span> self.render_template(context)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserView</span>(<span class="title class_ inherited__">ListView</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_template_name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;user.html&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_objects</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> User.query.<span class="built_in">all</span>()</span><br><span class="line"><span class="comment">#将类实例化并进行注册</span></span><br><span class="line">app.add_url_rule(<span class="string">&#x27;/about&#x27;</span>,view_func=RenderTemplateView.as_view(</span><br><span class="line">	<span class="string">&#x27;about_page&#x27;</span>,template_name=<span class="string">&#x27;about.html&#x27;</span>))</span><br></pre></td></tr></table></figure>
<h2 id="方法提示">方法提示</h2>
<p>即插视图可以像常规函数一样用route()或更好的add_url_rule()附加到应用中。而当进行附加时，必须提供HTTP方法的名称。为了将这个信息加入到类中，可以提供methods属性类承载它：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyView</span>(<span class="title class_ inherited__">View</span>):</span><br><span class="line">    methods=[<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;POST&#x27;</span>]</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dispatch_request</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> request_method==<span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">app.add_url_rule(<span class="string">&#x27;/myview&#x27;</span>,view_func=MyView.as_view(<span class="string">&#x27;myview&#x27;</span>))        </span><br></pre></td></tr></table></figure>
<h2 id="基于调度的方法">基于调度的方法</h2>
<p>对于每个HTTP方法执行不同的函数，对RESTfulAPI非常有用。可以通过flask.views.MethodView实现。每个HTTP方法映射到同名函数中（只有名称为小写的）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask.views <span class="keyword">import</span> MethodView</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserAPI</span>(<span class="title class_ inherited__">MethodView</span>):</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self</span>):</span><br><span class="line">		users=User.query.<span class="built_in">all</span>()</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self</span>):</span><br><span class="line">        user=User.from_form_data(request.form)</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">app.add_url_rule(<span class="string">&#x27;/users/&#x27;</span>,view_func=UserAPI.as_view(<span class="string">&#x27;users&#x27;</span>))    </span><br></pre></td></tr></table></figure>
<p>如此便可以不提供method属性，其会自动按照类中定义的方法来设置。</p>
<h2 id="装饰视图">装饰视图</h2>
<p>视图类自己不是加入到路由系统的视图函数，那么就没有必要去装饰视图类，但可以手动装饰as_view()的返回值：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">user_required</span>(<span class="params">f</span>):</span><br><span class="line">    <span class="comment">#检查用户是否登录，若没登录返回401错误</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decorator</span>(<span class="params">*args,**kwargs</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> g.user:</span><br><span class="line">            abort(<span class="number">401</span>)</span><br><span class="line">        <span class="keyword">return</span> f(*args,**kwargs)</span><br><span class="line">    <span class="keyword">return</span> decorator</span><br><span class="line">view=user_required(UserAPI.as_view(<span class="string">&#x27;users&#x27;</span>))</span><br><span class="line">app.add_url_rule(<span class="string">&#x27;/users/&#x27;</span>,view_func=view)</span><br></pre></td></tr></table></figure>
<p>从Flask0.8开始，增加了另一种在类声明中设定一个装饰器列表的方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UserAPI</span>(<span class="title class_ inherited__">MethodView</span>):</span><br><span class="line">    decorators=[user_required]</span><br></pre></td></tr></table></figure>
<p>由于从调用者的视角来看self是不明确的，因此<strong>不能在单独的视图方法上使用常规的视图装饰器。</strong></p>
<h2 id="用于api的方法视图">用于API的方法视图</h2>
<p>WebAPI的工作通常与HTTP动词紧密相关，因此API需要不同的URL规则来访问相同的方法视图。</p>
<p>若要在web上暴露一个用户对象：</p>
<table>
<thead>
<tr class="header">
<th>URL</th>
<th>HTTP 方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>/users/</code></td>
<td><code>GET</code></td>
<td>获得全部用户的列表</td>
</tr>
<tr class="even">
<td><code>/users/</code></td>
<td><code>POST</code></td>
<td>创建一个新用户</td>
</tr>
<tr class="odd">
<td><code>/users/&lt;id&gt;</code></td>
<td><code>GET</code></td>
<td>显示某个用户</td>
</tr>
<tr class="even">
<td><code>/users/&lt;id&gt;</code></td>
<td><code>PUT</code></td>
<td>更新某个用户</td>
</tr>
<tr class="odd">
<td><code>/users/&lt;id&gt;</code></td>
<td><code>DELETE</code></td>
<td>删除某个用户</td>
</tr>
</tbody>
</table>
<p>可以利用MethodView对相同的视图提供多个规则，此时的视图为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UserAPI</span>(<span class="title class_ inherited__">MethodView</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self,user_id</span>):</span><br><span class="line">        <span class="keyword">if</span> user_id <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="comment">#返回全部用户列表</span></span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment">#显示一个用户</span></span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment">#创建一个新用户</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">self,user_id</span>):</span><br><span class="line">        <span class="comment">#删除一个用户</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">put</span>(<span class="params">self,user_id</span>):</span><br><span class="line">        <span class="comment">#更新一个用户</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<p>添加两条规则，并为每条规则显式地指出HTTP方法，将它挂载到路由系统中：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">user_view=UserAPI.as_view(<span class="string">&#x27;user_api&#x27;</span>)</span><br><span class="line">app.add_url_rule(<span class="string">&#x27;/users/&#x27;</span>,default=&#123;<span class="string">&#x27;user_id&#x27;</span>:<span class="literal">None</span>&#125;,</span><br><span class="line">                view_func=user_view,methods=[<span class="string">&#x27;GET&#x27;</span>,])</span><br><span class="line">app.add_url_rule(<span class="string">&#x27;/users/&#x27;</span>,view_func=user_view,methods=[<span class="string">&#x27;POST&#x27;</span>,])</span><br><span class="line">app.add_url_rule(<span class="string">&#x27;/users/&lt;int:user_id&gt;&#x27;</span>,view_func=user_view,</span><br><span class="line">                methods=[<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;PUT&#x27;</span>,<span class="string">&#x27;DELETE&#x27;</span>])</span><br></pre></td></tr></table></figure>
<p>若有很多类似的API，可以重构上述的注册代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">register_api</span>(<span class="params">view,endpoint,url,pk=<span class="string">&#x27;id&#x27;</span>,pk_type=<span class="string">&#x27;int&#x27;</span></span>):</span><br><span class="line">    view_func=view.as_view(endpoint)</span><br><span class="line">    app.add_url_rule(url,defaults=&#123;pk:<span class="literal">None</span>&#125;,</span><br><span class="line">                    view_func=view_funv,methods=[<span class="string">&#x27;GET&#x27;</span>,])</span><br><span class="line">    app.add_url_rule(url,view_func=view_func,methods=[<span class="string">&#x27;POST&#x27;</span>,])</span><br><span class="line">    app.add_url_rule(<span class="string">&#x27;%s &lt; %s : %s &gt; &#x27;</span> % (url,pk_type,pk),view_func=view_func,methods=[<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;PUT&#x27;</span>,<span class="string">&#x27;DELETE&#x27;</span>])</span><br><span class="line">register_api(UserAPI,<span class="string">&#x27;user_api&#x27;</span>,<span class="string">&#x27;/users/&#x27;</span>,pk=<span class="string">&#x27;user_id&#x27;</span>)    </span><br></pre></td></tr></table></figure>
<h1 id="用蓝图实现模块化的应用">用蓝图实现模块化的应用</h1>
<p>一个应用中或跨应用制作应用组件和支持通用的模式称为蓝图。蓝图简化了大型应用的工作方式，并提供给Flask扩展在应用上注册操作的核心方法。一个Blueprint对象与Flask应用对象的工作方式很像，但它确实不是一个应用，而是描述如何构建或扩展应用的蓝图。</p>
<h2 id="为什么使用蓝图">为什么使用蓝图</h2>
<p>Flask中的蓝图为这些情况设计：</p>
<ul>
<li>把一个应用分解为一个蓝图的集合。一个项目可以实例化一个应用对象，初始化几个扩展，并注册一集合的蓝图。</li>
<li>以URL前缀和/或子域名，在应用上注册一个蓝图。默认情况下，URL前缀/子域名中的参数即为这个蓝图下的所有视图函数的共同的视图参数。</li>
<li>在一个应用中用不同的URL规则多次注册一个蓝图。</li>
<li>通过蓝图提供模板过滤器、静态文件、模板和其他功能。一个蓝图不一定要实现应用或者视图函数。</li>
<li>初始化一个Flask扩展时，在这些情况中注册一个蓝图。</li>
</ul>
<p>Flask中的蓝图不是即插应用，因为它虽然可以注册，甚至可以多次注册到应用上的操作集合中，但其实际上不是一个应用。可以使用多个应用对象，但应用的配置的分开的，并在WSGI层管理。</p>
<p>蓝图作为Flask层提供分隔的替代，共享应用配置，并且在必要情况下可以更新所注册的应用对象。其缺点是<strong>不能在应用创建后撤销注册一个蓝图而不销毁整个应用对象。</strong></p>
<h2 id="蓝图的设想">蓝图的设想</h2>
<p>蓝图的基本设想是当它们注册到应用上时，它们记录将会被执行的操作。当分派请求和生成从一个端点到另一个URL时，Flask会关联蓝图中的视图函数。</p>
<h2 id="蓝图的实现">蓝图的实现</h2>
<p>实现一个简单渲染静态模板的蓝图如下： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Blueprint,render_template,abort</span><br><span class="line"><span class="keyword">from</span> jinja2 <span class="keyword">import</span> TemplateNotFound</span><br><span class="line">simple_page=Blueprint(<span class="string">&#x27;simple_page&#x27;</span>,__name__,template_folder=<span class="string">&#x27;templates&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@simple_page.route(<span class="params"><span class="string">&#x27;/&#x27;</span>,defaults=&#123;<span class="string">&#x27;page&#x27;</span>:<span class="string">&#x27;index&#x27;</span>&#125;</span>)</span><span class="comment">#绑定函数</span></span><br><span class="line"><span class="meta">@simple_page.route(<span class="params"><span class="string">&#x27;/&lt;page&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">page</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;pages/ %s.html&#x27;</span> %page)</span><br><span class="line">    <span class="keyword">except</span> TemplateNotFound:</span><br><span class="line">        abort(<span class="number">404</span>)    </span><br></pre></td></tr></table></figure></p>
<p>当使用@simple_page.route装饰器绑定函数时，在蓝图之后被注册时它会记录把show函数注册到应用上的意图。除此之外还会给函数的端点加上有Blueprint的构造函数中给出的蓝图的名称作为前缀（如上述代码中是simple_page）</p>
<h2 id="注册蓝图">注册蓝图</h2>
<p>注册蓝图：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> yourapplicarion.simple_page <span class="keyword">import</span> simple_page</span><br><span class="line">app=Flask(__name__)</span><br><span class="line">app.register_blueprint(simple_page)</span><br></pre></td></tr></table></figure>
<p>若检查已经注册到应用的规则，会发现这些生成出的规则：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[ &lt;Rule <span class="string">&#x27;/static/&lt;filename&gt;&#x27;</span> (HEAD, OPTIONS, GET) -&gt; static&gt;,<span class="comment">#来自应用本身，用于静态文件</span></span><br><span class="line">  &lt;Rule <span class="string">&#x27;/&lt;page&gt;&#x27;</span> (HEAD, OPTIONS, GET) -&gt; simple_page.show&gt;,<span class="comment">#用于simple_page蓝图中的show函数</span></span><br><span class="line">  &lt;Rule <span class="string">&#x27;/&#x27;</span> (HEAD, OPTIONS, GET) -&gt; simple_page.show&gt; ]<span class="comment">#用于simple_page蓝图中的show函数</span></span><br></pre></td></tr></table></figure>
<p>蓝图在不同位置挂载时生成的规则也不同，如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">app.register_blueprint(simple_page,url_prefix=<span class="string">&#x27;/pages&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#生成的规则如下：</span></span><br><span class="line">[ &lt;Rule <span class="string">&#x27;/static/&lt;filename&gt;&#x27;</span> (HEAD, OPTIONS, GET) -&gt; static&gt;,<span class="comment">#来自应用本身，用于静态文件</span></span><br><span class="line">  &lt;Rule <span class="string">&#x27;/pages/&lt;page&gt;&#x27;</span> (HEAD, OPTIONS, GET) -&gt; simple_page.show&gt;,<span class="comment">#挂载到pages页下，用于simple_page蓝图中的show函数</span></span><br><span class="line">  &lt;Rule <span class="string">&#x27;/pages/&#x27;</span> (HEAD, OPTIONS, GET) -&gt; simple_page.show&gt; ]</span><br></pre></td></tr></table></figure>
<p>除此之外还可以多次注册蓝图，但不是每个蓝图都会正确地响应。<strong>实际上蓝图能否被多次挂载，取决于蓝图是怎样实现的。</strong></p>
<h2 id="蓝图资源">蓝图资源</h2>
<p>蓝图也可以提供资源。有时候会只为它提供的资源而引入一个蓝图。</p>
<h3 id="蓝图资源文件夹">蓝图资源文件夹</h3>
<p>蓝图被设想为包含在一个文件夹中。也有多个蓝图源于同一个文件夹的情况，但不推荐这种做法。</p>
<p>这个文件夹会从Blueprint的第二个参数中推断出来，通常是<code>__name__</code>。这个参数决定对应蓝图的是哪个逻辑的Python模块或包。若它指向一个存在的Python包，这个包就是资源文件夹。若是一个模块，模块所在的包就是资源文件夹。可以访问<code>Blueprint.root_path</code>属性来查看资源文件夹是什么，其语句为：<code>simple_page.root_path</code>。</p>
<p>可以使用open_resource()函数来快速从这个文件夹打开源文件：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> simple_page.open_resource(<span class="string">&#x27;static/style.css&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    code=f.read()</span><br></pre></td></tr></table></figure>
<h2 id="静态文件">静态文件</h2>
<p>一个蓝图可以通过static_folder关键字参数提供一个指向文件系统上文件夹的路径，并以此来暴露一个带有静态文件的文件夹。这可以是一个绝对路径，也可以是相对于蓝图资源文件夹的路径：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">admin=Blueprint(<span class="string">&#x27;admin&#x27;</span>,__name__,static_folfer=<span class="string">&#x27;static&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>默认情况下，路径最右边的部分就是它在web所暴露的地址。这个static的文件夹会在蓝图+/static的位置上可用，即蓝图为/admin把静态文件夹注册到/admin/static。</p>
<p>最后是用于命名的blueprint_name.static，也可以生成它的URL：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url_for(<span class="string">&#x27;admin.static&#x27;</span>,filename=<span class="string">&#x27;style.css&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="模板-1">模板</h2>
<p>若想要蓝图暴露模板，可以通过Blueprint构造函数中的template_folder参数来实现：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">admin=Blueprint(<span class="string">&#x27;admin&#x27;</span>,__name__,template_folder=<span class="string">&#x27;templates&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>路径可以是绝对的或是相对蓝图资源文件夹的。模板文件夹会被加到模板的搜索路径中，但比实际的应用模板文件夹优先级低，因此可以在实际的应用中覆盖蓝图提供的资源。</p>
<p>因此当有一个<code>yourapplication/admin</code>文件夹中的蓝图并且想要渲染<code>admin/index.html</code>模板时，提供templates作为template_folder，则创建文件的路径为：</p>
<p><code>yourapplication/admin/templates/admin/index.html</code>。</p>
<h2 id="构造url">构造URL</h2>
<p>当想要用蓝图从一个页面链接到另一个页面时，可以使用url_for()函数，但要在UTL的末端加上蓝图的名称和一个点（<code>.</code>）来作为前缀。若在一个蓝图的视图函数或是模板中想要从链接到同一蓝图下另一个端点时，可以通过对端点只加上一个点作为前缀来使用相对的重定向：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url_for(<span class="string">&#x27;admin.index&#x27;</span>)<span class="comment">#链接到admin蓝图的index页面</span></span><br><span class="line">url_for(<span class="string">&#x27;.index&#x27;</span>)<span class="comment">#链接到同一蓝图下的index页面</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Web框架</category>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Flask Web</tag>
        <tag>后端</tag>
        <tag>Web框架</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask Web开发学习笔记（二）</title>
    <url>/2022/10/20/Flask%20Web%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h1 id="创建应用教程">创建应用教程</h1>
<h2 id="创建文件夹">创建文件夹</h2>
<p>先创建应用所需的文件夹，接下来会直接把数据库模式和主模块放在这个目录中。用户可以通过HTTP访问static文件夹中的文件，即存放css和javascript文件的地方：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">/tutorweb</span><br><span class="line">    /static</span><br><span class="line">    /templates</span><br></pre></td></tr></table></figure>
<h2 id="创建数据库模式">创建数据库模式</h2>
<p>创建schema.sql文件，文件里编写以下内容，放到tutorweb文件中：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> entries;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> entries(</span><br><span class="line">	id <span class="type">integer</span> <span class="keyword">primary</span> key autoincrement,</span><br><span class="line">	title string <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">	text string <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>该模式包含一个名为entries的表，该表中的每行都包含一个id、一个title和一个text。id是一个自增的整数，也是主键，其余的两个是字符串且不允许为空。</p>
<h2 id="应用设置代码">应用设置代码</h2>
<h3 id="创建应用模块">创建应用模块</h3>
<p>创建应用的模块tutorweb.py并放置在tutorweb目录下。从添加所需的导入语句和添加配置部分开始。对于小型应用，可以直接把配置放在主模块里，但更简洁的方案是创建独立的<code>.ini</code>或<code>.py</code>文件，并载入里面的值。</p>
<p>首先在tutorweb.py里导入内容：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#导入所有模块</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,request,session,g,redirect,url_for,abort,\</span><br><span class="line">    render_template,flash</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置文件</span></span><br><span class="line">DATABASE=<span class="string">&#x27;./sqlite_db&#x27;</span></span><br><span class="line">USERNAME=<span class="string">&#x27;admin&#x27;</span></span><br><span class="line">PASSWORD=<span class="string">&#x27;default&#x27;</span></span><br><span class="line">DEBUG=<span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建应用</span></span><br><span class="line">app=Flask(__name__)</span><br><span class="line">app.config.from_object(__name__)</span><br><span class="line">app.secret_key=<span class="string">&#x27;develop key&#x27;</span></span><br></pre></td></tr></table></figure>
<h3 id="数据库路径">数据库路径</h3>
<p>操作系统有进程当前工作目录的概念，但由于在Web应用中相同的进程运用多个应用，因此不能依赖此概念。Flask提供了<code>app.root_path</code>属性以获取应用的路径，配合<code>os.path</code>模块的使用，可以轻松到达任意文件。在本例中，数据库放在根目录下。</p>
<p>通常只能加载一个单独的、环境特定的配置文件。Flask中使用<code>from_envvar()</code>方法可以实现允许导入多份配置文件，并使用最后的导入的设置。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">app.config.from_envvar(<span class="string">&#x27;FLASKR_SETTINGS&#x27;</span>,slient=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<p>只需要设置一个名为<code>FLASKR_SETTINGS</code>的环境变量指向要加载的配置文件，启动静默模式告诉Flask在没有设置该环境变量的情况下噤声。</p>
<p>此外还可以使用配置对象上的<code>from_object()</code>方法，并传递一个模块的导入名作为参数。Flask会从这个模块初始化变量，注意<strong>只有名称全为大写字母的变量才会被采用</strong>。</p>
<p><code>secret_key</code>是保证客户端会话安全的重要所在。尽量选择一个尽可能难猜测、尽可能复杂的密钥。</p>
<p>调试标志关系交互式调试器的开启。永远<strong>不要在生产系统中激活调试模式</strong>，因为它将允许用户在服务器上执行代码。</p>
<p>添加一个连接到指定数据的方法是，用于请求时开启一个数据库连接，并在交互式Python shell和脚本中也能使用。在tutorweb.py文件中创建一个简单的SQLite数据库的连接，并让它用sqlite3.Row表示数据库中的行，使得可以通过字典而不是元组的形式访问行：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">connect_db</span>():</span><br><span class="line">    <span class="comment">#连接特定的数据库      </span></span><br><span class="line">    rv=sqlite3.connect(app.config[<span class="string">&#x27;DATABASE&#x27;</span>])</span><br><span class="line">    rv.row_factory=sqlite3.Row</span><br><span class="line">    <span class="keyword">return</span> rv</span><br></pre></td></tr></table></figure>
<p>最后，若想要把这个文件当作独立应用来运行，只需在可启动服务器文件tutorweb.py的末尾加上这行代码即可运行这个应用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure>
<p>此时在浏览器中访问服务器会遇到404 page not found错误，这是因为还没有创建任何视图的缘故。在创建视图之前，应该先让数据库工作起来。</p>
<h2 id="数据库连接">数据库连接</h2>
<p>Flask提供了两种环境：应用环境和请求环境。不同环境有不同的特殊变量。例如request变量与当前请求的请求对象有关，而g是当前应用环境有关的通用变量。</p>
<p>在tutorweb.py文件中可以写一个辅助函数把数据库连接存放在g对象上。这个函数首次调用时会为当前的函数创建一个数据库连接，调用成功后返回已经建立好的连接：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_db</span>():</span><br><span class="line">    <span class="comment">#打开一个新数据库连接</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">hasattr</span>(g,<span class="string">&#x27;sqlite_db&#x27;</span>):</span><br><span class="line">        g.sqlite_db=connect_db()</span><br><span class="line">        <span class="keyword">return</span> g.sqlite_db    </span><br></pre></td></tr></table></figure>
<p>Flask提供了<code>teardown_appcontext()</code>装饰器来断开数据库连接，它将在每次应用环境销毁时执行：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.teardown_appcontext</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">close_db</span>(<span class="params">error</span>):</span><br><span class="line">    <span class="comment">#断开数据库连接</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">hasattr</span>(g,<span class="string">&#x27;sqlite_db&#x27;</span>):</span><br><span class="line">        g.sqlite_db.close()</span><br></pre></td></tr></table></figure>
<p>本质上，应用环境在请求传入前创建，每当请求结束时销毁。销毁有两种原因：一切正常（错误参数是None）或发送异常，后者错误会被传递给销毁函数。</p>
<h2 id="创建数据库">创建数据库</h2>
<p>Flask是一个由关系数据库驱动的应用。关系数据库系统需要一个模式来决定存储信息的方式。</p>
<h3 id="创建模式">创建模式</h3>
<p>可以通过管道把schema.sql作为sqlite3命令的输入来创建这个模式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sqlite3 /tmp/flaskr.db &lt; schema.sql</span><br></pre></td></tr></table></figure>
<p>这种方法的缺点是需要安装sqlite3命令，且必须提供数据库的路径，否则会报错。因此比较推荐使用函数来初始化数据库。</p>
<p>创建一个名为init_db的函数来初始化数据库，只需要把这个函数放在tutorweb.py里的connect_db函数后面并调用<code>init_db()</code>函数来创建数据库：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">init_db</span>():</span><br><span class="line"><span class="comment">#建立应用环境，在with内部，g对象与app关联，在语句结束出会释放这个关联并执行所有销毁函数，即数据库连接会在提交后断开</span></span><br><span class="line">    <span class="keyword">with</span> app.app_context():   </span><br><span class="line">        db=get_db()</span><br><span class="line">        <span class="comment">#open_resource可以打开应用提供的资源，在tutorweb文件夹打开文件并允许读取它，用它来在数据库连接上执行脚本</span></span><br><span class="line">        <span class="keyword">with</span> app.open_resource(<span class="string">&#x27;schema.sql&#x27;</span>,mode=<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            db.cursor().executescript(f.read())</span><br><span class="line">        db.commit()       </span><br><span class="line">init_db() </span><br></pre></td></tr></table></figure>
<p>应用环境在每次请求传入时创建，这里并没有请求，故需要手动创建一个应用环境。g在应用环境外无法获知它属于哪个应用，因为可能会有多个应用同时存在。</p>
<p>SQLite的数据库连接对象提供了一个游标对象，游标上有一个方法可以执行完整的脚本。最后只需提交变更，SQLite3和其他支持事务的数据库只会在显示提交的时候提交。</p>
<h2 id="视图函数">视图函数</h2>
<p>数据库连接正常工作后，共需要写四个视图函数。</p>
<h3 id="显示条目">显示条目</h3>
<p>这个视图显示数据库中存储的所有条目，它绑定在应用的根地址，并从数据库查询出文章的标题和正文。id值最大的条目（最新的条目）会显示在最上方。从指针返回的行是按select语句中声明的列组织元组。</p>
<p>视图函数会将条目作为字典传递给<code>show_entries.html</code>模板，并返回渲染结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>) </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_entries</span>():</span><br><span class="line">    <span class="comment">#显示条目</span></span><br><span class="line">    g.db=get_db()</span><br><span class="line">    cur=g.db.execute(<span class="string">&#x27;select title, text from entries order by id desc&#x27;</span>)</span><br><span class="line">    entries=[<span class="built_in">dict</span>(title=row[<span class="number">0</span>],text=row[<span class="number">1</span>]) <span class="keyword">for</span> row <span class="keyword">in</span> cur.fetchall()]</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;show_entries.html&#x27;</span>,entries=entries)</span><br></pre></td></tr></table></figure>
<h2 id="添加条目">添加条目</h2>
<p>这个视图允许已登入的用户添加新条目，并只响应POST请求，实际的表单显示在<code>show_entries</code>页。若一切工作正常，用flash()向下一次请求发送提示消息，并重定向回<code>show_entries</code>页：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/add&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_entry</span>():</span><br><span class="line">    <span class="comment">#添加条目</span></span><br><span class="line">    g.db=get_db()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> session.get(<span class="string">&#x27;logged_in&#x27;</span>):</span><br><span class="line">        abort(<span class="number">401</span>)</span><br><span class="line">    g.db.execute(<span class="string">&#x27;insert into entries (title,text) values (?,?)&#x27;</span>,</span><br><span class="line">                    [request.form[<span class="string">&#x27;title&#x27;</span>],request.form[<span class="string">&#x27;text&#x27;</span>]])       </span><br><span class="line">    g.db.commit()</span><br><span class="line">    flash(<span class="string">&#x27;New entry was successfully posted&#x27;</span>)                 </span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;show_entries&#x27;</span>))</span><br></pre></td></tr></table></figure>
<p>注意这里的用户登入检查（logged_in键在会话中存在且为True）</p>
<h3 id="安全提示">安全提示：</h3>
<p>确保像上面代码一样使用问号标记来构建SQL语句。否则当使用格式化字符串构建SQL语句时，所建立的应用容易遭受SQL注入。</p>
<h2 id="登入和登出">登入和登出</h2>
<p>这个函数用来让用户登入。登入通过与配置文件中的数据比较检查用户名和密码，并设定会话中的<code>logged_in</code>键值。若用户成功登入，这个键值会被设为True，并跳转回<code>show_entries</code>页。此外还会有信息闪现来提示用户登入成功。如果发生一个错误，模板会通知并提示重新登录。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;POST&#x27;</span>]</span>)    </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="comment">#登入和登出</span></span><br><span class="line">    error=<span class="literal">None</span></span><br><span class="line">    <span class="keyword">if</span> request.method==<span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> request.form[<span class="string">&#x27;username&#x27;</span>]!=app.config[<span class="string">&#x27;USERNAME&#x27;</span>]:</span><br><span class="line">            error=<span class="string">&#x27;Invalid username&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> request.form[<span class="string">&#x27;password&#x27;</span>]!=app.config[<span class="string">&#x27;PASSWORD&#x27;</span>]:</span><br><span class="line">            error=<span class="string">&#x27;Invalid password&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            session[<span class="string">&#x27;logged_in&#x27;</span>]=<span class="literal">True</span></span><br><span class="line">            flash(<span class="string">&#x27;You were logged in&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;show_entries&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;login.html&#x27;</span>,error=error)            </span><br></pre></td></tr></table></figure>
<p>这个函数用来让用户登出。从会话中删除<code>logged_in</code>键。使用字典的pop()方法并传入第二个参数（默认），以从字典删除这个键，若这个键不存在则什么都不做。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/logout&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">logout</span>():</span><br><span class="line">    <span class="comment">#登出</span></span><br><span class="line">    session.pop(<span class="string">&#x27;logged_in&#x27;</span>,<span class="literal">None</span>)</span><br><span class="line">    flash(<span class="string">&#x27;You were logged out&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;show_entries&#x27;</span>))</span><br></pre></td></tr></table></figure>
<h2 id="模板">模板</h2>
<p>若现在请求URL，只会得到Flask无法找到模板的异常。模板使用Jinja2语法并默认开启自动转义。这意味着除非使用Markup标记或在模板中使用<code>|safe</code>过滤器，否则Jinja2会确保特殊字符，比如<code>&lt;</code>或<code>&gt;</code>被转义为等价的XML实体。</p>
<h3 id="layout.html">layout.html</h3>
<p>将下面的模板放进templates文件夹里。这个模板包含HTML主体结构、标题和一个登入链接（用户已登入则提供登出）。若有，它会显示闪现消息。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% block body %&#125;</span><br></pre></td></tr></table></figure>
<p>模块可以被子模版中相同名字的块（body）替换。</p>
<p>session字典在模板中也是可用的，可以用它来检查用户是否已登入。在Jinja中你<strong>可以访问不存在的对象、字典属性或成员</strong>。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>tutorweb<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">stylesheet</span> <span class="attr">type</span>=<span class="string">text/css</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123;url_for(&#x27;static&#x27;,filename=&#x27;style.css&#x27;)&#125;&#125;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">page</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>tutorweb<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>    </span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">metanav</span>&gt;</span></span><br><span class="line">  &#123;% if not session.logged_in %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123;url_for(&#x27;login&#x27;)&#125;&#125;&quot;</span>&gt;</span>log in<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  &#123;% else %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123;url_for(&#x27;logout&#x27;)&#125;&#125;&quot;</span>&gt;</span>log out<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  &#123;% endif %&#125;        </span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  &#123;% for message in get_flashed_messages() %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">flash</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  &#123;% endfor %&#125;</span><br><span class="line">  &#123;% block body %&#125;&#123;% endblock %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="show_entries.html">show_entries.html</h3>
<p>这个模板继承了上面的<code>layout.html</code>模板来显示消息。注意for循环会遍历并输出所有<code>render_template()</code>函数传入的消息。还告诉表单使用HTTP的POST方法提交信息到<code>add_entry</code>函数：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% extends &quot;layout.html&quot; %&#125;<span class="comment">&lt;!--模板继承，继承layout.html的内容--&gt;</span></span><br><span class="line">&#123;% block body %&#125;</span><br><span class="line">  &#123;% if session.logged_in %&#125;<span class="comment">&lt;!--初次登录，session.logged_in为假，下面的内容不显示--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&#123;&#123;url_for(&#x27;add_entry&#x27;)&#125;&#125;&quot;</span> <span class="attr">method</span>=<span class="string">post</span> <span class="attr">class</span>=<span class="string">add-entry</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>Title:</span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">text</span> <span class="attr">size</span>=<span class="string">30</span> <span class="attr">name</span>=<span class="string">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>Text </span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">text</span> <span class="attr">rows</span>=<span class="string">5</span> <span class="attr">cols</span>=<span class="string">40</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">submit</span> <span class="attr">value</span>=<span class="string">Share</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">entries</span>&gt;</span></span><br><span class="line">  &#123;% for entry in entries %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;entry.title&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span>&#123;&#123;entry.text|safe&#125;&#125;</span><br><span class="line">  &#123;% else %&#125;<span class="comment">&lt;!--此次登录默认显示以下内容--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span>Unbelievable. No entries here so far<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line">  &#123;% endfor %&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span>                        </span><br><span class="line">&#123;% endblock %&#125;           </span><br></pre></td></tr></table></figure>
<h3 id="login.html">login.html</h3>
<p>最后是登入模板，简单地显示一个允许用户登入的表单：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% extends &quot;layout.html&quot; %&#125;<span class="comment">&lt;!--模板继承layout.html的内容--&gt;</span></span><br><span class="line">&#123;% block body %&#125;<span class="comment">&lt;!--重载--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--error不为None时显示出错误原因--&gt;</span></span><br><span class="line">  &#123;% if error %&#125;<span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">error</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>Error:<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>&#123;&#123;error&#125;&#125;&#123;% endif %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&#123;&#123;url_for(&#x27;login&#x27;)&#125;&#125;&quot;</span> <span class="attr">method</span>=<span class="string">post</span>&gt;</span><span class="comment">&lt;!--action后是form表单提交的地址--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dt</span>&gt;</span>Username:</span><br><span class="line">      <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">text</span> <span class="attr">name</span>=<span class="string">username</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dt</span>&gt;</span>Password </span><br><span class="line">      <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">password</span> <span class="attr">name</span>=<span class="string">password</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">submit</span> <span class="attr">value</span>=<span class="string">Login</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span>                     </span><br><span class="line">&#123;% endblock %&#125;          </span><br></pre></td></tr></table></figure>
<h2 id="添加样式">添加样式</h2>
<p>现在其他的一切都可以正常工作，是时候给应用添加样式了。只需在static文件夹中创建一个名为style.css的样式表即可：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">font-family</span>:sans-serif;</span><br><span class="line">    <span class="attribute">background</span>:<span class="number">#eee</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span>,<span class="selector-tag">h1</span>,<span class="selector-tag">h2</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:<span class="number">#377BAB</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h1</span>,<span class="selector-tag">h2</span>&#123;</span><br><span class="line">    <span class="attribute">font-family</span>:<span class="string">&#x27;Georgia&#x27;</span>,serif;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h1</span>&#123;</span><br><span class="line">    <span class="attribute">border-bottom</span>:<span class="number">2px</span> solid <span class="number">#eee</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h2</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>:<span class="number">1.2em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.page</span>&#123;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">2em</span> auto;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">35em</span>;</span><br><span class="line">    <span class="attribute">border</span>:<span class="number">5px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">padding</span>:<span class="number">0.8em</span>;</span><br><span class="line">    <span class="attribute">background</span>:white;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.entries</span>&#123;</span><br><span class="line">    <span class="attribute">list-style</span>:none;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.entries</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">0.8em</span> <span class="number">1.2em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.entries</span> <span class="selector-tag">li</span> <span class="selector-tag">h2</span>&#123;</span><br><span class="line">    <span class="attribute">margin-left</span>:-<span class="number">1em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.add-entry</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>:<span class="number">0.9em</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>:<span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.add-entry</span> <span class="selector-tag">dl</span>&#123;</span><br><span class="line">    <span class="attribute">font-weight</span>:bold;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.metanav</span>&#123;</span><br><span class="line">    <span class="attribute">text-align</span><span class="selector-pseudo">:right</span>;</span><br><span class="line">    <span class="attribute">font-size</span>:<span class="number">0.8em</span>;</span><br><span class="line">    <span class="attribute">padding</span>:<span class="number">0.3em</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>:<span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">background</span>:<span class="number">#fafafa</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.toturweb</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>:<span class="number">#CEE5F5</span>;</span><br><span class="line">    <span class="attribute">padding</span>:<span class="number">0.5em</span>;;</span><br><span class="line">    <span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#AACBE2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.error</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>:<span class="number">#F0D6D6</span>;</span><br><span class="line">    <span class="attribute">padding</span>:<span class="number">0.5em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后运行tutorweb.py程序即可在<code>127.0.0.0:5000</code>上看到创建的应用。</p>
]]></content>
      <categories>
        <category>Web框架</category>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Flask Web</tag>
        <tag>后端</tag>
        <tag>Web框架</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask实战之搭建博客后端</title>
    <url>/2022/10/24/Flask%E5%AE%9E%E6%88%98%E4%B9%8B%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%90%8E%E7%AB%AF/</url>
    <content><![CDATA[<h1 id="创建一个flask-restful-api">创建一个Flask RESTful API</h1>
<p>本节的目的为搭建Flask应用，并提供一个测试API，客户端访问<code>/ping</code>后会返回<code>pong!</code>响应。</p>
<h2 id="配置flask">配置Flask</h2>
<p>确保python3已安装后，在合适的位置新建<code>tutorproject</code>项目目录，在<code>tutorproject</code>里新建<code>back-end</code>目录，作为后端API应用所在的位置。在<code>C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end</code>的目录下右键，选择在终端打开后，按照以下步骤搭建Flask所需的环境。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建虚拟环境venv</span></span><br><span class="line">PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end&gt;python -m venv venv</span><br><span class="line"><span class="comment">#激活环境venv</span></span><br><span class="line">PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end&gt;venv\Scripts\activate</span><br><span class="line"><span class="comment">#虚拟环境中导入flask模块</span></span><br><span class="line">(venv) PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end&gt;pip install flask</span><br><span class="line"><span class="comment">#把系统环境信息写到txt中</span></span><br><span class="line">(venv) PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end&gt;pip freeze &gt;requirements.txt</span><br></pre></td></tr></table></figure>
<h2 id="应用工厂">应用工厂</h2>
<p>创建<code>tutorweb</code>目录，并在<code>tutorweb</code>目录下新建<code>__init__.py</code>文件，在<code>__init__.py</code>中，使用应用工厂函数来创建Flask应用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> config <span class="keyword">import</span> Config</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_app</span>(<span class="params">config_class=Config</span>):</span><br><span class="line">    app=Flask(__name__)</span><br><span class="line">    app.config.from_object(config_class)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#注册blueprint</span></span><br><span class="line">    <span class="keyword">from</span> tutorweb.api <span class="keyword">import</span> bp <span class="keyword">as</span> api_bp</span><br><span class="line">    app.register_blueprint(api_bp,url_prefix=<span class="string">&#x27;/api&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> app  </span><br></pre></td></tr></table></figure>
<p>创建<code>tutorweb/api</code>目录，并在<code>api</code>目录下新建<code>__init__.py</code>文件，定义蓝图：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Blueprint</span><br><span class="line">bp=Blueprint(<span class="string">&#x27;api&#x27;</span>,__name__)</span><br><span class="line"><span class="comment">#防止循环导入ping.py文件</span></span><br><span class="line"><span class="keyword">from</span> tutorweb.api <span class="keyword">import</span> ping</span><br></pre></td></tr></table></figure>
<p>在<code>api</code>目录下新建<code>ping.py</code>文件，定义路由函数，当客户端访问<code>/ping</code>时返回包含<code>JSON</code>的数据：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> jsonify</span><br><span class="line"><span class="keyword">from</span> tutorweb.api <span class="keyword">import</span> bp</span><br><span class="line"></span><br><span class="line"><span class="meta">@bp.route(<span class="params"><span class="string">&#x27;/ping&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ping</span>():</span><br><span class="line">    <span class="comment">#vue.js用来测试与后端Flask API的连通性</span></span><br><span class="line">    <span class="keyword">return</span> jsonify(<span class="string">&#x27;Pong!&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="应用启动文件">应用启动文件</h2>
<p>在<code>back-end</code>目录下新建<code>madblog.py</code>文件：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tutorweb <span class="keyword">import</span> create_app</span><br><span class="line"></span><br><span class="line">app=create_app()</span><br></pre></td></tr></table></figure>
<h2 id="配置文件">配置文件</h2>
<p>在<code>back-end</code>目录下新建<code>config.py</code>文件：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os </span><br><span class="line"><span class="keyword">from</span> dotenv <span class="keyword">import</span> load_dotenv</span><br><span class="line"></span><br><span class="line">basedir=os.path.abspath(os.path.dirname(__file__))</span><br><span class="line">load_dotenv(os.path.join(basedir,<span class="string">&#x27;.env&#x27;</span>),encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Config</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<h2 id="读取环境变量信息">读取环境变量信息</h2>
<p>将Flask应用所需的系统环境变量写到<code>back-end/.env</code>中，可先使用<code>python-dotenv</code>这个包来读取环境变量信息，再把系统环境写到txt中：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(venv) PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end&gt;pip install python-dotenv</span><br><span class="line">(venv) PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end&gt;pip freeze &gt;requirements.txt</span><br></pre></td></tr></table></figure>
<p>在<code>back-end</code>目录下新建<code>.env</code>文件，用记事本打开后写入以下信息保存：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">FLASK_APP=madblog.py</span><br><span class="line">FLASK_DEBUG=<span class="number">1</span></span><br></pre></td></tr></table></figure>
<h2 id="启动应用">启动应用</h2>
<p>输入flask run即可启动应用：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(venv) PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end&gt;flask run </span><br><span class="line"></span><br><span class="line"> * Serving Flask app <span class="string">&#x27;madblog.py&#x27;</span></span><br><span class="line"> * Debug mode: on</span><br><span class="line">WARNING: This is a development server. Do not use it <span class="keyword">in</span> a production deployment. Use a production WSGI server instead.</span><br><span class="line"> * Running on http://127.0.0.1:5000</span><br><span class="line">Press CTRL+C to quit</span><br><span class="line"> * Restarting with <span class="built_in">stat</span></span><br><span class="line"> * Debugger is active!</span><br><span class="line"> * Debugger PIN: 354-979-609</span><br></pre></td></tr></table></figure>
<p>启动应用后，打开浏览器，访问<code>http://127.0.0.1:5000/api/ping</code>，若出现<code>Pong!</code>则说明所定义的<code>Ping-Pong</code>测试路由正常。</p>
<p><img src="/2022/10/24/Flask%E5%AE%9E%E6%88%98%E4%B9%8B%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%90%8E%E7%AB%AF/1.png"></p>
<p>在cmd页面按下ctrl+c即可停止应用运行。</p>
<p><strong>此时的目录结构如下：</strong></p>
<p><img src="/2022/10/24/Flask%E5%AE%9E%E6%88%98%E4%B9%8B%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%90%8E%E7%AB%AF/2.png"></p>
<h1 id="flask设计user用户相关api">Flask设计User用户相关API</h1>
<p>本节的内容为：Flask后端针对“用户资源”提供部分RESTful API，基于token认证，支持添加用户、查看单个或多个用户、修改用户，使用HTTPie或Postman测试API通过。</p>
<h2 id="数据库">数据库</h2>
<h3 id="ormsqlalchemy">ORM：SQLAlchemy</h3>
<p>安装<code>Flask-SQLAlchemy</code>插件和数据表结构有变化后进行迁移的<code>Flask-Migrate</code>插件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(venv) PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end&gt;pip install flask-sqlalchemy flask-migrate</span><br><span class="line">(venv) PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end&gt;pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure>
<p>修改配置文件<code>back-end/config.py</code>，默认使用<code>SQLite</code>数据库：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os </span><br><span class="line"><span class="keyword">from</span> dotenv <span class="keyword">import</span> load_dotenv</span><br><span class="line"></span><br><span class="line">basedir=os.path.abspath(os.path.dirname(__file__))</span><br><span class="line">load_dotenv(os.path.join(basedir,<span class="string">&#x27;.env&#x27;</span>),encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Config</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    SQLALCHEMY_DATABASE_URI=os.environ.get(<span class="string">&#x27;DATABASE_URL&#x27;</span>) <span class="keyword">or</span> \</span><br><span class="line">        <span class="string">&#x27;sqlite:///&#x27;</span>+os.path.join(basedir,<span class="string">&#x27;tutorweb.db&#x27;</span>)</span><br><span class="line">    SQLALCHEMY_TRACK_MODIFICATIONS=<span class="literal">False</span></span><br></pre></td></tr></table></figure>
<p>修改<code>tutorweb/__init__.py</code>，引入并初始化插件：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_cors <span class="keyword">import</span> CORS</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"><span class="keyword">from</span> flask_migrate <span class="keyword">import</span> Migrate</span><br><span class="line"><span class="keyword">from</span> config <span class="keyword">import</span> Config</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义Flack_SQLAlchemy</span></span><br><span class="line">db=SQLAlchemy()</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义Flack_Migrate </span></span><br><span class="line">migrate=Migrate()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_app</span>(<span class="params">config_class=Config</span>):</span><br><span class="line">    app=Flask(__name__)</span><br><span class="line">    app.config.from_object(config_class)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#启用CORS</span></span><br><span class="line">    CORS(app)</span><br><span class="line">    <span class="comment">#初始化Flack_SQLAlchemy</span></span><br><span class="line">    db.init_app(app)</span><br><span class="line">    <span class="comment">#初始化Flack_Migrate </span></span><br><span class="line">    migrate.init_app(app,db)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#注册blueprint</span></span><br><span class="line">    <span class="keyword">from</span> tutorweb.api <span class="keyword">import</span> bp <span class="keyword">as</span> api_bp</span><br><span class="line">    app.register_blueprint(api_bp,url_prefix=<span class="string">&#x27;/api&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> app   </span><br></pre></td></tr></table></figure>
<p>在<code>back-end</code>目录下新建tutorweb.db文件作为数据库文件，修改<code>back-end</code>目录下的<code>madblog.py</code>文件如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tutorweb <span class="keyword">import</span> create_app,db</span><br><span class="line"></span><br><span class="line">app=create_app()</span><br></pre></td></tr></table></figure>
<h3 id="定义user用户数据模型">定义User用户数据模型</h3>
<p>创建<code>tutorweb/models.py</code>:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tutorweb <span class="keyword">import</span> db</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(db.Model):</span><br><span class="line">    <span class="built_in">id</span>=db.Column(db.Integer,primary_key=<span class="literal">True</span>)</span><br><span class="line">    username=db.Column(db.String(<span class="number">64</span>),index=<span class="literal">True</span>,unique=<span class="literal">True</span>)</span><br><span class="line">    email=db.Column(db.String(<span class="number">120</span>),index=<span class="literal">True</span>,unique=<span class="literal">True</span>)</span><br><span class="line">    password_hash=db.Column(db.String(<span class="number">128</span>))<span class="comment">#不保留原始密码</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&lt;User &#123;&#125;&gt;&#x27;</span>.<span class="built_in">format</span>(self.username)</span><br></pre></td></tr></table></figure>
<p>修改<code>tutorweb/__init__.py</code>，在文件末尾添加：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tutorweb <span class="keyword">import</span> models</span><br></pre></td></tr></table></figure>
<h3 id="第一次数据库迁移">第一次数据库迁移</h3>
<p>创建迁移数据库：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(venv) PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end&gt;flask db init</span><br></pre></td></tr></table></figure>
<p>生成迁移脚本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(venv) PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end&gt;flask db migrate -m <span class="string">&quot;add users table&quot;</span></span><br></pre></td></tr></table></figure>
<p>将迁移脚本应用到数据库中：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(venv) PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end&gt;flask db upgrade</span><br></pre></td></tr></table></figure>
<p>若要回滚上次的迁移，可用<code>flask db downgrade</code>命令回滚。</p>
<p>存储用户密码的hash值：</p>
<p>使用<code>werkzeug.security</code>库的<code>generate_password_hash</code>和<code>check_password_hash</code>来创建哈希密码和验证密码的hash是否一致：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(venv) PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end&gt; python</span><br><span class="line">Python <span class="number">3.10</span><span class="number">.5</span> (tags/v3<span class="number">.10</span><span class="number">.5</span>:f377153, Jun  <span class="number">6</span> <span class="number">2022</span>, <span class="number">16</span>:<span class="number">14</span>:<span class="number">13</span>) [MSC v<span class="number">.1929</span> <span class="number">64</span> bit (AMD64)] on win32</span><br><span class="line"><span class="type">Type</span> <span class="string">&quot;help&quot;</span>, <span class="string">&quot;copyright&quot;</span>, <span class="string">&quot;credits&quot;</span> <span class="keyword">or</span> <span class="string">&quot;license&quot;</span> <span class="keyword">for</span> more information.</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> werkzeug.security <span class="keyword">import</span> generate_password_hash, check_password_hash</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">hash</span> = generate_password_hash(<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">hash</span></span><br><span class="line"><span class="string">&#x27;pbkdf2:sha256:260000$RBvmqvkVP61YXGy0$52d3ea1ae76f51d284ba66d2665c8bcfdd069b47cdff7e3211e46d5d98a9d01a&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>check_password_hash(<span class="built_in">hash</span>, <span class="string">&#x27;foobar&#x27;</span>)</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>check_password_hash(<span class="built_in">hash</span>, <span class="string">&#x27;123&#x27;</span>)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong>使用<code>generate_password_hash</code>生成不同的3个'123'哈希值，并复制其值保存下来备用，以作为后面用户密码使用。</p>
<p>修改<code>tutorweb/models.py</code>，增加创建密码和验证密码两个方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> werkzeug.security <span class="keyword">import</span> generate_password_hash,check_password_hash</span><br><span class="line"><span class="keyword">from</span> tutorweb <span class="keyword">import</span> db</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(db.Model):</span><br><span class="line">    <span class="built_in">id</span>=db.Column(db.Integer,primary_key=<span class="literal">True</span>)</span><br><span class="line">    username=db.Column(db.String(<span class="number">64</span>),index=<span class="literal">True</span>,unique=<span class="literal">True</span>)</span><br><span class="line">    email=db.Column(db.String(<span class="number">120</span>),index=<span class="literal">True</span>,unique=<span class="literal">True</span>)</span><br><span class="line">    password_hash=db.Column(db.String(<span class="number">128</span>))<span class="comment">#不保留原始密码</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&lt;User &#123;&#125;&gt;&#x27;</span>.<span class="built_in">format</span>(self.username)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_password</span>(<span class="params">self,password</span>):</span><br><span class="line">        self.password_hash=generate_password_hash(password) </span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check_password</span>(<span class="params">self,password</span>):</span><br><span class="line">        <span class="keyword">return</span> check_password_hash(self.password_hash,password)</span><br><span class="line">   </span><br></pre></td></tr></table></figure>
<p>配置Flask Shell上下文环境：</p>
<p><code>flask shell</code>命令是继<code>flask run</code>后被实现的第二个“核心”命令，其目的是启动一个python解释器包含应用的上下文：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(venv) PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end&gt; flask shell</span><br><span class="line">Python 3.10.5 (tags/v3.10.5:f377153, Jun  6 2022, 16:14:13) [MSC v.1929 64 bit (AMD64)] on win32</span><br><span class="line">App: tutorweb</span><br><span class="line">Instance: C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end\instance</span><br><span class="line">&gt;&gt;&gt; tutorweb</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;console&gt;&quot;</span>, line 1, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">NameError: name <span class="string">&#x27;tutorweb&#x27;</span> is not defined</span><br><span class="line">&gt;&gt;&gt; app</span><br><span class="line">&lt;Flask <span class="string">&#x27;tutorweb&#x27;</span>&gt;</span><br><span class="line">&gt;&gt;&gt; db</span><br><span class="line">&lt;SQLAlchemy sqlite:///C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end\tutorweb.db&gt;</span><br></pre></td></tr></table></figure>
<p>修改<code>back-end/madblog.py</code>，添加一个方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tutorweb <span class="keyword">import</span> create_app,db</span><br><span class="line"><span class="keyword">from</span> tutorweb.models <span class="keyword">import</span> User</span><br><span class="line"></span><br><span class="line">app=create_app()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.shell_context_processor</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_shell_context</span>():</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&#x27;db&#x27;</span>:db,<span class="string">&#x27;User&#x27;</span>:User&#125;</span><br></pre></td></tr></table></figure>
<p>再次运行<code>flask shell</code>命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(venv) PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end&gt; flask shell</span><br><span class="line">Python 3.10.5 (tags/v3.10.5:f377153, Jun  6 2022, 16:14:13) [MSC v.1929 64 bit (AMD64)] on win32</span><br><span class="line">App: tutorweb</span><br><span class="line">Instance: C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end\instance</span><br><span class="line">&gt;&gt;&gt; app</span><br><span class="line">&lt;Flask <span class="string">&#x27;tutorweb&#x27;</span>&gt;</span><br><span class="line">&gt;&gt;&gt; db</span><br><span class="line">&lt;SQLAlchemy sqlite:///C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end\tutorweb.db&gt;</span><br><span class="line">&gt;&gt;&gt; User</span><br><span class="line">&lt;class <span class="string">&#x27;tutorweb.models.User&#x27;</span>&gt;</span><br><span class="line">&gt;&gt;&gt; u=User(username=<span class="string">&#x27;tom&#x27;</span>,email=<span class="string">&#x27;tom@163.com&#x27;</span>)</span><br><span class="line">&gt;&gt;&gt; u.set_password(<span class="string">&#x27;123456&#x27;</span>)</span><br><span class="line">&gt;&gt;&gt; u.check_password(<span class="string">&#x27;123456&#x27;</span>)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; u.check_password(<span class="string">&#x27;654321&#x27;</span>)</span><br><span class="line">False</span><br></pre></td></tr></table></figure>
<h2 id="restful-api设计">RESTful API设计</h2>
<p>用户资源暂时提供以下几个API：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">HTTP方法</th>
<th style="text-align: left;">资源URL</th>
<th style="text-align: left;">说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><code>GET</code></td>
<td style="text-align: left;"><code>/api/users</code></td>
<td style="text-align: left;">返回所有用户的集合</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>POST</code></td>
<td style="text-align: left;"><code>/api/users</code></td>
<td style="text-align: left;">注册一个新用户</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>GET</code></td>
<td style="text-align: left;"><code>/api/users/&lt;id&gt;</code></td>
<td style="text-align: left;">返回一个用户</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>PUT</code></td>
<td style="text-align: left;"><code>/api/users/&lt;id&gt;</code></td>
<td style="text-align: left;">修改一个用户</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>DELETE</code></td>
<td style="text-align: left;"><code>/api/users/&lt;id&gt;</code></td>
<td style="text-align: left;">删除一个用户</td>
</tr>
</tbody>
</table>
<p>创建<code>tutorweb/api/users.py</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tutorweb.api <span class="keyword">import</span> bp</span><br><span class="line"></span><br><span class="line"><span class="meta">@bp.route(<span class="params"><span class="string">&#x27;/users&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_user</span>():</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;注册一个新用户&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@bp.route(<span class="params"><span class="string">&#x27;/users&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_users</span>():</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;返回所有用户的集合&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@bp.route(<span class="params"><span class="string">&#x27;/users/&lt;int:id&gt;&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_user</span>(<span class="params"><span class="built_in">id</span></span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;返回一个用户&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@bp.route(<span class="params"><span class="string">&#x27;/users/&lt;int:id&gt;&#x27;</span>, methods=[<span class="string">&#x27;PUT&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">update_user</span>(<span class="params"><span class="built_in">id</span></span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;修改一个用户&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@bp.route(<span class="params"><span class="string">&#x27;/users/&lt;int:id&gt;&#x27;</span>, methods=[<span class="string">&#x27;DELETE&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete_user</span>(<span class="params"><span class="built_in">id</span></span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;删除一个用户&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<p>修改 <code>tutorweb/api/__init__.py</code>，在末尾添加：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tutorweb.api <span class="keyword">import</span> ping,users</span><br></pre></td></tr></table></figure>
<h3 id="用户对象转换成json">用户对象转换成JSON</h3>
<p>Flask使用的都是User实例对象，返回响应给前端时，需要传递<code>JSON</code>对象。</p>
<p>修改 <code>tutorweb/models.py</code>，给 User 数据模型添加 <code>to_dict</code> 方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> url_for</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(db.Model):</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">to_dict</span>(<span class="params">self, include_email=<span class="literal">False</span></span>):</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;id&#x27;</span>: self.<span class="built_in">id</span>,</span><br><span class="line">            <span class="string">&#x27;username&#x27;</span>: self.username,</span><br><span class="line">            <span class="string">&#x27;_links&#x27;</span>: &#123;</span><br><span class="line">                <span class="string">&#x27;self&#x27;</span>: url_for(<span class="string">&#x27;api.get_user&#x27;</span>, <span class="built_in">id</span>=self.<span class="built_in">id</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> include_email:</span><br><span class="line">            data[<span class="string">&#x27;email&#x27;</span>] = self.email</span><br><span class="line">        <span class="keyword">return</span> data</span><br></pre></td></tr></table></figure>
<p>只有当用户请求自己的数据时才包含 <code>email</code>，使用 <code>include_email</code> 标志来确定该字段是否包含在字典中。<strong>调用该方法返回字典，再用 <code>flask.jsonify</code> 将字典转换成 JSON 响应</strong></p>
<h3 id="用户集合转换成json">用户集合转换成JSON</h3>
<p>API 中有 <code>POST /users</code> 需要返回用户集合，所以还需要添加 <code>to_collection_dict</code> 方法。考虑到后续会创建 <code>Post</code> 等数据模型。</p>
<p>在 <code>tutorweb/models.py</code> 中设计一个通用类 <code>PaginatedAPIMixin</code>，放到User类前：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PaginatedAPIMixin</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">to_collection_dict</span>(<span class="params">query, page, per_page, endpoint, **kwargs</span>):</span><br><span class="line">        resources = query.paginate(page=page,per_page=per_page,error_out=<span class="literal">False</span>)</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;items&#x27;</span>: [item.to_dict() <span class="keyword">for</span> item <span class="keyword">in</span> resources.items],</span><br><span class="line">            <span class="string">&#x27;_meta&#x27;</span>: &#123;</span><br><span class="line">                <span class="string">&#x27;page&#x27;</span>: page,</span><br><span class="line">                <span class="string">&#x27;per_page&#x27;</span>: per_page,</span><br><span class="line">                <span class="string">&#x27;total_pages&#x27;</span>: resources.pages,</span><br><span class="line">                <span class="string">&#x27;total_items&#x27;</span>: resources.total</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&#x27;_links&#x27;</span>: &#123;</span><br><span class="line">                <span class="string">&#x27;self&#x27;</span>: url_for(endpoint, page=page, per_page=per_page,</span><br><span class="line">                                **kwargs),</span><br><span class="line">                <span class="string">&#x27;next&#x27;</span>: url_for(endpoint, page=page + <span class="number">1</span>, per_page=per_page,</span><br><span class="line">                                **kwargs) <span class="keyword">if</span> resources.has_next <span class="keyword">else</span> <span class="literal">None</span>,</span><br><span class="line">                <span class="string">&#x27;prev&#x27;</span>: url_for(endpoint, page=page - <span class="number">1</span>, per_page=per_page,</span><br><span class="line">                                **kwargs) <span class="keyword">if</span> resources.has_prev <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> data</span><br></pre></td></tr></table></figure>
<p>然后，由User类继承这个类：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(PaginatedAPIMixin, db.Model):</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>
<h3 id="json转换成用户对象">JSON转换成用户对象</h3>
<p>前端发送过来 JSON 对象，需要转换成 User 对象：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">from_dict</span>(<span class="params">self, data, new_user=<span class="literal">False</span></span>):</span><br><span class="line">    <span class="keyword">for</span> field <span class="keyword">in</span> [<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;email&#x27;</span>]:</span><br><span class="line">        <span class="keyword">if</span> field <span class="keyword">in</span> data:</span><br><span class="line">            <span class="built_in">setattr</span>(self, field, data[field])</span><br><span class="line">    <span class="keyword">if</span> new_user <span class="keyword">and</span> <span class="string">&#x27;password&#x27;</span> <span class="keyword">in</span> data:</span><br><span class="line">        self.set_password(data[<span class="string">&#x27;password&#x27;</span>])</span><br></pre></td></tr></table></figure>
<h3 id="错误处理">错误处理</h3>
<p>创建 <code>tutorweb/api/errors.py</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> jsonify</span><br><span class="line"><span class="keyword">from</span> werkzeug.http <span class="keyword">import</span> HTTP_STATUS_CODES</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">error_response</span>(<span class="params">status_code, message=<span class="literal">None</span></span>):</span><br><span class="line">    payload = &#123;<span class="string">&#x27;error&#x27;</span>: HTTP_STATUS_CODES.get(status_code, <span class="string">&#x27;Unknown error&#x27;</span>)&#125;</span><br><span class="line">    <span class="keyword">if</span> message:</span><br><span class="line">        payload[<span class="string">&#x27;message&#x27;</span>] = message</span><br><span class="line">    response = jsonify(payload)</span><br><span class="line">    response.status_code = status_code</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bad_request</span>(<span class="params">message</span>):</span><br><span class="line">    <span class="comment">#最常用的错误：400：错误的请求</span></span><br><span class="line">    <span class="keyword">return</span> error_response(<span class="number">400</span>, message)</span><br></pre></td></tr></table></figure>
<h3 id="注册新用户">注册新用户</h3>
<p>修改<code>tutorweb/api/users.py</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re </span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request,jsonify,url_for</span><br><span class="line"><span class="keyword">from</span> tutorweb <span class="keyword">import</span> db</span><br><span class="line"><span class="keyword">from</span> tutorweb.api <span class="keyword">import</span> bp</span><br><span class="line"><span class="keyword">from</span> tutorweb.api.errors <span class="keyword">import</span> bad_request</span><br><span class="line"><span class="keyword">from</span> tutorweb.models <span class="keyword">import</span> User</span><br><span class="line"></span><br><span class="line"><span class="meta">@bp.route(<span class="params"><span class="string">&#x27;/users&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_user</span>():</span><br><span class="line">    <span class="comment">#注册一个新用户</span></span><br><span class="line">    data=request.get_json()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">        <span class="keyword">return</span> bad_request(<span class="string">&#x27;You must post JSON data.&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    message=&#123;&#125;</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;username&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> data <span class="keyword">or</span> <span class="keyword">not</span> data.get(<span class="string">&#x27;username&#x27;</span>, <span class="literal">None</span>):</span><br><span class="line">        message[<span class="string">&#x27;username&#x27;</span>] = <span class="string">&#x27;Please provide a valid username.&#x27;</span></span><br><span class="line">    pattern = <span class="string">&#x27;^(([^&lt;&gt;()\[\]\\.,;:\s@&quot;]+(\.[^&lt;&gt;()\[\]\\.,;:\s@&quot;]+)*)|(&quot;.+&quot;))@((\[[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]&#123;2,&#125;))$&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;email&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> data <span class="keyword">or</span> <span class="keyword">not</span> re.<span class="keyword">match</span>(pattern, data.get(<span class="string">&#x27;email&#x27;</span>, <span class="literal">None</span>)):</span><br><span class="line">        message[<span class="string">&#x27;email&#x27;</span>] = <span class="string">&#x27;Please provide a valid email address.&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;password&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> data <span class="keyword">or</span> <span class="keyword">not</span> data.get(<span class="string">&#x27;password&#x27;</span>, <span class="literal">None</span>):</span><br><span class="line">        message[<span class="string">&#x27;password&#x27;</span>] = <span class="string">&#x27;Please provide a valid password.&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> User.query.filter_by(username=data.get(<span class="string">&#x27;username&#x27;</span>, <span class="literal">None</span>)).first():</span><br><span class="line">        message[<span class="string">&#x27;username&#x27;</span>] = <span class="string">&#x27;Please use a different username.&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> User.query.filter_by(email=data.get(<span class="string">&#x27;email&#x27;</span>, <span class="literal">None</span>)).first():</span><br><span class="line">        message[<span class="string">&#x27;email&#x27;</span>] = <span class="string">&#x27;Please use a different email address.&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> message:</span><br><span class="line">        <span class="keyword">return</span> bad_request(message)      </span><br><span class="line"></span><br><span class="line">    user=User()</span><br><span class="line">    user.from_dict(data,new_user=<span class="literal">True</span>)</span><br><span class="line">    db.session.add(user)</span><br><span class="line">    db.session.commit()</span><br><span class="line">    response=jsonify(user.to_dict())</span><br><span class="line">    response.status_code=<span class="number">201</span></span><br><span class="line">    <span class="comment">#HTTP协议要求201响应包含一个值为新资源URL的Location头部</span></span><br><span class="line">    response.headers[<span class="string">&#x27;Location&#x27;</span>]=url_for(<span class="string">&#x27;api.get_user&#x27;</span>,<span class="built_in">id</span>=user.<span class="built_in">id</span>)</span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure>
<p>在<code>C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end</code>的目录下右键，选择在终端打开后，运行应用：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end&gt; venv\Scripts\activate</span><br><span class="line">(venv) PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end&gt; pip install --upgrade httpie</span><br><span class="line">(venv) PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end&gt; flask run</span><br><span class="line"></span><br><span class="line"> * Serving Flask app <span class="string">&#x27;madblog.py&#x27;</span></span><br><span class="line">WARNING: This is a development server. Do not use it <span class="keyword">in</span> a production deployment. Use a production WSGI server instead.</span><br><span class="line"> * Running on http://127.0.0.1:5000</span><br><span class="line">Press CTRL+C to quit</span><br><span class="line"> * Restarting with <span class="built_in">stat</span></span><br><span class="line"> * Debugger is active!</span><br><span class="line"> * Debugger PIN: 354-979-609</span><br></pre></td></tr></table></figure>
<p>保持应用处于运行的状态后，打开另一个终端并激活环境。使用HTTPie或Postman测试API接口：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(venv) PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end&gt; http POST http://localhost:5000/api/users username=lisi password=123 email=lisi@163.com</span><br><span class="line"></span><br><span class="line">HTTP/1.1 201 CREATED</span><br><span class="line">Access-Control-Allow-Origin: *</span><br><span class="line">Connection: close</span><br><span class="line">Content-Length: 82</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Date: Mon, 24 Oct 2022 03:12:01 GMT</span><br><span class="line">Location: /api/users/5</span><br><span class="line">Server: Werkzeug/2.2.2 Python/3.10.5</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;_links&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;self&quot;</span>: <span class="string">&quot;/api/users/5&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: 5,</span><br><span class="line">    <span class="string">&quot;username&quot;</span>: <span class="string">&quot;lisi&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>若应用没有运行，会报错：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(venv) PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end&gt; http POST http://localhost:5000/api/users username=lisi password=123 email=lisi@163.com</span><br><span class="line"></span><br><span class="line">http: error: ConnectionError: HTTPConnectionPool(host=<span class="string">&#x27;localhost&#x27;</span>, port=5000): Max retries exceeded with url: /api/users (Caused by NewConnectionError(<span class="string">&#x27;&lt;urllib3.connection.HTTPConnection object at 0x0000022A6C404550&gt;: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。&#x27;</span>)) <span class="keyword">while</span> doing a POST request to URL: http://localhost:5000/api/users</span><br></pre></td></tr></table></figure>
<h3 id="检索单个用户">检索单个用户</h3>
<p>修改<code>tutorweb/api/users.py</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@bp.route(<span class="params"><span class="string">&#x27;/users/&lt;int:id&gt;&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_user</span>(<span class="params"><span class="built_in">id</span></span>):</span><br><span class="line">    <span class="comment">#返回一个用户</span></span><br><span class="line">    <span class="keyword">return</span> jsonify(User.query.get_or_404(<span class="built_in">id</span>).to_dict())</span><br></pre></td></tr></table></figure>
<p>保持应用处于运行的状态后，在另一个终端检索用户：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(venv) PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end&gt; http GET http://localhost:5000/api/users/4 </span><br><span class="line"></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Access-Control-Allow-Origin: *</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Date: Mon, 24 Oct 2022 03:16:47 GMT</span><br><span class="line">Server: Werkzeug/2.2.2 Python/3.10.5</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;_links&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;self&quot;</span>: <span class="string">&quot;/api/users/4&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: 4,</span><br><span class="line">    <span class="string">&quot;username&quot;</span>: <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>若查询的用户id不存在，返回404错误</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(venv) PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end&gt; http GET http://localhost:5000/api/users/7 </span><br><span class="line"></span><br><span class="line">HTTP/1.1 404 NOT FOUND</span><br><span class="line">Access-Control-Allow-Origin: *</span><br><span class="line">Connection: close</span><br><span class="line">Content-Length: 207</span><br><span class="line">Content-Type: text/html; charset=utf-8</span><br><span class="line">Date: Mon, 24 Oct 2022 03:19:48 GMT</span><br><span class="line">Server: Werkzeug/2.2.2 Python/3.10.5</span><br><span class="line"></span><br><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html lang=en&gt;</span><br><span class="line">&lt;title&gt;404 Not Found&lt;/title&gt;</span><br><span class="line">&lt;h1&gt;Not Found&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.&lt;/p&gt;</span><br></pre></td></tr></table></figure>
<p>修改<code>tutorweb/api/errors.py</code>，设置返回JSON错误信息</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tutorweb <span class="keyword">import</span> db</span><br><span class="line"><span class="keyword">from</span> tutorweb.api <span class="keyword">import</span> bp</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="meta">@bp.app_errorhandler(<span class="params"><span class="number">404</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">not_found_error</span>(<span class="params">error</span>):</span><br><span class="line">    <span class="keyword">return</span> error_response(<span class="number">404</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@bp.app_errorhandler(<span class="params"><span class="number">500</span></span>)  </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">internal_error</span>(<span class="params">error</span>):</span><br><span class="line">    db.session.rollback()</span><br><span class="line">    <span class="keyword">return</span> error_response(<span class="number">500</span>)</span><br></pre></td></tr></table></figure>
<p>若查询的用户id不存在，此时返回404错误信息为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(venv) PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end&gt; http GET http://localhost:5000/api/users/7</span><br><span class="line">HTTP/1.1 404 NOT FOUND</span><br><span class="line">Access-Control-Allow-Origin: *</span><br><span class="line">Connection: close</span><br><span class="line">Content-Length: 27</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Date: Mon, 24 Oct 2022 03:17:01 GMT</span><br><span class="line">Server: Werkzeug/2.2.2 Python/3.10.5</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;error&quot;</span>: <span class="string">&quot;Not Found&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="检索用户集合">检索用户集合</h3>
<p>修改<code>tutorweb/api/users.py</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@bp.route(<span class="params"><span class="string">&#x27;/users&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_users</span>():</span><br><span class="line">    <span class="comment">#返回所有用户的集合</span></span><br><span class="line">    page=request.args.get(<span class="string">&#x27;page&#x27;</span>,<span class="number">1</span>,<span class="built_in">type</span>=<span class="built_in">int</span>)</span><br><span class="line">    per_page=<span class="built_in">min</span>(request.args.get(<span class="string">&#x27;per_page&#x27;</span>,<span class="number">10</span>,<span class="built_in">type</span>=<span class="built_in">int</span>),<span class="number">100</span>)</span><br><span class="line">    data=User.to_collection_dict(User.query,page,per_page,<span class="string">&#x27;api.get_users&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> jsonify(data)</span><br></pre></td></tr></table></figure>
<p>终端测试如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(venv) PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end&gt; http GET http://localhost:5000/api/users </span><br><span class="line"></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Access-Control-Allow-Origin: *</span><br><span class="line">Connection: close</span><br><span class="line">Content-Length: 889</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Date: Mon, 24 Oct 2022 06:24:27 GMT</span><br><span class="line">Server: Werkzeug/2.2.2 Python/3.10.5</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;_links&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;next&quot;</span>: null,</span><br><span class="line">        <span class="string">&quot;prev&quot;</span>: null,</span><br><span class="line">        <span class="string">&quot;self&quot;</span>: <span class="string">&quot;/api/users?page=1&amp;per_page=10&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;_meta&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;page&quot;</span>: 1,</span><br><span class="line">        <span class="string">&quot;per_page&quot;</span>: 10,</span><br><span class="line">        <span class="string">&quot;total_items&quot;</span>: 6,</span><br><span class="line">        <span class="string">&quot;total_pages&quot;</span>: 1</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;items&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;_links&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;self&quot;</span>: <span class="string">&quot;/api/users/1&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: 1,</span><br><span class="line">            <span class="string">&quot;username&quot;</span>: <span class="string">&quot;alice&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;_links&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;self&quot;</span>: <span class="string">&quot;/api/users/2&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: 2,</span><br><span class="line">            <span class="string">&quot;username&quot;</span>: <span class="string">&quot;bob&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;_links&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;self&quot;</span>: <span class="string">&quot;/api/users/3&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: 3,</span><br><span class="line">            <span class="string">&quot;username&quot;</span>: <span class="string">&quot;madman&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;_links&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;self&quot;</span>: <span class="string">&quot;/api/users/4&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: 4,</span><br><span class="line">            <span class="string">&quot;username&quot;</span>: <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;_links&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;self&quot;</span>: <span class="string">&quot;/api/users/5&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: 5,</span><br><span class="line">            <span class="string">&quot;username&quot;</span>: <span class="string">&quot;lisi&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;_links&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;self&quot;</span>: <span class="string">&quot;/api/users/6&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: 6,</span><br><span class="line">            <span class="string">&quot;username&quot;</span>: <span class="string">&quot;wangwu&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="修改用户">修改用户</h3>
<p>修改<code>tutorweb/api/users.py</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@bp.route(<span class="params"><span class="string">&#x27;/users/&lt;int:id&gt;&#x27;</span>,methods=[<span class="string">&#x27;PUT&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">update_user</span>(<span class="params"><span class="built_in">id</span></span>):</span><br><span class="line">    <span class="comment">#修改一个用户</span></span><br><span class="line">    user=User.query.get_or_404(<span class="built_in">id</span>)</span><br><span class="line">    data=request.get_json()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">        <span class="keyword">return</span> bad_request(<span class="string">&#x27;You must post JSON data.&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    message=&#123;&#125;</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;username&#x27;</span> <span class="keyword">in</span> data <span class="keyword">and</span> <span class="keyword">not</span> data.get(<span class="string">&#x27;username&#x27;</span>, <span class="literal">None</span>):</span><br><span class="line">        message[<span class="string">&#x27;username&#x27;</span>]=<span class="string">&#x27;Please provide a valid username.&#x27;</span></span><br><span class="line">    pattern=<span class="string">&#x27;^(([^&lt;&gt;()\[\]\\.,;:\s@&quot;]+(\.[^&lt;&gt;()\[\]\\.,;:\s@&quot;]+)*)|(&quot;.+&quot;))@((\[[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]&#123;2,&#125;))$&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;email&#x27;</span> <span class="keyword">in</span> data <span class="keyword">and</span> <span class="keyword">not</span> re.<span class="keyword">match</span>(pattern, data.get(<span class="string">&#x27;email&#x27;</span>, <span class="literal">None</span>)):</span><br><span class="line">        message[<span class="string">&#x27;email&#x27;</span>]=<span class="string">&#x27;Please provide a valid email address.&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;username&#x27;</span> <span class="keyword">in</span> data <span class="keyword">and</span> data[<span class="string">&#x27;username&#x27;</span>] != user.username <span class="keyword">and</span> \</span><br><span class="line">            User.query.filter_by(username=data[<span class="string">&#x27;username&#x27;</span>]).first():</span><br><span class="line">        message[<span class="string">&#x27;username&#x27;</span>]=<span class="string">&#x27;Please use a different username.&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;email&#x27;</span> <span class="keyword">in</span> data <span class="keyword">and</span> data[<span class="string">&#x27;email&#x27;</span>] != user.email <span class="keyword">and</span> \</span><br><span class="line">            User.query.filter_by(email=data[<span class="string">&#x27;email&#x27;</span>]).first():</span><br><span class="line">        message[<span class="string">&#x27;email&#x27;</span>]=<span class="string">&#x27;Please use a different email address.&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> message:</span><br><span class="line">        <span class="keyword">return</span> bad_request(message) </span><br><span class="line">        </span><br><span class="line">    user.from_dict(data,new_user=<span class="literal">False</span>)    </span><br><span class="line">    db.session.commit()</span><br><span class="line">    <span class="keyword">return</span> jsonify(user.to_dict())</span><br></pre></td></tr></table></figure>
<p>终端测试如下： <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(venv) PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end&gt; http PUT http://localhost:5000/api/users/5 email=madman@gmail.com </span><br><span class="line"></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Access-Control-Allow-Origin: *</span><br><span class="line">Connection: close</span><br><span class="line">Content-Length: 82</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Date: Mon, 24 Oct 2022 05:16:38 GMT</span><br><span class="line">Server: Werkzeug/2.2.2 Python/3.10.5</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;_links&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;self&quot;</span>: <span class="string">&quot;/api/users/5&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: 5,</span><br><span class="line">    <span class="string">&quot;username&quot;</span>: <span class="string">&quot;lisi&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="api认证">API认证</h2>
<p>为了简化使用 <code>token</code> 认证时客户端和服务器之间的交互，可以使用 <code>Flask-HTTPAuth</code> 插件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(venv) PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end&gt;pip install flask-httpauth</span><br><span class="line">(venv) PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end&gt;pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure>
<p>当客户端想要开始与 API 交互时，它需要使用用户名和密码进行 Basic Auth 验证，然后获得一个临时 token。只要 token 有效，客户端就可以发送附带 token 的 API 请求以通过认证。一旦 token 到期，需要申请新的 token。</p>
<h3 id="user-数据模型添加-token">User 数据模型添加 token</h3>
<p>修改 <code>tutorweb/models.py</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timedelta</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(PaginatedAPIMixin, db.Model):</span><br><span class="line">    ...</span><br><span class="line">    token = db.Column(db.String(<span class="number">32</span>), index=<span class="literal">True</span>, unique=<span class="literal">True</span>)</span><br><span class="line">    token_expiration = db.Column(db.DateTime)</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_token</span>(<span class="params">self, expires_in=<span class="number">3600</span></span>):</span><br><span class="line">        now = datetime.utcnow()</span><br><span class="line">        <span class="keyword">if</span> self.token <span class="keyword">and</span> self.token_expiration &gt; now + timedelta(seconds=<span class="number">60</span>):</span><br><span class="line">            <span class="keyword">return</span> self.token</span><br><span class="line">        self.token = base64.b64encode(os.urandom(<span class="number">24</span>)).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        self.token_expiration = now + timedelta(seconds=expires_in)</span><br><span class="line">        db.session.add(self)</span><br><span class="line">        <span class="keyword">return</span> self.token</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">revoke_token</span>(<span class="params">self</span>):</span><br><span class="line">        self.token_expiration = datetime.utcnow() - timedelta(seconds=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check_token</span>(<span class="params">token</span>):</span><br><span class="line">        user = User.query.filter_by(token=token).first()</span><br><span class="line">        <span class="keyword">if</span> user <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> user.token_expiration &lt; datetime.utcnow():</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">return</span> user</span><br></pre></td></tr></table></figure>
<p>创建数据库迁移脚本并应用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(venv) PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end&gt;flask db migrate -m &quot;user add tokens&quot;</span><br><span class="line">(venv) PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end&gt;flask db upgrade</span><br></pre></td></tr></table></figure>
<h3 id="http-basic-authentication">HTTP Basic Authentication</h3>
<p>创建 <code>tutorweb/api/auth.py</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> g</span><br><span class="line"><span class="keyword">from</span> flask_httpauth <span class="keyword">import</span> HTTPBasicAuth,HTTPTokenAuth</span><br><span class="line"><span class="keyword">from</span> tutorweb.models <span class="keyword">import</span> User</span><br><span class="line"><span class="keyword">from</span> tutorweb.api.errors <span class="keyword">import</span> error_response</span><br><span class="line"></span><br><span class="line">basic_auth=HTTPBasicAuth()</span><br><span class="line"></span><br><span class="line"><span class="meta">@basic_auth.verify_password</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">verify_password</span>(<span class="params">username,password</span>):</span><br><span class="line">    <span class="comment">#用于检查用户提供的用户名和密码</span></span><br><span class="line">    user=User.query.filter_by(username=username).first()</span><br><span class="line">    <span class="keyword">if</span> user <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    g.current_user=user</span><br><span class="line">    <span class="keyword">return</span> user.check_password(password)</span><br><span class="line"></span><br><span class="line"><span class="meta">@basic_auth.error_handler</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">basic_auth_error</span>():</span><br><span class="line">    <span class="comment">#用于在认证失败情况下返回错误响应</span></span><br><span class="line">    <span class="keyword">return</span> error_response(<span class="number">401</span>)   </span><br></pre></td></tr></table></figure>
<h3 id="客户端申请-token">客户端申请 Token</h3>
<p>目前已经实现了 Basic Auth 验证的支持，因此可以添加一条 token 检索路由，以便客户端在需要 token 时调用。</p>
<p>创建 <code>tutorweb/api/tokens.py</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> jsonify,g</span><br><span class="line"><span class="keyword">from</span> tutorweb <span class="keyword">import</span> db</span><br><span class="line"><span class="keyword">from</span> tutorweb.api <span class="keyword">import</span> bp</span><br><span class="line"><span class="keyword">from</span> tutorweb.api.auth <span class="keyword">import</span> basic_auth,token_auth</span><br><span class="line"></span><br><span class="line"><span class="meta">@bp.route(<span class="params"><span class="string">&#x27;/tokens&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="meta">@basic_auth.login_required</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_token</span>():</span><br><span class="line">    token=g.current_user.get_token()</span><br><span class="line">    db.session.commit()</span><br><span class="line">    <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;token&#x27;</span>:token&#125;)</span><br><span class="line"></span><br><span class="line"><span class="meta">@bp.route(<span class="params"><span class="string">&#x27;/tokens&#x27;</span>,methods=[<span class="string">&#x27;DELETE&#x27;</span>]</span>)    </span></span><br><span class="line"><span class="meta">@token_auth.login_required</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">revoke_token</span>():</span><br><span class="line">    g.current_user.revoke_token()</span><br><span class="line">    db.session.commit()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>,<span class="number">204</span></span><br></pre></td></tr></table></figure>
<p>装饰器 <code>@basic_auth.login_required</code> 将指示 <code>Flask-HTTPAuth</code> 验证身份，当通过 Basic Auth 验证后，才使用用户模型的 <code>get_token()</code> 方法来生成 token，数据库提交在生成 token 后发出，以确保 token 及其到期时间被写回到数据库。</p>
<p>修改 <code>tutorweb/api/__init__.py</code>，在末尾添加：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tutorweb.api <span class="keyword">import</span> ping, users, tokens</span><br></pre></td></tr></table></figure>
<p>如果尝试直接向 token API 路由发送 POST 请求，则会发生以下情况：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(venv) PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end&gt; http POST http://localhost:5000/api/tokens</span><br><span class="line"></span><br><span class="line">HTTP/1.1 401 UNAUTHORIZED</span><br><span class="line">Access-Control-Allow-Origin: *</span><br><span class="line">Connection: close</span><br><span class="line">Content-Length: 30</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Date: Mon, 24 Oct 2022 04:51:39 GMT</span><br><span class="line">Server: Werkzeug/2.2.2 Python/3.10.5</span><br><span class="line">WWW-Authenticate: Basic realm=<span class="string">&quot;Authentication Required&quot;</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;error&quot;</span>: <span class="string">&quot;Unauthorized&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果在 POST 请求附带上了 Basic Auth 需要的凭证：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(venv) PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end&gt; http --auth madman:<span class="number">123</span> POST http://localhost:<span class="number">5000</span>/api/tokens</span><br><span class="line">                </span><br><span class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">Access-Control-Allow-Origin: *</span><br><span class="line">Connection: close</span><br><span class="line">Content-Length: <span class="number">50</span></span><br><span class="line">Content-<span class="type">Type</span>: application/json</span><br><span class="line">Date: Mon, <span class="number">24</span> Oct <span class="number">2022</span> 04:<span class="number">52</span>:<span class="number">22</span> GMT</span><br><span class="line">Server: Werkzeug/<span class="number">2.2</span><span class="number">.2</span> Python/<span class="number">3.10</span><span class="number">.5</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;token&quot;</span>: <span class="string">&quot;q2L2Umakr5/iSrf1L4mglZmYoBD/K9Je&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="http-token-authentication">HTTP Token Authentication</h2>
<p>用户通过 Basic Auth 拿到 token 后，之后的请求只要附带这个 token 就能够访问其它 API，修改 <code>tutorweb/api/auth.py</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_httpauth <span class="keyword">import</span> HTTPBasicAuth,HTTPTokenAuth</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">token_auth=HTTPTokenAuth()</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="meta">@token_auth.verify_token</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">verify_token</span>(<span class="params">token</span>):</span><br><span class="line">    <span class="comment">#用于检查用户请求是否有token,且token真实存在，还在有效期内</span></span><br><span class="line">    g.current_user=User.check_token(token) <span class="keyword">if</span> token <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">return</span> g.current_user <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@token_auth.error_handler</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">token_auth_error</span>():</span><br><span class="line">    <span class="comment">#用于在Token Auth认证失败的情况下返回错误响应</span></span><br><span class="line">    <span class="keyword">return</span> error_response(<span class="number">401</span>)        </span><br></pre></td></tr></table></figure>
<p>修改<code>tutorweb/api/users.py</code>，在文件开头导入模块：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tutorweb.api.auth <span class="keyword">import</span> token_auth</span><br></pre></td></tr></table></figure>
<h3 id="使用-token-机制保护-api-路由">使用 Token 机制保护 API 路由</h3>
<p>除 <code>create_user()</code> 之外的所有 API 视图函数需要添加 <code>@token_auth.login_required</code> 装饰器， <code>create_user()</code>函数不能使用 token 认证，因为用户不存在时不会有 token 。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@bp.route(<span class="params"><span class="string">&#x27;/users&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="meta">@token_auth.login_required</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_users</span>():</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="meta">@bp.route(<span class="params"><span class="string">&#x27;/users/&lt;int:id&gt;&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="meta">@token_auth.login_required</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_user</span>(<span class="params"><span class="built_in">id</span></span>):</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>若直接对上面列出的受 token 保护的 endpoint 发起请求，则会得到一个 <code>401</code> 错误：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(venv) PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end&gt; http GET http://localhost:5000/api/users/5</span><br><span class="line"></span><br><span class="line">HTTP/1.1 401 UNAUTHORIZED</span><br><span class="line">Access-Control-Allow-Origin: *</span><br><span class="line">Connection: close</span><br><span class="line">Content-Length: 30</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Date: Mon, 24 Oct 2022 04:56:51 GMT</span><br><span class="line">Server: Werkzeug/2.2.2 Python/3.10.5</span><br><span class="line">WWW-Authenticate: Bearer realm=<span class="string">&quot;Authentication Required&quot;</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;error&quot;</span>: <span class="string">&quot;Unauthorized&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>为了成功访问，需要添加 <code>Authorization</code> 头部，其值是请求 <code>/api/tokens</code> 获得的 token 的值：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(venv) PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end&gt; http GET http://localhost:<span class="number">5000</span>/api/users/<span class="number">5</span> <span class="string">&quot;Authorization:Bearer q2L2Umakr5/iSrf1L4mglZmYoBD/K9Je&quot;</span></span><br><span class="line"></span><br><span class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">Access-Control-Allow-Origin: *</span><br><span class="line">Connection: close</span><br><span class="line">Content-Length: <span class="number">82</span></span><br><span class="line">Content-<span class="type">Type</span>: application/json</span><br><span class="line">Date: Mon, <span class="number">24</span> Oct <span class="number">2022</span> 04:<span class="number">58</span>:<span class="number">20</span> GMT</span><br><span class="line">Server: Werkzeug/<span class="number">2.2</span><span class="number">.2</span> Python/<span class="number">3.10</span><span class="number">.5</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;_links&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;self&quot;</span>: <span class="string">&quot;/api/users/5&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="string">&quot;username&quot;</span>: <span class="string">&quot;lisi&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="撤销-token">撤销 Token</h3>
<p>修改 <code>tutorweb/api/tokens.py</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tutorweb.api.auth <span class="keyword">import</span> basic_auth,token_auth</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="meta">@bp.route(<span class="params"><span class="string">&#x27;/tokens&#x27;</span>,methods=[<span class="string">&#x27;DELETE&#x27;</span>]</span>)    </span></span><br><span class="line"><span class="meta">@token_auth.login_required</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">revoke_token</span>():</span><br><span class="line">    g.current_user.revoke_token()</span><br><span class="line">    db.session.commit()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>,<span class="number">204</span></span><br></pre></td></tr></table></figure>
<p>客户端可以向 <code>/api/tokens</code> URL发送 <code>DELETE</code> 请求，以使 token 失效</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(venv) PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end&gt; http DELETE http://localhost:5000/api/tokens <span class="string">&quot;Authorization:Bearer QYnLb1pN/l4I4j2KwZWzr7+imtyekI66&quot;</span></span><br><span class="line"></span><br><span class="line">HTTP/1.1 204 NO CONTENT</span><br><span class="line">Access-Control-Allow-Origin: *</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: text/html; charset=utf-8</span><br><span class="line">Date: Mon, 24 Oct 2022 03:31:11 GMT</span><br><span class="line">Server: Werkzeug/2.2.2 Python/3.10.5</span><br><span class="line"></span><br><span class="line">(venv) PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end&gt; http DELETE http://localhost:5000/api/tokens <span class="string">&quot;Authorization:Bearer QYnLb1pN/l4I4j2KwZWzr7+imtyekI66&quot;</span></span><br><span class="line"></span><br><span class="line">HTTP/1.1 401 UNAUTHORIZED</span><br><span class="line">Access-Control-Allow-Origin: *</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Date: Mon, 24 Oct 2022 03:32:00 GMT</span><br><span class="line">Server: Werkzeug/2.2.2 Python/3.10.5</span><br><span class="line">WWW-Authenticate: Bearer realm=<span class="string">&quot;Authentication Required&quot;</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;error&quot;</span>: <span class="string">&quot;Unauthorized&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>至此，Flask后端已成功配置。最终的代码目录如下：</p>
<p><img src="/2022/10/24/Flask%E5%AE%9E%E6%88%98%E4%B9%8B%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%90%8E%E7%AB%AF/3.png"></p>
]]></content>
      <categories>
        <category>Web框架</category>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Flask Web</tag>
        <tag>后端</tag>
        <tag>Web框架</tag>
      </tags>
  </entry>
  <entry>
    <title>PgSQL数据库学习笔记（一）</title>
    <url>/2022/10/14/PgSQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="写在前头">写在前头</h1>
<p><strong>本笔记前两篇主要列出PgSQL的常用命令和数据类型。具体的实操命令从第三篇开始讲解。</strong></p>
<p><strong>Windows上安装PostgreSQL</strong></p>
<p>使用EnterpriseDB来下载安装，根据安装指引安装即可。下载地址：<a href="https://www.enterprisedb.com/downloads/postgres-postgresql-downloads">Download PostgreSQL (enterprisedb.com)</a></p>
<p><strong>PostgreSQL语法</strong></p>
<p>默认情况下PostgreSQL安装完成后，自带了个命令行工具SQL Shell(psql)。</p>
<p>进入命令行工具，可以使用<code>\help 命令</code>来查看各个命令的语法。</p>
<p>若要查看具体命令的用法，可到PostgreSQL的API文档中查看。<a href="https://runebook.dev/zh-CN/docs/postgresql/-index-">PostgreSQL 14.3 中文 (runebook.dev)</a></p>
<h1 id="postgresql语句">PostgreSQL语句</h1>
<h2 id="常用语句">常用语句</h2>
<h3 id="在表和文件之间拷贝数据copy"><strong>在表和文件之间拷贝数据：</strong>copy</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 使用竖线（|）作为域定界符把一个表复制到客户端</span></span><br><span class="line"><span class="keyword">copy</span> country <span class="keyword">to</span> stdout (delimiter <span class="string">&#x27;|&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h3 id="定义访问权限grant"><strong>定义访问权限：</strong>grant</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 把表films上的插入特权授予给所有用户</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">insert</span> <span class="keyword">on</span> films <span class="keyword">to</span> public;</span><br></pre></td></tr></table></figure>
<h3 id="从一个查询的结果中定义一个新表select-into"><strong>从一个查询的结果中定义一个新表：</strong>select into</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建一个只由来自films的最近项构成的 新表films_recent</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">into</span> films_recent <span class="keyword">from</span> films <span class="keyword">where</span> date_prod <span class="operator">&gt;=</span> <span class="string">&#x27;2002-01-01&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h3 id="清空一个或一组表truncate"><strong>清空一个或一组表：</strong>truncate</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 清除 COMPANY 表</span></span><br><span class="line">w3cschooldb<span class="operator">=</span># <span class="keyword">truncate</span> <span class="keyword">table</span> company;</span><br></pre></td></tr></table></figure>
<h3 id="修改运行时参数set"><strong>修改运行时参数：</strong>set</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">exec</span> <span class="keyword">sql</span> <span class="keyword">set</span> descriptor indesc count <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">exec</span> <span class="keyword">sql</span> <span class="keyword">set</span> descriptor indesc <span class="keyword">value</span> <span class="number">1</span> data <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="keyword">exec</span> <span class="keyword">sql</span> <span class="keyword">set</span> descriptor indesc <span class="keyword">value</span> <span class="number">1</span> data <span class="operator">=</span> :val1;</span><br><span class="line"><span class="keyword">exec</span> <span class="keyword">sql</span> <span class="keyword">set</span> descriptor indesc <span class="keyword">value</span> <span class="number">2</span> <span class="keyword">indicator</span> <span class="operator">=</span> :val1, data <span class="operator">=</span> <span class="string">&#x27;some string&#x27;</span>;</span><br><span class="line"><span class="keyword">exec</span> <span class="keyword">sql</span> <span class="keyword">set</span> descriptor indesc <span class="keyword">value</span> <span class="number">2</span> <span class="keyword">indicator</span> <span class="operator">=</span> :val2null, data <span class="operator">=</span> :val2;</span><br></pre></td></tr></table></figure>
<h3 id="把一个运行时参数值恢复为默认值reset"><strong>把一个运行时参数值恢复为默认值：</strong>reset</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 把timezone配置变量设置为默认值</span></span><br><span class="line">reset timezone;</span><br></pre></td></tr></table></figure>
<h3 id="显示运行时的参数值show"><strong>显示运行时的参数值：</strong>show</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 显示参数DateStyle的当前设置</span></span><br><span class="line"><span class="keyword">show</span> datestyle;</span><br><span class="line"> datestyle</span><br></pre></td></tr></table></figure>
<h3 id="更新一个表中的行update"><strong>更新一个表中的行：</strong>update</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 把表films的列kind 中的单词Drama改成Dramatic</span></span><br><span class="line"><span class="keyword">update</span> films <span class="keyword">set</span> kind <span class="operator">=</span> <span class="string">&#x27;dramatic&#x27;</span> <span class="keyword">where</span> kind <span class="operator">=</span> <span class="string">&#x27;drama&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h3 id="创建一个准备好的查询prepare"><strong>创建一个准备好的查询：</strong>prepare</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 提交由事务标识符foobar标识的事务</span></span><br><span class="line"><span class="keyword">commit</span> prepared <span class="string">&#x27;foobar&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h3 id="执行一个准备好的查询execute"><strong>执行一个准备好的查询：</strong>execute</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">execute</span> query(<span class="number">100</span>, <span class="number">200</span>);</span><br></pre></td></tr></table></figure>
<h3 id="显示一个语句的执行规则explain"><strong>显示一个语句的执行规则：</strong>explain</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 有一个具有单个integer列和 10000 行的表，要显示在其上的一个简单查询的计划</span></span><br><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> foo;</span><br><span class="line"></span><br><span class="line">                       query plan</span><br></pre></td></tr></table></figure>
<h3 id="在表中创建新行insert"><strong>在表中创建新行：</strong>insert</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 向films中插入一行</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> films <span class="keyword">values</span></span><br><span class="line">    (<span class="string">&#x27;ua502&#x27;</span>, <span class="string">&#x27;bananas&#x27;</span>, <span class="number">105</span>, <span class="string">&#x27;1971-07-13&#x27;</span>, <span class="string">&#x27;comedy&#x27;</span>, <span class="string">&#x27;82 minutes&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h3 id="重建索引reindex"><strong>重建索引：</strong>reindex</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 重建单个索引</span></span><br><span class="line">reindex index my_index;</span><br><span class="line"><span class="comment">-- 重建表my_table上的所有索引</span></span><br><span class="line">reindex <span class="keyword">table</span> my_table;</span><br></pre></td></tr></table></figure>
<h3 id="收集与数据库有关的统计analyze"><strong>收集与数据库有关的统计：</strong>analyze</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">analyze;</span><br></pre></td></tr></table></figure>
<h3 id="生成一个通知notify"><strong>生成一个通知：</strong>notify</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 从psql配置和执行一个监听/通知序列</span></span><br><span class="line">listen virtual;</span><br><span class="line">notify virtual;</span><br><span class="line">asynchronous notification &quot;virtual&quot; received <span class="keyword">from</span> server process <span class="keyword">with</span> pid <span class="number">8448.</span></span><br><span class="line">notify virtual, <span class="string">&#x27;this is the payload&#x27;</span>;</span><br><span class="line">asynchronous notification &quot;virtual&quot; <span class="keyword">with</span> payload &quot;this is the payload&quot; received <span class="keyword">from</span> server process <span class="keyword">with</span> pid <span class="number">8448.</span></span><br><span class="line"></span><br><span class="line">listen foo;</span><br><span class="line"><span class="keyword">select</span> pg_notify(<span class="string">&#x27;fo&#x27;</span> <span class="operator">||</span> <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;pay&#x27;</span> <span class="operator">||</span> <span class="string">&#x27;load&#x27;</span>);</span><br><span class="line">asynchronous notification &quot;foo&quot; <span class="keyword">with</span> payload &quot;payload&quot; received <span class="keyword">from</span> server process <span class="keyword">with</span> pid <span class="number">14728.</span></span><br></pre></td></tr></table></figure>
<h3 id="监听一个通知listen"><strong>监听一个通知：</strong>listen</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 从psql中配置并执行一个监听/通知序列</span></span><br><span class="line">listen virtual;</span><br><span class="line">notify virtual;</span><br><span class="line">asynchronous notification &quot;virtual&quot; received <span class="keyword">from</span> server process <span class="keyword">with</span> pid <span class="number">8448.</span></span><br></pre></td></tr></table></figure>
<h3 id="停止监听通知信息unlisten"><strong>停止监听通知信息：</strong>unlisten</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 做一次注册</span></span><br><span class="line">listen virtual;</span><br><span class="line">notify virtual;</span><br><span class="line">asynchronous notification &quot;virtual&quot; received <span class="keyword">from</span> server process <span class="keyword">with</span> pid <span class="number">8448.</span></span><br><span class="line"><span class="comment">-- 一旦执行了UNLISTEN，进一步的NOTIFY 消息将被忽略</span></span><br><span class="line">unlisten virtual;</span><br><span class="line">notify virtual;</span><br><span class="line"><span class="comment">-- no notify event is received</span></span><br></pre></td></tr></table></figure>
<h3 id="锁定一个表lock"><strong>锁定一个表：</strong>lock</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 将数据库中的 COMPANY 表锁定为 ACCESS EXCLUSIVE 模式</span></span><br><span class="line">lock <span class="keyword">table</span> company1 <span class="keyword">in</span> access exclusive mode;</span><br></pre></td></tr></table></figure>
<h3 id="根据一个索引聚簇一个表cluster"><strong>根据一个索引聚簇一个表：</strong>cluster</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 基于索引employees_ind聚簇表 employees</span></span><br><span class="line">cluster employees <span class="keyword">using</span> employees_ind;</span><br></pre></td></tr></table></figure>
<h3 id="定义或者改变一个对象的注释comment"><strong>定义或者改变一个对象的注释：</strong>comment</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 为表mytable附加一段注释</span></span><br><span class="line">comment <span class="keyword">on</span> <span class="keyword">table</span> mytable <span class="keyword">is</span> <span class="string">&#x27;this is my table.&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h3 id="垃圾收集以及可选地分析一个数据库vacuum"><strong>垃圾收集以及可选地分析一个数据库：</strong>vacuum</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 清理单一表onek，为优化器分析它并且打印出详细的清理活动报告</span></span><br><span class="line">vacuum (verbose, analyze) onek;</span><br></pre></td></tr></table></figure>
<h3 id="为当前会话设置会话用户标识符和当前用户标识符set-session-authorization"><strong>为当前会话设置会话用户标识符和当前用户标识符：</strong>set session authorization</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> session <span class="keyword">authorization</span> <span class="string">&#x27;paul&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h3 id="删除访问权限revoke"><strong>删除访问权限：</strong>revoke</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 从 public 收回表films上的插入特权</span></span><br><span class="line"><span class="keyword">revoke</span> <span class="keyword">insert</span> <span class="keyword">on</span> films <span class="keyword">from</span> public;</span><br></pre></td></tr></table></figure>
<h2 id="事务相关命令">事务相关命令</h2>
<h3 id="开始一个事务begin"><strong>开始一个事务：</strong>begin</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">begin</span>;</span><br></pre></td></tr></table></figure>
<h3 id="提交当前事务commit"><strong>提交当前事务：</strong>commit</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 要提交当前事务并且让所有更改持久化</span></span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure>
<h3 id="提交当前事务end"><strong>提交当前事务：</strong>end</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 提交当前事务并且让所有更改持久化</span></span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>
<h3 id="强制一个事务日志检查点checkpoint"><strong>强制一个事务日志检查点：</strong>checkpoint</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">checkpoint;</span><br></pre></td></tr></table></figure>
<h3 id="中止当前事务rollback"><strong>中止当前事务：</strong>rollback</h3>
<p>回滚当前事务并且导致该事务所作的所有更新都被抛弃。具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 中止所有更改</span></span><br><span class="line"><span class="keyword">rollback</span>;</span><br></pre></td></tr></table></figure>
<h3 id="中止当前事务abort"><strong>中止当前事务：</strong>abort</h3>
<p>回滚当前事务并且导致由该事务所作的所有更新被丢弃。具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">abort;</span><br></pre></td></tr></table></figure>
<h3 id="开始一个事务块set-transaction"><strong>开始一个事务块：</strong>set transaction</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 要用一个已经存在的事务的同一快照开始一个新事务，首先要从该现有 事务导出快照。这将会返回快照标识符</span></span><br><span class="line"><span class="keyword">begin</span> transaction isolation level repeatable read;</span><br><span class="line"><span class="keyword">select</span> pg_export_snapshot();</span><br><span class="line"> pg_export_snapshot</span><br></pre></td></tr></table></figure>
<h3 id="开始一个事务块start-transaction"><strong>开始一个事务块：</strong>start transaction</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 中止所有更改</span></span><br><span class="line"><span class="keyword">rollback</span>;</span><br></pre></td></tr></table></figure>
<h3 id="在当前事务里定义一个新的保存点savepoint"><strong>在当前事务里定义一个新的保存点：</strong>savepoint</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 建立一个保存点并且后来撤销在它建立之后执行的所有命令的效果</span></span><br><span class="line"><span class="keyword">begin</span>;</span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> table1 <span class="keyword">values</span> (<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">savepoint</span> my_savepoint;</span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> table1 <span class="keyword">values</span> (<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">rollback</span> <span class="keyword">to</span> <span class="keyword">savepoint</span> my_savepoint;</span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> table1 <span class="keyword">values</span> (<span class="number">3</span>);</span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure>
<h3 id="回滚到一个保存点rollback-to-savepoint"><strong>回滚到一个保存点：</strong>rollback to savepoint</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 撤销在my_savepoint建立后执行的命令的效果</span></span><br><span class="line"><span class="keyword">rollback</span> <span class="keyword">to</span> <span class="keyword">savepoint</span> my_savepoint;</span><br></pre></td></tr></table></figure>
<h3 id="删除一个前面定义的保存点release-savepoint"><strong>删除一个前面定义的保存点：</strong>release savepoint</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 建立并且销毁一个保存点</span></span><br><span class="line"><span class="keyword">begin</span>;</span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> table1 <span class="keyword">values</span> (<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">savepoint</span> my_savepoint;</span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> table1 <span class="keyword">values</span> (<span class="number">4</span>);</span><br><span class="line">    <span class="keyword">release</span> <span class="keyword">savepoint</span> my_savepoint;</span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure>
<h2 id="游标相关命令">游标相关命令</h2>
<h3 id="定义一个游标declare"><strong>定义一个游标：</strong>declare</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 声明一个游标</span></span><br><span class="line"><span class="keyword">declare</span> liahona <span class="keyword">cursor</span> <span class="keyword">for</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> films;</span><br></pre></td></tr></table></figure>
<h3 id="定位一个游标move"><strong>定位一个游标：</strong>move</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span> WORK;</span><br><span class="line"><span class="keyword">DECLARE</span> liahona <span class="keyword">CURSOR</span> <span class="keyword">FOR</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> films;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 跳过前 5 行：</span></span><br><span class="line">MOVE FORWARD <span class="number">5</span> <span class="keyword">IN</span> liahona;</span><br><span class="line">MOVE <span class="number">5</span></span><br></pre></td></tr></table></figure>
<h3 id="用游标从查询中抓取行fetch"><strong>用游标从查询中抓取行：</strong>fetch</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 在游标 liahona 中取出前 5 行：</span></span><br><span class="line"><span class="keyword">FETCH</span> FORWARD <span class="number">5</span> <span class="keyword">FROM</span> liahona;</span><br></pre></td></tr></table></figure>
<h3 id="关闭游标close"><strong>关闭游标：</strong>close</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 关闭游标liahona</span></span><br><span class="line"><span class="keyword">close</span> liahona;</span><br></pre></td></tr></table></figure>
<h2 id="alter修改命令">alter修改命令</h2>
<h3 id="修改一个聚集函数的定义alter-aggregate"><strong>修改一个聚集函数的定义：</strong>alter aggregate</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> aggregate myavg(<span class="type">integer</span>) rename <span class="keyword">to</span> my_average;</span><br></pre></td></tr></table></figure>
<h3 id="修改一个排序规则定义alter-collation"><strong>修改一个排序规则定义</strong>：alter collation</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 把排序规则de_DE重命名为german</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">collation</span> &quot;de_de&quot; rename <span class="keyword">to</span> german;</span><br></pre></td></tr></table></figure>
<h3 id="修改一个编码转换的定义alter-conversion"><strong>修改一个编码转换的定义：</strong>alter conversion</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 把转换iso_8859_1_to_utf8的拥有者改成joe</span></span><br><span class="line"><span class="keyword">alter</span> conversion iso_8859_1_to_utf8 owner <span class="keyword">to</span> joe;</span><br></pre></td></tr></table></figure>
<h3 id="修改一个数据库alter-database"><strong>修改一个数据库：</strong>alter database</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 在数据库test中默认禁用索引扫描</span></span><br><span class="line"><span class="keyword">alter</span> database test <span class="keyword">set</span> enable_indexscan <span class="keyword">to</span> off;</span><br></pre></td></tr></table></figure>
<h3 id="定义默认的访问权限alter-default-privileges"><strong>定义默认的访问权限：</strong>alter default privileges</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 在模式myschema中创建的所有表（和视图）授予 SELECT 特权，并且也允许角色webuser向它们之中 INSERT 数据</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">default</span> privileges <span class="keyword">in</span> schema myschema <span class="keyword">grant</span> <span class="keyword">select</span> <span class="keyword">on</span> tables <span class="keyword">to</span> public;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">default</span> privileges <span class="keyword">in</span> schema myschema <span class="keyword">grant</span> <span class="keyword">insert</span> <span class="keyword">on</span> tables <span class="keyword">to</span> webuser;</span><br></pre></td></tr></table></figure>
<h3 id="修改一个域的定义alter-domain"><strong>修改一个域的定义：</strong>alter domain</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 把一个NOT NULL约束加到一个域</span></span><br><span class="line"><span class="keyword">alter</span> domain zipcode <span class="keyword">set</span> <span class="keyword">not</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure>
<h3 id="修改一个函数的定义alter-function"><strong>修改一个函数的定义：</strong>alter function</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 把用于类型integer的函数sqrt 重命名为square_root</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">function</span> <span class="built_in">sqrt</span>(<span class="type">integer</span>) rename <span class="keyword">to</span> square_root;</span><br></pre></td></tr></table></figure>
<h3 id="修改角色名称或成员关系alter-group"><strong>修改角色名称或成员关系：</strong>alter group</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 向一个组增加用户</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">group</span> staff <span class="keyword">add</span> <span class="keyword">user</span> karl, john;</span><br><span class="line"><span class="comment">-- 从一个组移除一个用户</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">group</span> workers <span class="keyword">drop</span> <span class="keyword">user</span> beth;</span><br></pre></td></tr></table></figure>
<h3 id="修改一个索引的定义alter-index"><strong>修改一个索引的定义：</strong>alter index</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 把一个索引移动到一个不同的表空间</span></span><br><span class="line"><span class="keyword">alter</span> index distributors <span class="keyword">set</span> tablespace fasttablespace;</span><br></pre></td></tr></table></figure>
<h3 id="修改一个操作符的定义alter-operator"><strong>修改一个操作符的定义：</strong>alter operator</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 更改类型text的一个自定义操作符a @@ b 的拥有者</span></span><br><span class="line"><span class="keyword">alter</span> operator @@ (text, text) owner <span class="keyword">to</span> joe;</span><br></pre></td></tr></table></figure>
<h3 id="修改一个模式的定义alter-schema"><strong>修改一个模式的定义：</strong>alter schema</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 把一个索引移动到一个不同的表空间</span></span><br><span class="line"><span class="keyword">alter</span> index distributors <span class="keyword">set</span> tablespace fasttablespace;</span><br></pre></td></tr></table></figure>
<h3 id="修改一个数据库角色alter-role"><strong>修改一个数据库角色：</strong>alter role</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 更改一个角色</span></span><br><span class="line"><span class="keyword">alter</span> role davide <span class="keyword">with</span> password <span class="string">&#x27;hu8jmn3&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h3 id="修改一个序列生成器的定义alter-sequence"><strong>修改一个序列生成器的定义：</strong>alter sequence</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 在 105 重启一个被称为serial的序列</span></span><br><span class="line"><span class="keyword">alter</span> sequence serial restart <span class="keyword">with</span> <span class="number">105</span>;</span><br></pre></td></tr></table></figure>
<h3 id="修改表的定义alter-table"><strong>修改表的定义：</strong>alter table</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 向一个表增加一个类型为varchar的列</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> distributors <span class="keyword">add</span> <span class="keyword">column</span> address <span class="type">varchar</span>(<span class="number">30</span>);</span><br></pre></td></tr></table></figure>
<h3 id="修改一个表空间alter-tablespace"><strong>修改一个表空间：</strong>alter tablespace</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 将表空间index_space重命名为fast_raid</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span>space index_space rename <span class="keyword">to</span> fast_raid;</span><br></pre></td></tr></table></figure>
<h3 id="修改一个事件触发器的定义alter-event-trigger"><strong>修改一个事件触发器的定义：</strong>alter event trigger</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 重命名一个现有的触发器</span></span><br><span class="line"><span class="keyword">alter</span> event <span class="keyword">trigger</span> name rename <span class="keyword">to</span> new_name</span><br></pre></td></tr></table></figure>
<h3 id="修改一个类型的定义alter-type"><strong>修改一个类型的定义：</strong>alter type</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 重命名一个数据类型</span></span><br><span class="line"><span class="keyword">alter</span> type electronic_mail rename <span class="keyword">to</span> email;</span><br></pre></td></tr></table></figure>
<h2 id="create定义命令">create定义命令</h2>
<h3 id="定义一个新的约束触发器constraint-trigger"><strong>定义一个新的约束触发器：</strong>constraint trigger</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 只要表accounts的一行即将要被更新时会执行函数check_account_update</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> check_update</span><br><span class="line">    before <span class="keyword">update</span> <span class="keyword">on</span> accounts</span><br><span class="line">    <span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span></span><br><span class="line">    <span class="keyword">execute</span> <span class="keyword">function</span> check_account_update();</span><br></pre></td></tr></table></figure>
<h3 id="定义一个新的编码转换create-conversion"><strong>定义一个新的编码转换：</strong>create conversion</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 使用myfunc创建一个从编码UTF8到 LATIN1的转换</span></span><br><span class="line"><span class="keyword">create</span> conversion myconv <span class="keyword">for</span> <span class="string">&#x27;utf8&#x27;</span> <span class="keyword">to</span> <span class="string">&#x27;latin1&#x27;</span> <span class="keyword">from</span> myfunc;</span><br></pre></td></tr></table></figure>
<h3 id="创建一个新数据库create-database"><strong>创建一个新数据库：</strong>create database</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建一个新数据库</span></span><br><span class="line"><span class="keyword">create</span> database lusiadas;</span><br></pre></td></tr></table></figure>
<h3 id="定义一个新域create-domain"><strong>定义一个新域：</strong>create domain</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建us_postal_code数据类型并且把它用在 一个表定义中。一个正则表达式测试被用来验证值是否看起来像一个 合法的 US 邮政编码</span></span><br><span class="line"><span class="keyword">create</span> domain us_postal_code <span class="keyword">as</span> text</span><br><span class="line"><span class="keyword">check</span>(</span><br><span class="line">   <span class="keyword">value</span> <span class="operator">~</span> <span class="string">&#x27;^\d&#123;5&#125;$&#x27;</span></span><br><span class="line"><span class="keyword">or</span> <span class="keyword">value</span> <span class="operator">~</span> <span class="string">&#x27;^\d&#123;5&#125;-\d&#123;4&#125;$&#x27;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> us_snail_addy (</span><br><span class="line">  address_id serial <span class="keyword">primary</span> key,</span><br><span class="line">  street1 text <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">  street2 text,</span><br><span class="line">  street3 text,</span><br><span class="line">  city text <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">  postal us_postal_code <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h3 id="定义一个新函数create-function"><strong>定义一个新函数：</strong>create function</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">function</span> <span class="keyword">add</span>(<span class="type">integer</span>, <span class="type">integer</span>) <span class="keyword">returns</span> <span class="type">integer</span></span><br><span class="line">    <span class="keyword">as</span> <span class="string">&#x27;select $1 + $2;&#x27;</span></span><br><span class="line">    <span class="keyword">language</span> <span class="keyword">sql</span></span><br><span class="line">    immutable</span><br><span class="line">    <span class="keyword">returns</span> <span class="keyword">null</span> <span class="keyword">on</span> <span class="keyword">null</span> input;</span><br></pre></td></tr></table></figure>
<h3 id="定义一个新索引create-index"><strong>定义一个新索引：</strong>create index</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 在表films中的列title上创建一个 B-树索引</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">unique</span> index title_idx <span class="keyword">on</span> films (title);</span><br></pre></td></tr></table></figure>
<h3 id="定义一种新的过程语言create-language"><strong>定义一种新的过程语言：</strong>create language</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建新的过程语言的最小顺序</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">function</span> plsample_call_handler() <span class="keyword">returns</span> language_handler</span><br><span class="line">    <span class="keyword">as</span> <span class="string">&#x27;$libdir/plsample&#x27;</span></span><br><span class="line">    <span class="keyword">language</span> c;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">language</span> plsample</span><br><span class="line">    handler plsample_call_handler;</span><br></pre></td></tr></table></figure>
<h3 id="定义一个新的操作符create-operator"><strong>定义一个新的操作符：</strong>create operator</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 为数据类型box定义一种新的操作符--面积相等</span></span><br><span class="line"><span class="keyword">create</span> operator <span class="operator">=</span><span class="operator">=</span><span class="operator">=</span> (</span><br><span class="line">    leftarg <span class="operator">=</span> box,</span><br><span class="line">    rightarg <span class="operator">=</span> box,</span><br><span class="line">    <span class="keyword">function</span> <span class="operator">=</span> area_equal_function,</span><br><span class="line">    commutator <span class="operator">=</span> <span class="operator">=</span><span class="operator">=</span><span class="operator">=</span>,</span><br><span class="line">    negator <span class="operator">=</span> <span class="operator">!=</span><span class="operator">=</span>,</span><br><span class="line">    restrict <span class="operator">=</span> area_restriction_function,</span><br><span class="line">    <span class="keyword">join</span> <span class="operator">=</span> area_join_function,</span><br><span class="line">    hashes, merges</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h3 id="定义一个新的操作符表create-operator-class"><strong>定义一个新的操作符表：</strong>create operator class</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 为数据类型_int4（int4数组） 定义了一个 GiST 索引操作符</span></span><br><span class="line"><span class="keyword">create</span> operator class gist__int_ops</span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">for</span> type _int4 <span class="keyword">using</span> gist <span class="keyword">as</span></span><br><span class="line">        operator        <span class="number">3</span>       <span class="operator">&amp;&amp;</span>,</span><br><span class="line">        operator        <span class="number">6</span>       <span class="operator">=</span> (anyarray, anyarray),</span><br><span class="line">        operator        <span class="number">7</span>       @<span class="operator">&gt;</span>,</span><br><span class="line">        operator        <span class="number">8</span>       <span class="operator">&lt;</span>@,</span><br><span class="line">        operator        <span class="number">20</span>      @@ (_int4, query_int),</span><br><span class="line">        <span class="keyword">function</span>        <span class="number">1</span>       g_int_consistent (internal, _int4, <span class="type">smallint</span>, oid, internal),</span><br><span class="line">        <span class="keyword">function</span>        <span class="number">2</span>       g_int_union (internal, internal),</span><br><span class="line">        <span class="keyword">function</span>        <span class="number">3</span>       g_int_compress (internal),</span><br><span class="line">        <span class="keyword">function</span>        <span class="number">4</span>       g_int_decompress (internal),</span><br><span class="line">        <span class="keyword">function</span>        <span class="number">5</span>       g_int_penalty (internal, internal, internal),</span><br><span class="line">        <span class="keyword">function</span>        <span class="number">6</span>       g_int_picksplit (internal, internal),</span><br><span class="line">        <span class="keyword">function</span>        <span class="number">7</span>       g_int_same (_int4, _int4, internal);</span><br></pre></td></tr></table></figure>
<h3 id="定义一个新的数据库角色create-role"><strong>定义一个新的数据库角色：</strong>create role</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建一个有口令的角色</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> davide <span class="keyword">with</span> password <span class="string">&#x27;jw8s0f4&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h3 id="定义一个新重写规则create-rule"><strong>定义一个新重写规则：</strong>create rule</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> rule notify_me <span class="keyword">as</span> <span class="keyword">on</span> <span class="keyword">update</span> <span class="keyword">to</span> mytable do also notify mytable;</span><br></pre></td></tr></table></figure>
<h3 id="定义一个新模式create-schema"><strong>定义一个新模式：</strong>create schema</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建一个模式</span></span><br><span class="line"><span class="keyword">create</span> schema myschema;</span><br><span class="line"><span class="comment">-- 为用户joe创建一个模式，该模式也将被命名为 joe</span></span><br><span class="line"><span class="keyword">create</span> schema <span class="keyword">authorization</span> joe;</span><br></pre></td></tr></table></figure>
<h3 id="定义一个新的外部服务器create-server"><strong>定义一个新的外部服务器：</strong>create server</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建使用外部数据包装器postgres_fdw 的服务器myserver</span></span><br><span class="line"><span class="keyword">create</span> server myserver <span class="keyword">foreign</span> data wrapper postgres_fdw options (host <span class="string">&#x27;foo&#x27;</span>, dbname <span class="string">&#x27;foodb&#x27;</span>, port <span class="string">&#x27;5432&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="定义一个新序列发生器create-sequence"><strong>定义一个新序列发生器：</strong>create sequence</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建一个称作serial的上升序列，从 101 开始</span></span><br><span class="line"><span class="keyword">create</span> sequence serial <span class="keyword">start</span> <span class="number">101</span>;</span><br></pre></td></tr></table></figure>
<h3 id="定义一个新表create-table"><strong>定义一个新表：</strong>create table</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建表distributors</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> distributors (</span><br><span class="line">     did    <span class="type">integer</span> <span class="keyword">primary</span> key generated <span class="keyword">by</span> <span class="keyword">default</span> <span class="keyword">as</span> <span class="keyword">identity</span>,</span><br><span class="line">     name   <span class="type">varchar</span>(<span class="number">40</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">check</span> (name  <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 创建有一个二维数组的表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> array_int (</span><br><span class="line">    vector  <span class="type">int</span>[][]</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h3 id="从一条查询的结果中创建一个新表create-table-as"><strong>从一条查询的结果中创建一个新表：</strong>create table as</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建一个新表films_recent，它只由表 films中最近的项组成</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> films_recent <span class="keyword">as</span></span><br><span class="line">  <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> films <span class="keyword">where</span> date_prod <span class="operator">&gt;=</span> <span class="string">&#x27;2002-01-01&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h3 id="定义一个新的表空间create-tablespace"><strong>定义一个新的表空间：</strong>create tablespace</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 要在文件系统位置/data/dbs创建表空间dbspace，请首先使用操作系统工具创建目录并设置正确的所有权</span></span><br><span class="line">mkdir <span class="operator">/</span>data<span class="operator">/</span>dbs</span><br><span class="line">chown postgres:postgres <span class="operator">/</span>data<span class="operator">/</span>dbs</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 然后在内部发出表空间创建命令 PostgreSQL</span></span><br><span class="line"><span class="comment">--create tablespace dbspace location &#x27;/data/dbs&#x27;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 要创建由不同数据库用户拥有的表空间</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span>space indexspace owner genevieve location <span class="string">&#x27;/data/indexes&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h3 id="定义一个新的触发器create-trigger"><strong>定义一个新的触发器：</strong>create trigger</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 禁止执行任何DDL命令</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> replace <span class="keyword">function</span> abort_any_command()</span><br><span class="line">  <span class="keyword">returns</span> event_trigger</span><br><span class="line"> <span class="keyword">language</span> plpgsql</span><br><span class="line">  <span class="keyword">as</span> $$</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  raise exception <span class="string">&#x27;command % is disabled&#x27;</span>, tg_tag;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line">$$;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> event <span class="keyword">trigger</span> abort_ddl <span class="keyword">on</span> ddl_command_start</span><br><span class="line">   <span class="keyword">execute</span> <span class="keyword">function</span> abort_any_command();</span><br></pre></td></tr></table></figure>
<h3 id="定义一个新的数据类型create-type"><strong>定义一个新的数据类型：</strong>create type</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建一个枚举类型并且将其用在一个表定义中</span></span><br><span class="line"><span class="keyword">create</span> type bug_status <span class="keyword">as</span> enum (<span class="string">&#x27;new&#x27;</span>, <span class="string">&#x27;open&#x27;</span>, <span class="string">&#x27;closed&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> bug (</span><br><span class="line">    id serial,</span><br><span class="line">    description text,</span><br><span class="line">    status bug_status</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h3 id="定义一个视图create-view"><strong>定义一个视图：</strong>create view</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建一个由所有喜剧电影组成的视图</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> comedies <span class="keyword">as</span></span><br><span class="line">    <span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line">    <span class="keyword">from</span> films</span><br><span class="line">    <span class="keyword">where</span> kind <span class="operator">=</span> <span class="string">&#x27;comedy&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h2 id="drop删除命令">drop删除命令</h2>
<h3 id="删除一个表中的行delete"><strong>删除一个表中的行：</strong>delete</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 删除所有电影，但音乐剧除外</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> films <span class="keyword">where</span> kind  <span class="string">&#x27;musical&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h3 id="删除一个用户定义的聚类函数drop-aggregate"><strong>删除一个用户定义的聚类函数：</strong>drop aggregate</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 为类型integer移除聚集函数myavg</span></span><br><span class="line"><span class="keyword">drop</span> aggregate myavg(<span class="type">integer</span>);</span><br></pre></td></tr></table></figure>
<h3 id="删除一个用户定义的类型转换drop-cast"><strong>删除一个用户定义的类型转换：</strong>drop cast</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 移除从类型text到类型int的类型</span></span><br><span class="line"><span class="keyword">drop</span> <span class="built_in">cast</span> (text <span class="keyword">as</span> <span class="type">int</span>);</span><br></pre></td></tr></table></figure>
<h3 id="删除一个用户定义的编码转换drop-conversion"><strong>删除一个用户定义的编码转换：</strong>drop conversion</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 删除名为myname的转换</span></span><br><span class="line"><span class="keyword">drop</span> conversion myname;</span><br></pre></td></tr></table></figure>
<h3 id="删除一个数据库drop-database"><strong>删除一个数据库：</strong>drop database</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 删除名为myname的数据库</span></span><br><span class="line"><span class="keyword">drop</span> database myname;</span><br></pre></td></tr></table></figure>
<h3 id="删除一个用户定义的域drop-domain"><strong>删除一个用户定义的域：</strong>drop domain</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 移除域box</span></span><br><span class="line"><span class="keyword">drop</span> domain box;</span><br></pre></td></tr></table></figure>
<h3 id="删除一个函数drop-function"><strong>删除一个函数：</strong>drop function</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 移除域box</span></span><br><span class="line"><span class="keyword">drop</span> domain box;</span><br></pre></td></tr></table></figure>
<h3 id="删除一个索引drop-index"><strong>删除一个索引：</strong>drop index</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 移除索引title_idx</span></span><br><span class="line"><span class="keyword">drop</span> index title_idx;</span><br></pre></td></tr></table></figure>
<h3 id="删除一个过程语言drop-language"><strong>删除一个过程语言：</strong>drop language</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 移除过程语言plsample</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">language</span> plsample;</span><br></pre></td></tr></table></figure>
<h3 id="删除一个操作符drop-operator"><strong>删除一个操作符：</strong>drop operator</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 为类型integer移除幂操作符 a^b</span></span><br><span class="line"><span class="keyword">drop</span> operator <span class="operator">^</span> (<span class="type">integer</span>, <span class="type">integer</span>);</span><br></pre></td></tr></table></figure>
<h3 id="删除一个操作符表drop-operator-class"><strong>删除一个操作符表：</strong>drop operator class</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 移除 B-树操作符类widget_ops</span></span><br><span class="line"><span class="keyword">drop</span> operator class widget_ops <span class="keyword">using</span> btree;</span><br></pre></td></tr></table></figure>
<h3 id="删除一个数据库角色drop-role"><strong>删除一个数据库角色：</strong>drop role</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 删除一个角色</span></span><br><span class="line"><span class="keyword">drop</span> role jonathan;</span><br></pre></td></tr></table></figure>
<h3 id="删除一个重写规则drop-rule"><strong>删除一个重写规则：</strong>drop rule</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 删除重写规则newrule</span></span><br><span class="line"><span class="keyword">drop</span> rule newrule <span class="keyword">on</span> mytable;</span><br></pre></td></tr></table></figure>
<h3 id="删除一个模式drop-schema"><strong>删除一个模式：</strong>drop schema</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 移除序列serial</span></span><br><span class="line"><span class="keyword">drop</span> sequence serial;</span><br></pre></td></tr></table></figure>
<h3 id="删除一个表drop-table"><strong>删除一个表：</strong>drop table</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 销毁两个表films和 distributors</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> films, distributors;</span><br></pre></td></tr></table></figure>
<h3 id="删除一个表空间drop-tablespace"><strong>删除一个表空间：</strong>drop tablespace</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 从系统移除表空间mystuff</span></span><br><span class="line"><span class="keyword">drop</span> tablespace mystuff;</span><br></pre></td></tr></table></figure>
<h3 id="删除一个触发器定义drop-trigger"><strong>删除一个触发器定义：</strong>drop trigger</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 销毁表films上的触发器 if_dist_exists</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">trigger</span> if_dist_exists <span class="keyword">on</span> films;</span><br></pre></td></tr></table></figure>
<h3 id="删除一个用户定义数据类型drop-type"><strong>删除一个用户定义数据类型：</strong>drop type</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 移除数据类型box</span></span><br><span class="line"><span class="keyword">drop</span> type box;</span><br></pre></td></tr></table></figure>
<h3 id="删除一个视图drop-view"><strong>删除一个视图：</strong>drop view</h3>
<p>具体语句用法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 将移除名为kinds的视图</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">view</span> kinds;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>PgSQL</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>PgSQL数据库学习笔记（三）</title>
    <url>/2022/10/17/PgSQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[<h1 id="postgresql命令">PostgreSQL命令</h1>
<p>由于Pgsql数据库的命令在运行时会自动转换为小写英文字母，故命令语句也可以用小写字母编写。</p>
<h2 id="使用pgadmin工具创建数据库">使用pgAdmin工具创建数据库</h2>
<p>右键点击batabases，选择弹出的数据库的菜单。</p>
<p><img src="/2022/10/17/PgSQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/1.png"></p>
<h2 id="pgadmin工具界面语言设成中文">pgAdmin工具界面语言设成中文</h2>
<p>左键点击File，弹出的Preferences。</p>
<p><img src="/2022/10/17/PgSQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/2.png"></p>
<p>选择左下角的User language，点击右上角的箭头，选择Chinese(Simplified)，点击Save保存。在弹出的Refresh required窗口中点击Refresh保存即可。</p>
<p><img src="/2022/10/17/PgSQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/3.png"></p>
<h2 id="pgadmin创建sql脚本">pgAdmin创建SQL脚本</h2>
<p>在已经创建好的数据库名称中右键点击，选择CREATE 脚本，即可创建SQL脚本。可以在SQL脚本里编写PgSQL语句。</p>
<p><img src="/2022/10/17/PgSQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/4.png"></p>
<p><strong>注意：SQL脚本中尽量不要直接点击运行代码。</strong>这样在创建过一次表后，直接点击运行代码时会再次运行建表的语句，会报表格已存在的错。<strong>通常是选中需要运行的代码块后再点击执行按钮。</strong>数据库只运行选中的代码，这样不会重复执行先前写好的代码，若没有选中任何代码，则默认为选中全部。</p>
<h2 id="pgsql创建数据库">PgSQL创建数据库</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- create database 数据库名</span></span><br><span class="line"><span class="comment">-- 	   with</span></span><br><span class="line"><span class="comment">--     关于数据库的说明</span></span><br><span class="line"><span class="keyword">create</span> database postgres</span><br><span class="line">    <span class="keyword">with</span></span><br><span class="line">    owner<span class="operator">=</span>postgres <span class="comment">-- 该数据库的拥有者</span></span><br><span class="line">    encoding<span class="operator">=</span><span class="string">&#x27;UTF8&#x27;</span> <span class="comment">-- 数据库中使用的字符集编码</span></span><br><span class="line"> 	lc_collate<span class="operator">=</span><span class="string">&#x27;Chinese (Simplified)_China.936&#x27;</span> <span class="comment">-- 在数据库中使用的排序规则顺序</span></span><br><span class="line">    lc_ctype<span class="operator">=</span><span class="string">&#x27;Chinese (Simplified)_China.936&#x27;</span><span class="comment">-- 在数据库中使用的字符分类</span></span><br><span class="line">    tablespace<span class="operator">=</span>pg_default<span class="comment">-- 与数据库相关联的表空间名称</span></span><br><span class="line">    connection limit<span class="operator">=</span><span class="number">-1</span> <span class="comment">-- 数据库允许多少并发连接，-1表示没有限制</span></span><br><span class="line">    is_template<span class="operator">=</span><span class="literal">false</span>; <span class="comment">-- 若为真，则具有CREATEDB特权的用户都可以从 这个数据库克隆。如果为假（默认），则只有超级用户或者该数据库的拥有者 可以克隆它。</span></span><br></pre></td></tr></table></figure>
<h2 id="pgsql的crud语句">PgSQL的CRUD语句</h2>
<h3 id="create建表">create建表</h3>
<p>使用create语句创建表：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- create table 表名(</span></span><br><span class="line">	<span class="comment">-- 属性名 数据类型 条件约束 </span></span><br><span class="line"><span class="comment">-- )</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> rpt_tutorial( </span><br><span class="line">	id serial <span class="keyword">primary</span> key <span class="keyword">not</span> <span class="keyword">null</span>,<span class="comment">-- 建立自增id</span></span><br><span class="line">	name text <span class="keyword">not</span> <span class="keyword">null</span>,<span class="comment">-- 建立文本型属性</span></span><br><span class="line">	age <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span>,<span class="comment">-- 建立整数型属性</span></span><br><span class="line">	datetime <span class="type">date</span> <span class="keyword">not</span> <span class="keyword">null</span><span class="comment">-- 建立日期型属性</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h2 id="create创建复合类型">create创建复合类型</h2>
<p>使用create语句创建复合类型：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- create type 复合类型名 as （类型名 数据类型)</span></span><br><span class="line"><span class="keyword">create</span> type profession <span class="keyword">as</span> (profession <span class="type">char</span>(<span class="number">50</span>));</span><br></pre></td></tr></table></figure>
<p>创建复合类型后，可实现在表中自定义字段名称，其格式为：<code>属性名 复合类型名 条件约束</code></p>
<h3 id="insert插入数据">insert插入数据</h3>
<p>使用insert语句查询数据：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> rpt_tutorial(name,age,datetime,prof)</span><br><span class="line"><span class="keyword">values</span>(<span class="string">&#x27;Zhangsan&#x27;</span>,<span class="number">30</span>,<span class="string">&#x27;2022-10-14&#x27;</span>,<span class="string">&#x27;(teacher)&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h3 id="read读数据">read读数据</h3>
<p>使用select语句查询数据：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- select 属性名 form 表名 where 条件约束</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> rpt_tutorial;</span><br><span class="line"><span class="keyword">select</span> name <span class="keyword">from</span> rpt_tutorial <span class="keyword">where</span> age<span class="operator">&gt;=</span><span class="number">30</span>;</span><br></pre></td></tr></table></figure>
<h3 id="update更新数据">update更新数据</h3>
<p>使用update...set语句更新数据：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- update 表名 set 更新的属性名=更新的数值 where 条件约束更新的属性名=原数值</span></span><br><span class="line"><span class="keyword">update</span> rpt_tutorial <span class="keyword">set</span> datetime<span class="operator">=</span><span class="string">&#x27;2022-10-17&#x27;</span> <span class="keyword">where</span> datetime<span class="operator">=</span><span class="string">&#x27;2022-10-14&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h3 id="deletedrop删除数据">delete&amp;drop删除数据</h3>
<p>使用delete或drop语句删除数据：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 删除表中的记录</span></span><br><span class="line"><span class="comment">-- delete from 表名 </span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> rpt_tutorial</span><br><span class="line"><span class="comment">-- 删除表</span></span><br><span class="line"><span class="comment">-- delete table 表名 </span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> rpt_tutorial</span><br><span class="line"><span class="comment">-- 删除复合类型</span></span><br><span class="line"><span class="keyword">drop</span> type profession</span><br><span class="line"><span class="comment">-- 重置自增id为1，删除所有数据</span></span><br><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> rpt_tutorial restart <span class="keyword">identity</span>;</span><br></pre></td></tr></table></figure>
<h2 id="使用python进行pgsql数据库连接">使用python进行PgSQL数据库连接</h2>
<p>Psycopy是针对python的Postgres数据库的适配模块，安装psycopg2可以整合python和Postgres。可在cmd中输入命令进行安装：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install psycopg2</span><br></pre></td></tr></table></figure>
<p>导入psycopg2模块，并进行sql操作，其语句格式如下。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">conn=psycopg2.connect(database=<span class="string">&quot;数据库名&quot;</span>,user=<span class="string">&quot;数据库用户名&quot;</span>,password=<span class="string">&quot;数据库密码&quot;</span>,host=<span class="string">&quot;127.0.0.1&quot;</span>,port=<span class="string">&quot;5432&quot;</span>)<span class="comment">#127.0.0.1为默认的本地ip地址，port为数据库默认地址</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Opened database successfully&quot;</span>)</span><br><span class="line">cur=conn.cursor()<span class="comment">#创建一个cursor对象</span></span><br><span class="line">cur.execute(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">sql操作语句</span></span><br><span class="line"><span class="string">);&#x27;&#x27;&#x27;</span>)</span><br><span class="line">conn.commit()</span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure>
<h2 id="使用python将csv文本的数据导入导出至pqsql">使用python将csv文本的数据导入导出至pqsql</h2>
<p>方法一：</p>
<p>使用psycopg2模块中的copy语句操作文本，由于csv文件默认以逗号分隔单元格，故导入导出时要注意加上或减去逗号：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#读csv文件</span></span><br><span class="line"><span class="comment">#resourcefilenames为csv文件地址</span></span><br><span class="line"><span class="comment">#targettablename为要导入的数据库表名</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(resourcefilenames,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="built_in">next</span>(f)</span><br><span class="line">    cur.copy_from(f,targettablename,sep=<span class="string">&#x27;,&#x27;</span>,)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#写文本</span></span><br><span class="line"><span class="comment">#targetfilenames为导出的csv文件名</span></span><br><span class="line">write_head=<span class="literal">True</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(targetfilenames,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    columns=[<span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;age&#x27;</span>,<span class="string">&#x27;datetime&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> write_head:</span><br><span class="line">        s=<span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> columns:</span><br><span class="line">            s+=k+<span class="string">&#x27;,&#x27;</span></span><br><span class="line">        s=s[:-<span class="number">1</span>]</span><br><span class="line">        f.write(s+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        write_head=<span class="literal">False</span>    </span><br><span class="line">    cur.copy_to(f,targettablename,sep=<span class="string">&#x27;,&#x27;</span>,columns=columns) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Export csv successfully&quot;</span>)  </span><br></pre></td></tr></table></figure>
<p>方法二：</p>
<p>运用xlrd、xlwt模块导入导出数据：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#导入数据</span></span><br><span class="line"><span class="keyword">import</span> xlrd</span><br><span class="line">workbook = xlrd.open_workbook(filename=<span class="string">&#x27;C:/文件名&#x27;</span>)<span class="comment">#仅支持xls文件</span></span><br><span class="line"><span class="comment"># 需要先指定sheet工作表</span></span><br><span class="line">table = workbook.sheet_by_name(sheet_name=<span class="string">&#x27;sheet表名&#x27;</span>)</span><br><span class="line"><span class="comment"># 获取行数</span></span><br><span class="line">rows = table.nrows</span><br><span class="line"><span class="comment"># 获取列数</span></span><br><span class="line">cols = table.ncols</span><br><span class="line"><span class="comment"># 循环获取每行的数据</span></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(rows):</span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(cols):</span><br><span class="line">        value = table.cell_value(row, col)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;第&#123;&#125;行&#123;&#125;列的数据为：&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(row, col, value))</span><br><span class="line"><span class="comment">#导出数据</span></span><br><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line"><span class="comment"># 创建一个workbook并设置编码</span></span><br><span class="line">workbook = xlwt.Workbook(encoding = <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="comment"># 添加sheet</span></span><br><span class="line">worksheet = workbook.add_sheet(<span class="string">&#x27;text2&#x27;</span>)</span><br><span class="line"><span class="comment"># 写入excel, 参数对应 行, 列, 值</span></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(rows):</span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(cols):</span><br><span class="line">        value = table.cell_value(row, col)</span><br><span class="line">        worksheet.write(row, col, value)</span><br><span class="line">workbook.save(<span class="string">&#x27;text2.csv&#x27;</span>)   </span><br><span class="line"><span class="comment">#导出数据方法2</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">outdata</span>(<span class="params">data,file,sheetname</span>):</span><br><span class="line">    <span class="comment"># work_book=xlrd.open_workbook(filename=file)</span></span><br><span class="line">    work_book=xlwt.Workbook(encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    sheet=work_book.add_sheet(sheetname)</span><br><span class="line">    sheet.write(<span class="number">0</span>,<span class="number">0</span>,<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">    sheet.write(<span class="number">0</span>,<span class="number">1</span>,<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">    sheet.write(<span class="number">0</span>,<span class="number">2</span>,<span class="string">&#x27;age&#x27;</span>)</span><br><span class="line">    sheet.write(<span class="number">0</span>,<span class="number">3</span>,<span class="string">&#x27;datetime&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data[i])):</span><br><span class="line">            sheet.write(i+<span class="number">1</span>,j,<span class="string">&#x27;%s&#x27;</span> % data[i][j])</span><br><span class="line">    work_book.save(file)              </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Data output successfully&quot;</span>) </span><br><span class="line">outdata(rows,targetfilenames,<span class="string">&#x27;test&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>方法三：</p>
<p>运用csv模块导入导出数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#导入数据</span></span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">from</span> re <span class="keyword">import</span> A</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">readfile</span>():</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&#x27;文件名&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">    csv_reader = csv.reader(f)</span><br><span class="line">    a=[]</span><br><span class="line">    <span class="keyword">for</span> row_data <span class="keyword">in</span> csv_reader:</span><br><span class="line">        a.append(row_data)</span><br><span class="line">        <span class="built_in">print</span>(a)</span><br><span class="line">    f.close()         </span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"><span class="comment">#导出数据    </span></span><br><span class="line">a=readfile()</span><br><span class="line">csvFile3 = <span class="built_in">open</span>(<span class="string">&#x27;新文件名&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>,newline=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">writer2 = csv.DictWriter(csvFile3,fieldnames=[<span class="string">&#x27;属性名&#x27;</span>])</span><br><span class="line">key=a[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(key)):</span><br><span class="line">    writer2 = csv.writer(csvFile3)</span><br><span class="line">    writer2.writerow(a[t])</span><br><span class="line">csvFile3.close()  </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>PgSQL</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>PgSQL数据库学习笔记（二）</title>
    <url>/2022/10/14/PgSQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h1 id="postgresql数据类型">PostgreSQL数据类型</h1>
<h2 id="数值类型">数值类型</h2>
<p>数值类型由 2 字节、4 字节或 8 字节的整数以及 4 字节或 8 字节的浮点数和可选精度的十进制数组成。</p>
<p>下表列出了PgSQL所支持的数值类型：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">名字</th>
<th style="text-align: left;">存储长度</th>
<th style="text-align: left;">描述</th>
<th style="text-align: left;">范围</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">smallint</td>
<td style="text-align: left;">2 字节</td>
<td style="text-align: left;">小范围整数</td>
<td style="text-align: left;">-32768 到 +32767</td>
</tr>
<tr class="even">
<td style="text-align: left;">integer</td>
<td style="text-align: left;">4 字节</td>
<td style="text-align: left;">常用的整数</td>
<td style="text-align: left;">-2147483648 到 +2147483647</td>
</tr>
<tr class="odd">
<td style="text-align: left;">bigint</td>
<td style="text-align: left;">8 字节</td>
<td style="text-align: left;">大范围整数</td>
<td style="text-align: left;">-9223372036854775808 到 +9223372036854775807</td>
</tr>
<tr class="even">
<td style="text-align: left;">decimal</td>
<td style="text-align: left;">可变长</td>
<td style="text-align: left;">用户指定的精度，精确</td>
<td style="text-align: left;">小数点前 131072 位；小数点后 16383 位</td>
</tr>
<tr class="odd">
<td style="text-align: left;">numeric</td>
<td style="text-align: left;">可变长</td>
<td style="text-align: left;">用户指定的精度，精确</td>
<td style="text-align: left;">小数点前 131072 位；小数点后 16383 位</td>
</tr>
<tr class="even">
<td style="text-align: left;">real</td>
<td style="text-align: left;">4 字节</td>
<td style="text-align: left;">可变精度，不精确</td>
<td style="text-align: left;">6 位十进制数字精度</td>
</tr>
<tr class="odd">
<td style="text-align: left;">double precision</td>
<td style="text-align: left;">8 字节</td>
<td style="text-align: left;">可变精度，不精确</td>
<td style="text-align: left;">15 位十进制数字精度</td>
</tr>
<tr class="even">
<td style="text-align: left;">smallserial</td>
<td style="text-align: left;">2 字节</td>
<td style="text-align: left;">自增的小范围整数</td>
<td style="text-align: left;">1 到 32767</td>
</tr>
<tr class="odd">
<td style="text-align: left;">serial</td>
<td style="text-align: left;">4 字节</td>
<td style="text-align: left;">自增整数</td>
<td style="text-align: left;">1 到 2147483647</td>
</tr>
<tr class="even">
<td style="text-align: left;">bigserial</td>
<td style="text-align: left;">8 字节</td>
<td style="text-align: left;">自增的大范围整数</td>
<td style="text-align: left;">1 到 9223372036854775807</td>
</tr>
</tbody>
</table>
<h2 id="货币类型">货币类型</h2>
<p>money类型存储带有固定小数精度的货币金额。numeric、int和bigint类型的值可以转换为money。</p>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">名字</th>
<th style="text-align: left;">存储容量</th>
<th style="text-align: left;">描述</th>
<th style="text-align: left;">范围</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">money</td>
<td style="text-align: left;">8 字节</td>
<td style="text-align: left;">货币金额</td>
<td style="text-align: left;">-92233720368547758.08 到 +92233720368547758.07</td>
</tr>
</tbody>
</table>
<h2 id="字符类型">字符类型</h2>
<p>下表列出了PgSQL所支持的字符类型：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">名字</th>
<th style="text-align: left;">描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">character varying(n),varchar(n)</td>
<td style="text-align: left;">变长，有长度限制</td>
</tr>
<tr class="even">
<td style="text-align: left;">character(n), char(n)</td>
<td style="text-align: left;">f定长,不足补空白</td>
</tr>
<tr class="odd">
<td style="text-align: left;">text</td>
<td style="text-align: left;">变长，无长度限制</td>
</tr>
</tbody>
</table>
<h2 id="日期时间类型">日期/时间类型</h2>
<p>下表列出了PgSQL所支持的日期和时间类型：</p>
<table>
<colgroup>
<col style="width: 38%">
<col style="width: 6%">
<col style="width: 20%">
<col style="width: 11%">
<col style="width: 11%">
<col style="width: 11%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">名字</th>
<th style="text-align: left;">存储空间</th>
<th style="text-align: left;">描述</th>
<th style="text-align: left;">最低值</th>
<th style="text-align: left;">最高值</th>
<th style="text-align: left;">分辨率</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">timestamp [ ( <em>p</em> ) ] [ without time zone ]</td>
<td style="text-align: left;">8 字节</td>
<td style="text-align: left;">日期和时间(无时区)</td>
<td style="text-align: left;">4713 BC</td>
<td style="text-align: left;">294276 AD</td>
<td style="text-align: left;">1 毫秒 / 14 位</td>
</tr>
<tr class="even">
<td style="text-align: left;">timestamp [ ( <em>p</em> ) ] with time zone</td>
<td style="text-align: left;">8 字节</td>
<td style="text-align: left;">日期和时间，有时区</td>
<td style="text-align: left;">4713 BC</td>
<td style="text-align: left;">294276 AD</td>
<td style="text-align: left;">1 毫秒 / 14 位</td>
</tr>
<tr class="odd">
<td style="text-align: left;">date</td>
<td style="text-align: left;">4 字节</td>
<td style="text-align: left;">只用于日期</td>
<td style="text-align: left;">4713 BC</td>
<td style="text-align: left;">5874897 AD</td>
<td style="text-align: left;">1 天</td>
</tr>
<tr class="even">
<td style="text-align: left;">time [ ( <em>p</em> ) ] [ without time zone ]</td>
<td style="text-align: left;">8 字节</td>
<td style="text-align: left;">只用于一日内时间</td>
<td style="text-align: left;">00:00:00</td>
<td style="text-align: left;">24:00:00</td>
<td style="text-align: left;">1 毫秒 / 14 位</td>
</tr>
<tr class="odd">
<td style="text-align: left;">time [ ( <em>p</em> ) ] with time zone</td>
<td style="text-align: left;">12 字节</td>
<td style="text-align: left;">只用于一日内时间，带时区</td>
<td style="text-align: left;">00:00:00+1459</td>
<td style="text-align: left;">24:00:00-1459</td>
<td style="text-align: left;">1 毫秒 / 14 位</td>
</tr>
<tr class="even">
<td style="text-align: left;">interval [ <em>fields</em> ] [ ( <em>p</em> ) ]</td>
<td style="text-align: left;">12 字节</td>
<td style="text-align: left;">时间间隔</td>
<td style="text-align: left;">-178000000 年</td>
<td style="text-align: left;">178000000 年</td>
<td style="text-align: left;">1 毫秒 / 14 位</td>
</tr>
</tbody>
</table>
<h2 id="布尔类型">布尔类型</h2>
<p>boolean有true或false两个状态，第三种未知状态（unknown）用NULL表示。</p>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">名称</th>
<th style="text-align: left;">存储格式</th>
<th style="text-align: left;">描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">boolean</td>
<td style="text-align: left;">1 字节</td>
<td style="text-align: left;">true/false</td>
</tr>
</tbody>
</table>
<h2 id="枚举类型">枚举类型</h2>
<p>PgSQL种的枚举类型类似于C语言中的enum类型，包含静态和值的有序集合的数据类型。与其他类型不同的是枚举类型需要使用<code>create type</code>命令创建。枚举类型一旦创建，便可用于变和函数定义。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> type mood <span class="keyword">as</span> enum(<span class="string">&#x27;sad&#x27;</span>,<span class="string">&#x27;ok&#x27;</span>,<span class="string">&#x27;happy&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="几何类型">几何类型</h2>
<p>几何类型表示二维的平面物体。</p>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">名字</th>
<th style="text-align: left;">存储空间</th>
<th style="text-align: left;">说明</th>
<th style="text-align: left;">表现形式</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">point</td>
<td style="text-align: left;">16 字节</td>
<td style="text-align: left;">平面中的点</td>
<td style="text-align: left;">(x,y)</td>
</tr>
<tr class="even">
<td style="text-align: left;">line</td>
<td style="text-align: left;">32 字节</td>
<td style="text-align: left;">(无穷)直线(未完全实现)</td>
<td style="text-align: left;">( ( x1,y1 ) , ( x2,y2 ) )</td>
</tr>
<tr class="odd">
<td style="text-align: left;">lseg</td>
<td style="text-align: left;">32 字节</td>
<td style="text-align: left;">(有限)线段</td>
<td style="text-align: left;">( ( x1,y1 ), ( x2,y2 ) )</td>
</tr>
<tr class="even">
<td style="text-align: left;">box</td>
<td style="text-align: left;">32 字节</td>
<td style="text-align: left;">矩形</td>
<td style="text-align: left;">( ( x1,y1 ), ( x2,y2 ) )</td>
</tr>
<tr class="odd">
<td style="text-align: left;">path</td>
<td style="text-align: left;">16+16n 字节</td>
<td style="text-align: left;">闭合路径(与多边形类似)</td>
<td style="text-align: left;">( ( x1,y1 ), ... )</td>
</tr>
<tr class="even">
<td style="text-align: left;">path</td>
<td style="text-align: left;">16+16n 字节</td>
<td style="text-align: left;">开放路径</td>
<td style="text-align: left;">[ ( x1,y1 ) , ... ]</td>
</tr>
<tr class="odd">
<td style="text-align: left;">polygon</td>
<td style="text-align: left;">40+16n 字节</td>
<td style="text-align: left;">多边形(与闭合路径相似)</td>
<td style="text-align: left;">( ( x1,y1 ) , ... )</td>
</tr>
<tr class="even">
<td style="text-align: left;">circle</td>
<td style="text-align: left;">24 字节</td>
<td style="text-align: left;">圆</td>
<td style="text-align: left;">&lt; ( x,y ) , r &gt; (圆心和半径)</td>
</tr>
</tbody>
</table>
<h2 id="网络地址类型">网络地址类型</h2>
<p>PgSQL提供用于存储IPv4、IPv6、MAC地址的数据类型。在对inet或cidr数据类型进行排序时，IPv4地址总是排在IPv6前面，包括那些封装或是映射在IPv6地址里的IPv4地址。</p>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">名字</th>
<th style="text-align: left;">存储空间</th>
<th style="text-align: left;">描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">cidr</td>
<td style="text-align: left;">7 或 19 字节</td>
<td style="text-align: left;">IPv4 或 IPv6 网络</td>
</tr>
<tr class="even">
<td style="text-align: left;">inet</td>
<td style="text-align: left;">7 或 19 字节</td>
<td style="text-align: left;">IPv4 或 IPv6 主机和网络</td>
</tr>
<tr class="odd">
<td style="text-align: left;">macaddr</td>
<td style="text-align: left;">6 字节</td>
<td style="text-align: left;">MAC 地址</td>
</tr>
</tbody>
</table>
<h2 id="位串类型">位串类型</h2>
<p>位串是一串1和0的字符串，可以用于存储和直观化位掩码。</p>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">名字</th>
<th style="text-align: left;">描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">bit(n)</td>
<td style="text-align: left;">必须准确匹配长度n(n位正整数)</td>
</tr>
<tr class="even">
<td style="text-align: left;">bit var ying(n)</td>
<td style="text-align: left;">最长n的变长类型</td>
</tr>
</tbody>
</table>
<h2 id="文本搜索类型">文本搜索类型</h2>
<p>全文检索即通过自然语言文档的集合来找到那些匹配一个查询的检索。</p>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">名字</th>
<th style="text-align: left;">描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">tsvector</td>
<td style="text-align: left;">其值是一个无重复值的lexemes排序列表，即一些同一个词的不同变种的标准化</td>
</tr>
<tr class="even">
<td style="text-align: left;">tsquery</td>
<td style="text-align: left;">存储用于检索的词汇，且使用布尔操作符&amp;(AND),|(OR)和!(NOT)来组合它们，括号用来强调操作符的分组。</td>
</tr>
</tbody>
</table>
<h2 id="uuid类型">UUID类型</h2>
<p>uuid 数据类型用来存储 RFC 4122，ISO/IEF 9834-8:2005 以及相关标准定义的通用唯一标识符（UUID）。在一些系统里也叫GUID。这个标识符是一个由算法产生的 128 位标识符，使它不可能在已知使用相同算法的模块中和其他方式产生的标识符相同。 其用小写的十六进制数字序列表示。</p>
<h2 id="xml类型">XML类型</h2>
<p>要使用这个数据类型，编译时必须使用<code>configure --with -libxml</code>。</p>
<p>xmlvalue IS DOCUMENT 表达式可以用来判断一个特定的 xml 值是一个完整的文件还是内容片段。</p>
<p>使用xmlparse来从字符数据产生xml类型的值：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">XMLPARSE (DOCUMENT <span class="string">&#x27;&lt;?xml version=&quot;1.0&quot;?&gt;&lt;book&gt;&lt;title&gt;Manual&lt;/title&gt;&lt;chapter&gt;...&lt;/chapter&gt;&lt;/book&gt;&#x27;</span>)</span><br><span class="line">XMLPARSE (CONTENT <span class="string">&#x27;abc&lt;foo&gt;bar&lt;/foo&gt;&lt;bar&gt;foo&lt;/bar&gt;&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="json类型">json类型</h2>
<p>json 数据类型可以用来存储 JSON（JavaScript Object Notation）数据， 这样的数据也可以存储为 text，但是 json 数据类型更有利于检查每个存储的数值是可用的 JSON 值。</p>
<p>此外还有相关的函数来处理 json 数据：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">实例</th>
<th style="text-align: center;">实例结果</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><code>array_to_json('&#123; &#123;1,5&#125;,&#123;99,100&#125; &#125;'::int[])</code></td>
<td style="text-align: center;"><code>[ [1,5],[99,100] ]</code></td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>row_to_json(row(1,'foo'))</code></td>
<td style="text-align: center;"><code>&#123;"f1":1,"f2":"foo"&#125;</code></td>
</tr>
</tbody>
</table>
<h2 id="数组类型">数组类型</h2>
<p>数组类型可以是任何基本类型或用户定义类型，枚举类型或复合类型。</p>
<p><strong>声明数组</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE sal_emp (</span><br><span class="line">    name            text,</span><br><span class="line">    pay_by_quarter  integer[],</span><br><span class="line">    schedule        text[][]，</span><br><span class="line">    pay_by_quarter integer ARRAY[4]</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p><strong>插入值：</strong></p>
<p>插入值使用花括号 {}，元素在 {} 使用逗号隔开：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> sal_emp</span><br><span class="line">    <span class="keyword">VALUES</span> (<span class="string">&#x27;Bill&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;&#123;10000, 10000, 10000, 10000&#125;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;&#123; &#123; &quot;meeting&quot;, &quot;lunch&quot; &#125;, &#123; &quot;training&quot;, &quot;presentation&quot; &#125; &#125;&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p><strong>访问数组：</strong></p>
<p>数组的下标数字是写在方括号里的。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name <span class="keyword">FROM</span> sal_emp <span class="keyword">WHERE</span> pay_by_quarter[<span class="number">1</span>] <span class="operator">&lt;&gt;</span> pay_by_quarter[<span class="number">2</span>];</span><br></pre></td></tr></table></figure>
<p><strong>修改数组：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> sal_emp <span class="keyword">SET</span> pay_by_quarter <span class="operator">=</span> <span class="string">&#x27;&#123;25000,25000,27000,27000&#125;&#x27;</span></span><br><span class="line">    <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;Carol&#x27;</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> sal_emp <span class="keyword">SET</span> pay_by_quarter <span class="operator">=</span> <span class="keyword">ARRAY</span>[<span class="number">25000</span>,<span class="number">25000</span>,<span class="number">27000</span>,<span class="number">27000</span>]</span><br><span class="line">    <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;Carol&#x27;</span>;    </span><br></pre></td></tr></table></figure>
<p><strong>数组中检索：</strong></p>
<p>要搜索一个数组中的数值，就必须检查该数组的每一个值。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> sal_emp <span class="keyword">WHERE</span> <span class="number">10000</span> <span class="operator">=</span> <span class="keyword">ALL</span> (pay_by_quarter);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span></span><br><span class="line">   (<span class="keyword">SELECT</span> pay_by_quarter,</span><br><span class="line">           generate_subscripts(pay_by_quarter, <span class="number">1</span>) <span class="keyword">AS</span> s</span><br><span class="line">      <span class="keyword">FROM</span> sal_emp) <span class="keyword">AS</span> foo</span><br><span class="line"> <span class="keyword">WHERE</span> pay_by_quarter[s] <span class="operator">=</span> <span class="number">10000</span>;</span><br></pre></td></tr></table></figure>
<h2 id="复合类型">复合类型</h2>
<p>复合类型表示一行或一条记录的结构，它实际上只是一个字段名和它们的数据类型的列表。<strong>复合类型可以实现建表时可以自定义字段</strong>。</p>
<p>声明复合类型的语法类似于<code>create table</code>，只是<strong>这里只可以声明字段名字和类型</strong>，定义类型后就可以用它来创建表：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> TYPE complex <span class="keyword">AS</span> (</span><br><span class="line">    r       <span class="type">double precision</span>,</span><br><span class="line">    i       <span class="type">double precision</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> TYPE inventory_item <span class="keyword">AS</span> (</span><br><span class="line">    name            text,</span><br><span class="line">    supplier_id     <span class="type">integer</span>,</span><br><span class="line">    price           <span class="type">numeric</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> on_hand (</span><br><span class="line">    item      inventory_item,</span><br><span class="line">    count     <span class="type">integer</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> on_hand <span class="keyword">VALUES</span> (<span class="type">ROW</span>(<span class="string">&#x27;fuzzy dice&#x27;</span>, <span class="number">42</span>, <span class="number">1.99</span>), <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>
<h3 id="复合类型输入">复合类型输入</h3>
<p>要用文本常量属性复合类型值，在圆括号里包围字段值并用逗号分隔他们。可以在任何字段周围放上双引号，若<strong>值本身包含逗号或圆括号，则必须要用双引号括起来</strong>。</p>
<p>复合类型常量的一般格式如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;( value1 , value2 , ... )&#x27;</span></span><br><span class="line"><span class="string">&#x27;(&quot;fuzzy dice&quot;,42,1.99)&#x27;</span></span><br></pre></td></tr></table></figure>
<h3 id="访问复合类型">访问复合类型</h3>
<p>若要访问复合类型字段的一个域，则必须要用圆括号把域的名字括起来：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> (item).name <span class="keyword">FROM</span> on_hand <span class="keyword">WHERE</span> (item).price <span class="operator">&gt;</span> <span class="number">9.99</span>;</span><br><span class="line"><span class="keyword">SELECT</span> (on_hand.item).name <span class="keyword">FROM</span> on_hand <span class="keyword">WHERE</span> (on_hand.item).price <span class="operator">&gt;</span> <span class="number">9.99</span>;#需要用到表名时的写法</span><br></pre></td></tr></table></figure>
<h2 id="范围类型">范围类型</h2>
<p>范围类型代表这某一元素类型在一定范围内的值。</p>
<p>PostgreSQL 内置的范围类型有：</p>
<ul>
<li>integer的范围：int4range</li>
<li>bigint的范围：int8range</li>
<li>numeric的范围：numrange</li>
<li>timestamp without time zone的范围：tsrange</li>
<li>timestamp with time zone的范围：tstzrange</li>
<li>date的范围：daterange</li>
</ul>
<p>此外也可以定义自己的范围类型：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> reservation (room <span class="type">int</span>, during tsrange);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> reservation <span class="keyword">VALUES</span></span><br><span class="line">    (<span class="number">1108</span>, <span class="string">&#x27;[2010-01-01 14:30, 2010-01-01 15:30)&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 包含</span></span><br><span class="line"><span class="keyword">SELECT</span> int4range(<span class="number">10</span>, <span class="number">20</span>) @<span class="operator">&gt;</span> <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 重叠</span></span><br><span class="line"><span class="keyword">SELECT</span> numrange(<span class="number">11.1</span>, <span class="number">22.2</span>) <span class="operator">&amp;&amp;</span> numrange(<span class="number">20.0</span>, <span class="number">30.0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 提取上边界</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">upper</span>(int8range(<span class="number">15</span>, <span class="number">25</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 计算交叉</span></span><br><span class="line"><span class="keyword">SELECT</span> int4range(<span class="number">10</span>, <span class="number">20</span>) <span class="operator">*</span> int4range(<span class="number">15</span>, <span class="number">25</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 范围是否为空</span></span><br><span class="line"><span class="keyword">SELECT</span> isempty(numrange(<span class="number">1</span>, <span class="number">5</span>));</span><br></pre></td></tr></table></figure>
<p>范围值的输入必须遵循下面的格式：()、(]、[)、[]和空。圆括号或者方括号显示下边界和上边界是不包含的还是包含的。注意最后的格式是 空，代表着一个空的范围（一个不含有值的范围）。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 包括3，不包括7，并且包括二者之间的所有点</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;[3,7)&#x27;</span>::int4range;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 不包括3和7，但是包括二者之间所有点</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;(3,7)&#x27;</span>::int4range;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 只包括单一值4</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;[4,4]&#x27;</span>::int4range;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 不包括点（被标准化为‘空’）</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;[4,4)&#x27;</span>::int4range;</span><br></pre></td></tr></table></figure>
<h2 id="对象标识符类型">对象标识符类型</h2>
<p>PgSQL 在内部使用对象标识符(OID)作为各种系统表的主键。</p>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">名字</th>
<th style="text-align: left;">引用</th>
<th style="text-align: left;">描述</th>
<th style="text-align: left;">数值例子</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">oid</td>
<td style="text-align: left;">任意</td>
<td style="text-align: left;">数字化的对象标识符</td>
<td style="text-align: left;">564182</td>
</tr>
<tr class="even">
<td style="text-align: left;">regproc</td>
<td style="text-align: left;">pg_proc</td>
<td style="text-align: left;">函数名字</td>
<td style="text-align: left;">sum</td>
</tr>
<tr class="odd">
<td style="text-align: left;">regprocedure</td>
<td style="text-align: left;">pg_proc</td>
<td style="text-align: left;">带参数类型的函数</td>
<td style="text-align: left;">sum(int4)</td>
</tr>
<tr class="even">
<td style="text-align: left;">regoper</td>
<td style="text-align: left;">pg_operator</td>
<td style="text-align: left;">操作符名</td>
<td style="text-align: left;">+</td>
</tr>
<tr class="odd">
<td style="text-align: left;">regoperator</td>
<td style="text-align: left;">pg_operator</td>
<td style="text-align: left;">带参数类型的操作符</td>
<td style="text-align: left;">*(integer,integer) 或 -(NONE,integer)</td>
</tr>
<tr class="even">
<td style="text-align: left;">regclass</td>
<td style="text-align: left;">pg_class</td>
<td style="text-align: left;">关系名</td>
<td style="text-align: left;">pg_type</td>
</tr>
<tr class="odd">
<td style="text-align: left;">regtype</td>
<td style="text-align: left;">pg_type</td>
<td style="text-align: left;">数据类型名</td>
<td style="text-align: left;">integer</td>
</tr>
<tr class="even">
<td style="text-align: left;">regconfig</td>
<td style="text-align: left;">pg_ts_config</td>
<td style="text-align: left;">文本搜索配置</td>
<td style="text-align: left;">english</td>
</tr>
<tr class="odd">
<td style="text-align: left;">regdictionary</td>
<td style="text-align: left;">pg_ts_dict</td>
<td style="text-align: left;">文本搜索字典</td>
<td style="text-align: left;">simple</td>
</tr>
</tbody>
</table>
<h2 id="伪类型">伪类型</h2>
<p>PgSQL类型系统包含一系列特殊用途的条目， 它们按照类别来说叫做伪类型。<strong>伪类型不能作为字段的数据类型</strong>， 但是它<strong>可以用于声明一个函数的参数或者结果类型</strong>。 伪类型<strong>在一个函数不只是简单地接受并返回某种SQL 数据类型的情况下很有用</strong>。</p>
<p>下表列出了所有的伪类型：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">名字</th>
<th style="text-align: left;">描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">any</td>
<td style="text-align: left;">表示一个函数接受任何输入数据类型。</td>
</tr>
<tr class="even">
<td style="text-align: left;">anyelement</td>
<td style="text-align: left;">表示一个函数接受任何数据类型。</td>
</tr>
<tr class="odd">
<td style="text-align: left;">anyarray</td>
<td style="text-align: left;">表示一个函数接受任意数组数据类型。</td>
</tr>
<tr class="even">
<td style="text-align: left;">anynonarray</td>
<td style="text-align: left;">表示一个函数接受任意非数组数据类型。</td>
</tr>
<tr class="odd">
<td style="text-align: left;">anyenum</td>
<td style="text-align: left;">表示一个函数接受任意枚举数据类型。</td>
</tr>
<tr class="even">
<td style="text-align: left;">anyrange</td>
<td style="text-align: left;">表示一个函数接受任意范围数据类型。</td>
</tr>
<tr class="odd">
<td style="text-align: left;">cstring</td>
<td style="text-align: left;">表示一个函数接受或者返回一个空结尾的 C 字符串。</td>
</tr>
<tr class="even">
<td style="text-align: left;">internal</td>
<td style="text-align: left;">表示一个函数接受或者返回一种服务器内部的数据类型。</td>
</tr>
<tr class="odd">
<td style="text-align: left;">language_handler</td>
<td style="text-align: left;">一个过程语言调用处理器声明为返回language_handler。</td>
</tr>
<tr class="even">
<td style="text-align: left;">fdw_handler</td>
<td style="text-align: left;">一个外部数据封装器声明为返回fdw_handler。</td>
</tr>
<tr class="odd">
<td style="text-align: left;">record</td>
<td style="text-align: left;">标识一个函数返回一个未声明的行类型。</td>
</tr>
<tr class="even">
<td style="text-align: left;">trigger</td>
<td style="text-align: left;">一个触发器函数声明为返回trigger。</td>
</tr>
<tr class="odd">
<td style="text-align: left;">void</td>
<td style="text-align: left;">表示一个函数不返回数值。</td>
</tr>
<tr class="even">
<td style="text-align: left;">opaque</td>
<td style="text-align: left;">一个已经过时的类型，以前用于所有上面这些用途。</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>PgSQL</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue.js实战之todolist待办项目</title>
    <url>/2022/11/05/Vue.js%E5%AE%9E%E6%88%98%E4%B9%8Btodolist%E5%BE%85%E5%8A%9E%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h1 id="初始化一个新项目">初始化一个新项目</h1>
<ul>
<li><p>要初始化一个新项目，创建一个文件夹test作为项目目录，打开一个终端将切换路径到test，运行代码：</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PS C:\Users\Administrator\Desktop\<span class="built_in">test</span>&gt; vue create <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line">运行结果如下：</span><br><span class="line"> Your connection to the default yarn registry seems to be slow.</span><br><span class="line">   Use https://registry.npmmirror.com <span class="keyword">for</span> faster installation? (Y/n)输入Y回车</span><br><span class="line">   Vue CLI v5.0.8</span><br><span class="line">? Please pick a preset: (Use arrow keys)</span><br><span class="line">&gt; Default ([Vue 3] babel, eslint)</span><br><span class="line">  Default ([Vue 2] babel, eslint)</span><br><span class="line">  Manually select features</span><br></pre></td></tr></table></figure></p></li>
<li><p>使用方向键选择<code>“ Manually select features”</code>（手动选择）选项后按下键盘上的回车键继续。</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Vue CLI v5.0.8</span><br><span class="line">? Please pick a preset: Manually select features</span><br><span class="line">? Check the features needed <span class="keyword">for</span> your project: (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection, and</span><br><span class="line">&lt;enter&gt; to proceed)</span><br><span class="line">&gt;(*) Babel</span><br><span class="line"> ( ) TypeScript</span><br><span class="line"> ( ) Progressive Web App (PWA) Support</span><br><span class="line"> ( ) Router</span><br><span class="line"> ( ) Vuex</span><br><span class="line"> ( ) CSS Pre-processors</span><br><span class="line"> (*) Linter / Formatter</span><br><span class="line"> ( ) Unit Testing</span><br><span class="line"> ( ) E2E Testing</span><br></pre></td></tr></table></figure></p></li>
<li><p>可以看到第一个菜单允许选择想要包含在项目中的功能，确保<code>“Babel”</code>和<code>“Linter / Formatter”</code>这两项是被选中的。若它们没有被选中，使用方向键切换，按空格键来选中它们，若它们被选中，按下回车键继续。</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Vue CLI v5.0.8</span><br><span class="line">? Please pick a preset: Manually select features</span><br><span class="line">? Check the features needed <span class="keyword">for</span> your project: Babel, Linter</span><br><span class="line">? Choose a version of Vue.js that you want to start the project with (Use arrow keys)</span><br><span class="line">&gt; 3.x</span><br><span class="line">  2.x</span><br></pre></td></tr></table></figure></p></li>
<li><p>接下来为选择Vue.js版本，使用方向键选中3.x选项后按下键盘上的回车键继续。</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Vue CLI v5.0.8</span><br><span class="line">? Please pick a preset: Manually select features</span><br><span class="line">? Check the features needed <span class="keyword">for</span> your project: Babel, Linter</span><br><span class="line">? Choose a version of Vue.js that you want to start the project with 3.x</span><br><span class="line">? Pick a linter / formatter config: (Use arrow keys)</span><br><span class="line">&gt; ESLint with error prevention only</span><br><span class="line">  ESLint + Airbnb config</span><br><span class="line">  ESLint + Standard config</span><br><span class="line">  ESLint + Prettier</span><br></pre></td></tr></table></figure></p></li>
<li><p>接下来为<code>linter / formatter</code>选择一个配置，使用方向键选中<code>"ESLint with error prevention only"</code>选项后按下键盘上的回车键继续。这样可以辅助我们捕获常见的错误。</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Vue CLI v5.0.8</span><br><span class="line">? Please pick a preset: Manually select features</span><br><span class="line">? Check the features needed <span class="keyword">for</span> your project: Babel, Linter</span><br><span class="line">? Choose a version of Vue.js that you want to start the project with 3.x</span><br><span class="line">? Pick a linter / formatter config: Basic</span><br><span class="line">? Pick additional lint features: (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection, and &lt;enter&gt; to</span><br><span class="line">proceed)</span><br><span class="line">&gt;(*) Lint on save</span><br><span class="line"> ( ) Lint and fix on commit</span><br></pre></td></tr></table></figure></p></li>
<li><p>接下来选择需要哪种自动化的Lint，使用方向键选中<code>"Lint on save"</code>选项后按下键盘上的回车键继续。</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Vue CLI v5.0.8</span><br><span class="line">? Please pick a preset: Manually select features</span><br><span class="line">? Check the features needed <span class="keyword">for</span> your project: Babel, Linter</span><br><span class="line">? Choose a version of Vue.js that you want to start the project with 3.x</span><br><span class="line">? Pick a linter / formatter config: Basic</span><br><span class="line">? Pick additional lint features: (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection, and &lt;enter&gt; to</span><br><span class="line">proceed)</span><br><span class="line">&gt;(*) Lint on save</span><br><span class="line"> ( ) Lint and fix on commit</span><br></pre></td></tr></table></figure></p></li>
<li><p>接下来选择把配置文件放在哪里。<code>"In dedicated config files"</code>这个选项会把配置文件单独放在一个文件里，另一个选项<code>"In package.json"</code>会把配置文件放仅项目文件<code>package.json</code>里。选择<code>"In dedicated config files"</code>选项后按下键盘上的回车键继续。</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Vue CLI v5.0.8</span><br><span class="line">? Please pick a preset: Manually select features</span><br><span class="line">? Check the features needed <span class="keyword">for</span> your project: Babel, Linter</span><br><span class="line">? Choose a version of Vue.js that you want to start the project with 3.x</span><br><span class="line">? Pick a linter / formatter config: Basic</span><br><span class="line">? Pick additional lint features: Lint on save</span><br><span class="line">? Where <span class="keyword">do</span> you prefer placing config <span class="keyword">for</span> Babel, ESLint, etc.? (Use arrow keys)</span><br><span class="line">&gt; In dedicated config files</span><br><span class="line">  In package.json</span><br></pre></td></tr></table></figure></p></li>
<li><p>最后选择是否把这次的选择作为未来的预设配置。输入<code>y</code>后按下键盘上的回车键后输入保存的配置名称。然后脚手架工具就开始构建项目，并且安装所需的依赖。</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Vue CLI v5.0.8</span><br><span class="line">? Please pick a preset: Manually select features</span><br><span class="line">? Check the features needed <span class="keyword">for</span> your project: Babel, Linter</span><br><span class="line">? Choose a version of Vue.js that you want to start the project with 3.x</span><br><span class="line">? Pick a linter / formatter config: Basic</span><br><span class="line">? Pick additional lint features: Lint on save</span><br><span class="line">? Where <span class="keyword">do</span> you prefer placing config <span class="keyword">for</span> Babel, ESLint, etc.? In dedicated config files</span><br><span class="line">? Save this as a preset <span class="keyword">for</span> future projects? (y/N)</span><br></pre></td></tr></table></figure></p></li>
</ul>
<h2 id="项目结构">项目结构</h2>
<p>如果前面的步骤都顺利执行的话，脚手架工具已经在项目中创建了一系列的文件和目录，其项目结构如下：</p>
<p><img src="/2022/11/05/Vue.js%E5%AE%9E%E6%88%98%E4%B9%8Btodolist%E5%BE%85%E5%8A%9E%E9%A1%B9%E7%9B%AE/1.png"></p>
<ul>
<li><p><code>eslintrc.js</code>：是<code>eslint</code>的配置文件，可以通过它来管理校验规则</p></li>
<li><p><code>babel.config.js</code>：是<code>Babel</code>的配置文件，可以在开发中使用JavaScript的新特性，并且将其转换为在生成环境中可以跨浏览器运行的旧语法代码，也可以在这里配置额外的babel插件</p></li>
<li><p><code>.browserslistrc</code>：是<code>Browserslist</code>的配置文件，可以通过它来控制需要对哪些浏览器进行支持和优化</p></li>
<li><p><code>public</code>：该目录包含一些在<code>Webpack</code>编译过程中没有架构处理过的文件（<code>index.html</code>除外）</p>
<ul>
<li><code>favicon.ico</code>：项目的图标，当前是一个Vue的logo</li>
<li><code>index.html</code>：应用模板文件，Vue应用会通过这个HTML页面来运行，也可以通过<code>lodash</code>这种模板语法在这个文件里插值</li>
</ul></li>
<li><p><code>src</code>：Vue应用的核心代码目录</p>
<ul>
<li><code>main.js</code>：应用的入口文件。目前它会初始化Vue应用并指定将应用挂载到index.html文件中的哪个HTML元素上。通常还会做一些注册全局组件或者添加额外的Vue库的操作</li>
<li><code>App.vue</code>：Vue应用的根节点组件</li>
<li><code>components</code>：用来存放自定义组件的目录，当前里面会有一个示例组件</li>
<li><code>assets</code>：用来存放如CSS、图片这类的静态资源，可以用<code>webpack</code>来操作和处理 根据创建项目时的配置项不同，可能会有一些其他的预设目录，比如选择了路由配置，会看到一个<code>views</code>文件夹。</li>
</ul></li>
</ul>
<h2 id="vue文件单文件组件"><code>.vue</code>文件（单文件组件）</h2>
<p>组件是构建Vue应用中非常重要的一部分，其可以把一个很大的应用程序拆分为独立创建和管理的不相干区块，然后彼此按需传递数据。</p>
<p>在其他框架鼓励把模板、逻辑和样式的代码区分成不同文件时，Vue提倡使用单文件组件，把模板、相关脚本和CSS整合到一起放在<code>.vue</code>结尾的单文件中。这些文件最终会通过JS打包工具（如<code>Webpack</code>）处理。</p>
<p>使用Vue CLI创建的项目被配置为开箱即用的情况下，可以在CLI创建项目中的<code>src</code>文件夹里看到第一个<code>.vue</code>文件：<code>App.vue</code>。</p>
<h2 id="app.vue"><code>App.vue</code></h2>
<p>打开<code>App.vue</code>文件，可以看到有<code>&lt;template&gt;</code>、<code>&lt;script&gt;</code>和<code>&lt;style&gt;</code>三部分组成，分别包含了组件的模板、脚本和样式相关的内容。所有单文件组件内的结构都是这种类似的结构。</p>
<p><strong><code>&lt;tamplate&gt;</code>包含了所有的标记结构和组件的展示逻辑。tamplate可以包含任何合法的HTML以及Vue特点的语法。</strong>如通过设置<code>&lt;tamplate lang="pug"&gt;</code>可以使用Pug模板来替代标准HTML。</p>
<p><strong><code>&lt;script&gt;</code>包含组件中所有的非显示逻辑，<code>&lt;script&gt;</code>标签默认导出一个JS对象。</strong>该对象用于在本地注册组件、定义属性、处理本地状态、定义方法等地方。在构建阶段这个包含<code>&lt;tamplate&gt;</code>的对象会被处理和转换成为一个有<code>render()</code>函数的Vue组件。</p>
<p>对于<code>App.vue</code>，默认导出将组件的名称设置为<code>app</code>，并通过将<code>HelloWorld</code>组件添加到<code>components</code>属性中来注册它。以这种方式注册组件时，意味着就是在本地注册，本地注册的组件只能在注册它们的组件内部使用，因此需要将其导入并注册到使用它们的每个组件文件中。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">HelloWorld</span> form <span class="string">&#x27;./components/Helloworld.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>:<span class="string">&#x27;app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">components</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//在这里本地注册组件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">HelloWorld</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>若想要使用<code>TypeScript</code>语法，可以将<code>&lt;script&gt;</code>标签的<code>lang</code>属性设置为<code>&lt;script lang='ts'&gt;</code>。</p>
<p>组件的CSS应写在<code>&lt;style&gt;</code>标签里，<strong>若添加了<code>&lt;scoped&gt;</code>属性（如<code>&lt;style scoped&gt;</code>)，Vue会把样式的范围显示在单文件组件的内容里。</strong>设置类似于CSS-in-JS的解决方案，只不过是允许书写纯粹的CSS。</p>
<p><strong>注意：</strong>若通过CLI创建项目是选择了CSS预处理器，则可以将<code>lang</code>属性添加到<code>&lt;style&gt;</code>标签中，以便<code>Webpack</code>可以在构建时处理内容。如<code>&lt;style lang="scss"&gt;</code>将允许在样式信息中使用SCSS语法。</p>
<h2 id="本地运行程序">本地运行程序</h2>
<p>Vue CLI带有内置的开发服务器，因此可以无需自己配置服务器便可在本地运行并测试应用程序。CLI会以npm脚本的形式将<code>serve</code>命令添加到项目的<code>package.json</code>文件中，因此可以轻松地运行它。</p>
<p>在终端中，切换到项目所在的路径，输入<code>npm run serve</code>或者<code>yarn run serve</code>即可运行服务器，此时的终端应输出以下类似的内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PS C:\Users\Administrator\Desktop\<span class="built_in">test</span>\<span class="built_in">test</span>&gt; npm run serve</span><br><span class="line"></span><br><span class="line">&gt; <span class="built_in">test</span>@0.1.0 serve</span><br><span class="line">&gt; vue-cli-service serve</span><br><span class="line"></span><br><span class="line"> INFO  Starting development server...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> DONE  Compiled successfully <span class="keyword">in</span> 1995ms                                                                          14:28:36</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  App running at:</span><br><span class="line">  - Local:   http://localhost:8080/</span><br><span class="line">  - Network: http://10.17.212.3:8080/</span><br><span class="line"></span><br><span class="line">  Note that the development build is not optimized.</span><br><span class="line">  To create a production build, run yarn build.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> WAIT  Compiling...                                                                                             14:28:36</span><br><span class="line"></span><br><span class="line">Compiling...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> DONE  Compiled successfully <span class="keyword">in</span> 70ms                                                                            14:28:36</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  App running at:</span><br><span class="line">  - Local:   http://localhost:8080/</span><br><span class="line">  - Network: http://10.17.212.3:8080/</span><br></pre></td></tr></table></figure>
<p>若在浏览器中打开<code>http://localhost:8080/</code>或<code>http://10.17.212.3:8080/</code>，便可以看到应用程序。当前它应该包含欢迎信息、Vue文档的链接、使用CLI初始化应用程序时添加的插件链接，以及指向Vue社区和生态系统的其他有用链接。</p>
<p><img src="/2022/11/05/Vue.js%E5%AE%9E%E6%88%98%E4%B9%8Btodolist%E5%BE%85%E5%8A%9E%E9%A1%B9%E7%9B%AE/2.png"></p>
<h2 id="改动应用">改动应用</h2>
<p>对应用做出第一步改动，删除Vue logo。打开<code>App.vue</code>文件，在template部分删除<code>&lt;img&gt;</code>元素</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&quot;Vue logo&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./assets/logo.png&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>服务器仍在正常运行时，可以看到logo是即时从之前渲染的页面中消失。接下来再把<code>HelloWorld</code>组件也删掉。</p>
<p>首先删除下面这一行：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">HelloWorld</span> <span class="keyword">from</span> <span class="string">&#x27;./components/HelloWorld.vue&#x27;</span></span><br></pre></td></tr></table></figure>
<p>若这时候保存<code>App.vue</code>文件，渲染好的应用会因为找不到<code>HelloWorld</code>组件而抛出一个错误。</p>
<p>在<code>&lt;script&gt;</code>中将引入和注册组件的那几行删掉：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">components</span>: &#123;</span><br><span class="line">  <span class="title class_">HelloWorld</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此时渲染好的应用不再显示错误了，只有一个空页面。</p>
<p>接下来来创建一个任务清单的应用。打开<code>App.vue</code>文件，将下列代码删除：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">HelloWorld</span> <span class="attr">msg</span>=<span class="string">&quot;Welcome to Your Vue.js App&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>编写代码如下，在<code>&lt;div id="app"&gt;</code>中新增一个<code>&lt;h1&gt;</code>标签，并将标题文案设为"To-Do List"：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;h1&gt;To-Do List&lt;/h1&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>
<p>此时服务器会展示<code>To-Do List</code>标题。</p>
<h2 id="小结">小结</h2>
<p>学习至此，我们已经为示例应用程序创建了一些脚手架，使其可以运行，检查并进行了一些初步更改。后续将进一步研究并构建示例应用程序。使之允许存储项目列表，完成后将其选中，并按所有、已完成和未完成待办事项来过滤。</p>
<h1 id="创建第一个vue组件">创建第一个Vue组件</h1>
<p>Vue组件是由管理应用程序数据的JavaScript对象和映射到基础DOM结构的基于HTML语法的模板语法组成的。接下来要创建一个组件来表示待办事项列表中的每一个项目。</p>
<h2 id="创建一个todoitem组件">创建一个<code>ToDoItem</code>组件</h2>
<p><code>ToDoItem</code>组件将用来显示单一的待办事项，用它来建立待办事项列表。</p>
<ul>
<li><p>在<code>test/srx/components</code>目录下，创建一个<code>ToDoItem.vue</code>的新文件并打开</p></li>
<li><p>在文件顶部添加<code>&lt;template&gt;&lt;/template&gt;</code>部分来创建组件中的模板部分</p></li>
<li><p>在模板部分下面创建一个<code>&lt;script&gt;&lt;/script&gt;</code>部分。在<code>&lt;script&gt;</code>标签内，添加一个默认导出对象<code>export default&#123;&#125;</code>作为组件对象:</p>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt; &lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default&#123;&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p></li>
</ul>
<p>现在加上为<code>ToDoItem</code>添加实际内容。Vue模板目前只允许一个根元素--一个元素需要包裹模板内的所有内容，因此要为该根元素使用一个<code>&lt;div&gt;</code>。</p>
<ul>
<li><p>在组件模板中添加一个空的<code>&lt;div&gt;</code></p></li>
<li><p>在<code>&lt;div&gt;</code>里添加一个<code>checkbox</code>和一个对应的<code>label</code>。给复选框添加一个<code>id</code>，并添加一个<code>for</code>属性，将复选框映射到标签上。</p>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;input type=&quot;checkbox&quot; id=&quot;todo-item&quot; checked=&quot;false&quot; /&gt;</span><br><span class="line">        &lt;label for=&quot;todo-item&quot;&gt;My Todo Item&lt;/label&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></p></li>
</ul>
<h2 id="在应用程序中使用todoitem组件">在应用程序中使用TodoItem组件</h2>
<p>​</p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>前端</category>
        <category>前端框架</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue.js实战之博客页面前端</title>
    <url>/2022/11/14/Vue.js%E5%AE%9E%E6%88%98%E4%B9%8B%E5%8D%9A%E5%AE%A2%E9%A1%B5%E9%9D%A2%E5%89%8D%E7%AB%AF/</url>
    <content><![CDATA[<h1 id="基于vue-cli的前端项目初始化">基于Vue-cli的前端项目初始化</h1>
<h2 id="初始化">初始化</h2>
<p>Vue-cli环境配置详情见<a href="http://tangmenjue.top/2022/11/03/前端框架之Vue.js（一）/#/使用npm安装">前端框架之Vue.js（一）</a>安装小节里的“<strong>使用npm安装</strong>”内容。</p>
<ul>
<li><p>初始化一个新项目，创建文件夹tutorproject作为项目目录，打开一个终端将切换路径到tutorproject，运行代码以创建front-end文件夹：</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject&gt; vue create front-end</span><br><span class="line"></span><br><span class="line">运行结果如下：</span><br><span class="line">Vue CLI v5.0.8</span><br><span class="line">? Please pick a preset: (Use arrow keys)</span><br><span class="line">&gt; first ([Vue 3] babel, eslint)</span><br><span class="line">  ssecond ([Vue 3] babel, eslint)</span><br><span class="line">  Default ([Vue 3] babel, eslint)</span><br><span class="line">  Default ([Vue 2] babel, eslint)</span><br><span class="line">  Manually select features</span><br></pre></td></tr></table></figure></p></li>
<li><p>使用方向键选中<code>Default ([Vue 2] babel, eslint)</code>选项后按下键盘上的回车键，然后脚手架工具就开始构建项目，并且安装所需的依赖。</p></li>
<li><p>将切换路径到front-end，运行代码以启动Vue应用程序：</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject&gt; <span class="built_in">cd</span> front-end</span><br><span class="line">PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\front-end&gt; npm run serve</span><br></pre></td></tr></table></figure></p></li>
<li><p>打开浏览器输入网址<code>http://localhost:8080/</code>，即可看到应用程序：</p>
<p><img src="/2022/11/14/Vue.js%E5%AE%9E%E6%88%98%E4%B9%8B%E5%8D%9A%E5%AE%A2%E9%A1%B5%E9%9D%A2%E5%89%8D%E7%AB%AF/1.png"></p></li>
</ul>
<h2 id="组件ping.vue">组件Ping.vue</h2>
<p>将<code>\tutorproject\front-end\src\components</code>目录下的<code>HelloWorld.vue</code>文件删除，并在当前目录下新建文件<code>Ping.vue</code>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&#x27;Ping&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">msg</span>:<span class="string">&#x27;Hello,This is Ping.vue component&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在<code>tutorproject\front-end\src</code>目录下新建路由文件夹<code>router</code>，并在<code>router</code>文件夹中新建文件<code>index.js</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Router</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Ping</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/Ping&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Router</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Router</span>(&#123;</span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">            <span class="attr">name</span>:<span class="string">&#x27;Ping&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Ping</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>修改<code>front-end\src\App.vue</code>中<code>&lt;script&gt;...&lt;/script&gt;</code>部分的import代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">HelloWorld</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Ping.vue&#x27;</span></span></span><br></pre></td></tr></table></figure>
<p>修改<code>front-end\vue.config.js</code>文件的代码以关闭语法检查：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; defineConfig &#125; = <span class="built_in">require</span>(<span class="string">&#x27;@vue/cli-service&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">transpileDependencies</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">lintOnSave</span>:<span class="literal">false</span> <span class="comment">//关闭语法检查</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>此时的代码结构如下：</p>
<p><img src="/2022/11/14/Vue.js%E5%AE%9E%E6%88%98%E4%B9%8B%E5%8D%9A%E5%AE%A2%E9%A1%B5%E9%9D%A2%E5%89%8D%E7%AB%AF/2.png"></p>
<p>再次在浏览器中访问<code>http://localhost:8080/</code>，可以看到页面发生了变化：</p>
<p><img src="/2022/11/14/Vue.js%E5%AE%9E%E6%88%98%E4%B9%8B%E5%8D%9A%E5%AE%A2%E9%A1%B5%E9%9D%A2%E5%89%8D%E7%AB%AF/3.png"></p>
<h2 id="使用axios与api交互">使用axios与API交互</h2>
<p>在<code>cmd</code>中按下<code>ctrl+c</code>停止应用程序，使用以下命令安装axios:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\front-end&gt; cnpm install axios --save</span><br></pre></td></tr></table></figure>
<p>依赖关系自动写进了<code>front-end\package.json</code>中，在package.json文件的<code>dependencies</code>里可以看到刚安装的axios。</p>
<p>输入<code>npm run serve</code>重新启动<code>Vue</code>。</p>
<p>修改<code>\front-end\src\components\Ping.vue</code>中<code>&lt;script&gt;...&lt;/script&gt;</code>部分的代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&#x27;Ping&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">msg</span>:<span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">getMessage</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> path=<span class="string">&#x27;http://localhost:5000/api/ping&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      axios.<span class="title function_">get</span>(path)</span></span><br><span class="line"><span class="language-javascript">        .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">msg</span>=res.<span class="property">data</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">error</span>(error);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">created</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="title function_">getMessage</span>()</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>另外打开一个终端将切换路径到<code>tutorproject\back-end</code>（博客后端的项目文件），运行代码以运行flask服务端：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end&gt; venv\Scripts\activate</span><br><span class="line">(venv) PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end&gt; flask run</span><br></pre></td></tr></table></figure>
<p>此时在浏览器中访问<code>http://localhost:8080/</code>，可以看到页面再次发生了变化：</p>
<p><img src="/2022/11/14/Vue.js%E5%AE%9E%E6%88%98%E4%B9%8B%E5%8D%9A%E5%AE%A2%E9%A1%B5%E9%9D%A2%E5%89%8D%E7%AB%AF/4.png"></p>
<p>若没有获取到后端API端口的数据<code>pong!</code>，解决方案如下：</p>
<ul>
<li><p>停止flask的运行，使用pip安装<code>Flask-Cors</code>包</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(venv) PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end&gt; pip install flask-Cors</span><br><span class="line">(venv) PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\back-end&gt; pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure></p></li>
<li><p>然后修改<code>tutorproject\back-end\tutorweb\__init__.py</code>：</p>
<p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_cors <span class="keyword">import</span> CORS</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"><span class="keyword">from</span> flask_migrate <span class="keyword">import</span> Migrate</span><br><span class="line"><span class="keyword">from</span> config <span class="keyword">import</span> Config</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义Flack_SQLAlchemy</span></span><br><span class="line">db=SQLAlchemy()</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义Flack_Migrate </span></span><br><span class="line">migrate=Migrate()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_app</span>(<span class="params">config_class=Config</span>):</span><br><span class="line">    app=Flask(__name__)</span><br><span class="line">    app.config.from_object(config_class)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#启用CORS</span></span><br><span class="line">    CORS(app)</span><br><span class="line">    <span class="comment">#初始化Flack_SQLAlchemy</span></span><br><span class="line">    db.init_app(app)</span><br><span class="line">    <span class="comment">#初始化Flack_Migrate </span></span><br><span class="line">    migrate.init_app(app,db)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#注册blueprint</span></span><br><span class="line">    <span class="keyword">from</span> tutorweb.api <span class="keyword">import</span> bp <span class="keyword">as</span> api_bp</span><br><span class="line">    app.register_blueprint(api_bp,url_prefix=<span class="string">&#x27;/api&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> app </span><br><span class="line"><span class="keyword">from</span> tutorweb <span class="keyword">import</span> models</span><br></pre></td></tr></table></figure></p></li>
<li><p>然后再启动flask，访问<code>http://localhost:8080/</code>页面即可。</p></li>
</ul>
<h2 id="引入element-ui">引入element-UI</h2>
<p>使用<code>cnpm</code>命令安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PS C:\Users\Administrator\Desktop\code_learn\flask_exercise\tutorproject\front-end&gt; cnpm install element-ui -S</span><br></pre></td></tr></table></figure>
<p>修改<code>\front-end\src\main.js</code>，引入element-UI样式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ElementUI</span> <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">ElementUI</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>修改<code>\front-end\src\components\Ping.vue</code>中<code>&lt;template&gt;...&lt;/template&gt;</code>部分的代码，创建element-UI风格的按钮：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">round</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在浏览器中访问<code>http://localhost:8080/</code>，可以看到element-UI风格的按钮<code>pong!</code>：</p>
<p><img src="/2022/11/14/Vue.js%E5%AE%9E%E6%88%98%E4%B9%8B%E5%8D%9A%E5%AE%A2%E9%A1%B5%E9%9D%A2%E5%89%8D%E7%AB%AF/5.png"></p>
<p>至此，博客前端的欢迎页面完成，页面的具体样式可以根据自己的喜好自行更改。</p>
<p>博客后续的登录注册等页面，由于代码过多且繁杂，暂且不表，该部分的后续看心情更新。（除非...评论区呼声高，嗯！）</p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>前端</category>
        <category>前端框架</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Win10系统edge浏览器出现闪退的解决方法</title>
    <url>/2020/03/30/Win10%E7%B3%BB%E7%BB%9Fedge%E6%B5%8F%E8%A7%88%E5%99%A8%E5%87%BA%E7%8E%B0%E9%97%AA%E9%80%80%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="win10系统edge浏览器出现闪退的解决方法">Win10系统edge浏览器出现闪退的解决方法</h1>
<p>记一个Win10系统edge浏览器出现闪退的解决方法：</p>
<p>第一步：</p>
<p><strong>Win+R</strong> 呼出运行窗口，并在里面输入</p>
<p><code>%USERPROFILE%\AppData\Local\Packages</code>,点击确定按钮</p>
<p><img src="/2020/03/30/Win10%E7%B3%BB%E7%BB%9Fedge%E6%B5%8F%E8%A7%88%E5%99%A8%E5%87%BA%E7%8E%B0%E9%97%AA%E9%80%80%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/1.png"></p>
<p>这时可以看到打开了一个文件夹，找到</p>
<p><code>Microsoft.MicrosoftEdge_8wekyb3d8bbwe</code>文件夹，</p>
<p>右键 <strong>删除</strong></p>
<p><img src="/2020/03/30/Win10%E7%B3%BB%E7%BB%9Fedge%E6%B5%8F%E8%A7%88%E5%99%A8%E5%87%BA%E7%8E%B0%E9%97%AA%E9%80%80%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/2.png"></p>
<p>第二步：</p>
<p>返回桌面，在 <strong>搜索框</strong> 输入</p>
<p><code>PowerShell</code>搜索，并在搜索结果中选择 <strong>以管理员身份运行</strong> ,划重点 一定要以 <strong>管理员身份</strong> 运行，如果直接打开出现的后果会在文章最后说明。</p>
<p><img src="/2020/03/30/Win10%E7%B3%BB%E7%BB%9Fedge%E6%B5%8F%E8%A7%88%E5%99%A8%E5%87%BA%E7%8E%B0%E9%97%AA%E9%80%80%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/3.png"></p>
<p>第三步：</p>
<p>在打开的<code>Windows PowerShell</code>窗口中输入命令<br>
<code>Get-AppXPackage -ALLUsers -Name Microsoft.MicrosoftEdge | Foreach &#123;Add-AppxPackage -DisableDevelopmentMode -Register"$($_.InstallLocation)\AppXManifest.*" -verbose&#125;</code><br>
看到下图即成功。</p>
<p><img src="/2020/03/30/Win10%E7%B3%BB%E7%BB%9Fedge%E6%B5%8F%E8%A7%88%E5%99%A8%E5%87%BA%E7%8E%B0%E9%97%AA%E9%80%80%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/4.png"></p>
<p>当然，如果没出现黄字的提示，看到下面那行的命令行出来时，关闭<code>Windows PowerShell</code><br>
窗口后，打开浏览器，出现下图的画面，即表明浏览器闪退问题已解决。</p>
<p><img src="/2020/03/30/Win10%E7%B3%BB%E7%BB%9Fedge%E6%B5%8F%E8%A7%88%E5%99%A8%E5%87%BA%E7%8E%B0%E9%97%AA%E9%80%80%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/5.png"></p>
<p>出现报错的情况有：</p>
<p>一、 <strong>Get-AppXPackage</strong> 拒绝访问</p>
<p><img src="/2020/03/30/Win10%E7%B3%BB%E7%BB%9Fedge%E6%B5%8F%E8%A7%88%E5%99%A8%E5%87%BA%E7%8E%B0%E9%97%AA%E9%80%80%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/6.png"></p>
<p>2.Win10 <strong>防火墙</strong> 没有打开</p>
<p>此时应该检查标题栏中的标题是选择 Windows PowerShell 还是选择管理员：Windows PowerShell。如下图：</p>
<p><img src="/2020/03/30/Win10%E7%B3%BB%E7%BB%9Fedge%E6%B5%8F%E8%A7%88%E5%99%A8%E5%87%BA%E7%8E%B0%E9%97%AA%E9%80%80%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/7.png"></p>
<p><img src="/2020/03/30/Win10%E7%B3%BB%E7%BB%9Fedge%E6%B5%8F%E8%A7%88%E5%99%A8%E5%87%BA%E7%8E%B0%E9%97%AA%E9%80%80%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/8-1.png"></p>
<p>若没有管理员的字样，就是原因1，若已经是以管理员身份运行了，则去 <strong>控制面板</strong> 检查防火墙是否已经打开</p>
<p>检查 <strong>防火墙是否已经打开</strong> 步骤：</p>
<p>此电脑-右键选择属性-在路径栏点击控制面板</p>
<p><img src="/2020/03/30/Win10%E7%B3%BB%E7%BB%9Fedge%E6%B5%8F%E8%A7%88%E5%99%A8%E5%87%BA%E7%8E%B0%E9%97%AA%E9%80%80%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/8.png"></p>
<p>在查找方式处，选择大图标</p>
<p><img src="/2020/03/30/Win10%E7%B3%BB%E7%BB%9Fedge%E6%B5%8F%E8%A7%88%E5%99%A8%E5%87%BA%E7%8E%B0%E9%97%AA%E9%80%80%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/9.png"></p>
<p><img src="/2020/03/30/Win10%E7%B3%BB%E7%BB%9Fedge%E6%B5%8F%E8%A7%88%E5%99%A8%E5%87%BA%E7%8E%B0%E9%97%AA%E9%80%80%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/10.png"></p>
<p>单击Windows Defender 防火墙，若看到下图的情形，则是没有打开防火墙，</p>
<p><img src="/2020/03/30/Win10%E7%B3%BB%E7%BB%9Fedge%E6%B5%8F%E8%A7%88%E5%99%A8%E5%87%BA%E7%8E%B0%E9%97%AA%E9%80%80%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/11.png"></p>
<p>此时点击使用推荐配置即可</p>
<p>二、按照所有步骤都执行了，但是浏览器还是闪退</p>
<p>莫慌，来看看你的命令输入是不是和下图的很像？</p>
<p>报错语句截图：</p>
<p><img src="/2020/03/30/Win10%E7%B3%BB%E7%BB%9Fedge%E6%B5%8F%E8%A7%88%E5%99%A8%E5%87%BA%E7%8E%B0%E9%97%AA%E9%80%80%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/12.png"></p>
<p><img src="/2020/03/30/Win10%E7%B3%BB%E7%BB%9Fedge%E6%B5%8F%E8%A7%88%E5%99%A8%E5%87%BA%E7%8E%B0%E9%97%AA%E9%80%80%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/13.png"></p>
<p>看看你输入的双引号是中文的“”，还是英文的””？看看你的命令语句中的黄字部分与解决方法步骤中的黄字部分是否一致？是不是多打了一个空格？</p>
<p>解决方法：直接解决步骤的第三步复制粘贴命令即可</p>
]]></content>
      <categories>
        <category>edge</category>
      </categories>
      <tags>
        <tag>闪退</tag>
      </tags>
  </entry>
  <entry>
    <title>YAML与Redis的基本运用</title>
    <url>/2022/12/16/YAML%E4%B8%8ERedis%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%94%A8/</url>
    <content><![CDATA[<h1 id="yaml">YAML</h1>
<p>YAML是一种<strong>数据序列化语言</strong>而不是标记语言，其语法比较简洁直观，特点是使用空格来表达层次结构，其最大的优势是在数据结构的表达上，且能配合大多数编程语言使用，因此YAML更多应用于配置文件的编写，其文件一般以<code>.yml</code>为后缀。</p>
<p>由于其语法的特殊性，没有编辑器可能容易写错，因而在此推荐一个无广告的yaml在线格式化网站：<a href="http://nodeca.github.io/js-yaml/">JS-YAML</a>，其可以直接将yaml转化为json。</p>
<h2 id="基础语法">基础语法</h2>
<ul>
<li><p>YAML对大小写敏感</p></li>
<li><p>YAML用<code>#</code>表示注释，且<strong>只支持单行注释</strong></p></li>
<li><p>用缩进表示层级关系</p>
<ul>
<li><strong>缩进只能使用空格</strong>，不能用TAB字符</li>
<li>缩进的空格数量不做要求，但要求<strong>同一层级的元素左侧必须对齐</strong></li>
</ul></li>
<li><p>一个文件中可以包含多个文件的内容</p>
<ul>
<li><p>用三个破折号<code>"---"</code>表示一份内容的开始</p></li>
<li><p>用三个小数点<code>"..."</code>表示一份内容的结束（非强制）</p>
<p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># 这是第一份内容</span></span><br><span class="line"><span class="string">one:1</span></span><br><span class="line"><span class="comment"># 其他内容</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># 这是第二份内容</span></span><br><span class="line"><span class="string">two:2</span></span><br><span class="line"><span class="comment"># 其他内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一份内容转换结果如下：</span></span><br><span class="line"><span class="comment"># &#x27;one:1&#x27;</span></span><br><span class="line"><span class="comment"># 第二份内容转换结果如下：</span></span><br><span class="line"><span class="comment"># &#x27;two:2&#x27;</span></span><br></pre></td></tr></table></figure></p></li>
</ul></li>
</ul>
<h2 id="数据结构与类型">数据结构与类型</h2>
<h3 id="对象">对象</h3>
<p>用来表示以键值对（key:value）形式出现的数据。</p>
<ul>
<li><p>使用“冒号+空格”来分开键与值，对应JSON中的<code>"key"："value"</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#yaml</span></span><br><span class="line"><span class="string">key:value</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 内容转换结果如下： </span></span><br><span class="line"><span class="comment"># &#x27;key:value&#x27;</span></span><br></pre></td></tr></table></figure></li>
<li><p>支持多层嵌套（<strong>用缩进表示层级关系</strong>）</p>
<p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">key:</span></span><br><span class="line">  <span class="string">child-key1:value1</span></span><br><span class="line">  <span class="string">child-key2:value2</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 内容转换结果如下：  </span></span><br><span class="line"><span class="comment"># &#123; key: &#x27;child-key1:value1 child-key2:value2&#x27; &#125;  </span></span><br></pre></td></tr></table></figure></p></li>
<li><p>支持用<strong>花括号包裹，逗号加空格分隔</strong>的流式风格语法：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">key:&#123;</span> <span class="string">child-key1:value1,</span> <span class="string">child-key2:value2</span> <span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 内容转换结果如下： </span></span><br><span class="line"><span class="comment"># &#x27;key:&#123; child-key1:value1, child-key2:value2 &#125;&#x27;</span></span><br></pre></td></tr></table></figure></li>
<li><p>用<strong>问号声明一个复杂对象</strong>，且允许使用多个词汇（数组）来组成键：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">?</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">keypart1</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">keypart2</span></span><br><span class="line"><span class="string">:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">value1</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">value2</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 内容转换结果如下：</span></span><br><span class="line"><span class="comment"># &#123; &#x27;keypart1,keypart2&#x27;: [ &#x27;value1&#x27;, &#x27;value2&#x27; ] &#125;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="数组">数组</h3>
<ul>
<li><p>一组以<strong>破折号+空格</strong>的区块形式为开头的数据便组成了一个数组：</p>
<p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">values:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">value1</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">value2</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">value3</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 内容转换结果如下：</span></span><br><span class="line"><span class="comment"># &#123; values: [ &#x27;value1&#x27;, &#x27;value2&#x27;, &#x27;value3&#x27; ] &#125;</span></span><br></pre></td></tr></table></figure></p></li>
<li><p>与此同时也支持<strong>用方括号包裹、逗号加空格分隔</strong>的内联格式来表达</p>
<p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">values:[value1,</span> <span class="string">value2,</span> <span class="string">value3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 内容转换结果如下：</span></span><br><span class="line"><span class="comment"># &#x27;values:[value1, value2, value3]&#x27;</span></span><br></pre></td></tr></table></figure></p></li>
<li><p>支持多为数组（用缩进表示层级关系）</p>
<p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">values:</span></span><br><span class="line">  <span class="bullet">-</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">value1</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">value2</span></span><br><span class="line">  <span class="bullet">-</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">value3</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">value4</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 内容转换结果如下：</span></span><br><span class="line"><span class="comment"># &#123; values: [ [ &#x27;value1&#x27;, &#x27;value2&#x27; ], [ &#x27;value3&#x27;, &#x27;value4&#x27; ] ] &#125;</span></span><br></pre></td></tr></table></figure></p></li>
</ul>
<h3 id="标量">标量</h3>
<p>表示YAML中最基本的数据类型</p>
<h3 id="字符串">字符串</h3>
<ul>
<li><p>字符串一般不需要引号包裹，但是如果字符串中使用了反斜杠<code>"\"</code>开头的转义字符就必须使用引号包裹</p>
<p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">strings:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Hello</span> <span class="string">without</span> <span class="string">quote</span> <span class="comment"># 不用引号包裹</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Hello</span></span><br><span class="line">   <span class="string">world</span> <span class="comment">#拆成多行后会自动在中间添加空格</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;Hello with single quotes&#x27;</span> <span class="comment"># 单引号包裹</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;Hello with double quotes&quot;</span> <span class="comment"># 双引号包裹</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;I am fine. \u263A&quot;</span> <span class="comment"># 使用双引号包裹时支持Unicode编码</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;\x0d\x0a is \r\n&quot;</span> <span class="comment"># 使用双引号包裹时还支持Hex编码</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;He said: &quot;Hello!&quot;&#x27;</span> <span class="comment"># 单双引号支持嵌套</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 内容转换结果如下：  </span></span><br><span class="line"><span class="comment"># &#123; strings: </span></span><br><span class="line"><span class="comment">#    [ &#x27;Hello without quote&#x27;,</span></span><br><span class="line"><span class="comment">#      &#x27;Hello world&#x27;,</span></span><br><span class="line"><span class="comment">#      &#x27;Hello with single quotes&#x27;,</span></span><br><span class="line"><span class="comment">#      &#x27;Hello with double quotes&#x27;,</span></span><br><span class="line"><span class="comment">#      &#x27;I am fine. ☺&#x27;,</span></span><br><span class="line"><span class="comment">#      &#x27;\r\n is \r\n&#x27;,</span></span><br><span class="line"><span class="comment">#      &#x27;He said: &quot;Hello!&quot;&#x27; ] &#125;</span></span><br></pre></td></tr></table></figure></p></li>
<li><p>对于多行的文字，YAML提供了两种特殊的语法支持</p></li>
<li><p>保留换行</p>
<ul>
<li><p>使用竖线符<code>"|"</code>来表示该语法，每行的缩进和行尾空白都会被去掉，而额外的缩进会被保留</p>
<p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">lines:</span> <span class="string">|</span></span><br><span class="line"><span class="string">  我是第一行</span></span><br><span class="line"><span class="string">  我是第二行</span></span><br><span class="line"><span class="string">    我是第三行</span></span><br><span class="line"><span class="string">      我是第四行</span></span><br><span class="line"><span class="string">  我是第五行  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="comment"># 内容转换结果如下：  </span></span><br><span class="line"><span class="comment"># &#123; lines: &#x27;我是第一行\n我是第二行\n  我是第三行\n    我是第四行\n我是第五行 \n&#x27; &#125;</span></span><br></pre></td></tr></table></figure></p></li>
</ul></li>
<li><p>折叠换行</p>
<ul>
<li><p>使用右尖括号<code>"&gt;"</code>来表示该语法，只有空白行才会被识别为换行，原来的换行符都会被转换成空格</p>
<p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">lines:</span> <span class="string">&gt;</span></span><br><span class="line"><span class="string">  我是第一行</span></span><br><span class="line"><span class="string">  我也是第一行</span></span><br><span class="line"><span class="string">  我还是第一行</span></span><br><span class="line"><span class="string">  我仍然是第一行</span></span><br><span class="line"><span class="string"></span>  </span><br><span class="line">  <span class="string">我是第二行</span></span><br><span class="line">  <span class="string">我也是第二行</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 内容转换结果如下：  </span></span><br><span class="line"><span class="comment"># &#123; lines: &#x27;我是第一行 我也是第一行 我还是第一行 我仍然是第一行\n我是第二行 我也是第二行\n&#x27; &#125;</span></span><br></pre></td></tr></table></figure></p></li>
</ul></li>
</ul>
<h3 id="布尔值">布尔值</h3>
<ul>
<li><p>"true"、"True"、"TRUE"、"yes"、"Yes"和“YES"皆为<strong>真</strong></p></li>
<li><p>"false"、"False"、"FALSE"、"no"、"No"和“NO"皆为<strong>假</strong></p>
<p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">boolean:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="literal">true</span> <span class="comment"># True、TRUE</span></span><br><span class="line">  <span class="bullet">-</span> <span class="literal">yes</span> <span class="comment"># Yes、YES</span></span><br><span class="line">  <span class="bullet">-</span> <span class="literal">false</span> <span class="comment"># False、FALSE</span></span><br><span class="line">  <span class="bullet">-</span> <span class="literal">no</span> <span class="comment"># No、NO</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 内容转换结果如下：</span></span><br><span class="line"><span class="comment"># &#123; boolean: [ true, &#x27;yes&#x27;, false, &#x27;no&#x27; ] &#125;</span></span><br></pre></td></tr></table></figure></p></li>
</ul>
<h3 id="整数">整数</h3>
<ul>
<li><p>支持二进制表示</p>
<p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">int:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">666</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">0001_0000</span> <span class="comment">#二进制表示</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 内容转换结果如下：</span></span><br><span class="line"><span class="comment"># &#123; int: [ 666, 10000 ] &#125;</span></span><br></pre></td></tr></table></figure></p></li>
</ul>
<h3 id="浮点数">浮点数</h3>
<ul>
<li><p>支持科学计数法</p>
<p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">float:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">3.14</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">6.8523015e+5</span> <span class="comment"># 使用科学计数法</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 内容转换结果如下：</span></span><br><span class="line"><span class="comment"># &#123; float: [ 3.14, 685230.15 ] &#125;</span></span><br></pre></td></tr></table></figure></p></li>
</ul>
<h3 id="空值null">空值（Null）</h3>
<ul>
<li><p>"null"、"Null"和"~"都是空，不指定值默认也是空</p>
<p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">nulls:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="literal">null</span></span><br><span class="line">  <span class="bullet">-</span> <span class="literal">Null</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">~</span></span><br><span class="line">  <span class="bullet">-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 内容转换结果如下：</span></span><br><span class="line"><span class="comment"># &#123; nulls: [ null, null, null, null ] &#125;</span></span><br></pre></td></tr></table></figure></p></li>
</ul>
<h3 id="时间戳">时间戳</h3>
<ul>
<li><p>YAML也支持ISO 8601格式的时间数据</p>
<p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">date1:</span> <span class="number">2020-05-26</span></span><br><span class="line"><span class="attr">date2:</span> <span class="number">2020-05-26T01:00:00+08:00</span></span><br><span class="line"><span class="attr">date3:</span> <span class="number">2020-05-26T02:00:00.10+08:00</span></span><br><span class="line"><span class="attr">date4:</span> <span class="number">2020-05-26 03:00:00.10 +8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 内容转换结果如下：</span></span><br><span class="line"><span class="comment"># &#123; date1: Tue May 26 2020 08:00:00 GMT+0800 (中国标准时间),</span></span><br><span class="line"><span class="comment">#   date2: Tue May 26 2020 01:00:00 GMT+0800 (中国标准时间),</span></span><br><span class="line"><span class="comment">#   date3: Tue May 26 2020 02:00:00 GMT+0800 (中国标准时间),</span></span><br><span class="line"><span class="comment">#   date4: Tue May 26 2020 03:00:00 GMT+0800 (中国标准时间) &#125;</span></span><br></pre></td></tr></table></figure></p></li>
</ul>
<h3 id="类型转换">类型转换</h3>
<ul>
<li><p>YAML支持使用严格类型标签的双感叹号+目标类型形式，即（"<code>!!</code>"）来强制转换类型</p>
<p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">a:</span> <span class="type">!!float</span> <span class="string">&#x27;666&#x27;</span></span><br><span class="line"><span class="attr">b:</span> <span class="string">&#x27;666&#x27;</span></span><br><span class="line"><span class="attr">c:</span> <span class="type">!!str</span> <span class="number">666</span></span><br><span class="line"><span class="attr">d:</span> <span class="type">!!str</span> <span class="number">666.66</span></span><br><span class="line"><span class="attr">e:</span> <span class="type">!!str</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">f:</span> <span class="type">!!str</span> <span class="literal">yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 内容转换结果如下：</span></span><br><span class="line"><span class="comment"># &#123; a: 666, b: &#x27;666&#x27;, c: &#x27;666&#x27;, d: &#x27;666.66&#x27;, e: &#x27;true&#x27;, f: &#x27;yes&#x27; &#125;</span></span><br></pre></td></tr></table></figure></p></li>
</ul>
<h3 id="其他高级类型">其他高级类型</h3>
<p>YAML也可以使用更高级的类型，但不一定兼容所有解析器，包括集合、有序映射、十六进制数据和二进制数据等</p>
<h3 id="数据重用与合并">数据重用与合并</h3>
<ul>
<li><p>为了避免过多重复的定义，YAML提供了由锚点标签<code>"&amp;"</code>和引用标签<code>"*"</code>组成的语法，凭借此可以快速引用一些相同的数据</p>
<p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">a:</span> <span class="string">&amp;anchor</span> <span class="comment">#设置锚点</span></span><br><span class="line">  <span class="attr">one:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">two:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">three:</span> <span class="number">3</span></span><br><span class="line"><span class="attr">b:</span> <span class="string">*anchor</span> <span class="comment">#引用锚点 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 内容转换结果如下：</span></span><br><span class="line"><span class="comment"># &#123; a: &#123; one: 1, two: 2, three: 3 &#125;,</span></span><br><span class="line"><span class="comment">#   b: &#123; one: 1, two: 2, three: 3 &#125; &#125;</span></span><br></pre></td></tr></table></figure></p></li>
<li><p>配合合并标签<code>"&lt;&lt;"</code>使用可以与任意数据进行合并，以此实现类似于C++中继承的功能</p>
<p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">human:</span> <span class="string">&amp;base</span> <span class="comment"># 添加名为base的锚点</span></span><br><span class="line">    <span class="attr">body:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">hair:</span> <span class="number">999</span></span><br><span class="line"><span class="attr">singer:</span></span><br><span class="line">    <span class="string">&lt;&lt;:</span> <span class="string">*base</span> <span class="comment"># 引用base锚点，实例化时会自动展开</span></span><br><span class="line">    <span class="attr">skill:</span> <span class="string">sing</span> <span class="comment"># 添加额外的属性</span></span><br><span class="line"><span class="attr">programer:</span></span><br><span class="line">    <span class="string">&lt;&lt;:</span> <span class="string">*base</span> <span class="comment"># 引用base锚点，实例化时会自动展开</span></span><br><span class="line">    <span class="attr">hair:</span> <span class="number">6</span> <span class="comment"># 复写base中的属性</span></span><br><span class="line">    <span class="attr">skill:</span> <span class="string">code</span> <span class="comment"># 添加额外的属性  </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 内容转换结果如下：</span></span><br><span class="line"><span class="comment"># &#123; human: &#123; body: 1, hair: 999 &#125;,</span></span><br><span class="line"><span class="comment">#   singer: &#123; body: 1, hair: 999, skill: &#x27;sing&#x27; &#125;,</span></span><br><span class="line"><span class="comment">#   programer: &#123; body: 1, hair: 6, skill: &#x27;code&#x27; &#125; &#125;</span></span><br></pre></td></tr></table></figure></p></li>
</ul>
<h1 id="redis">Redis</h1>
<p>Redis是一个用C语言编写的、开源的、基于内存运行并支持持久化的、高性能的NoSQL数据库，具有支持数据持久化、支持多种数据结构、支持数据备份等特点，通常被称为数据结构服务器。</p>
<p>NoSQL数据库泛指非关系型数据库，其去掉了关系数据库的关系型特性，是为了解决大规模数据集合多重数据种类带来的问题而生。</p>
<h2 id="windows安装">Windows安装</h2>
<p>Redis下载地址：<a href="https://github.com/microsoftarchive/redis/releases">点击前往</a></p>
<p>打开上述的下载地址后，可以在网页下方的Assets处看到目前支持的版本，找到最新的版本下载安装即可。</p>
<p>注：msi格式的为Windows的安装文件，双击即可进行安装，而zip包和tar.gz包则需要先解压再安装。</p>
<p>安装好后，需要<strong>着重关注</strong>以下几个文件：</p>
<table>
<thead>
<tr class="header">
<th>文件名</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>redis.windows.conf</td>
<td>Redis 运行的配置文件。</td>
</tr>
<tr class="even">
<td>redis-benchmark.exe</td>
<td>Redis 性能测试的工具。</td>
</tr>
<tr class="odd">
<td>redis-check-aof.exe</td>
<td>Redis 的 aof 文件修复的工具。</td>
</tr>
<tr class="even">
<td>redis-check-dump.exe</td>
<td>Redis 的 rdb 文件修复的工具。</td>
</tr>
<tr class="odd">
<td>redis-cli.exe</td>
<td>Redis 的客户端。</td>
</tr>
<tr class="even">
<td>redis-server.exe</td>
<td>Redis 的服务端。</td>
</tr>
</tbody>
</table>
<ul>
<li></li>
</ul>
<h2 id="redis数据类型">Redis数据类型</h2>
<p>Redis支持五种数据类型：string（字符串）、hash（哈希）、list（列表）、set（集合）及zset（有序集合）。</p>
<h3 id="string类型">String类型</h3>
<p>string是Redis最基本的类型，一个key对应一个value（即键值对）。Redis的string可以包含任何数据，如jpg图片或序列化图像等，其一个键最大可以存储512MB的数据。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#设置website值</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> website tangmenjue.top</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取website值</span></span><br><span class="line">127.0.0.1:6379&gt; get website</span><br><span class="line"><span class="string">&quot;tangmenjue.top&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#删除website值</span></span><br><span class="line">127.0.0.1:6379&gt; del website</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure>
<h3 id="hash类型">Hash类型</h3>
<p>hash是一个键值对集合，其是一个string类型的field和value的映射表，适合用于存储对象，每个hash可以存储 4294967295个键值对。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#设置一个对象webinfo，它的键webname对应的值为tangmenjue，键weburl对应的值为tangmenjue.top，webtype对应的类型为it</span></span><br><span class="line">127.0.0.1:6379&gt; hmset webinfo webname tangmenjue  weburl tangmenjue.top  webtype it</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取webinfo对象中，weburl、webname、webtype的键值</span></span><br><span class="line">127.0.0.1:6379&gt; hmget webinfo weburl webname webtype</span><br><span class="line">1) <span class="string">&quot;tangmenjue.top&quot;</span></span><br><span class="line">2) <span class="string">&quot;tangmenjue&quot;</span></span><br><span class="line">3) <span class="string">&quot;it&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#删除对象webinfo</span></span><br><span class="line">127.0.0.1:6379&gt; del webinfo</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure>
<h3 id="list类型">List类型</h3>
<p>Redis的list类型是简单的字符串列表，按照插入顺序排序，可以添加一个元素到列表的左边或右边。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#向列表tangmenjue.top里添加Redis、Vue 和Pgsql3个元素</span></span><br><span class="line">127.0.0.1:6379&gt; lpush tangmenjue.top Redis Vue Pgsql</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取列表tangmenjue.top的下标从0到3的数据</span></span><br><span class="line">127.0.0.1:6379&gt; lrange tangmenjue.top 0 3</span><br><span class="line">1) <span class="string">&quot;Pgsql&quot;</span></span><br><span class="line">2) <span class="string">&quot;Vue&quot;</span></span><br><span class="line">3) <span class="string">&quot;Redis&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#删除值</span></span><br><span class="line">127.0.0.1:6379&gt; del tangmenjue.top</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure>
<h3 id="set类型">Set类型</h3>
<p>Redis的Set是string类型的无序集合，集合是通过哈希表来实现的，因此添加、删除、查找的复杂度都是O(1)。每个集合中最大可存储4294967295个成员。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#向集合tangmenjue.top添加Redis、Vue 和Pgsql3个元素</span></span><br><span class="line">127.0.0.1:6379&gt; sadd tangmenjue.top Redis Vue Pgsql</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line"></span><br><span class="line"><span class="comment">#继续向集合tangmenjue.top添加元素Sqlserver，此时返回1表示成功</span></span><br><span class="line">127.0.0.1:6379&gt; sadd tangmenjue.top Sqlserver</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"></span><br><span class="line"><span class="comment">#继续向集合tangmenjue.top添加元素Redis，此时返回0表示失败。因为集合中已有Redis，不可重复插入</span></span><br><span class="line">127.0.0.1:6379&gt; sadd tangmenjue.top Redis</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取集合tangmenjue.top的所有元素</span></span><br><span class="line">127.0.0.1:6379&gt; smembers tangmenjue.top</span><br><span class="line">1) <span class="string">&quot;Pgsql&quot;</span></span><br><span class="line">2) <span class="string">&quot;Sqlserver&quot;</span></span><br><span class="line">3) <span class="string">&quot;Vue&quot;</span></span><br><span class="line">4) <span class="string">&quot;Redis&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#删除集合tangmenjue.top</span></span><br><span class="line">127.0.0.1:6379&gt; del tangmenjue.top</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure>
<h3 id="zset类型">ZSet类型</h3>
<p>zset和set一样也是string类型元素的集合且不允许成员重复。</p>
<p>与set不同的是，每个元素都会关联一个double类型的分数，通过这个分数来为集合中的成员按从大到小进行排序。zset成员是唯一的，但分数（score）是可以重复的。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#向有序集合tangmenjue.top添加分数为0的Redis值</span></span><br><span class="line">127.0.0.1:6379&gt; zadd tangmenjue.top 0 Redis</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"></span><br><span class="line"><span class="comment">#向有序集合tangmenjue.top添加分数为1的Vue值</span></span><br><span class="line">127.0.0.1:6379&gt; zadd tangmenjue.top 1 Vue</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"></span><br><span class="line"><span class="comment">#向有序集合tangmenjue.top添加分数为2的Pgsql值和分数为3的Sqlserver值</span></span><br><span class="line">127.0.0.1:6379&gt; zadd tangmenjue.top 2 Pgsql 3 Sqlserver</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取有序集合tangmenjue.top的所有数据，并打印出分数</span></span><br><span class="line">127.0.0.1:6379&gt; zrange tangmenjue.top 0 -1 withscores</span><br><span class="line">1) <span class="string">&quot;Redis&quot;</span></span><br><span class="line">2) <span class="string">&quot;0&quot;</span></span><br><span class="line">3) <span class="string">&quot;Vue&quot;</span></span><br><span class="line">4) <span class="string">&quot;1&quot;</span></span><br><span class="line">5) <span class="string">&quot;Pgsql&quot;</span></span><br><span class="line">6) <span class="string">&quot;2&quot;</span></span><br><span class="line">7) <span class="string">&quot;Sqlserver&quot;</span></span><br><span class="line">8) <span class="string">&quot;3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#删除有序集合tangmenjue.top</span></span><br><span class="line">127.0.0.1:6379&gt; del tangmenjue.top</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure>
<h2 id="连接本地redis">连接本地Redis</h2>
<p>进入到Redis所在目录，在地址栏输入cmd，此时会在当前目录打开命令行窗口，如下图所示：</p>
<p><img src="/2022/12/16/YAML%E4%B8%8ERedis%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%94%A8/1.png"></p>
<ul>
<li><p>在命令行中输入以下命令后回车，启动redis server客户端:</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">E:\Redis&gt;redis-server.exe</span><br><span class="line">[4524] 16 Dec 11:48:29.399 <span class="comment"># oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span></span><br><span class="line">[4524] 16 Dec 11:48:29.399 <span class="comment"># Redis version=5.0.14.1, bits=64, commit=ec77f72d, modified=0, pid=4524, just started</span></span><br><span class="line">[4524] 16 Dec 11:48:29.399 <span class="comment"># Configuration loaded</span></span><br><span class="line">[4524] 16 Dec 11:48:29.401 <span class="comment"># Could not create server TCP listening socket 127.0.0.1:6379: bind: 操作成功完成。</span></span><br></pre></td></tr></table></figure></p>
<p>此时可以看到redis server的运行信息，说明redis server运行成功。</p></li>
<li><p>接下来不要关闭这个Redis server，重新在地址栏输入聪明的，打开一个新的命令行。在命令行中输入以下命令后回车，启动redis client端：</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PS E:\Redis&gt; redis-cli.exe</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure></p>
<p>看到127.0.0.1:6379则表明此时已经成功连接上了本地Redis服务器。</p></li>
<li><p>在redis client端的cmd上输入以下命令后回车,以此来测试redis-cli客户端是否能连接上redis服务器：</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ping</span><br><span class="line">PONG</span><br><span class="line"></span><br><span class="line"><span class="comment">#当看到输出PONG时则表示连接成功</span></span><br></pre></td></tr></table></figure></p></li>
</ul>
<p><strong>注意：</strong>若是启动redis server客户端时出现以下错误：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">E:\Redis&gt;redis-server.exe</span><br><span class="line">[7976] 16 Dec 11:41:31.720 <span class="comment"># oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span></span><br><span class="line">[7976] 16 Dec 11:41:31.720 <span class="comment"># Redis version=5.0.14.1, bits=64, commit=ec77f72d, modified=0, pid=7976, just started</span></span><br><span class="line">[7976] 16 Dec 11:41:31.721 <span class="comment"># Warning: no config file specified, using the default config. In order to specify a config file use redis-server.exe /path/to/redis.conf</span></span><br><span class="line">[7976] 16 Dec 11:41:31.724 <span class="comment"># Could not create server TCP listening socket *:6379: bind: 在一个非套接字上尝试了一个操作。</span></span><br></pre></td></tr></table></figure>
<p>出现这一错误则则可以将启动命令改为如下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">E:\Redis&gt;redis-server.exe redis.windows.conf</span><br></pre></td></tr></table></figure>
<h2 id="连接远程redis">连接远程Redis</h2>
<p>在Redis根目录下打开cmd，使用redis-cli客户端，连接远程redis服务的语法为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-cli -h host -p port -a password</span><br><span class="line"><span class="comment">#其中：host为服务器所在的ip地址</span></span><br><span class="line"><span class="comment">#port为Redis服务的监听端口</span></span><br><span class="line"><span class="comment">#password为Redis服务的密码，若没有开启认证则不需要这一参数</span></span><br></pre></td></tr></table></figure>
<h2 id="redis配置">Redis配置</h2>
<p>使用redis-cli客户端连接上redis服务器后，可以使用config命令来查看或设置redis的配置，也可以直接修改安装目录下的redis.windows.conf文件来修改配置。</p>
<p>config相关命令如下：</p>
<ul>
<li><code>config get key</code>：获取配置项为key的配置，配置项不存在时返回<code>(empty list or set)</code></li>
<li><code>config get *</code>：获取所有配置</li>
<li><code>config set key "value"</code>：设置配置项key的值为value</li>
</ul>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>YAML</category>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>YAML</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/01/09/hello-world/</url>
    <content><![CDATA[<h1 id="hello-world">Hello World</h1>
<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="quick-start">Quick Start</h2>
<h3 id="create-a-new-post">Create a new post</h3>
<p>$ hexo new "My New Post"</p>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="run-server">Run server</h3>
<p>$ hexo server</p>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="generate-static-files">Generate static files</h3>
<p>$ hexo generate</p>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="deploy-to-remote-sites">Deploy to remote sites</h3>
<p>$ hexo deploy</p>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>python学习笔记（一）</title>
    <url>/2022/10/08/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="基本语句">基本语句</h1>
<p>输入：<code>input()</code> 输出：<code>print()</code></p>
<p>注释：<code>#</code></p>
<p>字符串类型：<code>str</code></p>
<p>空值用None表示多行输入：<code>'''...'''</code></p>
<p>内部字符默认不转义：<code>r'''...'''</code></p>
<p>获取字符的整数表示：<code>ord()</code></p>
<p>将字符编码转化为字符：<code>chr()</code></p>
<p>bytes类型用带b前缀的单引号或双引号表示：<code>b'字符'</code></p>
<p>将str类型数据转为指定的bytesr类型数据：<code>'字符'.encode('原编码类型')</code></p>
<p>示例语句如下：</p>
<p><code>print('a'.encode('ascii'))</code></p>
<p>注意：python是4个空格缩进的，区分大小写。</p>
<p>含有中文的str类型无法用ASCII编码，在bytes中无法显示ASCII字符的字节，会以##代替显示</p>
<p>将bytesr类型数据转为str类型数据：<code>b'字符'.decode('str的编码类型')</code></p>
<p>示例语句如下：</p>
<p><code>print(b'a'.decode('ascii'))</code></p>
<p>注意：若bytes中只有一小部分无效的字节，可用<code>errors='ignore'</code>语句忽略错误的字节。</p>
<p>计算str的字符数：<code>len()</code></p>
<p>将源代码按UTF-8编码保存：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br></pre></td></tr></table></figure>
<p>申明UTF-8编码外，必须还要确保文本编辑器正在使用<code>UTF-8 without BOM</code>编码</p>
<h1 id="格式化字符串的三种方法">格式化字符串的三种方法</h1>
<h2 id="占位符格式化字符串">占位符格式化字符串：</h2>
<p>输出整形数据的语句：<code>print('%d' % 123)</code></p>
<p>输出小数点后2位数的语句：<code>print('%.2f' % 3.1415926)</code></p>
<h2 id="format格式化字符串">format()格式化字符串</h2>
<p>例子如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;&#x27;&#123;0&#125;在考试中提升了&#123;1:.2f&#125;%,</span></span><br><span class="line"><span class="string">&#123;2&#125;在考试中提升了&#123;3:.2f&#125;%&#x27;&#x27;&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;张三&#x27;</span>,<span class="number">2.354</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="number">0.458</span>))</span><br></pre></td></tr></table></figure>
<h2 id="用f-string格式化字符串">用f-string格式化字符串</h2>
<p>例子如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="string">&#x27;张三&#x27;</span></span><br><span class="line">b=<span class="number">2.354</span></span><br><span class="line">c=<span class="string">&#x27;李四&#x27;</span></span><br><span class="line">d=<span class="number">0.458</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;&#x27;&#x27;<span class="subst">&#123;a&#125;</span>在考试中提升了<span class="subst">&#123;b:<span class="number">.2</span>f&#125;</span>%,</span></span><br><span class="line"><span class="string"><span class="subst">&#123;c&#125;</span>在考试中提升了<span class="subst">&#123;d:<span class="number">.2</span>f&#125;</span>%&#x27;&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="练习题">练习题</h2>
<p>小明的成绩从去年的72分提升到了今年的85分，请计算小明成绩提升的百分点，并用字符串格式化显示出<code>xx.x%</code>，只保留小数点后1位：</p>
<p>代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding utf-8 -*-</span></span><br><span class="line">s1=<span class="number">72</span></span><br><span class="line">s2=<span class="number">85</span></span><br><span class="line">r=(s2-s1)/s1*<span class="number">100</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%.1f%%&#x27;</span>%r)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;0:0.1f&#125;%&#x27;</span>.<span class="built_in">format</span>(r))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;r:<span class="number">0.1</span>f&#125;</span>%&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h1 id="列表list和元组tuple">列表list和元组tuple</h1>
<h2 id="列表list">列表list</h2>
<p>list是一种有序的集合，<strong>可随时增减其中的元素</strong>。</p>
<p>形式如同 <code>name=['Zhangsan','Lisi','Wangwu']</code>，指的是定义一个name列表，name为该列表的名称，与C语言中的数组相似，其区别在于<strong>list中的元素数据类型可以不同</strong>，元素可以是另一个list。</p>
<p>定义一个空列表，其列表名称为name：<code>name()</code></p>
<p><strong>获取列表中元素的个数</strong></p>
<p>如获取name列表元素的个数：<code>len(name)</code></p>
<p><strong>使用索引获取列表中的最后一个元素</strong></p>
<p>如获取name列表中的最后一个元素：<code>name[-1]</code></p>
<p><strong>在列表末尾增加元素</strong></p>
<p>如在name列表末尾追加元素Bob：<code>name.append('Bob')</code></p>
<p><strong>将元素插入到列表中的指定位置</strong></p>
<p>如将元素Jack插入到name列表指定的位置，如索引号为1的位置：<code>name.insert(1,Jack)</code></p>
<p><strong>删除列表末尾的元素</strong></p>
<p>如删除name列表末尾的元素：<code>name.pop()</code></p>
<p><strong>删除列表指定位置的元素</strong></p>
<p>如删除name列表中索引号为1的元素：<code>name.pop(1)</code></p>
<p><strong>替换列表中指定位置的元素</strong></p>
<p>如将name列表中索引号为1的元素换成Xiaoming：<code>name[1]='Xiaoming'</code></p>
<p>列表中的元素包含另一个list时，若想要<strong>取内嵌list元素的值</strong>，可将list看做二维数组来进行取值，如下面取s列表中php的值，可写成：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s=[<span class="string">&#x27;python&#x27;</span>,<span class="string">&#x27;java&#x27;</span>,[<span class="string">&#x27;asp&#x27;</span>, <span class="string">&#x27;php&#x27;</span>],<span class="string">&#x27;scheme&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">2</span>][<span class="number">1</span>])</span><br></pre></td></tr></table></figure>
<h2 id="元组tuple">元组tuple</h2>
<p>tuple是一种有序的列表，<strong>元组一旦初始化就不能修改</strong>，tuple一旦被定义，其元素就必须要确定下来。</p>
<p>形式如同<code>name=（'Zhangsan','Lisi','Wangwu')</code>，指的是定义一个name元组，name为该元组的名称，与list类似，但tuple没有append()、insert()这类的方法，获取元素的方法与list相同，但不能给元素赋值。</p>
<p><strong>定义空的tuple</strong></p>
<p>如定义空元组name：<code>name=()</code></p>
<p><strong>定义只有1个元素的tuple</strong></p>
<p>如定义只有1个元素的元组name：<code>name=(1,)</code></p>
<p><strong>注意</strong>：将只有1个元素的tuple若误写成name=(1)，<strong>该语句定义的不是元组tuple类型</strong>，其实际是指1经过数学小括号运算后，将结果赋给name。</p>
<p>当元组的元素中含有列表时，可以<strong>改变元组中的列表元素</strong>，此时元组是“可变的”，但其本质上元组没变，改变的是列表。如下列代码改变的是列表中元素的值：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name=(<span class="string">&#x27;Zhangsan&#x27;</span>,<span class="string">&#x27;Lisi&#x27;</span>,[<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>])</span><br><span class="line">name[<span class="number">2</span>][<span class="number">0</span>]=<span class="string">&#x27;X&#x27;</span></span><br><span class="line">name[<span class="number">2</span>][<span class="number">1</span>]=<span class="string">&#x27;Y&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(name)</span><br></pre></td></tr></table></figure>
<p>此时元组name中的元素变成了<code>('Zhangsan', 'Lisi', ['X', 'Y'])</code>，<strong>改变的仅是列表中的元素</strong>。</p>
<h2 id="练习题-1">练习题</h2>
<p>请用索引取出下面list的指定元素：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">L = [</span><br><span class="line">    [<span class="string">&#x27;Apple&#x27;</span>, <span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Microsoft&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;Java&#x27;</span>, <span class="string">&#x27;Python&#x27;</span>, <span class="string">&#x27;Ruby&#x27;</span>, <span class="string">&#x27;PHP&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;Adam&#x27;</span>, <span class="string">&#x27;Bart&#x27;</span>, <span class="string">&#x27;Lisa&#x27;</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>代码如下： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打印Apple:</span></span><br><span class="line"><span class="built_in">print</span>(L[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line"><span class="comment"># 打印Python:</span></span><br><span class="line"><span class="built_in">print</span>(L[<span class="number">1</span>][<span class="number">1</span>])</span><br><span class="line"><span class="comment"># 打印Lisa:</span></span><br><span class="line"><span class="built_in">print</span>(L[<span class="number">2</span>][<span class="number">2</span>])</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python学习笔记（七）</title>
    <url>/2022/10/11/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%83%EF%BC%89/</url>
    <content><![CDATA[<h1 id="面向对象编程">面向对象编程</h1>
<h2 id="获取对象信息">获取对象信息</h2>
<h3 id="使用type">使用<code>type()</code></h3>
<p><strong>判断对象类型</strong>：<code>type(对象)</code></p>
<p>用<code>type()</code>来<strong>判断对象是否是函数</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> types</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fn</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(fn)==types.FunctionType)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">abs</span>)==types.BuiltinFunctionType)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="keyword">lambda</span> z:z)==types.LambdaType)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>((x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)))==types.GeneratorType)</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>
<h3 id="使用isinstance">使用<code>isinstance()</code></h3>
<p><strong>判断class的类型</strong>：<code>isinstance(变量名,对象名)</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,num=<span class="number">0</span>,sex=<span class="string">&#x27;m&#x27;</span></span>):</span><br><span class="line">        self.num=num</span><br><span class="line">        self.sex=sex</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getnum</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.num</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">Person</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setnum</span>(<span class="params">self,num</span>):</span><br><span class="line">        self.num=num</span><br><span class="line">a=Person()</span><br><span class="line">b=Student()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(a,Person))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(b,Person))<span class="comment">#b继承了a，所以b也是Person类型</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(a,Student))<span class="comment">#a不是Student类型</span></span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure>
<p><code>isinstance</code>也可以用来判断基本类型，形式为：<code>isinstance(判断的对象,类型名)</code></p>
<p><code>isinstance</code>还可以判断一个变量是否是某些类型的一种，例如判断是否是list或tuple：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],<span class="built_in">tuple</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>((<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>),<span class="built_in">tuple</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],(<span class="built_in">list</span>,<span class="built_in">tuple</span>)))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>((<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>),(<span class="built_in">list</span>,<span class="built_in">tuple</span>)))</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>
<p>因此优先使用isinstance()判断类型，可以将指定类型及其子类”一网打尽“。</p>
<h3 id="使用dir">使用<code>dir()</code></h3>
<p>只有在不知道对象信息时，才会用以下函数去获取对象信息。</p>
<p>获得一个对象的所有属性和方法：<code>dir()</code>，其返回一个包含字符串的list。例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">dir</span>(<span class="number">123</span>))</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">[<span class="string">&#x27;__abs__&#x27;</span>, <span class="string">&#x27;__add__&#x27;</span>, <span class="string">&#x27;__and__&#x27;</span>,..., <span class="string">&#x27;real&#x27;</span>, <span class="string">&#x27;to_bytes&#x27;</span>]</span><br></pre></td></tr></table></figure>
<p><code>__xxx__</code>为有特殊用途的属性和方法，其他的为普通属性和方法。</p>
<p><strong>判断对象是否有某属性或方法：</strong><code>hasattr(指向对象的变量名,属性或方法)</code></p>
<p><strong>设置对象的属性值：</strong><code>setattr(指向对象的变量名,属性,属性值)</code></p>
<p><strong>获取对象的属性或方法：</strong><code>getattr(指向对象的变量名,属性或方法)</code></p>
<h2 id="实例属性和类属性">实例属性和类属性</h2>
<p>通过实例变量或<code>self</code>变量给实例绑定的属性是实例属性，归当前实例所有。</p>
<p>直接在class中定义的属性是<strong>类属性</strong>，归类所有，但类的所有属性都可以访问，用<code>类名.属性名</code>调用。</p>
<p>两者的形式区别如下所示：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    num=<span class="string">&#x27;123&#x27;</span><span class="comment">#类属性</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,sex</span>):</span><br><span class="line">        self.sex=sex<span class="comment">#实例属性</span></span><br></pre></td></tr></table></figure>
<h3 id="练习题">练习题</h3>
<p>为了统计学生人数，可以给Student类增加一个类属性，每创建一个实例，该属性自动增加：</p>
<p>代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        Student.count=Student.count+<span class="number">1</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 测试:</span></span><br><span class="line"><span class="keyword">if</span> Student.count != <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;测试失败!&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    bart = Student(<span class="string">&#x27;Bart&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> Student.count != <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;测试失败!&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        lisa = Student(<span class="string">&#x27;Bart&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> Student.count != <span class="number">2</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;测试失败!&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Students:&#x27;</span>, Student.count)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;测试通过!&#x27;</span>)</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">Students: <span class="number">2</span></span><br><span class="line">测试通过!</span><br></pre></td></tr></table></figure>
<h1 id="面向对象高级编程">面向对象高级编程</h1>
<h2 id="使用__slots__">使用<code>__slots__</code></h2>
<p>定义一个特殊的变量来限制对实例添加属性：<code>__slots__</code>。</p>
<p>例如，只允许对Student实例添加<code>name</code>和<code>age</code>属性：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    __slots__=(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;age&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p><code>__slots__</code>定义的属性仅对当前类实例起作用，对继承的<strong>子类不起作用</strong>。</p>
<h2 id="使用property">使用@property</h2>
<p><strong>把一个方法变成属性调用：</strong>@property</p>
<p>如把一个getter方法变成属性，只需要加上<code>@property</code>就可以了。与此同时，<code>@property</code>本身又创建了另一个<code>@实例名.setter</code>，负责把一个setter方法变成属性赋值：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"><span class="meta">    @property    </span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">score</span>(<span class="params">self</span>): </span><br><span class="line">        <span class="keyword">return</span> self.score</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @score.setter    </span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">score</span>(<span class="params">self,value</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(value, <span class="built_in">int</span>):</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;score must be an integer!&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> value&gt;<span class="number">100</span>  <span class="keyword">or</span> value&lt;<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;score must between 0~100!&#x27;</span>) </span><br><span class="line">        self.score=value    </span><br><span class="line">s=Student()</span><br><span class="line">s.score=<span class="number">299</span></span><br><span class="line"><span class="built_in">print</span>(s.score)</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;main.py&quot;</span>, line <span class="number">14</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    s.score=<span class="number">299</span></span><br><span class="line">  File <span class="string">&quot;main.py&quot;</span>, line <span class="number">11</span>, <span class="keyword">in</span> score</span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">&#x27;score must between 0~100!&#x27;</span>) </span><br><span class="line">ValueError: score must between <span class="number">0</span>~<span class="number">100</span>!</span><br></pre></td></tr></table></figure>
<p><code>@property</code>还可以<strong>定义只读属性</strong>。只定义getter方法，不定义setter方法便是一个只读属性，如下面的score属性便是只读属性：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"><span class="meta">    @property    </span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">score</span>(<span class="params">self</span>): </span><br><span class="line">        <span class="keyword">return</span> self.name</span><br></pre></td></tr></table></figure>
<p><strong>注意:</strong>属性的<strong>方法名不要与实例变量重名</strong>。在调用方法时会首先转换为方法调用，而在return语句时，又看作访问类的属性，于是又转换为方法调用，从而导致栈溢出报错。</p>
<h3 id="练习题-1">练习题</h3>
<p>请利用<code>@property</code>给一个<code>Screen</code>对象加上<code>width</code>和<code>height</code>属性，以及一个只读属性<code>resolution</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Screen</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">width</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self._width</span><br><span class="line"><span class="meta">    @width.setter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">width</span>(<span class="params">self,value</span>):</span><br><span class="line">        self._width=value</span><br><span class="line">        </span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">height</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self._height  </span><br><span class="line"><span class="meta">    @height.setter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">height</span>(<span class="params">self,value</span>):</span><br><span class="line">        self._height=value   </span><br><span class="line">    </span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">resolution</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self._height*self._width     </span><br><span class="line"><span class="comment"># 测试:</span></span><br><span class="line">s = Screen()</span><br><span class="line">s.width = <span class="number">1024</span></span><br><span class="line">s.height = <span class="number">768</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;resolution =&#x27;</span>, s.resolution)</span><br><span class="line"><span class="keyword">if</span> s.resolution == <span class="number">786432</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;测试通过!&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;测试失败!&#x27;</span>)</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">resolution = <span class="number">786432</span></span><br><span class="line">测试通过!</span><br></pre></td></tr></table></figure>
<h2 id="多重继承">多重继承</h2>
<p>多重继承形式：<code>class 类名(基类1,基类2):</code></p>
<p>在设计类的继承关系时，子类除了继承基类1外，再同时继承基类2，这种设计称之为Mixln。Mixln可以给一个类增加多个功能。只允许单一继承的语言（如java），不能使用Mixln的设计。</p>
<h2 id="定制类">定制类</h2>
<p>pytho的class中有很多类似于<code>__slots__</code>和<code>__len__</code>的函数，可以帮助定制我们类。下面是最常用的几个定制方法：</p>
<p><strong>返回一个给用户看的字符串：</strong><code>__str__(self)</code></p>
<p><strong>返回一个程序开发者看的字符串</strong>：<code>__repr__(self)</code>，其是为调试服务的。</p>
<p><strong>返回一个迭代对象：</strong><code>__iter__(self)</code>，可以作用于for循环</p>
<p><strong>返回一个迭代对象：</strong><code>__getitem__(self,n)</code>,可以作用于list。其传入的参数可能是一个<code>int</code>，也可能是一个切片对象<code>slice</code>。</p>
<p><strong>动态返回一个属性：</strong><code>__getattr__(self,属性名)</code>，只有在没有找到属性的情况下才调用。</p>
<p><strong>直接调用实例：</strong><code>__call__(self)</code></p>
<p><strong>判断一个对象是否是可调用对象：</strong><code>callable(对象)</code></p>
<h2 id="使用枚举类">使用枚举类</h2>
<p>定义一个class类型，其每一个常量都是class的一个唯一实例，枚举类（<code>Enum</code>类）便可以实现这个功能。<code>Enum</code>可以把一组相关常量定义在一个class中，且class不可变，其成员可以直接比较。</p>
<p>如下代码所示，可以直接使用<code>Month.Jan.value</code>来引用一个常量，或者枚举它是所有成员。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum</span><br><span class="line">Month = Enum(<span class="string">&#x27;Month&#x27;</span>, (<span class="string">&#x27;Jan&#x27;</span>, <span class="string">&#x27;Feb&#x27;</span>, <span class="string">&#x27;Mar&#x27;</span>, <span class="string">&#x27;Apr&#x27;</span>, <span class="string">&#x27;May&#x27;</span>, <span class="string">&#x27;Jun&#x27;</span>, <span class="string">&#x27;Jul&#x27;</span>, <span class="string">&#x27;Aug&#x27;</span>, <span class="string">&#x27;Sep&#x27;</span>, <span class="string">&#x27;Oct&#x27;</span>, <span class="string">&#x27;Nov&#x27;</span>, <span class="string">&#x27;Dec&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(Month.Jan.value)<span class="comment">#</span></span><br><span class="line"><span class="keyword">for</span> name,member <span class="keyword">in</span> Month.__members__.items():</span><br><span class="line">    <span class="built_in">print</span>(name,<span class="string">&#x27;=&gt;&#x27;</span>,member,<span class="string">&#x27;,&#x27;</span>,member.value)</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">Jan =&gt; Month.Jan , <span class="number">1</span></span><br><span class="line">Feb =&gt; Month.Feb , <span class="number">2</span></span><br><span class="line">Mar =&gt; Month.Mar , <span class="number">3</span></span><br><span class="line">Apr =&gt; Month.Apr , <span class="number">4</span></span><br><span class="line">May =&gt; Month.May , <span class="number">5</span></span><br><span class="line">Jun =&gt; Month.Jun , <span class="number">6</span></span><br><span class="line">Jul =&gt; Month.Jul , <span class="number">7</span></span><br><span class="line">Aug =&gt; Month.Aug , <span class="number">8</span></span><br><span class="line">Sep =&gt; Month.Sep , <span class="number">9</span></span><br><span class="line">Oct =&gt; Month.Oct , <span class="number">10</span></span><br><span class="line">Nov =&gt; Month.Nov , <span class="number">11</span></span><br><span class="line">Dec =&gt; Month.Dec , <span class="number">12</span></span><br></pre></td></tr></table></figure>
<p><code>value</code>属性是自动赋给成员的<code>int</code>常量，<strong>默认从1开始计数</strong>。</p>
<h3 id="练习题-2">练习题</h3>
<p>把<code>Student</code>的<code>gender</code>属性改造为枚举类型，可以避免使用字符串：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum, unique</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Gender</span>(<span class="title class_ inherited__">Enum</span>):</span><br><span class="line">    Male=Enum(<span class="string">&#x27;Male&#x27;</span>,(<span class="string">&#x27;Male&#x27;</span>,<span class="string">&#x27;Female&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, gender</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.gender = gender</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 测试:</span></span><br><span class="line">bart = Student(<span class="string">&#x27;Bart&#x27;</span>, Gender.Male)</span><br><span class="line"><span class="keyword">if</span> bart.gender == Gender.Male:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;测试通过!&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;测试失败!&#x27;</span>)</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">测试通过!</span><br></pre></td></tr></table></figure>
<h2 id="使用元类">使用元类</h2>
<h3 id="type">type()</h3>
<p>查看一个类型或变量的类型:<code>type(类名,(基类1,基类2,...)</code>，通过<code>type()</code>函数创建出的类，可将函数绑定到方法上。</p>
<p>例如通过<code>type()</code>函数创建出<code>Hello</code>类：<code>Hello=type('Hello',(object,),dict(hello=fn))</code>，把<code>fn</code>函数绑定到方法名<code>hello</code>上。</p>
<h2 id="metaclass">metaclass</h2>
<p>正常创建实例的步骤是先定义类，然后根据这个类创建实例。若想先创建出类，可以通过元类(metaclass)创建，即先定义metaclass，然后创建类，最后创建实例。在编写ORM框架时，所有的类只能动态定义，此时才会用metaclass来修改类</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python学习笔记（三）</title>
    <url>/2022/10/09/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[<h1 id="函数">函数</h1>
<h2 id="python内置函数">python内置函数</h2>
<p>绝对值：<code>abs()</code></p>
<p>平方根：<code>sqrt()</code></p>
<p>平方：<code>power()</code></p>
<p>将整数转换为‘0x’前缀的十六进制字符串：<code>hex()</code></p>
<p>将整数转换为‘0o’前缀的八进制字符串：<code>oct()</code></p>
<p>数据类型转换函数：<code>int()</code>、<code>float()</code>、<code>str()</code>、<code>bool()</code></p>
<p>导包：<code>import 包名</code></p>
<h3 id="练习题">练习题</h3>
<p>请利用Python内置的<code>hex()</code>函数把一个整数转换成十六进制表示的字符串：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">n1 = <span class="number">255</span></span><br><span class="line">n2 = <span class="number">1000</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(<span class="built_in">hex</span>(n1)))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(<span class="built_in">hex</span>(n2)))</span><br></pre></td></tr></table></figure>
<h2 id="定义函数">定义函数</h2>
<p><strong>用<code>def</code>语句定义函数</strong></p>
<p>如自定义一个abs函数并检验函数功能，其代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my_abs</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">if</span> x&gt;=<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> -x</span><br><span class="line">x=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="built_in">print</span>(my_abs(x))</span><br></pre></td></tr></table></figure>
<p>在python交互环境中定义函数时，python会出现<code>...</code>的提示，函数定义结束后需要按两次回车使其重新回到<code>&gt;&gt;&gt;</code>提示符下，如下图所示：</p>
<p><img src="/2022/10/09/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/1.png"></p>
<h2 id="空函数">空函数</h2>
<p>定义一个空函数，用<code>pass</code>语句来作为占位符。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my_max</span>():</span><br><span class="line">	<span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<h2 id="参数检查">参数检查</h2>
<p>如果要函数参数传入类型不对时需要抛出参数错误的信息，可用内置函数<code>isinstance()</code>检查参数，如<code>if not isinstance(x,(int,float))</code>语句，若传入了整数与浮点数之外的参数类型，函数就会抛出一个错误来提醒传参不对。</p>
<h2 id="函数返回">函数返回</h2>
<p>函数体内部用<code>return</code>返回函数结果</p>
<p>函数执行完毕也没有<code>return</code>语句时，自动<code>return None</code>。</p>
<p>函数的<code>return</code>可以<strong>返回多个值</strong>，值之间用<strong>半角逗号</strong>隔开，如<code>return a,b</code></p>
<p>注意python返回值实际上是返回一个tuple，并非是返回两个值，比如以下代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">move</span>(<span class="params">x,y</span>):</span><br><span class="line">    <span class="keyword">return</span> x+<span class="number">50</span>,y+<span class="number">20</span></span><br><span class="line">x=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">y=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">t=move(x,y)</span><br><span class="line"><span class="built_in">print</span>(t)、</span><br><span class="line"><span class="comment">#运行结果如下</span></span><br><span class="line"><span class="number">50</span></span><br><span class="line"><span class="number">100</span></span><br><span class="line">(<span class="number">100</span>, <span class="number">120</span>)</span><br></pre></td></tr></table></figure>
<h3 id="练习题-1">练习题</h3>
<p>请定义一个函数<code>quadratic(a, b, c)</code>，接收3个参数，返回一元二次方程 <span class="math display">\[
ax^2+bx+c=0
\]</span> 的两个解。</p>
<p>提示：</p>
<p>计算平方根可以调用<code>math.sqrt()</code>函数：</p>
<p>代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">quadratic</span>(<span class="params">a,b,c</span>):</span><br><span class="line">    t=math.sqrt(<span class="built_in">float</span>(b*b-<span class="number">4</span>*a*c))</span><br><span class="line">    p=(-b+t)/(<span class="number">2</span>*a)</span><br><span class="line">    q=(-b-t)/(<span class="number">2</span>*a)</span><br><span class="line">    <span class="keyword">return</span> p,q</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;quadratic(2, 3, 1) =&#x27;</span>, quadratic(<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;quadratic(1, 3, -4) =&#x27;</span>, quadratic(<span class="number">1</span>, <span class="number">3</span>, -<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> quadratic(<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>) != (-<span class="number">0.5</span>, -<span class="number">1.0</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;测试失败&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> quadratic(<span class="number">1</span>, <span class="number">3</span>, -<span class="number">4</span>) != (<span class="number">1.0</span>, -<span class="number">4.0</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;测试失败&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;测试成功&#x27;</span>)</span><br><span class="line"><span class="comment">#运行结果如下  </span></span><br><span class="line">quadratic(<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>) = (-<span class="number">0.5</span>, -<span class="number">1.0</span>)</span><br><span class="line">quadratic(<span class="number">1</span>, <span class="number">3</span>, -<span class="number">4</span>) = (<span class="number">1.0</span>, -<span class="number">4.0</span>)</span><br><span class="line">测试成功</span><br></pre></td></tr></table></figure>
<h2 id="默认参数">默认参数</h2>
<p>自定义函数可以设置默认参数。如次方函数可以设为默认平方，需要计算其他次方的时候再传次方的参数。代码如下所示：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my_power</span>(<span class="params">x,n=<span class="number">2</span></span>):</span><br><span class="line">    t=<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span>(n&gt;<span class="number">0</span>):</span><br><span class="line">       n=n-<span class="number">1</span></span><br><span class="line">       t=x*t</span><br><span class="line">    <span class="keyword">return</span> t</span><br><span class="line">x=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="built_in">print</span>(my_power(x))</span><br><span class="line"><span class="built_in">print</span>(my_power(x,n))</span><br><span class="line"><span class="comment">#运行结果如下</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">81</span></span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong></p>
<ul>
<li>设置默认参数时。必选参数在前，<strong>默认参数在后</strong></li>
<li>当函数有多个参数时，变化大的参数放前面，变化小的参数可以作为默认参数</li>
<li>默认参数必须指向<strong>不变对象</strong></li>
</ul>
<h2 id="可变参数">可变参数</h2>
<p>传入的参数个数是可变的称为可变参数，形式为<code>*参数名</code>。</p>
<p>可变参数允许传入<strong>0个或任意个参数</strong>，这些参数在函数调用时自动组装为一个<strong>tuple</strong>。</p>
<p>在参数个数不确定时，定义可变参数和定义一个list和tuple参数相比，区别在于仅在参数前加了个<code>*</code>号，而在函数内部，参数接收到的是一个tuple，函数代码是完全不用变的。此时调用函数时可传入任意个参数<code>calc(1,2)</code>也可以传入0个参数<code>clac()</code>。</p>
<p>将list或tuple元素变成可变参数传进函数中，可写成：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">nums=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">calc(*nums)</span><br></pre></td></tr></table></figure>
<h2 id="关键字参数">关键字参数</h2>
<p>关键字参数允许传入<strong>0个或任意个含参数名</strong>的参数，这些参数在函数内部自动组装为一个<strong>dict</strong>,形式为<code>**参数名</code>。</p>
<p>关键字参数可以拓展函数的功能，如下所示：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">person</span>(<span class="params">name,age,**kw</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;name:&#x27;</span>,name,<span class="string">&#x27;age:&#x27;</span>,age,<span class="string">&#x27;other:&#x27;</span>,kw)</span><br><span class="line">person(<span class="string">&#x27;Lisi&#x27;</span>,<span class="number">34</span>)</span><br><span class="line">person(<span class="string">&#x27;Zhangsan&#x27;</span>,<span class="number">44</span>,city=<span class="string">&#x27;Shanghai&#x27;</span>)</span><br><span class="line">person(<span class="string">&#x27;Wangwu&#x27;</span>,<span class="number">23</span>,gender=<span class="string">&#x27;M&#x27;</span>,job=<span class="string">&#x27;teacher&#x27;</span>)</span><br><span class="line"><span class="comment">#运行结果如下</span></span><br><span class="line">name: Lisi age: <span class="number">34</span> other: &#123;&#125;</span><br><span class="line">name: Zhangsan age: <span class="number">44</span> other: &#123;<span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;Shanghai&#x27;</span>&#125;</span><br><span class="line">name: Wangwu age: <span class="number">23</span> other: &#123;<span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;job&#x27;</span>: <span class="string">&#x27;teacher&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>
<p>将dict元素变成可变参数传进函数中，可写成：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">person</span>(<span class="params">name,age,**kw</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;name:&#x27;</span>,name,<span class="string">&#x27;age:&#x27;</span>,age,<span class="string">&#x27;other:&#x27;</span>,kw)</span><br><span class="line">extra=&#123;<span class="string">&#x27;city&#x27;</span>:<span class="string">&#x27;Shanghai&#x27;</span>,<span class="string">&#x27;job&#x27;</span>:<span class="string">&#x27;teacher&#x27;</span>&#125;</span><br><span class="line">person(<span class="string">&#x27;Wangwu&#x27;</span>,<span class="number">23</span>,**extra)</span><br><span class="line"><span class="comment">#运行结果如下</span></span><br><span class="line">name: Wangwu age: <span class="number">23</span> other: &#123;<span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;Shanghai&#x27;</span>, <span class="string">&#x27;job&#x27;</span>: <span class="string">&#x27;teacher&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>
<h2 id="命名关键字参数">命名关键字参数</h2>
<p>若要限制关键字参数名字，只接收特定的参数可以用命名关键字参数，形式为<code>*,限制参数名</code>。命名关键字参数可以设置默认值，调用函数时<strong>必须传入参数名</strong>。</p>
<p>函数定义如下，则表示只接收city和job作为关键字参数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">person</span>(<span class="params">name,age,*,city,job</span>):</span><br><span class="line">    <span class="built_in">print</span>(name,age,city,job)</span><br></pre></td></tr></table></figure>
<p>若函数定义中已经有一个可变参数，后面跟着的命名关键字参数就不需要特殊分隔符<code>*</code>了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">person</span>(<span class="params">name,age,*args,city,job</span>):</span><br><span class="line">    <span class="built_in">print</span>(name,age,args,city,job)</span><br></pre></td></tr></table></figure>
<h2 id="参数组合">参数组合</h2>
<p>定义函数可以使用必选参数、默认参数、可变参数、关键字参数和命名关键字参数，5种参数之间可以组合使用，但<strong>参数定义的顺序</strong>必须为：<strong>必选参数、默认参数、可变参数、命名关键字参数</strong>和<strong>关键字参数</strong>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f1</span>(<span class="params">a, b, c=<span class="number">0</span>, *args, **kw</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;a =&#x27;</span>, a, <span class="string">&#x27;b =&#x27;</span>, b, <span class="string">&#x27;c =&#x27;</span>, c, <span class="string">&#x27;args =&#x27;</span>, args, <span class="string">&#x27;kw =&#x27;</span>, kw)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f2</span>(<span class="params">a, b, c=<span class="number">0</span>, *, d, **kw</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;a =&#x27;</span>, a, <span class="string">&#x27;b =&#x27;</span>, b, <span class="string">&#x27;c =&#x27;</span>, c, <span class="string">&#x27;d =&#x27;</span>, d, <span class="string">&#x27;kw =&#x27;</span>, kw)</span><br></pre></td></tr></table></figure>
<h3 id="练习题-2">练习题</h3>
<p>以下函数允许计算两个数的乘积，请稍加改造，变成可接收一个或多个数并计算乘积：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mul</span>(<span class="params">x, *y</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> y:</span><br><span class="line">        x=i*x</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;mul(5) =&#x27;</span>, mul(<span class="number">5</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;mul(5, 6) =&#x27;</span>, mul(<span class="number">5</span>, <span class="number">6</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;mul(5, 6, 7) =&#x27;</span>, mul(<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;mul(5, 6, 7, 9) =&#x27;</span>, mul(<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">9</span>))</span><br><span class="line"><span class="keyword">if</span> mul(<span class="number">5</span>) != <span class="number">5</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;测试失败!&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> mul(<span class="number">5</span>, <span class="number">6</span>) != <span class="number">30</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;测试失败!&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> mul(<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>) != <span class="number">210</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;测试失败!&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> mul(<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">9</span>) != <span class="number">1890</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;测试失败!&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        mul()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;测试失败!&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span> TypeError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;测试成功!&#x27;</span>)</span><br><span class="line"><span class="comment">#运行结果如下</span></span><br><span class="line">mul(<span class="number">5</span>) = <span class="number">5</span></span><br><span class="line">mul(<span class="number">5</span>, <span class="number">6</span>) = <span class="number">30</span></span><br><span class="line">mul(<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>) = <span class="number">210</span></span><br><span class="line">mul(<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">9</span>) = <span class="number">1890</span></span><br><span class="line">测试成功!</span><br></pre></td></tr></table></figure>
<h2 id="递归函数">递归函数</h2>
<p>递归函数优点是逻辑简单清晰，缺点是过深的调用会导致栈溢出</p>
<h3 id="练习题-3">练习题</h3>
<p><a href="http://baike.baidu.com/view/191666.htm">汉诺塔</a>的移动可以用递归函数非常简单地实现。</p>
<p>请编写<code>move(n, a, b, c)</code>函数，它接收参数<code>n</code>，表示3个柱子A、B、C中第1个柱子A的盘子数量，然后打印出把所有盘子从A借助B移动到C的方法。</p>
<p>代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 期待输出:</span></span><br><span class="line"><span class="comment"># A --&gt; C</span></span><br><span class="line"><span class="comment"># A --&gt; B</span></span><br><span class="line"><span class="comment"># C --&gt; B</span></span><br><span class="line"><span class="comment"># A --&gt; C</span></span><br><span class="line"><span class="comment"># B --&gt; A</span></span><br><span class="line"><span class="comment"># B --&gt; C</span></span><br><span class="line"><span class="comment"># A --&gt; C</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">move</span>(<span class="params">n, a, b, c</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(a, <span class="string">&#x27;--&gt;&#x27;</span>, c)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        move(n-<span class="number">1</span>,a,c,b)</span><br><span class="line">        <span class="built_in">print</span>(a,<span class="string">&#x27;--&gt;&#x27;</span>,c)</span><br><span class="line">        move(n-<span class="number">1</span>,b,a,c)</span><br><span class="line">move(<span class="number">3</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>)</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">A --&gt; C</span><br><span class="line">A --&gt; B</span><br><span class="line">C --&gt; B</span><br><span class="line">A --&gt; C</span><br><span class="line">B --&gt; A</span><br><span class="line">B --&gt; C</span><br><span class="line">A --&gt; C</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python学习笔记（九）</title>
    <url>/2022/10/12/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B9%9D%EF%BC%89/</url>
    <content><![CDATA[<h1 id="io编程">IO编程</h1>
<p>往外发数据的操作叫做Output，往外接收数据的操作叫做Intput。因此程序完成IO操作会有两个Intput和Output数据流。</p>
<p>在IO编程中存在速度不匹配的问题，其解决方法有两种：</p>
<p>第一种是<strong>同步IO</strong>，即让cpu等着，程序暂停执行后续的代码，等当前读写操作完成后再往下执行。</p>
<p>第二种是<strong>异步IO</strong>，即cpu不等待，让其慢慢读写，后续代码可以立刻执行，其复杂度远高于同步IO。</p>
<h2 id="文件读写">文件读写</h2>
<p>读写文件就是请求操作系统打开一个文件对象，然后通过操作系统提供的接口从该文件对象中读取数据或把数据写入这个文件对象。</p>
<h3 id="读文件">读文件</h3>
<p>使用<code>open()</code>函数读文件：<code>f=open('路径','r')</code>,其中<code>'r'</code>表示读取。</p>
<p>文件打开后，一次读取文件全部内容：<code>f.read()</code></p>
<p>关闭文件：<code>f.close()</code></p>
<p>为保证无论是否出错都能正确关闭文件，可引入<code>with</code>语句：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;路径&#x27;</span>,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">	<span class="built_in">print</span>(f.read())</span><br></pre></td></tr></table></figure>
<p>每次最多读取size个字节的内容：<code>f.read(size)</code></p>
<p>每次读取一行内容：<code>f.readline()</code></p>
<p>一次读取所有内容并按行返回list：<code>f.readlines()</code></p>
<p>若文件很小，使用<code>read()</code>一次性读取最方便，若不能确定文件大小，反复调用<code>read(size)</code>比较好，若是配置文件，调用<code>readlines()</code>最方便。</p>
<h3 id="file-like-object">file-like Object</h3>
<p>像<code>open()</code>函数返回的有个<code>read()</code>方法的对象，统称为file-like Object。file-like Object不要求从特定类中继承，只要写<code>read()</code>方法就行。除了file外，还可以是内存的字节流、网络流、自定义流等。</p>
<h3 id="二级制文件">二级制文件</h3>
<p><code>open()</code>函数默认读取的是UTF-8编码的文本文件，若要读取二进制编码的文件，<code>open()</code>函数得写成：<code>f=open('路径','rb')</code>。</p>
<h3 id="字符编码">字符编码</h3>
<p>若要读取非UTF-8编码的文件，需要给<code>open()</code>函数传入<code>encoding</code>参数。</p>
<p>如读取GDK编码的文件：<code>f=open('路径',encoding='gdk')</code>。</p>
<h3 id="写文件">写文件</h3>
<p>写文件时也是用<code>open()</code>函数来打开文件，此时的<code>open()</code>函数得写成：<code>f=open('路径','w')</code>，其中<code>'w'</code>表示写文本文件或写二进制文件。</p>
<p>往文件中写入内容：<code>f.write(内容)</code></p>
<p>写完内容后要用<code>f.close()</code>语句来关闭文件。为保证无论是否出错都能正确关闭文件，可引入<code>with</code>语句：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;路径&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">	f.write(<span class="string">&#x27;123&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>若要写入特定文本文件，需要给<code>open()</code>函数传入<code>encoding</code>参数，如<code>f=open('路径','w'，encoding='gdk')</code></p>
<p>若写入文件时文件 已存在，会直接<strong>覆盖原文件</strong>，若需要将内容<strong>追加到文件末尾</strong>，在open()语句中传入<code>'a'</code>来写入。其形式为：<code>open('路径','a')</code></p>
<h3 id="练习题">练习题</h3>
<p>请将本地一个文本文件读为一个str并打印出来：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fpath = <span class="string">&#x27;/etc/timezone&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(fpath, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    s = f.read()</span><br><span class="line">    <span class="built_in">print</span>(s)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>代码修改如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fpath = <span class="string">&#x27;./1.txt&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(fpath, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    s = f.read()</span><br><span class="line">    <span class="built_in">print</span>(s)</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">helloworld!</span><br></pre></td></tr></table></figure>
<h2 id="stringio和bytesio">StringIO和BytesIO()</h2>
<h3 id="stringio">StringIO</h3>
<p>StringIO就是在内存中读写str，其只能操作str数据。</p>
<p>要把str<strong>写入</strong>StringIO，需要先创建一个StringIO，然后在像写文件一样写入：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> StringIO</span><br><span class="line">f=StringIO()</span><br><span class="line">f.write(<span class="string">&#x27;hello world!&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(f.getvalue())</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">hello world!</span><br></pre></td></tr></table></figure>
<p><strong>获得写入后的str:</strong><code>getvalue()</code></p>
<p>要<strong>读取</strong>StringIO，需要先用一个str初始化StringIO，然后在像读文件一样读取：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> StringIO</span><br><span class="line">f=StringIO(<span class="string">&#x27;hello world!&#x27;</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    s=f.readline()</span><br><span class="line">    <span class="keyword">if</span> s==<span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(s.strip())</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">hello world!    </span><br></pre></td></tr></table></figure>
<h3 id="bytesio">BytesIO</h3>
<p>StringIO就是在内存中读写bytes，其只能操作二进制数据。</p>
<p>使用BytesIO写入二进制数据如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line">f=BytesIO()</span><br><span class="line">f.write(<span class="string">&#x27;中文&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(f.getvalue())</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line"><span class="string">b&#x27;\xe4\xb8\xad\xe6\x96\x87&#x27;</span></span><br></pre></td></tr></table></figure>
<p>使用BytesIO读取二进制数据如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line">f=BytesIO(<span class="string">b&#x27;\xe4\xb8\xad\xe6\x96\x87&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(f.read())</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line"><span class="string">b&#x27;\xe4\xb8\xad\xe6\x96\x87&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="操作文件和目录">操作文件和目录</h2>
<p>使用<code>os</code>模块可以直接调用操作系统提供的接口函数。</p>
<p>os模块的基本功能如下所示：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="built_in">print</span>(os.name)<span class="comment">#获取操作系统类型</span></span><br><span class="line"><span class="comment">#若输出nt，说明系统是Windows系统，若输出posix,说明是Linux、Unix或Moc OS X系统</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(os.uname)<span class="comment">#获取详细的操作系统信息</span></span><br><span class="line"><span class="comment">#uname函数在Windows上不提供</span></span><br></pre></td></tr></table></figure>
<h3 id="环境变量">环境变量</h3>
<p>系统定义的环境变量保存在<code>os.environ</code>中。</p>
<p>获取某个环境变量key的值：<code>os.environ.get('key')</code></p>
<h3 id="操作文件和目录-1">操作文件和目录</h3>
<p>查看、创建和删除目录语句如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="built_in">print</span>(os.path.abspath(<span class="string">&#x27;.&#x27;</span>))<span class="comment">#查看当前目录的绝对路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#在某个目录下创建新目录（新建文件并将路径加到某个目录中）</span></span><br><span class="line">os.path.join(<span class="string">&#x27;/某个目录路径&#x27;</span>,<span class="string">&#x27;新文件名称&#x27;</span>)<span class="comment">#将某目录和新文件目录的路径合成一个</span></span><br><span class="line">os.mkdir(<span class="string">&#x27;/新文件完整路径&#x27;</span>)<span class="comment">#创建一个目录</span></span><br><span class="line"></span><br><span class="line">os.rmkdir(<span class="string">&#x27;/新文件完整路径&#x27;</span>)<span class="comment">#删除一个目录</span></span><br><span class="line"></span><br><span class="line">os.path.split(<span class="string">&#x27;/新文件完整路径&#x27;</span>)<span class="comment">#将目录拆分为某目录和文件名两个部分</span></span><br><span class="line">os.path.splitext(<span class="string">&#x27;/新文件完整路径&#x27;</span>)<span class="comment">#将目录拆分为某目录和文件名拓展名两个部分</span></span><br><span class="line"></span><br><span class="line">os.rename(<span class="string">&#x27;文件原名&#x27;</span>,<span class="string">&#x27;文件新名&#x27;</span>)<span class="comment">#重命名文件</span></span><br><span class="line">os.remove(<span class="string">&#x27;文件名&#x27;</span>)<span class="comment">#删除文件</span></span><br></pre></td></tr></table></figure>
<p><code>os</code>模块中不存在复制文件的函数。</p>
<p><strong>导入<code>os</code>模块后，列出当前目录下所有目录：</strong><code>print([x for x in os.listdir('.') if os.path.isdir(x)])</code></p>
<p><strong>导入<code>os</code>模块后，列出当前目录下所有<code>.py</code>文件：</strong><code>print([x for x in os.listdir('.') if os.path.isfile(x) and os.path.splitext(x)[1]=='.py'])</code></p>
<h3 id="练习题-1">练习题</h3>
<p>1.利用<code>os</code>模块编写一个能实现<code>dir -l</code>输出的程序。</p>
<p>这里的<code>dir-l</code>命令指的是在linux系统下运行的命令，其与<code>ls -l</code>命令类似，作用皆为查看当前目录所有的文件和目录的详细信息。代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time </span><br><span class="line"></span><br><span class="line">current=os.getcwd()</span><br><span class="line">filenum,filesize,dirnum=<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> os.listdir(current):</span><br><span class="line">    <span class="keyword">if</span> os.path.isfile(name):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s\t\t%s\t%s&#x27;</span> % (time.strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>,time.localtime(os.path.getmtime(name))),os.path.getsize(name),name))</span><br><span class="line">        filenum+=<span class="number">1</span></span><br><span class="line">        filesize+=os.path.getsize(name)</span><br><span class="line">    <span class="keyword">if</span> os.path.isdir(name):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s\t\t%s\t%s&#x27;</span> % (time.strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>,time .localtime(os.path.getmtime(name))),os.path.getsize(name),name))</span><br><span class="line">        dirnum+=<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\t\t\t\t%d个文件，\t\t%d 字节&#x27;</span> % (filenum,filesize))        </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\t\t\t\t%d个目录&#x27;</span> % (dirnum))</span><br></pre></td></tr></table></figure>
<p>2.编写一个程序，能在当前目录以及当前目录的所有子目录下查找文件名包含指定字符串的文件，并打印出相对路径。</p>
<p>代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> genericpath <span class="keyword">import</span> isfile</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> os.path</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_str</span>(<span class="params">current,<span class="built_in">str</span></span>):</span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> os.listdir(current):</span><br><span class="line">        new_path=os.path.join(current,name)</span><br><span class="line">        <span class="keyword">if</span> os.path.isfile(new_path):</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">str</span> <span class="keyword">in</span> name:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;name=%s , dir=%s&#x27;</span> % (name,(<span class="string">&#x27;../&#x27;</span>+name)))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            find_str(new_path,<span class="built_in">str</span>)  </span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    find_str(os.path.abspath(<span class="string">&quot;.&quot;</span>),<span class="string">&#x27;.py&#x27;</span>)                </span><br></pre></td></tr></table></figure>
<h2 id="序列化">序列化</h2>
<p>把变量从内存中变成可存储或传输的过程，称之为<strong>序列化</strong>(picking)。序列化后可以把序列化后的内容写入磁盘，或通过网络传输到别的机器上。把变量从序列化的对象重新读到内存里的过程，称之为<strong>反序列化</strong>(unpicking)。可以通过<code>pickle</code>模块来实现序列化。</p>
<p>将对象序列化并写入文件中：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line">d=<span class="built_in">dict</span>(name=<span class="string">&#x27;Bob&#x27;</span>,age=<span class="number">20</span>,score=<span class="number">99</span>)</span><br><span class="line"><span class="built_in">print</span>(pickle.dumps(d))<span class="comment">#把任意对象序列化成一个bytes</span></span><br><span class="line">f=<span class="built_in">open</span>(<span class="string">&#x27;1.txt&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">pickle.dump(d,f)<span class="comment">#直接把对象序列化后写入一个file-like Object</span></span><br><span class="line">f.close()</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line"><span class="comment">#文件1.txt中的结果</span></span><br><span class="line">€?       &#125;??name攲Bob攲age擪?score擪cu.</span><br></pre></td></tr></table></figure>
<p>写入的<code>1.txt</code>文件中的内容便是python保存的对象内容。</p>
<p>反序列化刚才保存的对象：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line">f=<span class="built_in">open</span>(<span class="string">&#x27;1.txt&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">d=pickle.load(f)</span><br><span class="line">f.close()</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">99</span>&#125;</span><br></pre></td></tr></table></figure>
<p>Pickle只能用于python，且可能不同版本的python彼此不兼容，因此只能用Pickle保存那些不重要的数据，</p>
<h3 id="json">JSON</h3>
<p>若要在不同的编程语言之间传递对象，就必须把对象序列化为标准格式，比如XML、JSON。最好是序列化为JSON，因为其表示出来的就一个字符串，可以被所有语言读取，也更方便存储到磁盘或通过网络传输。</p>
<p>JSON表示的对象是标准的JavaScript语言的对象，JSON和Python内置的数据类型对象如下：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">JSON类型</th>
<th style="text-align: left;">Python类型</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">{}</td>
<td style="text-align: left;">dict</td>
</tr>
<tr class="even">
<td style="text-align: left;">[]</td>
<td style="text-align: left;">list</td>
</tr>
<tr class="odd">
<td style="text-align: left;">"string"</td>
<td style="text-align: left;">str</td>
</tr>
<tr class="even">
<td style="text-align: left;">1234.56</td>
<td style="text-align: left;">int或float</td>
</tr>
<tr class="odd">
<td style="text-align: left;">true/false</td>
<td style="text-align: left;">True/False</td>
</tr>
<tr class="even">
<td style="text-align: left;">null</td>
<td style="text-align: left;">None</td>
</tr>
</tbody>
</table>
<p>通过json模块可以把python对象变成一个JSON：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">d=<span class="built_in">dict</span>(name=<span class="string">&#x27;Bob&#x27;</span>,age=<span class="number">20</span>,score=<span class="number">99</span>)</span><br><span class="line"><span class="built_in">print</span>(json.dumps(d))<span class="comment">#返回一个str，内容是标准的JSON</span></span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">20</span>, <span class="string">&quot;score&quot;</span>: <span class="number">99</span>&#125;</span><br></pre></td></tr></table></figure>
<p>把JSON反序列化为Python对象：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">json_str=<span class="string">&#x27;&#123;&quot;age&quot;:22,&quot;score&quot;:93,&quot;name&quot;:&quot;Lisi&quot;&#125;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(json.loads(json_str))</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">&#123;<span class="string">&#x27;age&#x27;</span>: <span class="number">22</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">93</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Lisi&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>
<h3 id="json进阶">JSON进阶</h3>
<p>默认情况下，class实例不是一个可序列化为JSON的对象。若要序列化该class实例，需要先写一个转换函数把实例转换成dict，再序列化：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age,score</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line">        self.score=score</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">student2dict</span>(<span class="params">std</span>):</span><br><span class="line">        <span class="keyword">return</span>&#123;</span><br><span class="line">            <span class="string">&#x27;name&#x27;</span>:std.name,</span><br><span class="line">            <span class="string">&#x27;age&#x27;</span>:std.age,</span><br><span class="line">            <span class="string">&#x27;score&#x27;</span>:std.score</span><br><span class="line">        &#125;    </span><br><span class="line">s=Student(<span class="string">&#x27;Bob&#x27;</span>,<span class="number">22</span>,<span class="number">99</span>)        </span><br><span class="line"><span class="built_in">print</span>(json.dumps(s,default=student2dict))</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">22</span>, <span class="string">&quot;score&quot;</span>: <span class="number">99</span>&#125;</span><br></pre></td></tr></table></figure>
<p>不过以上代码只能应用于Student类，若要将<strong>任一class实例变为<code>dict</code></strong>可将<code>student2dict()</code>函数以及<code>print()</code>语句精简为以下语句：</p>
<p><code>print(json.dumps(s,default=lambda obj:obj.__dict__))</code></p>
<p>若要把JSON反序列化为一个class对象实例，可以先用<code>loads()</code>方法转化出一个<code>dict</code>对象，然后传入<code>object_hook</code>函数把<code>dict</code>转换为<code>Student</code>实例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age,score</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line">        self.score=score</span><br><span class="line">     </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dict2student</span>(<span class="params">d</span>):</span><br><span class="line">    <span class="keyword">return</span> Student(d[<span class="string">&#x27;name&#x27;</span>],d[<span class="string">&#x27;age&#x27;</span>],d[<span class="string">&#x27;score&#x27;</span>])</span><br><span class="line">    </span><br><span class="line">s=Student(<span class="string">&#x27;Bob&#x27;</span>,<span class="number">22</span>,<span class="number">99</span>)   </span><br><span class="line">json_str=<span class="string">&#x27;&#123;&quot;age&quot;:22,&quot;score&quot;:99,&quot;name&quot;:&quot;Bob&quot;&#125;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(json.loads(json_str,object_hook=dict2student))    </span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">&lt;__main__.Student <span class="built_in">object</span> at <span class="number">0x0000019E34217B80</span>&gt;</span><br></pre></td></tr></table></figure>
<h3 id="练习题-2">练习题</h3>
<p>对中文进行JSON序列化时，<code>json.dumps()</code>提供了一个<code>ensure_ascii</code>参数，观察该参数对结果的影响：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">obj = <span class="built_in">dict</span>(name=<span class="string">&#x27;小明&#x27;</span>, age=<span class="number">20</span>)</span><br><span class="line">s = json.dumps(obj, ensure_ascii=<span class="literal">True</span>)</span><br><span class="line"><span class="comment">#当ensure_ascii的值为True时，name以ascii字符码输出</span></span><br><span class="line"><span class="comment">#当ensure_ascii的值为False时，name以中文输出</span></span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;\u5c0f\u660e&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">20</span>&#125;</span><br></pre></td></tr></table></figure>
<h1 id="进程和线程">进程和线程</h1>
<p>对于操作系统来说，一个任务就是一个进程。<strong>线程是最小的执行单元</strong>，由于每个进程至少要干一件事，因此<strong>一个进程至少有一个线程</strong>，多个线程可以同时执行。python既支持多进程又支持多线程。</p>
<p><strong>多任务的实现</strong>有3种方式：</p>
<p><strong>多进程模式：</strong>启动多个进程，每个进程只有1个线程，但多个进程可以一起执行多个任务。</p>
<p><strong>多线程模式：</strong>启动一个进程，在进程内启动多个线程，让多个线程一起执行多个任务。</p>
<p><strong>多进程+多线程模式：</strong>启动多个进程，每个进程再启动多个线程，同时执行多个任务。</p>
<h2 id="多进程">多进程</h2>
<p>fork()是一个系统调用函数，调用一次，返回两次。其中，当前进程（父进程）复制出来了一份子进程，父进程返回子进程的ID，子进程永远返回0。子进程可以通过<code>getppid()</code>获取父进程的ID。</p>
<p>在<strong>Mac系统</strong>中，python的os模块中封装了常见的系统调用函数，使其可以在程序中创建子进程：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Process (%s) start...&#x27;</span>% os.getpid())</span><br><span class="line">pid=os.fork()</span><br><span class="line"><span class="keyword">if</span> pid==<span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;I am child process (%s) and my parent is %s.&#x27;</span>% (os.getpid(),os.getppid()))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;I (%s) just created a child process(%s).&#x27;</span>%(os.getpid(),pid))   </span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">Process (<span class="number">42</span>) start...</span><br><span class="line">I (<span class="number">42</span>) just created a child process(<span class="number">46</span>).</span><br><span class="line">I am child process (<span class="number">46</span>) <span class="keyword">and</span> my parent <span class="keyword">is</span> <span class="number">42.</span></span><br></pre></td></tr></table></figure>
<p><strong>在Windows系统中</strong>没有<code>fork</code>调用，若要运行上面的代码，可以在<a href="onlinegdb.com">onlinegdb在线编译器</a>里选择<code>python3</code>语言后，编译运行。</p>
<p>有了fork调用，一个进程在接到新任务时就可以复制出一个子进程出来，父进程复制监听端口，子进程负责处理任务。</p>
<h3 id="multiprocessing"><code>multiprocessing</code></h3>
<p>若要在Windows上用python编写多进程程序，可以使用<code>multiprocessing</code>模块，其是一个跨平台版本的多进程模块，提供了一个process类来代表一个进程对象。</p>
<p>运用<code>multiprocessing</code>模块启动一个子进程并等待其结束：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_proc</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Run child process %s (%s)...&#x27;</span>%(name,os.getpid()))</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Parent process %s.&#x27;</span>% os.getpid())    </span><br><span class="line">    p=Process(target=run_proc,args=(<span class="string">&#x27;test&#x27;</span>,))<span class="comment">#创建进程</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Child process will start.&#x27;</span>)</span><br><span class="line">    p.start()<span class="comment">#启动进程</span></span><br><span class="line">    p.join()<span class="comment">#等待子进程结束后再继续往下运行，用于进程间的同步</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Child process end.&#x27;</span>)</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">Parent process <span class="number">12664.</span></span><br><span class="line">Child process will start.</span><br><span class="line">Run child process test (<span class="number">9516</span>)...</span><br><span class="line">Child process end.</span><br></pre></td></tr></table></figure>
<h3 id="pool"><code>Pool</code></h3>
<p>若要启动大量的子进程，可以用进程池(pool)的方式<strong>批量创建子进程</strong>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"><span class="keyword">import</span> os,time,random</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">long_time_task</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Run task %s (%s)...&#x27;</span>% (name,os.getpid()))</span><br><span class="line">    start=time.time()</span><br><span class="line">    time.sleep(random.random()*<span class="number">3</span>)</span><br><span class="line">    end=time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Task %s runs %0.2f seconds.&#x27;</span>% (name,(end-start)))</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Parent process %s.&#x27;</span>% os.getpid())</span><br><span class="line">    p=Pool(<span class="number">4</span>)<span class="comment">#设置最多同时执行4个进程，pool默认大小是cpu的核数</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        p.apply_async(long_time_task,args=(i,))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Waiting for all subprocesses done...&#x27;</span>)    </span><br><span class="line">    p.close()<span class="comment">#停止继续添加新进程</span></span><br><span class="line">    p.join()<span class="comment">#等待所有子进程执行完毕，调用前必须先调用close()</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;All subprocesses done&#x27;</span>)</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">Parent process <span class="number">1228.</span></span><br><span class="line">Waiting <span class="keyword">for</span> <span class="built_in">all</span> subprocesses done...</span><br><span class="line">Run task <span class="number">1</span> (<span class="number">1233</span>)...</span><br><span class="line">Run task <span class="number">2</span> (<span class="number">1234</span>)...</span><br><span class="line">Run task <span class="number">3</span> (<span class="number">1235</span>)...</span><br><span class="line">Run task <span class="number">0</span> (<span class="number">1232</span>)...</span><br><span class="line">Task <span class="number">2</span> runs <span class="number">0.86</span> seconds.</span><br><span class="line">Run task <span class="number">4</span> (<span class="number">1234</span>)...</span><br><span class="line">Task <span class="number">1</span> runs <span class="number">1.77</span> seconds.</span><br><span class="line">Task <span class="number">3</span> runs <span class="number">1.83</span> seconds.</span><br><span class="line">Task <span class="number">4</span> runs <span class="number">1.04</span> seconds.</span><br><span class="line">Task <span class="number">0</span> runs <span class="number">2.62</span> seconds.</span><br><span class="line">All subprocesses done</span><br></pre></td></tr></table></figure>
<h3 id="子进程">子进程</h3>
<p><code>subprocess</code>模块可以启动一个子进程，然后控制其输入和输出。</p>
<p>如用<code>subprocess</code>模块在python代码中运行命令<code>nslookup www.python.org</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;$ nslookup www.python.org&#x27;</span>)</span><br><span class="line">r=subprocess.call([<span class="string">&#x27;nslookup&#x27;</span>,<span class="string">&#x27;www.python.org&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Exit code:&#x27;</span>,r)</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">$ nslookup www.python.org</span><br><span class="line">服务器:  gdad07.gd.ctc.com</span><br><span class="line">Address:  <span class="number">10.157</span><span class="number">.160</span><span class="number">.89</span></span><br><span class="line"></span><br><span class="line">非权威应答:</span><br><span class="line">名称:    dualstack.python.<span class="built_in">map</span>.fastly.net</span><br><span class="line">Addresses:  2a04:<span class="number">4e42</span>:8c::<span class="number">223</span></span><br><span class="line">          <span class="number">151.101</span><span class="number">.108</span><span class="number">.223</span></span><br><span class="line">Aliases:  www.python.org</span><br><span class="line"></span><br><span class="line">Exit code: <span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>若子进程需要输入，可以调用<code>communicate()</code>方法来实现：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;$ nslookup&#x27;</span>)</span><br><span class="line">p = subprocess.Popen([<span class="string">&#x27;nslookup&#x27;</span>], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)</span><br><span class="line">output, err = p.communicate(<span class="string">b&#x27;set q=mx\npython.org\nexit\n&#x27;</span>)<span class="comment">#输入语句</span></span><br><span class="line">a=output.decode(<span class="string">&#x27;unicode_escape&#x27;</span>)<span class="comment">#对unicode编码的output进行反编码</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Exit code:&#x27;</span>, p.returncode)</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">$ nslookup</span><br><span class="line">Ä¬ÈÏ·þÎñÆ÷:  gdad07.gd.ctc.com</span><br><span class="line">Address:  <span class="number">10.157</span><span class="number">.160</span><span class="number">.89</span></span><br><span class="line"></span><br><span class="line">&gt; &gt; ·þÎñÆ÷:  gdad07.gd.ctc.com</span><br><span class="line">Address:  <span class="number">10.157</span><span class="number">.160</span><span class="number">.89</span></span><br><span class="line"></span><br><span class="line">python.org      MX preference = <span class="number">50</span>, mail exchanger = mail.python.org</span><br><span class="line"></span><br><span class="line">mail.python.org internet address = <span class="number">188.166</span><span class="number">.95</span><span class="number">.178</span></span><br><span class="line">mail.python.org AAAA IPv6 address = 2a03:b0c0:<span class="number">2</span>:d0::<span class="number">71</span>:<span class="number">1</span></span><br><span class="line">&gt;</span><br><span class="line">Exit code: <span class="number">0</span></span><br></pre></td></tr></table></figure>
<h3 id="进程间通信">进程间通信</h3>
<p><code>multiiprocessing</code>模块包装了底层的机制，提供了<code>Queue</code>、<code>Pips</code>等多种方式来交换数据，以实现进程间的通信。</p>
<p>以<code>Queue</code>为例，在父进程中创建两个子进程，一个往<code>Queue</code>里写数据，另一个从<code>Queue</code>里读数据：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process,Queue</span><br><span class="line"><span class="keyword">import</span> os,time,random</span><br><span class="line"><span class="comment">#写数据进程所执行的代码</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write</span>(<span class="params">q</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Process to write: %s&#x27;</span>%os.getpid())</span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> [<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>]:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Put %s to queue...&#x27;</span>% value)</span><br><span class="line">        q.put(value)</span><br><span class="line">        time.sleep(random.random())</span><br><span class="line"></span><br><span class="line"><span class="comment">#读数据进程所执行的代码        </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read</span>(<span class="params">q</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Process to read: %s&#x27;</span> %os.getpid())        </span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        value=q.get(<span class="literal">True</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Get %s from queue.&#x27;</span> %value)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    q=Queue()<span class="comment">#父进程创建Queue，并传给各个子进程</span></span><br><span class="line">    pw=Process(target=write,args=(q,))</span><br><span class="line">    pr=Process(target=read,args=(q,))</span><br><span class="line">    pw.start()<span class="comment">#启动子进程pw，写入</span></span><br><span class="line">    pr.start()<span class="comment">#启动子进程pw，读取</span></span><br><span class="line">    pw.join()<span class="comment">#等待pw结束</span></span><br><span class="line">    pr.join()<span class="comment">#pr进程里是 死循环，无法等待其结束，只能强行终止</span></span><br><span class="line">    pr.terminate()</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">Process to write: 4684Process to read: <span class="number">3796</span></span><br><span class="line"></span><br><span class="line">Put A to queue...</span><br><span class="line">Get A <span class="keyword">from</span> queue.</span><br><span class="line">Put B to queue...</span><br><span class="line">Get B <span class="keyword">from</span> queue.</span><br><span class="line">Put C to queue...</span><br><span class="line">Get C <span class="keyword">from</span> queue.</span><br></pre></td></tr></table></figure>
<p>在Unix/Linix下，<code>multiprocessing</code>模块封装了<code>fork()</code>调用，由于Windows没有<code>fork</code>调用，所以父进程所有python对象都必须通过<code>pickle</code>序列化再传到子进程去。</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python学习笔记（二）</title>
    <url>/2022/10/09/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h1 id="条件判断">条件判断</h1>
<h2 id="方法一if...else语句">方法一：if...else语句</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> &lt;条件<span class="number">1</span>&gt;:</span><br><span class="line">	&lt;执行<span class="number">1</span>&gt;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">	&lt;执行<span class="number">2</span>&gt;</span><br></pre></td></tr></table></figure>
<h2 id="方法二if-...elif...else语句">方法二：if ...elif...else语句</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> &lt;条件<span class="number">1</span>&gt;:</span><br><span class="line">	&lt;执行<span class="number">1</span>&gt;</span><br><span class="line"><span class="keyword">elif</span> &lt;条件<span class="number">2</span>&gt;:</span><br><span class="line">	&lt;执行<span class="number">2</span>&gt;</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">	&lt;执行<span class="number">3</span>&gt;</span><br></pre></td></tr></table></figure>
<h2 id="input条件输出">input条件输出</h2>
<p>input()返回值的数据类型是str，str不能直接与整数比较，若要与整数比较，要先把str转换为整数类型，如下代码所示：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="built_in">input</span>(<span class="string">&#x27;birth: &#x27;</span>)</span><br><span class="line">birth = <span class="built_in">int</span>(s)</span><br><span class="line"><span class="keyword">if</span> birth &lt; <span class="number">2000</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;00前&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;00后&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>若输入值不为数字时，如输入abc，则条件语句可写成：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s=<span class="built_in">input</span>(<span class="string">&#x27;birth:&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> s!=<span class="string">&#x27;zero&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;00前&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;00后&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="练习题">练习题</h2>
<p>小明身高1.75，体重80.5kg。请根据BMI公式（体重除以身高的平方）帮小明计算他的BMI指数，并根据BMI指数：</p>
<ul>
<li>低于18.5：过轻</li>
<li>18.5-25：正常</li>
<li>25-28：过重</li>
<li>28-32：肥胖</li>
<li>高于32：严重肥胖</li>
</ul>
<p>用<code>if-elif</code>判断并打印结果：</p>
<p>代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">height = <span class="number">1.75</span></span><br><span class="line">weight = <span class="number">80.5</span></span><br><span class="line">bmi = weight/(height*height)</span><br><span class="line"><span class="keyword">if</span> bmi&lt;<span class="number">18.5</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;过轻&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="number">18.5</span>&lt;=bmi&lt;<span class="number">25</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;正常&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="number">25</span>&lt;=bmi&lt;<span class="number">28</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;肥胖&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;严重肥胖&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h1 id="循环">循环</h1>
<h2 id="方法一for...in循环">方法一：for...in循环</h2>
<p>例如计算1-100的整数之和： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">101</span>)：</span><br><span class="line">	t=t+i</span><br><span class="line"><span class="built_in">print</span>(t)</span><br></pre></td></tr></table></figure></p>
<h2 id="方法二while-循环">方法二：while 循环</h2>
<p>例如计算100以内所有奇数之和：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t=<span class="number">0</span></span><br><span class="line">n=<span class="number">99</span></span><br><span class="line"><span class="keyword">while</span> n&gt;<span class="number">0</span>:</span><br><span class="line">    t=t+n</span><br><span class="line">    n=n-<span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(t)</span><br></pre></td></tr></table></figure>
<h2 id="练习题-1">练习题</h2>
<p>请利用循环依次对list中的每个名字打印出<code>Hello, xxx!</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">L = [<span class="string">&#x27;Bart&#x27;</span>, <span class="string">&#x27;Lisa&#x27;</span>, <span class="string">&#x27;Adam&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> L:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Hello,&#x27;</span>+i+<span class="string">&#x27;!&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="break与continue">break与continue</h2>
<p>break语句可提前退出循环，continue语句可跳过当前这次循环，直接开始下一次循环。</p>
<h1 id="字典dict">字典dict</h1>
<p>字典使用键-值存储，具有极快的查找速度。dict内部存放的顺序与key的放入顺序无关。为保证哈希的正确性，dict的key必须是<strong>不可变对象</strong>，如list是可变的，不能作为key，dict的key<strong>不能重复</strong>。</p>
<p>与list相比，dict的特点为：</p>
<ul>
<li>查找和插入的速度极快，不会随key的增加而变慢</li>
<li>需要占用大量内存</li>
</ul>
<p><strong>形式如下</strong>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d=&#123;<span class="string">&#x27;Zhangsan&#x27;</span>:<span class="number">92</span>,<span class="string">&#x27;Lisi&#x27;</span>:<span class="number">80</span>,<span class="string">&#x27;Wangwu&#x27;</span>:<span class="number">56</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(d[<span class="string">&#x27;Lisi&#x27;</span>])</span><br></pre></td></tr></table></figure>
<p><strong>通过key将数据放入dict</strong></p>
<p>如把key为Lisi、value为68的数据放入dict：<code>d['Lisi']=68</code></p>
<p><strong>注意：</strong>多次对一个key放入value，后面的值会把前面的值冲掉,如此时Lisi的value值由80变成了68。</p>
<p><strong>删除一个key</strong></p>
<p>如要删除Lisi，其对应的value也会从dict中删除：<code>d.pop('Lisi')</code></p>
<h2 id="避免key不存在的错误">避免key不存在的错误</h2>
<h3 id="方法一">方法一：</h3>
<p>通过<code>in</code>判断key是否存在：<code>'Jack' in  d</code></p>
<h3 id="方法二">方法二：</h3>
<p>通过<code>get()</code>方法判断key是否存在，若key不存在，默认返回<code>Nome</code>：<code>d.get('Jack')</code></p>
<p>通过<code>get()</code>方法判断key是否存在，若key不存在，返回指定的value：<code>d.get('Jack',-1)</code></p>
<h1 id="集合set">集合set</h1>
<p>set与dict类似，也是一组key的集合，但<strong>不存储value</strong>。与dict相同，key不能重复，故在set中没有重复的key，也同样不能放入可变对象。此外，set也可看成数学意义上无序和无重复元素的集合。</p>
<p>创建一个set，需要提供一个list作为输入集合，其<strong>形式如下</strong>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s=<span class="built_in">set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line">&gt;&gt;&gt;s</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure>
<p>注意：传入的参数是一个list，而显示的<code>&#123;1,2,3&#125;</code>只是说明set内部有1，2，3这3个元素，显示的顺序也<strong>不代表set就是有序的</strong>。</p>
<p><strong>重复元素在set中自动被过滤</strong></p>
<p>如下面所示：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s=<span class="built_in">set</span>([<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"><span class="comment">#运行结果如下</span></span><br><span class="line">s</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure>
<p><strong>通过<code>add(key)</code>方法将元素添加到set中</strong></p>
<p>如在set中先后两次添加元素4：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s=<span class="built_in">set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">s.add(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line">s.add(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"><span class="comment">#运行结果如下</span></span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到，元素可以重复添加，但会被set自动过滤掉重复的元素。</p>
<p><strong>通过<code>remove(key)</code>方法删除元素</strong></p>
<p>如删除元素4：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s=<span class="built_in">set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line">s.remove(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line">&gt;&gt;&gt;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure>
<p><strong>两个set可以做交集、并集等操作</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s=<span class="built_in">set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line">d=<span class="built_in">set</span>([<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>])</span><br><span class="line"><span class="built_in">print</span>(s&amp;d)</span><br><span class="line"><span class="built_in">print</span>(s|d)</span><br><span class="line"><span class="comment">#运行结果如下</span></span><br><span class="line">&#123;<span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br></pre></td></tr></table></figure>
<h1 id="小结">小结</h1>
<p>list、tuple是<strong>有序可重复</strong>的</p>
<p>dict、set是<strong>无序不可重复</strong>的</p>
<p>四者形式上的区别：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span>=[value,value]</span><br><span class="line"><span class="built_in">tuple</span>=(value,value)</span><br><span class="line"><span class="built_in">dict</span>=&#123;key:value,key:value&#125;</span><br><span class="line"><span class="built_in">set</span>=([key,key])</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python学习笔记（五）</title>
    <url>/2022/10/10/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%94%EF%BC%89/</url>
    <content><![CDATA[<h1 id="高阶函数">高阶函数</h1>
<p>变量可以指向函数，函数的参数也能接受变量。当一个<strong>函数可以接收另一个函数</strong>作为参数时，这个函数被称作高阶函数。</p>
<p>最简单的高阶函数如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x,y,f</span>):</span><br><span class="line">    <span class="keyword">return</span> f(x)+f(y)</span><br><span class="line"><span class="built_in">print</span>(add(-<span class="number">5</span>,<span class="number">6</span>,<span class="built_in">abs</span>))    </span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line"><span class="number">11</span></span><br></pre></td></tr></table></figure>
<h2 id="mapreduce函数">map/reduce函数</h2>
<h3 id="map函数"><code>map()</code>函数</h3>
<p><code>map()</code>函数接收两个参数，一个是函数，另一个是<code>Iterable</code>，<code>map</code>将传入的函数依次作用到序列的每个元素，并将结果作为新的<code>Iterable</code>返回。</p>
<p>例如要将函数<code>f(x)=x^2</code>作用到一个list<code>[1,2,3,4,5,6,7,8,9]</code>上：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x*x</span><br><span class="line">r=<span class="built_in">map</span>(f,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(r))</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>]</span><br></pre></td></tr></table></figure>
<h3 id="reduce函数"><code>reduce()</code>函数</h3>
<p><code>reduce()</code>把函数作用到一个序列[x1,x2,x3,...]上，<code>reduce</code>接收两个函数后，把结果继续和序列的下一个元素做累计计算。</p>
<p>例如要对一个序列求和：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x,y</span>):</span><br><span class="line">    <span class="keyword">return</span> x+y</span><br><span class="line"><span class="built_in">print</span>(reduce(add,[<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>]))</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line"><span class="number">25</span></span><br></pre></td></tr></table></figure>
<p>将<code>map()</code>与<code>reduce()</code>函数结合，可以写出把str转换为int的函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fn</span>(<span class="params">x,y</span>):</span><br><span class="line">    <span class="keyword">return</span> x*<span class="number">10</span>+y</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">char2num</span>(<span class="params">s</span>):</span><br><span class="line">    d=&#123;<span class="string">&#x27;0&#x27;</span>:<span class="number">0</span>,<span class="string">&#x27;1&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;2&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;3&#x27;</span>:<span class="number">3</span>,<span class="string">&#x27;4&#x27;</span>:<span class="number">4</span>,<span class="string">&#x27;5&#x27;</span>:<span class="number">5</span>,<span class="string">&#x27;6&#x27;</span>:<span class="number">6</span>,<span class="string">&#x27;7&#x27;</span>:<span class="number">7</span>,<span class="string">&#x27;8&#x27;</span>:<span class="number">8</span>,<span class="string">&#x27;9&#x27;</span>:<span class="number">9</span>&#125;</span><br><span class="line">    <span class="keyword">return</span> d[s]    </span><br><span class="line"><span class="built_in">print</span>(reduce(fn,<span class="built_in">map</span>(char2num,<span class="string">&#x27;14512&#x27;</span>)))</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line"><span class="number">14512</span></span><br></pre></td></tr></table></figure>
<h3 id="练习题">练习题</h3>
<p>利用<code>map()</code>函数，把用户输入的不规范的英文名字，变为首字母大写，其他小写的规范名字。输入：<code>['adam', 'LISA', 'barT']</code>，输出：<code>['Adam', 'Lisa', 'Bart']</code>：</p>
<p>代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">normalize</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> name:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span>.title(name)</span><br><span class="line"><span class="comment"># 测试:</span></span><br><span class="line">L1 = [<span class="string">&#x27;adam&#x27;</span>, <span class="string">&#x27;LISA&#x27;</span>, <span class="string">&#x27;barT&#x27;</span>]</span><br><span class="line">L2 = <span class="built_in">list</span>(<span class="built_in">map</span>(normalize, L1))</span><br><span class="line"><span class="built_in">print</span>(L2)</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">[<span class="string">&#x27;Adam&#x27;</span>, <span class="string">&#x27;Lisa&#x27;</span>, <span class="string">&#x27;Bart&#x27;</span>]</span><br></pre></td></tr></table></figure>
<p>Python提供的<code>sum()</code>函数可以接受一个list并求和，请编写一个<code>prod()</code>函数，可以接受一个list并利用<code>reduce()</code>求积：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">prod</span>(<span class="params">L</span>):</span><br><span class="line">    <span class="keyword">return</span> reduce(fn,L)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fn</span>(<span class="params">x,y</span>):</span><br><span class="line">    <span class="keyword">return</span> x*y</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;3 * 5 * 7 * 9 =&#x27;</span>, prod([<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]))</span><br><span class="line"><span class="keyword">if</span> prod([<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]) == <span class="number">945</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;测试成功!&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;测试失败!&#x27;</span>)</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line"><span class="number">3</span> * <span class="number">5</span> * <span class="number">7</span> * <span class="number">9</span> = <span class="number">945</span></span><br><span class="line">测试成功!</span><br></pre></td></tr></table></figure>
<p>利用<code>map</code>和<code>reduce</code>编写一个<code>str2float</code>函数，把字符串<code>'123.456'</code>转换成浮点数<code>123.456</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#方法一：</span></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">str2float</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fn</span>(<span class="params">x,y</span>):</span><br><span class="line">        <span class="keyword">return</span> x*<span class="number">10</span>+y</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">gn</span>(<span class="params">x,y</span>):</span><br><span class="line">        <span class="keyword">return</span> x*<span class="number">0.1</span>+y</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">char2num</span>(<span class="params">t</span>):</span><br><span class="line">        d=&#123;<span class="built_in">str</span>(x):x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)&#125;</span><br><span class="line">        <span class="keyword">return</span> d[t]</span><br><span class="line">    a=s.index(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">    t1=s[:a]</span><br><span class="line">    t2=s[a+<span class="number">1</span>:]</span><br><span class="line">    t2=t2[::-<span class="number">1</span>]</span><br><span class="line">    p=reduce(fn,<span class="built_in">map</span>(char2num,t1))</span><br><span class="line">    q=reduce(gn,<span class="built_in">map</span>(char2num,t2))*<span class="number">0.1</span></span><br><span class="line">    <span class="keyword">return</span> p+q</span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;str2float(\&#x27;123.456\&#x27;) =&#x27;</span>, str2float(<span class="string">&#x27;123.456&#x27;</span>))</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">abs</span>(str2float(<span class="string">&#x27;123.456&#x27;</span>) - <span class="number">123.456</span>) &lt; <span class="number">0.00001</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;测试成功!&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;测试失败!&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#方法二：</span></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">str2float</span>(<span class="params">s</span>):</span><br><span class="line">    d=&#123;<span class="built_in">str</span>(x):x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)&#125;</span><br><span class="line">    p=reduce(<span class="keyword">lambda</span> x,y:x*<span class="number">10</span>+y,<span class="built_in">map</span>(<span class="keyword">lambda</span> s:d[s],s[:s.find(<span class="string">&#x27;.&#x27;</span>)]))</span><br><span class="line">    q=reduce(<span class="keyword">lambda</span> x,y:x*<span class="number">10</span>+y,<span class="built_in">map</span>(<span class="keyword">lambda</span> s:d[s],s[s.find(<span class="string">&#x27;.&#x27;</span>)+<span class="number">1</span>:]))*<span class="number">0.001</span></span><br><span class="line">    <span class="keyword">return</span> p+q</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;str2float(\&#x27;123.456\&#x27;) =&#x27;</span>, str2float(<span class="string">&#x27;123.456&#x27;</span>))</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">abs</span>(str2float(<span class="string">&#x27;123.456&#x27;</span>) - <span class="number">123.456</span>) &lt; <span class="number">0.00001</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;测试成功!&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;测试失败!&#x27;</span>)</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">str2float(<span class="string">&#x27;123.456&#x27;</span>) = <span class="number">123.456</span></span><br><span class="line">测试成功!</span><br></pre></td></tr></table></figure>
<h2 id="filter函数">filter函数</h2>
<p><code>filter()</code>函数用于过滤序列，该函数接收一个函数和一个序列。与<code>map()</code>不同的是，<code>filter()</code>把传入的函数依次作用于每个元素后，根据<strong>返回值是True还是False</strong>来决定是<strong>保留还是丢弃</strong>该元素。</p>
<p>例如在一个list中删掉偶数，只保留奇数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">odd</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">return</span> n%<span class="number">2</span>==<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">filter</span>(odd,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">15</span>])))</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">15</span>]</span><br></pre></td></tr></table></figure>
<p><code>filter()</code>函数返回 的是一个<code>Iterator</code>，因此要强迫<code>filter()</code>完成计算结果就需要用<code>list()</code>函数来获得所以结果并返回list。</p>
<p>用filter求1000以内素数例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">_odd_iter</span>(): <span class="comment">#先构造从3开始的奇数列</span></span><br><span class="line">    n = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        n = n + <span class="number">2</span></span><br><span class="line">        <span class="keyword">yield</span> n</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_not_divisible</span>(<span class="params">n</span>): <span class="comment">#筛选函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> x: x % n &gt; <span class="number">0</span>        </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">primes</span>():</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line">    it = _odd_iter() <span class="comment"># 初始序列</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        n = <span class="built_in">next</span>(it) <span class="comment"># 返回序列的第一个数</span></span><br><span class="line">        <span class="keyword">yield</span> n</span><br><span class="line">        it = <span class="built_in">filter</span>(_not_divisible(n), it) <span class="comment"># 构造新序列    </span></span><br><span class="line">        <span class="comment"># 打印1000以内的素数:</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> primes():</span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">1000</span>:</span><br><span class="line">        <span class="built_in">print</span>(n)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<h3 id="练习题-1">练习题</h3>
<p>回数是指从左向右读和从右向左读都是一样的数，例如<code>12321</code>，<code>909</code>。请利用<code>filter()</code>筛选出回数：</p>
<p>代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">is_palindrome</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(n)==<span class="built_in">str</span>(n)[::-<span class="number">1</span>]</span><br><span class="line"><span class="comment"># 测试:</span></span><br><span class="line">output = <span class="built_in">filter</span>(is_palindrome, <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">1000</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;1~1000:&#x27;</span>, <span class="built_in">list</span>(output))</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">list</span>(<span class="built_in">filter</span>(is_palindrome, <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">200</span>))) == [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>, <span class="number">66</span>, <span class="number">77</span>, <span class="number">88</span>, <span class="number">99</span>, <span class="number">101</span>, <span class="number">111</span>, <span class="number">121</span>, <span class="number">131</span>, <span class="number">141</span>, <span class="number">151</span>, <span class="number">161</span>, <span class="number">171</span>, <span class="number">181</span>, <span class="number">191</span>]:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;测试成功!&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;测试失败!&#x27;</span>)</span><br><span class="line"><span class="comment">#运行结果如下：  </span></span><br><span class="line"><span class="number">1</span>~<span class="number">1000</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>, <span class="number">66</span>, <span class="number">77</span>, <span class="number">88</span>, <span class="number">99</span>, <span class="number">101</span>, <span class="number">111</span>, <span class="number">121</span>, <span class="number">131</span>, <span class="number">141</span>, <span class="number">151</span>, <span class="number">161</span>, <span class="number">171</span>, <span class="number">181</span>, <span class="number">191</span>, <span class="number">202</span>, <span class="number">212</span>, <span class="number">222</span>, <span class="number">232</span>, <span class="number">242</span>, <span class="number">252</span>, <span class="number">262</span>, <span class="number">272</span>, <span class="number">282</span>, <span class="number">292</span>, <span class="number">303</span>, <span class="number">313</span>, <span class="number">323</span>, <span class="number">333</span>, <span class="number">343</span>, <span class="number">353</span>, <span class="number">363</span>, <span class="number">373</span>, <span class="number">383</span>, <span class="number">393</span>, <span class="number">404</span>, <span class="number">414</span>, <span class="number">424</span>, <span class="number">434</span>, <span class="number">444</span>, <span class="number">454</span>, <span class="number">464</span>, <span class="number">474</span>, <span class="number">484</span>, <span class="number">494</span>, <span class="number">505</span>, <span class="number">515</span>, <span class="number">525</span>, <span class="number">535</span>, <span class="number">545</span>, <span class="number">555</span>, <span class="number">565</span>, <span class="number">575</span>, <span class="number">585</span>, <span class="number">595</span>, <span class="number">606</span>, <span class="number">616</span>, <span class="number">626</span>, <span class="number">636</span>, <span class="number">646</span>, <span class="number">656</span>, <span class="number">666</span>, <span class="number">676</span>, <span class="number">686</span>, <span class="number">696</span>, <span class="number">707</span>, <span class="number">717</span>, <span class="number">727</span>, <span class="number">737</span>, <span class="number">747</span>, <span class="number">757</span>, <span class="number">767</span>, <span class="number">777</span>, <span class="number">787</span>, <span class="number">797</span>, <span class="number">808</span>, <span class="number">818</span>, <span class="number">828</span>, <span class="number">838</span>, <span class="number">848</span>, <span class="number">858</span>, <span class="number">868</span>, <span class="number">878</span>, <span class="number">888</span>, <span class="number">898</span>, <span class="number">909</span>, <span class="number">919</span>, <span class="number">929</span>, <span class="number">939</span>, <span class="number">949</span>, <span class="number">959</span>, <span class="number">969</span>, <span class="number">979</span>, <span class="number">989</span>, <span class="number">999</span>]</span><br><span class="line">测试成功!</span><br></pre></td></tr></table></figure>
<h2 id="sorted函数">sorted函数</h2>
<p><code>sorted()</code>可以对list进行排序，还可以接收一个key函数来实现自定义排序。</p>
<p>比如按绝对值大小排序：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>([<span class="number">36</span>,<span class="number">5</span>,-<span class="number">12</span>,<span class="number">9</span>,-<span class="number">21</span>],key=<span class="built_in">abs</span>))</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">[<span class="number">5</span>, <span class="number">9</span>, -<span class="number">12</span>, -<span class="number">21</span>, <span class="number">36</span>]</span><br></pre></td></tr></table></figure>
<p>默认情况下，用sorted()对字符串排序是<strong>按照ASCII的大小</strong>比较的，若要忽略大小写按照字母表排序，则可以写成：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#正序排序</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>([<span class="string">&#x27;Bob&#x27;</span>,<span class="string">&#x27;ant&#x27;</span>,<span class="string">&#x27;Zoo&#x27;</span>,<span class="string">&#x27;panda&#x27;</span>],key=<span class="built_in">str</span>.lower))</span><br><span class="line"><span class="comment">#反序排序</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>([<span class="string">&#x27;Bob&#x27;</span>,<span class="string">&#x27;ant&#x27;</span>,<span class="string">&#x27;Zoo&#x27;</span>,<span class="string">&#x27;panda&#x27;</span>],key=<span class="built_in">str</span>.lower,reverse=<span class="literal">True</span>))</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">[<span class="string">&#x27;ant&#x27;</span>, <span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;panda&#x27;</span>, <span class="string">&#x27;Zoo&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;Zoo&#x27;</span>, <span class="string">&#x27;panda&#x27;</span>, <span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;ant&#x27;</span>]</span><br></pre></td></tr></table></figure>
<h3 id="练习题-2">练习题</h3>
<p>假设我们用一组tuple表示学生名字和成绩：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">L = [(&#x27;Bob&#x27;, 75), (&#x27;Adam&#x27;, 92), (&#x27;Bart&#x27;, 66), (&#x27;Lisa&#x27;, 88)]</span><br></pre></td></tr></table></figure>
<p>请用<code>sorted()</code>对上述列表分别按名字排序：</p>
<p>代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">L = [(<span class="string">&#x27;Bob&#x27;</span>, <span class="number">75</span>), (<span class="string">&#x27;Adam&#x27;</span>, <span class="number">92</span>), (<span class="string">&#x27;Bart&#x27;</span>, <span class="number">66</span>), (<span class="string">&#x27;Lisa&#x27;</span>, <span class="number">88</span>)]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">by_name</span>(<span class="params">t</span>):</span><br><span class="line">    <span class="keyword">return</span> t[<span class="number">0</span>].lower()</span><br><span class="line">L2 = <span class="built_in">sorted</span>(L, key=by_name)</span><br><span class="line"><span class="built_in">print</span>(L2)</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">[(<span class="string">&#x27;Adam&#x27;</span>, <span class="number">92</span>), (<span class="string">&#x27;Bart&#x27;</span>, <span class="number">66</span>), (<span class="string">&#x27;Bob&#x27;</span>, <span class="number">75</span>), (<span class="string">&#x27;Lisa&#x27;</span>, <span class="number">88</span>)]</span><br></pre></td></tr></table></figure>
<p>再按成绩从高到低排序：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">L = [(<span class="string">&#x27;Bob&#x27;</span>, <span class="number">75</span>), (<span class="string">&#x27;Adam&#x27;</span>, <span class="number">92</span>), (<span class="string">&#x27;Bart&#x27;</span>, <span class="number">66</span>), (<span class="string">&#x27;Lisa&#x27;</span>, <span class="number">88</span>)]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">by_score</span>(<span class="params">t</span>):</span><br><span class="line">    reverse=<span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> -t[<span class="number">1</span>] </span><br><span class="line">L2 = <span class="built_in">sorted</span>(L, key=by_score)</span><br><span class="line"><span class="built_in">print</span>(L2)</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">[(<span class="string">&#x27;Adam&#x27;</span>, <span class="number">92</span>), (<span class="string">&#x27;Lisa&#x27;</span>, <span class="number">88</span>), (<span class="string">&#x27;Bob&#x27;</span>, <span class="number">75</span>), (<span class="string">&#x27;Bart&#x27;</span>, <span class="number">66</span>)]</span><br></pre></td></tr></table></figure>
<h1 id="返回函数">返回函数</h1>
<p>高阶函数除了可以接收函数作为参数外，还可以把函数作为结果值返回。</p>
<p>例如，实现一个可变参数的求和，根据需要计算结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">lazy_sum</span>(<span class="params">*args</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sum</span>():</span><br><span class="line">        a=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> args:</span><br><span class="line">            a=a+n</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span></span><br><span class="line">f=lazy_sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(f)</span><br><span class="line"><span class="built_in">print</span>(f())</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">&lt;function lazy_sum.&lt;<span class="built_in">locals</span>&gt;.<span class="built_in">sum</span> at <span class="number">0x7f3aaacb9ca0</span>&gt;</span><br><span class="line"><span class="number">15</span></span><br></pre></td></tr></table></figure>
<p>在调用<code>lazy_sum()</code>函数时，返回的是求和函数而不是求和结果。调用函数<code>f</code>时才真正计算求和的结果。当调用<code>lazy_sum()</code>函数时，每次调用都会返回一个新的函数，即使传入相同参数，返回的函数也不会相同。</p>
<h2 id="闭包">闭包</h2>
<p>上面的例子中，内部函数<code>sum</code>可以引用外部函数<code>lazy_sum()</code>的参数和局部变量。当<code>lazy_sum()</code>返回函数<code>sum</code>时，相关参数和变量<strong>仍保存在返回的函数</strong>中。这种程序结构便称为闭包。</p>
<p>例如，在下面例子中<code>f1()</code>,<code>f2()</code>和<code>f3()</code>调用的结果应该是<code>1</code>,<code>4</code>,<code>9</code>，但实际结果是<code>9 9 9</code>。这便是由于返回函数引用了变量<code>i</code>，但它并非立刻执行，等到3个函数都返回时，所引用的变量已经变成了<code>3</code>，故最终结果为<code>9</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">count</span>():</span><br><span class="line">    fn=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">4</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">f</span>():</span><br><span class="line">            <span class="keyword">return</span> i*i</span><br><span class="line">        fn.append(f)</span><br><span class="line">    <span class="keyword">return</span> fn</span><br><span class="line">f1,f2,f3=count()</span><br><span class="line"><span class="built_in">print</span>(f1(),f2(),f3())</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line"><span class="number">9</span> <span class="number">9</span> <span class="number">9</span></span><br></pre></td></tr></table></figure>
<p><strong>注意</strong>：返回函数不要引用任何<strong>循坏变量或后续会发生变化的变量</strong>。若一定要引用循环变量，便再创建一个函数，用该函数的参数<strong>绑定循环变量当前的值</strong>，具体操作如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">count</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">g</span>(<span class="params">i</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">f</span>():</span><br><span class="line">            <span class="keyword">return</span> i*i</span><br><span class="line">        <span class="keyword">return</span> f</span><br><span class="line">    fn=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">4</span>):    </span><br><span class="line">        fn.append(g(i))</span><br><span class="line">    <span class="keyword">return</span> fn</span><br><span class="line">f1,f2,f3=count()</span><br><span class="line"><span class="built_in">print</span>(f1(),f2(),f3())</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line"><span class="number">1</span> <span class="number">4</span> <span class="number">9</span></span><br></pre></td></tr></table></figure>
<h2 id="nonlocal">nonlocal</h2>
<p>使用闭包，就是内层函数引用了外层函数的局部变量。如果只读外层变量的值，返回的闭包函数调用一切正常，但对外层函数的局部变量进行运算就会报错。</p>
<p>若内层函数想要计算外层函数的局部变量，需要在内部函数内部加一个<code>nonlocal 局部变量名</code>的声明。因此在使用闭包时，对外层变量赋值前，需要使用<code>nonlocal</code>声明改变了不是当前函数的局部变量。</p>
<h2 id="练习题-3">练习题</h2>
<p>利用闭包返回一个计数器函数，每次调用它返回递增整数：</p>
<p>代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">createCounter</span>():</span><br><span class="line">    x=<span class="number">0</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">counter</span>():</span><br><span class="line">        <span class="keyword">nonlocal</span> x</span><br><span class="line">        x=x+<span class="number">1</span>    </span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">return</span> counter</span><br><span class="line"><span class="comment"># 测试:</span></span><br><span class="line">counterA = createCounter()</span><br><span class="line"><span class="built_in">print</span>(counterA(), counterA(), counterA(), counterA(), counterA()) <span class="comment"># 1 2 3 4 5</span></span><br><span class="line">counterB = createCounter()</span><br><span class="line"><span class="keyword">if</span> [counterB(), counterB(), counterB(), counterB()] == [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;测试通过!&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;测试失败!&#x27;</span>)</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span></span><br><span class="line">测试通过!</span><br></pre></td></tr></table></figure>
<h1 id="匿名函数">匿名函数</h1>
<p>传入函数时，有时不需要显示定义函数，直接传入匿名函数更方便。如匿名函数<code>lambda x:x*x</code>实际上就是：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>):</span><br><span class="line">	<span class="keyword">return</span> x*x</span><br></pre></td></tr></table></figure>
<p>匿名函数有个限制，就是只能有一个表达式，不用写<code>return</code>，返回值就是该表达式的结果。由于匿名函数没有名字，不必担心函数名冲突。匿名函数是一个函数对象，可以把匿名函数赋值给一个变量，再利用变量来调用该函数，也可以把匿名函数作为返回值返回。</p>
<h2 id="练习题-4">练习题</h2>
<p>请用匿名函数改造下面的代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">is_odd</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">return</span> n % <span class="number">2</span> == <span class="number">1</span></span><br><span class="line"></span><br><span class="line">L = <span class="built_in">list</span>(<span class="built_in">filter</span>(is_odd, <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">20</span>)))</span><br><span class="line"><span class="built_in">print</span>(L)</span><br></pre></td></tr></table></figure>
<p>代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">filter</span>(<span class="keyword">lambda</span> n:n % <span class="number">2</span> == <span class="number">1</span>, <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">20</span>))))</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">17</span>, <span class="number">19</span>]</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python学习笔记（八）</title>
    <url>/2022/10/12/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AB%EF%BC%89/</url>
    <content><![CDATA[<h1 id="错误调试和测试">错误、调试和测试</h1>
<h2 id="错误处理">错误处理</h2>
<p>在程序运行过程中，可以实现设定发生错误时返回一个错误代码，这样就可以知道是否出错及其出错原因是什么。</p>
<h3 id="错误处理机制python的错误处理机制try...except...finally..">错误处理机制python的错误处理机制:<code>try...except...finally..</code>。</h3>
<p>当认为某段代码可能会出错时，用<code>try</code>来运行这段代码，如果执行出错，则后续的代码不会继续执行，而是直接跳转到错误处理代码<code>except</code>语句块中，执行完<code>except</code>语句块后，如果还有<code>finally</code>语句块，则执行语句块，错误处理机制执行完毕。例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;try...&#x27;</span>)</span><br><span class="line">    r=<span class="number">10</span>/<span class="built_in">int</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;result:&#x27;</span>,r)</span><br><span class="line"><span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;ValueError:&#x27;</span>,e)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;except:&#x27;</span>,e)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;no error!&#x27;</span>)    </span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;finally...&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;END&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line"><span class="keyword">try</span>...</span><br><span class="line">ValueError: invalid literal <span class="keyword">for</span> <span class="built_in">int</span>() <span class="keyword">with</span> base <span class="number">10</span>: <span class="string">&#x27;a&#x27;</span></span><br><span class="line"><span class="keyword">finally</span>...</span><br><span class="line">END</span><br></pre></td></tr></table></figure>
<p>如果没有错误发生，<code>except</code>语句块不会被执行，但如果有<code>finally</code>语句块，<code>finally</code>语句块一定会被执行。在使用<code>except</code>时要注意<strong>先写子类的异常</strong>，基类的异常在后。</p>
<p>使用<code>try...except</code>捕获错误可以跨越多层调用。不需要在每个可能出错的地方去捕获错误。</p>
<h3 id="调用栈">调用栈</h3>
<p>若错误没有被捕获，就会一直往上抛，直至最后被python解释器捕获，打印一个错误信息，程序就退出了。出错的时候一定要分析错误的调用栈信息，才能定位错误的位置。</p>
<h3 id="记录错误">记录错误</h3>
<p>如果能捕获错误，就可以把错误堆栈打印出来，分析错误原因的同时，让程序继续执行下去。</p>
<p><code>logging</code>模块可以记录错误信息。导包后的调用形式：<code>logging.exception(e)</code>。</p>
<h3 id="抛出错误">抛出错误</h3>
<p>因为错误是class，捕获一个错误就是捕获到该class的一个实例。因此自己编写的函数也可以抛出错误。若需要抛出错误，可以先定义一个错误的class，然后用<code>raise</code>语句抛出一个错误。但只有在必要的时候才定义自己的错误类型，若可以选择内置的错误类型，尽量使用内置的错误类型。</p>
<p>抛出错误例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">FooError</span>(<span class="title class_ inherited__">ValueError</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>(<span class="params">s</span>):</span><br><span class="line">    n=<span class="built_in">int</span>(s)</span><br><span class="line">    <span class="keyword">if</span> n==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> FooError(<span class="string">&#x27;invalid value: %s&#x27;</span> % s)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">10</span>/n</span><br><span class="line">foo(<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;main.py&quot;</span>, line <span class="number">8</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    foo(<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">  File <span class="string">&quot;main.py&quot;</span>, line <span class="number">6</span>, <span class="keyword">in</span> foo</span><br><span class="line">    <span class="keyword">raise</span> FooError(<span class="string">&#x27;invalid value: %s&#x27;</span> % s)</span><br><span class="line">__main__.FooError: invalid value: <span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>另一种错误处理方式为，捕获错误后，又把错误通过<code>raise</code>语句往上抛，让顶层的调用者去处理。</p>
<p><code>raise</code>语句如果不带参数，就会把当前错误原样抛出。若在<code>except</code>中<code>raise</code>一个Error，可以将一种类型的错误转化为另一种类型，但不能将一个<code>IOError</code>转换成毫不相干的<code>ValueError</code>。</p>
<h4 id="练习题">练习题</h4>
<p>运行下面的代码，根据异常信息进行分析，定位出错误源头，并修复：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">str2num</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(s)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calc</span>(<span class="params">exp</span>):</span><br><span class="line">    ss = exp.split(<span class="string">&#x27;+&#x27;</span>)</span><br><span class="line">    ns = <span class="built_in">map</span>(str2num, ss)</span><br><span class="line">    <span class="keyword">return</span> reduce(<span class="keyword">lambda</span> acc, x: acc + x, ns)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    r = calc(<span class="string">&#x27;100 + 200 + 345&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;100 + 200 + 345 =&#x27;</span>, r)</span><br><span class="line">    r = calc(<span class="string">&#x27;99 + 88 + 7.6&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;99 + 88 + 7.6 =&#x27;</span>, r)</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>
<p>修复后的代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">str2num</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">float</span>(s)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calc</span>(<span class="params">exp</span>):</span><br><span class="line">    ss = exp.split(<span class="string">&#x27;+&#x27;</span>)</span><br><span class="line">    ns = <span class="built_in">map</span>(str2num, ss)</span><br><span class="line">    <span class="keyword">return</span> reduce(<span class="keyword">lambda</span> acc, x: acc + x, ns)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    r = calc(<span class="string">&#x27;100 + 200 + 345&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;100 + 200 + 345 =&#x27;</span>, r)</span><br><span class="line">    r = calc(<span class="string">&#x27;99 + 88 + 7.6&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;99 + 88 + 7.6 =&#x27;</span>, r)</span><br><span class="line"></span><br><span class="line">main()</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line"><span class="number">100</span> + <span class="number">200</span> + <span class="number">345</span> = <span class="number">645.0</span></span><br><span class="line"><span class="number">99</span> + <span class="number">88</span> + <span class="number">7.6</span> = <span class="number">194.6</span></span><br></pre></td></tr></table></figure>
<h2 id="调试">调试</h2>
<h3 id="方法一print">方法一：<code>print()</code></h3>
<p>用<code>print()</code>把可能有问题的变量打印出来看</p>
<h3 id="方法二断言assert">方法二：断言(assert)</h3>
<p>凡是用print()来看的地方，都可以用断言(assert)来替代。如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>(<span class="params">s</span>):</span><br><span class="line">    n=<span class="built_in">int</span>(s)</span><br><span class="line">    <span class="keyword">assert</span> n!=<span class="number">0</span>,<span class="string">&#x27;n is zero!&#x27;</span><span class="comment">#若n=0,则会抛出AssertionError错误</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">10</span>/n</span><br><span class="line">foo(<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;main.py&quot;</span>, line <span class="number">5</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    foo(<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">  File <span class="string">&quot;main.py&quot;</span>, line <span class="number">3</span>, <span class="keyword">in</span> foo</span><br><span class="line">    <span class="keyword">assert</span> n!=<span class="number">0</span>,<span class="string">&#x27;n is zero!&#x27;</span></span><br><span class="line">AssertionError: n <span class="keyword">is</span> zero!</span><br></pre></td></tr></table></figure>
<p>python解释器中可以用<code>python -O 文件名</code>来关闭assert。关闭后，所有的assert语句都相当于一个pass。</p>
<h3 id="方法三logging">方法三：<code>logging</code></h3>
<p>把<code>print()</code>替换为<code>logging</code>后，与<code>assert</code>比，<code>logging</code>不会抛出错误，且可以输出到文件。通过配置logging，可以将一条语句同时输出到不同的地方，如文件和控制台。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging </span><br><span class="line">logging.basicConfig(level=logging.INFO)<span class="comment">#指定记录信息的级别</span></span><br><span class="line"></span><br><span class="line">s=<span class="string">&#x27;0&#x27;</span></span><br><span class="line">n=<span class="built_in">int</span>(s)</span><br><span class="line">logging.info(<span class="string">&#x27;n=%d&#x27;</span> % n)<span class="comment">#输出一段文本</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">10</span>/n)</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">INFO:root:n=<span class="number">0</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;main.py&quot;</span>, line <span class="number">7</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">10</span>/n)</span><br><span class="line">ZeroDivisionError: division by zero</span><br></pre></td></tr></table></figure>
<p>logging有debug、info、warning、error等几个级别，当指定<code>level=INFO</code>时，<code>logging.debug</code>就不起作用了。当指定<code>level=WARNING</code>时，<code>logging.debug</code>和<code>logging.INFO</code>就不起作用了。</p>
<h3 id="方法四pdb">方法四：<code>pdb</code></h3>
<p>启动python的调制器pdb，可以让程序以单步方式运行，类似于c++的单点调试，可以随时查看代码的运行状态。pdb需要在控制台里输入语句，其形式为<code>python -m pdb 文件名</code>。</p>
<p>示例如下：</p>
<p><img src="/2022/10/12/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AB%EF%BC%89/1.png"></p>
<p>pdb内的命令用法如下：</p>
<p>单步执行代码：输入 <code>n</code></p>
<p>查看变量：<code>p 变量名</code></p>
<p>退出程序：输入 <code>q</code></p>
<h3 id="方法五pdb.set_trace">方法五：<code>pdb.set_trace()</code></h3>
<p>该方法也是用pdb，需要在控制台里输入语句，但不需要单步执行。类似于c++的断点调试，只需要import pdb，然后在可能出错的地方一个<code>pdb.set_trace()</code>，就可以设置一个断点。</p>
<p>示例如下：</p>
<p><img src="/2022/10/12/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AB%EF%BC%89/2.png"></p>
<p>进入pdb调试环境后，可用<code>p 变量名</code>查看变量，输入<code>c</code>继续运行。</p>
<h3 id="方法六ide">方法六：IDE</h3>
<p>高效率的设置断点、单步执行，需要一个支持调试功能的IDE。目前常用的Python IDE有：</p>
<p>Visual Studio Code、PyCharm、加上pydev插件的Eclipse。</p>
<h2 id="单元测试">单元测试</h2>
<p>单元测试是用来对一个模块、一个函数或者一个类来进行正确性检验的测试工作。将针对某函数写的测试用例放到一个测试模块里，便是一个完整的单元测试。</p>
<p>若单元测试通过，则说明所测试的函数能够正常工作；若单元测试不通过，要么函数有bug，要么测试条件输入不正确。</p>
<p><strong>单元测试需要引用<code>unittest</code>模块</strong>。常调用模块内置的条件判断来断言输出是否是期望值，最常用的<strong>断言语句</strong>是：<code>self.assertEqual(函数名(参数),期待值)</code>。</p>
<p>另一种重要的断言是期待抛出指定类型的Error，用法是：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> self.assertRaises(指定类型的Error):</span><br><span class="line">    value=函数.属性或者是函数(参数)</span><br></pre></td></tr></table></figure>
<h3 id="运行单元测试">运行单元测试</h3>
<p><strong>方法一：</strong>在代码最后加上两行代码，直接运行程序</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure>
<p><strong>方法二：</strong>在<strong>命令行</strong>通过参数<code>python -m unittest 文件名</code>运行单元测试。</p>
<h3 id="setup与teardown"><code>setUp</code>与<code>tearDown</code></h3>
<p>每调用一个测试方法前被执行：<code>setUp()</code></p>
<p>在测试方法执行完后被执行：<code>tearDown()</code></p>
<h3 id="练习题-1">练习题</h3>
<p>对Student类编写单元测试，结果发现测试不通过，请修改Student类，让测试通过：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, score</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.score = score</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_grade</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.score &gt;= <span class="number">60</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;B&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> self.score &gt;= <span class="number">80</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;A&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;C&#x27;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestStudent</span>(unittest.TestCase):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_80_to_100</span>(<span class="params">self</span>):</span><br><span class="line">        s1 = Student(<span class="string">&#x27;Bart&#x27;</span>, <span class="number">80</span>)</span><br><span class="line">        s2 = Student(<span class="string">&#x27;Lisa&#x27;</span>, <span class="number">100</span>)</span><br><span class="line">        self.assertEqual(s1.get_grade(), <span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">        self.assertEqual(s2.get_grade(), <span class="string">&#x27;A&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_60_to_80</span>(<span class="params">self</span>):</span><br><span class="line">        s1 = Student(<span class="string">&#x27;Bart&#x27;</span>, <span class="number">60</span>)</span><br><span class="line">        s2 = Student(<span class="string">&#x27;Lisa&#x27;</span>, <span class="number">79</span>)</span><br><span class="line">        self.assertEqual(s1.get_grade(), <span class="string">&#x27;B&#x27;</span>)</span><br><span class="line">        self.assertEqual(s2.get_grade(), <span class="string">&#x27;B&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_0_to_60</span>(<span class="params">self</span>):</span><br><span class="line">        s1 = Student(<span class="string">&#x27;Bart&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">        s2 = Student(<span class="string">&#x27;Lisa&#x27;</span>, <span class="number">59</span>)</span><br><span class="line">        self.assertEqual(s1.get_grade(), <span class="string">&#x27;C&#x27;</span>)</span><br><span class="line">        self.assertEqual(s2.get_grade(), <span class="string">&#x27;C&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_invalid</span>(<span class="params">self</span>):</span><br><span class="line">        s1 = Student(<span class="string">&#x27;Bart&#x27;</span>, -<span class="number">1</span>)</span><br><span class="line">        s2 = Student(<span class="string">&#x27;Lisa&#x27;</span>, <span class="number">101</span>)</span><br><span class="line">        <span class="keyword">with</span> self.assertRaises(ValueError):</span><br><span class="line">            s1.get_grade()</span><br><span class="line">        <span class="keyword">with</span> self.assertRaises(ValueError):</span><br><span class="line">            s2.get_grade()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure>
<p>修改后的代码为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, score</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.score = score</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_grade</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.score &gt;= <span class="number">60</span> <span class="keyword">and</span>  self.score &lt; <span class="number">80</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;B&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> self.score &gt;= <span class="number">80</span> <span class="keyword">and</span>  self.score &lt;= <span class="number">100</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;A&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> self.score &gt;= <span class="number">0</span> <span class="keyword">and</span>  self.score &lt; <span class="number">60</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;C&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestStudent</span>(unittest.TestCase):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_80_to_100</span>(<span class="params">self</span>):</span><br><span class="line">        s1 = Student(<span class="string">&#x27;Bart&#x27;</span>, <span class="number">80</span>)</span><br><span class="line">        s2 = Student(<span class="string">&#x27;Lisa&#x27;</span>, <span class="number">100</span>)</span><br><span class="line">        self.assertEqual(s1.get_grade(), <span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">        self.assertEqual(s2.get_grade(), <span class="string">&#x27;A&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_60_to_80</span>(<span class="params">self</span>):</span><br><span class="line">        s1 = Student(<span class="string">&#x27;Bart&#x27;</span>, <span class="number">60</span>)</span><br><span class="line">        s2 = Student(<span class="string">&#x27;Lisa&#x27;</span>, <span class="number">79</span>)</span><br><span class="line">        self.assertEqual(s1.get_grade(), <span class="string">&#x27;B&#x27;</span>)</span><br><span class="line">        self.assertEqual(s2.get_grade(), <span class="string">&#x27;B&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_0_to_60</span>(<span class="params">self</span>):</span><br><span class="line">        s1 = Student(<span class="string">&#x27;Bart&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">        s2 = Student(<span class="string">&#x27;Lisa&#x27;</span>, <span class="number">59</span>)</span><br><span class="line">        self.assertEqual(s1.get_grade(), <span class="string">&#x27;C&#x27;</span>)</span><br><span class="line">        self.assertEqual(s2.get_grade(), <span class="string">&#x27;C&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_invalid</span>(<span class="params">self</span>):</span><br><span class="line">        s1 = Student(<span class="string">&#x27;Bart&#x27;</span>, -<span class="number">1</span>)</span><br><span class="line">        s2 = Student(<span class="string">&#x27;Lisa&#x27;</span>, <span class="number">101</span>)</span><br><span class="line">        <span class="keyword">with</span> self.assertRaises(ValueError):</span><br><span class="line">            s1.get_grade()</span><br><span class="line">        <span class="keyword">with</span> self.assertRaises(ValueError):</span><br><span class="line">            s2.get_grade()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    unittest.main()</span><br><span class="line">    </span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">....</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Ran <span class="number">4</span> tests <span class="keyword">in</span> <span class="number">0.001</span>s</span><br><span class="line"></span><br><span class="line">OK</span><br></pre></td></tr></table></figure>
<h2 id="文档测试">文档测试</h2>
<p>文档测试（<code>doctest</code>）模块可以自动提取写在注释中的代码并执行测试。</p>
<p><code>dectest</code>严格按照命令行的输入和输出来判断测试结果是否正确。若运行文档测试后没有输出，则说明程序是正确的，在测试异常时，可以用<code>...</code>表示中间的出错的信息。</p>
<p>运行文档测试，需要<strong>先在代码的最后加上一下三行代码</strong>，然后在命令行中通过<code>python 文件名</code>来执行文档测试：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">import</span> doctest</span><br><span class="line">    doctest.testmod()</span><br></pre></td></tr></table></figure>
<p>在模块正常导入时不会执行文档测试，只有在命令行直接运行时才执行文档测试。</p>
<h3 id="练习题-2">练习题</h3>
<p>对函数<code>fact(n)</code>编写doctest并执行：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fact</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    Calculate 1*2*...*n</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fact(1)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fact(10)</span></span><br><span class="line"><span class="string">    ?</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fact(-1)</span></span><br><span class="line"><span class="string">    ?</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError()</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> n * fact(n - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">import</span> doctest</span><br><span class="line">    doctest.testmod()</span><br></pre></td></tr></table></figure>
<p>代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fact</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    Calculate 1*2*...*n</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fact(1)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fact(10)</span></span><br><span class="line"><span class="string">    3628800</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fact(-1)</span></span><br><span class="line"><span class="string">    Traceback (most recent call last):</span></span><br><span class="line"><span class="string">    ...</span></span><br><span class="line"><span class="string">    ValueError</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError()</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> n * fact(n - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">import</span> doctest</span><br><span class="line">    doctest.testmod()</span><br><span class="line"><span class="comment">#运行结果为空</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python学习笔记（六）</title>
    <url>/2022/10/11/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AD%EF%BC%89/</url>
    <content><![CDATA[<h1 id="函数式编程">函数式编程</h1>
<h2 id="装饰器">装饰器</h2>
<p>若要增强某个函数的功能，使其在调用前后自动打印日志，但又不希望修改该函数的定义，这种在代码运行期间动态增加功能的方式，称为装饰器(Decorator)。在面向对象的设计模式中，decorator被称为装饰模式。</p>
<p>本质上，decorator就是一个返回函数的高级函数，因此定义一个能打印日志的decorator可以定义成：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">log</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args,**kw</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;call %s():&#x27;</span>% func.__name__)<span class="comment">#函数对象的__name__属性可以拿到函数的名字</span></span><br><span class="line">        <span class="keyword">return</span> func(*args,**kw)</span><br><span class="line">    <span class="keyword">return</span> wrapper  </span><br></pre></td></tr></table></figure>
<p>由于上面的<code>log</code>是一个decorator，因此接收一个函数作为参数，并返回一个函数，故要借助Python的@语法。将decorator置于函数的定义处：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@log</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">now</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;2022-10-11&#x27;</span>)</span><br><span class="line">now()   </span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">call now():</span><br><span class="line"><span class="number">2022</span>-<span class="number">10</span>-<span class="number">11</span></span><br></pre></td></tr></table></figure>
<p>调用<code>now()</code>函数时，不仅会运行<code>now()</code>函数本身，还会在运行<code>now()</code>函数前打印一行日志。其中的<code>@log</code>语句在<code>now()</code>函数的定义出就相当于执行<code>now=log(now)</code>语句。由于<code>log()</code>是一个decorator，返回一个函数。因此调用<code>now()</code>将执行新函数，即在函数中返回<code>wrapper()</code>函数。在<code>wrapper()</code>函数内，首先打印日志，再调用原始函数。</p>
<p>若decorator本身需要传入参数，便需要编写一个返回decorator的高阶函数。</p>
<p>例如自定义log的文本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">log</span>(<span class="params">text</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decorator</span>(<span class="params">func</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args,**kw</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;%s %s():&#x27;</span>% (text,func.__name__))</span><br><span class="line">            <span class="keyword">return</span> func(*args,**kw)</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> decorator    </span><br><span class="line"><span class="comment">#decorator用法如下:</span></span><br><span class="line"><span class="meta">@log(<span class="params"><span class="string">&#x27;execute&#x27;</span></span>)</span><span class="comment">#即now=log(&#x27;execute&#x27;)(now)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">now</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;2022-10-11&#x27;</span>)</span><br><span class="line">now()    </span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">execute now():</span><br><span class="line"><span class="number">2022</span>-<span class="number">10</span>-<span class="number">11</span></span><br></pre></td></tr></table></figure>
<p>上述代码中执行<code>log('execute')</code>，返回的是decorator函数，再调用返回函数，参数是<code>now</code>函数，返回值最终是<code>wrapper</code>函数。此时<code>now.__name__</code>属性已经从原来的<code>now</code>变成了<code>wrapper</code>。因此需要把原始函数的<code>__name__</code>属性复制到wrapper函数中，即在定义<code>wrapper()</code>的前面加上<code>@functools.wraps(func)</code>，写法如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">log</span>(<span class="params">text</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decorator</span>(<span class="params">func</span>):</span><br><span class="line"><span class="meta">        @functools.wraps(<span class="params">func</span>)</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args,**kw</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;%s %s():&#x27;</span>% (text,func.__name__))</span><br><span class="line">            <span class="keyword">return</span> func(*args,**kw)</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> decorator    </span><br><span class="line"><span class="comment">#decorator用法如下:</span></span><br><span class="line"><span class="meta">@log(<span class="params"><span class="string">&#x27;execute&#x27;</span></span>)</span><span class="comment">#即now=log(&#x27;execute&#x27;)(now)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">now</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;2022-10-11&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(now.__name__)    </span><br><span class="line"></span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">now</span><br></pre></td></tr></table></figure>
<h3 id="练习题">练习题</h3>
<p>请设计一个decorator，它可作用于任何函数上，并打印该函数的执行时间：</p>
<p>代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time, functools</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">metric</span>(<span class="params">fn</span>):</span><br><span class="line"><span class="meta">    @functools.wraps(<span class="params">fn</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args,**kw</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s executed in %s ms&#x27;</span> % (fn.__name__, <span class="number">10.24</span>))</span><br><span class="line">        <span class="keyword">return</span> fn(*args,**kw)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line"><span class="meta">@metric</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fast</span>(<span class="params">x, y</span>):</span><br><span class="line">    time.sleep(<span class="number">0.0012</span>)</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line"></span><br><span class="line"><span class="meta">@metric</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">slow</span>(<span class="params">x, y, z</span>):</span><br><span class="line">    time.sleep(<span class="number">0.1234</span>)</span><br><span class="line">    <span class="keyword">return</span> x * y * z;</span><br><span class="line"></span><br><span class="line">f = fast(<span class="number">11</span>, <span class="number">22</span>)</span><br><span class="line">s = slow(<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>)</span><br><span class="line"><span class="keyword">if</span> f != <span class="number">33</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;测试失败!&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> s != <span class="number">7986</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;测试失败!&#x27;</span>)</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">fast executed <span class="keyword">in</span> <span class="number">10.24</span> ms</span><br><span class="line">slow executed <span class="keyword">in</span> <span class="number">10.24</span> ms</span><br></pre></td></tr></table></figure>
<h2 id="偏函数">偏函数</h2>
<p>偏函数可以通过设定参数的默认值，降低函数调用的难度。例如<code>int()</code>函数默认按十进制转换，也可以传入<code>base</code>参数做N进制的转换，如：<code>int('123',base=8)</code>。</p>
<p>创建一个偏函数可以用<code>functools.partial</code>，比如创建一个转换二进制的函数如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line">int2=functools.partial(<span class="built_in">int</span>,base=<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(int2(<span class="string">&#x27;1000000&#x27;</span>))</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line"><span class="number">64</span></span><br></pre></td></tr></table></figure>
<p>创建偏函数时，也可以接收函数对象、<code>*args</code>,**kw这三个参数。</p>
<h1 id="模块">模块</h1>
<p>自己创建模块时要注意命名，不要使用中文、特殊字符，不能和python自带的模块名称冲突。检查系统是都已存在该模块的方法是先执行<code>import abc</code>，若成功则说明系统存在该模块。</p>
<p><strong>导入模块</strong>：<code>import 模块名称</code></p>
<h2 id="使用模块">使用模块</h2>
<p>模块的使用涉及到作用域的概念。</p>
<h3 id="作用域">作用域</h3>
<p>类似于<code>__xxx__</code>这样的变量是特殊变量，可以被直接引用，但有特殊用途。类似于<code>_xxx</code>和<code>__xxx</code>的变量是<strong>私有</strong>的，不应被直接引用。</p>
<h2 id="安装第三方模块">安装第三方模块</h2>
<p>安装第三方模块需要添加模块搜索路径。</p>
<h3 id="方法一直接修改sys.path">方法一：直接修改<code>sys.path</code></h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import sys</span><br><span class="line">sys.path.append(&#x27;/路径名&#x27;)</span><br></pre></td></tr></table></figure>
<h3 id="方法二设置环境变量pythonpath">方法二：设置环境变量<code>pythonpath</code></h3>
<h1 id="面向对象编程">面向对象编程</h1>
<h2 id="类和实例">类和实例</h2>
<p>通过<code>class</code>关键字<strong>定义类</strong>，格式如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">类名</span>(<span class="title class_ inherited__">Object</span>):       <span class="comment">#Object表示该类的基类是谁，默认使用Object类</span></span><br><span class="line">	<span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<p><strong>创建实例</strong>：<code>变量=类名()</code></p>
<p><strong>引用实例属性</strong>：<code>指向实例的变量.属性名</code></p>
<p>通过<code>__init__</code>方法<strong>初始化实例</strong>，例子如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,score</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.score=score</span><br><span class="line">bart=Student(<span class="string">&#x27;zhangsan&#x27;</span>,<span class="number">56</span>)</span><br><span class="line"><span class="built_in">print</span>(bart.name,bart.score)</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">zhangsan <span class="number">56</span></span><br></pre></td></tr></table></figure>
<p><code>__init__</code>方法第一个参数永远是self，代表实例本身。有了<code>__init__</code>方法，在创建实例时<strong>不能传入空参数</strong>，必须传入与<code>__init__</code>方法匹配的参数，但<strong><code>self</code>不需要传。</strong></p>
<p>调用实例方法：<code>指向实例的变量.方法名</code></p>
<h2 id="访问限制">访问限制</h2>
<p>将public变量变成<strong>private变量</strong>：在属性名称前加两个下划线<code>__</code>。</p>
<p>只有一个下划线开头的实例变量名是<strong>protected变量</strong>。</p>
<p>外部函数访问私有变量方法：增加get_name和get_score方法。例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">	...</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">get_name</span>(<span class="params">self</span>):</span><br><span class="line">		<span class="keyword">return</span> self.__name</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">get_score</span>(<span class="params">self</span>):</span><br><span class="line">		<span class="keyword">return</span> self.__score</span><br></pre></td></tr></table></figure>
<p>外部函数修改私有变量方法:增加set_score方法。例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">	...</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">set_score</span>(<span class="params">self,score</span>):</span><br><span class="line">		self.__score=score</span><br></pre></td></tr></table></figure>
<p>间接访问private属性的方法：<code>指向实例的变量._类名_属性名</code>，但由于不同版本的python解释器对<strong>变量的解析不同</strong>，这种操作尽量不要用。</p>
<p>类外代码定义的private变量与类内同名的变量不是同一个变量，类内的变量会被自动改成<code>指向实例的变量._类名_属性名</code>的形式，而外部代码只能新增一个<code>__属性名</code>变量。</p>
<h3 id="练习题-1">练习题</h3>
<p>请把下面的<code>Student</code>对象的<code>gender</code>字段对外隐藏起来，用<code>get_gender()</code>和<code>set_gender()</code>代替，并检查参数有效性：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, gender</span>):</span><br><span class="line">        self.__name = name</span><br><span class="line">        self.__gender = gender</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_gender</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__gender</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_gender</span>(<span class="params">self,gender</span>):</span><br><span class="line">        self.__gender=gender</span><br><span class="line"><span class="comment"># 测试:</span></span><br><span class="line">bart = Student(<span class="string">&#x27;Bart&#x27;</span>, <span class="string">&#x27;male&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> bart.get_gender() != <span class="string">&#x27;male&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;测试失败!&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    bart.set_gender(<span class="string">&#x27;female&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> bart.get_gender() != <span class="string">&#x27;female&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;测试失败!&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;测试成功!&#x27;</span>)</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">测试成功!</span><br></pre></td></tr></table></figure>
<h2 id="继承和多态">继承和多态</h2>
<p>定义一个类时可以从某个现有的class<strong>继承</strong>，新的class称为子类，被继承的class称为基类、父类或超类。继承可以将基类的所有功能都直接拿过来，子类只需要新增特有的方法或重写父类的方法即可。</p>
<p>类继承的格式：<code>class 子类名(基类名)</code></p>
<p>子类和基类存在相同方法时，子类的方法会覆盖基类的，代码运行时默认调用子类的方法，这一特性称之为<strong>多态</strong>。</p>
<h3 id="开闭原则">开闭原则</h3>
<p>对扩展开放：允许新增子类</p>
<p>对修改封闭：不需要修改依赖子类类型的函数。</p>
<h3 id="静态语言-vs-动态语言">静态语言 vs 动态语言</h3>
<p>对于静态语言（如java），如果需要传入<code>Animal</code>的类型，则传入的对象必须是<code>Animal</code>类型或者是它的子类，否则将无法调用对应的<code>run()</code>方法。</p>
<p>对于动态语言（如python），则不一定需要传入<code>Animal</code>类型，只需要保证传入的对象有一个<code>run()</code>方法就可以了。</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python学习笔记（十一）</title>
    <url>/2022/10/13/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="正则表达式">正则表达式</h1>
<p>正则表达式是一种用来匹配字符串强有力的武器。凡是符合规则的字符串，就认为它“匹配”了，否则该批字符串就是不合法的。正则表达式是用字符串表示，其用字符匹配规则为：</p>
<p>若在正则表达式中直接给出字符，就是精确匹配。</p>
<p><strong>匹配一个数字: </strong> <code>\d</code></p>
<p>如<code>'00\d'</code>可以匹配<code>'007'</code>但无法匹配<code>'00A'</code></p>
<p><code>'\d\d\d'</code>可以匹配<code>'029'</code></p>
<p><strong>匹配一个字母或数字:</strong> <code>\w</code></p>
<p>如<code>'\w\w\d'</code>可以匹配<code>'as2'</code></p>
<p><strong>匹配任意一个字符：</strong><code>.</code></p>
<p>如<code>'py.'</code>可以匹配<code>'pya'</code>、<code>'py@'</code>、<code>'py2'</code>等。</p>
<p><strong>匹配任意个字符（包括0个）：</strong> <code>*</code></p>
<p><strong>匹配至少一个字符：</strong> <code>+</code></p>
<p><strong>匹配零个或一个字符：</strong> <code>?</code></p>
<p><strong>匹配n个字符：</strong> <code>&#123;n&#125;</code></p>
<p><strong>匹配n-m个字符：</strong> <code>&#123;n-m&#125;</code></p>
<p><strong>匹配一个空格（包括Tab等空白符）：</strong> <code>\s</code></p>
<p><strong>匹配至少一个空格（包括Tab等空白符）：</strong> <code>\s+</code></p>
<p><strong>特殊字符要用<code>\+特殊字符</code>转义。</strong></p>
<h3 id="进阶">进阶</h3>
<p>若要做更精确地匹配，可以用<code>[]</code>表示范围。</p>
<p><strong>匹配一个数字、字母或者下划线：</strong> <code>[0-9a-zA-Z\_]</code></p>
<p>注意： <code>[0-9a-zA-Z\_]</code>中的<code>0-9</code>代表数字，<code>a-zA-Z</code>代表字母，<code>\_</code>代表下划线。</p>
<p><strong>匹配至少由一个数字、字母或者下划线组成的字符串：</strong> <code>[0-9a-zA-Z\_]+</code></p>
<p>注意： <code>[0-9a-zA-Z\_]+</code>中的<code>+</code>代表大于等于1次的匹配前面的子表达式。</p>
<p><strong>匹配由字母或下划线开头，后接任意个由一个数字、字母或者下划线组成的字符串：</strong> <code>[a-zA-Z\_][0-9a-zA-Z\_]*</code></p>
<p><strong>匹配长度为1-20个字符的变量（前面1个字符+后面最多19个字符）：</strong> <code>[a-zA-Z\_][0-9a-zA-Z\_]&#123;0,19&#125;</code></p>
<p><strong>匹配A或B：</strong> <code>A|B</code></p>
<p><strong>表示行的开头：</strong> <code>^</code></p>
<p><strong>表示必须以数字开头：</strong> <code>^\d</code></p>
<p><strong>表示行的结束：</strong> <code>$</code></p>
<p><strong>表示必须以数字结束：</strong> <code>\d$</code></p>
<h3 id="re模块">re模块</h3>
<p>python提供了re模块，包含所有正则表达式的功能，由于python的字符串本身也用<code>\</code>转义，所以在字符串需要转义时，在字符串前面加<code>r</code>前缀。如</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s=<span class="string">&#x27;ABc\\-001&#x27;</span><span class="comment">#python的字符串，其对应的正则表达式字符串变成&#x27;ABc\-001&#x27;</span></span><br><span class="line">s=<span class="string">r&#x27;ABc\-001&#x27;</span><span class="comment">#其对应的正则表达式字符串不变&#x27;ABc\-001&#x27;</span></span><br></pre></td></tr></table></figure>
<p>用<code>re</code>模块的match()方法判断正则表达式是否匹配，若匹配成功，返回一个<code>match</code>对象，否则返回<code>None</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(<span class="string">r&#x27;^\d&#123;3&#125;\-\d&#123;3,8&#125;$&#x27;</span>,<span class="string">&#x27;010-12345&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(<span class="string">r&#x27;^\d&#123;3&#125;\-\d&#123;3,8&#125;$&#x27;</span>,<span class="string">&#x27;010 12345&#x27;</span>))</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">&lt;re.Match <span class="built_in">object</span>; span=(<span class="number">0</span>, <span class="number">9</span>), <span class="keyword">match</span>=<span class="string">&#x27;010-12345&#x27;</span>&gt;</span><br><span class="line"><span class="literal">None</span></span><br></pre></td></tr></table></figure>
<p>常见的判断方法是：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">test=<span class="string">&#x27;用户输入的字符串&#x27;</span></span><br><span class="line"><span class="keyword">if</span> re.<span class="keyword">match</span>(<span class="string">r&#x27;正则表达式&#x27;</span>,test):</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&#x27;ok&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&#x27;failed&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="切分字符串">切分字符串</h3>
<p>如果用户输入了一组标签，记得用正则表达式把不规范的输转化成正确的数组。</p>
<p>正常的切分代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a b   c&#x27;</span>.split(<span class="string">&#x27; &#x27;</span>))</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br></pre></td></tr></table></figure>
<p>用正则表达式切分字符串：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="built_in">print</span>(re.split(<span class="string">r&#x27;\s+&#x27;</span>,<span class="string">&#x27;a b    c&#x27;</span>))</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br></pre></td></tr></table></figure>
<p>往字符串里增加<code>,</code>，<code>:</code>，<code>;</code>等符号，正则表达式切分：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="built_in">print</span>(re.split(<span class="string">r&#x27;[\s+\,\:\;]+&#x27;</span>,<span class="string">&#x27;a b  c,d : ;  c&#x27;</span>))</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br></pre></td></tr></table></figure>
<h3 id="分组">分组</h3>
<p>除了简单判断是否匹配外，正则表达式还有提取子串的强大功能。用<code>()</code>表示的是要提取的分组。</p>
<p>比如<code>^(\d&#123;3&#125;)-(\d&#123;3,8&#125;)$</code>分别定义了两个组，可以直接从匹配的字符串中提取 出区号和本地号码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">m=re.<span class="keyword">match</span>(<span class="string">r&#x27;^(\d&#123;3&#125;)-(\d&#123;3,8&#125;)$&#x27;</span>,<span class="string">&#x27;010-12345&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="built_in">print</span>(m.group(<span class="number">0</span>))</span><br><span class="line"><span class="built_in">print</span>(m.group(<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(m.group(<span class="number">2</span>))</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">&lt;re.Match <span class="built_in">object</span>; span=(<span class="number">0</span>, <span class="number">9</span>), <span class="keyword">match</span>=<span class="string">&#x27;010-12345&#x27;</span>&gt;</span><br><span class="line"><span class="number">0</span>10-<span class="number">12345</span></span><br><span class="line"><span class="number">0</span>10</span><br><span class="line"><span class="number">12345</span></span><br></pre></td></tr></table></figure>
<p>正则表达式可以直接识别合法的时间，但有时用正则表达式也无法做到完全验证。</p>
<p>比如识别日期：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">t=<span class="string">&#x27;19:05:30&#x27;</span></span><br><span class="line">g=<span class="string">&#x27;2-30&#x27;</span><span class="comment">#2-30为非法日期</span></span><br><span class="line"><span class="comment">#识别时间</span></span><br><span class="line">m=re.<span class="keyword">match</span>(<span class="string">r&#x27;^(0[0-9]|1[0-9]|2[0-3]|[0-9])\:(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|[0-9])\:(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|[0-9])$&#x27;</span>,t)</span><br><span class="line"><span class="comment">#识别日期</span></span><br><span class="line">x=re.<span class="keyword">match</span>(<span class="string">r&#x27;^(0[1-9]|1[0-2]|[0-9])-(0[1-9]|1[0-9]|2[0-9]|3[0-1]|[0-9])$&#x27;</span>,g)</span><br><span class="line"><span class="built_in">print</span>(m.groups())</span><br><span class="line"><span class="built_in">print</span>(x.groups())</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">(<span class="string">&#x27;19&#x27;</span>, <span class="string">&#x27;05&#x27;</span>, <span class="string">&#x27;30&#x27;</span>)</span><br><span class="line">(<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;30&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="贪婪匹配">贪婪匹配</h3>
<p>正则匹配默认是贪婪匹配，即匹配尽可能多的字符。若要采用非贪婪匹配，则需要在需要采用非贪婪匹配的字符后面加个<code>?</code>号。</p>
<p>如要匹配出数字后面的<code>0</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(<span class="string">r&#x27;^(\d+)(0*)$&#x27;</span>,<span class="string">&#x27;102300&#x27;</span>).groups())<span class="comment">#\d+采用的是贪婪匹配</span></span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(<span class="string">r&#x27;^(\d+?)(0*)$&#x27;</span>,<span class="string">&#x27;102300&#x27;</span>).groups())<span class="comment">#\d+采用非贪婪匹配</span></span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">(<span class="string">&#x27;102300&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">(<span class="string">&#x27;1023&#x27;</span>, <span class="string">&#x27;00&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="编译">编译</h3>
<p>当在python中使用正则表达式时，re模块内部会干两件事：</p>
<ul>
<li>编译正则表达式，若正则表达式的字符串本身不合法，会报错</li>
<li>用编译后的正则表达式取匹配字符串</li>
</ul>
<p>若一个<strong>正则表达式需要重复使用几千次</strong>，处于效率考虑，可以<strong>对该正则表达式进行预编译</strong>，这样后面重复使用时就不需要编译了，可直接匹配。编译后生成Regular Expression对象，由于该对象已经包含了正则表达式，因而调用对应的方法时不用给出正则字符串。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">re_telephone=re.<span class="built_in">compile</span>(<span class="string">r&#x27;^(\d&#123;3&#125;)-(\d&#123;3,8&#125;)$&#x27;</span>)<span class="comment">#编译</span></span><br><span class="line"><span class="comment">#使用</span></span><br><span class="line"><span class="built_in">print</span>(re_telephone.<span class="keyword">match</span>(<span class="string">&#x27;010-12345&#x27;</span>).groups())</span><br><span class="line"><span class="built_in">print</span>(re_telephone.<span class="keyword">match</span>(<span class="string">&#x27;010-1225&#x27;</span>).groups())</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">(<span class="string">&#x27;010&#x27;</span>, <span class="string">&#x27;12345&#x27;</span>)</span><br><span class="line">(<span class="string">&#x27;010&#x27;</span>, <span class="string">&#x27;1225&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="练习题">练习题</h3>
<p>请尝试写一个验证Email地址的正则表达式。版本一应该可以验证出类似的Email：</p>
<ul>
<li><p>someone@gmail.com</p></li>
<li><p>bill.gates@microsoft.com</p>
<p>代码如下：</p></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_valid_email</span>(<span class="params">addr</span>):</span><br><span class="line">    <span class="keyword">if</span> re.<span class="keyword">match</span>(<span class="string">r&#x27;^([a-zA-Z\.]+)@([0-9a-zA-Z]+).com$&#x27;</span>,addr):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"><span class="keyword">assert</span> is_valid_email(<span class="string">&#x27;someone@gmail.com&#x27;</span>)</span><br><span class="line"><span class="keyword">assert</span> is_valid_email(<span class="string">&#x27;bill.gates@microsoft.com&#x27;</span>)</span><br><span class="line"><span class="keyword">assert</span> <span class="keyword">not</span> is_valid_email(<span class="string">&#x27;bob#example.com&#x27;</span>)</span><br><span class="line"><span class="keyword">assert</span> <span class="keyword">not</span> is_valid_email(<span class="string">&#x27;mr-bob@example.com&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;ok&#x27;</span>)    </span><br><span class="line"></span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">ok</span><br></pre></td></tr></table></figure>
<p>版本二可以提取出带名字的Email地址：</p>
<ul>
<li><Tom paris> tom@voyager.org =&gt; Tom Paris</Tom></li>
<li>bob@example.com =&gt; bob</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">name_of_email</span>(<span class="params">addr</span>):</span><br><span class="line">    t=re.<span class="keyword">match</span>(<span class="string">r&#x27;^&lt;?([a-zA-Z]+\s?[a-zA-Z]+)&gt;?\s?([a-zA-Z])*@([a-zA-Z]+\.[a-zA-Z]+)$&#x27;</span>,addr)</span><br><span class="line">    <span class="keyword">return</span> t.group(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 测试:</span></span><br><span class="line"><span class="keyword">assert</span> name_of_email(<span class="string">&#x27;&lt;Tom Paris&gt; tom@voyager.org&#x27;</span>) == <span class="string">&#x27;Tom Paris&#x27;</span></span><br><span class="line"><span class="keyword">assert</span> name_of_email(<span class="string">&#x27;tom@voyager.org&#x27;</span>) == <span class="string">&#x27;tom&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;ok&#x27;</span>)</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">ok</span><br></pre></td></tr></table></figure>
<h1 id="访问数据库">访问数据库</h1>
<h2 id="使用sqlite">使用SQLite</h2>
<p>一个数据库连接称为<code>connection</code>，连接到数据库后，需要打开游标，称之为<code>Cursor</code>，通过<code>Cursor</code>执行SQL语句，然后获得执行结果。<strong>执行插入等操作后要调用<code>commit()</code>提交事务。</strong></p>
<p>由于SQLite的驱动内置在python标准库中，故可以直接操作SQLite数据库。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3<span class="comment">#导入数据库</span></span><br><span class="line"><span class="comment">#连接到数据库，数据库文件是test.db。若文件不存在会自动在当前目录创建</span></span><br><span class="line">conn=sqlite3.connect(<span class="string">&#x27;test.db&#x27;</span>)</span><br><span class="line">cursor=conn.cursor()<span class="comment">#创建一个cursor</span></span><br><span class="line"><span class="comment">#print(cursor.execute(&#x27;drop table user&#x27;))#删除user表</span></span><br><span class="line"><span class="built_in">print</span>(cursor.execute(<span class="string">&#x27;create table user (id varchar(20)  primary key, name varchar(20))&#x27;</span>))<span class="comment">#创建user表</span></span><br><span class="line"><span class="built_in">print</span>(cursor.execute(<span class="string">&#x27;insert into user (id,name) values (\&#x27;1\&#x27;,\&#x27;Michael\&#x27;)&#x27;</span>))<span class="comment">#往表中插入一条记录</span></span><br><span class="line"><span class="built_in">print</span>(cursor.rowcount)<span class="comment">#获得插入的行数</span></span><br><span class="line"><span class="built_in">print</span>(cursor.execute(<span class="string">&#x27;select * from user where id=?&#x27;</span>, (<span class="string">&#x27;1&#x27;</span>,)))<span class="comment">#查询表中记录</span></span><br><span class="line"><span class="built_in">print</span>(cursor.fetchall())<span class="comment">#输出表中记录</span></span><br><span class="line">conn.commit<span class="comment">#提交事务</span></span><br><span class="line">conn.close()<span class="comment">#关闭Cursor</span></span><br><span class="line">conn.close()<span class="comment">#关闭连接</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">&lt;sqlite3.Cursor <span class="built_in">object</span> at <span class="number">0x0000027546A17BC0</span>&gt;</span><br><span class="line">&lt;sqlite3.Cursor <span class="built_in">object</span> at <span class="number">0x0000027546A17BC0</span>&gt;</span><br><span class="line"><span class="number">1</span></span><br><span class="line">&lt;sqlite3.Cursor <span class="built_in">object</span> at <span class="number">0x0000027546A17BC0</span>&gt;</span><br><span class="line">[(<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;Michael&#x27;</span>)]</span><br></pre></td></tr></table></figure>
<h3 id="练习题-1">练习题</h3>
<p>请编写函数，在Sqlite中根据分数段查找指定的名字：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os, sqlite3</span><br><span class="line"></span><br><span class="line">db_file = os.path.join(os.path.dirname(__file__), <span class="string">&#x27;test.db&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> os.path.isfile(db_file):</span><br><span class="line">    os.remove(db_file)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始数据:</span></span><br><span class="line">conn = sqlite3.connect(db_file)</span><br><span class="line">cursor = conn.cursor()</span><br><span class="line"><span class="comment">#cursor.execute(&#x27;drop table user&#x27;)</span></span><br><span class="line">cursor.execute(<span class="string">&#x27;create table user(id varchar(20) primary key, name varchar(20), score int)&#x27;</span>)</span><br><span class="line">cursor.execute(<span class="string">r&quot;insert into user values (&#x27;A-001&#x27;, &#x27;Adam&#x27;, 95)&quot;</span>)</span><br><span class="line">cursor.execute(<span class="string">r&quot;insert into user values (&#x27;A-002&#x27;, &#x27;Bart&#x27;, 62)&quot;</span>)</span><br><span class="line">cursor.execute(<span class="string">r&quot;insert into user values (&#x27;A-003&#x27;, &#x27;Lisa&#x27;, 78)&quot;</span>)</span><br><span class="line">conn.commit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_score_in</span>(<span class="params">low, high</span>):</span><br><span class="line">    <span class="string">&#x27; 返回指定分数区间的名字，按分数从低到高排序 &#x27;</span></span><br><span class="line">    cursor.execute(<span class="string">&#x27;select name from user where score between ? and ? order by score&#x27;</span>,(low,high))</span><br><span class="line">    <span class="keyword">return</span> [n[<span class="number">0</span>] <span class="keyword">for</span> n <span class="keyword">in</span> cursor.fetchall()]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试:</span></span><br><span class="line"><span class="keyword">assert</span> get_score_in(<span class="number">80</span>, <span class="number">95</span>) == [<span class="string">&#x27;Adam&#x27;</span>], get_score_in(<span class="number">80</span>, <span class="number">95</span>)</span><br><span class="line"><span class="keyword">assert</span> get_score_in(<span class="number">60</span>, <span class="number">80</span>) == [<span class="string">&#x27;Bart&#x27;</span>, <span class="string">&#x27;Lisa&#x27;</span>], get_score_in(<span class="number">60</span>, <span class="number">80</span>)</span><br><span class="line"><span class="keyword">assert</span> get_score_in(<span class="number">60</span>, <span class="number">100</span>) == [<span class="string">&#x27;Bart&#x27;</span>, <span class="string">&#x27;Lisa&#x27;</span>, <span class="string">&#x27;Adam&#x27;</span>], get_score_in(<span class="number">60</span>, <span class="number">100</span>)</span><br><span class="line">cursor.close()</span><br><span class="line">conn.close()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Pass&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">Pass</span><br></pre></td></tr></table></figure>
<h2 id="使用mysql">使用MySQL</h2>
<p>连接到MySQL服务器的test数据库的命令绝大部分与SQLite相同，仅在连接数据库的部分有所差别，注意MySQL的占位符是<code>%s</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入MySQL驱动:</span></span><br><span class="line"><span class="keyword">import</span> mysql.connector</span><br><span class="line"><span class="comment"># 注意把password设为你的root口令:</span></span><br><span class="line">conn =</span><br><span class="line">mysql.connector.connect(user=<span class="string">&#x27;root&#x27;</span>, password=<span class="string">&#x27;password&#x27;</span>, database=<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line">cursor = conn.cursor()</span><br><span class="line"><span class="comment"># 插入一行记录，注意MySQL的占位符是%s:</span></span><br><span class="line">cursor.execute(<span class="string">&#x27;insert into user (id, name) values (%s, %s)&#x27;</span>, [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;Michael&#x27;</span>])</span><br></pre></td></tr></table></figure>
<h2 id="使用sqlalchemy">使用<code>SQLAlchemy</code></h2>
<p><code>SQLAlchemy</code>是有名的ORM框架，其可以把数据库表的一行记录与一个对象相互做自动转换。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tkinter.tix <span class="keyword">import</span> Tree</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Column,String,create_engine</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"></span><br><span class="line">Base=declarative_base()<span class="comment">#创建对象基类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(<span class="title class_ inherited__">Base</span>):<span class="comment">#定义user对象</span></span><br><span class="line">    __tablename__=<span class="string">&#x27;user&#x27;</span><span class="comment">#表名</span></span><br><span class="line">    <span class="built_in">id</span>=Column(String(<span class="number">20</span>),primary_key=<span class="literal">True</span>)</span><br><span class="line">    name=Column(String(<span class="number">20</span>))</span><br><span class="line">engine=create_engine(<span class="string">&#x27;mysql+mysqlconnector://root:password@localhost:3306/test&#x27;</span>)    <span class="comment">#初始化数据库连接</span></span><br><span class="line">DBSession=sessionmaker(bind=engine)<span class="comment">#创建DBSession类型</span></span><br><span class="line">session=DBSession()<span class="comment">#创建session对象</span></span><br><span class="line">new_user=User(<span class="built_in">id</span>=<span class="string">&#x27;5&#x27;</span>,name=<span class="string">&#x27;Bob&#x27;</span>)<span class="comment">#创建新User对象   </span></span><br><span class="line">session.add(new_user)<span class="comment">#添加到session</span></span><br><span class="line">session.commit()<span class="comment">#提交到数据库</span></span><br><span class="line">session.close()<span class="comment">#关闭session</span></span><br></pre></td></tr></table></figure>
<p>查询数据如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">session=DBSession()<span class="comment">#创建session对象</span></span><br><span class="line"><span class="comment">#创建Query查询，filter是where条件，最后调用one()返回唯一行，如果调用all()则返回所有行:</span></span><br><span class="line">user=session.query(User).<span class="built_in">filter</span>(User.<span class="built_in">id</span>=<span class="string">&#x27;5&#x27;</span>).one()</span><br><span class="line"><span class="comment"># 打印类型和对象的name属性:</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;type:&#x27;</span>,<span class="built_in">type</span>(user))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;name:&#x27;</span>,user.name)</span><br><span class="line">session.close()</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line"><span class="built_in">type</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;__main__.User&#x27;</span>&gt;</span><br><span class="line">name: Bob</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python学习笔记(十三)</title>
    <url>/2022/10/24/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[<h1 id="常用内建模块">常用内建模块</h1>
<h2 id="datetime">datetime</h2>
<p>datetime是python处理时间和日期的标准库。</p>
<h3 id="获取当前日期和时间">获取当前日期和时间</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line">now=datetime.now()</span><br><span class="line"><span class="built_in">print</span>(now)</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line"><span class="number">2022</span>-<span class="number">10</span>-<span class="number">13</span> <span class="number">16</span>:01:<span class="number">58.422125</span></span><br></pre></td></tr></table></figure>
<h3 id="获取指定日期和时间">获取指定日期和时间</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line">dt=datetime(<span class="number">2022</span>,<span class="number">4</span>,<span class="number">19</span>,<span class="number">12</span>,<span class="number">22</span>)</span><br><span class="line"><span class="built_in">print</span>(dt)</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line"><span class="number">2022</span>-04-<span class="number">19</span> <span class="number">12</span>:<span class="number">22</span>:<span class="number">00</span></span><br></pre></td></tr></table></figure>
<h3 id="datetime转换为timestamp">datetime转换为timestamp</h3>
<p>在计算机中时间是用数字表示的，1970年1月1日 00:00:00 UTC+00:00时区的时刻称为epoch time，记为0，<strong>当前时间就是相对于epoch time的秒数</strong>称为timestamp。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line">dt=datetime(<span class="number">2022</span>,<span class="number">4</span>,<span class="number">19</span>,<span class="number">12</span>,<span class="number">22</span>)</span><br><span class="line"><span class="built_in">print</span>(dt.timestamp())</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line"><span class="number">1650342120.0</span></span><br></pre></td></tr></table></figure>
<h3 id="timestamp转换为datetime">timestamp转换为datetime</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line">dt=<span class="number">1650342120.0</span></span><br><span class="line"><span class="built_in">print</span>(datetime.fromtimestamp(dt))</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line"><span class="number">2022</span>-04-<span class="number">19</span> <span class="number">12</span>:<span class="number">22</span>:<span class="number">00</span></span><br></pre></td></tr></table></figure>
<h3 id="str转换为datetime">str转换为datetime</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line">dt=datetime.strptime(<span class="string">&#x27;2022-04-19 12:22:00&#x27;</span>,<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(dt)</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line"><span class="number">2022</span>-04-<span class="number">19</span> <span class="number">12</span>:<span class="number">22</span>:<span class="number">00</span></span><br></pre></td></tr></table></figure>
<h3 id="datetime转换为str">datetime转换为str</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line">now=datetime.now()</span><br><span class="line"><span class="built_in">print</span>(now.strftime(<span class="string">&#x27;%a, %b %d %H:%M&#x27;</span>))</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">Thu, Oct <span class="number">13</span> <span class="number">16</span>:<span class="number">13</span></span><br></pre></td></tr></table></figure>
<h3 id="datetime加减">datetime加减</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime,timedelta</span><br><span class="line">now=datetime.now()</span><br><span class="line"><span class="built_in">print</span>(now)</span><br><span class="line"><span class="built_in">print</span>(now+timedelta(hours=<span class="number">10</span>))</span><br><span class="line"><span class="built_in">print</span>(now+timedelta(days=<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(now+timedelta(days=<span class="number">2</span>,hours=<span class="number">12</span>))</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line"><span class="number">2022</span>-<span class="number">10</span>-<span class="number">13</span> <span class="number">16</span>:<span class="number">17</span>:<span class="number">44.344550</span></span><br><span class="line"><span class="number">2022</span>-<span class="number">10</span>-<span class="number">14</span> 02:<span class="number">17</span>:<span class="number">44.344550</span></span><br><span class="line"><span class="number">2022</span>-<span class="number">10</span>-<span class="number">14</span> <span class="number">16</span>:<span class="number">17</span>:<span class="number">44.344550</span></span><br><span class="line"><span class="number">2022</span>-<span class="number">10</span>-<span class="number">16</span> 04:<span class="number">17</span>:<span class="number">44.344550</span></span><br></pre></td></tr></table></figure>
<h3 id="本地时间转换为utc时间">本地时间转换为UTC时间</h3>
<p>本地时间是指系统设定时区的时间，如北京时间是UTC+8:00，UTC时间是指UTC+0:00时区的时间。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime,timedelta,timezone</span><br><span class="line">tz_utc_8=timezone(timedelta(hours=<span class="number">8</span>))</span><br><span class="line">now=datetime.now()</span><br><span class="line"><span class="built_in">print</span>(now)</span><br><span class="line">dt=now.replace(tzinfo=tz_utc_8)</span><br><span class="line"><span class="built_in">print</span>(dt)</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line"><span class="number">2022</span>-<span class="number">10</span>-<span class="number">13</span> <span class="number">16</span>:<span class="number">25</span>:<span class="number">07.688476</span></span><br><span class="line"><span class="number">2022</span>-<span class="number">10</span>-<span class="number">13</span> <span class="number">16</span>:<span class="number">25</span>:<span class="number">07.688476</span>+08:<span class="number">00</span></span><br></pre></td></tr></table></figure>
<h3 id="时区转换">时区转换</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime,timedelta,timezone</span><br><span class="line">utc_dt=datetime.utcnow().replace(tzinfo=timezone.utc)<span class="comment">#拿到utc时间并设置时区为UTC+0:00</span></span><br><span class="line"><span class="built_in">print</span>(utc_dt)</span><br><span class="line">bj_dt=utc_dt.astimezone(timezone(timedelta(hours=<span class="number">8</span>)))<span class="comment">#将转换时区为北京时间</span></span><br><span class="line"><span class="built_in">print</span>(bj_dt)</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line"><span class="number">2022</span>-<span class="number">10</span>-<span class="number">13</span> 08:<span class="number">28</span>:<span class="number">08.363061</span>+<span class="number">00</span>:<span class="number">00</span></span><br><span class="line"><span class="number">2022</span>-<span class="number">10</span>-<span class="number">13</span> <span class="number">16</span>:<span class="number">28</span>:<span class="number">08.363061</span>+08:<span class="number">00</span></span><br></pre></td></tr></table></figure>
<h2 id="collections">collections</h2>
<p>collections是Python内建的一个集合模块，提供了许多有用的集合类。</p>
<h3 id="namedtuple">namedtuple</h3>
<p>namedtuple是一个函数，用来创建一个自定义的tuple对象，并规定了tuple元素的个数，可以用属性而不是索引来引用tuple的某个元素：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line">Point=namedtuple(<span class="string">&#x27;Point&#x27;</span>,[<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;y&#x27;</span>])</span><br><span class="line">Circle=namedtuple(<span class="string">&#x27;Circle&#x27;</span>,[<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;y&#x27;</span>,<span class="string">&#x27;r&#x27;</span>])</span><br><span class="line">p=Point(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">c=Circle(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(p,Point))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(p,<span class="built_in">tuple</span>))</span><br><span class="line"><span class="built_in">print</span>(p.x,p.y)</span><br><span class="line"><span class="built_in">print</span>(c.x,c.y,c.r)</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br></pre></td></tr></table></figure>
<h3 id="deque">deque</h3>
<p>deque可以高效实现插入和删除操作的双向列表，适合用于队列和栈：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque </span><br><span class="line">q=deque([<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>])</span><br><span class="line">q.append(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">q.appendleft(<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(q)</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">deque([<span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;x&#x27;</span>])</span><br></pre></td></tr></table></figure>
<p>除此之外，还支持pop()、popleft()等方法，可以非常高效地往头部添加或删除元素。</p>
<h3 id="defaultdict">defaultdict</h3>
<p>使用dict时，若引用的Key不存在，就会抛出<code>KeyError</code>，若希望Key不存在时返回一个默认值，可以用defaultdict：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line">d=defaultdict(<span class="keyword">lambda</span>:<span class="string">&#x27;N/A&#x27;</span>)</span><br><span class="line">d[<span class="string">&#x27;key1&#x27;</span>]=<span class="string">&#x27;abc&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(d[<span class="string">&#x27;key1&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(d[<span class="string">&#x27;key2&#x27;</span>])</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">abc</span><br><span class="line">N/A</span><br></pre></td></tr></table></figure>
<p>默认值是调用函数返回的，而函数在创建defaultdict对象时传入。</p>
<h3 id="ordereddict">OrderedDict</h3>
<p>使用dict时，Key是无序的。若要保持Key的顺序，可以用OrderedDict：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDict</span><br><span class="line">d=<span class="built_in">dict</span>([(<span class="string">&#x27;c&#x27;</span>,<span class="number">1</span>),(<span class="string">&#x27;a&#x27;</span>,<span class="number">2</span>),(<span class="string">&#x27;b&#x27;</span>,<span class="number">3</span>)])</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line">od=OrderedDict([(<span class="string">&#x27;b&#x27;</span>,<span class="number">1</span>),(<span class="string">&#x27;a&#x27;</span>,<span class="number">2</span>),(<span class="string">&#x27;c&#x27;</span>,<span class="number">3</span>)])</span><br><span class="line"><span class="built_in">print</span>(od)</span><br><span class="line">odd=OrderedDict()</span><br><span class="line">odd[<span class="string">&#x27;x&#x27;</span>]=<span class="number">1</span></span><br><span class="line">odd[<span class="string">&#x27;z&#x27;</span>]=<span class="number">2</span></span><br><span class="line">odd[<span class="string">&#x27;y&#x27;</span>]=<span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(odd.keys()))<span class="comment">#OrderedDict的Key按照插入的顺序排序，并非是Key自身的顺序，即odd是按插入值的前后排序，而不是根据&#x27;x&#x27;、&#x27;y&#x27;、&#x27;z&#x27;的顺序排</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">&#123;<span class="string">&#x27;c&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">3</span>&#125;</span><br><span class="line">OrderedDict([(<span class="string">&#x27;b&#x27;</span>, <span class="number">1</span>), (<span class="string">&#x27;a&#x27;</span>, <span class="number">2</span>), (<span class="string">&#x27;c&#x27;</span>, <span class="number">3</span>)])</span><br><span class="line">[<span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;y&#x27;</span>]</span><br></pre></td></tr></table></figure>
<p>OrderedDict可以实现一个先进先出的dict，当容量超出限制时，先删除最早添加的Key。</p>
<h3 id="chainmap">ChainMap</h3>
<p>ChainMap可以把一组dict串起来组成一个大的dict。但在查找数据时会按照顺序在内部的dict依次查找。</p>
<p>例如，使用ChainMap来实现参数的优先级查找，其顺序为：命令行参数&gt;环境变量&gt;默认参数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> ChainMap</span><br><span class="line"><span class="keyword">from</span> email.policy <span class="keyword">import</span> default</span><br><span class="line"><span class="keyword">import</span> os,argparse</span><br><span class="line"><span class="comment"># 构造默认参数:</span></span><br><span class="line">defaults=&#123;</span><br><span class="line">    <span class="string">&#x27;color&#x27;</span>:<span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;user&#x27;</span>:<span class="string">&#x27;guest&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#构造命令行参数:</span></span><br><span class="line">parser=argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-u&#x27;</span>,<span class="string">&#x27;--user&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-c&#x27;</span>,<span class="string">&#x27;--color&#x27;</span>)</span><br><span class="line">namespace=parser.parse_args()</span><br><span class="line">command_line_args=&#123;k :v <span class="keyword">for</span> k,v <span class="keyword">in</span> <span class="built_in">vars</span>(namespace).items() <span class="keyword">if</span> v&#125;</span><br><span class="line"><span class="comment">#组合成ChainMap:</span></span><br><span class="line">combined=ChainMap(command_line_args,os.environ,defaults)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;color=%s&#x27;</span> % combined[<span class="string">&#x27;color&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;user=%s&#x27;</span> % combined[<span class="string">&#x27;user&#x27;</span>])</span><br></pre></td></tr></table></figure>
<p>打开cmd，将路径切换到当前<code>.py</code>文件所在的目录，运行代码：</p>
<p>在没有任何参数传入时，打印出默认参数：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\Administrator\Desktop&gt;python learn.py</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">color=red</span><br><span class="line">user=guest</span><br></pre></td></tr></table></figure>
<p>当传入命令行参数时，优先使用命令行参数：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\Administrator\Desktop&gt;python learn.py -u bob</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">color=red</span><br><span class="line">user=bob</span><br></pre></td></tr></table></figure>
<p>当同时传入命令行参数和环境变量时，也是优先使用命令行参数。</p>
<h3 id="counter">Counter</h3>
<p>Counter是一个简单的计数器，也是dict的一个子类，可以统计字符出现的个数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line">c=Counter()</span><br><span class="line"><span class="keyword">for</span> ch <span class="keyword">in</span> <span class="string">&#x27;programming&#x27;</span>:</span><br><span class="line">    c[ch]=c[ch]+<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(c)    </span><br><span class="line">c.update(<span class="string">&#x27;hello&#x27;</span>)<span class="comment">#更新数据</span></span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">Counter(&#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;g&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;m&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;p&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;o&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;i&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;n&#x27;</span>: <span class="number">1</span>&#125;)</span><br><span class="line">Counter(&#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;o&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;g&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;m&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;l&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;p&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;i&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;n&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;h&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;e&#x27;</span>: <span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="base64">base64</h2>
<p>Base64是一种用64个字符来表示任意二进制数据的方法。</p>
<h2 id="struct">struct</h2>
<p>struct可以解决<code>bytes</code>和其他二进制数据类型的转换。</p>
<h2 id="hashlib">hashlib</h2>
<p>Python的hashlib提供了常见的摘要算法，如MD5，SHA1等等。</p>
<p>摘要算法又称哈希算法、散列算法。它通过一个函数，把任意长度的数据转换为一个长度固定的数据串（通常用16进制的字符串表示）。</p>
<h2 id="hmac">hmac</h2>
<p>Python自带的hmac模块实现了标准的Hmac算法，通过一个标准算法，在计算哈希的过程中，把key混入计算过程中。</p>
<h2 id="itertools">itertools</h2>
<p>Python的内建模块<code>itertools</code>提供了非常有用的用于操作迭代对象的函数。</p>
<h2 id="contextlib">contextlib</h2>
<p>在Python中，读写文件这样的资源要特别注意，必须在使用完毕后正确关闭它们。Python的标准库<code>contextlib</code>提供了更简单的写法，以实现上下文管理。</p>
<h2 id="urllib">urllib</h2>
<p>urllib提供了一系列用于操作URL的功能。</p>
<h3 id="get">Get</h3>
<p>urllib的<code>request</code>模块可以非常方便地抓取URL内容，也就是发送一个GET请求到指定的页面，然后返回HTTP的响应。例如，对百度网址进行抓取，并返回响应：：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> request.urlopen(<span class="string">&#x27;https://baidu.com/&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = f.read()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Status:&#x27;</span>, f.status, f.reason)</span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> f.getheaders():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s: %s&#x27;</span> % (k, v))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Data:&#x27;</span>, data.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">Status: <span class="number">200</span> OK</span><br><span class="line">Bdpagetype: <span class="number">1</span></span><br><span class="line">Bdqid: <span class="number">0x8dfa7ad90002130f</span></span><br><span class="line">Content-<span class="type">Type</span>: text/html; charset=utf-<span class="number">8</span></span><br><span class="line">Date: Mon, <span class="number">24</span> Oct <span class="number">2022</span> 09:01:<span class="number">21</span> GMT</span><br><span class="line">...</span><br><span class="line">Data: &lt;!DOCTYPE html&gt;&lt;!--STATUS OK--&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html;charset=utf-8&quot;</span>&gt;&lt;meta http-equiv=<span class="string">&quot;X-UA-Compatible&quot;</span> content=<span class="string">&quot;IE=edge,chrome=1&quot;</span>&gt;&lt;meta content=<span class="string">&quot;always&quot;</span> name=<span class="string">&quot;referrer&quot;</span>&gt;&lt;meta name=<span class="string">&quot;theme-color&quot;</span> content=<span class="string">&quot;#ffffff&quot;</span>&gt;&lt;meta name=<span class="string">&quot;description&quot;</span> content=<span class="string">&quot;全球领先的中文...</span></span><br></pre></td></tr></table></figure>
<p>若要模拟浏览器发送GET请求，需要使用<code>Request</code>对象，通过往<code>Request</code>对象添加HTTP头，可以把请求伪装成浏览器。例如，模拟iPhone 6去请求豆瓣首页：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line">req = request.Request(<span class="string">&#x27;http://www.douban.com/&#x27;</span>)</span><br><span class="line">req.add_header(<span class="string">&#x27;User-Agent&#x27;</span>, <span class="string">&#x27;Mozilla/6.0 (iPhone; CPU iPhone OS 8_0 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Version/8.0 Mobile/10A5376e Safari/8536.25&#x27;</span>)</span><br><span class="line"><span class="keyword">with</span> request.urlopen(req) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Status:&#x27;</span>, f.status, f.reason)</span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> f.getheaders():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s: %s&#x27;</span> % (k, v))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Data:&#x27;</span>, f.read().decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html itemscope itemtype=<span class="string">&quot;http://schema.org/WebPage&quot;</span> <span class="keyword">class</span>=<span class="string">&quot;ua-safari ua-mobile &quot;</span>&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">      &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">      &lt;title&gt;豆瓣(手机版)&lt;/title&gt;</span><br><span class="line">      &lt;meta name=<span class="string">&quot;google-site-verification&quot;</span> content=<span class="string">&quot;ok0wCgT20tBBgo9_zat2iAcimtN4Ftf5ccsh092Xeyw&quot;</span> /&gt;...    </span><br></pre></td></tr></table></figure>
<h3 id="post">Post</h3>
<p>若要以POST发送一个请求，只需要把参数<code>data</code>以bytes形式传入。</p>
<p>例如模拟一个微博登录，先读取登录的邮箱和口令，然后按照weibo.cn的登录页的格式以<code>username=xxx&amp;password=xxx</code>的编码传入：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request, parse</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Login to weibo.cn...&#x27;</span>)</span><br><span class="line">email = <span class="built_in">input</span>(<span class="string">&#x27;Email: &#x27;</span>)</span><br><span class="line">passwd = <span class="built_in">input</span>(<span class="string">&#x27;Password: &#x27;</span>)</span><br><span class="line">login_data = parse.urlencode([</span><br><span class="line">    (<span class="string">&#x27;username&#x27;</span>, email),</span><br><span class="line">    (<span class="string">&#x27;password&#x27;</span>, passwd),</span><br><span class="line">    (<span class="string">&#x27;entry&#x27;</span>, <span class="string">&#x27;mweibo&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;client_id&#x27;</span>, <span class="string">&#x27;&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;savestate&#x27;</span>, <span class="string">&#x27;1&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;ec&#x27;</span>, <span class="string">&#x27;&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;pagerefer&#x27;</span>, <span class="string">&#x27;https://passport.weibo.cn/signin/welcome?entry=mweibo&amp;r=http%3A%2F%2Fm.weibo.cn%2F&#x27;</span>)</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">req = request.Request(<span class="string">&#x27;https://passport.weibo.cn/sso/login&#x27;</span>)</span><br><span class="line">req.add_header(<span class="string">&#x27;Origin&#x27;</span>, <span class="string">&#x27;https://passport.weibo.cn&#x27;</span>)</span><br><span class="line">req.add_header(<span class="string">&#x27;User-Agent&#x27;</span>, <span class="string">&#x27;Mozilla/6.0 (iPhone; CPU iPhone OS 8_0 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Version/8.0 Mobile/10A5376e Safari/8536.25&#x27;</span>)</span><br><span class="line">req.add_header(<span class="string">&#x27;Referer&#x27;</span>, <span class="string">&#x27;https://passport.weibo.cn/signin/login?entry=mweibo&amp;res=wel&amp;wm=3349&amp;r=http%3A%2F%2Fm.weibo.cn%2F&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> request.urlopen(req, data=login_data.encode(<span class="string">&#x27;utf-8&#x27;</span>)) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Status:&#x27;</span>, f.status, f.reason)</span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> f.getheaders():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s: %s&#x27;</span> % (k, v))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Data:&#x27;</span>, f.read().decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure>
<p>若登录成功，获得的响应如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Status: <span class="number">200</span> OK</span><br><span class="line">Server: nginx/<span class="number">1.2</span><span class="number">.0</span></span><br><span class="line">...</span><br><span class="line"><span class="type">Set</span>-Cookie: SSOLoginState=<span class="number">1432620126</span>; path=/; domain=weibo.cn</span><br><span class="line">...</span><br><span class="line">Data: &#123;<span class="string">&quot;retcode&quot;</span>:<span class="number">20000000</span>,<span class="string">&quot;msg&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="string">&quot;data&quot;</span>:&#123;...,<span class="string">&quot;uid&quot;</span>:<span class="string">&quot;1658384301&quot;</span>&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>若登录失败，获得的响应如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">Data: &#123;<span class="string">&quot;retcode&quot;</span>:<span class="number">50011002</span>,<span class="string">&quot;msg&quot;</span>:<span class="string">&quot;\u7528\u6237\u540d\u6216\u5bc6\u7801\u9519\u8bef&quot;</span>,<span class="string">&quot;data&quot;</span>:&#123;<span class="string">&quot;username&quot;</span>:<span class="string">&quot;123456@qq.com&quot;</span>,<span class="string">&quot;errline&quot;</span>:<span class="number">15</span>&#125;&#125;</span><br></pre></td></tr></table></figure>
<h3 id="handler">Handler</h3>
<p>若需要更复杂的控制，比如通过一个Proxy去访问网站，需要利用<code>ProxyHandler</code>来处理，例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">proxy_handler = urllib.request.ProxyHandler(&#123;<span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;http://www.example.com:3128/&#x27;</span>&#125;)</span><br><span class="line">proxy_auth_handler = urllib.request.ProxyBasicAuthHandler()</span><br><span class="line">proxy_auth_handler.add_password(<span class="string">&#x27;realm&#x27;</span>, <span class="string">&#x27;host&#x27;</span>, <span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">opener = urllib.request.build_opener(proxy_handler, proxy_auth_handler)</span><br><span class="line"><span class="keyword">with</span> opener.<span class="built_in">open</span>(<span class="string">&#x27;http://www.example.com/login.html&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<h2 id="xml">XML</h2>
<p>操作XML有两种方法：DOM和SAX。DOM会把整个XML读入内存，解析为树，因此占用内存大，解析慢，优点是可以任意遍历树的节点。SAX是流模式，边读边解析，占用内存小，解析快，缺点是我们需要自己处理事件。</p>
<p>正常情况下，优先考虑SAX，因为DOM实在太占内存。</p>
<p>在Python中使用SAX解析XML非常简洁，通常我们关心的事件是<code>start_element</code>，<code>end_element</code>和<code>char_data</code>，准备好这3个函数，然后就可以解析xml了。</p>
<h2 id="htmlparser">HTMLParser</h2>
<p>Python提供了HTMLParser来非常方便地解析HTML。</p>
<h1 id="常用第三方模块">常用第三方模块</h1>
<h2 id="pillow">Pillow</h2>
<p>PIL：Python Imaging Library，已经是Python平台事实上的图像处理标准库了。PIL功能非常强大，但API却非常简单易用。</p>
<p>由于PIL仅支持到Python 2.7，加上年久失修，于是一群志愿者在PIL的基础上创建了兼容的版本，名字叫<a href="https://github.com/python-pillow/Pillow">Pillow</a>，支持最新Python 3.x，又加入了许多新特性，因此，我们可以直接安装使用Pillow。</p>
<h2 id="requests">requests</h2>
<p>Python内置的urllib模块，用于访问网络资源。但是，它用起来比较麻烦，而且，缺少很多实用的高级功能。</p>
<p>更好的方案是使用requests。它是一个Python第三方库，处理URL资源特别方便。</p>
<p>安装request：<code>pip install requests</code></p>
<h3 id="requests的使用">requests的使用</h3>
<p>通过GET访问一个页面：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests </span><br><span class="line">r=requests.get(<span class="string">&#x27;https://www.baidu.com/&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(r.status_code)<span class="comment">#访问状态码</span></span><br><span class="line"><span class="built_in">print</span>(r.text)<span class="comment">#网页详情</span></span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line"><span class="number">200</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">&lt;!--STATUS OK--&gt;&lt;html&gt; &lt;head&gt;&lt;meta http-equiv=content-type content=text/html;charset=utf-8&gt;&lt;meta http-equiv=X-UA-Compatible content=IE=Edge&gt;&lt;meta content=always name=referrer&gt;&lt;link rel=stylesheet type=text/css ...&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>对于带参数的URL，传入一个dict作为params参数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests </span><br><span class="line">r=requests.get(<span class="string">&#x27;https://www.baidu.com/&#x27;</span>,params=&#123;<span class="string">&#x27;q&#x27;</span>:<span class="string">&#x27;python&#x27;</span>,<span class="string">&#x27;cat&#x27;</span>:<span class="string">&#x27;1001&#x27;</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(r.url)<span class="comment">#实际请求的URL</span></span><br><span class="line"><span class="built_in">print</span>(r.encoding)<span class="comment">#自动检测编码</span></span><br><span class="line"><span class="built_in">print</span>(r.content)<span class="comment">#获得bytes对象</span></span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">https://www.baidu.com/?q=python&amp;cat=<span class="number">1001</span></span><br><span class="line">ISO-<span class="number">8859</span>-<span class="number">1</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;b&#x27;&lt;!DOCTYPE html&gt;\r\n&lt;!--STATUS OK--&gt;&lt;html&gt; &lt;head&gt;&lt;meta http-equiv=content-type content=text/html;charset=utf-8&gt;&lt;meta http-equiv=X-UA-Compatible content=IE=Edge&gt;&lt;meta content=always name=referrer&gt;&lt;link rel=stylesheet type=text/css ...&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>对于特定类型的响应，例如JSON，可以直接获取：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests </span><br><span class="line"><span class="comment">#获取JSON</span></span><br><span class="line">r1=requests.get(<span class="string">&#x27;https://p.3.cn/prices/mgets?skuIds=J_10026711061553&#x27;</span>)</span><br><span class="line"><span class="comment">#需要传入HTTP Header时，传入一个dict</span></span><br><span class="line">r2=requests.get(<span class="string">&#x27;https://douban.com/&#x27;</span>,headers=&#123;<span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit&#x27;</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(r1.json())<span class="comment">#必须为JSON类型的网址</span></span><br><span class="line"><span class="built_in">print</span>(r2.text)</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">[&#123;<span class="string">&#x27;exception&#x27;</span>: <span class="string">&#x27;该接口即将下线，请联系(erp)wangjianyu1，liuhuimin9，liteng36;p.3.cn,null&#x27;</span>&#125;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">&lt;html itemscope itemtype=&quot;http://schema.org/WebPage&quot; class=&quot;ua-mobile &quot;&gt;</span></span><br><span class="line"><span class="string">  &lt;head&gt;</span></span><br><span class="line"><span class="string">      &lt;meta charset=&quot;UTF-8&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;title&gt;豆瓣(手机版)&lt;/title&gt;</span></span><br><span class="line"><span class="string">      &lt;meta name=&quot;google-site-verification&quot; content=&quot;ok0wCgT20tBBgo9_zat2iAcimtN4Ftf5ccsh092Xeyw&quot; /&gt; ...&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>需要发送POST请求，只需要把get()方法变成post()，然后传入data参数作为POST请求的数据：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">r=requests.post(<span class="string">&#x27;https://accounts.douban.com/login&#x27;</span>, data=&#123;<span class="string">&#x27;form_email&#x27;</span>: <span class="string">&#x27;abc@example.com&#x27;</span>, <span class="string">&#x27;form_password&#x27;</span>: <span class="string">&#x27;123456&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure>
<p>requests默认使用<code>application/x-www-form-urlencoded</code>对POST数据编码。如果要传递JSON数据，可以直接传入json参数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">params=&#123;<span class="string">&#x27;key&#x27;</span>: <span class="string">&#x27;value&#x27;</span>&#125;</span><br><span class="line">r=requests.post(url,json=params) <span class="comment"># 内部自动序列化为JSON</span></span><br></pre></td></tr></table></figure>
<p>类似的，上传文件需要更复杂的编码格式，但是requests把它简化成<code>files</code>参数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">upload_files=&#123;<span class="string">&#x27;file&#x27;</span>:<span class="built_in">open</span>(<span class="string">&#x27;report.xls&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>)&#125;</span><br><span class="line">r=requests.post(url,files=upload_files)</span><br></pre></td></tr></table></figure>
<p>在读取文件时，注意务必使用<code>'rb'</code>即二进制模式读取，这样获取的<code>bytes</code>长度才是文件的长度。</p>
<p>requests对获取HTTP响应的其他信息也非常简单。例如，获取响应头：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(r.headers)</span><br><span class="line"><span class="built_in">print</span>(r.headers[<span class="string">&#x27;Content-Type&#x27;</span>])</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">&#123;Content-<span class="type">Type</span><span class="string">&#x27;: &#x27;</span>text/html; charset=utf-<span class="number">8</span><span class="string">&#x27;, &#x27;</span>Transfer-Encoding<span class="string">&#x27;: &#x27;</span>chunked<span class="string">&#x27;, &#x27;</span>Content-Encoding<span class="string">&#x27;: &#x27;</span>gzip<span class="string">&#x27;, ...&#125;</span></span><br><span class="line"><span class="string">&#x27;</span>text/html; charset=utf-<span class="number">8</span><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure>
<p>requests对Cookie做了特殊处理，使得我们不必解析Cookie就可以轻松获取指定的Cookie：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(r.cookies[<span class="string">&#x27;ts&#x27;</span>])</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line"><span class="string">&#x27;example_cookie_12345&#x27;</span></span><br></pre></td></tr></table></figure>
<p>要在请求中传入Cookie，只需准备一个dict传入<code>cookies</code>参数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cs=&#123;<span class="string">&#x27;token&#x27;</span>:<span class="string">&#x27;12345&#x27;</span>,<span class="string">&#x27;status&#x27;</span>:<span class="string">&#x27;working&#x27;</span>&#125;</span><br><span class="line">r=requests.get(url,cookies=cs)</span><br></pre></td></tr></table></figure>
<p>最后，要指定超时，传入以秒为单位的timeout参数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">r=requests.get(url,timeout=<span class="number">2.5</span>) <span class="comment"># 2.5秒后超时</span></span><br></pre></td></tr></table></figure>
<h3 id="练习题">练习题</h3>
<p>参考《OA统一待办接口协议》，使用requests访问统一待办接口，给自己生成一个待办，确认生成后，调用删除接口删除待办。</p>
<p>代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests </span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="comment">#基础数据</span></span><br><span class="line">headers=&#123;<span class="string">&#x27;Content-Type&#x27;</span>:<span class="string">&#x27;application/json&#x27;</span>&#125;</span><br><span class="line">url=<span class="string">&#x27;GetToken的URL地址&#x27;</span><span class="comment">#URL地址以http://开头，后接ip形式的url</span></span><br><span class="line">url_create=<span class="string">&#x27;CreateTask的URL地址&#x27;</span></span><br><span class="line">url_del=<span class="string">&#x27;DeleteTask的URL地址&#x27;</span></span><br><span class="line">data=&#123;<span class="string">&quot;app_id&quot;</span>:<span class="string">&quot;app_id的数值&quot;</span>,<span class="string">&quot;app_secret&quot;</span>:<span class="string">&quot;app_secret的数值&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取调用凭证access_token</span></span><br><span class="line">r=requests.post(url,json=data)</span><br><span class="line">token=json.loads(r.text)[<span class="string">&#x27;access_token&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#生成待办事项</span></span><br><span class="line">data_create=&#123;<span class="string">&quot;access_token&quot;</span>:token,<span class="string">&quot;title&quot;</span>:<span class="string">&quot;20221025测试&quot;</span>,<span class="string">&quot;task_segment&quot;</span>:<span class="string">&quot;报名&quot;</span>,\</span><br><span class="line">    <span class="string">&quot;task_url&quot;</span>:<span class="string">&quot;http://tangmenjue.top/&quot;</span>,<span class="string">&quot;staff_id&quot;</span>:<span class="string">&quot;staff_id的数值&quot;</span>&#125;</span><br><span class="line">r_create=requests.post(url_create,json=data_create)</span><br><span class="line"><span class="built_in">print</span>(r_create.text)</span><br><span class="line"></span><br><span class="line">r_del=requests.post(url,json=data)</span><br><span class="line">task_id=json.loads(r_create.text)[<span class="string">&#x27;task_id&#x27;</span>]</span><br><span class="line"><span class="comment"># task_id=&#x27;17837ed5-48e4-4120-964a-477d258aaeb3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#确认待办事项已生成后，调用删除接口删除待办。</span></span><br><span class="line">data_del=&#123;<span class="string">&quot;access_token&quot;</span>:token,<span class="string">&#x27;task_id&#x27;</span>:task_id&#125;</span><br><span class="line">r_del=requests.post(url_del,json=data_del)</span><br><span class="line"><span class="built_in">print</span>(r_del.text)</span><br></pre></td></tr></table></figure>
<h2 id="chardet">chardet</h2>
<p>字符串编码一直是令人非常头疼的问题，尤其是我们在处理一些不规范的第三方网页的时候。虽然Python提供了Unicode表示的<code>str</code>和<code>bytes</code>两种数据类型，并且可以通过<code>encode()</code>和<code>decode()</code>方法转换，但是，在不知道编码的情况下，对<code>bytes</code>做<code>decode()</code>不好做。</p>
<p>对于未知编码的<code>bytes</code>，要把它转换成<code>str</code>，需要先“猜测”编码。猜测的方式是先收集各种编码的特征字符，根据特征字符判断，就能有很大概率“猜对”。</p>
<p>当然，我们肯定不能从头自己写这个检测编码的功能，这样做费时费力。chardet这个第三方库正好就派上了用场。用它来检测编码，简单易用。</p>
<h2 id="psutil">psutil</h2>
<p>在Python中获取系统信息的另一个好办法是使用<code>psutil</code>这个第三方模块。顾名思义，psutil = process and system utilities，它不仅可以通过一两行代码实现系统监控，还可以跨平台使用，支持Linux／UNIX／OSX／Windows等，是系统管理员和运维小伙伴不可或缺的必备模块。</p>
<h1 id="venv">venv</h1>
<p>在开发Python应用程序的时候，系统安装的Python3只有一个版本：3.10。所有第三方的包都会被<code>pip</code>安装到Python3的<code>site-packages</code>目录下。</p>
<p>如果我们要同时开发多个应用程序，那这些应用程序都会共用一个Python，就是安装在系统的Python 3。如果应用A需要jinja 2.7，而应用B需要jinja 2.6怎么办？</p>
<p>这种情况下，每个应用可能需要各自拥有一套“独立”的Python运行环境。venv就是用来为一个应用创建一套“隔离”的Python运行环境。</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python学习笔记（十二）</title>
    <url>/2022/10/19/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h2 id="python语言特点">python语言特点</h2>
<p>python语言特点：</p>
<ul>
<li>开源</li>
<li>免费</li>
<li>跨平台</li>
<li>解析执行</li>
</ul>
<h3 id="复制copy和deepcopy">复制=、copy()和deepcopy()</h3>
<ul>
<li>用=复制元素，原object改变，现object也随之改变</li>
<li>用copy()复制object，原object改变，现object不变，若object中包含了list，改变原object的list元素，现object的list元素也随之改变。</li>
<li>用deepcopy()复制object，原object改变，现object的任何元素都不会变。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]]</span><br><span class="line">b = a<span class="comment">#a变b也变,</span></span><br><span class="line">c = copy.copy(a)<span class="comment">#a变c不变,a里的list[&#x27;a&#x27;, &#x27;b&#x27;]变，c也会变</span></span><br><span class="line">d = copy.deepcopy(a)<span class="comment">#a变d不变，a里的list[&#x27;a&#x27;, &#x27;b&#x27;]变，d也不会变</span></span><br><span class="line">a.append(<span class="number">5</span>)</span><br><span class="line">a[<span class="number">4</span>].append(<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"><span class="comment">#运行结果如下</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>], <span class="number">5</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>], <span class="number">5</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]]</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]]</span><br></pre></td></tr></table></figure>
<h2 id="python自带的模块">Python自带的模块</h2>
<p>Python有着形形色色爬虫相关的库,以下哪个库Python自带不需要额外下载。A</p>
<p>A.urlib python内置，用于爬虫</p>
<p>B.urlib3 第三方库</p>
<p>C.Requests python内置，用于http</p>
<p>D.lxml 第三方库</p>
<h2 id="extend方法">extend方法</h2>
<p>extend() 函数用于在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表），添加数据时要用<code>[]</code>把数据括起来。</p>
<p>在Python3中，程序运行结果为： lists = [1, 1, 2, 3, 4, 5, 6] lists.remove(1) lists.extend([7,8,9]) print(lists)。C</p>
<p>A.[2,3,4,5,6]</p>
<p>B.[1,2,3,4,5,6,[7,8,9]]</p>
<p>C.[1,2,3,4,5,6,7,8,9]</p>
<p>D.[2,3,4,5,6,7,8,9]</p>
<h2 id="del方法">del方法</h2>
<p>将列表内的所有元素均删除，且列表存在，使用del方法</p>
<h2 id="字符串变换">字符串变换</h2>
<p>字符串是不可变类型，无法直接修改字符串的某一位字符。replace()函数用于替换字符串，其用法为<code>字符串序列.replace(旧子串, 新子串, 替换次数)</code>。</p>
<p>若a = 'abcd'，若想将a变为'ebcd'，则下列语句正确的是。 D</p>
<p>A.a[0] = 'e'</p>
<p>B.a.replace('a", "e')</p>
<p>C.a[1] = 'e'</p>
<p>D.a = 'e' + "bcd"</p>
<h2 id="divmod函数">divmod()函数</h2>
<p>divmod(a,b)函数把除数和余数运算结果结合起来，返回一个包含商和余数的元组(a//b,a%b)</p>
<p>下面代码的输出结果是 x=10 y=3 print(divmod(x,y))。D</p>
<p>A.(1, 3)</p>
<p>B.3,1</p>
<p>C.1,3</p>
<p>D.(3, 1)</p>
<h2 id="python2与python3除法的区别">python2与python3除法的区别</h2>
<p>在python2中，由于“地板除”的 缘故，每次除完后只剩整数。在python3中的除法是精确计算。</p>
<p>在Python3中，下列程序循环的次数为： n = 1000 while n &gt; 1: print(n) n = n / 2。B</p>
<p>A.9</p>
<p>B.10</p>
<p>C.11</p>
<p>D.无限循环</p>
<p>python2里只有9次，因为500、250、125、62、31、15、7、3、1 。python3里有10次，因为500、250、125、62.5、31.25、15.625、7.8125、3.90625、1.953125、0.9765625。</p>
<h2 id="函数返回值">函数返回值</h2>
<p>以下程序的输出结果是 def hub(ss, x = 2.0,y = 4.0): ss += x * y ss = 10 print(ss, hub(ss, 3))。B</p>
<p>A.22.0 None</p>
<p>B.10 None 函数hub设置没有返回值，ss默认为10，hub默认返回done</p>
<p>C.22 None</p>
<p>D.10.0 22.0</p>
<h2 id="python查找顺序">python查找顺序</h2>
<p>当使用import导入模块时，按python查找模块的不同顺序可划分为以下几种： ①环境变量中的PYTHONPATH ②内建模块 ③python安装路径 ④当前路径，即执行python脚本文件所在的路径 其中查找顺序正确的一组是。C</p>
<p>A.①④②③ B.②①④③ C.②④①③ D.①②③④</p>
<h2 id="range范围">range范围</h2>
<p>range(n)实际上是取值0~n-1。</p>
<p>sum([i*i for i in range(3)])的计算结果是。B</p>
<p>A.3</p>
<p>B.5</p>
<p>C.2</p>
<p>D.14</p>
<h2 id="readlines函数">readlines函数</h2>
<p><code>read(size)</code>方法，每次最多读取size个字节的内容。不需要通过close函数关闭文件。</p>
<p>关于以下代码的描述，错误的选项是()with open( ' abtxt ' , ' r+' ) as f:lines = f.readlines() for item in lines:print(item)。A</p>
<p>A.执行代码后，abc.txt文件未关闭，必须通过close()函数关闭</p>
<p>B.打印输出abc.txt文件内容</p>
<p>C.item是字符串类型</p>
<p>D.lines是列表类型</p>
<h2 id="lambda表达式">lambda表达式</h2>
<ul>
<li>lambda只是一个表达式不是代码块，而def是一个语句。</li>
<li>在内部只能包含一行代码，自动返回最后一个表达式的值，没有return，参数列表不需要用括号。</li>
<li>if、for或print语句不能用于lambda中，不能共享给其他程序调用。</li>
</ul>
<p>关于匿名函数叙述正确的是（）。ABC</p>
<p>A.lambda只是一个表达式，函数体比def简单很多</p>
<p>B.lambda的主体不是一个代码块</p>
<p>C.lambda函数只能写一行</p>
<p>D.可以访问全局变量和函数体以外的变量</p>
<h2 id="运算符优先级">运算符优先级</h2>
<ol type="1">
<li>括号：()</li>
<li>幂运算：**</li>
<li>按位取反：~</li>
<li>正号、负号：+、-</li>
<li>乘除、取模、取整除：*、/、%、//</li>
<li>加、减：+、-</li>
<li>左移、右移：&lt;&lt;、&gt;&gt;</li>
<li>按位“与”：&amp;</li>
<li>按位“异或”、按位“或”：^、|</li>
<li>比较运算符：&lt;=、&lt;、&gt;、&gt;=</li>
<li>等于、不等于：==、!=</li>
<li>赋值运算符：=、%=、/=、//、//=、-=、+=、*=、**=</li>
<li>身份运算符：is、is not</li>
<li>成员运算符：in、not in</li>
<li>逻辑运算符：and、or、not</li>
</ol>
<p>Python中，运算符由高到低为。C</p>
<p>A.逻辑运算符&gt;比较运算符&gt;赋值运算符&gt;位运算符</p>
<p>B.位运算符&gt;赋值运算符&gt;比较运算符&gt;逻辑运算符</p>
<p>C.位运算符&gt;比较运算符&gt;赋值运算符&gt;逻辑运算符</p>
<p>D.逻辑运算符&gt;赋值运算符&gt;比较运算符&gt;位运算符</p>
<p>下列哪些语句在Python中是合法的。ACD</p>
<p>A.x = y = z=1</p>
<p>B.x =(y = z+ 1)</p>
<p>C.x,y = y,x</p>
<p>D.x+= y</p>
<h2 id="for-ix-in-enumerate-函数">for i,x in enumerate() 函数</h2>
<p>enumerate是枚举的意思，把元素一个个列举出来，它返回的是元素以及对应的索引。例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>line = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i,j <span class="keyword">in</span> <span class="built_in">enumerate</span>(line):</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(i,j)</span><br><span class="line">...</span><br><span class="line"><span class="number">0</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">3</span> <span class="number">4</span></span><br><span class="line"><span class="number">4</span> <span class="number">5</span></span><br></pre></td></tr></table></figure>
<p>在Python3中，下列程序运行结果为： lists = [1, 2, 3, 4] tmp = 0 for i,j in enumerate(lists): tmp += i * j print(tmp) 。A</p>
<p>A.20 <code>tmp=0+1*2+2*3+3*4=2+6+12=20</code></p>
<p>B.30</p>
<p>C.100</p>
<p>D.None</p>
<h2 id="replace函数">replace函数</h2>
<p><strong>replace函数不会改变原string的内容。</strong></p>
<p>执行以下程序，输入”93python22”，输出结果是 w = input("请输入数字和字母构成的字符串：") for x in w: if '0'&lt;= x &lt;= '9': continue else: w.replace(x,'') print(w)。C</p>
<p>A.python9322</p>
<p>B.python</p>
<p>C.93python22</p>
<p>D.9322</p>
<h2 id="floor函数">floor函数</h2>
<p><strong>math.floor(x)函数</strong>用于将x向下取整，它接收数字/数字表达式并<strong>返回不大于数字的最大整数值</strong>。<strong>math.ceil(x)函数</strong>用于x向上取整，它接收数字/数字表达式并<strong>返回最接近的数字最小整数值</strong>。</p>
<p>以下代码运行结果是什么?0import math print math.floor(5.5)。A</p>
<p>A.5</p>
<p>B.5.0</p>
<p>C.5.5</p>
<p>D.6</p>
<h2 id="按位与计算">按位与&amp;计算</h2>
<p>python 中 &amp; (按位与) 和 | (按位或) 是把 2个数据转为二进制然后在做相应的计算。如</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">10</span>  <span class="comment"># 10的二进制为1010</span></span><br><span class="line">b = <span class="number">18</span>  <span class="comment"># 18的二进制为10010</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">按位与运算符:</span></span><br><span class="line"><span class="string">&amp; : 如果两个相应位都为1,则该位的结果为1,否则为0</span></span><br><span class="line"><span class="string">01010</span></span><br><span class="line"><span class="string">10010</span></span><br><span class="line"><span class="string">计算的结果为:</span></span><br><span class="line"><span class="string">00010</span></span><br><span class="line"><span class="string">把二进制00010转10进制结果为2,所以下面的打印结果应该为2</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(a &amp; b)  <span class="comment"># 打印结果为2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">按位或运算符:</span></span><br><span class="line"><span class="string">| : 只要对应的二个二进位有一个为1时，结果位就为1</span></span><br><span class="line"><span class="string">01010</span></span><br><span class="line"><span class="string">10010</span></span><br><span class="line"><span class="string">计算的结果为:</span></span><br><span class="line"><span class="string">11010</span></span><br><span class="line"><span class="string">把二进制11010转10进制结果为26,所以下面的打印结果应该为26</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(a | b)  <span class="comment"># 打印结果为26</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">按位异或运算符:</span></span><br><span class="line"><span class="string">^ : 当两对应的二进位相异时，结果为1</span></span><br><span class="line"><span class="string">01010</span></span><br><span class="line"><span class="string">10010</span></span><br><span class="line"><span class="string">计算的结果为:</span></span><br><span class="line"><span class="string">11000</span></span><br><span class="line"><span class="string">把二进制11000转10进制结果为24,所以下面的打印结果应该为24</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(a ^ b)  <span class="comment"># 打印结果为24</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">按位取反运算符:</span></span><br><span class="line"><span class="string">~ : 对数据的每个二进制位取反,即把1变为0,把0变为1 </span></span><br><span class="line"><span class="string">01010</span></span><br><span class="line"><span class="string">计算的结果为:</span></span><br><span class="line"><span class="string">10101</span></span><br><span class="line"><span class="string">把二进制10101转10进制结果为-11,所以下面的打印结果应该为-11</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(~a)  <span class="comment"># 打印结果为-11</span></span><br></pre></td></tr></table></figure>
<p>下面描述正确的是。ABC</p>
<p>A. 在python中逻辑与运算符不能写作&amp;&amp;，要写作and</p>
<p>B.&amp;是两个数字按二进制位作与运算的操作符</p>
<p>C.3&amp;2的结果为2 00011 00010=&gt;00010=2</p>
<p>D.3&amp;3的结果为0 00011 00011=&gt;00011=3</p>
<h2 id="python保留字符">python保留字符</h2>
<p>以下哪些是Python中的保留字符?ABCD</p>
<p>A.def</p>
<p>B.global</p>
<p>C.finally</p>
<p>D.yield</p>
<h2 id="可变数据类型和不可变数据类型">可变数据类型和不可变数据类型</h2>
<p>可变数据类型：list(列表)、dict(字典)、set(集合)</p>
<p>不可变数据类型：数值类型(int、float、bool)、string(字符串)、tuple(元组)</p>
<p>下列选项属于不可变类型的是。CD</p>
<p>A.列表</p>
<p>B.字典</p>
<p>C.元组</p>
<p>D.字符串</p>
<h2 id="python内置函数">python内置函数</h2>
<table>
<colgroup>
<col style="width: 25%">
<col style="width: 25%">
<col style="width: 25%">
<col style="width: 25%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">内置函数</th>
<th></th>
<th></th>
<th style="text-align: left;"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><strong>A</strong><a href="https://docs.python.org/zh-cn/3/library/functions.html#abs"><code>abs()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#aiter"><code>aiter()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#all"><code>all()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#any"><code>any()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#anext"><code>anext()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#ascii"><code>ascii()</code></a> <strong>B</strong><a href="https://docs.python.org/zh-cn/3/library/functions.html#bin"><code>bin()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#bool"><code>bool()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#breakpoint"><code>breakpoint()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#func-bytearray"><code>bytearray()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#func-bytes"><code>bytes()</code></a> <strong>C</strong><a href="https://docs.python.org/zh-cn/3/library/functions.html#callable"><code>callable()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#chr"><code>chr()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#classmethod"><code>classmethod()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#compile"><code>compile()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#complex"><code>complex()</code></a> <strong>D</strong><a href="https://docs.python.org/zh-cn/3/library/functions.html#delattr"><code>delattr()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#func-dict"><code>dict()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#dir"><code>dir()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#divmod"><code>divmod()</code></a></td>
<td><strong>E</strong><a href="https://docs.python.org/zh-cn/3/library/functions.html#enumerate"><code>enumerate()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#eval"><code>eval()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#exec"><code>exec()</code></a> <strong>F</strong><a href="https://docs.python.org/zh-cn/3/library/functions.html#filter"><code>filter()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#float"><code>float()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#format"><code>format()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#func-frozenset"><code>frozenset()</code></a> <strong>G</strong><a href="https://docs.python.org/zh-cn/3/library/functions.html#getattr"><code>getattr()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#globals"><code>globals()</code></a> <strong>H</strong><a href="https://docs.python.org/zh-cn/3/library/functions.html#hasattr"><code>hasattr()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#hash"><code>hash()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#help"><code>help()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#hex"><code>hex()</code></a> <strong>I</strong><a href="https://docs.python.org/zh-cn/3/library/functions.html#id"><code>id()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#input"><code>input()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#int"><code>int()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#isinstance"><code>isinstance()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#issubclass"><code>issubclass()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#iter"><code>iter()</code></a></td>
<td><strong>L</strong><a href="https://docs.python.org/zh-cn/3/library/functions.html#len"><code>len()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#func-list"><code>list()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#locals"><code>locals()</code></a> <strong>M</strong><a href="https://docs.python.org/zh-cn/3/library/functions.html#map"><code>map()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#max"><code>max()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#func-memoryview"><code>memoryview()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#min"><code>min()</code></a> <strong>N</strong><a href="https://docs.python.org/zh-cn/3/library/functions.html#next"><code>next()</code></a> <strong>O</strong><a href="https://docs.python.org/zh-cn/3/library/functions.html#object"><code>object()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#oct"><code>oct()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#open"><code>open()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#ord"><code>ord()</code></a> <strong>P</strong><a href="https://docs.python.org/zh-cn/3/library/functions.html#pow"><code>pow()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#print"><code>print()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#property"><code>property()</code></a></td>
<td style="text-align: left;"><strong>R</strong><a href="https://docs.python.org/zh-cn/3/library/functions.html#func-range"><code>range()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#repr"><code>repr()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#reversed"><code>reversed()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#round"><code>round()</code></a> <strong>S</strong><a href="https://docs.python.org/zh-cn/3/library/functions.html#func-set"><code>set()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#setattr"><code>setattr()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#slice"><code>slice()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#sorted"><code>sorted()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#staticmethod"><code>staticmethod()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#func-str"><code>str()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#sum"><code>sum()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#super"><code>super()</code></a> <strong>T</strong><a href="https://docs.python.org/zh-cn/3/library/functions.html#func-tuple"><code>tuple()</code></a><a href="https://docs.python.org/zh-cn/3/library/functions.html#type"><code>type()</code></a> <strong>V</strong><a href="https://docs.python.org/zh-cn/3/library/functions.html#vars"><code>vars()</code></a> <strong>Z</strong><a href="https://docs.python.org/zh-cn/3/library/functions.html#zip"><code>zip()</code></a> **_**<a href="https://docs.python.org/zh-cn/3/library/functions.html#import__"><code>__import__()</code></a></td>
</tr>
</tbody>
</table>
<p>以下属于python3内置函数的是。ABCD</p>
<p>A.str()</p>
<p>B.sum()</p>
<p>C.zip()</p>
<p>D.sorted()</p>
<h2 id="python数据类型">python数据类型</h2>
<p>python中有六个标准的数据类型：</p>
<ul>
<li>Number(数字)</li>
<li>String(字符串)</li>
<li>List(列表)</li>
<li>Dict(字典)</li>
<li>Tuple(元组)</li>
<li>Set(集合)</li>
</ul>
<p>其中Number里包含了int、float、bool、complex(复数)。在python3中只有一种整数类型int，没有python2中的长整型long。</p>
<p>以下哪些是Python的数字类型。ACD</p>
<p>A.long</p>
<p>B.double</p>
<p>C.float</p>
<p>D.complex</p>
<h2 id="控制循环语句">控制循环语句</h2>
<p><strong>continue：</strong>将控制返回到循环的开始</p>
<p><strong>break：</strong>将控制带出循环</p>
<p><strong>pass：</strong>编写空循环，除此之外还用于空的控制语句、函数和类</p>
<p>Python中，循环控制语句有。BCD</p>
<p>A.goto</p>
<p>B.break</p>
<p>C.continue</p>
<p>D.pass</p>
<h2 id="name__"><code>__name__</code></h2>
<p><code>__name__</code>是python的一个内置类属性，它存储模块的名称。</p>
<p>python模块既可以被调用，也可以独立运行。而调用时<code>__name__</code>存储的是py文件名（模块名称），独立运行时存储的是<code>__main__</code>。其作用主要是用来区分当前模块是独立运行还是被调用。</p>
<p>关于<code>__name__</code>的说法，下列描述正确的是。BCD</p>
<p>A.它是Python提供的一个方法</p>
<p>B.每个模块内部都有一个<code>__name__</code>属性</p>
<p>C.当它的值为’main‘时，表示模块自身在运行</p>
<p>D.当它的值不为’main’时，表示模块被引用</p>
<h2 id="json.dumps与json.loads">json.dumps()与json.loads()</h2>
<p><strong>json.dumps()：</strong>将python对象编码成Json字符串</p>
<p><strong>json.dump()：</strong>将python对象转化成Json储存到文件中</p>
<p><strong>json.loads()：</strong>将Json字符串解码成python对象</p>
<p><strong>json.load()：</strong>将文件中的json格式转化成python对象提取</p>
<p>运行下列代码段，输出结果为True的是（ ）。BD</p>
<ol type="A">
<li></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">data=<span class="string">&#x27;&#123;&quot;one&quot;:&quot;1&quot;,&quot;two&quot;:&quot;2&quot;,&quot;three&quot;:&quot;3&quot;,&quot;four&quot;:&quot;4&quot;,&quot;five&quot;:&quot;5&quot;&#125;&#x27;</span></span><br><span class="line">text = json.loads(data)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(data)==<span class="built_in">type</span>(text)) </span><br></pre></td></tr></table></figure>
<ol start="2" type="A">
<li></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data=<span class="string">&#x27;&#123;&quot;one&quot;:&quot;1&quot;,&quot;two&quot;:&quot;2&quot;,&quot;three&quot;:&quot;3&quot;,&quot;four&quot;:&quot;4&quot;,&quot;five&quot;:&quot;5&quot;&#125;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(data)==<span class="built_in">type</span>(<span class="string">&#x27;123&#x27;</span>)) </span><br></pre></td></tr></table></figure>
<ol start="3" type="A">
<li></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">data=<span class="string">&#x27;&#123;&quot;one&quot;:&quot;1&quot;,&quot;two&quot;:&quot;2&quot;,&quot;three&quot;:&quot;3&quot;,&quot;four&quot;:&quot;4&quot;,&quot;five&quot;:&quot;5&quot;&#125;&#x27;</span></span><br><span class="line">text = json.loads(data)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;1&#x27;</span> <span class="keyword">in</span> text) </span><br></pre></td></tr></table></figure>
<ol start="4" type="A">
<li></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">data = <span class="string">&#x27;&#123;&quot;one&quot;:&quot;1&quot;,&quot;two&quot;:&quot;2&quot;,&quot;three&quot;:&quot;3&quot;,&quot;four&quot;:&quot;4&quot;,&quot;five&quot;:&quot;5&quot;&#125;&#x27;</span></span><br><span class="line">text = json.dumps(data)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;1&#x27;</span> <span class="keyword">in</span> text) </span><br></pre></td></tr></table></figure>
<h2 id="类定义体组成">类定义体组成</h2>
<p>类定义体组成：</p>
<ul>
<li>成员的控制访问信息（public、protected、private)</li>
<li>数据成员</li>
<li>成员函数</li>
</ul>
<p>在类的定义形式中,组成了类定义体是。ABC</p>
<p>A.成员的访问控制信息</p>
<p>B.数据成员</p>
<p>C.成员函数</p>
<p>D.私有消息</p>
<h2 id="关于return函数">关于return函数</h2>
<p>在python中，关于函数return语句的正确说法是。ACD</p>
<p>A.return指定函数返回值，用来结束函数</p>
<p>B.在python中return语句只可返回一个值</p>
<p>C.无返回值函数中可以没有return语句</p>
<p>D.如果不给return，函数默认返回None</p>
<p>无返回值函数是指void这一类的函数。</p>
<h2 id="万物皆为对象">万物皆为对象</h2>
<p>容器对象（list、dict、set等）中可以存放任何对象，包括整数、字符串，函数也可以作存放到容器对象中。</p>
<p>Python中函数是对象，描述正确的是。ABCD</p>
<p>A.函数可以赋值给一个变量</p>
<p>B.函数可以作为元素添加到集合对象中</p>
<p>C.函数可以作为参数值传递给其它函数</p>
<p>D.函数可以当做函数的返回值</p>
<h2 id="切片取数">切片取数</h2>
<p>L[0:3]表示从索引0开始取数，直到索引3为止，但不包括索引3的元素。</p>
<p>若输入的字符串str=’asdfgh’，想要输出为’asdfg’，则可以使用以下方法。AC</p>
<p>A.str[:-1]</p>
<p>B.str[:-2]</p>
<p>C.str[:5]</p>
<p>D.str[:4]</p>
<p>下列可以得到字符串'ccc'的Python语句是。ABD</p>
<p>A.cc'+'c'</p>
<p>B.'c'*3</p>
<p>C.'bcccb'[1:3]</p>
<p>D.'bcccb'[1:4]</p>
<p>若a = range(100)，以下哪些操作是合法的。ABCD</p>
<p>A.a[-3]</p>
<p>B.a[2:13]</p>
<p>C.a[::3]</p>
<p>D.a[2-3]</p>
<h2 id="函数调用">函数调用</h2>
<p>在模块A导入B模块的函数func（），并执行函数调用，下列写法正确的是。AC A. 导入：import B 调用 B.func() B. 导入：import B 调用 func() C. 导入：form B import func 调用 func() D. 导入：form B import func 调用B. func()</p>
<h2 id="python不能正常启动">python不能正常启动</h2>
<p>python不能正常启动的项有：</p>
<ul>
<li>拼写错误</li>
<li>错误表达式</li>
<li>缩进错误</li>
</ul>
<p>只有手动抛出异常才能正常启动。</p>
<h2 id="python的六种进程间通信方式">python的六种进程间通信方式</h2>
<ul>
<li>msg_queue(消息队列)</li>
<li>pipeline for single duplex(单工管道)</li>
<li>pipeline for half duplex(双工管道)</li>
<li>name pipeline(命名管道)</li>
<li>share memory(共享内存)</li>
<li>semaphore(信号量)</li>
</ul>
<p>在python3中进程之间通信通常可以采用如下哪些方式。ABD</p>
<p>A.Queue</p>
<p>B.Pipe</p>
<p>C.全局变量</p>
<p>D.共享数据</p>
<h2 id="new__和__init__的区别"><code>__new__</code>和<code>__init__</code>的区别</h2>
<p><strong>相同点：</strong></p>
<ul>
<li>两者都是python面向对象语言的函数。</li>
</ul>
<p><strong>不同点：</strong></p>
<ul>
<li><code>__new__</code>是在实例<strong>创建之前</strong>被调用的，是个<strong>静态方法</strong>。因为它的任务是<strong>创建实例</strong>然后返回该实例对象。</li>
<li><code>__init__</code>是当实例对象<strong>创建完成后</strong>被调用的，然后设置对象属性的一些初始值，是一个<strong>实例方法</strong>。通常用于<strong>初始化一个类实例</strong>。</li>
</ul>
<p>关于<code>__new__</code>与<code>__init__</code>的区别，说法正确的是。ABCD</p>
<p>A.<code>__new__</code>是一个静态方法，而<code>__init__</code>是一个实例方法</p>
<p>B.<code>__new__</code>方法会返回一个创建的实例，而<code>__init__</code>什么都不返回</p>
<p>C.只有在<code>__new__</code>返回一个创建的实例时，后面的<code>__init__</code>才能被调用</p>
<p>D.当创建一个新实例时调用<code>__new__</code>,初始化一个实例时用<code>__init__</code></p>
<h2 id="输入输出总结">输入输出总结</h2>
<h3 id="单行输入">单行输入</h3>
<ul>
<li><p><strong>同一行里空格分隔输入两个数</strong>：<code>a,b=list(map(int,input().split()))</code></p></li>
<li><p><strong>同一行里逗号分隔输入两个数</strong>：<code>a,b=list(map(int,input().split(','))</code>)</p></li>
<li><p><strong>使用sys模块输入多位数：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="comment">#输入数据，返回一个包含多个字符串的列表a,strip()用于截取掉末尾的换行符</span></span><br><span class="line">a=sys.stdin.readline().strip()</span><br><span class="line"></span><br><span class="line"><span class="comment">#a中的数据以逗号分隔时，去掉逗号，返回一个包含多个字符串的列表b</span></span><br><span class="line">b=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,a.split(<span class="string">&#x27;,&#x27;</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment">#a中的数据以空格分隔时，去掉空格，返回一个包含多个字符串的列表c</span></span><br><span class="line">c=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,a.split()))</span><br><span class="line"></span><br><span class="line"><span class="comment">#同一行中输入以空格分隔的两位数n,m</span></span><br><span class="line">n,m=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,sys.stdin.readline().strip().split()))</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="多行输入">多行输入</h3>
<ul>
<li><p><strong>把所有行合在一个列表中：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="built_in">list</span>=[]</span><br><span class="line">list_new=[]</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> sys.stdin:</span><br><span class="line">    list_new=line.split()</span><br><span class="line">    <span class="built_in">list</span>.append(list_new)</span><br><span class="line">    <span class="comment"># list.extend(list_new)</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">list</span>)</span><br><span class="line"><span class="comment">#使用append的输出结果：</span></span><br><span class="line"><span class="number">3</span> <span class="number">2</span></span><br><span class="line">[[<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;2&#x27;</span>]]</span><br><span class="line"><span class="number">1</span> <span class="number">5</span> <span class="number">6</span></span><br><span class="line">[[<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;2&#x27;</span>], [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>]]</span><br><span class="line"><span class="number">1</span> <span class="number">3</span></span><br><span class="line">[[<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;2&#x27;</span>], [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>], [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;3&#x27;</span>]]</span><br><span class="line"><span class="comment">#使用extend的输出结果：</span></span><br><span class="line"><span class="number">3</span> <span class="number">2</span></span><br><span class="line">[<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;2&#x27;</span>]</span><br><span class="line"><span class="number">1</span> <span class="number">5</span> <span class="number">6</span></span><br><span class="line">[<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>]</span><br><span class="line"><span class="number">1</span> <span class="number">3</span></span><br><span class="line">[<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;3&#x27;</span>]</span><br></pre></td></tr></table></figure></li>
<li><p><strong>行数固定且第一行给出，各行独立获取：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">lines=sys.stdin.readlines()</span><br><span class="line">n=<span class="built_in">int</span>(lines[<span class="number">0</span>])</span><br><span class="line">x1=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,lines[<span class="number">1</span>].split()))</span><br><span class="line">x2=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,lines[<span class="number">2</span>].split()))</span><br><span class="line">x3=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,lines[<span class="number">3</span>].split()))</span><br><span class="line"><span class="built_in">print</span>(n,x1,x2,x3)</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">输入：</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">5</span> <span class="number">6</span></span><br><span class="line"><span class="number">1</span>  </span><br><span class="line"><span class="number">8</span></span><br><span class="line">windows系统同时按下ctrl+z+enter结束输入</span><br><span class="line">输出结果为：</span><br><span class="line"><span class="number">3</span> [<span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>] [<span class="number">1</span>] [<span class="number">8</span>]</span><br></pre></td></tr></table></figure></li>
<li><p><strong>第一行输入人数n和科目m，后续每行录入每人的m科成绩：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n,m=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split()))</span><br><span class="line">lines=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    lines.append(<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())))</span><br><span class="line"><span class="built_in">print</span>(lines)</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">输入：</span><br><span class="line"><span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">15</span> <span class="number">32</span> <span class="number">23</span></span><br><span class="line"><span class="number">58</span> <span class="number">20</span> <span class="number">69</span></span><br><span class="line">输出结果为：</span><br><span class="line">[[<span class="number">15</span>, <span class="number">32</span>, <span class="number">23</span>], [<span class="number">58</span>, <span class="number">20</span>, <span class="number">69</span>]]</span><br></pre></td></tr></table></figure></li>
<li><p><strong>行数未知时，输入多行数字序列：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">res=[]</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        res.append(<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">输入：</span><br><span class="line"><span class="number">3</span> <span class="number">63</span> <span class="number">72</span> <span class="number">72</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">52</span> <span class="number">62</span> <span class="number">5</span> <span class="number">1</span>  </span><br><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">7</span></span><br><span class="line"><span class="number">5</span> <span class="number">8</span> <span class="number">9</span> <span class="number">3</span> <span class="number">53</span> <span class="number">12</span> <span class="number">74</span></span><br><span class="line">windows系统同时按下ctrl+z+enter结束输入</span><br><span class="line">输出结果为：</span><br><span class="line">[[<span class="number">3</span>, <span class="number">63</span>, <span class="number">72</span>, <span class="number">72</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">52</span>, <span class="number">62</span>, <span class="number">5</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">4</span>, <span class="number">7</span>], [<span class="number">5</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">53</span>, <span class="number">12</span>, <span class="number">74</span>]]</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="单行输出">单行输出</h3>
<p><strong>同一行里逗号分隔输出两个数：</strong><code>print(str(a)+','+str(b))</code></p>
<h3 id="多行输出">多行输出</h3>
<p><strong>按行遍历输出多行输入中的元素，注意：不是输出一个list或tuple：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">data=[]</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    line=sys.stdin.readline().strip()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> line:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    tmp=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,line.split()))</span><br><span class="line">    data.append(tmp)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(data)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(data[i])):</span><br><span class="line">        <span class="comment"># print(i[k])</span></span><br><span class="line">        <span class="keyword">if</span> j==(<span class="built_in">len</span>(data[i])-<span class="number">1</span>):</span><br><span class="line">            <span class="built_in">print</span>(data[i][j])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">str</span>(data[i][j])+<span class="string">&#x27; &#x27;</span>,end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">输入：</span><br><span class="line"><span class="number">3</span> <span class="number">63</span> <span class="number">72</span> <span class="number">72</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">52</span> <span class="number">62</span> <span class="number">5</span> <span class="number">1</span>  </span><br><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">7</span></span><br><span class="line"><span class="number">5</span> <span class="number">8</span> <span class="number">9</span> <span class="number">3</span> <span class="number">53</span> <span class="number">12</span> <span class="number">74</span></span><br><span class="line">windows系统同时按下ctrl+z+enter结束输入</span><br><span class="line">输出结果为：</span><br><span class="line"><span class="number">3</span> <span class="number">63</span> <span class="number">71</span> <span class="number">71</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">52</span> <span class="number">62</span> <span class="number">5</span> <span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">7</span></span><br><span class="line"><span class="number">5</span> <span class="number">8</span> <span class="number">9</span> <span class="number">3</span> <span class="number">53</span> <span class="number">12</span> <span class="number">74</span></span><br></pre></td></tr></table></figure>
<h2 id="补充">补充</h2>
<ul>
<li><p>标准库OS的listdir()方法默认只能列出指定文件夹中当前层级的文件和文件夹列表，而不能列出其子文件夹中的文件。</p></li>
<li><p><strong>递归</strong>是从问题的<strong>最终目标</strong>出发，逐渐将复杂问题化为简单问题，最终求得问题。<strong>递推</strong>是从简单问题触发，一步步的向前，最终求得问题。</p></li>
<li><p>列表对象的extend()方法属于原地操作，调用前后列表对象的地址不变。</p></li>
<li><p>Python中子类能继承父类全部的<strong>公有</strong>属性和方法。</p></li>
<li><p>使用print()函数可以将信息写入文件：<code>print("Hello, World!", file=open('file.txt', 'w'))</code>。</p></li>
<li><p>两个特殊的形参关键字形参和命名关键字形参不能设定默认值，或者说它们默认值就是空元组和空字典。</p></li>
<li><p>为了限制开头几个参数只能按位置传递，从python3.8开始，正式引入<strong>限定位置形参，</strong>它们必须放在形参表的最前面，并在后面使用斜杠/（独占一个参数位）与普通形参分隔。如<code>def fun(a,b,c,/,d) #a,b,c成为限定位置形参</code>。</p></li>
<li><p>默认值可以从限定位置形参或普通形参中的任意一个开始设定，<strong>除了命名关键字形参</strong>，所有带默认值的形参必须位于五默认值的形参之后。</p></li>
<li><p>定义函数时，带有默认值的参数必须出现在参数列表的最右端，任何一个带有默认值的参数右边不允许出现没有默认值的参数。</p></li>
<li><p>使用print()函数时，使用<code>\n</code>可以进行换行输出。</p></li>
<li><p>表达式<code>[1,3,2] &gt; [1,2,3]</code>的值为<code>True</code>，<code>&#123;1,3,2&#125; &gt; &#123;1,2,3&#125;</code>的值为<code>False</code>。</p></li>
<li><p>使用if <code>'__name__'</code>== <code>'__main__'</code>，可以保证模块被导入时，其内的代码不会被执行。</p></li>
<li><p>表达式<code>pow(3, 2)==3**2</code>的值为<code>True</code>。其中<code>**</code>代表乘方。</p></li>
<li><p>所有的except子句一定在else和finally的前面。</p></li>
<li><p>Python中break和continue语句不可以单独使用，只能在循环中使用。</p></li>
<li><p>split()将一个字符串分割为子字符串，然后将结果作为字符数组返回。</p></li>
</ul>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python学习笔记（十）</title>
    <url>/2022/10/13/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%EF%BC%89/</url>
    <content><![CDATA[<h1 id="进程和线程">进程和线程</h1>
<h2 id="多线程">多线程</h2>
<p>Python的标准库提供了两个模块：<code>_thread</code>和<code>threading</code>，其中<code>_thread</code>是低级模块，<code>threading</code>是高级模块，对<code>_thread</code>进行了封装，绝大多数情况下，只是使用高级模块<code>thread</code>。<strong>任何进程默认会启动一个线程</strong>，将其称之为<strong>主线程</strong>，由<strong>主线程启动的新线程</strong>称之为<strong>子线程</strong>。</p>
<p>启动一个线程需要把一个函数传入并创建<code>Thread</code>实例，然后调用<code>start()</code>执行：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time,threading </span><br><span class="line"><span class="comment">#新线程执行的代码</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">loop</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;thread %s is running...&#x27;</span>%threading.current_thread().name)</span><br><span class="line">    n=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> n&lt;<span class="number">5</span>:</span><br><span class="line">        n=n+<span class="number">1</span> </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;thread %s &gt;&gt;&gt;%s&#x27;</span>% (threading.current_thread().name,n))</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;thread %s ended.&#x27;</span>% threading.current_thread().name)</span><br><span class="line"><span class="comment"># current_thread()可以返回当前线程的实例</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;thread %s is running...&#x27;</span>%threading.current_thread().name)</span><br><span class="line">t=threading.Thread(target=loop,name=<span class="string">&#x27;LoopThread&#x27;</span>)<span class="comment">#用LoopThread命名子线程，默认名字为Thread-1,Thread-2...</span></span><br><span class="line">t.start()</span><br><span class="line">t.join()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;thread %s ended.&#x27;</span>% threading.current_thread().name)</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">thread MainThread <span class="keyword">is</span> running...<span class="comment">#主线程为MainThread</span></span><br><span class="line">thread LoopThread <span class="keyword">is</span> running...</span><br><span class="line">thread LoopThread &gt;&gt;&gt;<span class="number">1</span></span><br><span class="line">thread LoopThread &gt;&gt;&gt;<span class="number">2</span></span><br><span class="line">thread LoopThread &gt;&gt;&gt;<span class="number">3</span></span><br><span class="line">thread LoopThread &gt;&gt;&gt;<span class="number">4</span></span><br><span class="line">thread LoopThread &gt;&gt;&gt;<span class="number">5</span></span><br><span class="line">thread LoopThread ended.</span><br><span class="line">thread MainThread ended.</span><br></pre></td></tr></table></figure>
<h3 id="lock">Lock</h3>
<p>多进程中，同一个变量各自有一份拷贝存在于每个进程中，<strong>多个进程之间的变量之间互不影响。</strong></p>
<p>多线程中，所有<strong>变量都由所有线程共享</strong>，所以任何一个变量都可以被任何线程修改，即容易发生像在<code>sql</code>数据库中的读脏数据的情况。<strong>若要避免线程读脏数据的情况，就要给变量上锁</strong>。</p>
<p>可以通过<code>threading.Lock()</code>来创建一个锁：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time,threading</span><br><span class="line">balance=<span class="number">0</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">change_it</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">global</span> balance</span><br><span class="line">    balance=balance+n</span><br><span class="line">    balance=balance-n</span><br><span class="line"></span><br><span class="line">lock=threading.Lock()<span class="comment">#创建锁</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_thread</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100000</span>):</span><br><span class="line">        <span class="comment">#获取锁</span></span><br><span class="line">        lock.acquire()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            change_it(n)<span class="comment">#可修改的变量</span></span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            lock.release()<span class="comment">#释放锁</span></span><br><span class="line">t1=threading.Thread(target=run_thread,args=(<span class="number">5</span>,))</span><br><span class="line">t2=threading.Thread(target=run_thread,args=(<span class="number">8</span>,))</span><br><span class="line">t1.start()</span><br><span class="line">t2.start()</span><br><span class="line">t1.join()</span><br><span class="line">t2.join()</span><br><span class="line"><span class="built_in">print</span>(balance)</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>当<strong>多个线程同时执行<code>lock.acquire（）</code>时，只有一个线程能成功获取锁</strong>，然后继续执行代码，其他线程就继续等待直到获得锁为止。<strong>获得锁的线程用完后一定要释放锁</strong>，否则其他等待的线程将永远等下去。</p>
<h3 id="多核cpu">多核CPU</h3>
<p>一个死循环线程会100%占用一个CPU。若有两个死循环线程，在多核CPU中会占用200%的CPU，即两个CPU核心。若想把n核CPU的核心全部跑满，就必须启动n个死循环线程。</p>
<p>但在6核CPU中运行python启动6个死循环线程，CPU占用率也就仅有25%。死循环线程代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading,multiprocessing</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">loop</span>():</span><br><span class="line">    x=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        x=x^<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(multiprocessing.cpu_count()):</span><br><span class="line">    t=threading.Thread(target=loop)</span><br><span class="line">    t.start()</span><br></pre></td></tr></table></figure>
<h4 id="gil锁">GIL锁</h4>
<p>这是因为python解释器执行代码时，有一个<strong>GIL锁</strong>（Global Interoreter Lock），<strong>任何python线程执行前，必须先获得GIL锁，然后每执行100条字节码，解释器就自动释放GIL锁。</strong>这个GIL全局锁实际上给所有线程的执行代码都上了锁。因此<strong>多线程在python中只能交替执行</strong>，即使有100个线程跑在100核CPU上，也<strong>只能用到1个核</strong>。</p>
<p>因此在python中可以使用多线程，却不能够有效地利用多核。python虽然不能实现多线程并发，但可以通过多线程实现多核任务。多个python进程有各自独立的GIL锁，互不影响。</p>
<h2 id="threadlocal"><code>ThreadLocal</code></h2>
<p>在多线程环境下，每个线程都有自己的数据。一个线程使用局部变量比使用全局变量好。而全局变量的每次修改都要加锁，因此可以考虑用一个全局<code>dict</code>存放所有对象，然后以thread自身作为key来获得线程对应的对象，而在<code>ThreadLocal</code>中可以自动做这件事：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line">local_school=threading.local()<span class="comment">#创建全局ThreadLocal对象</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_student</span>():</span><br><span class="line">    std=local_school.student<span class="comment">#获取当前线程关联的student</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Hello,%s (in %s)&#x27;</span>%(std,threading.current_thread().name))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_thread</span>(<span class="params">name</span>):</span><br><span class="line">    local_school.student=name<span class="comment">#绑定ThreadLocal的student</span></span><br><span class="line">    process_student()</span><br><span class="line">t1=threading.Thread(target=process_thread,args=(<span class="string">&#x27;Alice&#x27;</span>,),name=<span class="string">&#x27;Thread-A&#x27;</span>)</span><br><span class="line">t2=threading.Thread(target=process_thread,args=(<span class="string">&#x27;Bob&#x27;</span>,),name=<span class="string">&#x27;Thread-B&#x27;</span>)    </span><br><span class="line">t1.start()</span><br><span class="line">t2.start()</span><br><span class="line">t1.join()</span><br><span class="line">t2.join()</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">Hello,Alice (<span class="keyword">in</span> Thread-A)</span><br><span class="line">Hello,Bob (<span class="keyword">in</span> Thread-B)</span><br></pre></td></tr></table></figure>
<p>可以理解为全局变量<code>local_school</code>是一个<code>dict</code>，其不但可以用<code>local_school.student</code>，还可以绑定其他变量。</p>
<p><code>ThreadLocal</code>最常用在为每个线程绑定一个数据库连接、HTTP请求、用户身份信息等。</p>
<h2 id="进程-vs-线程">进程 vs 线程</h2>
<p>要实现多任务通常会设计Master-Worker模式，Master复制分配任务，Worker负责执行任务，故在多任务环境下，通常是一个Master，多个Worker。</p>
<p>用多进程实现Master-Worker，主进程就是Master，其他进程就是Worker。</p>
<p>用多线程实现Master-Worker，主线程就是Master，其他进程就是Worker。</p>
<p><strong>多进程模式最大的优点是稳定性高。</strong>一个子进程崩溃了不会影响主进程核其他进程。<strong>其缺点是创建进程的开销大</strong>，占用系统资源较多，且操作系统同时运行的进程数也有限。</p>
<p><strong>多线程模式通常比多进程快一点，其缺点是任何一个线程挂掉都可能直接造成整个进程崩溃。</strong></p>
<h3 id="线程切换">线程切换</h3>
<p>操作系统在切换进程或线程时，需要先保存当前执行的现场环境（CPU寄存器状态、内存页等），然后把新任务的执行环境准备好（恢复上次的寄存器状态、切换内存页等），才能开始执行。</p>
<h3 id="计算密集型-vs-io密集型">计算密集型 vs IO密集型</h3>
<p>把任务分为计算密集型和IO密集型，并以此来考虑是否采用多任务。</p>
<p><strong>计算密集型任务的特点</strong>是<strong>进行大量的计算，消耗CPU资源</strong>。要最高效的利用CPU，<strong>计算密集型任务同时进行的数量应当等于CPU的核数</strong>。python做计算密集型任务的运行效率很低，故最好是用C语言编写计算密集型任务。</p>
<p><strong>IO密集型任务的特点</strong>是<strong>CPU消耗很少，任务的大部分时间都在等待IO操作完成</strong>。对于IO密集型任务，<strong>在一定限度内的任务最多，CPU效率越高</strong>。</p>
<h3 id="异步io">异步IO</h3>
<p>若充分利用操作系统提供的异步IO支持，就能用单线程模型来执行多任务，这种全新的模型称为<strong>事件驱动模型</strong>。对于python来说，<strong>单线程的异步编程模型称为协程</strong>，有了协程的支持，就可以基于事件驱动编写高效的多任务程序。</p>
<h2 id="分布式进程">分布式进程</h2>
<p>在线程和进程中，应当优先选择进程。因为进程更稳定，而且<strong>进程可以分布到多台机器</strong>上，而<strong>线程最多只能分布到同一台机器的多个CPU上</strong>。</p>
<p>python的<code>multiprocessing</code>模块不但支持多进程，其中的<code>managers</code>子模块还支持把多进程分布到多台机器上。一个服务进程可以作为调度者，将任务分布到其他多个进程中，依靠网络通信。</p>
<p>若有一个通过<code>Queue</code>通信的多进程程序在同一台机器上运行，现在要把发送任务的进程和处理任务的进程分布到两台机器上。原有的<code>Queue</code>可以继续用，通过<code>managers</code>模块把<code>Queue</code>通过网络暴露出去，其他机器的进程就可以访问<code>Queue</code>了。其实现如下：</p>
<p>服务器端Master的代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random,time,queue</span><br><span class="line"><span class="keyword">from</span> multiprocessing.managers <span class="keyword">import</span> BaseManager</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> freeze_support  <span class="comment">#server启动报错，提示需要引用此包</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#发送任务的队列</span></span><br><span class="line">task_queue = queue.Queue()</span><br><span class="line"><span class="comment">#接收结果的队列</span></span><br><span class="line">result_queue = queue.Queue()</span><br><span class="line"></span><br><span class="line"><span class="comment">#从BaseManager继承的QueueManager</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QueueManager</span>(<span class="title class_ inherited__">BaseManager</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="comment">#win10 64 貌似不支持callable下调用匿名函数lambda，这里封装一下</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">return_task_queue</span>():</span><br><span class="line">    <span class="keyword">global</span> task_queue</span><br><span class="line">    <span class="keyword">return</span> task_queue</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">return_result_queue</span>():</span><br><span class="line">    <span class="keyword">global</span> result_queue</span><br><span class="line">    <span class="keyword">return</span> result_queue</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">    <span class="comment">#把两个Queue注册到网络上，callable参数关联了Queue对象</span></span><br><span class="line">    <span class="comment">#QueueManager.register(&#x27;get_task_queue&#x27;,callable=lambda:task_queue)</span></span><br><span class="line">    <span class="comment">#QueueManager.register(&#x27;get_result_queue&#x27;,callable=lambda:result_queue)</span></span><br><span class="line">    QueueManager.register(<span class="string">&#x27;get_task_queue&#x27;</span>,<span class="built_in">callable</span>=return_task_queue)</span><br><span class="line">    QueueManager.register(<span class="string">&#x27;get_result_queue&#x27;</span>,<span class="built_in">callable</span>=return_result_queue)</span><br><span class="line">    <span class="comment">#绑定端口5000，设置验证码‘abc’</span></span><br><span class="line">    manager = QueueManager(address=(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">5000</span>),authkey=<span class="string">b&#x27;abc&#x27;</span>)<span class="comment">#这里必须加上本地默认ip地址127.0.0.1</span></span><br><span class="line">    <span class="comment">#启动Queue</span></span><br><span class="line">    manager.start()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;start server master&#x27;</span>)</span><br><span class="line">    <span class="comment">#获得通过网络访问的Queue对象</span></span><br><span class="line">    task = manager.get_task_queue()</span><br><span class="line">    result = manager.get_result_queue()</span><br><span class="line">    <span class="comment">#放几个任务进去</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        n = random.randint(<span class="number">0</span>,<span class="number">10000</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;put task %d...&#x27;</span> % n)</span><br><span class="line">        task.put(n)</span><br><span class="line">    <span class="comment">#从result队列读取结果</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;try get results...&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        r = result.get(timeout=<span class="number">10</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;result:%s&#x27;</span> % r)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#关闭</span></span><br><span class="line">    manager.shutdown()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;master exit&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    freeze_support()</span><br><span class="line">    test()</span><br></pre></td></tr></table></figure>
<p>在另一个文件里写非服务端Worker的代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time,sys,queue</span><br><span class="line"><span class="keyword">from</span> multiprocessing.managers <span class="keyword">import</span> BaseManager</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建类似的QueueManager</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QueueManager</span>(<span class="title class_ inherited__">BaseManager</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#由于这个QueueManager只从网络上获取Queue，所以注册时只提供名字即可</span></span><br><span class="line">QueueManager.register(<span class="string">&#x27;get_task_queue&#x27;</span>)</span><br><span class="line">QueueManager.register(<span class="string">&#x27;get_result_queue&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#连接到服务器，也就是运行task_master.py的机器</span></span><br><span class="line">server_addr = <span class="string">&#x27;127.0.0.1&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;connect to server %s...&#x27;</span>% server_addr)</span><br><span class="line"><span class="comment">#端口和验证码注意要保持完全一致</span></span><br><span class="line">m = QueueManager(address=(server_addr,<span class="number">5000</span>),authkey=<span class="string">b&#x27;abc&#x27;</span>)</span><br><span class="line"><span class="comment">#从网络连接</span></span><br><span class="line">m.connect()</span><br><span class="line"><span class="comment">#获取Queue的对象</span></span><br><span class="line">task = m.get_task_queue()</span><br><span class="line">result = m.get_result_queue()</span><br><span class="line"><span class="comment">#从task队列获取任务，并把结果写入result队列</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        n = task.get(timeout=<span class="number">1</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;run task %d * %d...&#x27;</span>% (n,n))</span><br><span class="line">        r = <span class="string">&#x27;%d * %d = %d&#x27;</span> % (n,n,n*n)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        result.put(r)</span><br><span class="line">    <span class="keyword">except</span> queue.Empty:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;task queue is empty&#x27;</span>)</span><br><span class="line"><span class="comment">#处理结果</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;worker exit&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>先运行服务端Marker的代码，再运行非服务端Worker的代码，运行结果如下：</p>
<p>服务端Marker的运行结果如下图：</p>
<p><img src="/2022/10/13/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%EF%BC%89/1.png"></p>
<p>非服务端Worker的运行结果如下图：</p>
<p><img src="/2022/10/13/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%EF%BC%89/2.png"></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python学习笔记（四）</title>
    <url>/2022/10/10/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
    <content><![CDATA[<h1 id="切片slice">切片（Slice）</h1>
<p>具体形式：<code>L[0:3]</code>,其中<code>L</code>为list名称，<code>0:3</code>代表list的取值范围，与matlab中的数组取值类似。<strong>list、tuple、字符串</strong>可以用切片操作。</p>
<h2 id="list切片">list切片</h2>
<p>下面以一个list为例来说明切片的用法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">L=[<span class="string">&#x27;Michael&#x27;</span>, <span class="string">&#x27;Sarah&#x27;</span>, <span class="string">&#x27;Tracy&#x27;</span>, <span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Jack&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(L[<span class="number">0</span>:<span class="number">3</span>])<span class="comment">#取前3个元素</span></span><br><span class="line"><span class="built_in">print</span>(L[:<span class="number">3</span>])<span class="comment">#第一个索引是0可省略</span></span><br><span class="line"><span class="built_in">print</span>(L[-<span class="number">2</span>:])<span class="comment">#取后2个元素</span></span><br><span class="line"><span class="built_in">print</span>(L[-<span class="number">2</span>:-<span class="number">1</span>])<span class="comment">#取倒数第2的元素</span></span><br><span class="line"><span class="built_in">print</span>(L[<span class="number">0</span>:<span class="number">4</span>:<span class="number">2</span>])<span class="comment">#前4个数，每两个取一个</span></span><br><span class="line"><span class="built_in">print</span>(L[::<span class="number">2</span>])<span class="comment">#所有数，每两个取一个</span></span><br><span class="line"><span class="built_in">print</span>(L[:])<span class="comment">#复制一个list</span></span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">[<span class="string">&#x27;Michael&#x27;</span>, <span class="string">&#x27;Sarah&#x27;</span>, <span class="string">&#x27;Tracy&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;Michael&#x27;</span>, <span class="string">&#x27;Sarah&#x27;</span>, <span class="string">&#x27;Tracy&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Jack&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;Bob&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;Michael&#x27;</span>, <span class="string">&#x27;Tracy&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;Michael&#x27;</span>, <span class="string">&#x27;Tracy&#x27;</span>, <span class="string">&#x27;Jack&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;Michael&#x27;</span>, <span class="string">&#x27;Sarah&#x27;</span>, <span class="string">&#x27;Tracy&#x27;</span>, <span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Jack&#x27;</span>]</span><br></pre></td></tr></table></figure>
<h2 id="tuple切片">tuple切片</h2>
<p>由于tuple也是一种list，因此tuple也可以用切片操作，其操作结果仍是tuple：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">L=(<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(L[:<span class="number">3</span>])</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<h2 id="字符串切片">字符串切片</h2>
<p>字符串也可以看成是一种list，因此，字符串也可以进行切片操作。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">L=<span class="string">&#x27;ZHANGSAN&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(L[:<span class="number">3</span>])</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">ZHA</span><br></pre></td></tr></table></figure>
<h2 id="练习题">练习题</h2>
<p>利用切片操作，实现一个<code>trim()</code>函数，去除字符串首尾的空格，注意不要调用str的<code>strip()</code>方法。</p>
<p>代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">trim</span>(<span class="params">s</span>):</span><br><span class="line">    n=<span class="number">0</span></span><br><span class="line">    m=<span class="built_in">len</span>(s)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">        <span class="keyword">if</span> s[i]==<span class="string">&#x27; &#x27;</span>:</span><br><span class="line">            n=n+<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">        <span class="keyword">if</span> s[m-<span class="number">1</span>]==<span class="string">&#x27; &#x27;</span>:</span><br><span class="line">            m=m-<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> s[n:m]</span><br><span class="line"><span class="comment"># 测试:</span></span><br><span class="line"><span class="keyword">if</span> trim(<span class="string">&#x27;hello  &#x27;</span>) != <span class="string">&#x27;hello&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;测试失败!&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> trim(<span class="string">&#x27;  hello&#x27;</span>) != <span class="string">&#x27;hello&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;测试失败!&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> trim(<span class="string">&#x27;  hello  &#x27;</span>) != <span class="string">&#x27;hello&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;测试失败!&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> trim(<span class="string">&#x27;  hello  world  &#x27;</span>) != <span class="string">&#x27;hello  world&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;测试失败!&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> trim(<span class="string">&#x27;&#x27;</span>) != <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;测试失败!&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> trim(<span class="string">&#x27;    &#x27;</span>) != <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;测试失败!&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;测试成功!&#x27;</span>)</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">测试成功!</span><br></pre></td></tr></table></figure>
<h1 id="迭代">迭代</h1>
<p>通过<code>for</code>循环来遍历list或tuple称为迭代。只要是可迭代对象，无论有无下标，都可以迭代。</p>
<h2 id="迭代dict">迭代<code>dict</code></h2>
<p>默认情况下，<code>dict</code>迭代的是key。如果要迭代value，可以用<code>for value in d.values()</code>语句，如果要同时迭代key和value，可以用<code>for k,v in d.items()</code>语句。由于<code>dict</code>的存储不是按照<code>list</code>的方式顺序排列，因此迭代出的结果顺序很可能不一样。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d=&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> d:</span><br><span class="line">    <span class="built_in">print</span>(key)</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br></pre></td></tr></table></figure>
<h2 id="迭代字符串">迭代字符串</h2>
<p>字符串也是可迭代对象，也可以作用于for循环。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d=<span class="string">&#x27;abc&#x27;</span></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> d:</span><br><span class="line">    <span class="built_in">print</span>(key)</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br></pre></td></tr></table></figure>
<h2 id="对list实现下标循环">对list实现下标循环</h2>
<p>通过<code>enumerate</code>函数把list变成索引-元素对，便可以在for循环中同时迭代索引和元素本身：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i,value <span class="keyword">in</span> <span class="built_in">enumerate</span>([<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>]):</span><br><span class="line">    <span class="built_in">print</span>(i,value)</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line"><span class="number">0</span> A</span><br><span class="line"><span class="number">1</span> B</span><br><span class="line"><span class="number">2</span> C</span><br></pre></td></tr></table></figure>
<h2 id="练习题-1">练习题</h2>
<p>请使用迭代查找一个list中最小和最大值，并返回一个tuple。</p>
<p>代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">findMinAndMax</span>(<span class="params">L</span>):</span><br><span class="line">    minl=<span class="number">999</span></span><br><span class="line">    maxl=<span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> L==[]:</span><br><span class="line">        <span class="keyword">return</span> (<span class="literal">None</span>, <span class="literal">None</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> L:</span><br><span class="line">        <span class="keyword">if</span>(minl&gt;<span class="built_in">int</span>(i)):</span><br><span class="line">            minl=i</span><br><span class="line">        <span class="keyword">if</span>(maxl&lt;<span class="built_in">int</span>(i)):</span><br><span class="line">            maxl=i</span><br><span class="line">    <span class="keyword">return</span> (minl, maxl)</span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line"><span class="keyword">if</span> findMinAndMax([]) != (<span class="literal">None</span>, <span class="literal">None</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;测试失败!1&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> findMinAndMax([<span class="number">7</span>]) != (<span class="number">7</span>, <span class="number">7</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;测试失败!&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> findMinAndMax([<span class="number">7</span>, <span class="number">1</span>]) != (<span class="number">1</span>, <span class="number">7</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;测试失败!&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> findMinAndMax([<span class="number">7</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">5</span>]) != (<span class="number">1</span>, <span class="number">9</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;测试失败!&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;测试成功!&#x27;</span>)    </span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">测试成功!</span><br></pre></td></tr></table></figure>
<h1 id="列表生成式">列表生成式</h1>
<p>使用列表生成式，可以通过一个list快速生成另一个list。</p>
<p>如要生成<code>list[1,2,3,4,5,6,7,8,9]</code>可用<code>list(range(1,10))</code>生成。</p>
<p>若要生成<code>[1x2,2x2,3x3,...,10x10]</code>可用<code>[x*x for x in range(1,11)]</code>生成。</p>
<p>写列表生成式时，要把<strong>生成的元素放到前面</strong>，后面再跟for循环，for循环后可以加上if判断，也可以使用两层循环：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">L=[x*x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>) <span class="keyword">if</span> x%<span class="number">2</span>==<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(L)</span><br><span class="line">T=[m+n <span class="keyword">for</span> m <span class="keyword">in</span> <span class="string">&#x27;ABC&#x27;</span> <span class="keyword">for</span> n <span class="keyword">in</span> <span class="string">&#x27;XYZ&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(T)</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">[<span class="number">4</span>, <span class="number">16</span>, <span class="number">36</span>, <span class="number">64</span>, <span class="number">100</span>]</span><br><span class="line">[<span class="string">&#x27;AX&#x27;</span>, <span class="string">&#x27;AY&#x27;</span>, <span class="string">&#x27;AZ&#x27;</span>, <span class="string">&#x27;BX&#x27;</span>, <span class="string">&#x27;BY&#x27;</span>, <span class="string">&#x27;BZ&#x27;</span>, <span class="string">&#x27;CX&#x27;</span>, <span class="string">&#x27;CY&#x27;</span>, <span class="string">&#x27;CZ&#x27;</span>]</span><br></pre></td></tr></table></figure>
<p>for循环可以同时使用两个或多个变量，如dict的items可以同时迭代key和value：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d=&#123;<span class="string">&#x27;x&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;y&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;z&#x27;</span>:<span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> d.items():</span><br><span class="line">    <span class="built_in">print</span>(k,<span class="string">&#x27;=&#x27;</span>,v)</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">x = <span class="number">1</span></span><br><span class="line">y = <span class="number">2</span></span><br><span class="line">z = <span class="number">3</span></span><br></pre></td></tr></table></figure>
<p>因此列表生成式也可以使用两个变量来生产list：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d=&#123;<span class="string">&#x27;x&#x27;</span>:<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;y&#x27;</span>:<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;z&#x27;</span>:<span class="string">&#x27;3&#x27;</span>&#125;</span><br><span class="line">L=[k+<span class="string">&#x27;=&#x27;</span>+v <span class="keyword">for</span> k,v <span class="keyword">in</span> d.items()]</span><br><span class="line"><span class="built_in">print</span>(L)</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">[<span class="string">&#x27;x=1&#x27;</span>, <span class="string">&#x27;y=2&#x27;</span>, <span class="string">&#x27;z=3&#x27;</span>]</span><br></pre></td></tr></table></figure>
<p><strong>注意</strong>：这里的<strong>value只能为str类型</strong>，由于非字符串类型没有<code>lower()</code>方法，所以列表生成式会报错。可以使用<code>isinstance</code>函数来判断一个变量a是不是字符串，具体形式为<code>isinstance(a,str)</code>。</p>
<h2 id="if...else">if...else</h2>
<p>在<strong>使用列表生成式</strong>时，<strong>不能在最后的if加上else</strong>。这是因为跟在for后面的if是一个筛选条件，不能带else。而把<strong>if写在for前面必须加else</strong>，否则会报错。这是因为for前面的部分是一个表达式，其必须要计算出一个结果。</p>
<h2 id="练习题-2">练习题</h2>
<p>请修改列表生成式，通过添加<code>if</code>语句保证列表生成式能正确地执行。</p>
<p>代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">L1 = [<span class="string">&#x27;Hello&#x27;</span>, <span class="string">&#x27;World&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;Apple&#x27;</span>, <span class="literal">None</span>]</span><br><span class="line">L2 = [k.lower() <span class="keyword">for</span> k <span class="keyword">in</span> L1 <span class="keyword">if</span> <span class="built_in">isinstance</span>(k,<span class="built_in">str</span>)==<span class="literal">True</span>]</span><br><span class="line"><span class="comment"># 测试:</span></span><br><span class="line"><span class="built_in">print</span>(L2)</span><br><span class="line"><span class="keyword">if</span> L2 == [<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>]:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;测试通过!&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;测试失败!&#x27;</span>)</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">[<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>]</span><br><span class="line">测试通过!</span><br></pre></td></tr></table></figure>
<h1 id="生成器">生成器</h1>
<p>在循环过程中不断推算出后续元素，故不必创建完整list，从而节省大量空间的机制，称为生成器（generator）。</p>
<p><strong>创建生成器</strong>:将列表生成式的<code>[]</code>改成<code>()</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">L=[x*x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"><span class="built_in">print</span>(L)</span><br><span class="line">g=(x*x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line"><span class="built_in">print</span>(g)</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>]</span><br><span class="line">&lt;generator <span class="built_in">object</span> &lt;genexpr&gt; at <span class="number">0x7ff38be35ac0</span>&gt;</span><br></pre></td></tr></table></figure>
<h2 id="打印生成器的元素"><strong>打印生成器的元素</strong></h2>
<p><strong>方法一：</strong></p>
<p>通过<code>next()</code>函数单个打印生成器中的元素，具体形式如下：<code>next(g)</code></p>
<p><strong>方法二：</strong></p>
<p>使用<code>for</code>循环打印，具体形式如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">g = (x * x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span> (<span class="number">10</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> g:</span><br><span class="line">    <span class="built_in">print</span>(i)  </span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">16</span></span><br><span class="line"><span class="number">25</span></span><br><span class="line"><span class="number">36</span></span><br><span class="line"><span class="number">49</span></span><br><span class="line"><span class="number">64</span></span><br><span class="line"><span class="number">81</span></span><br></pre></td></tr></table></figure>
<p>如果生成器推算的算法比较复杂，用类型列表生成式的for循环无法实现时，还可以用函数来实现。比如打印斐波拉契数列：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fib</span>(<span class="params"><span class="built_in">max</span></span>):</span><br><span class="line">    n,a,b=<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n&lt;<span class="built_in">max</span>:</span><br><span class="line">        <span class="keyword">yield</span> b</span><br><span class="line">        a,b=b,a+b<span class="comment">#相当于t=(b,a+b),t是一个tuple,a=t[0],b=t[1]</span></span><br><span class="line">        n=n+<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;done&#x27;</span>    </span><br><span class="line"><span class="built_in">print</span>(fib(<span class="number">6</span>))    </span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">&lt;generator <span class="built_in">object</span> fib at <span class="number">0x7f99e1f3dac0</span>&gt;</span><br></pre></td></tr></table></figure>
<p>如果一个函数定义中包含<code>yield</code>关键字，那么这个函数就不再是一个普通函数，而是一个generator函数，调用一个generator函数将返回一个generator。变成generator的函数在每次调用<code>next()</code>的时候执行，遇到<code>yield</code>语句返回，再次执行时从上次返回的<code>yield</code>语句处继续执行。</p>
<p>例如，定义一个generator函数，依次返回数字1,3,5：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">odd</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;step 1&#x27;</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;step 2&#x27;</span>)</span><br><span class="line">    <span class="keyword">yield</span>(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;step 3&#x27;</span>)</span><br><span class="line">    <span class="keyword">yield</span>(<span class="number">5</span>)</span><br><span class="line">o=odd()</span><br><span class="line"><span class="built_in">next</span>(o)</span><br><span class="line"><span class="built_in">next</span>(o)</span><br><span class="line"><span class="built_in">next</span>(o)</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">step <span class="number">1</span></span><br><span class="line">step <span class="number">2</span></span><br><span class="line">step <span class="number">3</span></span><br></pre></td></tr></table></figure>
<p>而每次调用<code>next(odd())</code>时，每次都会返回1.这是由于odd()会创建一个新的generator对象，每次调用<code>next(odd())</code>就创建一个完全独立的generator。</p>
<p>在斐波那契数列的例子中，在循环里不断调用<code>yield</code>，就会不断中断程序，此时需要给循环设置一个条件来退出循环，不然就会产生一个无限的数列，</p>
<p>把函数改成generator函数后，基本上不会用<code>next()</code>来获取下一个返回值，而是直接用for循环来迭代：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fib</span>(<span class="params"><span class="built_in">max</span></span>):</span><br><span class="line">    n,a,b=<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n&lt;<span class="built_in">max</span>:</span><br><span class="line">        <span class="keyword">yield</span> b</span><br><span class="line">        a,b=b,a+b<span class="comment">#相当于t=(b,a+b),t是一个tuple,a=t[0],b=t[1]</span></span><br><span class="line">        n=n+<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;done&#x27;</span>   </span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> fib(<span class="number">6</span>):    </span><br><span class="line">    <span class="built_in">print</span>(n) </span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">8</span></span><br></pre></td></tr></table></figure>
<p>用for循环调用generator时，是拿不到generator的return语句的返回值，若想要拿到返回值，必须捕获<code>StopIteration</code>错误，返回值包含在<code>StopIteration</code>的value中：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fib</span>(<span class="params"><span class="built_in">max</span></span>):</span><br><span class="line">    n,a,b=<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n&lt;<span class="built_in">max</span>:</span><br><span class="line">        <span class="keyword">yield</span> b</span><br><span class="line">        a,b=b,a+b<span class="comment">#相当于t=(b,a+b),t是一个tuple,a=t[0],b=t[1]</span></span><br><span class="line">        n=n+<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;done&#x27;</span>    </span><br><span class="line">g=fib(<span class="number">6</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        x=<span class="built_in">next</span>(g)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;g:&#x27;</span>,x)</span><br><span class="line">    <span class="keyword">except</span> StopIteration <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Generator return value:&#x27;</span>,e.value)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">g: <span class="number">1</span></span><br><span class="line">g: <span class="number">1</span></span><br><span class="line">g: <span class="number">2</span></span><br><span class="line">g: <span class="number">3</span></span><br><span class="line">g: <span class="number">5</span></span><br><span class="line">g: <span class="number">8</span></span><br><span class="line">Generator <span class="keyword">return</span> value: done</span><br></pre></td></tr></table></figure>
<h2 id="练习题-3">练习题</h2>
<p><a href="http://baike.baidu.com/view/7804.htm">杨辉三角</a>定义如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">          1</span><br><span class="line">         / \</span><br><span class="line">        1   1</span><br><span class="line">       / \ / \</span><br><span class="line">      1   2   1</span><br><span class="line">     / \ / \ / \</span><br><span class="line">    1   3   3   1</span><br><span class="line">   / \ / \ / \ / \</span><br><span class="line">  1   4   6   4   1</span><br><span class="line"> / \ / \ / \ / \ / \</span><br><span class="line">1   5   10  10  5   1</span><br></pre></td></tr></table></figure>
<p>把每一行看做一个list，试写一个generator，不断输出下一行的list。</p>
<p>代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">triangles</span>():</span><br><span class="line">    L=[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">yield</span> L</span><br><span class="line">        L=[<span class="number">1</span>]+[L[n]+L[n-<span class="number">1</span>] <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(L))]+[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 期待输出:</span></span><br><span class="line"><span class="comment"># [1]</span></span><br><span class="line"><span class="comment"># [1, 1]</span></span><br><span class="line"><span class="comment"># [1, 2, 1]</span></span><br><span class="line"><span class="comment"># [1, 3, 3, 1]</span></span><br><span class="line"><span class="comment"># [1, 4, 6, 4, 1]</span></span><br><span class="line"><span class="comment"># [1, 5, 10, 10, 5, 1]</span></span><br><span class="line"><span class="comment"># [1, 6, 15, 20, 15, 6, 1]</span></span><br><span class="line"><span class="comment"># [1, 7, 21, 35, 35, 21, 7, 1]</span></span><br><span class="line"><span class="comment"># [1, 8, 28, 56, 70, 56, 28, 8, 1]</span></span><br><span class="line"><span class="comment"># [1, 9, 36, 84, 126, 126, 84, 36, 9, 1]</span></span><br><span class="line">n = <span class="number">0</span></span><br><span class="line">results = []</span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> triangles():</span><br><span class="line">    results.append(t)</span><br><span class="line">    n = n + <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> results:</span><br><span class="line">    <span class="built_in">print</span>(t)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> results == [</span><br><span class="line">    [<span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">6</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">15</span>, <span class="number">6</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">7</span>, <span class="number">21</span>, <span class="number">35</span>, <span class="number">35</span>, <span class="number">21</span>, <span class="number">7</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">8</span>, <span class="number">28</span>, <span class="number">56</span>, <span class="number">70</span>, <span class="number">56</span>, <span class="number">28</span>, <span class="number">8</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">9</span>, <span class="number">36</span>, <span class="number">84</span>, <span class="number">126</span>, <span class="number">126</span>, <span class="number">84</span>, <span class="number">36</span>, <span class="number">9</span>, <span class="number">1</span>]</span><br><span class="line">]:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;测试通过!&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;测试失败!&#x27;</span>)</span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line">[<span class="number">1</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">1</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">1</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">6</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">15</span>, <span class="number">6</span>, <span class="number">1</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">7</span>, <span class="number">21</span>, <span class="number">35</span>, <span class="number">35</span>, <span class="number">21</span>, <span class="number">7</span>, <span class="number">1</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">8</span>, <span class="number">28</span>, <span class="number">56</span>, <span class="number">70</span>, <span class="number">56</span>, <span class="number">28</span>, <span class="number">8</span>, <span class="number">1</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">9</span>, <span class="number">36</span>, <span class="number">84</span>, <span class="number">126</span>, <span class="number">126</span>, <span class="number">84</span>, <span class="number">36</span>, <span class="number">9</span>, <span class="number">1</span>]</span><br><span class="line">测试通过!</span><br></pre></td></tr></table></figure>
<h1 id="迭代器">迭代器</h1>
<p>可以直接作用于for循环的对象统称为可迭代对象<code>Iterable</code>。</p>
<h2 id="判断一个对象是可迭代对象">判断一个对象是可迭代对象</h2>
<p>可通过<code>collections.abc</code>模块的<code>Iterable</code>类型判断。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections.abc <span class="keyword">import</span> Iterable</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(<span class="string">&#x27;abc&#x27;</span>,Iterable))<span class="comment">#字符串是否可迭代</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>([<span class="number">1</span>,<span class="number">2.3</span>],Iterable))<span class="comment">#list是否可迭代</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]),Iterable))<span class="comment">#set是否可迭代</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(<span class="number">123</span>,Iterable))<span class="comment">#整数是否可迭代</span></span><br><span class="line"><span class="comment">#运行结果如下：</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure>
<p>可以被<code>next()</code>函数调用并不断返回下一个值的对象称为迭代器：<code>Iterator</code>。</p>
<p>生成器都是<code>Iterator</code>对象，但list、dict、str虽然是<code>Iterable</code>，却不是<code>Iterator</code>。这是因为<code>Iterator</code>的对象表示的是一个 数据流，可以把这个数据流看作是一个未知长度的有序序列，<code>Iterator</code>甚至可以表示一个无限大的数据流，例如全体自然数。</p>
<p><strong>把list、dict、str从<code>Iterable</code>变成<code>Iterator</code></strong></p>
<p>可以使用<code>iter()</code>函数把list、dict、str从<code>Iterable</code>变成<code>Iterator</code>，其表现形式为：<code>isinstance(iter([]),Iterator)</code>，其中，<code>[]</code>可替换为dict、str的形式。</p>
<h2 id="小结">小结</h2>
<p>可作用于for循环的对象都是<code>Iterable</code>类型。</p>
<p>可作用于next()函数的对象都是<code>Iterator</code>类型，它们表示一个惰性计算的序列。</p>
<p>list、dict、str虽然是<code>Iterable</code>，却不是<code>Iterator</code>。但可以使用<code>iter()</code>函数把list、dict、str从<code>Iterable</code>变成<code>Iterator</code></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2022/11/18/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E4%B9%8B%E4%BC%81%E4%B8%9A%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="创建应用">创建应用</h1>
<h2 id="创建准备">创建准备</h2>
<ul>
<li>成功注册企业微信企业</li>
<li>企业微信账号拥有当前企业的超级管理员或分级管理员的权限</li>
</ul>
<h2 id="创建应用-1">创建应用</h2>
<p>登录 <a href="https://work.weixin.qq.com/wework_admin/loginpage_wx">企业微信管理后台</a>，在【应用管理】界面-【应用】-【自建】点击【创建应用】，在弹出框填写应用的图标、标题、描述和可见范围基本信息。填写完成后，点击【创建应用】，将会跳转至应用详情页面。</p>
<h2 id="配置信息">配置信息</h2>
<h3 id="可见范围">可见范围</h3>
<p>在【应用管理】界面-【应用】-【自建】点击刚刚创建好的应用，进入应用信息页面，点击编辑。</p>
<p><img src="/2022/11/18/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E4%B9%8B%E4%BC%81%E4%B8%9A%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/1.png"></p>
<p>点击可见范围旁边的添加，即可编辑可见范围。</p>
<h3 id="应用主页">应用主页</h3>
<p>配置成员从工作台打开应用时打开的页面URL，假设应用打开的网页为:http://it.zs.gdtel.com/#/。</p>
<p>在应用信息页面点击编辑，点击应用主页旁边的设置，即可配置工作台打开的应用主页。</p>
<p><img src="/2022/11/18/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E4%B9%8B%E4%BC%81%E4%B8%9A%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/2.png"></p>
<p>配置完成后，在可见范围内的成员，将在工作台看到该应用。</p>
<p><img src="/2022/11/18/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E4%B9%8B%E4%BC%81%E4%B8%9A%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/3.png"></p>
<h3 id="配置host">配置HOST</h3>
<p>为了能在本地进行开发，需要将应用URL的访问指向本地。Window系统下打开C:，右键点击hosts，选择使用记事本打开，在文件末尾增加代码如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1	localhost</span><br><span class="line">127.0.0.1	tangmenjue.top</span><br></pre></td></tr></table></figure>
<h1 id="获取应用接口凭证">获取应用接口凭证</h1>
<h2 id="获取企业id-corp_id">获取企业ID <code>corp_id</code></h2>
<p>在登录管理后台后，在【管理后台】-【我的企业】-【企业信息】页面的最下面，便可找到【企业ID】</p>
<p><img src="/2022/11/18/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E4%B9%8B%E4%BC%81%E4%B8%9A%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/4.png"></p>
<h2 id="获取应用-secret">获取应用 Secret</h2>
<p>在应用信息页面便可查看Secret</p>
<p><img src="/2022/11/18/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E4%B9%8B%E4%BC%81%E4%B8%9A%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/5.png"></p>
<p>将Secret发送到企业微信中查看，点击【发送】，则在操作者的企业微信会话中，会收到企业微信推送过来的Secret信息</p>
<p><img src="/2022/11/18/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E4%B9%8B%E4%BC%81%E4%B8%9A%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/6.png"></p>
<h2 id="获取应用接口凭证-access_token">获取应用接口凭证 access_token</h2>
<p>access_token由corpid和secret产生，所有接口在通信时都需要携带此信息用于验证接口的访问权限。</p>
<p>借助PostMan接口工具进行获取：<code>https://qyapi.weixin.qq.com/cgi-bin/gettoken?corpid=id&amp;corpsecret=secret</code>，链接里的id自行替换为实际的corp_id值，secret自行替换为实际的secret值。</p>
<p>打开PostMan，在左上角处点击Create collection</p>
<p><img src="/2022/11/18/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E4%B9%8B%E4%BC%81%E4%B8%9A%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/7.png"></p>
<p>然后继续点击Add a request</p>
<p><img src="/2022/11/18/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E4%B9%8B%E4%BC%81%E4%B8%9A%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/8.png"></p>
<p>在新弹出的窗口的Get输入框里输入，点击Send：</p>
<p><img src="/2022/11/18/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E4%B9%8B%E4%BC%81%E4%B8%9A%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/9.png"></p>
<p>然后便可在Body处看到获取的access_token值：</p>
<p><img src="/2022/11/18/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E4%B9%8B%E4%BC%81%E4%B8%9A%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/10.png"></p>
<h1 id="本地配置项目信息">本地配置项目信息</h1>
<h2 id="下载官方代码示例">下载官方代码示例</h2>
<p>从<a href="https://github.com/WecomTeam/InnerAppCodeSample">企业微信企业自建应用开发代码示例</a>里下载官方代码示例，下载解压后使用VS打开项目代码。在 <code>/configs</code> 目录将 <code>main.config.demo.js</code> 复制一份到 <code>main.config.js</code> 文件，并根据实际项目情况补充corp_id、app_secret等信息。</p>
<h2 id="安装启动服务">安装启动服务</h2>
<p>在一下载的示例代码项目根目录下，使用cmd执行以下代码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装依赖</span></span><br><span class="line">cnpm install</span><br><span class="line"><span class="comment">#启动后端服务</span></span><br><span class="line">cnpm run build</span><br><span class="line">cnpm run start</span><br></pre></td></tr></table></figure>
<h2 id="访问示例页面">访问示例页面</h2>
<p>在浏览器中访问http://localhost:3000便可访问示例页面</p>
<h1 id="发送应用信息">发送应用信息</h1>
<p>通过向企业微信信息推送接口POST对应的消息结构体即可实现应用消息的推送。对应的请求地址为：<code>https://qyapi.weixin.qq.com/cgi-bin/message/send?access_token=ACCESS_TOKEN</code>。</p>
<h2 id="基本参数">基本参数</h2>
<ul>
<li>调用接口凭证 access_token 作为 URL Params 带在请求的 URL 中。</li>
<li>应用的id agent_id 代表当前发送消息的应用 ID，可在应用的设置页面查看。</li>
<li>消息接收范围 touser、toparty、totag 分别表示接收消息的 成员、部门、标签，这几个范围标记不能同时为空。</li>
<li>消息类型 msgtype 用于指定消息的类型，当指定某一消息类型之后，接口服务只会读取该类型对应字段下的数据。</li>
<li>消息内容 不同的消息类型，会对应不同的消息内容字段。</li>
</ul>
<h2 id="基本流程">基本流程</h2>
<h3 id="发送基本类型消息">发送基本类型消息</h3>
<p>文本、图文消息、markdown类型的消息仅需要直接在业务后台服务器直接向企业微信消息推送接口发送对应的数据请求即可。</p>
<p>在示例代码的/server/messageController.js 文件中展示了向消息推送 Api 接口发送消息数据体的基本流程：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">&#x27;axios&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">AccessToken</span> = <span class="built_in">require</span>(<span class="string">&#x27;./accesstoken&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Config</span> = <span class="built_in">require</span>(<span class="string">&#x27;../configs/main.config.js&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span>(<span class="params">router</span>) &#123;</span><br><span class="line">    <span class="comment">// 发送推送消息</span></span><br><span class="line">    router.<span class="title function_">post</span>(<span class="string">&#x27;/message/send&#x27;</span>, <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params">req, res, next</span>) &#123;</span><br><span class="line">        <span class="comment">// 从前端请求中获取对应的参数</span></span><br><span class="line">        <span class="keyword">let</span> &#123;<span class="attr">form</span>:form_parames&#125; = req.<span class="property">body</span> || &#123;&#125;;        </span><br><span class="line">        <span class="comment">// 将 agentid 拼入请求的结构体中</span></span><br><span class="line">        <span class="keyword">let</span> request_data  = &#123;</span><br><span class="line">            ...form_parames,</span><br><span class="line">            <span class="attr">agentid</span>:<span class="title class_">Config</span>.<span class="property">agent_id</span>,</span><br><span class="line">        &#125;;</span><br><span class="line">        request_data.<span class="property">safe</span> = form_parames.<span class="property">safe</span> ? <span class="string">&#x27;1&#x27;</span> : <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        <span class="comment">// 获取 Access Token</span></span><br><span class="line">        <span class="keyword">const</span> access_token = <span class="keyword">await</span> <span class="title class_">AccessToken</span>.<span class="title function_">getToken</span>();</span><br><span class="line">        <span class="comment">// 向消息推送的 Api 发送对应的数据结构体</span></span><br><span class="line">        <span class="keyword">const</span> &#123;data&#125; =  <span class="keyword">await</span> axios.<span class="title function_">post</span>(<span class="string">&#x27;https://qyapi.weixin.qq.com/cgi-bin/message/send&#x27;</span>, </span><br><span class="line">        request_data,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">params</span>: &#123;</span><br><span class="line">                access_token</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 返回请求的结果</span></span><br><span class="line">        res.<span class="title function_">send</span>(data);</span><br><span class="line">    &#125;); </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="发送媒体类型消息">发送媒体类型消息</h3>
<p>当要推送图片、语言、适配、文件等媒体类型的消息时，需要将对应的文件通过临时素材的接口上传至企业微信的临时素材库。</p>
<p>在示例代码的 /server/mediaController.js 文件中，展示了通过企业微信临时素材接口上传临时素材的基本流程：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">FormData</span> = <span class="built_in">require</span>(<span class="string">&#x27;form-data&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">&#x27;axios&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">AccessToken</span> = <span class="built_in">require</span>(<span class="string">&#x27;./accesstoken&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span>(<span class="params">router</span>) &#123;</span><br><span class="line">    router.<span class="title function_">post</span>(<span class="string">&#x27;/media/upload&#x27;</span>, <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params">req, res, next</span>) &#123;</span><br><span class="line">   </span><br><span class="line">        <span class="keyword">let</span> &#123;<span class="attr">media</span>:file&#125; = req.<span class="property">files</span> || &#123;&#125;;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">files</span>);</span><br><span class="line">        <span class="keyword">let</span> &#123;type&#125; = req.<span class="property">body</span> || &#123;&#125; ;</span><br><span class="line">        <span class="keyword">const</span> access_token = <span class="keyword">await</span> <span class="title class_">AccessToken</span>.<span class="title function_">getToken</span>();</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 组件一个form，用来上传文件</span></span><br><span class="line">        <span class="keyword">const</span> form = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span><br><span class="line">        form.<span class="title function_">append</span>(<span class="string">&#x27;filename&#x27;</span>, file.<span class="property">name</span>);</span><br><span class="line">        form.<span class="title function_">append</span>(<span class="string">&#x27;filelength&#x27;</span>, file.<span class="property">size</span>);   </span><br><span class="line">        form.<span class="title function_">append</span>(<span class="string">&#x27;media&#x27;</span>,file.<span class="property">data</span>,file.<span class="property">name</span>);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">const</span> &#123;data&#125; =  <span class="keyword">await</span> axios.<span class="title function_">post</span>(<span class="string">&#x27;https://qyapi.weixin.qq.com/cgi-bin/media/upload&#x27;</span>, </span><br><span class="line">        form,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">params</span>: &#123;</span><br><span class="line">                access_token,</span><br><span class="line">                type</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">headers</span>: &#123;</span><br><span class="line">                <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;multipart/form-data&quot;</span></span><br><span class="line">            &#125;,        </span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">        res.<span class="title function_">send</span>(data);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="获取登录用户信息">获取登录用户信息</h1>
<p>企业微信提供了OAuth的授权登录方式，可以从企业微信终端打开的网页获取成员的身份信息，从而免去登录的环节。</p>
<h2 id="配置可信域名">配置可信域名</h2>
<p>为了保证访问授权的安全性，需要配置授权链接URL所在域名为可信域名。在【应用详情】-【开发者接口】-【网页授权及 JS-SDK】，点击【设置可信域名】，在【设置可信域名】弹窗，填写网页授权功能的回调域名it.zsnet.net.cn，网页授权回调域名的配置须与实际访问链接的域名完全一致：</p>
<p><img src="/2022/11/18/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E4%B9%8B%E4%BC%81%E4%B8%9A%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/11.png"></p>
<h2 id="构造网页授权链接">构造网页授权链接</h2>
<p>以下由几个URL要注意区别：</p>
<ul>
<li>应用主页URL
<ul>
<li>从工作台点击打开的页面URL，在创建应用时配置填写的，用来授权链接URL跳转。</li>
</ul></li>
<li>重定向URL
<ul>
<li>当用户授权成功后，会带着成员授权code跳转的URL，用来接收code并获取成员身份</li>
</ul></li>
<li>授权链接URL
<ul>
<li>企业微信名下的URL，包含了suite_id、重定向URL等信息，当企业微信服务参数验证成功后，会跳转到重定向URL</li>
</ul></li>
</ul>
<p>在示例代码的 /routes/index.js 文件中，展示了构造网页授权链接的基本流程：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router.<span class="title function_">get</span>(<span class="title class_">Config</span>.<span class="property">home_path</span>, <span class="keyword">function</span> (<span class="params">req, res, next</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> login_url = <span class="title function_">getLoginURL</span>(<span class="string">&#x27;base&#x27;</span>);</span><br><span class="line">    res.<span class="title function_">redirect</span>(login_url);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="解析成员授权code">解析成员授权code</h2>
<p>企业成员从工作台点击应用，打开应用主页URL，向授权链接URL跳转；企业微信对授权链接上的信息进行校验之后，会重定向URL跳转，并以query的形式带上当前访问成员的code信息。</p>
<p>在示例代码的 /routes/index.js 文件中，展示了从重定向URL里解析成员授权code的基本流程：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router.<span class="title function_">get</span>(<span class="title class_">Config</span>.<span class="property">app_path</span>, <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params">req, res, next</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; code &#125; = req.<span class="property">query</span>;</span><br><span class="line">    <span class="keyword">if</span> (code) &#123;</span><br><span class="line">        <span class="keyword">let</span> access_token = <span class="keyword">await</span> <span class="title class_">AccessToken</span>.<span class="title function_">getToken</span>();</span><br><span class="line">        <span class="keyword">if</span> (access_token) &#123;</span><br><span class="line">            <span class="keyword">let</span> &#123; <span class="attr">data</span>: user_data &#125; = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">`https://qyapi.weixin.qq.com/cgi-bin/user/getuserinfo?access_token=<span class="subst">$&#123;access_token&#125;</span>&amp;code=<span class="subst">$&#123;code&#125;</span>`</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;获取 user_data 成功&#x27;</span>, user_data)</span><br><span class="line">            <span class="keyword">let</span> user_id = user_data.<span class="property">UserId</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            res.<span class="title function_">render</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="获取访问用户身份信息">获取访问用户身份信息</h2>
<p>在解析出成员授权code之后，使用access_token，调用获取访问用户身份的接口，即可得到访问用户的基本信息user_id，若想访问用户更详细的信息，则需要通过读取成员得到用户的姓名、头像等完整信息。</p>
<p>在示例代码的 /routes/index.js 文件中，展示了从重定向URL里解析成员授权code的基本流程：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router.<span class="title function_">get</span>(<span class="title class_">Config</span>.<span class="property">app_path</span>, <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params">req, res, next</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; code &#125; = req.<span class="property">query</span>;</span><br><span class="line">    <span class="keyword">if</span> (code) &#123;</span><br><span class="line">        <span class="keyword">let</span> access_token = <span class="keyword">await</span> <span class="title class_">AccessToken</span>.<span class="title function_">getToken</span>();</span><br><span class="line">        <span class="keyword">if</span> (access_token) &#123;</span><br><span class="line">            <span class="keyword">let</span> &#123; <span class="attr">data</span>: user_detail_data &#125; = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">`https://qyapi.weixin.qq.com/cgi-bin/user/get?access_token=<span class="subst">$&#123;access_token&#125;</span>&amp;userid=<span class="subst">$&#123;user_id&#125;</span>`</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;获取成员详细信息成功&#x27;</span>, user_detail_data);</span><br><span class="line">            req.<span class="property">session</span>.<span class="property">user</span> = user_detail_data;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            res.<span class="title function_">render</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="实操过程">实操过程</h2>
<p>借助PostMan接口工具获取用户的userid（用手机号获取）：<code>https://qyapi.weixin.qq.com/cgi-bin/user/getuserid?access_token=ACCESS_TOKEN</code>，链接里的ACCESS_TOKEN自行替换为实际的access_token值。</p>
<p>打开PostMan，在左上角New collection处右键选择Add collection：</p>
<p><img src="/2022/11/18/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E4%B9%8B%E4%BC%81%E4%B8%9A%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/12.png"></p>
<p>点击新弹出的窗口的Get输入框选择POST，输入链接，选择下方的Body，选择row，填写对应的参数后，点击Send：</p>
<p><img src="/2022/11/18/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E4%B9%8B%E4%BC%81%E4%B8%9A%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/13.png"></p>
<p>然后便可在下方的Body处看到userid的值：</p>
<p><img src="/2022/11/18/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E4%B9%8B%E4%BC%81%E4%B8%9A%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/14.png"></p>
<h1 id="向成员发送信息">向成员发送信息</h1>
<p>调用企业内部的开放接口，都需要带上企业的接口凭证，且必须以 query 参数形式传递。而应用消息推送接口需要指定当前应用的 agent_id。</p>
<p>企业微信的应用消息推送支持不同的消息类型，比如文本、图片、语音、文件等，不同类型的消息类型需要指定对应的消息种类 msgtype。</p>
<p>在示例代码的 /routes/index.js 文件中，编写向成员发送信息的代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="title class_">Config</span>.<span class="property">app_path</span>, <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params">req, res, next</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; code &#125; = req.<span class="property">query</span>;</span><br><span class="line">    <span class="keyword">if</span> (code) &#123;</span><br><span class="line">        <span class="keyword">let</span> access_token = <span class="keyword">await</span> <span class="title class_">AccessToken</span>.<span class="title function_">getToken</span>();</span><br><span class="line">        <span class="keyword">if</span> (access_token) &#123;</span><br><span class="line">            <span class="keyword">let</span> &#123;<span class="attr">data</span>:message_data&#125; = <span class="keyword">await</span> axios.<span class="title function_">post</span>(<span class="string">`https://qyapi.weixin.qq.com/cgi-bin/message/send?access_token=<span class="subst">$&#123;access_token&#125;</span>`</span>,</span><br><span class="line">            &#123;<span class="string">&quot;touser&quot;</span> : user_detail_data.<span class="property">userid</span>,</span><br><span class="line">             <span class="string">&quot;agentid&quot;</span> : agent_id,</span><br><span class="line">             <span class="string">&quot;msgtype&quot;</span> : <span class="string">&quot;text&quot;</span>,</span><br><span class="line">             <span class="string">&quot;text&quot;</span> : &#123;</span><br><span class="line">             <span class="string">&quot;content&quot;</span> : <span class="string">`Hello World! <span class="subst">$&#123;user_detail_data.name&#125;</span>`</span>&#125;,</span><br><span class="line">             &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            res.<span class="title function_">render</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="实操过程-1">实操过程</h2>
<p><strong>参数说明：</strong></p>
<table>
<colgroup>
<col style="width: 26%">
<col style="width: 8%">
<col style="width: 65%">
</colgroup>
<thead>
<tr class="header">
<th>参数</th>
<th>是否必须</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>touser</td>
<td>否</td>
<td>指定接收消息的成员，成员ID列表（多个接收者用‘|’分隔，最多支持1000个）。 特殊情况：指定为"<span class="citation" data-cites="all">@all</span>"，则向该企业应用的全部成员发送</td>
</tr>
<tr class="even">
<td>toparty</td>
<td>否</td>
<td>指定接收消息的部门，部门ID列表，多个接收者用‘|’分隔，最多支持100个。 当touser为"<span class="citation" data-cites="all">@all</span>"时忽略本参数</td>
</tr>
<tr class="odd">
<td>totag</td>
<td>否</td>
<td>指定接收消息的标签，标签ID列表，多个接收者用‘|’分隔，最多支持100个。 当touser为"<span class="citation" data-cites="all">@all</span>"时忽略本参数</td>
</tr>
<tr class="even">
<td>msgtype</td>
<td>是</td>
<td>消息类型，此时固定为：text</td>
</tr>
<tr class="odd">
<td>agentid</td>
<td>是</td>
<td>企业应用的id，整型。企业内部开发，可在应用的设置页面查看；第三方服务商，可通过接口 <a href="https://developer.work.weixin.qq.com/document/path/90236#10975/获取企业授权信息">获取企业授权信息</a> 获取该参数值</td>
</tr>
<tr class="even">
<td>content</td>
<td>是</td>
<td>消息内容，最长不超过2048个字节，超过将截断<strong>（支持id转译）</strong></td>
</tr>
<tr class="odd">
<td>safe</td>
<td>否</td>
<td>表示是否是保密消息，0表示可对外分享，1表示不能分享且内容显示水印，默认为0</td>
</tr>
<tr class="even">
<td>enable_id_trans</td>
<td>否</td>
<td>表示是否开启id转译，0表示否，1表示是，默认0。仅第三方应用需要用到，企业自建应用可以忽略。</td>
</tr>
<tr class="odd">
<td>enable_duplicate_check</td>
<td>否</td>
<td>表示是否开启重复消息检查，0表示否，1表示是，默认0</td>
</tr>
<tr class="even">
<td>duplicate_check_interval</td>
<td>否</td>
<td>表示是否重复消息检查的时间间隔，默认1800s，最大不超过4小时</td>
</tr>
</tbody>
</table>
<blockquote>
<p>注意：touser、toparty、totag不能同时为空。</p>
<p>若操作过程中出现IP不合法的错误，在应用信息页面将IP添加进企业可信IP里便可正常访问。</p>
</blockquote>
<p>借助PostMan接口工具进行发送信息：<code>https://qyapi.weixin.qq.com/cgi-bin/message/send?access_token=ACCESS_TOKEN</code>，链接里的ACCESS_TOKEN自行替换为实际的access_token值。</p>
<p>打开PostMan，在左上角New collection处右键选择Add collection。点击新弹出的窗口的Get输入框选择POST，输入链接，选择下方的Body，选择row，填写对应的参数后，点击Send：</p>
<p><img src="/2022/11/18/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E4%B9%8B%E4%BC%81%E4%B8%9A%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/15.png"></p>
<p>然后便可在下方的Body处看到已经信息发送成功。</p>
<p><img src="/2022/11/18/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E4%B9%8B%E4%BC%81%E4%B8%9A%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/16.png"></p>
]]></content>
      <categories>
        <category>企业微信</category>
        <category>应用开发</category>
      </categories>
      <tags>
        <tag>企业微信</tag>
        <tag>应用开发</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2022/11/21/%E4%BC%81%E5%BE%AE%E5%BA%94%E7%94%A8%E4%B9%8Bpython%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h1 id="创建应用">创建应用</h1>
<h2 id="创建准备">创建准备</h2>
<ul>
<li>成功注册企业微信企业</li>
<li>企业微信账号拥有当前企业的超级管理员或分级管理员的权限</li>
</ul>
<h2 id="创建应用-1">创建应用</h2>
<p>登录 <a href="https://work.weixin.qq.com/wework_admin/loginpage_wx">企业微信管理后台</a>，在【应用管理】界面-【应用】-【自建】点击【创建应用】，在弹出框填写应用的图标、标题、描述和可见范围基本信息。填写完成后，点击【创建应用】，将会跳转至应用详情页面。</p>
<h2 id="配置信息">配置信息</h2>
<h3 id="可见范围">可见范围</h3>
<p>在【应用管理】界面-【应用】-【自建】点击刚刚创建好的应用，进入应用信息页面，点击编辑。</p>
<p><img src="/2022/11/21/%E4%BC%81%E5%BE%AE%E5%BA%94%E7%94%A8%E4%B9%8Bpython%E5%BC%80%E5%8F%91/1.png"></p>
<p>点击可见范围旁边的添加，即可编辑可见范围。</p>
<h3 id="应用主页">应用主页</h3>
<p>配置成员从工作台打开应用时打开的页面URL，假设应用打开的网页为:http://tangmenjue.top/。</p>
<p>在应用信息页面点击编辑，点击应用主页旁边的设置，即可配置工作台打开的应用主页。</p>
<p><img src="/2022/11/21/%E4%BC%81%E5%BE%AE%E5%BA%94%E7%94%A8%E4%B9%8Bpython%E5%BC%80%E5%8F%91/2.png"></p>
<p>配置完成后，在可见范围内的成员，将在工作台看到该应用。</p>
<p><img src="/2022/11/21/%E4%BC%81%E5%BE%AE%E5%BA%94%E7%94%A8%E4%B9%8Bpython%E5%BC%80%E5%8F%91/3.png"></p>
<h3 id="配置host">配置HOST</h3>
<p>为了能在本地进行开发，需要将应用URL的访问指向本地。Window系统下打开C:，右键点击hosts，选择使用记事本打开，在文件末尾增加代码如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1	localhost</span><br><span class="line">127.0.0.1	tangmenjue.top</span><br></pre></td></tr></table></figure>
<h1 id="获取应用接口凭证">获取应用接口凭证</h1>
<h2 id="获取企业id-corp_id">获取企业ID <code>corp_id</code></h2>
<p>在登录管理后台后，在【管理后台】-【我的企业】-【企业信息】页面的最下面，便可找到【企业ID】</p>
<p><img src="/2022/11/21/%E4%BC%81%E5%BE%AE%E5%BA%94%E7%94%A8%E4%B9%8Bpython%E5%BC%80%E5%8F%91/4.png"></p>
<h2 id="获取应用-secret">获取应用 Secret</h2>
<p>在应用信息页面便可查看Secret</p>
<p><img src="/2022/11/21/%E4%BC%81%E5%BE%AE%E5%BA%94%E7%94%A8%E4%B9%8Bpython%E5%BC%80%E5%8F%91/5.png"></p>
<p>将Secret发送到企业微信中查看，点击【发送】，则在操作者的企业微信会话中，会收到企业微信推送过来的Secret信息</p>
<p><img src="/2022/11/21/%E4%BC%81%E5%BE%AE%E5%BA%94%E7%94%A8%E4%B9%8Bpython%E5%BC%80%E5%8F%91/6.png"></p>
<h2 id="获取应用接口凭证-access_token">获取应用接口凭证 access_token</h2>
<p>access_token由corpid和secret产生，所有接口在通信时都需要携带此信息用于验证接口的访问权限。</p>
<p>借助PostMan接口工具进行获取：<code>https://qyapi.weixin.qq.com/cgi-bin/gettoken?corpid=id&amp;corpsecret=secret</code>，链接里的id自行替换为实际的corp_id值，secret自行替换为实际的secret值。</p>
<p>打开PostMan，在左上角处点击Create collection</p>
<p><img src="/2022/11/21/%E4%BC%81%E5%BE%AE%E5%BA%94%E7%94%A8%E4%B9%8Bpython%E5%BC%80%E5%8F%91/7.png"></p>
<p>然后继续点击Add a request</p>
<p><img src="/2022/11/21/%E4%BC%81%E5%BE%AE%E5%BA%94%E7%94%A8%E4%B9%8Bpython%E5%BC%80%E5%8F%91/8.png"></p>
<p>在新弹出的窗口的Get输入框里输入，点击Send：</p>
<p><img src="/2022/11/21/%E4%BC%81%E5%BE%AE%E5%BA%94%E7%94%A8%E4%B9%8Bpython%E5%BC%80%E5%8F%91/9.png"></p>
<p>然后便可在Body处看到获取的access_token值：</p>
<p><img src="/2022/11/21/%E4%BC%81%E5%BE%AE%E5%BA%94%E7%94%A8%E4%B9%8Bpython%E5%BC%80%E5%8F%91/10.png"></p>
<h1 id="本地配置项目信息">本地配置项目信息</h1>
<h2 id="下载官方代码示例">下载官方代码示例</h2>
<p>从<a href="https://github.com/WecomTeam/InnerAppCodeSample">企业微信企业自建应用开发代码示例</a>里下载官方代码示例，下载解压后使用VS打开项目代码。在 <code>/configs</code> 目录将 <code>main.config.demo.js</code> 复制一份到 <code>main.config.js</code> 文件，并根据实际项目情况补充corp_id、app_secret等信息。</p>
<h2 id="安装启动服务">安装启动服务</h2>
<p>在一下载的示例代码项目根目录下，使用cmd执行以下代码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装依赖</span></span><br><span class="line">cnpm install</span><br><span class="line"><span class="comment">#启动后端服务</span></span><br><span class="line">cnpm run build</span><br><span class="line">cnpm run start</span><br></pre></td></tr></table></figure>
<h2 id="访问示例页面">访问示例页面</h2>
<p>在浏览器中访问http://localhost:3000便可访问示例页面</p>
<h1 id="发送应用信息">发送应用信息</h1>
<p>通过向企业微信信息推送接口POST对应的消息结构体即可实现应用消息的推送。对应的请求地址为：<code>https://qyapi.weixin.qq.com/cgi-bin/message/send?access_token=ACCESS_TOKEN</code>。</p>
<h2 id="基本参数">基本参数</h2>
<ul>
<li>调用接口凭证 access_token 作为 URL Params 带在请求的 URL 中。</li>
<li>应用的id agent_id 代表当前发送消息的应用 ID，可在应用的设置页面查看。</li>
<li>消息接收范围 touser、toparty、totag 分别表示接收消息的 成员、部门、标签，这几个范围标记不能同时为空。</li>
<li>消息类型 msgtype 用于指定消息的类型，当指定某一消息类型之后，接口服务只会读取该类型对应字段下的数据。</li>
<li>消息内容 不同的消息类型，会对应不同的消息内容字段。</li>
</ul>
<h2 id="基本流程">基本流程</h2>
<h3 id="发送基本类型消息">发送基本类型消息</h3>
<p>文本、图文消息、markdown类型的消息仅需要直接在业务后台服务器直接向企业微信消息推送接口发送对应的数据请求即可。</p>
<p>在示例代码的/server/messageController.js 文件中展示了向消息推送 Api 接口发送消息数据体的基本流程：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">&#x27;axios&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">AccessToken</span> = <span class="built_in">require</span>(<span class="string">&#x27;./accesstoken&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Config</span> = <span class="built_in">require</span>(<span class="string">&#x27;../configs/main.config.js&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span>(<span class="params">router</span>) &#123;</span><br><span class="line">    <span class="comment">// 发送推送消息</span></span><br><span class="line">    router.<span class="title function_">post</span>(<span class="string">&#x27;/message/send&#x27;</span>, <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params">req, res, next</span>) &#123;</span><br><span class="line">        <span class="comment">// 从前端请求中获取对应的参数</span></span><br><span class="line">        <span class="keyword">let</span> &#123;<span class="attr">form</span>:form_parames&#125; = req.<span class="property">body</span> || &#123;&#125;;        </span><br><span class="line">        <span class="comment">// 将 agentid 拼入请求的结构体中</span></span><br><span class="line">        <span class="keyword">let</span> request_data  = &#123;</span><br><span class="line">            ...form_parames,</span><br><span class="line">            <span class="attr">agentid</span>:<span class="title class_">Config</span>.<span class="property">agent_id</span>,</span><br><span class="line">        &#125;;</span><br><span class="line">        request_data.<span class="property">safe</span> = form_parames.<span class="property">safe</span> ? <span class="string">&#x27;1&#x27;</span> : <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        <span class="comment">// 获取 Access Token</span></span><br><span class="line">        <span class="keyword">const</span> access_token = <span class="keyword">await</span> <span class="title class_">AccessToken</span>.<span class="title function_">getToken</span>();</span><br><span class="line">        <span class="comment">// 向消息推送的 Api 发送对应的数据结构体</span></span><br><span class="line">        <span class="keyword">const</span> &#123;data&#125; =  <span class="keyword">await</span> axios.<span class="title function_">post</span>(<span class="string">&#x27;https://qyapi.weixin.qq.com/cgi-bin/message/send&#x27;</span>, </span><br><span class="line">        request_data,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">params</span>: &#123;</span><br><span class="line">                access_token</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 返回请求的结果</span></span><br><span class="line">        res.<span class="title function_">send</span>(data);</span><br><span class="line">    &#125;); </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="发送媒体类型消息">发送媒体类型消息</h3>
<p>当要推送图片、语言、适配、文件等媒体类型的消息时，需要将对应的文件通过临时素材的接口上传至企业微信的临时素材库。</p>
<p>在示例代码的 /server/mediaController.js 文件中，展示了通过企业微信临时素材接口上传临时素材的基本流程：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">FormData</span> = <span class="built_in">require</span>(<span class="string">&#x27;form-data&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">&#x27;axios&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">AccessToken</span> = <span class="built_in">require</span>(<span class="string">&#x27;./accesstoken&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span>(<span class="params">router</span>) &#123;</span><br><span class="line">    router.<span class="title function_">post</span>(<span class="string">&#x27;/media/upload&#x27;</span>, <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params">req, res, next</span>) &#123;</span><br><span class="line">   </span><br><span class="line">        <span class="keyword">let</span> &#123;<span class="attr">media</span>:file&#125; = req.<span class="property">files</span> || &#123;&#125;;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">files</span>);</span><br><span class="line">        <span class="keyword">let</span> &#123;type&#125; = req.<span class="property">body</span> || &#123;&#125; ;</span><br><span class="line">        <span class="keyword">const</span> access_token = <span class="keyword">await</span> <span class="title class_">AccessToken</span>.<span class="title function_">getToken</span>();</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 组件一个form，用来上传文件</span></span><br><span class="line">        <span class="keyword">const</span> form = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span><br><span class="line">        form.<span class="title function_">append</span>(<span class="string">&#x27;filename&#x27;</span>, file.<span class="property">name</span>);</span><br><span class="line">        form.<span class="title function_">append</span>(<span class="string">&#x27;filelength&#x27;</span>, file.<span class="property">size</span>);   </span><br><span class="line">        form.<span class="title function_">append</span>(<span class="string">&#x27;media&#x27;</span>,file.<span class="property">data</span>,file.<span class="property">name</span>);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">const</span> &#123;data&#125; =  <span class="keyword">await</span> axios.<span class="title function_">post</span>(<span class="string">&#x27;https://qyapi.weixin.qq.com/cgi-bin/media/upload&#x27;</span>, </span><br><span class="line">        form,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">params</span>: &#123;</span><br><span class="line">                access_token,</span><br><span class="line">                type</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">headers</span>: &#123;</span><br><span class="line">                <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;multipart/form-data&quot;</span></span><br><span class="line">            &#125;,        </span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">        res.<span class="title function_">send</span>(data);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="获取登录用户信息">获取登录用户信息</h1>
<p>企业微信提供了OAuth的授权登录方式，可以从企业微信终端打开的网页获取成员的身份信息，从而免去登录的环节。</p>
<h2 id="配置可信域名">配置可信域名</h2>
<p>为了保证访问授权的安全性，需要配置授权链接URL所在域名为可信域名。在【应用详情】-【开发者接口】-【网页授权及 JS-SDK】，点击【设置可信域名】，在【设置可信域名】弹窗，填写网页授权功能的回调域名it.zsnet.net.cn，网页授权回调域名的配置须与实际访问链接的域名完全一致：</p>
<p><img src="/2022/11/21/%E4%BC%81%E5%BE%AE%E5%BA%94%E7%94%A8%E4%B9%8Bpython%E5%BC%80%E5%8F%91/11.png"></p>
<h2 id="构造网页授权链接">构造网页授权链接</h2>
<p>以下由几个URL要注意区别：</p>
<ul>
<li>应用主页URL
<ul>
<li>从工作台点击打开的页面URL，在创建应用时配置填写的，用来授权链接URL跳转。</li>
</ul></li>
<li>重定向URL
<ul>
<li>当用户授权成功后，会带着成员授权code跳转的URL，用来接收code并获取成员身份</li>
</ul></li>
<li>授权链接URL
<ul>
<li>企业微信名下的URL，包含了suite_id、重定向URL等信息，当企业微信服务参数验证成功后，会跳转到重定向URL</li>
</ul></li>
</ul>
<p>在示例代码的 /routes/index.js 文件中，展示了构造网页授权链接的基本流程：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router.<span class="title function_">get</span>(<span class="title class_">Config</span>.<span class="property">home_path</span>, <span class="keyword">function</span> (<span class="params">req, res, next</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> login_url = <span class="title function_">getLoginURL</span>(<span class="string">&#x27;base&#x27;</span>);</span><br><span class="line">    res.<span class="title function_">redirect</span>(login_url);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="解析成员授权code">解析成员授权code</h2>
<p>企业成员从工作台点击应用，打开应用主页URL，向授权链接URL跳转；企业微信对授权链接上的信息进行校验之后，会重定向URL跳转，并以query的形式带上当前访问成员的code信息。</p>
<p>在示例代码的 /routes/index.js 文件中，展示了从重定向URL里解析成员授权code的基本流程：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router.<span class="title function_">get</span>(<span class="title class_">Config</span>.<span class="property">app_path</span>, <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params">req, res, next</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; code &#125; = req.<span class="property">query</span>;</span><br><span class="line">    <span class="keyword">if</span> (code) &#123;</span><br><span class="line">        <span class="keyword">let</span> access_token = <span class="keyword">await</span> <span class="title class_">AccessToken</span>.<span class="title function_">getToken</span>();</span><br><span class="line">        <span class="keyword">if</span> (access_token) &#123;</span><br><span class="line">            <span class="keyword">let</span> &#123; <span class="attr">data</span>: user_data &#125; = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">`https://qyapi.weixin.qq.com/cgi-bin/user/getuserinfo?access_token=<span class="subst">$&#123;access_token&#125;</span>&amp;code=<span class="subst">$&#123;code&#125;</span>`</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;获取 user_data 成功&#x27;</span>, user_data)</span><br><span class="line">            <span class="keyword">let</span> user_id = user_data.<span class="property">UserId</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            res.<span class="title function_">render</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="获取访问用户身份信息">获取访问用户身份信息</h2>
<p>在解析出成员授权code之后，使用access_token，调用获取访问用户身份的接口，即可得到访问用户的基本信息user_id，若想访问用户更详细的信息，则需要通过读取成员得到用户的姓名、头像等完整信息。</p>
<p>在示例代码的 /routes/index.js 文件中，展示了从重定向URL里解析成员授权code的基本流程：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router.<span class="title function_">get</span>(<span class="title class_">Config</span>.<span class="property">app_path</span>, <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params">req, res, next</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; code &#125; = req.<span class="property">query</span>;</span><br><span class="line">    <span class="keyword">if</span> (code) &#123;</span><br><span class="line">        <span class="keyword">let</span> access_token = <span class="keyword">await</span> <span class="title class_">AccessToken</span>.<span class="title function_">getToken</span>();</span><br><span class="line">        <span class="keyword">if</span> (access_token) &#123;</span><br><span class="line">            <span class="keyword">let</span> &#123; <span class="attr">data</span>: user_detail_data &#125; = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">`https://qyapi.weixin.qq.com/cgi-bin/user/get?access_token=<span class="subst">$&#123;access_token&#125;</span>&amp;userid=<span class="subst">$&#123;user_id&#125;</span>`</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;获取成员详细信息成功&#x27;</span>, user_detail_data);</span><br><span class="line">            req.<span class="property">session</span>.<span class="property">user</span> = user_detail_data;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            res.<span class="title function_">render</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="实操过程">实操过程</h2>
<p>借助PostMan接口工具获取用户的userid（用手机号获取）：<code>https://qyapi.weixin.qq.com/cgi-bin/user/getuserid?access_token=ACCESS_TOKEN</code>，链接里的ACCESS_TOKEN自行替换为实际的access_token值。</p>
<p>打开PostMan，在左上角New collection处右键选择Add collection：</p>
<p><img src="/2022/11/21/%E4%BC%81%E5%BE%AE%E5%BA%94%E7%94%A8%E4%B9%8Bpython%E5%BC%80%E5%8F%91/12.png"></p>
<p>点击新弹出的窗口的Get输入框选择POST，输入链接，选择下方的Body，选择row，填写对应的参数后，点击Send：</p>
<p><img src="/2022/11/21/%E4%BC%81%E5%BE%AE%E5%BA%94%E7%94%A8%E4%B9%8Bpython%E5%BC%80%E5%8F%91/13.png"></p>
<p>然后便可在下方的Body处看到userid的值：</p>
<p><img src="/2022/11/21/%E4%BC%81%E5%BE%AE%E5%BA%94%E7%94%A8%E4%B9%8Bpython%E5%BC%80%E5%8F%91/14.png"></p>
<h1 id="向成员发送信息">向成员发送信息</h1>
<p>调用企业内部的开放接口，都需要带上企业的接口凭证，且必须以 query 参数形式传递。而应用消息推送接口需要指定当前应用的 agent_id。</p>
<p>企业微信的应用消息推送支持不同的消息类型，比如文本、图片、语音、文件等，不同类型的消息类型需要指定对应的消息种类 msgtype。</p>
<p>在示例代码的 /routes/index.js 文件中，编写向成员发送信息的代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="title class_">Config</span>.<span class="property">app_path</span>, <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params">req, res, next</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; code &#125; = req.<span class="property">query</span>;</span><br><span class="line">    <span class="keyword">if</span> (code) &#123;</span><br><span class="line">        <span class="keyword">let</span> access_token = <span class="keyword">await</span> <span class="title class_">AccessToken</span>.<span class="title function_">getToken</span>();</span><br><span class="line">        <span class="keyword">if</span> (access_token) &#123;</span><br><span class="line">            <span class="keyword">let</span> &#123;<span class="attr">data</span>:message_data&#125; = <span class="keyword">await</span> axios.<span class="title function_">post</span>(<span class="string">`https://qyapi.weixin.qq.com/cgi-bin/message/send?access_token=<span class="subst">$&#123;access_token&#125;</span>`</span>,</span><br><span class="line">            &#123;<span class="string">&quot;touser&quot;</span> : user_detail_data.<span class="property">userid</span>,</span><br><span class="line">             <span class="string">&quot;agentid&quot;</span> : agent_id,</span><br><span class="line">             <span class="string">&quot;msgtype&quot;</span> : <span class="string">&quot;text&quot;</span>,</span><br><span class="line">             <span class="string">&quot;text&quot;</span> : &#123;</span><br><span class="line">             <span class="string">&quot;content&quot;</span> : <span class="string">`Hello World! <span class="subst">$&#123;user_detail_data.name&#125;</span>`</span>&#125;,</span><br><span class="line">             &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            res.<span class="title function_">render</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="实操过程-1">实操过程</h2>
<p><strong>参数说明：</strong></p>
<table>
<colgroup>
<col style="width: 26%">
<col style="width: 8%">
<col style="width: 65%">
</colgroup>
<thead>
<tr class="header">
<th>参数</th>
<th>是否必须</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>touser</td>
<td>否</td>
<td>指定接收消息的成员，成员ID列表（多个接收者用‘|’分隔，最多支持1000个）。 特殊情况：指定为"<span class="citation" data-cites="all">@all</span>"，则向该企业应用的全部成员发送</td>
</tr>
<tr class="even">
<td>toparty</td>
<td>否</td>
<td>指定接收消息的部门，部门ID列表，多个接收者用‘|’分隔，最多支持100个。 当touser为"<span class="citation" data-cites="all">@all</span>"时忽略本参数</td>
</tr>
<tr class="odd">
<td>totag</td>
<td>否</td>
<td>指定接收消息的标签，标签ID列表，多个接收者用‘|’分隔，最多支持100个。 当touser为"<span class="citation" data-cites="all">@all</span>"时忽略本参数</td>
</tr>
<tr class="even">
<td>msgtype</td>
<td>是</td>
<td>消息类型，此时固定为：text</td>
</tr>
<tr class="odd">
<td>agentid</td>
<td>是</td>
<td>企业应用的id，整型。企业内部开发，可在应用的设置页面查看；第三方服务商，可通过接口 <a href="https://developer.work.weixin.qq.com/document/path/90236#10975/获取企业授权信息">获取企业授权信息</a> 获取该参数值</td>
</tr>
<tr class="even">
<td>content</td>
<td>是</td>
<td>消息内容，最长不超过2048个字节，超过将截断<strong>（支持id转译）</strong></td>
</tr>
<tr class="odd">
<td>safe</td>
<td>否</td>
<td>表示是否是保密消息，0表示可对外分享，1表示不能分享且内容显示水印，默认为0</td>
</tr>
<tr class="even">
<td>enable_id_trans</td>
<td>否</td>
<td>表示是否开启id转译，0表示否，1表示是，默认0。仅第三方应用需要用到，企业自建应用可以忽略。</td>
</tr>
<tr class="odd">
<td>enable_duplicate_check</td>
<td>否</td>
<td>表示是否开启重复消息检查，0表示否，1表示是，默认0</td>
</tr>
<tr class="even">
<td>duplicate_check_interval</td>
<td>否</td>
<td>表示是否重复消息检查的时间间隔，默认1800s，最大不超过4小时</td>
</tr>
</tbody>
</table>
<blockquote>
<p>注意：touser、toparty、totag不能同时为空。</p>
<p>若操作过程中出现IP不合法的错误，在应用信息页面将IP添加进企业可信IP里便可正常访问。</p>
</blockquote>
<p>借助PostMan接口工具进行发送信息：<code>https://qyapi.weixin.qq.com/cgi-bin/message/send?access_token=ACCESS_TOKEN</code>，链接里的ACCESS_TOKEN自行替换为实际的access_token值。</p>
<p>打开PostMan，在左上角New collection处右键选择Add collection。点击新弹出的窗口的Get输入框选择POST，输入链接，选择下方的Body，选择row，填写对应的参数后，点击Send：</p>
<p><img src="/2022/11/21/%E4%BC%81%E5%BE%AE%E5%BA%94%E7%94%A8%E4%B9%8Bpython%E5%BC%80%E5%8F%91/15.png"></p>
<p>然后便可在下方的Body处看到已经信息发送成功。</p>
<p><img src="/2022/11/21/%E4%BC%81%E5%BE%AE%E5%BA%94%E7%94%A8%E4%B9%8Bpython%E5%BC%80%E5%8F%91/16.png"></p>
]]></content>
      <categories>
        <category>企业微信</category>
        <category>应用开发</category>
      </categories>
      <tags>
        <tag>企业微信</tag>
        <tag>应用开发</tag>
      </tags>
  </entry>
  <entry>
    <title>前端三件套之CSS（一）</title>
    <url>/2022/10/28/%E5%89%8D%E7%AB%AF%E4%B8%89%E4%BB%B6%E5%A5%97%E4%B9%8BCSS%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="css简介">CSS简介</h1>
<p>CSS指层叠样式表，样式定义如何显示HTML元素。</p>
<p>样式对网页中元素位置的排版进行像素级精确控制。</p>
<p>样式通常存储在样式表中，外部样式表通常存储在CSS文件中。</p>
<p>多个样式定义可以层叠为一个，即对一个元素多次设置同一个样式，将使用最后一次设置的属性值。</p>
<p>所有样式根据以下规则层叠于一个新的虚拟样式表中，其中数字4拥有最高的优先权。即意味着它将优先于以下的样式声明：</p>
<ol type="1">
<li>浏览器缺省设置</li>
<li>外部样式表</li>
<li>内部样式表（位于<code>&lt;head&gt;</code>标签内部）</li>
<li>内联样式（在HTML元素内部）</li>
</ol>
<h1 id="css语法">CSS语法</h1>
<p>CSS规则由两个主要的部分构成：选择器，以及一条或多条声明，语法如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">selector&#123;</span><br><span class="line">    property:value;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>选择器通常是需要改变样式的HTML元素，每条声明由一个属性和一个值组成。每个属性有一个值，属性和值被冒号分开，例如：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="css颜色值的写法">CSS颜色值的写法</h2>
<p>在描述颜色时，除了使用英文单词，还可以使用十六进制颜色值。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:<span class="number">#FF0000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>为了节约字节，可以使用CSS的缩写形式：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:<span class="number">#F00</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>除此之外，还可以通过两种方法使用RGB值，当使用RGB百分比时，即使值为0也要写百分比符号。：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:<span class="built_in">rgb</span>(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:<span class="built_in">rgb</span>(<span class="number">100%</span>,<span class="number">0%</span>,<span class="number">0%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="css注释">CSS注释</h2>
<p>CSS注释以"<code>/*</code>"开始，以"<code>*/</code>"结束。</p>
<h1 id="id和class选择器">Id和Class选择器</h1>
<h2 id="id选择器">id选择器</h2>
<p>id选择器可以为标有特定id的HTML元素指定特定的样式。</p>
<p>HTML元素以id属性来设置id选择器，CSS中id选择器以<code>#</code>号来显示：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#para1</span>&#123;</span><br><span class="line">    <span class="attribute">text-align</span>:center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>id属性不要以数字开头，数字开头的id在Mozilla/Firefox浏览器中不起作用。</p>
<p>id属性只能在每个HTML文档中出现一次。</p>
<h2 id="class类选择器">class类选择器</h2>
<p>class选择器用于描述一组元素的样式，class选择器有别于id选择器，class可以在多个元素中使用。</p>
<p>class选择器在HTML中以class属性表示，在CSS中类选择器以一个点<code>.</code>号来显示：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.center</span>&#123;</span><br><span class="line">    <span class="attribute">text-align</span>:center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*也可以指定特定的HTML元素使用class,如指定所有p元素使用class=&quot;center&quot;*/</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.center</span>&#123;</span><br><span class="line">    <span class="attribute">text-align</span>:center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>类名不要以数字开头，数字开头的id在Mozilla/Firefox浏览器中不起作用。</p>
<h2 id="标签选择器">标签选择器</h2>
<p>以HTML标签作为CSS修饰多用的选择器：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line"><span class="selector-tag">h3</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;<span class="selector-tag">h3</span>&gt;hello world!&lt;/<span class="selector-tag">h3</span>&gt;</span><br></pre></td></tr></table></figure>
<h2 id="内联选择器">内联选择器</h2>
<p>直接在标签内部写CSS代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">style</span>=<span class="string">&quot;color red;&quot;</span>&gt;</span></span><br><span class="line">    hello world!</span><br><span class="line"><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这四种CSS选择器有修饰上的优先级，即：</p>
<p>内联选择器&gt;id选择器&gt;类选择器&gt;标签选择器。</p>
<h1 id="样式优先级">样式优先级</h1>
<h2 id="多重样式优先级顺序">多重样式优先级顺序</h2>
<p>下列是一份优先级逐级减少的选择器列表，其中数字1拥有最高的优先权：</p>
<ol type="1">
<li>内联样式</li>
<li>id选择器</li>
<li>伪类</li>
<li>属性选择器</li>
<li>类选择器</li>
<li>元素（类型）选择器</li>
<li>通用选择器（*）</li>
</ol>
<h2 id="important规则例外"><code>!important</code>规则例外</h2>
<p>当<code>!important</code>规则被应用在一个样式声明中时，无论它处在声明列表中的哪里，该样式声明会覆盖CSS中任何其他的声明。</p>
<p>注意：只在需要覆盖全站或外部CSS的特定页面中使用<code>!important</code>，不要在全站范围的CSS上使用<code>!important</code>，不要在插件中使用<code>!important</code>。</p>
<h2 id="优先级法则">优先级法则</h2>
<p><strong>各CSS样式的权值：</strong></p>
<p>内联样式的权值：1000</p>
<p>id选择器（#id）的权值：100</p>
<p>类选择器（.类）的权值：10</p>
<p>元素选择器（元素名）的权值：1</p>
<p><strong>CSS优先级法则：</strong></p>
<ul>
<li>选择器都有一个权值，权值越大越优先</li>
<li>当权值相等时，后出现的样式表设置要优于先出现的样式表设置</li>
<li>网页编写者设置的CSS样式的优先权高于浏览器所设置的样式</li>
<li>继承的CSS样式不如后来指定的CSS样式</li>
<li>在同一组属性设置中标有“<code>!important</code>”规则的优先级最大</li>
</ul>
<h1 id="css设置背景">CSS设置背景</h1>
<p>CSS背景用于定义HTML元素的背景。</p>
<p>CSS属性定义背景效果：</p>
<ul>
<li>background-color:背景颜色</li>
<li>background-image：背景图像</li>
<li>background-repeat：背景是否重复、如何重复</li>
<li>background-attachment：背景图像是否固定或随着页面的其余部分滚动</li>
<li>background-position：背景图像的起始位置</li>
</ul>
<h2 id="background-color">background-color</h2>
<p>background-color属性定义了元素的背景颜色。background-color属性不能继承，默认值是透明<code>transparent</code>。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>:<span class="number">#FF0000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="background-image">background-image</h2>
<p>background-image属性描述了元素的背景图像。</p>
<p>默认情况下背景图像进行平铺重复显示，以覆盖整个元素实体，默认在页面的水平或垂直方向平铺。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">background-image</span>:<span class="built_in">url</span>(<span class="string">&#x27;图片名字&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="background-repeat">background-repeat</h2>
<p>background-repeat属性可以取消图像平铺，或指定只在某个方向上平铺：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">background-image</span>:<span class="built_in">url</span>(<span class="string">&#x27;图片名字&#x27;</span>);</span><br><span class="line">    <span class="attribute">background-repeat</span>:no-repeat;<span class="comment">/*取消平铺*/</span></span><br><span class="line">    <span class="comment">/*background-repeat:repeat-x; 只在水平方向平铺*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="background-position">background-position</h2>
<p>background-position属性可以改变图像在背景中的位置，其属性值可以使用一些关键字top、bottom、left、right和center等，也可以使用如100px或5cm的长度值，还可以只有百分比数值：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">background-image</span>:<span class="built_in">url</span>(<span class="string">&#x27;图片名字&#x27;</span>);</span><br><span class="line">     <span class="attribute">background-image</span>:no-repeat;</span><br><span class="line">    <span class="attribute">background-position</span><span class="selector-pseudo">:right</span> <span class="attribute">top</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="背景属性简写">背景属性简写</h2>
<p>以上代码的属性都可以合并在一个属性background中：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>:<span class="number">#FF0000</span> <span class="built_in">url</span>(<span class="string">&#x27;图片名字&#x27;</span>) no-repeat right top</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用简写属性时，属性值的顺序为：</p>
<ol type="1">
<li>background-color</li>
<li>background-image</li>
<li>background-repeat</li>
<li>background-attachment</li>
<li>background-position</li>
</ol>
<h1 id="text文本">Text（文本）</h1>
<h2 id="文本颜色">文本颜色</h2>
<p>颜色属性可用来设置文字的颜色，如：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:<span class="number">#00ff00</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对于W3C标准的CSS，若定义了颜色属性，还必须定义背景色属性。</p>
<h2 id="文本的对齐方式">文本的对齐方式</h2>
<p>文本排列属性是用来设置文本的水平对齐方式，文本可居中或对齐到左或右或两端对齐。</p>
<p>当<code>text-align</code>设置为<code>justify</code>时，每一行被展开为宽度相等，左右外边距对齐：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>&#123;</span><br><span class="line">    <span class="attribute">text-align</span>:center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.date</span>&#123;</span><br><span class="line">    <span class="attribute">text-align</span><span class="selector-pseudo">:right</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.main</span>&#123;</span><br><span class="line">    <span class="attribute">text-align</span>:justify;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>若想把一个行内元素的第一行“缩进”，可用左内边距或外边距创造这种效果。</p>
<h2 id="文本修饰">文本修饰</h2>
<p><code>text-decoration</code>属性用来设置或删除文本的装饰，主要用来删除链接的下划线：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span>&#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>:none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h1</span>&#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>:overline;<span class="comment">/*横线在文字上方*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h2</span>&#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>:line-through;<span class="comment">/*横线贯穿文字*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h3</span>&#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>:underline;<span class="comment">/*横线在文字下方*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="文本转换">文本转换</h2>
<p><code>text-transform</code>属性是用来指定在一个文本中的大写和小写字母，可用于所有字句变成大写或小写字母，或每个单词的首字母大写：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-class">.uppercase</span>&#123;</span><br><span class="line">    <span class="attribute">text-transform</span>:uppercase;<span class="comment">/*文字全大写*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.lowercase</span>&#123;</span><br><span class="line">    <span class="attribute">text-transform</span>:lowercase;<span class="comment">/*文字全小写*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.capitalize</span>&#123;</span><br><span class="line">    <span class="attribute">text-transform</span>:capitalize;<span class="comment">/*文字首字母大写*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="文本缩进">文本缩进</h2>
<p><code>text-indent</code>属性用来指定文本的第一行缩进：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">text-indent</span>:<span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="文字间隔">文字间隔</h2>
<p><code>word-spacing</code>属性可以改变字或单词之间的标准间隔（不是每个字之间，以回车键为分隔符），其默认值normal与设置值为0是一样的：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">word-spacing</span>:<span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="字体">字体</h1>
<p>字体系列有两种类型：</p>
<ul>
<li><p>通用字体系列：拥有相似外观的字体系统组合（如"Serif"或"Monospace"）</p></li>
<li><p>特定字体系列：一个特定的字体系列（如“Times”或“Courier”）</p></li>
</ul>
<p>除了各种特定的字体系列外，CSS定义了5种通用字体系列：</p>
<ul>
<li>Serif字体</li>
<li>Sans-serif字体</li>
<li>Monospace字体</li>
<li>Cursive字体</li>
<li>Fantasy字体</li>
</ul>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">Generic family</th>
<th style="text-align: left;">字体系列</th>
<th style="text-align: left;">说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">Serif</td>
<td style="text-align: left;">Times New Roman Georgia</td>
<td style="text-align: left;">Serif字体中字符在行的末端拥有额外的装饰</td>
</tr>
<tr class="even">
<td style="text-align: left;">Sans-serif</td>
<td style="text-align: left;">Arial Verdana</td>
<td style="text-align: left;">"Sans"是指无 - 这些字体在末端没有额外的装饰</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Monospace</td>
<td style="text-align: left;">Courier New Lucida Console</td>
<td style="text-align: left;">所有的等宽字符具有相同的宽度</td>
</tr>
</tbody>
</table>
<h2 id="字体系列">字体系列</h2>
<p><code>font-family</code>属性设置文本的字体系列。</p>
<p><code>font-family</code>属性应该设置几个字体名称作为备用，若浏览器不支持第一种字体会尝试下一种字体。若字体系列的名称超过一种，第一个字体必须用引号：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">font-family</span>:<span class="string">&quot;Times New Roman&quot;</span>,Times,serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="字体样式">字体样式</h2>
<p><code>font-style</code>属性主要用于指定斜体文字的字体样式。</p>
<p>该属性有三个值：</p>
<ul>
<li>正常normal：正常显示文本</li>
<li>斜体italic：以斜体字显示的文字</li>
<li>倾斜的文字oblique：文字向一边倾斜</li>
</ul>
<p>通常情况下italic与oblique在web浏览器种看上去完全一样。</p>
<p>italic与oblique的区别：</p>
<ul>
<li>italic是一种简单的文字风格，对每个字母的结果有一些小改动，来反映变化的外观</li>
<li>oblique文本是正常竖直文本的一个倾斜版本</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-class">.normal</span>&#123;</span><br><span class="line">    <span class="attribute">font-style</span>:normal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.italic</span>&#123;</span><br><span class="line">    <span class="attribute">font-style</span>:italic;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.oblique</span>&#123;</span><br><span class="line">    <span class="attribute">font-style</span>:oblique;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="字体大小">字体大小</h2>
<p><code>font-size</code>属性设置文本的大小，若不指定一个字体的大小，则默认大小和普通文本段落一样，是16像素（16px=1em），字体大小的值可以是绝对或相对的大小。</p>
<p>绝对大小：</p>
<ul>
<li>设置一个指定大小的文本</li>
<li>不允许用户在所有浏览器中改变文本大小</li>
<li>确定了输出的物理尺寸时，绝对大小很有用</li>
</ul>
<p>相对大小：</p>
<ul>
<li>相对于周围的元素来设置大小</li>
<li>允许用户在浏览器中改变文字的大小。</li>
</ul>
<h2 id="用像素设置字体大小">用像素设置字体大小</h2>
<p>用像素可以在IE9、Firefox、Chrome、Opera和Safa里调整文本大小，不能在IE9以前的版本运行。通过浏览器缩放工具调整文本大小时，整个页面也随之变化。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>:<span class="number">40px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="用em设置字体大小">用em设置字体大小</h2>
<p>默认1em=16px，当<code>font-size</code>为30px时，1em=30px。使用em单位可以在所有浏览器中调整文本大小。通过浏览器缩放工具调整文本大小时，会比正常的尺寸更大或更小。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>:<span class="number">2.5em</span>;<span class="comment">/*40px/16=2.5em*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="使用百分比和em组合">使用百分比和em组合</h2>
<p>在所有浏览器的解决方案中，先设置<code>&lt;body&gt;</code>元素的默认大小是百分比，再用em设置其他元素的字体大小。这样可以在所有浏览器中显示相同的文本大小，并允许所有浏览器缩放文本的大小：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>:<span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>:<span class="number">2.5em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="链接样式">链接样式</h1>
<p>链接的样式可以用任何CSS属性，链接a具有四个链接状态：</p>
<ul>
<li><code>a:link</code>：正常，未访问过的链接</li>
<li><code>a:visited</code>：用户已访问过的链接</li>
<li><code>a:hover</code>：当用户鼠标放在链接上时</li>
<li><code>a:active</code>：链接被点解的哪一刻</li>
</ul>
<p>当设置为若干链路状态的样式时，要注意：</p>
<ul>
<li><code>a:hover</code>必须跟在<code>a.link</code>和<code>a.visited</code>后面</li>
<li><code>a:active</code>必须跟在<code>a:hover</code>后面</li>
</ul>
<h2 id="背景颜色">背景颜色</h2>
<p>背景颜色属性指定链接背景色：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-class">.link</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>:<span class="number">#FF704D</span>;</span><br><span class="line">    <span class="attribute">text-decoration</span>:none;<span class="comment">/*删除链接中的下划线*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="鼠标形状">鼠标形状</h2>
<p>使用cursor属性可以设置鼠标形状。</p>
<p>常用鼠标形状如下所示：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">属性值</th>
<th style="text-align: left;">描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">default</td>
<td style="text-align: left;">默认光标，箭头</td>
</tr>
<tr class="even">
<td style="text-align: left;">pointer</td>
<td style="text-align: left;">超链接的指针，手型</td>
</tr>
<tr class="odd">
<td style="text-align: left;">wait</td>
<td style="text-align: left;">指示程序正在忙</td>
</tr>
<tr class="even">
<td style="text-align: left;">help</td>
<td style="text-align: left;">指示可用的帮忙</td>
</tr>
<tr class="odd">
<td style="text-align: left;">text</td>
<td style="text-align: left;">指示文本</td>
</tr>
<tr class="even">
<td style="text-align: left;">crosshair</td>
<td style="text-align: left;">鼠标呈现十字状</td>
</tr>
</tbody>
</table>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:green;</span><br><span class="line">    <span class="attribute">cursor</span>:crosshair;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="列表样式">列表样式</h1>
<p>CSS列表可以设置不同的列表项标记为有序列表或无序列表，设置列表项标记为图像。</p>
<h2 id="不同的列表项标记">不同的列表项标记</h2>
<p><code>list-style-type</code>属性指定列表项标记的类型：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span><span class="selector-class">.a</span>&#123;</span><br><span class="line">    <span class="attribute">list-style-type</span>:circle;<span class="comment">/*空心圆标记*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">ul</span><span class="selector-class">.b</span>&#123;</span><br><span class="line">    <span class="attribute">list-style-type</span>:square;<span class="comment">/*实心方块标记*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">ol</span><span class="selector-class">.c</span>&#123;</span><br><span class="line">    <span class="attribute">list-style-type</span>:upper-roman;<span class="comment">/*大写罗马数字标记*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">ol</span><span class="selector-class">.d</span>&#123;</span><br><span class="line">    <span class="attribute">list-style-type</span>:lower-alpha;<span class="comment">/*小写英文字母标记*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>list-style-type</code>属性的常见属性值有：</p>
<p>none：不使用项目符号</p>
<p>disc：实心圆</p>
<p>circle：空心圆</p>
<p>square：实心方块</p>
<p>decimal：阿拉伯数字</p>
<p>lower-alpha：小写英文字母</p>
<p>upper-alpha：大写英文字母</p>
<p>lower-roman：小写罗马数字</p>
<p>upper-roman：大写罗马数字</p>
<h2 id="作为列表项标记的图像">作为列表项标记的图像</h2>
<p>使用列表样式<code>list-style-image</code>属性可以指定列表项标记的图像：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span>&#123;</span><br><span class="line">    <span class="attribute">list-style-image</span>:<span class="built_in">url</span>(<span class="string">&#x27;图像名称&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>各大主流浏览器对图像标记的显示各有差异，IE和Opera显示标记比Firefox、Chrome和Safari更高一点。</p>
<h2 id="标记出现位置">标记出现位置</h2>
<p><code>list-style-position</code>属性可以指定标志出现在列表项内容外（outside）还是内容内部（inside）：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span>&#123;</span><br><span class="line">    <span class="attribute">list-style-position</span>:outside;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="简写属性">简写属性</h2>
<p>与背景属性类似，列表属性也可以在单个属性<code>list-style</code>中指定所有的列表属性：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span>&#123;</span><br><span class="line">    <span class="attribute">list-style</span>:square <span class="built_in">url</span>(<span class="string">&quot;图片名称&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用简写属性值的顺序是：</p>
<ol type="1">
<li><code>list-style-type</code></li>
<li><code>list-style-position</code></li>
<li><code>list-style-image</code></li>
</ol>
<h2 id="浏览器兼容性解决方案">浏览器兼容性解决方案</h2>
<p>若想要在所有浏览器放置同样的标志，应解决浏览器的兼容性问题。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span>&#123;</span><br><span class="line">    <span class="attribute">list-style-type</span>: none;<span class="comment">/*设置列表样式类型为无列表项标记*/</span></span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0px</span>;<span class="comment">/*设置填充和边距0px，确保能在浏览器之间兼容*/</span></span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">图像名称</span>);<span class="comment">/*设置图像并设置它只显示一次*/</span></span><br><span class="line">    <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">0px</span> <span class="number">5px</span>;<span class="comment">/*定位图像位置*/</span></span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">14px</span>;<span class="comment">/*把文本置于列表中*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>即解决浏览器兼容性问题可以从四个方面着手：浏览器CSS样式初始化、浏览器私有属性、CSS hack语法和自动化插件。</p>
<h3 id="浏览器css样式初始化">浏览器CSS样式初始化</h3>
<p>在所有CSS开始前，先把margin和padding都设为0：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>若不知道浏览器CSS样式要初始化哪些内容，建议直接引用<a href="https://github.com/necolas/normalize.css">Normalize.css</a>库。</p>
<h3 id="浏览器私有属性">浏览器私有属性</h3>
<p><code>-webkit-</code>、<code>-moz-</code>、<code>-ms-</code>等是经常在CSS属性前加的一些前缀，这些就是浏览器的私有属性。</p>
<p>常用的前缀有：</p>
<ul>
<li><code>-moz</code>：代表Firefox浏览器私有属性</li>
<li><code>-ms-</code>：代表IE浏览器私有属性</li>
<li><code>-webkit</code>：代表Chrome、Safari私有属性</li>
<li><code>-o</code>：代表opera私有属性</li>
</ul>
<p>要注意书写顺序，<strong>兼容性写法放到前面，标准写法放到最后：</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">-webkit-<span class="attribute">transform</span>:<span class="built_in">rotate</span>(-<span class="number">3deg</span>);<span class="comment">/*Chrome、Safari*/</span></span><br><span class="line">-moz-<span class="attribute">transform</span>:<span class="built_in">rotate</span>(-<span class="number">3deg</span>);<span class="comment">/*Firefox*/</span></span><br><span class="line">-ms-<span class="attribute">transform</span>:<span class="built_in">rotate</span>(-<span class="number">3deg</span>);<span class="comment">/*IE*/</span></span><br><span class="line">-o-<span class="attribute">transform</span>:<span class="built_in">rotate</span>(-<span class="number">3deg</span>):<span class="comment">/*opera*/</span></span><br><span class="line">transform:<span class="built_in">rotate</span>(-<span class="number">3deg</span>);</span><br></pre></td></tr></table></figure>
<h3 id="css-hack">CSS hack</h3>
<p>除了以上的默认样式覆盖及私有属性添加，有时还需要针对不同浏览器甚至不同版本来编写特定的CSS样式，这一过程称之为CSS hack。在Web页面制作中尽量不要使用CSS Hack来处理兼容问题。</p>
<p>CSS hack的写法可归纳为以下几种：条件hack、属性级hack、选择符级hack。</p>
<h4 id="条件hack">条件hack</h4>
<p>主要针对IE浏览器进行一些特殊的设置：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--[if &lt;keywords&gt;? IE &lt;version&gt;?]&gt;</span></span><br><span class="line"><span class="comment">	代码块，可以是html、css、js</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure>
<p>if后面跟的条件共包括6种选择方式：</p>
<ul>
<li>是否：指定是否IE或IE某个版本。关键字：空</li>
<li>大于：选择大于指定版本的IE版本。关键字：<code>gt</code></li>
<li>大于或等于：选择大于或等于指定版本的IE版本。关键字：<code>gte</code></li>
<li>小于：选择小于指定版本的IE版本。关键字：<code>lt</code></li>
<li>小于或等于：选择小于或等于指定版本的IE版本。关键字：<code>lte</code></li>
<li>非指定版本：选择除指定版本外的所有IE版本。关键字：<code>!</code></li>
</ul>
<p>这里的版本是指IE浏览器版本，如6、7、8。<strong>注意IE10及以上版本已将条件注释特性移除</strong>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--[if IE]&gt;</span></span><br><span class="line"><span class="comment">	&lt;p&gt;在非IE中看不到这条文字&lt;/p&gt;</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--[if IE]&gt;</span></span><br><span class="line"><span class="comment">&lt;style&gt;</span></span><br><span class="line"><span class="comment">	.test&#123;</span></span><br><span class="line"><span class="comment">		color:red;</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment">&lt;/style&gt;</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--[if IE 9]&gt;</span></span><br><span class="line"><span class="comment">	&lt;script src=&quot;//cdn.bootcss.com/html5shiv/3.7.2/html5shiv.min.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">	&lt;script src=&quot;//cdn.bootcss.com/respond.js/1.4.2/respond.min.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="属性hack">属性hack</h4>
<p>在CSS样式属性名前加上一些只有特定浏览器才能识别的hack前缀。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">selector&#123;</span><br><span class="line">    &lt;hack&gt;?property:value&lt;hack&gt;?;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>属性取值及浏览器支持情况如下：</p>
<table>
<thead>
<tr class="header">
<th></th>
<th>IE6</th>
<th>IE7</th>
<th>IE8</th>
<th>IE9</th>
<th>IE10</th>
<th>现代浏览器</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>*</code></td>
<td>支持</td>
<td>支持</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr class="even">
<td><code>+</code></td>
<td></td>
<td>支持</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr class="odd">
<td><code>_</code></td>
<td>支持</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr class="even">
<td><code>!important</code></td>
<td></td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
</tr>
<tr class="odd">
<td><code>\9</code></td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
<td></td>
</tr>
<tr class="even">
<td><code>\0</code></td>
<td></td>
<td></td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
<td></td>
</tr>
<tr class="odd">
<td><code>\9\0</code></td>
<td></td>
<td></td>
<td></td>
<td>支持</td>
<td>支持</td>
<td></td>
</tr>
</tbody>
</table>
<p>注意书写顺序，低版本的兼容性写法放到最后：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.test</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:<span class="number">#090</span>\<span class="number">9</span>;<span class="comment">/*IE6-IE10*/</span></span><br><span class="line">    *<span class="attribute">color</span>:<span class="number">#f00</span>;<span class="comment">/*IE6-IE7*/</span></span><br><span class="line">    _color:<span class="number">#ff0</span>;<span class="comment">/*IE6及更早版本*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="选择符级hack">选择符级hack</h4>
<p>针对一些页面表现不一致或需要特殊对待的浏览器，在CSS选择器前加上一些只有某些特定浏览器才能识别的前缀进行hack：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;hack&gt; selector&#123;</span><br><span class="line">    sRules</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>常见的选择符级hack有：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">*<span class="selector-tag">html</span> <span class="comment">/**前缀只对IE6生效*/</span></span><br><span class="line">*+<span class="selector-tag">html</span> <span class="comment">/**+前缀只对IE7生效*/</span></span><br><span class="line"><span class="keyword">@media</span> screen\<span class="number">9</span>&#123;...&#125;<span class="comment">/*只对IE6/7生效*/</span></span><br><span class="line"><span class="keyword">@media</span> \<span class="number">0s</span>creen\,screen\<span class="number">9</span>&#123;<span class="selector-tag">body</span> &#123; <span class="attribute">background</span>: blue; &#125;&#125;<span class="comment">/*只对IE6/7/8有效*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> \<span class="number">0s</span>creen &#123;<span class="selector-tag">body</span> &#123; <span class="attribute">background</span>: red; &#125;&#125;<span class="comment">/*只对IE8有效*/</span></span><br><span class="line"><span class="keyword">@media</span> screen\<span class="number">0</span> &#123;<span class="selector-tag">body</span> &#123; <span class="attribute">background</span>: green; &#125;&#125; <span class="comment">/*只对IE8/9/10有效*/</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>:<span class="number">0</span>\<span class="number">0</span>) &#123;<span class="selector-tag">body</span> &#123; <span class="attribute">background</span>: gray; &#125;&#125; <span class="comment">/*只对IE9/10有效*/</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">-ms-high-contrast</span>: active), (<span class="attribute">-ms-high-contrast</span>: none) &#123;<span class="selector-tag">body</span> &#123; <span class="attribute">background</span>: orange; &#125;&#125; <span class="comment">/*只对IE10有效*/</span></span><br></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">*<span class="selector-tag">html</span> <span class="selector-class">.test</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:<span class="number">#090</span>;<span class="comment">/*IE6及更早版本*/</span></span><br><span class="line">&#125;</span><br><span class="line">*+<span class="selector-tag">html</span> <span class="selector-class">.test</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:<span class="number">#ff0</span>;<span class="comment">/*IE7*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="自动化插件">自动化插件</h3>
<p>Autoprefixer是一款自动管理浏览器前缀的插件，它可以解析CSS文件并添加浏览器前缀到CSS内容里。该插件的安装和使用可在<a href="https://juejin.cn/post/7032918076089696264">webpack指南</a>中学习。</p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>前端三件套之CSS（二）</title>
    <url>/2022/10/28/%E5%89%8D%E7%AB%AF%E4%B8%89%E4%BB%B6%E5%A5%97%E4%B9%8BCSS%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h1 id="css表格">CSS表格</h1>
<h2 id="表格边框">表格边框</h2>
<p>使用<code>border</code>属性可以指定CSS表格边框：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">table</span>,<span class="selector-tag">th</span>,<span class="selector-tag">td</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>:<span class="number">1px</span> solid black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由于表格和<code>th/td</code>元素有独立的边界，故会显示有双边框。</p>
<h2 id="折叠边框">折叠边框</h2>
<p>使用<code>border-collapse</code>属性可以设置表格的边框是否被折叠成一个单一的边框或隔开：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">table</span>&#123;</span><br><span class="line">    <span class="attribute">border-collapse</span>:collapse;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">table</span>,<span class="selector-tag">th</span>,<span class="selector-tag">td</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>:<span class="number">1px</span> solid black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="表格宽度和高度">表格宽度和高度</h2>
<p>使用<code>width</code>和<code>height</code>属性定义表格的宽度和高度：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">table</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">th</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="表格文字对齐">表格文字对齐</h2>
<p>表格中的文字对齐可分为水平对齐和垂直对齐。</p>
<p>使用<code>text-align</code>属性设置水平对齐方式，如向左对齐<code>left</code>、向右对齐<code>right</code>或居中对齐<code>center</code>：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">td</span>&#123;</span><br><span class="line">	<span class="attribute">text-align</span><span class="selector-pseudo">:right</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用<code>vertical-align</code>属性设置垂直对齐方式，如顶部<code>top</code>、底部<code>bottom</code>或中间<code>center</code>：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">td</span>&#123;</span><br><span class="line">	<span class="attribute">vertical-align</span>:bottom;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="表格填充">表格填充</h2>
<p>使用<code>padding</code>属性控制内容与边框之间的距离：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">td</span>&#123;</span><br><span class="line">	<span class="attribute">padding</span>:<span class="number">15px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="表格颜色">表格颜色</h2>
<p>使用<code>border</code>属性指定边框的颜色，使用<code>color</code>属性控制文本颜色，使用<code>background-color</code>属性控制背景颜色：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">table</span>,<span class="selector-tag">td</span>,<span class="selector-tag">th</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>:<span class="number">1px</span> solid green;<span class="comment">/*solid指边框线为实线*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">th</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>:green;</span><br><span class="line">    <span class="attribute">color</span>:white;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="盒子模型">盒子模型</h1>
<p>CSS盒子模型本质上是一个盒子，封装周围的HTML元素，包括边距、边框、填充和实际内容。盒模型允许在其他元素和周围元素边框之间的空间放置元素。</p>
<p>标准盒子模型如下图所示：</p>
<p><img src="/2022/10/28/%E5%89%8D%E7%AB%AF%E4%B8%89%E4%BB%B6%E5%A5%97%E4%B9%8BCSS%EF%BC%88%E4%BA%8C%EF%BC%89/1.png"></p>
<ul>
<li>Margin（外边距）：盒子与其他盒子的距离。Margin没有背景颜色，其完全透明</li>
<li>Border（边框）：盒子的厚度和它的颜色或材料。边框颜色会受到盒子的背景颜色影响</li>
<li>Padding（内边距）：盒子里与盒中内容的填充物。会受到框中填充的背景颜色影响</li>
<li>Content（内容）：盒子里装的东西，显示文本和图像</li>
</ul>
<h2 id="元素的宽度和高度">元素的宽度和高度</h2>
<p>当指定一个CSS元素的宽度和高度属性时，实质上只是设置内容区域的宽度和高度，除此之外，还需要添加填充、边框和边距：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">250px</span>;</span><br><span class="line">    <span class="attribute">padding</span>:<span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border</span>:<span class="number">5</span> px solid gray;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>则该元素的总宽度为250px（宽）+20px（左右填充）+10px（左右边框）+20px（左右边距=300px。</p>
<p>因此，元素的总宽度计算公式为：</p>
<p>元素的总宽度=元素自身宽度+左填充+右填充+左边框+右边框+左边距+右边距</p>
<p>同理可得，元素的总高度计算公式为：</p>
<p>元素的总高度=元素自身高度+顶部填充+底部填充+上边框+下边框+上边距+下边距</p>
<p><strong>网页的宽度一般为1920px，高度不限。有限可视区在：950px~1200px的宽度之间。</strong></p>
<h2 id="边框">边框</h2>
<h2 id="边框样式">边框样式</h2>
<p>使用<code>border-style</code>属性可以定义边框的样式。</p>
<p>border-style有以下属性值：</p>
<ul>
<li>none：默认无边框</li>
<li>dotted：定义一个点线框</li>
<li>dashed：定义一个虚线框</li>
<li>solid：定义实线边界</li>
<li>double：定义两个边界。两个边界的宽度和<code>border-width</code>的值相同</li>
<li>groove：定义3D沟槽边距。效果取决于边界的颜色值</li>
<li>ridge：定义3D脊边界。效果取决于边界的颜色值</li>
<li>inset：定义一个3D的嵌入边框。效果取决于边界的颜色值</li>
<li>outset：定义一个3D的突出边框。效果取决于边界的颜色值</li>
</ul>
<h2 id="边框宽度">边框宽度</h2>
<p>使用<code>border-width</code>属性可以为边框指定宽度。可以指定长度值，比如2px或0.1em；或使用3个关键字之一：thin、medium（默认值）和thick。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">border-style</span>:solid;</span><br><span class="line">    <span class="attribute">border-width</span>:medium;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="边框颜色">边框颜色</h2>
<p>使用<code>border-color</code>属性可以设置边框的颜色，一次最多可以接受4个颜色值，使用<code>border-color</code>必须得先使用<code>border-style</code>来设置边框样式：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">border-style</span>:solid;</span><br><span class="line">    <span class="attribute">border-color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="单独设置各边">单独设置各边</h2>
<p>可以指定不同的侧面不同的边框：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">border-top-style</span>:dotted;</span><br><span class="line">    <span class="attribute">border-right-style</span>:solid;</span><br><span class="line">    <span class="attribute">border-bottom-style</span>:dotted;</span><br><span class="line">    <span class="attribute">border-left-style</span>:solid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*方法2*/</span></span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">border-style</span>:dotted solid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>border-style 属性可以有 1-4 个值：</p>
<ul>
<li><code>border-style:dotted solid double dashed;</code>
<ul>
<li>上边框是 dotted</li>
<li>右边框是 solid</li>
<li>底边框是 double</li>
<li>左边框是 dashed</li>
</ul></li>
<li><code>border-style:dotted solid double;</code>
<ul>
<li>上边框是 dotted</li>
<li>左、右边框是 solid</li>
<li>底边框是 double</li>
</ul></li>
<li><code>border-style:dotted solid;</code>
<ul>
<li>上、底边框是 dotted</li>
<li>左、右边框是 solid</li>
</ul></li>
<li><code>border-style:dotted;</code>
<ul>
<li>四面边框是 dotted</li>
</ul></li>
</ul>
<h2 id="透明边框">透明边框</h2>
<p>透明样式的定义如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span>,<span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>&#123;</span><br><span class="line">    <span class="attribute">border-style</span>:solid;</span><br><span class="line">    <span class="attribute">border-width</span>:<span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">border-color</span>:transparent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="attribute">border-color</span>:gray;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="简写边框属性">简写边框属性</h2>
<p>可以在<code>border</code>属性中设置以下属性：</p>
<ul>
<li>border-width</li>
<li>border-style</li>
<li>border-color</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border</span>:<span class="number">5px</span> solid red;</span><br></pre></td></tr></table></figure>
<h1 id="css伪类">CSS伪类</h1>
<p>伪类可以用来添加一些选择器的特殊效果。</p>
<p>伪类用于当已有元素处于的某个状态时，为其添加对应的样式，这个状态是根据用户行为而动态变化的。<strong>伪类的名称不区分大小写</strong>，伪类的语法如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">selector:pseudo-class&#123;</span><br><span class="line">	property:value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>CSS类中也可以使用伪类：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">selector<span class="selector-class">.class</span>:pseudo-class&#123;</span><br><span class="line">	property:value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="anchor伪类">anchor伪类</h2>
<p>在支持CSS的浏览器中，链接的不同状态可以以不同的方式显示。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:<span class="number">#FF00FF</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:<span class="number">#0000FF</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="伪类和css类">伪类和CSS类</h2>
<p>伪类可以与CSS类配合使用：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">a.red:visited&#123;</span><br><span class="line">    color:#FF0000;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;red&quot;</span> <span class="attr">href</span>=<span class="string">&quot;1.html&quot;</span>&gt;</span>CSS style<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="first-child伪类"><code>first-child</code>伪类</h2>
<p>可以使用<code>first-child</code>伪类来选择元素的第一个子元素。</p>
<p><strong>注意：</strong>在IE8之前是版本必须声明<code>&lt;!DOCTYPE&gt;</code>，<code>first-child</code>才会生效。</p>
<p>如用来匹配第一个<code>&lt;p&gt;</code>元素：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">p</span><span class="selector-pseudo">:first</span>-child&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>:blue;</span></span><br><span class="line"><span class="language-css">&#125;    </span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是狼<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是小狼<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<p><img src="/2022/10/28/%E5%89%8D%E7%AB%AF%E4%B8%89%E4%BB%B6%E5%A5%97%E4%B9%8BCSS%EF%BC%88%E4%BA%8C%EF%BC%89/2.png"></p>
<p>如用来匹配所有<code>&lt;p&gt;</code>元素中的第一个<code>&lt;i&gt;</code>元素：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">p</span>&gt;<span class="selector-tag">i</span><span class="selector-pseudo">:first</span>-child&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>:blue;</span></span><br><span class="line"><span class="language-css">&#125;    </span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是<span class="tag">&lt;<span class="name">i</span>&gt;</span>一只<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span>狼<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是<span class="tag">&lt;<span class="name">i</span>&gt;</span>一只<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span>小<span class="tag">&lt;/<span class="name">i</span>&gt;</span>狼<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<p><img src="/2022/10/28/%E5%89%8D%E7%AB%AF%E4%B8%89%E4%BB%B6%E5%A5%97%E4%B9%8BCSS%EF%BC%88%E4%BA%8C%EF%BC%89/3.png"></p>
<p>如用来匹配所有作为第一个子元素的<code>&lt;p&gt;</code>元素中的所有<code>&lt;i&gt;</code>元素：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">p</span><span class="selector-pseudo">:first</span>-child <span class="selector-tag">i</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>:blue;</span></span><br><span class="line"><span class="language-css">&#125;    </span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是<span class="tag">&lt;<span class="name">i</span>&gt;</span>一只<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span>狼<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是<span class="tag">&lt;<span class="name">i</span>&gt;</span>一只<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span>小<span class="tag">&lt;/<span class="name">i</span>&gt;</span>狼<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<p><img src="/2022/10/28/%E5%89%8D%E7%AB%AF%E4%B8%89%E4%BB%B6%E5%A5%97%E4%B9%8BCSS%EF%BC%88%E4%BA%8C%EF%BC%89/4.png"></p>
<h2 id="lang伪类">lang伪类</h2>
<p>lang伪类可以为不同的语言定义特殊的规则。</p>
<p><strong>注意：</strong>在IE8之前是版本必须声明<code>&lt;!DOCTYPE&gt;</code>才能支持lang伪类。</p>
<p>如lang类为属性值为no的q元素定义引号的类型：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">q</span><span class="selector-pseudo">:lang</span>(no)&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">quotes</span>:<span class="string">&quot;~&quot;</span><span class="string">&quot;~&quot;</span>;</span></span><br><span class="line"><span class="language-css">&#125;    </span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是<span class="tag">&lt;<span class="name">q</span> <span class="attr">lang</span>=<span class="string">&quot;no&quot;</span>&gt;</span>一只<span class="tag">&lt;/<span class="name">q</span>&gt;</span>狼<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是一只<span class="tag">&lt;<span class="name">q</span> <span class="attr">lang</span>=<span class="string">&quot;no&quot;</span>&gt;</span>小狼<span class="tag">&lt;/<span class="name">q</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<p><img src="/2022/10/28/%E5%89%8D%E7%AB%AF%E4%B8%89%E4%BB%B6%E5%A5%97%E4%B9%8BCSS%EF%BC%88%E4%BA%8C%EF%BC%89/5.png"></p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>前端三件套之HTML（一）</title>
    <url>/2022/10/26/%E5%89%8D%E7%AB%AF%E4%B8%89%E4%BB%B6%E5%A5%97%E4%B9%8BHTML%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="html简介">HTML简介</h1>
<ul>
<li><p>HTML是指<strong>超文本标记语言</strong>，是用来描述网页的一种语言。可以使用HTML来建立Web站点，HTML运行在浏览器上，有浏览器来解析。</p></li>
<li><p>HTML不是一种编程语言，而是一种标记语言，它有一套标记标签。</p></li>
<li><p>HTML使用标记标签来描述网页。</p></li>
<li><p>HTML文档包含了HTML标签及文本内容，HTML文档也叫做web页面。</p></li>
<li><p>HTML文档的后缀名包含<code>.html</code>（常用）、<code>.htm</code>。</p></li>
</ul>
<h2 id="html网页结构">HTML网页结构</h2>
<p>一个可视化HTML页面结构实例如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>这是页面标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是一个标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>上述语句的含义如下：</p>
<ul>
<li><p><code>&lt;!DOCTYPE html&gt;</code>声明为HTML5文档，<code>doctype</code>声明是<strong>不区分大小写</strong>的。</p></li>
<li><p><code>&lt;html&gt;</code>与<code>&lt;/html&gt;</code>之间的文本用来描述网页。</p></li>
<li><p><code>&lt;head&gt;</code>与<code>&lt;/head&gt;</code>之间的文本用来描述文档的元数据(meta)。可以包含脚本、样式、meta信息以及其他更多的信息。</p></li>
<li><p><code>&lt;meta&gt;</code>标签提供了HTML文档的元数据。元数据会被浏览器解析，但不会显示在客户端。对于中文网页需要使用<code>&lt;meta charset="utf-8"&gt;</code>定义网页编码格式为<code>utf-8</code>，否则会出现乱码。</p></li>
<li><p><code>&lt;title&gt;</code>与<code>&lt;/title&gt;</code>之间的 文本<strong>描述文档的标题</strong>。(<code>&lt;head&gt;</code>中必须包含<code>&lt;title&gt;</code>)</p></li>
<li><p><code>&lt;body&gt;</code>与<code>&lt;/body&gt;</code>之间的文本是<strong>可见的页面内容。</strong></p></li>
<li><p><code>&lt;h1&gt;</code>与<code>&lt;/h1&gt;</code>之间的文本被显示为一个<strong>大标题</strong>。</p></li>
<li><p><code>&lt;p&gt;</code>与<code>&lt;/p&gt;</code>之间的文本被显示为一个<strong>段落。</strong></p></li>
</ul>
<p>代码运行结果如下：</p>
<p><img src="/2022/10/26/%E5%89%8D%E7%AB%AF%E4%B8%89%E4%BB%B6%E5%A5%97%E4%B9%8BHTML%EF%BC%88%E4%B8%80%EF%BC%89/1.png"></p>
<h2 id="html标签">HTML标签</h2>
<p>HTML标记标签通常被称为HTML标签。</p>
<ul>
<li>HTML标签是由尖括号包围的关键词，如<code>&lt;html&gt;</code>。</li>
<li>HTML标签通常是成对出现的，如<code>&lt;b&gt;</code>和<code>&lt;/b&gt;</code></li>
<li>标签对中的第一个标签是开始标签，第二个标签是结束标签，开始和结束标签也被称为开放标签和闭合标签。</li>
<li>标签的具体格式为：<code>&lt;标签&gt;内容&lt;/标签&gt;</code>。</li>
</ul>
<h2 id="web浏览器">web浏览器</h2>
<p>web浏览器用于读取HTML文件，并将其作为网页显示。</p>
<p>web不会直接显示HTML标签，而是通过使用标签来决定如何向用户展现HTML页面的内容。</p>
<h3 id="doctype声明"><code>&lt;!DOCTYPE&gt;</code>声明</h3>
<p><code>&lt;!DOCTYPE&gt;</code>是标准通用标记语言的文档类型声明，有助于在浏览器中正确地显示网页。由于网络上文件的类型不一，因此需要正确的声明HTML版本，以便浏览器能够正确识别并显示网页内容。<code>doctype</code>声明不区分大小写。在html页面的头部声明字符为UTF-8可以解决浏览器中出现中文乱码的现象。</p>
<h1 id="html基础">HTML基础</h1>
<h2 id="html标题">HTML标题</h2>
<p>HTML标题是通过<code>&lt;h1&gt;-&lt;h6&gt;</code>标签来定义的。</p>
<p>h是英文header标题的缩写，有六个标题元素标签：<code>&lt;h1&gt;</code>、<code>&lt;h2&gt;</code>、<code>&lt;h3&gt;</code>、<code>&lt;h4&gt;</code>、<code>&lt;h5&gt;</code>、<code>&lt;h6&gt;</code>。每个元素代表文档中不同级别的内容：如<code>&lt;h1&gt;</code>代表主标题，<code>&lt;h2&gt;</code>代表二级子标题，<code>&lt;h3&gt;</code>代表三级子标题、<code>&lt;h4&gt;</code>、<code>&lt;h5&gt;</code>、<code>&lt;h6&gt;</code>的字体大小依次递减。</p>
<p><strong>注意：</strong></p>
<ul>
<li>应该只对每个页面使用一次<code>&lt;h1&gt;</code>主标题。所有其他标题位于层次结构中的下方。</li>
<li>确保在层次结构中以正确的顺序使用标题。如不要使用<code>&lt;h3&gt;</code>来表示副标题后，使用<code>&lt;h2&gt;</code>来表示副副标题。</li>
<li>在可用的六个标题级别中，保证每个页面中标题级别的使用不超过三个。具有许多标题类别的文档会变得难以操作并难以导航，在这种情况下，若可能的话把内容分散在多个页面上。</li>
<li>浏览器会自动地在标题的前后添加空行。默认情况下，HTML会自动在块级元素前后添加一个额外的空行，如段落、标题元素前后。</li>
<li>不要为了生成粗体或大号的文本而使用标题。</li>
</ul>
<h2 id="html中的空格">HTML中的空格</h2>
<p>无论在HTML中使用多少空格（包括空格字符、换行等），当渲染代码时，HTML解释器会将连续出现的空格字符减少为一个单独的空格符。</p>
<p>在HTML中，每个嵌套的<strong>元素是以两个空格缩进的</strong>。</p>
<h2 id="html图像">HTML图像</h2>
<p>HTML图像是通过标签<code>&lt;img&gt;</code>来定义的。<code>&lt;img&gt;</code>标签有两个必需的属性：<code>src</code>和<code>alt</code>。。<strong><code>img</code>元素是自关闭元素，不需要结束标记</strong>。</p>
<h3 id="图像标签img和源属性src">图像标签（<code>&lt;img&gt;</code>）和源属性（src）</h3>
<p><code>&lt;img&gt;</code>是空标签，它只包含属性，没有闭合标签。</p>
<p>使用<code>img</code>元素来在网站中添加图片，使用<code>src</code>属性来指向一个图片的具体地址，图像的名称和尺寸以属性的形式提供。定义图像的语法是</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;存储图片的位置&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;some_text&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>浏览器将图像显示在文档中图像标签出现的地方。如果将图像标签置于两个段落之间，浏览器会首先显示第一个段落，然后显示图片，最后显示第二段。</p>
<h3 id="alt属性">alt属性</h3>
<p>alt属性用来为图像定义一串预备的可替换的文本。替换文本属性的值是用户定义的。在浏览器无法载入图像时，替换文本属性告诉读者所失去的信息。此时浏览器将显示替代性的文本而不是图像。</p>
<h3 id="设置图像的高度与宽度">设置图像的高度与宽度</h3>
<p><code>height</code>（高度）与<code>width</code>（宽度）属性用于设置图像的高度与宽度。属性值默认单位为像素：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;pulpit.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Pulpit rock&quot;</span> <span class="attr">width</span>=<span class="string">&quot;304&quot;</span> <span class="attr">height</span>=<span class="string">&quot;228&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="设置图像边框">设置图像边框</h3>
<p>在<code>&lt;img&gt;</code>标签中使用<code>border</code>属性以像素为单位指定边框粗细。厚度为0时表示图片周围没有边框：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;pulpit.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Pulpit rock&quot;</span> <span class="attr">border</span>=<span class="string">&quot;3&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="设置图像对齐">设置图像对齐</h3>
<p>默认情况下，图像在页面中将显示为左侧对齐，在<code>&lt;img&gt;</code>标签中可以使用<code>align</code>属性设置图像的对齐方式：<code>center</code>（居中）或<code>right</code>（右侧）。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;pulpit.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Pulpit rock&quot;</span> <span class="attr">align</span>=<span class="string">&quot;right&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="html强调">HTML强调</h2>
<p>HTML中强调一句话的某些词可以使用<code>em</code>元素来标记，浏览器默认风格为斜体：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我<span class="tag">&lt;<span class="name">em</span>&gt;</span>很高兴<span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>除此之外，开可以使用<code>&lt;strong&gt;</code>元素来标记，浏览器默认风格为粗体：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我<span class="tag">&lt;<span class="name">strong</span>&gt;</span>很高兴<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="html注释">HTML注释</h2>
<p>将注释插入HTML代码中，可以提高代码可读性。浏览器会忽略注释，也不会显示它们。其格式为：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--注释内容--&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="条件注释">条件注释</h3>
<p>条件注释定义是由Internet Explorer浏览器执行的HTML标签。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--[if IE 8]&gt;</span></span><br><span class="line"><span class="comment">  ....some HTML here....</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="html段落">HTML段落</h2>
<p>HTML段落是通过标签<code>&lt;p&gt;</code>来定义的，经常被用来创建一个段落。</p>
<h3 id="html换行">HTML换行</h3>
<p>若希望在不产生新起点的情况下进行换行（新行），可以使用<code>&lt;br /&gt;</code>标签。</p>
<p>在HTML中，<code>&lt;br /&gt;</code>标签定义为一个换行符。可以简单的输入一个空行，而不是用来对内容进行拆分：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这个<span class="tag">&lt;<span class="name">br</span>&gt;</span>段落<span class="tag">&lt;<span class="name">br</span> /&gt;</span>演示了换行的效果<span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在HTML中，由于屏幕的大小、对窗口的调整都可能导致不同的结果，因此无法确定HTML被显示的效果。当显示页面时，浏览器会移动源代码中多余的空间和空行。所有连续的空间或空行都会被算作一个空格。</p>
<h2 id="html水平线">HTML水平线</h2>
<p><code>&lt;hr&gt;</code>标签在HTML页面中创建水平线。</p>
<p>hr元素用于分隔内容，使用该元素产生的水平线可以在视觉上将文档分隔成各个部分。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>hr标签定义水平线：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>这是段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="如何查看源代码">如何查看源代码</h2>
<p>在浏览器中可以通过单击右键，然后选择<strong>"查看源文件"</strong>或<strong>"查看页面源代码"</strong>来打开一个包含页面HTML代码的窗口来查看源代码。</p>
<h1 id="html元素">HTML元素</h1>
<p>HTML标签和HTML元素通常都是描述相同的意思。但严格来讲，一个HTML元素包含了开始标签和结束标签。</p>
<h2 id="html元素语法">HTML元素语法</h2>
<ul>
<li>HTMl元素以<strong>开始标签</strong>起始，以<strong>结束标签</strong>终止。</li>
<li><strong>元素的内容</strong>是开始标签与结束标签之间的内容。</li>
<li>某些HTML元素具有<strong>空内容</strong>。</li>
<li>空元素在<strong>开始标签中进行关闭</strong>，以开始标签的结束而结束。</li>
<li>大多数HTML元素可拥有属性。</li>
</ul>
<h2 id="嵌套的html元素">嵌套的HTML元素</h2>
<p>HTML文档由嵌套的HTML元素构成，即一个HTML元素里可以包含其他HTML元素。例如下面的代码中包含了三个HTML元素：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是第一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="html空元素">HTML空元素</h2>
<p>HTML空元素即为没有内容的HTML元素。</p>
<p>HTML空元素应该在开始标签中关闭。</p>
<p>HTML的一个空元素为<code>&lt;br&gt;</code>（用于定义换行），<code>&lt;br&gt;</code>元素是没有关闭标签的空元素。</p>
<p>HTML空元素的关闭方法是在剋是标签中添加斜杠，例如<code>&lt;br/&gt;</code>，HTML、XHTML和XML都接受这种方式。</p>
<p>在XHTML和XML以及未来版本的HTML中，所有元素都必须被关闭，即使是空元素。</p>
<h2 id="使用小写标签">使用小写标签</h2>
<p>HTML标签对英文字母的大小写不敏感：<code>&lt;P&gt;</code>等同于<code>&lt;p&gt;</code>。</p>
<p>随着HTML4甚至是HTML5的普及，后续的网站都遵循HTML4的语法--<strong>使用小写</strong>。</p>
<h1 id="html头部">HTML头部</h1>
<p>HTML头部元素包含关于文档的概要信息，也被称为元信息。</p>
<h2 id="head标签与header标签的不同"><code>&lt;head&gt;</code>标签与<code>&lt;header&gt;</code>标签的不同</h2>
<ul>
<li><p>head标签用于定义文档头部，是所有头部元素的容器。<code>&lt;head&gt;</code>描述了文档的各种属性和信息</p></li>
<li><p>header标签定义文档的页眉（介绍信息）。</p></li>
</ul>
<h2 id="head元素"><code>&lt;head&gt;</code>元素</h2>
<p><code>&lt;head&gt;</code>元素包含了所有的头部标签元素。在<code>&lt;head&gt;</code>元素中可以插入脚本（scripts）、样式文件（CSS）以及各种meta信息。其描述了文档的各种属性和信息，其中包括文档的标题、在Web中的位置以及和其他文档的关系等。</p>
<p>可以<strong>添加在头部区域的元素标签</strong>为：<code>&lt;title&gt;</code>、<code>&lt;style&gt;</code>、<code>&lt;meta&gt;</code>、<code>&lt;link&gt;</code>、<code>&lt;script&gt;</code>、<code>&lt;noscript&gt;</code>和<code>&lt;base&gt;</code>。</p>
<h2 id="title元素"><code>&lt;title&gt;</code>元素</h2>
<p><code>&lt;title&gt;</code>标签定义了不同文档的标题，其在HTML/XHTML中是必须的。</p>
<p><code>&lt;title&gt;</code>元素</p>
<ul>
<li>定义了浏览器工具栏的标题</li>
<li>当网页添加到收藏夹时，显示在收藏夹中的标题</li>
<li>显示在搜索引擎结果页面的标题</li>
</ul>
<p><code>&lt;title&gt;</code>元素还可以在左侧显示logo等图片，显示时要将<code>&lt;link&gt;</code>标签放入<code>&lt;head&gt;</code>里：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;shortcut icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;图片url&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>这是一个带图片的标签<span class="tag">&lt;/<span class="name">title</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="base元素"><code>&lt;base&gt;</code>元素</h2>
<p><code>&lt;base&gt;</code>标签描述了基本的链接地址/链接目标，该标签作为HTML文档中所有的链接规定默认地址或默认目标(target)：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">&quot;链接地址&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在HTML中，<code>&lt;base&gt;</code>标签没有结束标签，但在XHTML中，<code>&lt;base&gt;</code>标签必须被正确地关闭。</p>
<h2 id="link元素"><code>&lt;link&gt;</code>元素</h2>
<p><code>&lt;link&gt;</code>标签定义了文档与外部资源之间的关系，通常用于链接到样式表：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;tips.css&quot;</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="style元素"><code>&lt;style&gt;</code>元素</h2>
<p><code>&lt;style&gt;</code>标签定义了HTML文档的样式文件引用地址。在<code>&lt;style&gt;</code>元素中需要指定特定样式文件来渲染HTML文档：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">body</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>:yellow;        </span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>:blue;        </span></span><br><span class="line"><span class="language-css">&#125;    </span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="meta元素"><code>&lt;meta&gt;</code>元素</h2>
<p><code>&lt;meta&gt;</code>元素又称为元数据，其是关于数据的信息。<code>&lt;meta&gt;</code>标签始终位于head元素中。</p>
<p><code>&lt;meta&gt;</code>标签提供关于HTML文档的元数据。元数据不会显示在页面上，但对于机器是可读的。meta元素被用于规定页面的描述、关键词、文档的作者、最后修改时间以及其他元数据。元数据可用于浏览器（如何显示内容或重新加载页面），搜索引擎（关键词）或其他Web服务。</p>
<h2 id="针对搜索引擎的关键词">针对搜索引擎的关键词</h2>
<p>一些搜索引擎会用meta元素中用来描述页面内容的name和content属性来索引页面：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--meta元素定义页面的描述--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;Free web tutorials on HTML,CSS,XML&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--meta元素定义页面的关键词--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;HTML,CSS,XML&quot;</span> /&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="script元素"><code>&lt;script&gt;</code>元素</h2>
<p><code>&lt;script&gt;</code>标签用于加载脚本文件</p>
<h1 id="html属性">HTML属性</h1>
<p>属性是为HTML元素提供的附加信息。</p>
<ul>
<li>HTML元素可以设置<strong>属性</strong></li>
<li>属性可以在元素中<strong>添加信息</strong></li>
<li>属性一般描述于<strong>开始标签</strong></li>
<li>属性总是以名称/值对的形式出现，如<code>name="value"</code>。</li>
</ul>
<h2 id="属性实例">属性实例</h2>
<p>HTML链接由<code>&lt;a&gt;</code>标签定义。链接的地址在href属性中指定：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;链接的地址&quot;</span>&gt;</span>这是一个链接使用了href属性<span class="tag">&lt;/<span class="name">a</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="html属性常用引用属性值">HTML属性常用引用属性值</h2>
<p>属性值应该始终被包含在引号内，最常用的是双引号。在某些个别情况下，比方说属性值本身就含有双引号时，必须使用单引号。例如：<code>name='John"ShotGun"Nelson'</code>。</p>
<h2 id="使用小写属性">使用小写属性</h2>
<p>属性和属性值对大小写不敏感。</p>
<p>但万维网联盟在其HTML4中推荐标准小写的属性/属性值。新版本的(X)HTML也要求使用小写属性。</p>
<h2 id="html属性参考手册">HTML属性参考手册</h2>
<p>下面列出了适用于大多数 HTML 元素的属性：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">属性</th>
<th style="text-align: center;">描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">class</td>
<td style="text-align: center;">为html元素定义一个或多个类名（classname）(类名从样式文件引入)</td>
</tr>
<tr class="even">
<td style="text-align: center;">id</td>
<td style="text-align: center;">定义元素的唯一id</td>
</tr>
<tr class="odd">
<td style="text-align: center;">style</td>
<td style="text-align: center;">规定元素的行内样式（inline style）</td>
</tr>
<tr class="even">
<td style="text-align: center;">title</td>
<td style="text-align: center;">描述了元素的额外信息 (作为工具条使用)</td>
</tr>
</tbody>
</table>
<h1 id="id属性">id属性</h1>
<p>id属性可用于为HTML元素指定唯一的id，一个HTML文档中不能存在多个有相同id的元素。</p>
<h2 id="使用id属性">使用id属性</h2>
<p>id属性的值在HTML文档中必须是唯一的。其用于指向样式表中的特定样式声明，JavaS也可使用它来访问和操作拥有特定ID的元素。</p>
<p>id的语法是一个井号后面跟一个id名称，然后在花括号{}中定义CSS属性。如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-id">#tips</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>:lightblue;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>:black;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--在HTML文档中插入ID--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;tips&quot;</span>&gt;</span>Useful Tips Section<span class="tag">&lt;/<span class="name">a</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong></p>
<ul>
<li>id名称对<strong>大小写敏感</strong></li>
<li>id必须包含至少一个字符，且不能包含空白字符（空格、制表符等）</li>
</ul>
<h2 id="class与id的差异">Class与ID的差异</h2>
<p>同一个类名可以由多个HTML元素使用，而一个id名称只能由页面中的一个HTML元素使用。</p>
<h2 id="通过id和链接实现html书签">通过ID和链接实现HTML书签</h2>
<p>HTML书签用于让读者跳转到网页的特定部分：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--创建一个来链接跳转到(id=&quot;tips&quot;)的部分--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#tips&quot;</span>&gt;</span>Visit the Useful Tips Section<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--从另一个页面创建一个链接到(id=&quot;tips&quot;)的部分--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;链接地址#tips&quot;</span>&gt;</span>Visit the Useful Tips Section<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="在javascript中使用id属性">在JavaScript中使用id属性</h2>
<p>JavaScript也可以使用id属性为特定元素执行某些任务，可以使用<code>getElementById()</code>方法访问拥有特定id的元素：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">displayResult</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;tips&quot;</span>).<span class="property">innerHTML</span>=<span class="string">&quot;Have a nice day!&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;    </span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>    </span><br></pre></td></tr></table></figure>
<h1 id="html链接">HTML链接</h1>
<p>HTML链接是通过标签<code>&lt;a&gt;</code>来定义的。其具体格式如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;链接的地址&quot;</span>&gt;</span>这是一个链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>超链接可以是一个字，一个词，或者一组词，也可以是一幅图像，可以点击这些内容来跳转到新的文档或当前文档中的某个部分。</p>
<p>默认情况下，链接在浏览器中表现为以下形式：</p>
<ul>
<li>一个未访问过的链接显示为蓝色字体并带有下划线</li>
<li>访问过的链接显示为紫色并带上下划线</li>
<li>点击链接时，链接显示为红色并带上下划线</li>
</ul>
<p>若为这些超链接设置了CSS样式，展示样式会根据CSS的设定来显示。</p>
<h2 id="html空链接">HTML空链接</h2>
<p>空链接即指当鼠标指向链接后，会变成手性，但单机后仍停留在当前页面。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>这是一个空链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="target属性">target属性</h2>
<p>使用Target属性，可以定义被链接的文档在何处显示（在新窗口打开，还是在原有的窗口中打开）。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;链接地址&quot;</span> <span class="attr">target</span>=<span class="string">&quot;&quot;</span>&gt;</span>这是一个链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--默认在原窗口打开，若将target属性设置为&quot;_blank&quot;，链接将在新窗口打开--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong>始终将正斜杠添加到子文件夹，如<code>href="//www.baidu.com/html/"</code>。若写成<code>href="//www.baidu.com/html"</code>，就会向服务器产生两次HTTP请求。</p>
<h1 id="html文本格式化">HTML文本格式化</h1>
<h2 id="html格式化标签">HTML格式化标签</h2>
<p>HTML使用标签<code>&lt;b&gt;</code>与<code>&lt;i&gt;</code>对输出的文本进行<strong>粗体</strong>或<em>斜体</em>的格式化，这些标签被称为格式化标签。</p>
<p>通常<code>&lt;strong&gt;</code>替换加粗标签<code>&lt;b&gt;</code>来使用，<code>&lt;em&gt;</code>替换<code>&lt;i&gt;</code>标签使用。</p>
<h2 id="html-文本格式化标签">HTML 文本格式化标签</h2>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">标签</th>
<th style="text-align: center;">描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><code>&lt;b&gt;</code></td>
<td style="text-align: center;">定义粗体文本</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>&lt;em&gt;</code></td>
<td style="text-align: center;">定义着重文字</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>&lt;i&gt;</code></td>
<td style="text-align: center;">定义斜体字</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>&lt;small&gt;</code></td>
<td style="text-align: center;">定义小号字</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>&lt;strong&gt;</code></td>
<td style="text-align: center;">定义加重语气</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>&lt;sub&gt;</code></td>
<td style="text-align: center;">定义下标字</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>&lt;sup&gt;</code></td>
<td style="text-align: center;">定义上标字</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>&lt;ins&gt;</code></td>
<td style="text-align: center;">定义插入字</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>&lt;del&gt;</code></td>
<td style="text-align: center;">定义删除字</td>
</tr>
</tbody>
</table>
<h2 id="html-计算机输出-标签">HTML "计算机输出" 标签</h2>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">标签</th>
<th style="text-align: center;">描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><code>&lt;code&gt;</code></td>
<td style="text-align: center;">定义计算机代码</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>&lt;kbd&gt;</code></td>
<td style="text-align: center;">定义键盘码</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>&lt;samp&gt;</code></td>
<td style="text-align: center;">定义计算机代码样本</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>&lt;var&gt;</code></td>
<td style="text-align: center;">定义变量</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>&lt;pre&gt;</code></td>
<td style="text-align: center;">定义预格式文本</td>
</tr>
</tbody>
</table>
<h2 id="html-引文-引用-及标签定义">HTML 引文, 引用, 及标签定义</h2>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">标签</th>
<th style="text-align: center;">描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><code>&lt;abbr&gt;</code></td>
<td style="text-align: center;">定义缩写</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>&lt;address&gt;</code></td>
<td style="text-align: center;">定义地址</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>&lt;bdo&gt;</code></td>
<td style="text-align: center;">定义文字方向</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>&lt;blockquote&gt;</code></td>
<td style="text-align: center;">定义长的引用</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>&lt;q&gt;</code></td>
<td style="text-align: center;">定义短的引用语</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>&lt;cite&gt;</code></td>
<td style="text-align: center;">定义引用、引证</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>&lt;dfn&gt;</code></td>
<td style="text-align: center;">定义一个定义项目。</td>
</tr>
</tbody>
</table>
<h1 id="html-css">HTML CSS</h1>
<p>CSS定义如何显示HTML元素，用于渲染HTML元素标签的样式，用于控制Web页面的外观。样式存储在样式表中，通常放在<code>&lt;head&gt;</code>部分或存储在外部CSS文件中。目前的网页大都由前端三件套HTML+CSS+Javascript组成。其中，HTML是网页的结构，CSS是网页的样式，Javascript控制网页的行为。</p>
<h2 id="css添加到html的方式">CSS添加到HTML的方式</h2>
<ul>
<li>内联样式：在HTML元素中使用“style”属性</li>
<li>内部样式表：在HTML文档头部<code>&lt;head&gt;</code>区域使用<code>&lt;style&gt;</code>元素来包含CSS</li>
<li>外部引用：使用外部CSS文件</li>
</ul>
<h2 id="内联样式">内联样式</h2>
<p>当特殊的样式需要应用到个别元素时，可以使用内联样式。使用内联样式的方法是在相关的标签中使用样式属性。样式属性可以包含任何CSS属性：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color:blue;margin-left:20px;&quot;</span>&gt;</span>Tips<span class="tag">&lt;/<span class="name">p</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="css样式标签">CSS样式标签</h2>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">标签</th>
<th style="text-align: center;">描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">background</td>
<td style="text-align: center;">定义元素的背景颜色</td>
</tr>
<tr class="even">
<td style="text-align: center;">font-family</td>
<td style="text-align: center;">定义字体的样式</td>
</tr>
<tr class="odd">
<td style="text-align: center;">color</td>
<td style="text-align: center;">定义元素的颜色</td>
</tr>
<tr class="even">
<td style="text-align: center;">font-size</td>
<td style="text-align: center;">定义字体的大小</td>
</tr>
<tr class="odd">
<td style="text-align: center;">text-align</td>
<td style="text-align: center;">指定文本的水平与垂直对齐方式</td>
</tr>
</tbody>
</table>
<h2 id="内部样式表">内部样式表</h2>
<p>当单个文件需要特别样式时，可以使用内部样式表。在HTML文档头部<code>&lt;head&gt;</code>区域使用<code>&lt;style&gt;</code>元素来定义内部样式表</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">body</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Tips<span class="tag">&lt;/<span class="name">p</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="外部样式表">外部样式表</h2>
<p>当样式需要被应用到很多页面时，可以使用外部样式表。通过只更改一个文件来改变整个站点的外观：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;tip.css&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--导入外部样式表的另一种方式--&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="keyword">@import</span> url(<span class="string">&quot;样式表路径&quot;</span>)</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="link和import之间的区别">link和<code>@import</code>之间的区别</h2>
<ul>
<li>link属于XHTML标签，而@import是CSS提供的一种方式</li>
<li>当一个页面被加载时，link引用的CSS会同时被加载。而@import引用的CSS会等到页面全部下载完才被加载</li>
<li><span class="citation" data-cites="import是CSS2.1提出的">@import是CSS2.1提出的</span>，与老版本的浏览器不兼容，只能在IE5以上的浏览器被识别，link在任何地方都兼容</li>
<li>当使用Javascript控制dom去改变样式时，只能使用link标签</li>
</ul>
<h2 id="已弃用的标签和属性">已弃用的标签和属性</h2>
<p>在HTML4中，原来支持定义HTML元素样式的标签和属性已被弃用。</p>
<p>不建议使用的标签有：<code>&lt;font&gt;</code>、<code>&lt;center&gt;</code>、<code>&lt;strike&gt;</code>。</p>
<p>不建议使用的属性有：<code>color</code>和<code>bgcolor</code>。</p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>前端三件套之HTML（二）</title>
    <url>/2022/10/27/%E5%89%8D%E7%AB%AF%E4%B8%89%E4%BB%B6%E5%A5%97%E4%B9%8BHTML%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h1 id="html符号">HTML符号</h1>
<h2 id="html符号实体">HTML符号实体</h2>
<p>若想将数学符号、希腊符号等符号添加到HTML页面，可以使用HTML实体名称。若不存在实体名称，可使用实体编号、十进制或十六进制进行引用。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;<span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我将显示 &amp;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我将显示 <span class="symbol">&amp;#8364;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我将显示 <span class="symbol">&amp;#x20AC;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span>&gt;</span><br></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<p>
我将显示 &amp;
</p>
<hr>
<p>
我将显示 €
</p>
<hr>
<p>
我将显示 €
</p>
<h2 id="html-支持的一些数学符号">HTML 支持的一些数学符号</h2>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">字符</th>
<th style="text-align: left;">数字</th>
<th style="text-align: left;">实体</th>
<th style="text-align: left;">描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">∀</td>
<td style="text-align: left;"><code>&amp;#8704;</code></td>
<td style="text-align: left;"><code>&amp;forall;</code></td>
<td style="text-align: left;">FOR ALL</td>
</tr>
<tr class="even">
<td style="text-align: left;">∂</td>
<td style="text-align: left;"><code>&amp;#8706;</code></td>
<td style="text-align: left;"><code>&amp;part;</code></td>
<td style="text-align: left;">PARTIAL DIFFERENTIAL</td>
</tr>
<tr class="odd">
<td style="text-align: left;">∃</td>
<td style="text-align: left;"><code>&amp;#8707;</code></td>
<td style="text-align: left;"><code>&amp;exist;</code></td>
<td style="text-align: left;">THERE EXISTS</td>
</tr>
<tr class="even">
<td style="text-align: left;">∅</td>
<td style="text-align: left;"><code>&amp;#8709;</code></td>
<td style="text-align: left;"><code>&amp;empty;</code></td>
<td style="text-align: left;">EMPTY SETS</td>
</tr>
<tr class="odd">
<td style="text-align: left;">∇</td>
<td style="text-align: left;"><code>&amp;#8711;</code></td>
<td style="text-align: left;"><code>&amp;nabla;</code></td>
<td style="text-align: left;">NABLA</td>
</tr>
<tr class="even">
<td style="text-align: left;">∈</td>
<td style="text-align: left;"><code>&amp;#8712;</code></td>
<td style="text-align: left;"><code>&amp;isin;</code></td>
<td style="text-align: left;">ELEMENT OF</td>
</tr>
<tr class="odd">
<td style="text-align: left;">∉</td>
<td style="text-align: left;"><code>&amp;#8713;</code></td>
<td style="text-align: left;"><code>&amp;notin;</code></td>
<td style="text-align: left;">NOT AN ELEMENT OF</td>
</tr>
<tr class="even">
<td style="text-align: left;">∋</td>
<td style="text-align: left;"><code>&amp;#8715;</code></td>
<td style="text-align: left;"><code>&amp;ni;</code></td>
<td style="text-align: left;">CONTAINS AS MEMBER</td>
</tr>
<tr class="odd">
<td style="text-align: left;">∏</td>
<td style="text-align: left;"><code>&amp;#8719;</code></td>
<td style="text-align: left;"><code>&amp;prod;</code></td>
<td style="text-align: left;">N-ARY PRODUCT</td>
</tr>
<tr class="even">
<td style="text-align: left;">∑</td>
<td style="text-align: left;"><code>&amp;#8721;</code></td>
<td style="text-align: left;"><code>&amp;sum;</code></td>
<td style="text-align: left;">N-ARY SUMMATION</td>
</tr>
</tbody>
</table>
<h2 id="html-支持的一些希腊字母">HTML 支持的一些希腊字母</h2>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">字符</th>
<th style="text-align: left;">数字</th>
<th style="text-align: left;">实体</th>
<th style="text-align: left;">描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">Α</td>
<td style="text-align: left;"><code>&amp;#913;</code></td>
<td style="text-align: left;"><code>&amp;Alpha;</code></td>
<td style="text-align: left;">GREEK CAPITAL LETTER ALPHA</td>
</tr>
<tr class="even">
<td style="text-align: left;">Β</td>
<td style="text-align: left;"><code>&amp;#914;</code></td>
<td style="text-align: left;"><code>&amp;Beta;</code></td>
<td style="text-align: left;">GREEK CAPITAL LETTER BETA</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Γ</td>
<td style="text-align: left;"><code>&amp;#915;</code></td>
<td style="text-align: left;"><code>&amp;Gamma;</code></td>
<td style="text-align: left;">GREEK CAPITAL LETTER GAMMA</td>
</tr>
<tr class="even">
<td style="text-align: left;">Δ</td>
<td style="text-align: left;"><code>&amp;#916;</code></td>
<td style="text-align: left;"><code>&amp;Delta;</code></td>
<td style="text-align: left;">GREEK CAPITAL LETTER DELTA</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Ε</td>
<td style="text-align: left;"><code>&amp;#917;</code></td>
<td style="text-align: left;"><code>&amp;Epsilon;</code></td>
<td style="text-align: left;">GREEK CAPITAL LETTER EPSILON</td>
</tr>
<tr class="even">
<td style="text-align: left;">Ζ</td>
<td style="text-align: left;"><code>&amp;#918;</code></td>
<td style="text-align: left;"><code>&amp;Zeta;</code></td>
<td style="text-align: left;">GREEK CAPITAL LETTER ZETA</td>
</tr>
</tbody>
</table>
<h2 id="html-支持的一些其他实体">HTML 支持的一些其他实体。</h2>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">字符</th>
<th style="text-align: left;">数字</th>
<th style="text-align: left;">实体</th>
<th style="text-align: left;">描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">©</td>
<td style="text-align: left;"><code>&amp;#169;</code></td>
<td style="text-align: left;"><code>&amp;copy;</code></td>
<td style="text-align: left;">COPYRIGHT SIGN</td>
</tr>
<tr class="even">
<td style="text-align: left;">®</td>
<td style="text-align: left;"><code>&amp;#174;</code></td>
<td style="text-align: left;"><code>&amp;reg;</code></td>
<td style="text-align: left;">REGISTERED SIGN</td>
</tr>
<tr class="odd">
<td style="text-align: left;">€</td>
<td style="text-align: left;"><code>&amp;#8364;</code></td>
<td style="text-align: left;"><code>&amp;euro;</code></td>
<td style="text-align: left;">EURO SIGN</td>
</tr>
<tr class="even">
<td style="text-align: left;">™</td>
<td style="text-align: left;"><code>&amp;#8482;</code></td>
<td style="text-align: left;"><code>&amp;trade;</code></td>
<td style="text-align: left;">TRADEMARK</td>
</tr>
<tr class="odd">
<td style="text-align: left;">←</td>
<td style="text-align: left;"><code>&amp;#8592;</code></td>
<td style="text-align: left;"><code>&amp;larr;</code></td>
<td style="text-align: left;">LEFTWARDS ARROW</td>
</tr>
<tr class="even">
<td style="text-align: left;">↑</td>
<td style="text-align: left;"><code>&amp;#8593;</code></td>
<td style="text-align: left;"><code>&amp;uarr;</code></td>
<td style="text-align: left;">UPWARDS ARROW</td>
</tr>
<tr class="odd">
<td style="text-align: left;">→</td>
<td style="text-align: left;"><code>&amp;#8594;</code></td>
<td style="text-align: left;"><code>&amp;rarr;</code></td>
<td style="text-align: left;">RIGHTWARDS ARROW</td>
</tr>
<tr class="even">
<td style="text-align: left;">↓</td>
<td style="text-align: left;"><code>&amp;#8595;</code></td>
<td style="text-align: left;"><code>&amp;darr;</code></td>
<td style="text-align: left;">DOWNWARDS ARROW</td>
</tr>
<tr class="odd">
<td style="text-align: left;">♠</td>
<td style="text-align: left;"><code>&amp;#9824;</code></td>
<td style="text-align: left;"><code>&amp;spades;</code></td>
<td style="text-align: left;">BLACK SPADE SUIT</td>
</tr>
<tr class="even">
<td style="text-align: left;">♣</td>
<td style="text-align: left;"><code>&amp;#9827;</code></td>
<td style="text-align: left;"><code>&amp;clubs;</code></td>
<td style="text-align: left;">BLACK CLUB SUIT</td>
</tr>
<tr class="odd">
<td style="text-align: left;">♥</td>
<td style="text-align: left;"><code>&amp;#9829;</code></td>
<td style="text-align: left;"><code>&amp;hearts;</code></td>
<td style="text-align: left;">BLACK HEART SUIT</td>
</tr>
<tr class="even">
<td style="text-align: left;">♦</td>
<td style="text-align: left;"><code>&amp;#9830;</code></td>
<td style="text-align: left;"><code>&amp;diams;</code></td>
<td style="text-align: left;">BLACK DIAMOND SUIT</td>
</tr>
</tbody>
</table>
<h1 id="html表格">HTML表格</h1>
<p>表格由<code>&lt;table&gt;</code>标签来定义。每个表格均有由<code>&lt;tr&gt;</code>标签定义的若干行，每行被分隔为由<code>&lt;td&gt;</code>标签定义的若干单元格。字母td指表格数据，即数据单元格的内容。数据单元格可以包含文本、图片、列表、段落、表单、水平线、表格等。</p>
<h2 id="html表格的基本结构">HTML表格的基本结构</h2>
<p><code>&lt;table&gt;..&lt;/table&gt;</code>：定义表格</p>
<p><code>&lt;th&gt;..&lt;/th&gt;</code>：定义表格的标题栏（文字加粗）</p>
<p><code>&lt;tr&gt;..&lt;/tr&gt;</code>：定义表格的行</p>
<p><code>&lt;td&gt;..&lt;/td&gt;</code>：定义表格的列</p>
<p><strong>边框属性：</strong></p>
<p>若不定义边框属性，表格将不显示边框。若要显示边框，可使用<code>border</code>来显示。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>row1,cell1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>row1,cell2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>row2,cell1<span class="tag">&lt;/<span class="name">td</span>&gt;</span>	</span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>row2,cell2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<table border="1">
<tr>
<td>
row1,cell1
</td>
<td>
row1,cell2
</td>
</tr>
<tr>
<td>
row2,cell1
</td>
<td>
row2,cell2
</td>
</tr>
</table>
<h2 id="表头单元格">表头单元格</h2>
<p>表格的表头单元格使用<code>&lt;th&gt;</code>标签定义。</p>
<p>表格的表头单元格属性有：<code>align</code>、<code>dir</code>、<code>width</code>、<code>height</code>。</p>
<p>大多数浏览器会把表头显示为粗体居中的文本：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Header 1<span class="tag">&lt;/<span class="name">th</span>&gt;</span>	    </span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Header 2<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>row1,cell1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>row1,cell2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>row2,cell1<span class="tag">&lt;/<span class="name">td</span>&gt;</span>	</span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>row2,cell2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<table border="1">
<tr>
<th>
Header 1
</th>
<th>
Header 2
</th>
</tr>
<tr>
<td>
row1,cell1
</td>
<td>
row1,cell2
</td>
</tr>
<tr>
<td>
row2,cell1
</td>
<td>
row2,cell2
</td>
</tr>
</table>
<h2 id="表格标题">表格标题</h2>
<p>在<code>&lt;table&gt;</code>标签中可以使用<code>&lt;caption&gt;...&lt;/caption&gt;</code>标签作为标题，并在表的顶部显示出来。<strong>但此标签在较新版本的HTML/XHTML中已经弃用</strong>。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">caption</span>&gt;</span>这是标题<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>row1,cell1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>row1,cell2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>row2,cell1<span class="tag">&lt;/<span class="name">td</span>&gt;</span>	</span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>row2,cell2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<table border="1">
<caption>
这是标题
</caption>
<tr>
<td>
row1,cell1
</td>
<td>
row1,cell2
</td>
</tr>
<tr>
<td>
row2,cell1
</td>
<td>
row2,cell2
</td>
</tr>
</table>
<h2 id="表格高度和宽度">表格高度和宽度</h2>
<p>在<code>&lt;table&gt;</code>标签中可以使用<code>width</code>（宽）和<code>height</code>（高）属性类设置表格宽度和高度，可以按像素或可用屏幕区域的百分比来指定表格宽度或高度：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">width</span>=<span class="string">&quot;400&quot;</span> <span class="attr">height</span>=<span class="string">&quot;150&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>row1,cell1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>row1,cell2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>row2,cell1<span class="tag">&lt;/<span class="name">td</span>&gt;</span>	</span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>row2,cell2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<table border="1" width="400" height="150">
<tr>
<td>
row1,cell1
</td>
<td>
row1,cell2
</td>
</tr>
<tr>
<td>
row2,cell1
</td>
<td>
row2,cell2
</td>
</tr>
</table>
<h2 id="表格背景">表格背景</h2>
<p>设置HTML表格的背景有以下几种方法：</p>
<ul>
<li><code>bgcolor</code>属性：为整个表格或仅为一个单元格设置背景颜色</li>
<li><code>background</code>属性：为整个表设置背景图像或仅为一个单元设置背景图像，需要提供图像的URL地址。</li>
<li><code>bordercolor</code>属性：设置边框颜色</li>
</ul>
<p>但在HTML5中不推荐使用<code>bgcolor</code>、<code>background</code>和<code>bordercolor</code>，部分属性不会生效。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">bordercolor</span>=<span class="string">&quot;green&quot;</span> <span class="attr">bgcolor</span>=<span class="string">&quot;yellow&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;table border=&quot;1&quot; bordercolor=&quot;green&quot; background=&quot;图像地址&quot;&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>row1,cell1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>row1,cell2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>row2,cell1<span class="tag">&lt;/<span class="name">td</span>&gt;</span>	</span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>row2,cell2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<table border="1" bordercolor="green" bgcolor="yellow">
<!--<table border="1" bordercolor="green" background="图像地址">-->
<tr>
<td>
row1,cell1
</td>
<td>
row1,cell2
</td>
</tr>
<tr>
<td>
row2,cell1
</td>
<td>
row2,cell2
</td>
</tr>
</table>
<h2 id="表格空间">表格空间</h2>
<p>以下两个属性可用于调整HTML表格中单元格的空间：</p>
<ul>
<li><code>cellspacing</code>属性：定义表格单元格之间的空间</li>
<li><code>cellpadding</code>属性：表示单元格边框与单元格内容之间的距离</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;50&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;5&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>row1,cell1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>row1,cell2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>row2,cell1<span class="tag">&lt;/<span class="name">td</span>&gt;</span>	</span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>row2,cell2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="合并单元格">合并单元格</h2>
<ul>
<li>若要合并两列或更多列，可使用<code>colspan</code>属性。</li>
<li>若要合并两行或更多行，可使用<code>rowspan</code>属性。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>coulumn 1<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>coulumn 2<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>coulumn 3<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>row1,cell1<span class="tag">&lt;/<span class="name">td</span>&gt;</span>	</span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>row1,cell2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>row1,cell3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>row2,cell2<span class="tag">&lt;/<span class="name">td</span>&gt;</span>	</span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>row2,cell3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;3&quot;</span>&gt;</span>row3 cell1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<table border="1">
<tr>
<th>
coulumn 1
</th>
<th>
coulumn 2
</th>
<th>
coulumn 3
</th>
</tr>
<tr>
<td rowspan="2">
row1,cell1
</td>
<td>
row1,cell2
</td>
<td>
row1,cell3
</td>
</tr>
<tr>
<td>
row2,cell2
</td>
<td>
row2,cell3
</td>
</tr>
<tr>
<td colspan="3">
row3 cell1
</td>
</tr>
</table>
<h2 id="表格头部主体页脚">表格头部、主体、页脚</h2>
<p>表格可氛围三个部分：头部、主体和页脚。其对应的标签是：</p>
<p><code>&lt;thead&gt;</code>：创建单独的表头</p>
<p><code>&lt;tbody&gt;</code>：表示表格的主体</p>
<p><code>&lt;tfoot&gt;</code>：创建一个单独的表页脚</p>
<p>表可以包含多个<code>&lt;tbody&gt;</code>元素以指示不同的页面，<code>&lt;thread&gt;</code>和<code>&lt;tfoot&gt;</code>标签应出现在<code>&lt;tbody&gt;</code>之前。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thread</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;4&quot;</span>&gt;</span>This is the head of the table<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thread</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tfoot</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;4&quot;</span>&gt;</span>This is the foot of the table<span class="tag">&lt;/<span class="name">td</span>&gt;</span>	</span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tfoot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>cell1<span class="tag">&lt;/<span class="name">td</span>&gt;</span>	</span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>cell2<span class="tag">&lt;/<span class="name">td</span>&gt;</span>	</span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>cell3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>cell4<span class="tag">&lt;/<span class="name">td</span>&gt;</span>	</span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<table border="1" width="100%">
<thread>
<tr>
<td colspan="4">
This is the head of the table
</td>
</tr>
</thread>
<tfoot>
<tr>
<td colspan="4">
This is the foot of the table
</td>
</tr>
</tfoot>
<tbody>
<tr>
<td>
cell1
</td>
<td>
cell2
</td>
<td>
cell3
</td>
<td>
cell4
</td>
</tr>
</tbody>
</table>
<h2 id="表格的嵌套">表格的嵌套</h2>
<p>在一个表中是使用另一个表：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>Salary<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">td</span>&gt;</span>	</span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>5000<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>7000<span class="tag">&lt;/<span class="name">td</span>&gt;</span>	</span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span>	</span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span>	</span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<table border="1" width="100%">
<tr>
<td>
<table border="1" width="100%">
<tr>
<th>
Name
</th>
<th>
Salary
</th>
</tr>
<tr>
<td>
张三
</td>
<td>
5000
</td>
</tr>
<tr>
<td>
李四
</td>
<td>
7000
</td>
</tr>
</table>
</td>
</tr>
</table>
<h2 id="html表格标签总览">HTML表格标签总览</h2>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">标签</th>
<th style="text-align: center;">描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><code>&lt;table&gt;</code></td>
<td style="text-align: center;">定义表格</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>&lt;th&gt;</code></td>
<td style="text-align: center;">定义表格的表头</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>&lt;tr&gt;</code></td>
<td style="text-align: center;">定义表格的行</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>&lt;td&gt;</code></td>
<td style="text-align: center;">定义表格单元</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>&lt;caption&gt;</code></td>
<td style="text-align: center;">定义表格标题</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>&lt;colgroup&gt;</code></td>
<td style="text-align: center;">定义表格列的组</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>&lt;col&gt;</code></td>
<td style="text-align: center;">定义用于表格列的属性</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>&lt;thead&gt;</code></td>
<td style="text-align: center;">定义表格的页眉</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>&lt;tbody&gt;</code></td>
<td style="text-align: center;">定义表格的主体</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>&lt;tfoot&gt;</code></td>
<td style="text-align: center;">定义表格的页脚</td>
</tr>
</tbody>
</table>
<h1 id="html列表">HTML列表</h1>
<p>HTML支持有序列表、无序列表和自定义列表。</p>
<h2 id="无序列表">无序列表</h2>
<p>无序列表是一个项目的列表，此列项目使用粗体原点进行标记。无序列表适合成员之间无级别顺序关系的情况，无序列表始于<code>&lt;ul&gt;</code>标签，每个列表项始于<code>&lt;li&gt;</code>标签：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>Coffee<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>Mikk<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<ul>
<li>
Coffee
</li>
<li>
Mikk
</li>
</ul>
<h2 id="有序列表">有序列表</h2>
<p>有序列表也是一列项目，列表项目使用数字进行标记。有序列表适合各项目之间存在顺序关系的情况，有序列表始于<code>&lt;ol&gt;</code>标签，每个列表项始于<code>&lt;li&gt;</code>标签：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>Coffee<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>Milk<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span>	</span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<ol>
<li>
Coffee
</li>
<li>
Milk
</li>
</ol>
<h2 id="自定义列表">自定义列表</h2>
<p>自定义列表不仅仅是一列项目，而是项目及其注释的组合。<code>&lt;dt&gt;</code>与<code>&lt;dd&gt;</code>在自定义列表中的<strong>数量不限、对应关系不限</strong>。自定义列表始于<code>&lt;dl&gt;</code>标签，每个列表项始于<code>&lt;dt&gt;</code>标签，每个自定义列表项的定义始于<code>&lt;dd&gt;</code>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>Coffee<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dd</span>&gt;</span>-black hot drink<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>Milk<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dd</span>&gt;</span>-white cold drink<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span>	</span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<p><img src="/2022/10/27/%E5%89%8D%E7%AB%AF%E4%B8%89%E4%BB%B6%E5%A5%97%E4%B9%8BHTML%EF%BC%88%E4%BA%8C%EF%BC%89/02.PNG"></p>
<h1 id="html区块">HTML区块</h1>
<p><strong><code>&lt;div&gt;</code>和<code>&lt;span&gt;</code></strong>：</p>
<p>HTML可以通过<code>&lt;div&gt;</code>和<code>&lt;span&gt;</code>将元素组合起来</p>
<h2 id="区块元素">区块元素</h2>
<p>大多数HTML元素被定义为块级元素或内联元素。<strong>块级元素</strong>在浏览器显示时，<strong>通常会以新行来开始（和结束），</strong>如：<code>&lt;h1&gt;</code>、<code>&lt;p&gt;</code>、<code>&lt;ul&gt;</code>、<code>&lt;table&gt;</code></p>
<h2 id="内联元素">内联元素</h2>
<p><strong>内联元素在显示时通常不以新行开始</strong>，如：<code>&lt;b&gt;</code>、<code>&lt;td&gt;</code>、<code>&lt;a&gt;</code>、<code>&lt;img&gt;</code></p>
<h2 id="div元素"><code>&lt;div&gt;</code>元素</h2>
<p><code>&lt;div&gt;</code>标签可以把文档分割为独立的、不同的部分，它是块级元素，可用于组合其他HTML元素的容器，常用于文档布局。<code>&lt;div&gt;</code>元素没有特定的含义，与CSS一同使用时，<code>&lt;div&gt;</code>元素可用于对<strong>大的内容块设置样式属性。</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一些文本。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;color:#00ffff&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>这是一个在div元素中的标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个在div元素中的文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一些文本。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span>	</span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<p><img src="/2022/10/27/%E5%89%8D%E7%AB%AF%E4%B8%89%E4%BB%B6%E5%A5%97%E4%B9%8BHTML%EF%BC%88%E4%BA%8C%EF%BC%89/0.PNG"></p>
<h2 id="span元素"><code>&lt;span&gt;</code>元素</h2>
<p><code>&lt;span&gt;</code>元素是内联元素，可用作文本的容器，<code>&lt;span&gt;</code>元素也没有特定的含义，与CSS一同使用时，<code>&lt;span&gt;</code>元素可用于为<strong>部分文本设置样式属性</strong>。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我有一双</span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color:gold&quot;</span>&gt;</span>金色<span class="tag">&lt;/<span class="name">span</span>&gt;</span>的</span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;font-size:50px&quot;</span>&gt;</span>大眼睛<span class="tag">&lt;/<span class="name">span</span>&gt;</span>和一头</span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color:blue&quot;</span>&gt;</span>蓝色的头发<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span>	</span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<p>
我有一双 <span style="color:gold">金色</span>的 <span style="font-size:50px">大眼睛</span>和一头 <span style="color:blue">蓝色的头发</span>
</p>
<h1 id="html布局">HTML布局</h1>
<p>大多数网站可以使用<code>&lt;div&gt;</code>或<code>&lt;table&gt;</code>元素来创建多列。CSS用于对元素进行定位，或者为页面创建背景以及色彩丰富的外观。</p>
<h2 id="使用div元素">使用<code>&lt;div&gt;</code>元素</h2>
<p>可以使用<code>&lt;div&gt;</code>元素来改变页面的布局，如使用5个div元素来创建多列布局：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:500px&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;header&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color:#FFA500;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;margin-bottom:0;&quot;</span>&gt;</span>网页的标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;menu&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color:#FFD700;height:200px;width:100px;float:left;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">b</span>&gt;</span>菜单<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    	HTML<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    	CSS<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    	JavaScript</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;content&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color:#EEEEEE;height:200px;width:400px;float:left;&quot;</span>&gt;</span></span><br><span class="line">        内容在这里</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;footer&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color:#FFA500;clear:both;text-align:center;&quot;</span>&gt;</span></span><br><span class="line">    	Copyright</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span>	</span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<p><img src="/2022/10/27/%E5%89%8D%E7%AB%AF%E4%B8%89%E4%BB%B6%E5%A5%97%E4%B9%8BHTML%EF%BC%88%E4%BA%8C%EF%BC%89/01.PNG"></p>
<h2 id="使用表格">使用表格</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">&quot;500&quot;</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color:#FFA500;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>网页的主标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">&quot;background-color:#FFD700;width:100px;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">b</span>&gt;</span>菜单<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    	HTML<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    	CSS<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    	JavaScript</span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">&quot;background-color:#EEEEEE;height:200px;width:400px;&quot;</span>&gt;</span>内容就在这里<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color:#FFA500;text-align:center;&quot;</span>&gt;</span>Copyright<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span>	</span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span>	</span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<table width="500" border="0">
<tr>
<td colspan="2" style="background-color:#FFA500;">
<h1>
网页的主标题
</h1>
</td>
</tr>
<tr>
<td style="background-color:#FFD700;width:100px;">
<b>菜单</b><br> HTML<br> CSS<br> JavaScript
</td>
<td style="background-color:#EEEEEE;height:200px;width:400px;">
内容就在这里
</td>
</tr>
<tr>
<td colspan="2" style="background-color:#FFA500;text-align:center;">
Copyright
</td>
</tr>
</table>
<h1 id="html表单">HTML表单</h1>
<p>HTML表单用于收集不同类型的用户输入。</p>
<h2 id="表单">表单</h2>
<p>表单是一个包含表单元素的区域，使用变大标签<code>&lt;form&gt;</code>来设置。表单元素允许用户在表单中输入内容，如文本域、下拉列表、单选框、复选框等。其形式如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">	input elements</span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="输入元素">输入元素</h2>
<p>多数情况下被用到的表单标签是输入标签<code>&lt;input&gt;</code>。<code>&lt;input&gt;</code>元素是最重要的表单元素，输入类型是由类型属性定义的。经常被用到的输入类型如下：</p>
<h3 id="文本域">文本域</h3>
<p>文本域通过<code>&lt;input type="text"&gt;</code>标签来设定，当用户要在表单中键入字母、数字等内容时就会用到文本域：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">        姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;firstname&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">        电话号码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;lastname&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span>	</span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<p><img src="/2022/10/27/%E5%89%8D%E7%AB%AF%E4%B8%89%E4%BB%B6%E5%A5%97%E4%B9%8BHTML%EF%BC%88%E4%BA%8C%EF%BC%89/1.png"></p>
<h3 id="密码字段">密码字段</h3>
<p>密码字段通过标签<code>&lt;input type="password"&gt;</code>来定义，密码字段字符不会明文显示，而是以星号或圆点替代：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">        密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span>	</span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<form>
密码：<input type="password" name="pwd"><br>
</form>
<h3 id="单选按钮">单选按钮</h3>
<p>表单单选框选项通过<code>&lt;input type="radio"&gt;</code>来定义：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span>&gt;</span>男<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span>&gt;</span>女</span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span>	</span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<form>
<input type="radio" name="sex" value="male">男<br> <input type="radio" name="sex" value="female">女
</form>
<h3 id="复选框">复选框</h3>
<p>复选框通过<code>&lt;input type="checkbox"&gt;</code>来定义，用户需要从若干给定的选择中选取一个或若干个选项：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;vehicle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Bike&quot;</span>&gt;</span>我有自行车<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;vehicle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Car&quot;</span>&gt;</span>我有小车</span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span>	</span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<form>
<input type="checkbox" name="vehicle" value="Bike">我有自行车<br> <input type="checkbox" name="vehicle" value="Car">我有小车
</form>
<h3 id="提交按钮">提交按钮</h3>
<p>提交按钮通过<code>&lt;input type="submit"</code>来定义，当用户单击确认按钮时，表单的内容会被传送到另一个文件。表单的动作属性定义了目的文件的文件名，由目的文件通常会对接收到的输入数据进行相关的处理：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">&quot;input&quot;</span> <span class="attr">action</span>=<span class="string">&quot;目标文件名&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">    	Username:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮名称&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span>	</span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<form name="input" action="目标文件名" method="get">
Username:<input type="text" name="User"> <input type="submit" value="按钮名称">
</form>
<h1 id="html框架">HTML框架</h1>
<p><code>&lt;iframe&gt;</code>标签规定一个内联框架。一个内联框架被用来在当前HTML文档中嵌入另一个文档。通过使用框架可以在浏览器窗口中显示不止一个页面。语法如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;URL&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--该URL指向不同的网页，将窗口内容显示为URL地址指向页面--&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="设置高度与宽度">设置高度与宽度</h2>
<p><code>height</code>和<code>width</code>属性用来定义<code>iframe</code>标签的高度与宽度。属性默认以像素为单位，但也可以指定其按比例显示，如“80%”：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;tangmenjue.top.html&quot;</span> <span class="attr">width</span>=<span class="string">&quot;80%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;80%&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span>	</span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<p><img src="/2022/10/27/%E5%89%8D%E7%AB%AF%E4%B8%89%E4%BB%B6%E5%A5%97%E4%B9%8BHTML%EF%BC%88%E4%BA%8C%EF%BC%89/2.png"></p>
<h2 id="移除边框">移除边框</h2>
<p><code>frameborder</code>属性用于定义<code>iframe</code>表示是否显示边框。设置属性值为0时，移除<code>iframe</code>边框：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;tangmenjue.top.html&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span>	</span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="使用iframe来显示目录链接页面">使用<code>iframe</code>来显示目录链接页面</h2>
<p><code>iframe</code>可以显示是一个目标链接的页面。目标链接的属性必须使用<code>iframe</code>属性：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;tangmenjue.top.html&quot;</span> <span class="attr">name</span>=<span class="string">&quot;iframe_a&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://tangmenjue.top/2020/01/09/hello-world/&quot;</span> <span class="attr">target</span>=<span class="string">&quot;iframe_a&quot;</span>&gt;</span>tangmenjue.top<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span>	</span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="iframe标准属性"><code>iframe</code>标准属性</h2>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">属性</th>
<th style="text-align: center;">说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">class</td>
<td style="text-align: center;">规定元素的类名（classname）</td>
</tr>
<tr class="even">
<td style="text-align: center;">id</td>
<td style="text-align: center;">规定元素的唯一 id</td>
</tr>
<tr class="odd">
<td style="text-align: center;">style</td>
<td style="text-align: center;">规定元素的行内样式（inline style）</td>
</tr>
<tr class="even">
<td style="text-align: center;">title</td>
<td style="text-align: center;">规定元素的额外信息（可在工具提示中显示）</td>
</tr>
</tbody>
</table>
<h1 id="html颜色">HTML颜色</h1>
<p>HTML颜色采用的是RGB颜色，是通过对红绿蓝三个颜色通道的变化以及它们相互之间的叠加来得到各式各样的颜色。</p>
<h2 id="color-values">Color Values</h2>
<p>HTML颜色由一个十六进制符号来定义，这个符号由红绿蓝的值组成。每种颜色的最小值是0（十六进制：#00），最大值是255（十六进制：#FF）。在项目过程中若要查询颜色码时，可以使用<a href="https://www.sioe.cn/yingyong/yanse-rgb-16/">RGB颜色值与十六进制颜色码转换工具</a>来查询。</p>
<h2 id="颜色名">颜色名</h2>
<p>目前所有浏览器都支持以下颜色名：</p>
<p>141个颜色名称是在HTML和CSS颜色规范定义的（17标准颜色+其余的124种），其中17标准颜色为：黑色，蓝色，水，紫红色，灰色，绿色，石灰，栗色，海军，橄榄，橙，紫，红，白，银，蓝绿色，黄色。</p>
<p>141个颜色的颜色名及其对应的16进制值可使用<a href="https://www.917118.com/tool/color_3.html">RGB颜色对照表</a>来查询。</p>
<h1 id="html脚本">HTML脚本</h1>
<p>JavaScript是可插入HTML页面的编程代码，其使HTML页面具有更强的动态和交互性。</p>
<h2 id="script标签"><code>&lt;script&gt;</code>标签</h2>
<p><code>&lt;script&gt;</code>标签用于定义客户端脚本，<code>&lt;script&gt;</code>元素既可包含脚本语句，也可通过src属性指向外部脚本文件，若使用src属性，则<code>&lt;script&gt;</code>元素必须是空的。JavaScript常用于图片操作、表单验证以及内容动态更新：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;Hello world!&quot;</span>)        </span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--运行结果如下--&gt;</span></span><br><span class="line">Hello world!</span><br></pre></td></tr></table></figure>
<h2 id="noscript标签"><code>&lt;noscript&gt;</code>标签</h2>
<p>当浏览器禁用脚本或浏览器不支持客户端脚本时，<code>&lt;noscript&gt;</code>标签提供无法使用脚本时的替代内容。<code>&lt;noscript&gt;</code>元素支持全局属性，可包含普通HTML页面的body元素中能找到的所有元素。只有在浏览器禁用脚本或不支持客户端脚本时，才会显示<code>&lt;noscript&gt;</code>元素中的内容：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;Hello world!&quot;</span>)        </span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">noscript</span>&gt;</span>Sorry,your browser does not support JavaScript!<span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="javascript示例代码">JavaScript示例代码</h2>
<p>JavaScript直接在HTML输出：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;Hello world!&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;h1&gt;这是一个标题&lt;/h1&gt;&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;p&gt;这是一个段落。&lt;/p&gt;&quot;</span>);	    </span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>JavaScript事件响应：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span>JavaScript can react to events.Like the click of a button.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">    	<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;demo&quot;</span>).<span class="property">innerHTML</span>=<span class="string">&quot;Hello JavaScript!&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;myFunction()&quot;</span>&gt;</span>Click Me!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>JavaScript处理HTML样式：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span>JavaScript can change the css.Like the click of a button.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">    	x=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;demo&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        x.<span class="property">style</span>.<span class="property">color</span>=<span class="string">&quot;#FF0000&quot;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;myFunction()&quot;</span>&gt;</span>Click Me!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="对于老式浏览器">对于老式浏览器</h2>
<p>若浏览器没法识别<code>&lt;script&gt;</code>标签，那么<code>&lt;script&gt;</code>标签所包含的内容将以文本方式显示在页面上。为了避免这种情况发送，应<strong>将脚本隐藏在注释标签中</strong>。<strong>老式浏览器将忽略这些注释</strong>，便不会将标签的内容显示到页面上，而<strong>新版本的浏览器将会读懂这些脚本而执行它们</strong>，即使代码嵌套在注释标签内：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span>JavaScript can change the css.Like the click of a button.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    //<span class="comment">&lt;!--</span></span></span></span><br><span class="line"><span class="comment"><span class="language-xml"><span class="language-handlebars">    function myFunction()</span></span></span></span><br><span class="line"><span class="comment"><span class="language-xml"><span class="language-handlebars">    &#123;</span></span></span></span><br><span class="line"><span class="comment"><span class="language-xml"><span class="language-handlebars">    	x=document.getElementById(&quot;demo&quot;)</span></span></span></span><br><span class="line"><span class="comment"><span class="language-xml"><span class="language-handlebars">        x.style.color=&quot;#FF0000&quot;</span></span></span></span><br><span class="line"><span class="comment"><span class="language-xml"><span class="language-handlebars">    &#125;</span></span></span></span><br><span class="line"><span class="comment"><span class="language-xml"><span class="language-handlebars">    //--&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;myFunction()&quot;</span>&gt;</span>Click Me!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="html字符实体">HTML字符实体</h1>
<p>HTML中的预留字符必须被替换为字符实体，一些在键盘上找不到的字符也可以用字符实体来替换，<strong>实体名称对大小写敏感</strong>。</p>
<h2 id="html实体">HTML实体</h2>
<p>在HTML中，某些字符是保留的，不能使用包含这些字符的文本。</p>
<p>在HTML中不能使用小于号和大于号，浏览器会误以为它们是标签。若希望正确地显示预留字符，则必须在HTML源代码中使用字符实体，字符实体类似于：<code>&amp;entiy_name</code>或<code>&amp;#entity_number;</code>。若要显示小于号，必须写成：<code>&amp;lt;</code>或<code>&amp;#60;</code>或<code>&amp;#060;</code>。</p>
<p>一些字符实体如下：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">显示结果</th>
<th style="text-align: center;">描述</th>
<th style="text-align: center;">实体名称</th>
<th style="text-align: center;">实体编号</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"></td>
<td style="text-align: center;">空格</td>
<td style="text-align: center;"><code>&amp;nbsp;</code></td>
<td style="text-align: center;"><code>&amp;#160;</code></td>
</tr>
<tr class="even">
<td style="text-align: center;">&lt;</td>
<td style="text-align: center;">小于号</td>
<td style="text-align: center;"><code>&amp;lt;</code></td>
<td style="text-align: center;"><code>&amp;#60;</code></td>
</tr>
<tr class="odd">
<td style="text-align: center;">&gt;</td>
<td style="text-align: center;">大于号</td>
<td style="text-align: center;"><code>&amp;gt;</code></td>
<td style="text-align: center;"><code>&amp;#62;</code></td>
</tr>
<tr class="even">
<td style="text-align: center;">&amp;</td>
<td style="text-align: center;">和号</td>
<td style="text-align: center;"><code>&amp;amp;</code></td>
<td style="text-align: center;"><code>&amp;#38;</code></td>
</tr>
<tr class="odd">
<td style="text-align: center;">"</td>
<td style="text-align: center;">引号</td>
<td style="text-align: center;"><code>&amp;quot;</code></td>
<td style="text-align: center;"><code>&amp;#34;</code></td>
</tr>
<tr class="even">
<td style="text-align: center;">'</td>
<td style="text-align: center;">撇号</td>
<td style="text-align: center;"><code>&amp;apos;</code> (IE不支持)</td>
<td style="text-align: center;"><code>&amp;#39;</code></td>
</tr>
<tr class="odd">
<td style="text-align: center;">￠</td>
<td style="text-align: center;">分</td>
<td style="text-align: center;"><code>&amp;cent;</code></td>
<td style="text-align: center;"><code>&amp;#162;</code></td>
</tr>
<tr class="even">
<td style="text-align: center;">£</td>
<td style="text-align: center;">镑</td>
<td style="text-align: center;"><code>&amp;pound;</code></td>
<td style="text-align: center;"><code>&amp;#163;</code></td>
</tr>
<tr class="odd">
<td style="text-align: center;">¥</td>
<td style="text-align: center;">人民币/日元</td>
<td style="text-align: center;"><code>&amp;yen;</code></td>
<td style="text-align: center;"><code>&amp;#165;</code></td>
</tr>
<tr class="even">
<td style="text-align: center;">€</td>
<td style="text-align: center;">欧元</td>
<td style="text-align: center;"><code>&amp;euro;</code></td>
<td style="text-align: center;"><code>&amp;#8364;</code></td>
</tr>
<tr class="odd">
<td style="text-align: center;">§</td>
<td style="text-align: center;">小节</td>
<td style="text-align: center;"><code>&amp;sect;</code></td>
<td style="text-align: center;"><code>&amp;#167;</code></td>
</tr>
<tr class="even">
<td style="text-align: center;">©</td>
<td style="text-align: center;">版权</td>
<td style="text-align: center;"><code>&amp;copy;</code></td>
<td style="text-align: center;"><code>&amp;#169;</code></td>
</tr>
<tr class="odd">
<td style="text-align: center;">®</td>
<td style="text-align: center;">注册商标</td>
<td style="text-align: center;"><code>&amp;reg;</code></td>
<td style="text-align: center;"><code>&amp;#174;</code></td>
</tr>
<tr class="even">
<td style="text-align: center;">™</td>
<td style="text-align: center;">商标</td>
<td style="text-align: center;"><code>&amp;trade;</code></td>
<td style="text-align: center;"><code>&amp;#8482;</code></td>
</tr>
<tr class="odd">
<td style="text-align: center;">×</td>
<td style="text-align: center;">乘号</td>
<td style="text-align: center;"><code>&amp;times;</code></td>
<td style="text-align: center;"><code>&amp;#215;</code></td>
</tr>
<tr class="even">
<td style="text-align: center;">÷</td>
<td style="text-align: center;">除号</td>
<td style="text-align: center;"><code>&amp;divide;</code></td>
<td style="text-align: center;"><code>&amp;#247;</code></td>
</tr>
</tbody>
</table>
<h2 id="不间断空格">不间断空格</h2>
<p>HTML中常用字符实体是不间断空格。</p>
<p>浏览器会截断HTML页面中的空格。若要在页面增加空格的数量，可以使用字符实体<code>&amp;nbsp;</code></p>
<h2 id="结合音标符">结合音标符</h2>
<p>发音符号是加到字母上的一个字形。</p>
<p>一些变音符号，如尖音符 ( ̀) 和 抑音符 ( ́) 。</p>
<p>变音符号可以出现在字母的上面和下面、字母里面或两个字母间。</p>
<p>变音符号可以与字母、数字字符的组合来使用。</p>
<p>一些音标符如下：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">音标符</th>
<th style="text-align: center;">字符</th>
<th style="text-align: center;">Construct</th>
<th style="text-align: center;">输出结果</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">̀</td>
<td style="text-align: center;">a</td>
<td style="text-align: center;"><code>à</code></td>
<td style="text-align: center;">à</td>
</tr>
<tr class="even">
<td style="text-align: center;">́</td>
<td style="text-align: center;">a</td>
<td style="text-align: center;"><code>á</code></td>
<td style="text-align: center;">á</td>
</tr>
<tr class="odd">
<td style="text-align: center;">̂</td>
<td style="text-align: center;">a</td>
<td style="text-align: center;"><code>a&amp;#770;</code></td>
<td style="text-align: center;">â</td>
</tr>
<tr class="even">
<td style="text-align: center;">̃</td>
<td style="text-align: center;">a</td>
<td style="text-align: center;"><code>a&amp;#771;</code></td>
<td style="text-align: center;">ã</td>
</tr>
<tr class="odd">
<td style="text-align: center;">̀</td>
<td style="text-align: center;">O</td>
<td style="text-align: center;"><code>O&amp;#768;</code></td>
<td style="text-align: center;">Ò</td>
</tr>
<tr class="even">
<td style="text-align: center;">́</td>
<td style="text-align: center;">O</td>
<td style="text-align: center;"><code>O&amp;#769;</code></td>
<td style="text-align: center;">Ó</td>
</tr>
<tr class="odd">
<td style="text-align: center;">̂</td>
<td style="text-align: center;">O</td>
<td style="text-align: center;"><code>O&amp;#770;</code></td>
<td style="text-align: center;">Ô</td>
</tr>
<tr class="even">
<td style="text-align: center;">̃</td>
<td style="text-align: center;">O</td>
<td style="text-align: center;"><code>O&amp;#771;</code></td>
<td style="text-align: center;">Õ</td>
</tr>
</tbody>
</table>
<h1 id="html-url">HTML URL</h1>
<p>URL是一个网页网站，可以由字母组成，也可以由ip地址组成。大多数人进入网站使用网站域名来访问。</p>
<h2 id="url统一资源定位器">URL（统一资源定位器）</h2>
<p>Web浏览器通过URL从Web服务器请求页面。当您点击HTMl页面中的某个链接时，对应的<code>&lt;a&gt;</code>标签指向万维网上的一个地址。URL用于定位万维网上的文档。</p>
<p>URL的语法规则：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">scheme://host.domain:port/path/filename</span><br></pre></td></tr></table></figure>
<p>其中：</p>
<ul>
<li>scheme:定义因特网服务的类型，最常见的类型是http</li>
<li>host：定义域主机（http的默认主机是www）</li>
<li>domain：定义因特网域名，比如tangmenjue.top</li>
<li>:port：定义主机上的端口号（http默认端口号是80）</li>
<li>path：定义服务器上的路径（如果省略，则文档必须位于网站的根目录中）</li>
<li>filename：定义文档/资源的名称</li>
</ul>
<p>常见的scheme类型如下：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">Scheme</th>
<th style="text-align: center;">访问</th>
<th style="text-align: center;">用于</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">http</td>
<td style="text-align: center;">超文本传输协议</td>
<td style="text-align: center;">以 http:// 开头的普通网页。不加密。</td>
</tr>
<tr class="even">
<td style="text-align: center;">https</td>
<td style="text-align: center;">安全超文本传输协议</td>
<td style="text-align: center;">安全网页，加密所有信息交换。</td>
</tr>
<tr class="odd">
<td style="text-align: center;">ftp</td>
<td style="text-align: center;">文件传输协议</td>
<td style="text-align: center;">用于将文件下载或上传至网站。</td>
</tr>
<tr class="even">
<td style="text-align: center;">file</td>
<td style="text-align: center;"></td>
<td style="text-align: center;">您计算机上的文件。</td>
</tr>
</tbody>
</table>
<h2 id="url字符编码">URL字符编码</h2>
<p>URL只用使用ASCII字符集。</p>
<p>URL编码会将字符转换为可通过因特网传输的格式来通过因特网进行发送。由于URL常包含ASCII集合以外的字符，URL必须转换为有效的ASCII格式。</p>
<p>URL编码使用"%"号及其后跟随两位的十六进制数来替换非ASCII字符，URL不能包含空格，常用“+”号来替换空格。</p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>前端三件套之JavaScript（一）</title>
    <url>/2022/10/28/%E5%89%8D%E7%AB%AF%E4%B8%89%E4%BB%B6%E5%A5%97%E4%B9%8BJavaScript%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="快速入门">快速入门</h1>
<p>JavaScript代码可以直接嵌在网页的任何地方，通常会把JavaScript代码放在HTML的<code>&lt;head&gt;</code>中。由<code>&lt;script&gt;...&lt;/script&gt;</code>包含的代码就是JavaScript代码，它将直接被浏览器执行。</p>
<p>另一种方法就是把JavaScript代码放到一个单独的<code>.js</code>文件中，然后在HTML中通过<code>&lt;script src="/js文件地址"&gt;...&lt;/script&gt;</code>的方式引入这个文件。</p>
<p>**JavaScript中的注释符号是<code>//</code>或<code>/**/</code>，*JavaScript中严格区分大小写。**</p>
<p>若需要调试JavaScript代码，可以打开一个网页，然后按下F12打开开发者工具，点击控制台（Console）在<code>&gt;</code>里可以直接输入JavaScript代码，按回车后执行。按F12可关闭开发者工具。</p>
<p>在控制台中输入<code>console.log(a)</code>可以查看变量a的内容，回车后显示的值就是变量内容。</p>
<p>本文中使用的是把JavaScript代码放到一个单独的<code>.js</code>文件中的方法。因此先建立一个test.html文档，其内容如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;test.js&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>建好test.html后，在test.html所在文件夹新建一个text.js文件，后续的JavaScript代码都在text.js中编写，控制台的代码在text.js里运行，需要页面显示的代码在test.html里运行。</p>
<h2 id="基本语法">基本语法</h2>
<p>JavaScript的语法与Java类似，每个语句以<code>;</code>结束，语句块用<code>&#123;...&#125;</code>。语句块中具有以<strong>4个空格为单位的缩进</strong>。</p>
<h3 id="练习题">练习题</h3>
<p>分别利用行注释和块注释把下面的语句注释掉，使它不再执行：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//alert(&#x27;我不想执行&#x27;);</span></span><br><span class="line"><span class="comment">/*alert(&#x27;我也不想执行&#x27;);*/</span></span><br></pre></td></tr></table></figure>
<h2 id="数据类型">数据类型</h2>
<h3 id="number">Number</h3>
<p>JavaScript不区分整数和浮点数，统一用Number表示。</p>
<p>以下是合法的Number类型：</p>
<ul>
<li>整数：123</li>
<li>浮点数：0.123</li>
<li>科学计数法：1.2345e3（即12345x1000）</li>
<li>复数：-123</li>
<li>无法计算结果时：NaN</li>
<li>无限大：Infinity</li>
</ul>
<p>JavaScript里的十六进制用<code>0x</code>前缀表示。</p>
<h3 id="字符串">字符串</h3>
<p>字符串是以单引号<code>'</code>'或双引号<code>"</code>"括起来的任意文本，引号本身不是字符串的一部分。如：‘abc'、“qwe”。</p>
<h3 id="布尔值">布尔值</h3>
<p>布尔值与布尔代数的表示完全一致，一个布尔值只有<code>true</code>、<code>false</code>两种值。</p>
<p><code>&amp;&amp;</code>是与运算，<code>||</code>是或运算，<code>!</code>是非运算。</p>
<h3 id="比较运算符">比较运算符</h3>
<p>JavaScript允许对任意数据类型做比较。</p>
<p>注意相等运算符<code>==</code>，JavaScript有两种比较运算符：</p>
<ul>
<li><code>==</code>比较运算符：<strong>会自动转换数据类型</strong>再比较。</li>
<li><code>===</code>比较运算符：<strong>不会自动转换数据类型</strong>。若数据类型不一致，返回false，若一直，再进行比较。</li>
</ul>
<p><strong><code>NaN</code>与所有值都不相等，包括他自己。</strong></p>
<p>唯一能判断NaN为true的方法是通过<code>isNaN()</code>函数。</p>
<p>JavaScript比较浮点数只能计算它们之差的绝对值，看是否小于某个阈值即：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>/<span class="number">3</span>===(<span class="number">1</span>-<span class="number">2</span>/<span class="number">3</span>);<span class="comment">//false</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">abs</span>(<span class="number">1</span>/<span class="number">3</span>-(<span class="number">1</span>-<span class="number">2</span>/<span class="number">3</span>))&lt;<span class="number">0.0000001</span>;<span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<h3 id="null和undefined">null和undefined</h3>
<p><code>null</code>表示一个空的值，它和0以及空字符<code>''</code>不同。0是一个数值，<code>''</code>表示长度为0的字符串，null表示空。</p>
<p><code>undefined</code>表示值未定义，<code>undefined</code>仅在判断函数参数是否传递的情况下有用。</p>
<h3 id="数组">数组</h3>
<p>数组是一组按顺序排列的集合，集合的每个值称为元素。JavaScript的数组可以包括任意数据类型，如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3.14</span>,<span class="string">&#x27;Hello&#x27;</span>,<span class="literal">null</span>,<span class="literal">true</span>];</span><br></pre></td></tr></table></figure>
<p><strong>创建数组可以通过<code>Array()</code>函数</strong>实现：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3.14</span>,<span class="string">&#x27;Hello&#x27;</span>,<span class="literal">null</span>,<span class="literal">true</span>);</span><br></pre></td></tr></table></figure>
<p>数组的元素可以通过索引来访问，起始值是0.</p>
<h3 id="对象">对象</h3>
<p>JavaScript的对象是一组由键-值组成的无序集合：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person=&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;Bob&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">20</span>,</span><br><span class="line">    <span class="attr">tags</span>:[<span class="string">&#x27;js&#x27;</span>,<span class="string">&#x27;web&#x27;</span>,<span class="string">&#x27;java&#x27;</span>],</span><br><span class="line">	<span class="attr">city</span>:<span class="string">&#x27;Beijing&#x27;</span>,</span><br><span class="line">    <span class="attr">hasCar</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="attr">zipcode</span>:<span class="literal">null</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>JavaScript对象的键都是字符串类型，值可以是任意数据。每个键又称为对象的属性。</p>
<p>要<strong>获取一个对象的属性</strong>，可以用<code>对象变量.属性名</code>的方式，如<code>person.name;</code>。</p>
<h2 id="变量">变量</h2>
<p>变量在JavaScript中用一个变量名表示，变量名是大小写英文、数字、<code>$</code>和<code>_</code>组成，不能以数字开头。变量名也不能是JavaScript的关键字，如if、while等。变量名也可以用中文。</p>
<p><strong>声明变量用<code>var</code>语句</strong>，如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="keyword">var</span> $b=<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p><code>=</code>号为赋值号，同一个变量可以反复赋值，可以是不同类型的变量，但只能声明一次：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">123</span>;</span><br><span class="line">a=<span class="string">&#x27;ABC&#x27;</span><span class="comment">//a的值由整数变为字符串</span></span><br></pre></td></tr></table></figure>
<p>要在控制台上显示变量的内容，用<code>console.log(x)</code>语句。使用<code>console.log()</code>代替<code>alert()</code>的好处是避免弹出烦人的对话框。</p>
<h3 id="strict模式">strict模式</h3>
<p>使用var声明的变量不是全局变量，它的范围被限制在该变量被声明的函数体内，同名变量在不同的函数体内互不冲突。</p>
<p>在strict模式下运行的JavaScript代码，强制通过var声明变量，未使用var声明变量就使用的，运行会报错。</p>
<p>启用strict模式的方法是在JavaScript代码的第一行写上：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>这是一个字符串，不支持strict模式的浏览器会把它当做一个字符串语句执行，支持strict模式的浏览器将会开启strict模式运行JavaScript。</p>
<h1 id="字符串-1">字符串</h1>
<p>转义字符<code>\</code>可以转义很多字符，比如<code>\n</code>表示换行，<code>\t</code>表示制表符，<code>\\</code>表示<code>\</code>字符。</p>
<p>ASCII字符可以以<code>\x##</code>形式的十六进制表示，如<code>\x41;</code>便等同于A。</p>
<p>还可以用<code>\u####</code>表示一个Unicode字符，如<code>\u4e2d\u6587;</code>便等同于‘中文’。</p>
<h2 id="多行字符串">多行字符串</h2>
<p>由于多行字符串用<code>\n</code>写起来比较麻烦，因此最新的ES6标准新增了一种多行字符串的方法，用反引号`表示，反引号里面的内容每次回车就会自动换行：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">`这是一个</span></span><br><span class="line"><span class="string">多行</span></span><br><span class="line"><span class="string">字符串`</span>;</span><br></pre></td></tr></table></figure>
<h2 id="模板字符串">模板字符串</h2>
<p>要把多个字符串连接起来，可以用<code>+</code>号连接：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name=<span class="string">&quot;张三&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> age=<span class="number">22</span>;</span><br><span class="line"><span class="keyword">var</span> message=<span class="string">&#x27;你好，&#x27;</span>+name+<span class="string">&#x27;，你今年&#x27;</span>+age+<span class="string">&#x27;岁了&#x27;</span>;</span><br><span class="line"><span class="title function_">alert</span>(message);</span><br></pre></td></tr></table></figure>
<p>当由很多变量需要连接时，用<code>+</code>号比较麻烦，ES6新增了一种模板字符串，表示方法和多行字符串一样，但它会自动替换字符串中的变量：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name=<span class="string">&quot;张三&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> age=<span class="number">22</span>;</span><br><span class="line"><span class="keyword">var</span> message=<span class="string">`你好，<span class="subst">$&#123;name&#125;</span>，你今年<span class="subst">$&#123;age&#125;</span>岁了`</span>;</span><br><span class="line"><span class="title function_">alert</span>(message);</span><br></pre></td></tr></table></figure>
<h2 id="操作字符串">操作字符串</h2>
<p>字符串是不可变的，若对字符串的某个索引赋值，不会报错，但也没有任何效果。</p>
<h3 id="touppercase"><code>toUpperCase</code></h3>
<p><code>toUpperCase()</code>把一个字符串全部变为大写：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s=<span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="title function_">toUpperCase</span>());<span class="comment">//返回&#x27;HELLO&#x27;</span></span><br></pre></td></tr></table></figure>
<h3 id="tolowercase"><code>toLowerCase</code></h3>
<p><code>toLowerCase</code>把一个字符串全部变为小写：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s=<span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="title function_">toLowerCase</span>());<span class="comment">//返回&#x27;hello&#x27;</span></span><br></pre></td></tr></table></figure>
<h3 id="indexof"><code>indexOf</code></h3>
<p><code>indexof()</code>会搜索指定字符串出现的位置：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">var s=&#x27;hello<span class="punctuation">,</span>world&#x27;;</span><br><span class="line">console.log(s.indexOf(&#x27;world&#x27;));<span class="comment">//返回6</span></span><br><span class="line">console.log(s.indexOf(&#x27;World&#x27;));<span class="comment">//没有找到指定的子串，返回-1</span></span><br></pre></td></tr></table></figure>
<h3 id="substring"><code>substring</code></h3>
<p><code>substring()</code>返回指定索引区间的子串：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s=<span class="string">&#x27;hello,world&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="title function_">substring</span>(<span class="number">0</span>,<span class="number">5</span>));<span class="comment">//从索引0开始到5结束(不包括5)，返回&#x27;hello&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="title function_">substring</span>(<span class="number">6</span>));<span class="comment">//从索引6开始到结束，返回&#x27;world&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="练习题-1">练习题</h2>
<p>测试你的浏览器是否支持ES6标准，如果不支持，请把多行字符串用<code>\n</code>重新表示出来：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`多行</span></span><br><span class="line"><span class="string">字符串</span></span><br><span class="line"><span class="string">测试`</span>);</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">多行</span></span><br><span class="line"><span class="comment">字符串</span></span><br><span class="line"><span class="comment">测试*/</span></span><br></pre></td></tr></table></figure>
<p>测试你的浏览器是否支持ES6模板字符串，如果不支持，请把模板字符串改为<code>+</code>连接的普通字符串：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;小明&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> age = <span class="number">20</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`你好, <span class="subst">$&#123;name&#125;</span>, 你今年<span class="subst">$&#123;age&#125;</span>岁了!`</span>);</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">你好, 小明, 你今年20岁了!*/</span></span><br></pre></td></tr></table></figure>
<h1 id="数组-1">数组</h1>
<p>要取得数组的长度，可直接访问<code>length</code>属性：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3.14</span>,<span class="string">&#x27;Hello&#x27;</span>,<span class="literal">null</span>,<span class="literal">true</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="property">length</span>);<span class="comment">//长度为6,返回6</span></span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong>直接给Array的<code>length</code>赋一个新值会导致Array大小的变化：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="property">length</span>);<span class="comment">//长度为3,返回3</span></span><br><span class="line">arr.<span class="property">length</span>=<span class="number">6</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);<span class="comment">//arr变为[1,2,3,undefined,undefined,undefined]</span></span><br><span class="line"><span class="comment">//返回(6) [1, 2, 3, …]</span></span><br><span class="line">arr.<span class="property">length</span>=<span class="number">2</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);<span class="comment">//arr变为[1,2]，返回(6) [1, 2, 3, …]</span></span><br></pre></td></tr></table></figure>
<p>Array可以通过索引把对应的元素修改为新的值，通过索引赋值会直接修改Array。若索引超过了范围，同样会引起Array大小的变化：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">arr[<span class="number">5</span>]=<span class="string">&#x27;x&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);<span class="comment">//arr变为[1,2,3,undefined,undefined,&#x27;x&#x27;]</span></span><br><span class="line"><span class="comment">//返回(6) [1, 2, 3, …, &#x27;x&#x27;]</span></span><br></pre></td></tr></table></figure>
<h2 id="indexof-1"><code>indexOf</code></h2>
<p>与String类似，Array也可以通过<code>indexof()</code>来搜索一个指定的元素位置：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">10</span>,<span class="number">20</span>,<span class="string">&#x27;30&#x27;</span>,<span class="string">&#x27;xyz&#x27;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">indexOf</span>(<span class="number">10</span>));<span class="comment">//元素10的索引为0,返回0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">indexOf</span>(<span class="number">30</span>));<span class="comment">//元素30没有找到，返回-1</span></span><br></pre></td></tr></table></figure>
<h2 id="slice"><code>slice</code></h2>
<p><code>slice</code>对应String的<code>substring()</code>，截取Array的部分元素，然后返回一个新的Array：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;E&#x27;</span>,<span class="string">&#x27;F&#x27;</span>,<span class="string">&#x27;G&#x27;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">slice</span>(<span class="number">0</span>,<span class="number">3</span>));<span class="comment">//从索引0开始到3结束(不包括3)，返回(3) [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">slice</span>(<span class="number">3</span>));<span class="comment">//从索引3开始到结束，返回(4) [&#x27;D&#x27;, &#x27;E&#x27;, &#x27;F&#x27;, &#x27;G&#x27;]</span></span><br></pre></td></tr></table></figure>
<p>若不给<code>slice()</code>传递任何参数，它会从头到尾截取所有元素。</p>
<h2 id="push和pop">push和pop</h2>
<p>push()向Array的末尾添加元素，pop()则把Array的最后一个元素删掉：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line">arr.<span class="title function_">push</span>(<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// 返回(4)[1, 2, &#x27;A&#x27;, &#x27;B&#x27;]</span></span><br><span class="line">arr.<span class="title function_">pop</span>(); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// 返回(3)[1, 2, &#x27;A&#x27;]</span></span><br><span class="line">arr.<span class="title function_">pop</span>(); arr.<span class="title function_">pop</span>(); arr.<span class="title function_">pop</span>(); <span class="comment">// 连续pop 3次</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// 返回(0)[]</span></span><br><span class="line">arr.<span class="title function_">pop</span>(); <span class="comment">// 空数组继续pop不会报错，而是返回undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);<span class="comment">// 返回(0)[]</span></span><br></pre></td></tr></table></figure>
<h2 id="unshift和shift">unshift和shift</h2>
<p>若要往Array的头部添加若干元素，使用<code>unshift()</code>方法，<code>shift()</code>方法则是把Array的第一个元素删掉：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line">arr.<span class="title function_">unshift</span>(<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);<span class="comment">// 返回(4) [&#x27;A&#x27;, &#x27;B&#x27;, 1, 2]</span></span><br><span class="line">arr.<span class="title function_">shift</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);<span class="comment">// 返回(3) [&#x27;B&#x27;, 1, 2]</span></span><br><span class="line">arr.<span class="title function_">shift</span>();arr.<span class="title function_">shift</span>();arr.<span class="title function_">shift</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);<span class="comment">// 返回(0) []</span></span><br><span class="line">arr.<span class="title function_">shift</span>();<span class="comment">// 空数组继续shift不会报错，而是返回undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);<span class="comment">// 返回(0) []</span></span><br></pre></td></tr></table></figure>
<h2 id="sort">sort</h2>
<p><code>sort()</code>可以对当前Array进行排序，它会直接修改当前Array的元素位置，直接调用是，按照默认顺序排序：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;A&#x27;</span>];</span><br><span class="line">arr.<span class="title function_">sort</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);<span class="comment">//返回(3) [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;]</span></span><br></pre></td></tr></table></figure>
<h2 id="reverse">reverse</h2>
<p><code>reverse()</code>可以反转Array内的元素：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">arr.<span class="title function_">reverse</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);<span class="comment">//返回(3) [3, 2, 1]</span></span><br></pre></td></tr></table></figure>
<h2 id="splice">splice</h2>
<p><code>splice</code>方法可以从指定的索引开始删除元素，然后再从该位置添加元素：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line">arr.<span class="title function_">splice</span>(<span class="number">2</span>,<span class="number">3</span>,<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>);<span class="comment">//从索引2开始删除3个元素，然后再添加2个元素</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);<span class="comment">//返回(5) [1, 2, &#x27;A&#x27;, &#x27;B&#x27;, 6]</span></span><br><span class="line">arr.<span class="title function_">splice</span>(<span class="number">2</span>,<span class="number">2</span>)<span class="comment">//从索引2开始删除2个元素，不添加元素</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);<span class="comment">//返回(3) [1, 2, 6]</span></span><br><span class="line">arr.<span class="title function_">splice</span>(<span class="number">2</span>,<span class="number">0</span>,<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>);<span class="comment">//从索引2开始添加2个元素，不删除元素</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);<span class="comment">//返回(5) [1, 2, &#x27;A&#x27;, &#x27;B&#x27;, 6]</span></span><br></pre></td></tr></table></figure>
<h2 id="concat">concat</h2>
<p><code>concat()</code>方法把当前的Array和另一个Array连接起来，并返回一个新的Array：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> added=arr.<span class="title function_">concat</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(added);<span class="comment">//返回(6) [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, 1, 2, 3]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);<span class="comment">//返回(3) [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;]</span></span><br></pre></td></tr></table></figure>
<p><code>concat()</code>方法可以接收任意个元素和Array，并自动把Array拆开，然后全部添加到新的Array里：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">concat</span>(<span class="number">1</span>,<span class="number">2</span>,[<span class="number">3</span>,<span class="number">4</span>]));</span><br><span class="line"><span class="comment">//返回(7) [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, 1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure>
<h2 id="join">join</h2>
<p><code>join()</code>方法把当前Array的每个元素都用指定的字符串连接起来，然后返回连接后的字符串：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">join</span>(<span class="string">&#x27;-&#x27;</span>))<span class="comment">//返回A-B-C-1-2-3</span></span><br></pre></td></tr></table></figure>
<p>若Array的元素不是字符串，将自动转换为字符串后再连接。</p>
<h2 id="多维数组">多维数组</h2>
<p>若数组的某个元素又是一个Array，便形成了多维数组。</p>
<h2 id="练习题-2">练习题</h2>
<p>如何通过索引取到<code>500</code>这个值：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">400</span>, <span class="number">500</span>, <span class="number">600</span>], <span class="string">&#x27;-&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> x = arr[<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x); </span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">500*/</span></span><br></pre></td></tr></table></figure>
<p>在新生欢迎会上，你已经拿到了新同学的名单，请排序后显示：<code>欢迎XXX，XXX，XXX和XXX同学！</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;小明&#x27;</span>, <span class="string">&#x27;小红&#x27;</span>, <span class="string">&#x27;大军&#x27;</span>, <span class="string">&#x27;阿黄&#x27;</span>];</span><br><span class="line">arr.<span class="title function_">sort</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;欢迎&#x27;</span>+arr[<span class="number">0</span>]+<span class="string">&#x27;，&#x27;</span>+arr[<span class="number">1</span>]+<span class="string">&#x27;，&#x27;</span>+arr[<span class="number">2</span>]+<span class="string">&#x27;和&#x27;</span>+arr[<span class="number">3</span>]+<span class="string">&#x27;同学！&#x27;</span>);</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">欢迎大军，小明，小红和阿黄同学！*/</span></span><br></pre></td></tr></table></figure>
<h1 id="对象-1">对象</h1>
<p>JavaScript的对象是一种由若干键值组成的无序集合数据类型。</p>
<p>JavaScript用一个<code>&#123;...&#125;</code>表示一个对象，键值对以<code>xxx:xxx</code>形式声明，用<code>,</code>隔开：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xiaoming=&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;小明&#x27;</span>,</span><br><span class="line">    <span class="attr">birth</span>:<span class="number">1999</span>,</span><br><span class="line">    <span class="attr">school</span>:<span class="string">&#x27;No.1 Middle School&#x27;</span>,</span><br><span class="line">    <span class="attr">height</span>:<span class="number">1.70</span>,</span><br><span class="line">    <span class="attr">weight</span>:<span class="number">65</span>,</span><br><span class="line">    <span class="attr">score</span>:<span class="literal">null</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>可以通过<code>对象.属性</code>来获取小明的属性：<code>xiaoming.name;</code>。若属性名包括特殊字符，就必须使用<code>''</code>括起来：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> zhangsan=&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;middel-school&#x27;</span>:<span class="string">&#x27;No.1 Middle School&#x27;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>访问这一特殊属性无法使用<code>.</code>操作符，必须使用<code>['xxx']</code>访问：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">zhangsan[<span class="string">&#x27;middel-school&#x27;</span>];</span><br><span class="line">zhangsan[<span class="string">&#x27;name&#x27;</span>];<span class="comment">//name也可以用[&#x27;xxx&#x27;]访问</span></span><br><span class="line">zhangsan.<span class="property">name</span>;</span><br></pre></td></tr></table></figure>
<p>对象的所有属性都是字符串，但属性值可以是任意数据类型。若访问不存在的属性会返回<code>undefined</code>。</p>
<p>由于JavaScript的对象是动态类型，因此可以自由给对象添加或删除属性：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xiaoming=&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;小明&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(xiaoming.<span class="property">age</span>);<span class="comment">//返回undefined</span></span><br><span class="line">xiaoming.<span class="property">age</span>=<span class="number">18</span>;<span class="comment">//</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(xiaoming.<span class="property">age</span>);<span class="comment">//返回18</span></span><br><span class="line"><span class="keyword">delete</span> xiaoming.<span class="property">age</span>;<span class="comment">//删除age属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(xiaoming.<span class="property">age</span>);<span class="comment">//返回undefined</span></span><br></pre></td></tr></table></figure>
<p>用<code>in</code>操作符可以检查对象是否拥有某个属性（包括继承属性）：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xiaoming=&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;小明&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;name&#x27;</span><span class="keyword">in</span> xiaoming);<span class="comment">//返回true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;age&#x27;</span> <span class="keyword">in</span> xiaoming);<span class="comment">//返回false</span></span><br></pre></td></tr></table></figure>
<p>用<code>hasOwnProperty()</code>方法可以可以检查对象自身是否拥有某个属性：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xiaoming=&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;小明&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(xiaoming.<span class="title function_">hasOwenProperty</span>(<span class="string">&#x27;name&#x27;</span>));<span class="comment">//返回true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(xiaoming.<span class="title function_">hasOwenProperty</span>(<span class="string">&#x27;age&#x27;</span>));<span class="comment">//返回false</span></span><br></pre></td></tr></table></figure>
<h1 id="条件判断">条件判断</h1>
<p>JavaScript使用<code>if()&#123;...&#125;else&#123;...&#125;</code>来进行条件判断，如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age=<span class="number">20</span>;</span><br><span class="line"><span class="keyword">if</span>(age&gt;=<span class="number">18</span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;adult&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;teenager&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="多行条件判断">多行条件判断</h2>
<p>使用多个<code>if...else if...else...</code>组合可以进行更细致的判断：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age=<span class="number">3</span>;</span><br><span class="line"><span class="keyword">if</span> (age&gt;=<span class="number">18</span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;adult&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(age&gt;=<span class="number">6</span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;teenager&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;kid&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>JavaScript把<code>null</code>、<code>undefined</code>、<code>0</code>、<code>NaN</code>和空字符串<code>''</code>视为false，其他值一概视为true。</p>
<h2 id="练习题-3">练习题</h2>
<p>小明身高1.75，体重80.5kg。请根据BMI公式（体重除以身高的平方）帮小明计算他的BMI指数，并根据BMI指数：</p>
<ul>
<li>低于18.5：过轻</li>
<li>18.5-25：正常</li>
<li>25-28：过重</li>
<li>28-32：肥胖</li>
<li>高于32：严重肥胖</li>
</ul>
<p>用<code>if...else...</code>判断并显示结果：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> height=<span class="built_in">parseFloat</span>(<span class="title function_">prompt</span>(<span class="string">&#x27;请输入身高(m):&#x27;</span>));</span><br><span class="line"><span class="keyword">var</span> weight=<span class="built_in">parseFloat</span>(<span class="title function_">prompt</span>(<span class="string">&#x27;请输入体重(kg):&#x27;</span>));</span><br><span class="line"><span class="keyword">var</span> bmi=weight/(height*height);</span><br><span class="line"><span class="keyword">if</span>(bmi&lt;<span class="number">18.5</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;过轻&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(bmi&gt;=<span class="number">18.5</span>&amp;&amp;bmi&lt;<span class="number">25</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;正常&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(bmi&gt;=<span class="number">25</span>&amp;&amp;bmi&lt;<span class="number">28</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;过重&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(bmi&gt;=<span class="number">28</span>&amp;&amp;bmi&lt;<span class="number">32</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;肥胖&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;严重肥胖&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">过重*/</span></span><br></pre></td></tr></table></figure>
<h1 id="循环">循环</h1>
<p>JavaScript的循环有两种，一种是for循环，另一种是while循环。</p>
<h2 id="for循环">for循环</h2>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">10000</span>;i++)&#123;</span><br><span class="line">    x=x+i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x);<span class="comment">//返回50005000</span></span><br></pre></td></tr></table></figure>
<h2 id="练习题-4">练习题</h2>
<p>利用<code>for</code>循环计算<code>1 * 2 * 3 * ... * 10</code>的结果：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">var x=<span class="number">1</span>;</span><br><span class="line">var i;</span><br><span class="line">for (i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++)<span class="punctuation">&#123;</span></span><br><span class="line">    x=x*i;</span><br><span class="line"><span class="punctuation">&#125;</span>if (x === <span class="number">3628800</span>) <span class="punctuation">&#123;</span></span><br><span class="line">    console.log(&#x27;<span class="number">1</span> x <span class="number">2</span> x <span class="number">3</span> x ... x <span class="number">10</span> = &#x27; + x);</span><br><span class="line"><span class="punctuation">&#125;</span>else <span class="punctuation">&#123;</span></span><br><span class="line">    console.log(&#x27;计算错误&#x27;);</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>for循环的3个条件是可以省略的，<code>for(;;)</code>将无限循环下去，为了避免死循环，此时可以使用break语句退出循环。</p>
<h2 id="for...in"><code>for...in</code></h2>
<p>for循环的一个变体是<code>for...in</code>循环，它可以把一个对象的所有属性依次循环出来：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a=&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;Jack&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">20</span>,</span><br><span class="line">    <span class="attr">city</span>:<span class="string">&#x27;Beijing&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> a)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">name</span></span><br><span class="line"><span class="comment">age</span></span><br><span class="line"><span class="comment">city</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>可用<code>hasOwnProperty()</code>过滤掉继承属性：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a=&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;Jack&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">20</span>,</span><br><span class="line">    <span class="attr">city</span>:<span class="string">&#x27;Beijing&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> a)&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.<span class="title function_">hasOwnProperty</span>(key))&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">name</span></span><br><span class="line"><span class="comment">age</span></span><br><span class="line"><span class="comment">city</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p><code>for...in</code>循环也可以直接循环出Array的索引：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a=[<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> a)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">0</span></span><br><span class="line"><span class="comment">A</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">B</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">C</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h2 id="while">while</h2>
<p>while循环只有一个判断条件，条件满足就不断循环，条件不满足则退出循环：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> n=<span class="number">99</span>;</span><br><span class="line"><span class="keyword">while</span>(n&gt;<span class="number">0</span>)&#123;</span><br><span class="line">    x=x+n;</span><br><span class="line">    n=n-<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">2500</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h2 id="do...while"><code>do...while</code></h2>
<p><code>do...while</code>与while循环的唯一区别在于，<code>do...while</code>在每次循环完成时判断条件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> n=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    n=n+<span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">while</span>(n&lt;<span class="number">100</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n);</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">100</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h2 id="练习题-5">练习题</h2>
<p>请利用循环遍历数组中的每个名字，并显示<code>Hello, xxx!</code>。请尝试<code>for</code>循环和<code>while</code>循环，并以正序、倒序两种方式遍历：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;Bart&#x27;</span>, <span class="string">&#x27;Lisa&#x27;</span>, <span class="string">&#x27;Adam&#x27;</span>];</span><br><span class="line"><span class="comment">//for循环正序</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> arr)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello, &#x27;</span>+arr[i]+<span class="string">&#x27;!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;for循环正序&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//for循环倒序</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=arr.<span class="property">length</span>-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello, &#x27;</span>+arr[i]+<span class="string">&#x27;!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;for循环倒序&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//while循环正序</span></span><br><span class="line"><span class="keyword">var</span> t=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(t&lt;=arr.<span class="property">length</span>-<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello, &#x27;</span>+arr[t]+<span class="string">&#x27;!&#x27;</span>);</span><br><span class="line">    t=t+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;while循环正序&#x27;</span>);</span><br><span class="line"><span class="comment">//while循环倒序</span></span><br><span class="line"><span class="keyword">var</span> n=arr.<span class="property">length</span>-<span class="number">1</span></span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello, &#x27;</span>+arr[n]+<span class="string">&#x27;!&#x27;</span>);</span><br><span class="line">    n=n-<span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">while</span>(n&gt;=<span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;while循环倒序&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h1 id="map和set">Map和Set</h1>
<p>JavaScript的默认对象表示方式<code>&#123;&#125;</code>可以视为其他语言中的Map的数据结构。但JavaScript的对象，其键必须是字符串，实际上Number或其他数据类型作为键也是合理的。</p>
<p>为解决这种情况，ES6规范引入了新的数据类型Map。</p>
<p>以下代码可以测试浏览器是否支持ES6规范，若报错则不支持：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你的浏览器支持Map和Set！&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h2 id="map">Map</h2>
<p>Map是一组键值对的结构，具有极快的查找速度：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> m=<span class="keyword">new</span> <span class="title class_">Map</span>([[<span class="string">&#x27;Michael&#x27;</span>,<span class="number">95</span>],[<span class="string">&#x27;Bob&#x27;</span>,<span class="number">75</span>],[<span class="string">&#x27;Tracy&#x27;</span>,<span class="number">85</span>]]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m.<span class="title function_">get</span>(<span class="string">&#x27;Michael&#x27;</span>));</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">95*/</span></span><br></pre></td></tr></table></figure>
<p>初始化Map需要两个二维数组，或者直接初始化一个空Map。Map具有以下方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> m=<span class="keyword">new</span> <span class="title class_">Map</span>();<span class="comment">//空Map</span></span><br><span class="line">m.<span class="title function_">set</span>(<span class="string">&#x27;Adam&#x27;</span>,<span class="number">67</span>);<span class="comment">//添加一个新的键值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m.<span class="title function_">has</span>(<span class="string">&#x27;Adam&#x27;</span>));<span class="comment">//是否存在key&#x27;Adam&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m.<span class="title function_">get</span>(<span class="string">&#x27;Adam&#x27;</span>));<span class="comment">//获取key&#x27;Adam&#x27;的值，返回67</span></span><br><span class="line">m.<span class="title function_">delete</span>(<span class="string">&#x27;Adam&#x27;</span>);<span class="comment">//删除key&#x27;Adam&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m.<span class="title function_">get</span>(<span class="string">&#x27;Adam&#x27;</span>));<span class="comment">//返回undefined</span></span><br></pre></td></tr></table></figure>
<p>由于一个key只能对应一个value，依次多次对一个key放入value，后面的值会把前面的值顶掉。</p>
<h2 id="set">Set</h2>
<p>Set和Map类似，也是一组key的集合，但Set不存储value。Set中没有重复的key。</p>
<p>创建一个Set，需要提供一个Array作为输入，或者直接初始化一个空Set：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s=<span class="keyword">new</span> <span class="title class_">Set</span>();<span class="comment">//空Set</span></span><br><span class="line"><span class="keyword">var</span> ss=<span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]);<span class="comment">//含1,2,3</span></span><br></pre></td></tr></table></figure>
<p>Set具有以下方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]);</span><br><span class="line">a.<span class="title function_">add</span>(<span class="number">4</span>);<span class="comment">//添加元素4到set中</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);<span class="comment">//返回Set&#123;4, 1, 2, 3&#125;</span></span><br><span class="line">a.<span class="title function_">add</span>(<span class="number">4</span>);<span class="comment">//重复添加元素</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);<span class="comment">//自动过滤重复元素。返回Set&#123;4, 1, 2, 3&#125;</span></span><br><span class="line">a.<span class="title function_">delete</span>(<span class="number">3</span>);<span class="comment">//删除set中的元素3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);<span class="comment">//Set&#123;1, 2, 4&#125;</span></span><br></pre></td></tr></table></figure>
<h1 id="iterable">iterable</h1>
<p>遍历Array可以采用下标循环，而Set和Map无法使用 下标。为了统一集合类型，ES6引入了iterable类型。Array、Map和Set都属于iterable类型。</p>
<p>具有iterable类型的集合可以通过<code>for...of</code>循环来遍历，可以通过以下代码测试浏览器是否支持<code>for...of</code>循环：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> x <span class="keyword">of</span> a) &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你的浏览器支持for ... of&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>用<code>for...of</code>循环遍历集合，用法如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a=[<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> s=<span class="keyword">new</span> <span class="title class_">Set</span>([<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>]);</span><br><span class="line"><span class="keyword">var</span> m=<span class="keyword">new</span> <span class="title class_">Map</span>([[<span class="number">1</span>,<span class="string">&#x27;x&#x27;</span>],[<span class="number">2</span>,<span class="string">&#x27;y&#x27;</span>],[<span class="number">3</span>,<span class="string">&#x27;z&#x27;</span>]]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> x <span class="keyword">of</span> a)&#123;<span class="comment">//遍历数组</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> x <span class="keyword">of</span> s)&#123;<span class="comment">//遍历Set</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> x <span class="keyword">of</span> m)&#123;<span class="comment">//遍历Map</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x[<span class="number">0</span>]+<span class="string">&#x27;=&#x27;</span>+x[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">A</span></span><br><span class="line"><span class="comment">B</span></span><br><span class="line"><span class="comment">C</span></span><br><span class="line"><span class="comment">A</span></span><br><span class="line"><span class="comment">B</span></span><br><span class="line"><span class="comment">C</span></span><br><span class="line"><span class="comment">1=x</span></span><br><span class="line"><span class="comment">2=y</span></span><br><span class="line"><span class="comment">3=z*/</span></span><br></pre></td></tr></table></figure>
<p>当给<code>Array</code>对象添加了额外的属性后，使用<code>for ... in</code>循环会有意想不到的意外效果：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>];</span><br><span class="line">a.<span class="property">name</span> = <span class="string">&#x27;Hello&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> x <span class="keyword">in</span> a) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x); </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">0</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">name</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p><code>for ... in</code>循环将把<code>name</code>包括在内，但<code>Array</code>的<code>length</code>属性却不包括在内。</p>
<p><code>for ... of</code>循环则完全修复了这些问题，它只循环集合本身的元素：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>];</span><br><span class="line">a.<span class="property">name</span> = <span class="string">&#x27;Hello&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> x <span class="keyword">of</span> a) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">A</span></span><br><span class="line"><span class="comment">B</span></span><br><span class="line"><span class="comment">C</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>还可以使用ES5.1引入的<code>iterable</code>内置<code>forEach</code>方法，它接收一个函数，每次迭代就自动回调该函数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a=[<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>];</span><br><span class="line">a.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">element,index,array</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(element+<span class="string">&#x27;, index=&#x27;</span>+index);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//element指向当前元素的值，index指向当前索引，array指向array对象本身</span></span><br></pre></td></tr></table></figure>
<p><code>Set</code>与Array类似，但<code>Set</code>没有索引，因此回调函数的前两个参数都是元素本身。</p>
<p><code>Map</code>的回调函数参数依次为<code>value</code>、<code>key</code>和<code>map</code>本身。</p>
<p>由于JavaScript的函数调用不要求参数必须一致，因此可以忽略部分参数，如只需要获得Array的<code>element</code>。</p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>前端三件套之JavaScript（三）</title>
    <url>/2022/11/01/%E5%89%8D%E7%AB%AF%E4%B8%89%E4%BB%B6%E5%A5%97%E4%B9%8BJavaScript%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[<h1 id="标准对象">标准对象</h1>
<p>在JavaScript的世界里，一切皆是对象。但某些对象与其他对象不太一样。为了区分对象的类型，通常用<code>typeof</code>操作符获取对象的类型：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="number">123</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="title class_">NaN</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="string">&#x27;str&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">true</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">undefined</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="title class_">Math</span>.<span class="property">abs</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">null</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> []);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> &#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">number</span></span><br><span class="line"><span class="comment">number</span></span><br><span class="line"><span class="comment">string</span></span><br><span class="line"><span class="comment">boolean</span></span><br><span class="line"><span class="comment">undefined</span></span><br><span class="line"><span class="comment">function</span></span><br><span class="line"><span class="comment">object</span></span><br><span class="line"><span class="comment">object</span></span><br><span class="line"><span class="comment">object</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>注意，null、Array的类型都是object，若用<code>typeof</code>将无法区分出null、Array和object。</p>
<p><strong>包装对象</strong></p>
<p>除了这些类型外，JavaScript还提供了包装对象。<code>Number</code>、<code>boolean</code>和<code>string</code>都有包装对象。包装对象用new创建：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> n=<span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">123</span>);</span><br><span class="line"><span class="keyword">var</span> b=<span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="literal">true</span>);</span><br><span class="line"><span class="keyword">var</span> s=<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;str&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s);</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">Number (123)</span></span><br><span class="line"><span class="comment">Boolean (true)</span></span><br><span class="line"><span class="comment">String (&#x27;str&#x27;)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>虽然包装对象看上去和原来的值一样，但类型已经变为object了，用<code>===</code>与原始值比较会返回<code>false</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> n=<span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">123</span>);</span><br><span class="line"><span class="keyword">var</span> b=<span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="literal">true</span>);</span><br><span class="line"><span class="keyword">var</span> s=<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;str&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n===<span class="number">123</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b===<span class="literal">true</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s===<span class="string">&#x27;str&#x27;</span>);</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">false</span></span><br><span class="line"><span class="comment">false</span></span><br><span class="line"><span class="comment">false</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>因此，要注意以下几点：</p>
<ul>
<li>不要使用<code>new Number()</code>、<code>new Boolean()</code>、<code>new String()</code>创建包装对象</li>
<li>用<code>parseInt()</code>或<code>parseFloat()</code>来转换任意类型的<code>number</code></li>
<li>用<code>Sting()</code>来转换任意类型到<code>string</code>，或直接调用某个对象的<code>toString()</code>方法，只有<code>null</code>和<code>undedined</code>没有<code>toString()</code>方法，number对象调用<code>toString()</code>要写成：<code>123..toString();</code>或<code>(123).toStirng();</code></li>
<li>通常不用把任意类型转换为<code>boolean</code>再判断</li>
<li>用<code>typeof</code>可以判断出<code>number</code>、<code>boolean</code>、<code>string</code>、<code>function</code>和<code>undefined</code></li>
<li>判断Array要用<code>Array.isArray(arr)</code></li>
<li>判断null要用<code>myvar===null</code></li>
<li>判断某个全局变量是否存在用<code>typeof window.myvar==='undefined'</code></li>
<li>函数内部判断某个变量是否存在用<code>typeof myvar==='undefined'</code></li>
</ul>
<h2 id="date">Date</h2>
<p>在JavaScript里，Date对象用来表示日期和时间。</p>
<p>用Date获取系统时间：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> now=<span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(now);<span class="comment">//显示当前的时间</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(now.<span class="title function_">getFullYear</span>());<span class="comment">//显示今年</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(now.<span class="title function_">getMonth</span>());<span class="comment">//显示这个月，月份范围是0~11，10表示11月</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(now.<span class="title function_">getDate</span>());<span class="comment">//显示今天多少号</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(now.<span class="title function_">getDay</span>());<span class="comment">//显示今天星期几</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(now.<span class="title function_">getHours</span>());<span class="comment">//显示现在几时，24小时制</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(now.<span class="title function_">getMinutes</span>());<span class="comment">//显示现在是多少分钟</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(now.<span class="title function_">getSeconds</span>());<span class="comment">//显示现在是多少秒</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(now.<span class="title function_">getMilliseconds</span>());<span class="comment">//显示现在是多少毫秒</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(now.<span class="title function_">getTime</span>());<span class="comment">//以number形式表示的时间戳</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">Tue Nov 01 2022 11:01:14 GMT+0800 (中国标准时间)</span></span><br><span class="line"><span class="comment">2022</span></span><br><span class="line"><span class="comment">10</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">11</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">14</span></span><br><span class="line"><span class="comment">217</span></span><br><span class="line"><span class="comment">1667271674217</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>当前时间是浏览器从本机操作系统获取的时间所以不一定准确。</p>
<p>若要创建一个指定日期和时间的Date对象，可以用：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> d=<span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2015</span>,<span class="number">5</span>,<span class="number">19</span>,<span class="number">20</span>,<span class="number">15</span>,<span class="number">30</span>,<span class="number">123</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d);</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">Fri Jun 19 2015 20:15:30 GMT+0800 (中国标准时间)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>第二种创建一个指定日期和时间的方法是解析一个符号ISO 8601格式的字符串：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> d=<span class="title class_">Date</span>.<span class="title function_">parse</span>(<span class="string">&#x27;2015-06-24T19:49:22.875+08:00&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d);<span class="comment">//返回时间戳</span></span><br><span class="line"><span class="keyword">var</span> dd=<span class="keyword">new</span> <span class="title class_">Date</span>(d)<span class="comment">//时间戳转Date</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dd);</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">1435146562875</span></span><br><span class="line"><span class="comment">Wed Jun 24 2015 19:49:22 GMT+0800 (中国标准时间)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h2 id="时区">时区</h2>
<p>Date对象表示的时间总是按浏览器所在时区显示的，不过既可以显示本地时间，也可以显示调整后的UTC时间：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> d=<span class="title class_">Date</span>.<span class="title function_">parse</span>(<span class="string">&#x27;2015-06-24T19:49:22.875+08:00&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d);</span><br><span class="line"><span class="keyword">var</span> dd=<span class="keyword">new</span> <span class="title class_">Date</span>(d)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dd.<span class="title function_">toLocaleString</span>());<span class="comment">//显示的字符串与操作系统设定的格式有关</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dd.<span class="title function_">toUTCString</span>());<span class="comment">//UTC时间与本地时间相差8小时</span></span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">1435146562875</span></span><br><span class="line"><span class="comment">2015/6/24 19:49:22</span></span><br><span class="line"><span class="comment">Wed, 24 Jun 2015 11:49:22 GMT</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>获取当前时间戳：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="title class_">Date</span>.<span class="property">now</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Date</span>.<span class="title function_">now</span>());</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;<span class="comment">//老版本IE没有now()方法</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">1667272652007</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h3 id="练习题">练习题</h3>
<p>小明为了和女友庆祝情人节，特意制作了网页，并提前预定了法式餐厅。小明打算用JavaScript给女友一个惊喜留言,结果女友并未出现。小明非常郁闷，请你帮忙分析他的JavaScript代码有何问题：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> today = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="keyword">if</span> (today.<span class="title function_">getMonth</span>() === <span class="number">2</span> &amp;&amp; today.<span class="title function_">getDate</span>() === <span class="number">14</span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;亲爱的，我预定了晚餐，晚上6点在餐厅见！&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>修改后的代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//分析：JavaScript中getMonth() 实际时间为0~11，数值为2时，实际月份为3。</span></span><br><span class="line"><span class="keyword">var</span> today = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="keyword">if</span> (today.<span class="title function_">getMonth</span>() === <span class="number">1</span> &amp;&amp; today.<span class="title function_">getDate</span>() === <span class="number">14</span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;亲爱的，我预定了晚餐，晚上6点在餐厅见！&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="regexp"><code>RegExp</code></h2>
<p>JavaScript有两种方式创建一个正则表达式：</p>
<p>第一种是直接通过<code>/正则表达式/</code>写出来，第二种是通过<code>new RegExp(正则表达式)</code>创建一个RegExp对象。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> re1=<span class="regexp">/ABC\-001/</span>;</span><br><span class="line"><span class="keyword">var</span> re2=<span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&#x27;ABC\\-001&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(re1);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(re2);</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">/ABC\-001/</span></span><br><span class="line"><span class="comment">/ABC\-001/</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>判断正则表达式是否匹配：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> re=<span class="regexp">/^\d&#123;3&#125;\-\d&#123;3,8&#125;$/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(re.<span class="title function_">test</span>(<span class="string">&#x27;010-12345&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(re.<span class="title function_">test</span>(<span class="string">&#x27;010-1234x&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(re.<span class="title function_">test</span>(<span class="string">&#x27;010 12345&#x27;</span>));</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment">false</span></span><br><span class="line"><span class="comment">false</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h3 id="切分字符串">切分字符串</h3>
<p>用正则表达式切分字符串：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a b  c , ; ; d&#x27;</span>.<span class="title function_">split</span>(<span class="regexp">/[\s\,\;]+/</span>));</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">(4) [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h3 id="分组">分组</h3>
<p>正则表达式用<code>()</code>表示要提取的分组，可以提取子串。若正则表达式种定义了组，就可以在<code>RegExp</code>对象上用<code>exec()</code>方法提取出子串来：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> re=<span class="regexp">/^(\d&#123;3&#125;)-(\d&#123;3,8&#125;)$/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(re.<span class="title function_">exec</span>(<span class="string">&#x27;010-12345&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(re.<span class="title function_">exec</span>(<span class="string">&#x27;010 12345&#x27;</span>));</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">(3) [&#x27;010-12345&#x27;, &#x27;010&#x27;, &#x27;12345&#x27;, index: 0, input: &#x27;010-12345&#x27;, groups: undefined]</span></span><br><span class="line"><span class="comment">null</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p><code>exec()</code>方法在匹配成功后会返回一个Array，第一个元素是正则表达式匹配到的整个字符串，后面的字符串表示匹配成功的子串。在匹配失败是返回<code>null</code>。</p>
<p>正则表达式可以直接识别合法的世界，但无法做到完全识别日期：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> re1=<span class="regexp">/^(0[0-9]|1[0-9]|2[0-3]|[0-9])\:(0[0-9]|1[0-9]|2[0-0]|3[0-9]|4[0-9]|5[0-9]|[0-9])\:(0[0-9]|1[0-9]|2[0-0]|3[0-9]|4[0-9]|5[0-9]|[0-9])$/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(re1.<span class="title function_">exec</span>(<span class="string">&#x27;11:43:59&#x27;</span>));</span><br><span class="line"><span class="keyword">var</span> re2=<span class="regexp">/^(0[1-9]|1[0-2]|[0-9])-(0[1-9]|1[0-9]|2[0-9]|3[0-1]|[0-9])$/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(re2.<span class="title function_">exec</span>(<span class="string">&#x27;2-30&#x27;</span>));<span class="comment">//2-30号不存在，应该返回null</span></span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">(4) [&#x27;11:43:59&#x27;, &#x27;11&#x27;, &#x27;43&#x27;, &#x27;59&#x27;, index: 0, input: &#x27;11:43:59&#x27;, groups: undefined]</span></span><br><span class="line"><span class="comment">(3) [&#x27;2-30&#x27;, &#x27;2&#x27;, &#x27;30&#x27;, index: 0, input: &#x27;2-30&#x27;, groups: undefined]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h3 id="贪婪匹配">贪婪匹配</h3>
<p>正则匹配默认是贪婪匹配。在需要培贪婪匹配的语句后加问号<code>?</code>，可以让该语句采用非贪婪匹配。</p>
<h3 id="全局搜索">全局搜索</h3>
<p>JavaScript的正则表达式有几个特殊的标志，最常用的是全局匹配<code>g</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s=<span class="string">&#x27;JavaScript,VBScript,JScript and ECMAScript&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> re=<span class="regexp">/[a-zA-Z]+Script/g</span>;<span class="comment">//使用全局匹配</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(re.<span class="title function_">exec</span>(s));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(re.<span class="property">lastIndex</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(re.<span class="title function_">exec</span>(s));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(re.<span class="property">lastIndex</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(re.<span class="title function_">exec</span>(s));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(re.<span class="property">lastIndex</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(re.<span class="title function_">exec</span>(s));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(re.<span class="property">lastIndex</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(re.<span class="title function_">exec</span>(s));<span class="comment">//直至结束都没有匹配到</span></span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">(1) [&#x27;JavaScript&#x27;, index: 0, input: &#x27;JavaScript,VBScript,JScript and ECMAScript&#x27;, groups: undefined]</span></span><br><span class="line"><span class="comment">10</span></span><br><span class="line"><span class="comment">(1) [&#x27;VBScript&#x27;, index: 11, input: &#x27;JavaScript,VBScript,JScript and ECMAScript&#x27;, groups: undefined]</span></span><br><span class="line"><span class="comment">19</span></span><br><span class="line"><span class="comment">(1) [&#x27;JScript&#x27;, index: 20, input: &#x27;JavaScript,VBScript,JScript and ECMAScript&#x27;, groups: undefined]</span></span><br><span class="line"><span class="comment">27</span></span><br><span class="line"><span class="comment">(1) [&#x27;ECMAScript&#x27;, index: 32, input: &#x27;JavaScript,VBScript,JScript and ECMAScript&#x27;, groups: undefined]</span></span><br><span class="line"><span class="comment">42</span></span><br><span class="line"><span class="comment">null</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>JavaScript的正则表达式还可以指定<code>i</code>标志，表示忽略大小写；<code>m</code>标志表示执行多行匹配。</p>
<h3 id="练习题-1">练习题</h3>
<p>请尝试写一个验证Email地址的正则表达式。版本一应该可以验证出类似的Email：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> re = <span class="regexp">/^([a-z\.0-9])+@+([a-z0-9]+\.+[a-z]&#123;3&#125;)$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试:</span></span><br><span class="line"><span class="keyword">var</span></span><br><span class="line">    i,</span><br><span class="line">    success = <span class="literal">true</span>,</span><br><span class="line">    should_pass = [<span class="string">&#x27;someone@gmail.com&#x27;</span>, <span class="string">&#x27;bill.gates@microsoft.com&#x27;</span>, <span class="string">&#x27;tom@voyager.org&#x27;</span>, <span class="string">&#x27;bob2015@163.com&#x27;</span>],</span><br><span class="line">    should_fail = [<span class="string">&#x27;test#gmail.com&#x27;</span>, <span class="string">&#x27;bill@microsoft&#x27;</span>, <span class="string">&#x27;bill%gates@ms.com&#x27;</span>, <span class="string">&#x27;@voyager.org&#x27;</span>];</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; should_pass.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!re.<span class="title function_">test</span>(should_pass[i])) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;测试失败: &#x27;</span> + should_pass[i]);</span><br><span class="line">        success = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; should_fail.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (re.<span class="title function_">test</span>(should_fail[i])) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;测试失败: &#x27;</span> + should_fail[i]);</span><br><span class="line">        success = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (success) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;测试通过!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">测试成功!</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>版本二可以验证并提取出带名字的Email地址：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> re = <span class="regexp">/^&lt;?([a-zA-Z]+\s?[a-zA-Z]+)&gt;?\s?([a-zA-Z]*@[a-zA-Z]+\.[a-zA-Z]+)$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试:</span></span><br><span class="line"><span class="keyword">var</span> r = re.<span class="title function_">exec</span>(<span class="string">&#x27;&lt;Tom Paris&gt; tom@voyager.org&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> (r === <span class="literal">null</span> || r.<span class="title function_">toString</span>() !== [<span class="string">&#x27;&lt;Tom Paris&gt; tom@voyager.org&#x27;</span>, <span class="string">&#x27;Tom Paris&#x27;</span>, <span class="string">&#x27;tom@voyager.org&#x27;</span>].<span class="title function_">toString</span>()) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;测试失败!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;测试成功!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">测试成功!</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h2 id="json">JSON</h2>
<p>JSON是一种数据交换格式，字符集必须是UTF-8。为了统一解析，JSON的字符串规定必须用双引号<code>""</code>，Object的键也必须用双引号<code>""</code>。</p>
<p>JavaScript内置了JSON的解析，把任何JavaScript对象序列化成一个JSON格式的字符串，才能通过网络传递给其他计算机。</p>
<h3 id="序列化">序列化</h3>
<p>用<code>JSON.stringify()</code>把JavaScript对象序列化成JSON格式的字符串：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person=&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">18</span>,</span><br><span class="line">    <span class="attr">gender</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="attr">height</span>:<span class="number">1.65</span>,</span><br><span class="line">    <span class="attr">grade</span>:<span class="literal">null</span>,</span><br><span class="line">    <span class="string">&#x27;middel-school&#x27;</span>:<span class="string">&#x27;No.1 Middle School&#x27;</span>,</span><br><span class="line">    <span class="attr">skills</span>:[<span class="string">&#x27;JavaScript&#x27;</span>,<span class="string">&#x27;Java&#x27;</span>,<span class="string">&#x27;Python&#x27;</span>,<span class="string">&#x27;Lisp&#x27;</span>]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> s=<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(person);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s);</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">&#123;&quot;name&quot;:&quot;zhangsan&quot;,&quot;age&quot;:18,&quot;gender&quot;:true,&quot;height&quot;:1.65,&quot;grade&quot;:null,&quot;middel-school&quot;:&quot;No.1 Middle School&quot;,&quot;skills&quot;:[&quot;JavaScript&quot;,&quot;Java&quot;,&quot;Python&quot;,&quot;Lisp&quot;]&#125;*/</span></span><br></pre></td></tr></table></figure>
<p><code>JSON.stringify()</code>还可以通过参数来控制按缩进输出</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s=<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(person,<span class="literal">null</span>,<span class="string">&#x27; &#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s);</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment"> &quot;name&quot;: &quot;zhangsan&quot;,</span></span><br><span class="line"><span class="comment"> &quot;age&quot;: 18,</span></span><br><span class="line"><span class="comment"> &quot;gender&quot;: true,</span></span><br><span class="line"><span class="comment"> &quot;height&quot;: 1.65,</span></span><br><span class="line"><span class="comment"> &quot;grade&quot;: null,</span></span><br><span class="line"><span class="comment"> &quot;middel-school&quot;: &quot;No.1 Middle School&quot;,</span></span><br><span class="line"><span class="comment"> &quot;skills&quot;: [</span></span><br><span class="line"><span class="comment">  &quot;JavaScript&quot;,</span></span><br><span class="line"><span class="comment">  &quot;Java&quot;,</span></span><br><span class="line"><span class="comment">  &quot;Python&quot;,</span></span><br><span class="line"><span class="comment">  &quot;Lisp&quot;</span></span><br><span class="line"><span class="comment"> ]</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br></pre></td></tr></table></figure>
<p>其第二个参数用于控制如何筛选对象的键值，如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s=<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(person,[<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;skills&#x27;</span>],<span class="string">&#x27; &#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s);</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment"> &quot;name&quot;: &quot;zhangsan&quot;,</span></span><br><span class="line"><span class="comment"> &quot;skills&quot;: [</span></span><br><span class="line"><span class="comment">  &quot;JavaScript&quot;,</span></span><br><span class="line"><span class="comment">  &quot;Java&quot;,</span></span><br><span class="line"><span class="comment">  &quot;Python&quot;,</span></span><br><span class="line"><span class="comment">  &quot;Lisp&quot;</span></span><br><span class="line"><span class="comment"> ]</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br></pre></td></tr></table></figure>
<p>还可以往第二个参数里传入一个函数，使得对象的每个键值对都会被函数先处理：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">convert</span>(<span class="params">key,value</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> value===<span class="string">&#x27;string&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> value.<span class="title function_">toUpperCase</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> s=<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(person,[<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;skills&#x27;</span>],<span class="string">&#x27; &#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s);</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">E:\node.exe .\test.js</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment"> &quot;name&quot;: &quot;ZHANGSAN&quot;,</span></span><br><span class="line"><span class="comment"> &quot;age&quot;: 18,</span></span><br><span class="line"><span class="comment"> &quot;gender&quot;: true,</span></span><br><span class="line"><span class="comment"> &quot;height&quot;: 1.65,</span></span><br><span class="line"><span class="comment"> &quot;grade&quot;: null,</span></span><br><span class="line"><span class="comment"> &quot;middel-school&quot;: &quot;NO.1 MIDDLE SCHOOL&quot;,</span></span><br><span class="line"><span class="comment"> &quot;skills&quot;: [</span></span><br><span class="line"><span class="comment">  &quot;JAVASCRIPT&quot;,</span></span><br><span class="line"><span class="comment">  &quot;JAVA&quot;,</span></span><br><span class="line"><span class="comment">  &quot;PYTHON&quot;,</span></span><br><span class="line"><span class="comment">  &quot;LISP&quot;</span></span><br><span class="line"><span class="comment"> ]</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br></pre></td></tr></table></figure>
<p>除此之外，还可以给person对象定义一个<code>toJSON()</code>的方法，直接返回序列化数据：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person=&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">18</span>,</span><br><span class="line">    <span class="attr">gender</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="attr">height</span>:<span class="number">1.65</span>,</span><br><span class="line">    <span class="attr">grade</span>:<span class="literal">null</span>,</span><br><span class="line">    <span class="string">&#x27;middel-school&#x27;</span>:<span class="string">&#x27;No.1 Middle School&#x27;</span>,</span><br><span class="line">    <span class="attr">skills</span>:[<span class="string">&#x27;JavaScript&#x27;</span>,<span class="string">&#x27;Java&#x27;</span>,<span class="string">&#x27;Python&#x27;</span>,<span class="string">&#x27;Lisp&#x27;</span>],</span><br><span class="line">    <span class="attr">toJSON</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>&#123;</span><br><span class="line">            <span class="string">&#x27;Name&#x27;</span>:<span class="variable language_">this</span>.<span class="property">name</span>,</span><br><span class="line">            <span class="string">&#x27;Age&#x27;</span>:<span class="variable language_">this</span>.<span class="property">age</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> s=<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(person);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s);</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">&#123;&quot;Name&quot;:&quot;zhangsan&quot;,&quot;Age&quot;:18&#125;*/</span></span><br></pre></td></tr></table></figure>
<h3 id="反序列化">反序列化</h3>
<p>把一个JSON格式的字符串，用<code>JSON.parse()</code>把它变成一个JavaScript对象：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="string">&#x27;[1,2,3,true]&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="string">&#x27;&#123;&quot;name&quot;:&quot;zhangsan&quot;,&quot;age&quot;:14&#125;&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="string">&#x27;true&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="string">&#x27;123.45&#x27;</span>));</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">(4) [1, 2, 3, true]</span></span><br><span class="line"><span class="comment">&#123;name: &#x27;zhangsan&#x27;, age: 14&#125;</span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment">123.45*/</span></span><br></pre></td></tr></table></figure>
<p><code>JSON.parse()</code>还可以接收一个函数，用来转换解析出的属性：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=<span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="string">&#x27;&#123;&quot;name&quot;:&quot;zhangsan&quot;,&quot;age&quot;:14&#125;&#x27;</span>,<span class="keyword">function</span>(<span class="params">key,value</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span> (key===<span class="string">&#x27;name&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> value+<span class="string">&#x27; classmate&#x27;</span>;</span><br><span class="line">    &#125;        </span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj));</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">&#123;&quot;name&quot;:&quot;zhangsan classmate&quot;,&quot;age&quot;:14&#125;*/</span></span><br></pre></td></tr></table></figure>
<h1 id="面向对象编程">面向对象编程</h1>
<p>在JavaScript种不区分类和实例的概念，而是通过原型(prototype)来实现面向对象编程。所谓的继承关系是把对象的原型指向另一个对象。</p>
<p>以下是创建原型继承的一种方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Student</span>=&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;Robot&#x27;</span>,</span><br><span class="line">    <span class="attr">heighe</span>:<span class="number">1.2</span>,</span><br><span class="line">    <span class="attr">run</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>+<span class="string">&#x27; is running...&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createStudent</span>(<span class="params">name</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> s=<span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Student</span>);</span><br><span class="line">    s.<span class="property">name</span>=name;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> zhangsan=<span class="title function_">createStudent</span>(<span class="string">&#x27;ZhangSan&#x27;</span>);</span><br><span class="line">zhangsan.<span class="title function_">run</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(zhangsan.<span class="property">__proto__</span>===<span class="title class_">Student</span>);</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">ZhangSan is running...</span></span><br><span class="line"><span class="comment">true*/</span></span><br></pre></td></tr></table></figure>
<h2 id="创建对象">创建对象</h2>
<p>除了直接用<code>&#123;...&#125;</code>创建一个对象外，JavaScript还可以用构造函数的方法来创建对象：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params">name</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span>=name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">hello</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello, &#x27;</span>+<span class="variable language_">this</span>.<span class="property">name</span>+<span class="string">&#x27;!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用构造函数，返回一个对象</span></span><br><span class="line"><span class="keyword">var</span> zhangsan=<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&#x27;ZhangSan&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(zhangsan.<span class="property">name</span>);</span><br><span class="line">zhangsan.<span class="title function_">hello</span>();</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">ZhangSan</span></span><br><span class="line"><span class="comment">Hello, ZhangSan!*/</span></span><br></pre></td></tr></table></figure>
<p>注意：若不写<code>new</code>，<code>student</code>就是一个普通函数，它返回<code>undefined</code>，若写了<code>new</code>，<code>student</code>就是一个构造函数，它绑定的this指向新创建的对象，并默认返回<code>this</code>。</p>
<p>用<code>new Student()</code>创建的对象还从原型上获得了一个<code>constructor</code>属性，它指向函数<code>Student</code>本身：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(zhangsan.<span class="property">constructor</span>===<span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span>===<span class="title class_">Student</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(zhangsan)===<span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>上述代码主要描述以下关系：</p>
<p><img src="/2022/11/01/%E5%89%8D%E7%AB%AF%E4%B8%89%E4%BB%B6%E5%A5%97%E4%B9%8BJavaScript%EF%BC%88%E4%B8%89%EF%BC%89/1.png"></p>
<p>若要让通过构造函数创建的对象共享一个<code>hello</code>函数，将函数放到这些对象共同的原型<code>Student.prototype</code>上即可：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params">name</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span>=name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">hello</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello, &#x27;</span>+<span class="variable language_">this</span>.<span class="property">name</span>+<span class="string">&#x27;!&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> zhangsan=<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&#x27;ZhangSan&#x27;</span>);</span><br><span class="line">zhangsan.<span class="title function_">hello</span>();</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">Hello, ZhangSan!</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p><strong>构造函数的首字母应当大写，普通函数首字母应当小写。</strong></p>
<p>可以编写一个函数，在内部封装所有的<code>new</code>操作：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createStudent</span>(<span class="params">props</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Student</span>(props||&#123;&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="练习题-2">练习题</h3>
<p>请利用构造函数定义<code>Cat</code>，并让所有的Cat对象有一个<code>name</code>属性，并共享一个方法<code>say()</code>，返回字符串<code>'Hello, xxx!'</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Cat</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span>=name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Cat</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">say</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello, &#x27;</span>+<span class="variable language_">this</span>.<span class="property">name</span>+<span class="string">&#x27;!&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 测试:</span></span><br><span class="line"><span class="keyword">var</span> kitty = <span class="keyword">new</span> <span class="title class_">Cat</span>(<span class="string">&#x27;Kitty&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> doraemon = <span class="keyword">new</span> <span class="title class_">Cat</span>(<span class="string">&#x27;哆啦A梦&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> (kitty &amp;&amp; kitty.<span class="property">name</span> === <span class="string">&#x27;Kitty&#x27;</span></span><br><span class="line">    &amp;&amp; kitty.<span class="property">say</span></span><br><span class="line">    &amp;&amp; <span class="keyword">typeof</span> kitty.<span class="property">say</span> === <span class="string">&#x27;function&#x27;</span></span><br><span class="line">    &amp;&amp; kitty.<span class="title function_">say</span>() === <span class="string">&#x27;Hello, Kitty!&#x27;</span></span><br><span class="line">    &amp;&amp; kitty.<span class="property">say</span> === doraemon.<span class="property">say</span></span><br><span class="line">) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;测试通过!&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;测试失败!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">测试通过!</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h2 id="原型继承">原型继承</h2>
<p>JavaScript的原型继承实现方式为：</p>
<ol type="1">
<li>定义新的构造函数，并在内部用<code>call()</code>调用希望“继承”的构造函数，并绑定<code>this</code>；</li>
<li>借助中间函数<code>F</code>实现原型链继承，最好通过封装的<code>inherits</code>函数完成；</li>
<li>继续在新的构造函数原型上定义新方法。</li>
</ol>
<p>现有一构造函数<code>Student</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Student的构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params">props</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span>=props.<span class="property">name</span>||<span class="string">&#x27;Unnamed&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">hello</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello, &#x27;</span>+<span class="variable language_">this</span>.<span class="property">name</span>+<span class="string">&#x27;!&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Student</code>的原型链如下：</p>
<p><img src="/2022/11/01/%E5%89%8D%E7%AB%AF%E4%B8%89%E4%BB%B6%E5%A5%97%E4%B9%8BJavaScript%EF%BC%88%E4%B8%89%EF%BC%89/1.png"></p>
<p>现在要基于<code>Student</code>扩展出<code>PrimaryStudent</code>。因此先定义新的构造函数<code>PrimaryStudent</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//新构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">PrimaryStudent</span>(<span class="params">props</span>)&#123;</span><br><span class="line">    <span class="title class_">Student</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>.<span class="property">props</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">grade</span>=props.<span class="property">grade</span>||<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>利用空函数<code>F</code>来修改原型链，使得<code>PrimaryStudent</code>指向<code>Student.prototype</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Student的构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params">props</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span>=props.<span class="property">name</span>||<span class="string">&#x27;Unnamed&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">hello</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello, &#x27;</span>+<span class="variable language_">this</span>.<span class="property">name</span>+<span class="string">&#x27;!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//新构造函数PrimaryStudent</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">PrimaryStudent</span>(<span class="params">props</span>)&#123;</span><br><span class="line">    <span class="title class_">Student</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>,props);<span class="comment">//调用Student构造函数，绑定this变量</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">grade</span>=props.<span class="property">grade</span>||<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//空函数F</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">F</span>(<span class="params"></span>)&#123;</span><br><span class="line">&#125;</span><br><span class="line">F.<span class="property"><span class="keyword">prototype</span></span>=<span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span>;<span class="comment">//将F的原型指向Student.prototype</span></span><br><span class="line"><span class="title class_">PrimaryStudent</span>.<span class="property"><span class="keyword">prototype</span></span>=<span class="keyword">new</span> <span class="title function_">F</span>();<span class="comment">//将PrimaryStudent的原型指向一个新的F对象</span></span><br><span class="line"><span class="title class_">PrimaryStudent</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span>=<span class="title class_">PrimaryStudent</span>;<span class="comment">//将PrimaryStudent原型的构造函数指向PrimaryStudent</span></span><br><span class="line"><span class="title class_">PrimaryStudent</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getGrade</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="comment">//在PrimaryStudent原型的构造函数上定义方法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">grade</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> lisi=<span class="keyword">new</span> <span class="title class_">PrimaryStudent</span>(&#123;<span class="comment">//创建lisi</span></span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;lisi&#x27;</span>,</span><br><span class="line">    <span class="attr">grade</span>:<span class="number">3</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(lisi.<span class="property">name</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(lisi.<span class="property">grade</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//验证原型</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(lisi.<span class="property">__proto__</span>===<span class="title class_">PrimaryStudent</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(lisi.<span class="property">__proto__</span>.<span class="property">__proto__</span>===<span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//验证继承关系</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(lisi <span class="keyword">instanceof</span> <span class="title class_">PrimaryStudent</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(lisi <span class="keyword">instanceof</span> <span class="title class_">Student</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">lisi</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>此时的新型原型链如下：</p>
<p><img src="/2022/11/01/%E5%89%8D%E7%AB%AF%E4%B8%89%E4%BB%B6%E5%A5%97%E4%B9%8BJavaScript%EF%BC%88%E4%B8%89%EF%BC%89/2.png"></p>
<p>如果把整个继承动作用一个<code>inherits()</code>函数封装起来，还可以隐藏空函数<code>F</code>的定义，<code>inherits()</code>函数可以复用：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Student的构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params">props</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span>=props.<span class="property">name</span>||<span class="string">&#x27;Unnamed&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">hello</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello, &#x27;</span>+<span class="variable language_">this</span>.<span class="property">name</span>+<span class="string">&#x27;!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//新构造函数PrimaryStudent</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">PrimaryStudent</span>(<span class="params">props</span>)&#123;</span><br><span class="line">    <span class="title class_">Student</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>,props);<span class="comment">//调用Student构造函数，绑定this变量</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">grade</span>=props.<span class="property">grade</span>||<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">inherits</span>(<span class="params">Child,Parent</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> F=<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;;</span><br><span class="line">    F.<span class="property"><span class="keyword">prototype</span></span>=<span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line">    <span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span>=<span class="keyword">new</span> <span class="title function_">F</span>();</span><br><span class="line">    <span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span>=<span class="title class_">Child</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">inherits</span>(<span class="title class_">PrimaryStudent</span>,<span class="title class_">Student</span>);<span class="comment">//实现原型继承链</span></span><br><span class="line"><span class="title class_">PrimaryStudent</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getGrade</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="comment">//绑定其他方法到PrimaryStudent原型</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">grade</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> lisi=<span class="keyword">new</span> <span class="title class_">PrimaryStudent</span>(&#123;<span class="comment">//创建lisi</span></span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;lisi&#x27;</span>,</span><br><span class="line">    <span class="attr">grade</span>:<span class="number">3</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(lisi.<span class="property">name</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(lisi.<span class="property">grade</span>);</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">lisi</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h2 id="class继承">class继承</h2>
<h3 id="class定义">class定义</h3>
<p>ES6中引入了新的关键字<code>class</code>，使类的定义更简单。</p>
<p>用<code>class</code>定义<code>Student</code>类并创建一个对象如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span>=name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">hello</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello, &#x27;</span>+<span class="variable language_">this</span>.<span class="property">name</span>+<span class="string">&#x27;!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> lisi=<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&#x27;Lisi&#x27;</span>);</span><br><span class="line">lisi.<span class="title function_">hello</span>();</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">Hello, Lisi!</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h3 id="原型继承-1">原型继承</h3>
<p>可以通过<code>extends</code>实现原型继承：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span>=name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">hello</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello, &#x27;</span>+<span class="variable language_">this</span>.<span class="property">name</span>+<span class="string">&#x27;!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PrimaryStudent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Student</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name,grade</span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>(name);<span class="comment">//用super调用父类的构造方法</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">grade</span>=grade;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">myGrade</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;I am at grade &#x27;</span>+<span class="variable language_">this</span>.<span class="property">grade</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> lisi=<span class="keyword">new</span> <span class="title class_">PrimaryStudent</span>(<span class="string">&#x27;Lisi&#x27;</span>,<span class="number">3</span>);</span><br><span class="line">lisi.<span class="title function_">hello</span>();</span><br><span class="line">lisi.<span class="title function_">myGrade</span>();</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">Hello, Lisi!</span></span><br><span class="line"><span class="comment">I am at grade 3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>不是所有的浏览器都支持ES6的class，当浏览器不支持时，需要<a href="https://babeljs.io/">Babel</a>这个工具把<code>class</code>代码转换为传统的<code>prototype</code>代码。</p>
<h3 id="练习题-3">练习题</h3>
<p>请利用<code>class</code>重新定义<code>Cat</code>，并让它从已有的<code>Animal</code>继承，然后新增一个方法<code>say()</code>，返回字符串<code>'Hello, xxx!'</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name</span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">say</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Hello, &#x27;</span>+<span class="variable language_">this</span>.<span class="property">name</span>+<span class="string">&#x27;!&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 测试:</span></span><br><span class="line"><span class="keyword">var</span> kitty = <span class="keyword">new</span> <span class="title class_">Cat</span>(<span class="string">&#x27;Kitty&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> doraemon = <span class="keyword">new</span> <span class="title class_">Cat</span>(<span class="string">&#x27;哆啦A梦&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> ((<span class="keyword">new</span> <span class="title class_">Cat</span>(<span class="string">&#x27;x&#x27;</span>) <span class="keyword">instanceof</span> <span class="title class_">Animal</span>)</span><br><span class="line">    &amp;&amp; kitty </span><br><span class="line">    &amp;&amp; kitty.<span class="property">name</span> === <span class="string">&#x27;Kitty&#x27;</span></span><br><span class="line">    &amp;&amp; kitty.<span class="property">say</span></span><br><span class="line">    &amp;&amp; <span class="keyword">typeof</span> kitty.<span class="property">say</span> === <span class="string">&#x27;function&#x27;</span></span><br><span class="line">    &amp;&amp; kitty.<span class="title function_">say</span>() === <span class="string">&#x27;Hello, Kitty!&#x27;</span></span><br><span class="line">    &amp;&amp; kitty.<span class="property">say</span> === doraemon.<span class="property">say</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;测试通过!&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;测试失败!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">测试通过!</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h1 id="浏览器">浏览器</h1>
<p>目前主流的浏览器分为以下几种：</p>
<ul>
<li>IE6-11：国内用的最多的IE浏览器，从IE10开始支持ES6标准</li>
<li>Chrome：Google出品的基于Webkit内核浏览器，由于Chrome一经安装就时刻保持自升级，因此不用管它的版本，最新版肯定支持ES6</li>
<li>Safari：Apple的Mac系统自带的基于Webkit内核浏览器，从OSX 10.7 Lion自带的6.1版本开始支持ES6</li>
<li>Firefox：Mozilla自研的Gecko内核，也是时刻保持自升级。</li>
<li>移动设备上目前IOS和Android两大阵营分别主要使用Apple的Safari和Google的Chrome，两种都是Webkit核心，最新版本均支持ES6</li>
</ul>
<h2 id="浏览器对象">浏览器对象</h2>
<p>JavaScript可以获取浏览器提供的很对对象，并进行操作。</p>
<h3 id="window">window</h3>
<p>window对象不但充当全局作用域，而且表示浏览器窗口。</p>
<p>window对象有<code>innerWidth</code>和<code>innerHeight</code>属性，可以获取浏览器窗口的内部宽度和高度。内部宽高是指出去菜单栏、工具栏、边框等占位元素后，用于显示页面的净宽高。IE&lt;=8版本的浏览器不支持这一特性：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;window inner size: &#x27;</span>+<span class="variable language_">window</span>.<span class="property">innerWidth</span>+<span class="string">&#x27;x&#x27;</span>+<span class="variable language_">window</span>.<span class="property">innerHeight</span>);</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">window inner size: 987x752</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>与之对应的，还有一个<code>outerWidth</code>和<code>outerHeight</code>属性，可以获取浏览器窗口的整个宽高。</p>
<h3 id="navigator">navigator</h3>
<p><code>navigator</code>对象表示浏览器的信息，最常用的属性包括：</p>
<ul>
<li>navigator.appName：浏览器名称</li>
<li>navigator.appVersion：浏览器版本</li>
<li>navigator.language：浏览器设置的语言</li>
<li>navigator.platform：操作系统类型</li>
<li>navigator.userAgent：浏览器设定的<code>user-Agent</code>字符串</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;appName=&#x27;</span>+navigator.<span class="property">appName</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;appVersion=&#x27;</span>+navigator.<span class="property">appVersion</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;language=&#x27;</span>+navigator.<span class="property">language</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;platform=&#x27;</span>+navigator.<span class="property">platform</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;userAgent=&#x27;</span>+navigator.<span class="property">userAgrnt</span>);</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">appName=Netscape</span></span><br><span class="line"><span class="comment">Users/Administrator/Desktop/test.js:1</span></span><br><span class="line"><span class="comment">appVersion=5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36 Edg/107.0.1418.26</span></span><br><span class="line"><span class="comment">Users/Administrator/Desktop/test.js:2</span></span><br><span class="line"><span class="comment">language=zh-CN</span></span><br><span class="line"><span class="comment">Users/Administrator/Desktop/test.js:3</span></span><br><span class="line"><span class="comment">platform=Win32</span></span><br><span class="line"><span class="comment">Users/Administrator/Desktop/test.js:4</span></span><br><span class="line"><span class="comment">userAgent=undefined</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>注意，由于navigator的信息很容易被用户修改，所以常用JavaScript对不存在属性返回unfinded的特性，计算浏览器的信息是否又被改动：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> width=<span class="variable language_">window</span>.<span class="property">innerWith</span>||<span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">clientWidth</span>;</span><br></pre></td></tr></table></figure>
<h3 id="screen">screen</h3>
<p>screen对象表示屏幕的信息，常用的属性有：</p>
<ul>
<li>screen.width：屏幕宽度，以像素为单位</li>
<li>screen.height：屏幕高度，以像素为单位</li>
<li>sreen.colorDepth：返回颜色位数，如8、16、24</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Screen size=&#x27;</span>+screen.<span class="property">width</span>+<span class="string">&#x27;x&#x27;</span>+screen.<span class="property">height</span>);</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">Screen size=1440x900</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h3 id="location">location</h3>
<p>location对象表示当前页面的URL信息。一个完整的URL可以用<code>location.href</code>获取。要获取URL各部分的值，可以这么写：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//如URL：http://www.example.com:8080/path/index.html?a=1&amp;b=2#TOP</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">protocol</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">host</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">post</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">pathname</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">search</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">hash</span>);</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">http</span></span><br><span class="line"><span class="comment">www.example.com</span></span><br><span class="line"><span class="comment">8080</span></span><br><span class="line"><span class="comment">/path/index.html</span></span><br><span class="line"><span class="comment">a=1&amp;b=2</span></span><br><span class="line"><span class="comment">TOP</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>要加载一个新页面，可以调用<code>location.assign()</code>方法，要重新加载当前页面，可以调用<code>location.reload()</code>方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="title function_">confirm</span>(<span class="string">&#x27;要重新加载当前页&#x27;</span>+location.<span class="property">href</span>+<span class="string">&#x27;?&#x27;</span>))&#123;</span><br><span class="line">    location.<span class="title function_">reload</span>();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    location.<span class="title function_">assign</span>(<span class="string">&#x27;/&#x27;</span>);<span class="comment">//设置一个新的URL地址</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="document">document</h3>
<p>document对象表示当前页面。由于HTML在浏览器中以DOM形式表示为树形结构，document对象就是整个DOM树的根节点。</p>
<p>document的title属性是从HTML文档中的<code>&lt;title&gt;...&lt;/title&gt;</code>读取的，但其也可以动态改变：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">title</span>=<span class="string">&#x27;helloJavaScript!&#x27;</span>;<span class="comment">//修改浏览器窗口标题</span></span><br></pre></td></tr></table></figure>
<p>若要查找DOM树的某个节点，需要从document对象开始查找。最常用的方法是根据ID和Tag Name。</p>
<p>有一HTML数据如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span> <span class="attr">id</span>=<span class="string">&quot;drink-menu&quot;</span> <span class="attr">style</span>=<span class="string">&quot;border:solid 1px #ccc;padding:6px;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>摩卡<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>热摩卡咖啡<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>酸奶<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>北京老酸奶<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>果汁<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>鲜榨苹果汁<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>用document对象提供的<code>getElementById()</code>和<code>getElementsByTagName()</code>可以按ID获得一个DOM节点和按Tag名称获得一组DOM节点：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> menu=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;drink-menu&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> drinks=<span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;dt&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> i,s;</span><br><span class="line">s=<span class="string">&#x27;提供的饮料有：&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;drinks.<span class="property">length</span>;i++)&#123;</span><br><span class="line">    s=s+drinks[i].<span class="property">innerHTNL</span>+<span class="string">&#x27;,&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s);</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">提供的饮料有:摩卡,酸奶,果汁,</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>document对象还有一个<code>cookie</code>属性，可以获取当前页面的Cookie：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="property">cookie</span>);</span><br></pre></td></tr></table></figure>
<p>由于JavaScript能读到页面的Cookie，而用户的登录信息通常也存在Cookie中，且HTML页面中允许引入第三方的JavaScript代码。为了防止第三方的JavaScript直接能获取网站的用户登录信息，<strong>服务器在设置Cookie时可以使用<code>httpOnly</code>，以防止被JavaScript读取。</strong>IE浏览器从IE6 SP1开始支持。</p>
<h3 id="history">history</h3>
<p>history对象保持了浏览器的历史记录，JavaScript可以调用history对象的<code>back()</code>或<code>forward()</code>，相当于用户点击了浏览器的后退或前进按钮。<strong>在任何情况都不应该使用history这个对象。</strong></p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>前端三件套之JavaScript（二）</title>
    <url>/2022/10/31/%E5%89%8D%E7%AB%AF%E4%B8%89%E4%BB%B6%E5%A5%97%E4%B9%8BJavaScript%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h1 id="函数">函数</h1>
<h2 id="函数定义和调用">函数定义和调用</h2>
<h3 id="定义函数">定义函数</h3>
<p>在JavaScript中，定义函数的方式如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">abs</span>(<span class="params">x</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">     <span class="keyword">return</span> -x;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>函数内的语句执行到return语句时，函数便执行完毕了。若没有return语句，函数执行完毕后会返回undefined。</p>
<p>由于函数也是一个对象，因此上述定义的<code>abs()</code>函数实际上是一个函数对象，因此，第二种定义函数的方式如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> abs=<span class="keyword">function</span>(<span class="params">x</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>这两种定义完全等价，注意第二种方式函数体末尾要加上一个分号<code>;</code>，表示赋值语句结束。</p>
<h3 id="调用函数">调用函数</h3>
<p>调用函数时，需要按顺序传入参数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">abs</span>(<span class="number">18</span>);</span><br><span class="line"><span class="title function_">abs</span>(-<span class="number">231</span>);</span><br></pre></td></tr></table></figure>
<p>由于JavaScript允许传入任意个参数而不影响调用，因此传入的参数比定义的参数多也不会报错：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">abs</span>(<span class="number">12</span>,<span class="string">&#x27;sdada&#x27;</span>);<span class="comment">//返回12</span></span><br><span class="line"><span class="title function_">abs</span>(-<span class="number">123</span>,<span class="string">&#x27;asd&#x27;</span>,<span class="string">&#x27;asd&#x27;</span>,<span class="literal">null</span>);<span class="comment">//返回123</span></span><br></pre></td></tr></table></figure>
<p>传入的参数比定义的少也不会报错：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">abs</span>();<span class="comment">//abs()收到参数undefined，返回NaN</span></span><br></pre></td></tr></table></figure>
<p>若要避免收到undefined，可以对参数进行检查：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">abs</span>(<span class="params">x</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> x!==<span class="string">&#x27;number&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="string">&#x27;Not a number&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="arguments">arguments</h3>
<p>arguments只在函数内部起作用，并且永远指向当前函数的调用者所传入的所有参数。arguments类似于Array但不是一个Array。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">x</span>)&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;x=&#x27;</span>+x);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="variable language_">arguments</span>.<span class="property">length</span>;i++)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;arg&#x27;</span>+i+<span class="string">&#x27;=&#x27;</span>+<span class="variable language_">arguments</span>[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>(<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>);</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">x=10</span></span><br><span class="line"><span class="comment">arg0=10</span></span><br><span class="line"><span class="comment">arg1=20</span></span><br><span class="line"><span class="comment">arg2=30</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>利用arguments可以获得调用者传入的所有参数，即使函数不定义任何参数值，可还是能拿到参数的值：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">abs</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">arguments</span>.<span class="property">length</span>===<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> x=<span class="variable language_">arguments</span>[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">return</span> x&gt;=<span class="number">0</span>?<span class="attr">x</span>:-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">abs</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">abs</span>(<span class="number">12</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">abs</span>(-<span class="number">12</span>));</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">0</span></span><br><span class="line"><span class="comment">12</span></span><br><span class="line"><span class="comment">12</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>arguments常用于判断传入参数的个数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//foo(a,[,b],c)接收2~3个参数，b是可选参数。若只传入2个参数，b默认为bull</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">a,b,c</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">arguments</span>.<span class="property">length</span>===<span class="number">2</span>)&#123;</span><br><span class="line">        c=b;</span><br><span class="line">        b=<span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="rest参数">rest参数</h3>
<p>ES6标准引入了rest参数以帮助获得除了已定义参数之外的参数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">a,b,...rest</span>)&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a=&#x27;</span>+a);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;b=&#x27;</span>+b);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(rest);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line"><span class="title function_">foo</span>(<span class="number">1</span>);</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">a=1</span></span><br><span class="line"><span class="comment">b=2</span></span><br><span class="line"><span class="comment">(3) [3, 4, 5]</span></span><br><span class="line"><span class="comment">a=1</span></span><br><span class="line"><span class="comment">b=undefined</span></span><br><span class="line"><span class="comment">(0) []</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>rest参数只能写在最后，前面用<code>...</code>标识。若传入的参数少于定义参数，rest参数会接收一个空数组。</p>
<p>由于rest参数是ES6新标准，因此需要测试浏览器是否支持。请用rest参数编写的一个<code>sum()</code>函数，接收任意个参数并返回它们的和。</p>
<p>代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">...rest</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(rest.<span class="property">length</span>===<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;rest.<span class="property">length</span>;i++)&#123;</span><br><span class="line">        sum=sum+rest[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 测试:</span></span><br><span class="line"><span class="keyword">var</span> i, args = [];</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;=<span class="number">100</span>; i++) &#123;</span><br><span class="line">    args.<span class="title function_">push</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_">sum</span>() !== <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;测试失败: sum() = &#x27;</span> + <span class="title function_">sum</span>());</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">sum</span>(<span class="number">1</span>) !== <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;测试失败: sum(1) = &#x27;</span> + <span class="title function_">sum</span>(<span class="number">1</span>));</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">sum</span>(<span class="number">2</span>, <span class="number">3</span>) !== <span class="number">5</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;测试失败: sum(2, 3) = &#x27;</span> + <span class="title function_">sum</span>(<span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum.<span class="title function_">apply</span>(<span class="literal">null</span>, args) !== <span class="number">5050</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;测试失败: sum(1, 2, 3, ..., 100) = &#x27;</span> + sum.<span class="title function_">apply</span>(<span class="literal">null</span>, args));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;测试通过!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">测试通过!</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>JavaScript引擎有一个再行末自动添加分号的机制，因此要注意return语句不要轻易换行。若要换行写，可以写成以下形式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;foo&#x27;</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="练习题">练习题</h3>
<p>定义一个计算圆面积的函数<code>area_of_circle()</code>，它有两个参数：</p>
<ul>
<li>r: 表示圆的半径；</li>
<li>pi: 表示π的值，如果不传，则默认3.14</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">area_of_circle</span>(<span class="params">r, pi</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">arguments</span>.<span class="property">length</span>===<span class="number">1</span>)&#123;</span><br><span class="line">        pi=<span class="number">3.14</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pi*r*r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 测试:</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_">area_of_circle</span>(<span class="number">2</span>) === <span class="number">12.56</span> &amp;&amp; <span class="title function_">area_of_circle</span>(<span class="number">2</span>, <span class="number">3.1416</span>) === <span class="number">12.5664</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;测试通过&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;测试失败&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">测试通过</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>小明是一个JavaScript新手，他写了一个<code>max()</code>函数，返回两个数中较大的那个。但是小明抱怨他的浏览器出问题了，无论传入什么数，<code>max()</code>函数总是返回<code>undefined</code>。请帮他指出问题并修复：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">max</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (a &gt; b) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">                a;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">                b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">max</span>(<span class="number">15</span>, <span class="number">20</span>));</span><br></pre></td></tr></table></figure>
<p>修复后的代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">max</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (a &gt; b) &#123;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">max</span>(<span class="number">15</span>, <span class="number">20</span>));</span><br></pre></td></tr></table></figure>
<h2 id="变量作用域与解构赋值">变量作用域与解构赋值</h2>
<p>若一个变量再函数体内部声明，则该变量的作用域为整个函数体，在函数体外不可引用该变量。</p>
<p>若两个不同的函数各自声明了同一个变量，则该变量只在各自的函数体内其作用。</p>
<p>由于JavaScript的函数可以嵌套，此时内部函数可以访问外部函数定义的变量，而外部函数无法访问内部函数定义的变量。</p>
<p>若内部函数和外部函数的变量名重名时，内部函数的变量将忽略外部函数的变量。</p>
<h3 id="变量提升">变量提升</h3>
<p>JavaScript的函数定义有个特点，它会先扫描整个函数体的语句，把所有声明的变量“提升”到函数顶部。只提升变量的声明，不会提升变量的赋值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> x=<span class="string">&#x27;Hello，&#x27;</span>+y;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br><span class="line">    <span class="keyword">var</span> y=<span class="string">&#x27;Bob&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>();</span><br><span class="line"><span class="comment">//等同于</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> y;</span><br><span class="line">    <span class="keyword">var</span> x=<span class="string">&#x27;Hello，&#x27;</span>+y;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br><span class="line">    <span class="keyword">var</span> y=<span class="string">&#x27;Bob&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">Hello,undefined</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>因此，为了防止不必要的错误，在函数内部定义变量时，首先声明所有变量。</p>
<h3 id="全局作用域">全局作用域</h3>
<p>不在任何函数内的变量便处于全局作用域中。JavaScript默认有一个全局对象<code>window</code>，全局作用域的百年来实际上被绑定到<code>window</code>属性中。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="string">&#x27;asd&#x27;</span>;</span><br><span class="line"><span class="title function_">alert</span>(a);<span class="comment">//弹出asd弹窗</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="variable language_">window</span>.<span class="property">a</span>);<span class="comment">//弹出asd弹窗</span></span><br></pre></td></tr></table></figure>
<p>由于函数定义有两种方式，以变量形式定义的函数<code>var foo=function()&#123;&#125;</code>也是一个全局变量。此时函数的定义也被视为一个全局变量，并绑定到window对象中。alert函数也是window的一个变量。</p>
<h3 id="名字空间">名字空间</h3>
<p>全局变量会绑定到window上，不同的JavaScript文件若使用了相同的全局变量，或定义了相同名字的顶层函数，就会造成命名冲突，且这种错误很难被发现。</p>
<p>减少冲突的方法就是把自己的所有变量和函数全部绑定到一个全局变量中，即把代码全部放入唯一的名字空间中<code>MYAPP</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//唯一的全局变量</span></span><br><span class="line"><span class="keyword">var</span> <span class="variable constant_">MYAPP</span>=&#123;&#125;;</span><br><span class="line"><span class="comment">//其他变量</span></span><br><span class="line"><span class="variable constant_">MYAPP</span>.<span class="property">name</span>=<span class="string">&#x27;myapp&#x27;</span>;</span><br><span class="line"><span class="variable constant_">MYAPP</span>.<span class="property">version</span>=<span class="number">1.0</span>;</span><br><span class="line"><span class="comment">//其他函数</span></span><br><span class="line"><span class="variable constant_">MYAPP</span>.<span class="property">foo</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;foo&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="局部作用域">局部作用域</h3>
<p>由于JavaScript的变量作用域实际上是函数内部，故for循环等语句块是无法定义具有局部作用域的变量的。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line">    i+=<span class="number">100</span><span class="comment">//仍然可以引用变量i</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ES6引入了<code>let</code>关键字，用<code>let</code>替代<code>var</code>可以声明一个块级作用域的变量：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">       sum=sum+i;</span><br><span class="line">    &#125;</span><br><span class="line">    i+=<span class="number">100</span><span class="comment">//报错ReferenceError: i is not defined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="常量">常量</h3>
<p>由于<code>var</code>和<code>let</code>声明的是变量，在ES6后，若要声明一个常量，可以通过关键字<code>const</code>来定义，常量名要全部大写。<code>const</code>于<code>let</code>都具有块级作用域：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">PI</span>=<span class="number">3.14</span>;</span><br><span class="line"><span class="variable constant_">PI</span>=<span class="number">3</span>;<span class="comment">//报错TypeError: Assignment to constant variable.，某些浏览器不报错，但是无效果</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">PI</span>);</span><br></pre></td></tr></table></figure>
<h3 id="解构赋值">解构赋值</h3>
<p>在ES6中，可以使用解构赋值来直接对多个变量同时赋值：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span>[x,y,z]=[<span class="string">&#x27;hello&#x27;</span>,<span class="string">&#x27;JavaScript&#x27;</span>,<span class="string">&#x27;ES6&#x27;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;x=&#x27;</span>+x+<span class="string">&#x27;, y=&#x27;</span>+y+<span class="string">&#x27;, z= &#x27;</span>+z);</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">x=hello, y=JavaScript, z= ES6</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>对数组元素进行结构赋值时，多个变量要用<code>[]</code>括起来。</p>
<p>若数组本身还有嵌套，也可以通过下面的形式进行解构赋值，嵌套层次和位置要保持一致：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [x,[y,z]]=[<span class="string">&#x27;hello&#x27;</span>,[<span class="string">&#x27;JavaScript&#x27;</span>,<span class="string">&#x27;ES6&#x27;</span>]];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;x=&#x27;</span>+x+<span class="string">&#x27;, y=&#x27;</span>+y+<span class="string">&#x27;, z= &#x27;</span>+z);</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">x=hello, y=JavaScript, z= ES6</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>解构赋值还可以忽略某些元素：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [,,z]=[<span class="string">&#x27;hello&#x27;</span>,<span class="string">&#x27;JavaScript&#x27;</span>,<span class="string">&#x27;ES6&#x27;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;z=&#x27;</span>+z);</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">z=ES6</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>若要从一个对象中取出若干属性，也可以使用解构赋值，便于快速获取对象的指定属性：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person=&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">13</span>,</span><br><span class="line">    <span class="attr">gender</span>:<span class="string">&#x27;male&#x27;</span>,</span><br><span class="line">    <span class="attr">passport</span>:<span class="string">&#x27;G-12345678&#x27;</span>,</span><br><span class="line">    <span class="attr">school</span>:<span class="string">&#x27;No.1 middle school&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span>&#123;name,age,passport&#125;=person;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;name=&#x27;</span>+name+<span class="string">&#x27;, age=&#x27;</span>+age+<span class="string">&#x27;, passport&#x27;</span>+passport);</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">name=zhangsan, age=13, passportG-12345678</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>对一个对象进行解构赋值时，同样可以直接对嵌套的对象属性进行赋值，主要要保证对应的层次一致：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person=&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">13</span>,</span><br><span class="line">    <span class="attr">gender</span>:<span class="string">&#x27;male&#x27;</span>,</span><br><span class="line">    <span class="attr">passport</span>:<span class="string">&#x27;G-12345678&#x27;</span>,</span><br><span class="line">    <span class="attr">school</span>:<span class="string">&#x27;No.1 middle school&#x27;</span>,</span><br><span class="line">    <span class="attr">address</span>:&#123;</span><br><span class="line">        <span class="attr">city</span>:<span class="string">&#x27;Beijing&#x27;</span>,</span><br><span class="line">        <span class="attr">street</span>:<span class="string">&#x27;No.1 Road&#x27;</span>,</span><br><span class="line">        <span class="attr">zipcode</span>:<span class="string">&#x27;100001&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span>&#123;name,<span class="attr">address</span>:&#123;city,zip,zipcode&#125;&#125;=person;<span class="comment">//person中没有zip属性，故其值为undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;name=&#x27;</span>+name+<span class="string">&#x27;, city=&#x27;</span>+city+<span class="string">&#x27;, zip=&#x27;</span>+zip+<span class="string">&#x27;, zipcode=&#x27;</span>+zipcode);</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">name=zhangsan, city=Beijing, zip=undefined, zipcode=100001</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>使用解构赋值对对象属性进行赋值时，若对应的属性不存在，变量将被赋值为<code>undefined</code>，若要使用的变量名和属性名不一致，可以用下面的语法获取：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person=&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">13</span>,</span><br><span class="line">    <span class="attr">gender</span>:<span class="string">&#x27;male&#x27;</span>,</span><br><span class="line">    <span class="attr">passport</span>:<span class="string">&#x27;G-12345678&#x27;</span>,</span><br><span class="line">    <span class="attr">school</span>:<span class="string">&#x27;No.1 middle school&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span>&#123;name,<span class="attr">passport</span>:id&#125;=person;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;name=&#x27;</span>+name+<span class="string">&#x27;, id=&#x27;</span>+id);</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">name=zhangsan, id=G-12345678</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>解构赋值还可以使用默认值，这样避免了不存在的属性返回<code>undefined</code>值：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person=&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">13</span>,</span><br><span class="line">    <span class="attr">gender</span>:<span class="string">&#x27;male&#x27;</span>,</span><br><span class="line">    <span class="attr">passport</span>:<span class="string">&#x27;G-12345678&#x27;</span>,</span><br><span class="line">    <span class="attr">school</span>:<span class="string">&#x27;No.1 middle school&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span>&#123;name,single=<span class="literal">true</span>&#125;=person;<span class="comment">//若person对象没有single属性，则默认返回true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;name=&#x27;</span>+name+<span class="string">&#x27;, single=&#x27;</span>+single);</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">name=zhangsan, single=true</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>若变量已经被声明了，再次赋值时，正确的写法也会报语法错误：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x,y;</span><br><span class="line">&#123;x,y&#125;=&#123;<span class="attr">name</span>:<span class="string">&#x27;zhangsan&#x27;</span>,<span class="attr">x</span>:<span class="number">10</span>,<span class="attr">y</span>:<span class="number">200</span>&#125;;<span class="comment">//报错SyntaxError: Unexpected token &#x27;=&#x27;</span></span><br><span class="line"><span class="comment">// (&#123;x,y&#125;=&#123;name:&#x27;zhangsan&#x27;,x:10,y:200&#125;);//返回x=10, y=200</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;x=&#x27;</span>+x+<span class="string">&#x27;, y=&#x27;</span>+y);</span><br></pre></td></tr></table></figure>
<h4 id="使用场景">使用场景</h4>
<p>解构赋值在很多时候可以简化代码，如：无需临时变量交换两个变量的值：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x=<span class="number">1</span>,y=<span class="number">2</span>;</span><br><span class="line">[x,y]=[y,x];</span><br></pre></td></tr></table></figure>
<p>快速获取当前页面的域名和路径：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span>&#123;<span class="attr">hostname</span>:domain,<span class="attr">pathname</span>:path&#125;=location;</span><br></pre></td></tr></table></figure>
<p>若一个函数接收一个对象作为参数，那么使用解构直接把对象的属性绑定到变量中，如快速创建一个Date对象：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">buildDate</span>(<span class="params">&#123;year,month,dat,hour=<span class="number">0</span>,minute=<span class="number">0</span>,second=<span class="number">0</span>&#125;</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Date</span>(year+<span class="string">&#x27;-&#x27;</span>+month+<span class="string">&#x27;-&#x27;</span>+day+<span class="string">&#x27; &#x27;</span>+hour+<span class="string">&#x27;:&#x27;</span>+minute+<span class="string">&#x27;:&#x27;</span>+second);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>目前支持解构赋值的浏览器包括Chrome、Firefox、Edge等。</p>
<h2 id="方法">方法</h2>
<p>在一个对象中绑定函数，称为这个对象的方法。在javaScript中，对象的定义为</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person=&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">    <span class="attr">birth</span>:<span class="number">1999</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> y=<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getFullYear</span>();</span><br><span class="line">        <span class="keyword">return</span> y-<span class="variable language_">this</span>.<span class="property">birth</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="title function_">age</span>());</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">23*/</span></span><br></pre></td></tr></table></figure>
<p>这里的<code>age()</code>函数便是一个方法，在方法内部，<code>this</code>是一个特殊变量，它始终指向当前对象。若是单独调用函数，在函数内调用this，this指向全局变量。要保证this指向正确，必须用<code>obj.xxx()</code>的形式调用。</p>
<p>在strict模式下，函数的this指向undefined，在非strict模式下，函数的this指向全局对象window。</p>
<p>若要将方法重构，为了避免出错可先用that变量捕获this：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person=&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">    <span class="attr">birth</span>:<span class="number">1999</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> that=<span class="variable language_">this</span>;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">getAgeFromBirth</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> y=<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getFullYear</span>();</span><br><span class="line">        	<span class="keyword">return</span> y-that.<span class="property">birth</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">getAgeFromBirth</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="title function_">age</span>());</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">23*/</span></span><br></pre></td></tr></table></figure>
<h3 id="apply">apply</h3>
<p>若要指定函数的this指向哪个对象，可以用函数本身的<code>apply</code>方法。它接收两个参数，第一个参数是需要绑定的this变量，第二个参数是Array，表示函数本身的参数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getAge</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> y=<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getFullYear</span>();</span><br><span class="line">    <span class="keyword">return</span> y-<span class="variable language_">this</span>.<span class="property">birth</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person=&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">    <span class="attr">birth</span>:<span class="number">1999</span>,</span><br><span class="line">    <span class="attr">age</span>:getAge</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="title function_">age</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getAge</span>());<span class="comment">//单独调用getAge，this指向window</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(getAge.<span class="title function_">apply</span>(person,[]));<span class="comment">//apply将this指向person</span></span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">23</span></span><br><span class="line"><span class="comment">NaN</span></span><br><span class="line"><span class="comment">23*/</span></span><br></pre></td></tr></table></figure>
<p>另一个与<code>apply()</code>类似的方法是<code>call()</code>，两者之间的唯一区别是：</p>
<ul>
<li><code>apply()</code>把参数打包成Array后再传入</li>
<li><code>call()</code>把参数按顺序传入</li>
</ul>
<p>如要调用<code>Math.max(3,5,4)</code>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="property">max</span>.<span class="title function_">apply</span>(<span class="literal">null</span>,[<span class="number">3</span>,<span class="number">5</span>,<span class="number">4</span>]));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="property">max</span>.<span class="title function_">call</span>(<span class="literal">null</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">4</span>));</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">5*/</span></span><br></pre></td></tr></table></figure>
<h3 id="装饰器">装饰器</h3>
<p>利用<code>apply()</code>可以动态改变函数的行为。即使是JavaScript的内置函数，也可以重新指向新的函数。如要统计代码调用了多少次<code>parseInt()</code>，可以将系统默认的<code>parseInt()</code>替换为新的可以统计多少次调用的<code>parseInt()</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> count=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> oldParseInt=<span class="built_in">parseInt</span>;<span class="comment">//保存原函数</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">parseInt</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    count+=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> oldParseInt.<span class="title function_">apply</span>(<span class="literal">null</span>,<span class="variable language_">arguments</span>);<span class="comment">//调用原函数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 测试:</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;10&#x27;</span>);</span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;20&#x27;</span>);</span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;30&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;count = &#x27;</span> + count); </span><br><span class="line"><span class="comment">/*在浏览器中的运行结果如下：</span></span><br><span class="line"><span class="comment">count = 3*/</span></span><br></pre></td></tr></table></figure>
<h2 id="高阶函数">高阶函数</h2>
<p>接收另一个函数作为参数的函数，称为高阶函数。</p>
<h3 id="mapreduce">map/reduce</h3>
<h4 id="map">map</h4>
<p>若要将函数 <span class="math display">\[
f(x)=x^2
\]</span> 作用在数组[1,2,3,4,5,6,7,8,9]上，可用map实现：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">pow</span>(<span class="params">x</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> x*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>];</span><br><span class="line"><span class="keyword">var</span> results=arr.<span class="title function_">map</span>(pow);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(results);</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">(9) [1, 4, 9, 16, 25, 36, 49, 64, 81]*/</span></span><br></pre></td></tr></table></figure>
<p><code>map()</code>传入的参数是函数对象本身。</p>
<p>用map，只需两行代码便可以把Array的所有数组转换为字符串：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">map</span>(<span class="title class_">String</span>))</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">(9) [&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;, &#x27;5&#x27;, &#x27;6&#x27;, &#x27;7&#x27;, &#x27;8&#x27;, &#x27;9&#x27;]*/</span></span><br></pre></td></tr></table></figure>
<h4 id="reduce">reduce</h4>
<p>Array的<code>reduce()</code>把函数作用在Array的<code>[x1,x2,x3...]</code>上，<code>reduce()</code>接收两个参数，<code>reduce()</code>把结果继续和序列的下一个元素做累计运算，即<code>[x1,x2,x3].reduce(f)=f(f(x1,x2),x3)</code></p>
<p>对于一个Array求和，可以用<code>reduce</code>实现：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">reduce</span>(<span class="keyword">function</span>(<span class="params">x,y</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> x+y;</span><br><span class="line">&#125;));</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">25*/</span></span><br></pre></td></tr></table></figure>
<p>利用<code>reduce()</code>也可以把<code>[1,3,5,7,9]</code>变换成整数13579：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">reduce</span>(<span class="keyword">function</span>(<span class="params">x,y</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> x*<span class="number">10</span>+y;</span><br><span class="line">&#125;));</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">13579*/</span></span><br></pre></td></tr></table></figure>
<h4 id="练习题-1">练习题</h4>
<p>利用<code>reduce()</code>求积：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">product</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> arr.<span class="title function_">reduce</span>(<span class="keyword">function</span>(<span class="params">x,y</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> x*y;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 测试:</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_">product</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]) === <span class="number">24</span> &amp;&amp; <span class="title function_">product</span>([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]) === <span class="number">0</span> &amp;&amp; <span class="title function_">product</span>([<span class="number">99</span>, <span class="number">88</span>, <span class="number">77</span>, <span class="number">66</span>]) === <span class="number">44274384</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;测试通过!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;测试失败!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">测试通过!*/</span></span><br></pre></td></tr></table></figure>
<p>不要使用JavaScript内置的<code>parseInt()</code>函数，利用map和reduce操作实现一个<code>string2int()</code>函数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">string2int</span>(<span class="params">s</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> arr=[];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">of</span> s)&#123;</span><br><span class="line">        arr.<span class="title function_">push</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr.<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">x</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> x*<span class="number">1</span>;</span><br><span class="line">    &#125;).<span class="title function_">reduce</span>(<span class="keyword">function</span>(<span class="params">x,y</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> x*<span class="number">10</span>+y;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 测试:</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_">string2int</span>(<span class="string">&#x27;0&#x27;</span>) === <span class="number">0</span> &amp;&amp; <span class="title function_">string2int</span>(<span class="string">&#x27;12345&#x27;</span>) === <span class="number">12345</span> &amp;&amp; <span class="title function_">string2int</span>(<span class="string">&#x27;12300&#x27;</span>) === <span class="number">12300</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (string2int.<span class="title function_">toString</span>().<span class="title function_">indexOf</span>(<span class="string">&#x27;parseInt&#x27;</span>) !== -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请勿使用parseInt()!&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (string2int.<span class="title function_">toString</span>().<span class="title function_">indexOf</span>(<span class="string">&#x27;Number&#x27;</span>) !== -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请勿使用Number()!&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;测试通过!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;测试失败!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">测试通过!*/</span></span><br></pre></td></tr></table></figure>
<p>请把用户输入的不规范的英文名字，变为首字母大写，其他小写的规范名字。输入：<code>['adam', 'LISA', 'barT']</code>，输出：<code>['Adam', 'Lisa', 'Bart']</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">normalize</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> arr.<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">x</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> x.<span class="title function_">slice</span>(<span class="number">0</span>,<span class="number">1</span>).<span class="title function_">toUpperCase</span>()+x.<span class="title function_">slice</span>(<span class="number">1</span>).<span class="title function_">toLowerCase</span>();</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 测试:</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_">normalize</span>([<span class="string">&#x27;adam&#x27;</span>, <span class="string">&#x27;LISA&#x27;</span>, <span class="string">&#x27;barT&#x27;</span>]).<span class="title function_">toString</span>() === [<span class="string">&#x27;Adam&#x27;</span>, <span class="string">&#x27;Lisa&#x27;</span>, <span class="string">&#x27;Bart&#x27;</span>].<span class="title function_">toString</span>()) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;测试通过!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">normalize</span>([<span class="string">&#x27;adam&#x27;</span>, <span class="string">&#x27;LISA&#x27;</span>, <span class="string">&#x27;barT&#x27;</span>]));</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;测试失败!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">测试通过!*/</span></span><br></pre></td></tr></table></figure>
<p>小明希望利用<code>map()</code>把字符串变成整数，他写的代码很简洁：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> r;</span><br><span class="line">r = arr.<span class="title function_">map</span>(<span class="built_in">parseInt</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(r);</span><br></pre></td></tr></table></figure>
<p>结果竟然是<code>1, NaN, NaN</code>，小明百思不得其解，请帮他找到原因并修正代码。</p>
<p>修正代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> r=[];</span><br><span class="line">r = arr.<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">x</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">parseInt</span>(x);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(r);</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">(3)[1, 2, 3]*/</span></span><br></pre></td></tr></table></figure>
<h3 id="filter">filter</h3>
<p>filter用于过滤Array中的某些元素，返回剩下的元素，filter也只接收一个函数，filter把传入的函数依次作用于每个元素，然后根据返回值True or False来决定保留还是丢弃该元素。</p>
<p>如在一个Array中，删掉偶数，只保留奇数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">15</span>];</span><br><span class="line"><span class="keyword">var</span> r=arr.<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">x</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> x%<span class="number">2</span>!=<span class="number">0</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(r);</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">(4) [1, 5, 9, 15]*/</span></span><br></pre></td></tr></table></figure>
<p>把一个Array中的空字符串删掉：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="literal">null</span>,<span class="literal">undefined</span>,<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27; &#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> r=arr.<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">s</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> s&amp;&amp;s.<span class="title function_">trim</span>();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(r);</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">(3) [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;]*/</span></span><br></pre></td></tr></table></figure>
<h4 id="回调函数">回调函数</h4>
<p><code>filter()</code>接收的回调函数，可以有多个参数。通常仅使用第一个参数来表示Array的某个元素。回调函数还可以接收另外两个参数来表示元素的位置和数组本身：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> r=arr.<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">element,index,self</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(element);<span class="comment">//依次打印&#x27;A&#x27;,&#x27;B&#x27;,&#x27;C&#x27;]</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(index);<span class="comment">//依次打印0,1,2</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(self);<span class="comment">//打印变量arr</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">A</span></span><br><span class="line"><span class="comment">0</span></span><br><span class="line"><span class="comment">(3) [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;]</span></span><br><span class="line"><span class="comment">B</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">(3) [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;]</span></span><br><span class="line"><span class="comment">C</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">(3) [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;]*/</span></span><br></pre></td></tr></table></figure>
<p>利用<code>filter()</code>可以去除Array的重复元素：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> r;</span><br><span class="line"><span class="keyword">var</span> arr=[<span class="string">&#x27;apple&#x27;</span>,<span class="string">&#x27;strawberry&#x27;</span>,<span class="string">&#x27;banana&#x27;</span>,<span class="string">&#x27;pear&#x27;</span>,<span class="string">&#x27;apple&#x27;</span>,<span class="string">&#x27;orange&#x27;</span>,<span class="string">&#x27;orange&#x27;</span>,<span class="string">&#x27;strawberry&#x27;</span>];</span><br><span class="line">r=arr.<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">element,index,self</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> self.<span class="title function_">indexOf</span>(element)===index;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(r.<span class="title function_">toString</span>());</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">apple,strawberry,banana,pear,orange*/</span></span><br></pre></td></tr></table></figure>
<p>由于indexof总是返回元素第一次出现的位置，因此后续的重复元素位置与indexof不相等就被过滤掉了。</p>
<h4 id="练习题-2">练习题</h4>
<p>请尝试用<code>filter()</code>筛选出素数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">get_primes</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> arr.<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">x</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(x===<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(x===<span class="number">2</span>||x===<span class="number">3</span>||x===<span class="number">5</span>||x===<span class="number">7</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(x%<span class="number">2</span>===<span class="number">0</span>||x%<span class="number">3</span>===<span class="number">0</span>||x%<span class="number">5</span>===<span class="number">0</span>||x%<span class="number">7</span>===<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试:</span></span><br><span class="line"><span class="keyword">var</span></span><br><span class="line">    x,</span><br><span class="line">    r,</span><br><span class="line">    arr = [];</span><br><span class="line"><span class="keyword">for</span> (x = <span class="number">1</span>; x &lt; <span class="number">100</span>; x++) &#123;</span><br><span class="line">    arr.<span class="title function_">push</span>(x);</span><br><span class="line">&#125;</span><br><span class="line">r = <span class="title function_">get_primes</span>(arr);</span><br><span class="line"><span class="keyword">if</span> (r.<span class="title function_">toString</span>() === [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">23</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">37</span>, <span class="number">41</span>, <span class="number">43</span>, <span class="number">47</span>, <span class="number">53</span>, <span class="number">59</span>, <span class="number">61</span>, <span class="number">67</span>, <span class="number">71</span>, <span class="number">73</span>, <span class="number">79</span>, <span class="number">83</span>, <span class="number">89</span>, <span class="number">97</span>].<span class="title function_">toString</span>()) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;测试通过!&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;测试失败: &#x27;</span> + r.<span class="title function_">toString</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">测试通过!*/</span></span><br></pre></td></tr></table></figure>
<h3 id="sort">sort</h3>
<p>JavaScript中的<code>sort()</code>默认把所有元素转换为String再进行排序，用于排序字符串时，根据ASCII码进行排序。因此，直接使用<code>sort()</code>对数字进行排序，得到的结果往往不如人意。</p>
<p>比较两个元素大小时，通常规定，对于<code>x&lt;y</code>，则返回<code>-1</code>；对于<code>x==y</code>，则返回<code>0</code>；对于<code>x&gt;y</code>，则返回<code>1</code>。</p>
<p>若要按数字大小进行排序，可以写成：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//从小到大排序</span></span><br><span class="line"><span class="keyword">var</span> arr=[<span class="number">10</span>,<span class="number">20</span>,<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line">arr.<span class="title function_">sort</span>(<span class="keyword">function</span>(<span class="params">x,y</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;y)&#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;y)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">(4) [1, 2, 10, 20]*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//从大到小排序：</span></span><br><span class="line"><span class="keyword">var</span> arr=[<span class="number">10</span>,<span class="number">20</span>,<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line">arr.<span class="title function_">sort</span>(<span class="keyword">function</span>(<span class="params">x,y</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;y)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;y)&#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">(4) [20, 10, 2, 1]*/</span></span><br></pre></td></tr></table></figure>
<p>忽略字母大小写，按照字母序排序：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="string">&#x27;Google&#x27;</span>,<span class="string">&#x27;apple&#x27;</span>,<span class="string">&#x27;Microsoft&#x27;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">sort</span>(<span class="keyword">function</span>(<span class="params">s1,s2</span>)&#123;</span><br><span class="line">    x1=s1.<span class="title function_">toUpperCase</span>();</span><br><span class="line">    x2=s2.<span class="title function_">toUpperCase</span>();</span><br><span class="line">    <span class="keyword">if</span>(x1&lt;x2)&#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x1&gt;x2)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;));</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">(3) [&#x27;apple&#x27;, &#x27;Google&#x27;, &#x27;Microsoft&#x27;]*/</span></span><br></pre></td></tr></table></figure>
<p><code>sort()</code>方法会直接对Array进行修改，原Array返回的结果是修改后的Array：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a1=[<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;B&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> a2=a1.<span class="title function_">sort</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a1);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a2);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a1===a2);</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">(3) [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;]</span></span><br><span class="line"><span class="comment">(3) [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;]</span></span><br><span class="line"><span class="comment">true*/</span></span><br></pre></td></tr></table></figure>
<h3 id="array">Array</h3>
<p>对于数组，除了<code>map()</code>、<code>reduce()</code>、<code>filter()</code>、<code>sort()</code>这些方法外，Array对象还提供了很多实用的高阶函数。</p>
<h4 id="every">every</h4>
<p><code>every()</code>方法可以判断数组的所有元素是否满足测试条件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="string">&#x27;Apple&#x27;</span>,<span class="string">&#x27;pear&#x27;</span>,<span class="string">&#x27;orange&#x27;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">every</span>(<span class="keyword">function</span>(<span class="params">s</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> s.<span class="property">length</span>&gt;<span class="number">0</span>;</span><br><span class="line">&#125;));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">every</span>(<span class="keyword">function</span>(<span class="params">s</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> s.<span class="title function_">toLowerCase</span>()===s;<span class="comment">//判断每个元素是否都是小写</span></span><br><span class="line">&#125;));</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment">false*/</span></span><br></pre></td></tr></table></figure>
<h4 id="find">find</h4>
<p><code>find()</code>方法用于查找符合条件的第一个元素，若找到了，返回这个元素，否则返回undefined:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="string">&#x27;Apple&#x27;</span>,<span class="string">&#x27;pear&#x27;</span>,<span class="string">&#x27;orange&#x27;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">find</span>(<span class="keyword">function</span>(<span class="params">s</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> s.<span class="title function_">toLowerCase</span>()===s;<span class="comment">//返回全是小写的第一个元素</span></span><br><span class="line">&#125;));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">find</span>(<span class="keyword">function</span>(<span class="params">s</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> s.<span class="title function_">toUpperCase</span>()===s;<span class="comment">//返回全是小写的第一个元素</span></span><br><span class="line">&#125;));</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">pear</span></span><br><span class="line"><span class="comment">undefined*/</span></span><br></pre></td></tr></table></figure>
<h4 id="findindex">findIndex</h4>
<p><code>findIndex()</code>和<code>find()</code>类似，也是查找符合条件的第一个元素，不同之处在于<code>findIndex()</code>会返回这个元素的索引，若没有找到，则返回-1：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="string">&#x27;Apple&#x27;</span>,<span class="string">&#x27;pear&#x27;</span>,<span class="string">&#x27;orange&#x27;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">findIndex</span>(<span class="keyword">function</span>(<span class="params">s</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> s.<span class="title function_">toLowerCase</span>()===s;<span class="comment">//返回全是小写的第一个元素</span></span><br><span class="line">&#125;));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">findIndex</span>(<span class="keyword">function</span>(<span class="params">s</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> s.<span class="title function_">toUpperCase</span>()===s;<span class="comment">//返回全是小写的第一个元素</span></span><br><span class="line">&#125;));</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">-1*/</span></span><br></pre></td></tr></table></figure>
<h4 id="foreach">forEach</h4>
<p>forEach和<code>map()</code>类似，也把每个元素依次作用于传入的函数，但不会返回新的数组，常用于遍历数组。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="string">&#x27;Apple&#x27;</span>,<span class="string">&#x27;pear&#x27;</span>,<span class="string">&#x27;orange&#x27;</span>];</span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="variable language_">console</span>.<span class="property">log</span>);</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">Apple 0 (3) [&#x27;Apple&#x27;, &#x27;pear&#x27;, &#x27;orange&#x27;]</span></span><br><span class="line"><span class="comment">pear 1 (3) [&#x27;Apple&#x27;, &#x27;pear&#x27;, &#x27;orange&#x27;]</span></span><br><span class="line"><span class="comment">orange 2 (3) [&#x27;Apple&#x27;, &#x27;pear&#x27;, &#x27;orange&#x27;]*/</span></span><br></pre></td></tr></table></figure>
<h2 id="闭包">闭包</h2>
<h3 id="函数作为返回值">函数作为返回值</h3>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">lazy_sum</span>(<span class="params">arr</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> sum=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> arr.<span class="title function_">reduce</span>(<span class="keyword">function</span>(<span class="params">x,y</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> x+y;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f1=<span class="title function_">lazy_sum</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]);<span class="comment">//f=sum()，调用lazy_sum时返回的不是求和结果，而是求和函数</span></span><br><span class="line"><span class="keyword">var</span> f2=<span class="title function_">lazy_sum</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]);<span class="comment">//每次调用都会返回一个新函数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">f1</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(f1===f2);</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">15</span></span><br><span class="line"><span class="comment">false*/</span></span><br></pre></td></tr></table></figure>
<h3 id="闭包-1">闭包</h3>
<p>当一个函数返回一个新函数后，其内部的局部变量还被新函数引用。返回的函数并没有立刻执行，而是知道调用<code>f()</code>后才执行。</p>
<p>与pyhton中的闭包相同，由于返回的函数非立刻执行，而是等到返回函数调用完成时才执行，因此会发生以下情况：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">count</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> arr=[];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++)&#123;</span><br><span class="line">        arr.<span class="title function_">push</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> i*i;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> results=<span class="title function_">count</span>();</span><br><span class="line"><span class="keyword">var</span> f1=results[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> f2=results[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">var</span> f3=results[<span class="number">2</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">f1</span>(),<span class="title function_">f2</span>(),<span class="title function_">f3</span>());</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">16 16 16*/</span></span><br></pre></td></tr></table></figure>
<p>因此返回闭包时，返回函数不要引用任何循环遍历或是会发生变化的量。</p>
<p>若一定要引用循环变量，则要再创建一个函数，用该函数的参数绑定循环变量当前的值，无论该循环遍历如何更改，已绑定到函数参数的值都是不变的：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">count</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> arr=[];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++)&#123;</span><br><span class="line">        arr.<span class="title function_">push</span>((<span class="keyword">function</span>(<span class="params">n</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> n*n;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)(i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> results=<span class="title function_">count</span>();</span><br><span class="line"><span class="keyword">var</span> f1=results[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> f2=results[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">var</span> f3=results[<span class="number">2</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">f1</span>(),<span class="title function_">f2</span>(),<span class="title function_">f3</span>());</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">1 4 9*/</span></span><br></pre></td></tr></table></figure>
<p>这里用到了一个创建匿名函数并立刻执行的语法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params">x</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> x*x;</span><br><span class="line">&#125;)(<span class="number">3</span>);</span><br></pre></td></tr></table></figure>
<p>正常创建匿名函数并立刻执行写法如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">function(x)&#123;<span class="keyword">return</span> x*x&#125;(<span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<p>但再JavaScript中这么些会报错，因此需要用括号把函数定义括起来。</p>
<p>JavaScript里没有class机制，只有函数。借助闭包，同样可以封装一个私有变量：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">create_counter</span>(<span class="params">initial</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> x=initial||<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">inc</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            x+=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> c1=<span class="title function_">create_counter</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c1.<span class="title function_">inc</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c1.<span class="title function_">inc</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c1.<span class="title function_">inc</span>());</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c2=<span class="title function_">create_counter</span>(<span class="number">10</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c2.<span class="title function_">inc</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c2.<span class="title function_">inc</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c2.<span class="title function_">inc</span>());</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">11</span></span><br><span class="line"><span class="comment">12</span></span><br><span class="line"><span class="comment">13*/</span></span><br></pre></td></tr></table></figure>
<p>在返回的对象中实现了一个闭包，该闭包携带了局部变量x，且外部的代码无法访问到变量x。</p>
<p>闭包还可以把多参数的函数变成单参数的函数。如计算x^y可以用<code>Math.pow(x,y)</code>函数，可以利用闭包创建新的函数pow2和pow3：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">make_pow</span>(<span class="params">n</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">x</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">pow</span>(x,n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> pow2=<span class="title function_">make_pow</span>(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">var</span> pow3=<span class="title function_">make_pow</span>(<span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">pow2</span>(<span class="number">5</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">pow3</span>(<span class="number">7</span>));</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">25</span></span><br><span class="line"><span class="comment">343*/</span></span><br></pre></td></tr></table></figure>
<h3 id="箭头函数">箭头函数</h3>
<p>ES6标准新增了一种新的函数：箭头函数。它的定义用的就是一个箭头：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">x=&gt;x*x</span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line"><span class="title function_">funtion</span>(<span class="params">x</span>)&#123;</span><br><span class="line">	<span class="keyword">return</span> x*x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>箭头函数相当于是匿名函数，并且简化了函数定义。箭头函数有两种格式，一种只包含一个表达式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">x=&gt;x*x</span><br></pre></td></tr></table></figure>
<p>还有一种可以包含多条语句：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">x=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> x*x;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> -x*x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果参数不是一个，就需要用括号<code>()</code>括起来：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(x,y)=&gt;x*x+y*y<span class="comment">//两个参数</span></span><br><span class="line">()=&gt;<span class="number">3.14</span><span class="comment">//无参数</span></span><br><span class="line">(x,y,...rest)=&gt;&#123;</span><br><span class="line">    <span class="keyword">var</span> i,sum=x+y;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;rest.<span class="property">lenth</span>;i++)&#123;</span><br><span class="line">        sum+=rest[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果要返回一个对象，就要写成这样：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">x=&gt;(&#123;<span class="attr">foo</span>:x&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="this">this</h4>
<p>箭头函数和匿名函数有个明显的区别：箭头函数内部的this是词法作用域，由上下文确定。</p>
<p>箭头函数完全修复了this的指向，this总是指向词法作用域，即外层调用者obj，以前的hack写法<code>var that=this</code>就不再需要了：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">    <span class="attr">birth</span>:<span class="number">1999</span>,</span><br><span class="line">    <span class="attr">getAge</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> b=<span class="variable language_">this</span>.<span class="property">birth</span>;</span><br><span class="line">        <span class="keyword">var</span> <span class="title function_">fn</span>=(<span class="params"></span>)=&gt;<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getFullYear</span>()-<span class="variable language_">this</span>.<span class="property">birth</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">fn</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">getAge</span>());</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">23*/</span></span><br></pre></td></tr></table></figure>
<p>由于this在箭头函数中已经按照词法作用域绑定了，因此用<code>call()</code>或<code>apply()</code>调用箭头函数时，无法对<code>this</code>进行绑定，即传入的第一个参数被忽略：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">    <span class="attr">birth</span>:<span class="number">1999</span>,</span><br><span class="line">    <span class="attr">getAge</span>:<span class="keyword">function</span>(<span class="params">year</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> b=<span class="variable language_">this</span>.<span class="property">birth</span>;</span><br><span class="line">        <span class="keyword">var</span> <span class="title function_">fn</span>=(<span class="params">y</span>)=&gt;y-<span class="variable language_">this</span>.<span class="property">birth</span>;</span><br><span class="line">        <span class="keyword">return</span> fn.<span class="title function_">call</span>(&#123;<span class="attr">birth</span>:<span class="number">2000</span>&#125;,year)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">getAge</span>(<span class="number">2015</span>));</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">16*/</span></span><br></pre></td></tr></table></figure>
<h4 id="练习题-3">练习题</h4>
<p>请使用箭头函数简化排序时传入的函数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">arr.<span class="title function_">sort</span>(<span class="function">(<span class="params">x, y</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x-y;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [1, 2, 10, 20]</span></span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">(4) [1, 2, 10, 20]*/</span></span><br></pre></td></tr></table></figure>
<h3 id="generator">generator</h3>
<p>生成器generator是ES6标准引入一个数据类型，其概念和语法与python的generator相似。</p>
<p>generator的定义如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">foo</span>(<span class="params">x</span>)&#123;</span><br><span class="line">    <span class="keyword">yield</span> x+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">yield</span> x+<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> x+<span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>generator和函数不同的是，generator由<code>function*</code>定义，除了用return语句，还可以用yield返回多次。</p>
<p>用generator写一个斐波那契数列如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">fib</span>(<span class="params">max</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> t,a=<span class="number">0</span>,b=<span class="number">1</span>,n=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (n&lt;max)&#123;</span><br><span class="line">        <span class="keyword">yield</span> a;</span><br><span class="line">        [a,b]=[b,a+b];</span><br><span class="line">        n++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f=<span class="title function_">fib</span>(<span class="number">5</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(f.<span class="title function_">next</span>());<span class="comment">//通过调用generator对象的next()方法来调用生成器</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(f.<span class="title function_">next</span>());<span class="comment">//value的值就是yield的返回值，done表示这个生成器已经执行结束了</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(f.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(f.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(f.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(f.<span class="title function_">next</span>());<span class="comment">//若done为true,value就是return的返回值，这个生成器对象已经全部执行完毕</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//用for...of循环迭代生成器对象</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> x <span class="keyword">of</span> <span class="title function_">fib</span>(<span class="number">10</span>))&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">&#123;value: 0, done: false&#125;</span></span><br><span class="line"><span class="comment">&#123;value: 1, done: false&#125;</span></span><br><span class="line"><span class="comment">&#123;value: 1, done: false&#125;</span></span><br><span class="line"><span class="comment">&#123;value: 2, done: false&#125;</span></span><br><span class="line"><span class="comment">&#123;value: 3, done: false&#125;</span></span><br><span class="line"><span class="comment">&#123;value: undefined, done: true&#125;</span></span><br><span class="line"><span class="comment">0</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">8</span></span><br><span class="line"><span class="comment">13</span></span><br><span class="line"><span class="comment">21</span></span><br><span class="line"><span class="comment">34*/</span></span><br></pre></td></tr></table></figure>
<p>由于generator可以在执行过程中多次返回，因此它看上去像是可以记住执行状态的函数。因此可以利用它来实现保存状态的功能。</p>
<h4 id="练习题-4">练习题</h4>
<p>要生成一个自增的ID，可以编写一个<code>next_id()</code>函数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> current_id = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">next_id</span>(<span class="params"></span>) &#123;</span><br><span class="line">    current_id ++;</span><br><span class="line">    <span class="keyword">return</span> current_id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由于函数无法保存状态，故需要一个全局变量<code>current_id</code>来保存数字。</p>
<p>不用闭包，试用generator改写：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">next_id</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> current_id=<span class="number">1</span>,n=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(n&lt;<span class="number">100</span>)&#123;</span><br><span class="line">        <span class="keyword">yield</span> current_id;</span><br><span class="line">        current_id++;</span><br><span class="line">        n++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试:</span></span><br><span class="line"><span class="keyword">var</span></span><br><span class="line">    x,</span><br><span class="line">    pass = <span class="literal">true</span>,</span><br><span class="line">    g = <span class="title function_">next_id</span>();</span><br><span class="line"><span class="keyword">for</span> (x = <span class="number">1</span>; x &lt; <span class="number">100</span>; x ++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (g.<span class="title function_">next</span>().<span class="property">value</span> !== x) &#123;</span><br><span class="line">        pass = <span class="literal">false</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;测试失败!&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (pass) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;测试通过!&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>前端框架之Vue.js（一）</title>
    <url>/2022/11/03/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="vue.js基础">Vue.js基础</h1>
<p>Vue是一套用于构建用户界面的渐进式框架。与其他大型框架不同的是，Vue被设计为可以自底向上逐层应用。Vue的核心库只关注视图层，易于上手且便于与第三方库或既有项目结合。</p>
<p>Vue不支持IE8及以下的版本，它支持所有兼容ECMA Script 5的浏览器。</p>
<h2 id="安装">安装</h2>
<h3 id="直接用script引入">直接用<code>&lt;script&gt;</code>引入</h3>
<p>若要在现有站点中使用Vue，可以通过<code>&lt;script&gt;</code>元素在页面中使用。</p>
<ul>
<li><p>开发环境版本，包含了有帮助的命令行警告：</p>
<p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p></li>
<li><p>生产环境版本，优化了尺寸和速度。在站点上包含Vue时要指定版本号：</p>
<p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p></li>
</ul>
<h3 id="使用npm安装">使用npm安装</h3>
<p>直接用<code>&lt;script&gt;</code>引入vue的方法有一些局限性，若要构建更复杂的应用程序，需要使用npm软件包和脚手架CLI。在此之前，需要安装node.js 8.11及以上的版本，安装有包管理器npm。</p>
<p>在cmd里使用node.js的<code>npm</code>命令安装Vue：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install vue</span><br></pre></td></tr></table></figure>
<p>在cmd里使用node.js的<code>npm</code>命令安装脚手架CLI：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --global @vue/cli</span><br><span class="line">若安装不上使用下面命令进行安装</span><br><span class="line">cnpm install -g @vue/cli</span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong>不推荐新手直接使用<code>vue-cli</code>，尤其是还不熟悉基于Node.js的构建工具时。</p>
<h3 id="vue-devtools">Vue Devtools</h3>
<p>在使用vue时，推荐在浏览器上安装 <a href="https://github.com/vuejs/vue-devtools#vue-devtools">Vue Devtools</a>。它允许在一个更友好的界面中审查和调试 Vue 应用。</p>
<h2 id="声明式渲染">声明式渲染</h2>
<p>Vue.js的核心是一个允许采用简洁的模板语法来声明式地将数据渲染进DOM系统。</p>
<p>新建一个html文件，编写以下代码后运行，即可创建第一个Vue应用：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123;message&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> app=<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">message</span>:<span class="string">&#x27;Hello Vue!&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--运行结果如下：--&gt;</span></span><br><span class="line">Hello Vue!</span><br></pre></td></tr></table></figure>
<p>创建应用的过程看起来与渲染一个字符串模板类似。现在数据和DOM已经被建立了管理，所有东西都是响应式的。</p>
<p>在运行代码的浏览器上按F12打开开发人员工具，选择控制台（后续简称为JavaScript控制台），修改<code>app.message</code>的值，即可看到浏览器中也会及时更新显示的值：</p>
<p><img src="/2022/11/03/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E4%B8%80%EF%BC%89/1.png"></p>
<p>一个Vue应用会将其挂载到一个DOM元素上（上述代码中是<code>#app</code>），然后对其进行完全控制。</p>
<p>除了文本插值，还可以绑定元素attribute如下所示：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123;message&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app-2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-bind:title</span>=<span class="string">&quot;message&quot;</span>&gt;</span></span><br><span class="line">            鼠标悬停几秒查看此处动态绑定的提示信息！</span><br><span class="line">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> app=<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">message</span>:<span class="string">&#x27;Hello Vue!&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> app2=<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&#x27;#app-2&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">message</span>:<span class="string">&#x27;页面加载于 &#x27;</span>+<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toLocaleString</span>()</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这里的<code>v-bind</code> attribute被称为指令。指令带有前缀<code>v-</code>以表示它们是Vue提供的特殊attribute。它们会在渲染的DOM上应用特殊的响应式行为。在上述代码中，该实例的意思是：将这个元素节点的<code>title</code> atrribute和Vue实例的message property保持一致。</p>
<p>若再次打开JavaScript控制台，输入<code>app2.message='新消息'</code>，就会再次看到这个绑定了<code>title</code> attribute的HTML已经进行了更新。</p>
<h2 id="条件与循环">条件与循环</h2>
<p>可以利用条件判断来控制切换一个元素是否显示：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app-3&quot;</span>&gt;</span></span><br><span class="line">   	<span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;seen&quot;</span>&gt;</span>现在你看到我了<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> app3=<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&#x27;#app-3&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>:&#123;</span><br><span class="line">        <span class="attr">seen</span>:<span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>若打开JavaScript控制台，输入<code>app3.seen=false</code>，就会再次看到之前显示的消息消失了。</p>
<p>上述例子演示了不仅可以把数据绑定到DOM文本或attribute，还可以绑定到DOM结构。除此之外，Vue也提供了一个强大的过渡效果系统，可以在Vue插入/更新/移除元素时自动应用过渡效果。</p>
<p>还有很多其他指令，每个都有特殊的功能，如<code>v-for</code>指令可以绑定数组的数据来渲染一个项目列表：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app-4&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;todo in todos&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123;todo.text&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> app4=<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&#x27;#app-4&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>:&#123;</span><br><span class="line">        <span class="attr">todos</span>:[</span><br><span class="line">            &#123; <span class="attr">text</span>:<span class="string">&#x27;学习 JavaScript&#x27;</span>&#125;,</span><br><span class="line">            &#123; <span class="attr">text</span>:<span class="string">&#x27;学习 Vue&#x27;</span>&#125;,</span><br><span class="line">            &#123; <span class="attr">text</span>:<span class="string">&#x27;搞个项目&#x27;</span>&#125;</span><br><span class="line">            ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>在控制台里，输入<code>app4.todos.push(&#123; text: '新项目'&#125;)</code>，会发现列表最后添加了一个新项目。</p>
<h2 id="处理用户输入">处理用户输入</h2>
<p>为了让用户和应用进行交互，可以用<code>v-on</code>指令添加一个事件监听器，通过它调用在Vue实例中定义的方法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app-5&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;reverseMessage&quot;</span>&gt;</span>反转信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> app5=<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&#x27;#app-5&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>:&#123;</span><br><span class="line">        <span class="attr">message</span>:<span class="string">&#x27;Hello Vue.js!&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>:&#123;</span><br><span class="line">        <span class="attr">reverseMessage</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">message</span>=<span class="variable language_">this</span>.<span class="property">message</span>.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong>在reverseMessage方法中，虽然更新了应用状态，但没有触碰DOM，所有的DOM操作都有Vue来处理。</p>
<p>Vue还提供了<code>v-model</code>指令，可以实现表单输入和应用状态之间的双向绑定：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app-6&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> app6=<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&#x27;#app-6&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>:&#123;</span><br><span class="line">        <span class="attr">message</span>:<span class="string">&#x27;Hello Vue!&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="组件化应用创建">组件化应用创建</h2>
<p>组件系统是Vue的另一个重要概念。它是一种抽象，允许使用小型、独立和通常可复用的组件构建大型应用。因此任意类型的应用界面都可以抽象为一个组件树。</p>
<p>在Vue里，一个组件本质上是一个拥有预定义选项的一个Vue实例。其中使用 <code>v-bind</code> 指令将待办项传到循环输出的每个组件中：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app-7&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--使用v-bind指令将待办项传到循环输出的每个组件中--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--为每个todo-item提供todo对象--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--todo对象是变量，其内容是动态的。同时也需要为每个组件提供一个&quot;key&quot;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">todo-item</span> <span class="attr">v-for</span>=<span class="string">&quot;item in groceryList&quot;</span> <span class="attr">v-bind:todo</span>=<span class="string">&quot;item&quot;</span> <span class="attr">v-bind:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">todo-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">	<span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;todo-item&#x27;</span>,&#123;</span><br><span class="line">        <span class="comment">//todo-item组件接收一个名为todo的prop，类似于一个自定义attribute</span></span><br><span class="line">        <span class="attr">props</span>:[<span class="string">&#x27;todo&#x27;</span>],</span><br><span class="line">        <span class="attr">template</span>:<span class="string">&#x27;&lt;li&gt;&#123;&#123;todo.text&#125;&#125;&lt;/li&gt;&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">var</span> app7=<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">        <span class="attr">el</span>:<span class="string">&#x27;#app-7&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>:&#123;</span><br><span class="line">            <span class="attr">groceryList</span>:[</span><br><span class="line">                &#123; <span class="attr">id</span>:<span class="number">0</span>,<span class="attr">text</span>:<span class="string">&#x27;蔬菜&#x27;</span>&#125;,</span><br><span class="line">                &#123; <span class="attr">id</span>:<span class="number">1</span>,<span class="attr">text</span>:<span class="string">&#x27;奶酪&#x27;</span>&#125;,</span><br><span class="line">                &#123; <span class="attr">id</span>:<span class="number">2</span>,<span class="attr">text</span>:<span class="string">&#x27;薯条&#x27;</span>&#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>上述代码中，将应用分割成了两个更小的单元。子单元通过prop接口与负担也进行了良好的解耦，后续可以进一步改进<code>&lt;todo-item&gt;</code>组件，提供更为复杂的模板和逻辑，而不会影响到父单元。在一个大型应用中，将整个应用程序划分为组件是有必要的。</p>
<h3 id="组件与自定义元素的关系">组件与自定义元素的关系</h3>
<p>Vue组件是Web组件规范的一部分，其与自定义元素十分类似，但还是有关键的差别：</p>
<ul>
<li>Web Components规范已完成并通过，但未被所有浏览器原生实现。相比之下，Vue组件不需要任何polyfill，且在所有支持的浏览器中表现一致。必要时，Vue组件也可以包装与原生自定义元素之内</li>
<li>Vue组件提供了纯自定义元素所不具备的一些重要功能，最突出的是跨组件数据流、自定义事件通信以及构建工具集成。</li>
</ul>
<p>因此，虽然Vue内部没有使用自定义元素，但在应用使用自定义元素或以自定义元素发布时，仍然有着很好的操作性。Vue CLI脚手架 也支持将Vue组件构建成为原生的自定义元素。</p>
<h2 id="vue实例">Vue实例</h2>
<h3 id="创建一个vue实例">创建一个Vue实例</h3>
<p>每个Vue应用都是通过用Vue函数创建一个新的Vue实例开始的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var vm=new Vue(&#123;</span><br><span class="line">	//选项</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>在文档中经常会使用<code>vm</code>这个变量名表示Vue实例。当创建一个实例时，可以传入一个选项对象。</p>
<p>一个Vue应用由一个通过new Vue创建的根Vue实例，以及可选的嵌套的、可复用的组件树组成。所有的Vue组件都是Vue实例，并且接受相同的选项对象。</p>
<h4 id="数据与方法">数据与方法</h4>
<p>当一个Vue实例被创建时，它将data对象中的所有property加入到Vue的响应式系统中。当这些property的值发生改变时，视图将会产生响应， 即匹配更新为新的值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">var</span> data=&#123;<span class="attr">a</span>:<span class="number">1</span>&#125;<span class="comment">//数据对象</span></span><br><span class="line">   <span class="keyword">var</span> vm=<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;<span class="comment">//该对象被加入到一个Vue实例中</span></span><br><span class="line">       <span class="attr">data</span>:data </span><br><span class="line">   &#125;)</span><br><span class="line">   <span class="comment">//获得这个实例上的property,返回源数据中对应的字段</span></span><br><span class="line">   vm.<span class="property">a</span>==data.<span class="property">a</span></span><br><span class="line"><span class="comment">//设置property会影响到原始数据</span></span><br><span class="line">   vm.<span class="property">a</span>=<span class="number">2</span></span><br><span class="line">   data.<span class="property">a</span><span class="comment">//返回2</span></span><br><span class="line"><span class="comment">//反过来也一样</span></span><br><span class="line">   data.<span class="property">a</span>=<span class="number">3</span></span><br><span class="line">   vm.<span class="property">a</span><span class="comment">//返回3</span></span><br></pre></td></tr></table></figure>
<p>当这些数据改变时，视图会进行重渲染。<strong>只有当实例被创建时就已经存在与property才是响应式的。</strong>若后面才添加一个新的property</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">vm.<span class="property">b</span>=<span class="string">&#x27;h1&#x27;</span></span><br></pre></td></tr></table></figure>
<p>那么对<code>b</code>的改动将不会触发任何视图的更新。若是知道后续是需要一个property，但一开始时它为空或不存在，则需要设置一些初始值以保证视图能同步更新：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">data&#123;</span><br><span class="line">    <span class="attr">newTodoText</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">visitVount</span>:<span class="number">0</span>,</span><br><span class="line">    <span class="attr">hideCompletedTodos</span>:<span class="literal">false</span>,</span><br><span class="line">    <span class="attr">todos</span>:[],</span><br><span class="line">    <span class="attr">error</span>:<span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用<code>Object.freeze()</code>会阻止修改现有的property，也意味着响应系统无法再追踪其变化：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;foo&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--这里的foo不会更新！--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;foo = &#x27;baz&#x27;&quot;</span>&gt;</span>Change it <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">var</span> obj=&#123;</span><br><span class="line">     <span class="attr">foo</span>:<span class="string">&#x27;bar&#x27;</span></span><br><span class="line"> &#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">freeze</span>(obj)</span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> app8=<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">     <span class="attr">el</span>:<span class="string">&#x27;#app-8&#x27;</span>,</span><br><span class="line">     <span class="attr">data</span>:obj</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure>
<p>除了数据property，Vue实例还暴露了一些有用的实例property与方法。它们都有前缀<code>$</code>，以便与用户定义的property区分开来：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">vm.<span class="property">$data</span>===data<span class="comment">//返回true</span></span><br><span class="line">vm.<span class="property">$el</span>===<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;example&#x27;</span>)<span class="comment">//返回true</span></span><br><span class="line">$watch是一个实例方法</span><br><span class="line">vm.$watch(<span class="string">&#x27;a&#x27;</span>,<span class="keyword">function</span>(<span class="params">newValue,oldValue</span>)&#123;</span><br><span class="line">    <span class="comment">//这个回调将在&#x27;vm.a&#x27;改变后调用</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="实例生命周期钩子">实例生命周期钩子</h3>
<p>每个Vue实例在被创建时都要经过一系列的初始化过程，如设置数据监听、编译模板、将实例挂载到DOM并在数据变化时更新DOM等。同时在这个过程中也会运行一些名为<strong>生命周期钩子</strong>的函数。</p>
<p>如<code>created</code>钩子可以用来在一个实例被创建之后执行代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">        <span class="attr">data</span>:&#123;</span><br><span class="line">            <span class="attr">a</span>:<span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">created</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a is: &#x27;</span>+<span class="variable language_">this</span>.<span class="property">a</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="comment">//返回a is: 1</span></span><br></pre></td></tr></table></figure>
<p>也有一些其他的钩子，在实例生命周期的不同阶段被调用，如<code>mounted</code>、<code>updated</code>和<code>destroyed</code>。生命周期钩子的<code>this</code>上下文指向调用它的Vue实例。</p>
<p><strong>注意：不要在选项property或回调上使用箭头函数</strong>，如<code>created:()=&gt;console.log(this.a)</code>或是<code>vm.$watch('a',newValue=&gt;this.myMethod())</code><strong>。因为箭头函数并没有<code>this</code></strong>，<code>this</code>作为变量一直向上级词法作用域查找，直至找到为止，<strong>经常会报错。</strong></p>
<h3 id="生命周期图示">生命周期图示</h3>
<p><img src="/2022/11/03/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E4%B8%80%EF%BC%89/2.png"></p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>前端</category>
        <category>前端框架</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>前端框架之Vue.js（三）</title>
    <url>/2022/11/04/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[<h1 id="vue.js基础">Vue.js基础</h1>
<h2 id="列表渲染">列表渲染</h2>
<h3 id="用v-for把一个数组对应为一组元素">用<code>v-for</code>把一个数组对应为一组元素</h3>
<p>基于一个数组来渲染列表可以使用<code>v-for</code>指令。<code>v-for</code>指令需要通过<code>item in items</code>形式的特殊语法，其中<code>items</code>是源数据数组，而<code>item</code>是被迭代的数组元素的别名。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;ul id=&quot;example-1&quot;&gt;</span><br><span class="line">    &lt;li v-for=&quot;item in items&quot; :key=&quot;item.message&quot;&gt;</span><br><span class="line">        &#123;&#123;item.message&#125;&#125;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;   </span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var example1=new Vue(&#123;</span><br><span class="line">        el:&#x27;#example-1&#x27;,</span><br><span class="line">        data:&#123;</span><br><span class="line">            items:[</span><br><span class="line">                &#123;message:&#x27;First&#x27;&#125;,</span><br><span class="line">                &#123;message:&#x27;Second&#x27;&#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<p><img src="/2022/11/04/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E4%B8%89%EF%BC%89/1.png"></p>
<p>在<code>v=for</code>块中，可以访问所有父作用域的property。<code>v-for</code>还支持一个可选的第二个参数，即当前项的索引。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;ul id=&quot;example-2&quot;&gt;</span><br><span class="line">    &lt;li v-for=&quot;(item,index) in items&quot;&gt;</span><br><span class="line">        &#123;&#123;parentMessage&#125;&#125;-&#123;&#123;index&#125;&#125;-&#123;&#123;item.message&#125;&#125;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var example2=new Vue(&#123;</span><br><span class="line">        el:&#x27;#example-2&#x27;,</span><br><span class="line">        data:&#123;</span><br><span class="line">            parentMessage:&#x27;Parent&#x27;,</span><br><span class="line">            items:[</span><br><span class="line">                &#123;message:&#x27;First&#x27;&#125;,</span><br><span class="line">                &#123;message:&#x27;Second&#x27;&#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<p><img src="/2022/11/04/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E4%B8%89%EF%BC%89/2.png"></p>
<p>其中，也可以用<code>of</code>替代<code>in</code>作为分隔符，<code>if</code>更接近Javascript迭代器的语法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;item of items&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="在v-for里使用对象">在<code>v-for</code>里使用对象</h3>
<p>遍历一个对象的property可以用<code>v-for</code>指令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;ul id=&quot;v-for-object&quot; class=&quot;demo&quot;&gt;</span><br><span class="line">    &lt;li v-for=&quot;value in object&quot;&gt;</span><br><span class="line">        &#123;&#123;value&#125;&#125;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el:&#x27;#v-for-object&#x27;,</span><br><span class="line">        data:&#123;</span><br><span class="line">            object:&#123;</span><br><span class="line">                title:&#x27;How to do lists in Vue&#x27;,</span><br><span class="line">                author:&#x27;ZhangSan&#x27;,</span><br><span class="line">                publicshedAt:&#x27;2022-11-04&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<p><img src="/2022/11/04/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E4%B8%89%EF%BC%89/3.png"></p>
<p>也可以提供第二个参数为property名称（即键名）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;ul id=&quot;v-for-object&quot; class=&quot;demo&quot;&gt;</span><br><span class="line">    &lt;li v-for=&quot;(value,name) in object&quot;&gt;</span><br><span class="line">        &#123;&#123;name&#125;&#125;:&#123;&#123;value&#125;&#125;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<p><img src="/2022/11/04/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E4%B8%89%EF%BC%89/4.png"></p>
<p>还可以用第三个参数作为索引：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;ul id=&quot;v-for-object&quot; class=&quot;demo&quot;&gt;</span><br><span class="line">    &lt;li v-for=&quot;(value,name,index) in object&quot;&gt;</span><br><span class="line">        &#123;&#123;index&#125;&#125;:&#123;&#123;name&#125;&#125;:&#123;&#123;value&#125;&#125;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<p><img src="/2022/11/04/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E4%B8%89%EF%BC%89/5.png"></p>
<p>在遍历对象时，会按<code>Object.keys()</code>的结果遍历，但不能保证它的结果在不同的JavaScript引擎下都一致。</p>
<h3 id="维护状态">维护状态</h3>
<p>当Vue正在更新使用<code>v-for</code>渲染的元素列表时，默认使用“就地更新”的策略。若数据项的顺序被改变，Vue将不会移动DOM元素来匹配数据项的顺序，而是就地更新每个元素，并且确保它们在每个索引位置正确渲染。<strong>这个默认模式只适用于不依赖子组件状态或临时DOM状态的列表渲染输出（如表单输入值）。</strong></p>
<p>为了给Vue一个提示以便它能够跟踪每个节点的身份，从而重用和重新排序现有元素，需要为每项提供一个唯一的<code>key</code> attribute：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span> <span class="attr">v-bind:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--内容--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>尽可能在使用<code>v-for</code>时提供<code>key</code> attribute</strong>，除非遍历输出的DOM内容非常简单，或是刻意依赖默认行为以获取性能上的提升。由于它是Vue识别节点的一个通用机制，<code>key</code>并不仅与<code>v-for</code>特别关联。</p>
<p>不要使用对象或数组之类的非基本类型值作为<code>v-for</code>的<code>key</code>，要用字符串或数值类型的值。</p>
<h3 id="数组更新检测">数组更新检测</h3>
<h4 id="变更方法">变更方法</h4>
<p>Vue将被侦听的数组的变更方法进行了包裹，因此它们也将会触发视图更新。</p>
<p>这些被包裹过的方法有：</p>
<ul>
<li>push()</li>
<li>pop()</li>
<li>shift()</li>
<li>unshift()</li>
<li>splice()</li>
<li>sort()</li>
<li>reverse()</li>
</ul>
<h4 id="替换数组">替换数组</h4>
<p>变更方法会变更调用了这些方法的原始数组。相比之下，也有非变更方法。如<code>filter()</code>、<code>concat()</code>和<code>slice()</code>。<strong>它们不会变更原始数组，而是总是返回一个新数组</strong>。当使用非变更方法时，可以用新数组替换旧数组。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">example.<span class="property">items</span>=example.<span class="property">items</span>.<span class="title function_">filter</span>(<span class="keyword">function</span> (<span class="params">item</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> item.<span class="property">message</span>.<span class="title function_">match</span>(<span class="regexp">/Foo/</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong>由于JavaScript的限制，Vue不能检测数组和对象的变化。</p>
<h3 id="显示过滤排序后的结果">显示过滤/排序后的结果</h3>
<p>若要显示一个数组经过过滤或排序后的版本，而不实际变更或重置原始数据，可以通过创建一个计算属性来返回过滤或排序后的数组：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;test&quot;&gt;</span><br><span class="line">    &lt;li  v-for=&quot;n in evenNumbers&quot;&gt;&#123;&#123;n&#125;&#125;&lt;/li&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el:&#x27;#test&#x27;,</span><br><span class="line">        data:&#123;</span><br><span class="line">            numbers:[1,2,3,4,5]</span><br><span class="line">        &#125;,</span><br><span class="line">        computed:&#123;</span><br><span class="line">            evenNumbers:function()&#123;</span><br><span class="line">                return this.numbers.filter(function (number)&#123;</span><br><span class="line">                    return number %2===0</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p><strong>注意：<code>v-for</code>指令不能在根节点使用！</strong></p>
<p>在嵌套<code>v-for</code>循环中不适应计算属性的情况下，可以使用一个方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;test&quot;&gt;</span><br><span class="line">    &lt;ul v-for=&quot;set in sets&quot;&gt;</span><br><span class="line">        &lt;li  v-for=&quot;n in even(set)&quot;&gt;&#123;&#123;n&#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el:&#x27;#test&#x27;,</span><br><span class="line">        data:&#123;</span><br><span class="line">            sets:[[1,2,3,4,5],[6,7,8,9,10]]</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            even:function(numbers)&#123;</span><br><span class="line">                return numbers.filter(function (number)&#123;</span><br><span class="line">                    return number %2===0</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h3 id="在v-for里使用值范围">在<code>v-for</code>里使用值范围</h3>
<p><code>v-for</code>也可以接收整数。在这种情况下，它会把模板重复对应次数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;test&quot;&gt;</span><br><span class="line">    &lt;span v-for=&quot;n in 10&quot;&gt;&#123;&#123;n&#125;&#125;&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el:&#x27;#test&#x27;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h3 id="在template上是使用v-for">在<code>&lt;template&gt;</code>上是使用<code>v-for</code></h3>
<p>与<code>v-if</code>类似，也可以利用带有<code>v-for</code>的<code>&lt;template&gt;</code>来循环渲染一段包含多个元素的内容：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;item.msg&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;divider&quot;</span> <span class="attr">role</span>=<span class="string">&quot;presentation&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="在组件上使用v-for">在组件上使用<code>v-for</code></h3>
<p>在自定义组件上，可以像在任何普通元素上一样使用<code>v-for</code>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>在Vue2.2.0+的版本里，在组件上使用<code>v-for</code>时，<code>key</code>是必须的。</strong></p>
<p>由于组件有自己独立的作用域，任何数据都不会被自动传递到组件里。使用prop把迭代数据传递到组件里：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in items&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">v-bind:item</span>=<span class="string">&quot;item&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">v-bind:index</span>=<span class="string">&quot;index&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">v-bind:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>若是自动将<code>item</code>注入到组件里，会使得组件与<code>v-for</code>的运行紧密耦合。明确组件数据的来源能够使组件在其他场合重复使用。</p>
<p>下面是个简单的todo列表的完整代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;   </span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;todo-list-example&quot;&gt;</span><br><span class="line">    &lt;form v-on:submit.prevent=&quot;addNewTodo&quot;&gt;</span><br><span class="line">        &lt;label for=&quot;new-todo&quot;&gt;Add a todo&lt;/label&gt;</span><br><span class="line">        &lt;input v-model=&quot;newTodoText&quot; id=&quot;new-todo&quot; placeholder=&quot;E.g. Feed the cat&quot;&gt;</span><br><span class="line">        &lt;button&gt;Add&lt;/button&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;!--这里的is=&quot;todo-item&quot; attribute在使用DOM模板时是十分必要的。</span><br><span class="line">		在&lt;ul&gt;元素内只有&lt;li&gt;元素会被看作有效内容。	</span><br><span class="line">		这样做实现的效果与&lt;todo-item&gt;相同，但可以避开一些潜在的浏览器解析错误--&gt;</span><br><span class="line">        &lt;li is=&quot;todo-item&quot; v-for=&quot;(todo,index) in todos&quot; </span><br><span class="line">        v-bind:key=&quot;todo.id&quot; v-bind:title=&quot;todo.title&quot; </span><br><span class="line">        v-on:remove=&quot;todos.splice(index,1)&quot;&gt;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    Vue.component(&#x27;todo-item&#x27;,&#123;</span><br><span class="line">        template:&#x27;\</span><br><span class="line">        &lt;li&gt;\</span><br><span class="line">          &#123;&#123; title &#125;&#125;\</span><br><span class="line">          &lt;button v-on:click=&quot;$emit(\&#x27;remove\&#x27;)&quot;&gt;Remove&lt;/button&gt;\</span><br><span class="line">        &lt;/li&gt;\</span><br><span class="line">        &#x27;,</span><br><span class="line">        props:[&#x27;title&#x27;]</span><br><span class="line">    &#125;)</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el:&#x27;#todo-list-example&#x27;,</span><br><span class="line">        data:&#123;</span><br><span class="line">            newTodoText:&#x27;&#x27;,</span><br><span class="line">            todos:[</span><br><span class="line">                &#123;</span><br><span class="line">                    id:1,</span><br><span class="line">                    title:&#x27;Do the dishes&#x27;,</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    id:2,</span><br><span class="line">                    title:&#x27;Take out the trash&#x27;,</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    id:3,</span><br><span class="line">                    title:&#x27;Mow the lawn&#x27;</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            nextTodoId:4</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            addNewTodo:function()&#123;</span><br><span class="line">                this.todos.push(&#123;</span><br><span class="line">                    id:this.nextTodoId++,</span><br><span class="line">                    title:this.newTodoText</span><br><span class="line">                &#125;)</span><br><span class="line">                this.newTodoText=&#x27;&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<p><img src="/2022/11/04/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E4%B8%89%EF%BC%89/6.png"></p>
<h2 id="事件处理">事件处理</h2>
<h3 id="使用v-on监听事件">使用<code>v-on</code>监听事件</h3>
<p>可以用<code>v-on</code>指令监听DOM事件，并在触发时运行一些JavaScriptdiamond：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;example-1&quot;&gt;</span><br><span class="line">    &lt;button v-on:click=&quot;counter+=1&quot;&gt;Add 1&lt;/button&gt;</span><br><span class="line">    &lt;p&gt;The button above has been clicked &#123;&#123;counter&#125;&#125; times.&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var example1=new Vue(&#123;</span><br><span class="line">    el:&#x27;#example-1&#x27;,</span><br><span class="line">    data:&#123;</span><br><span class="line">        counter:0</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<p><img src="/2022/11/04/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E4%B8%89%EF%BC%89/7.png"></p>
<p>使用<code>v-on</code>指令有几个好处：</p>
<ul>
<li>看一眼HTML模板就可以定位在JavaScript代码里对应的方法</li>
<li>由于无需在JavaScript里手动绑定事件，因此所编写的ViewModel代码是纯粹的逻辑，与DOM完全解耦，更易于测试</li>
<li>当一个ViewModel被销毁时，所有的事件处理器都会自动被删除，无需额外清理。</li>
</ul>
<h3 id="事件处理方法">事件处理方法</h3>
<p>由于许多事件处理逻辑会更为复杂，因此直接把JavaScript代码写在<code>v-on</code>指令中是不可行的，<code>v-on</code>还可以接收一个需要调用的方法名称：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;example-2&quot;&gt;</span><br><span class="line">    &lt;!--greet是定义的方法名--&gt;</span><br><span class="line">    &lt;button v-on:click=&quot;greet&quot;&gt;Greet&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var example2=new Vue(&#123;</span><br><span class="line">    el:&#x27;#example-2&#x27;,</span><br><span class="line">    data:&#123;</span><br><span class="line">        name:&#x27;Vue.js&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    //在methods对象中定义方法</span><br><span class="line">    methods:&#123;</span><br><span class="line">        greet:function(event)&#123;</span><br><span class="line">            //this在方法里指向当前Vue示例</span><br><span class="line">            alert(&#x27;Hello &#x27;+this.name+&#x27;!&#x27;)</span><br><span class="line">            //event是原生DOM事件</span><br><span class="line">            if(event)&#123;</span><br><span class="line">                alert(event.target.tagName)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<p><img src="/2022/11/04/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E4%B8%89%EF%BC%89/8.png"></p>
<p><img src="/2022/11/04/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E4%B8%89%EF%BC%89/9.png"></p>
<p>与此同时，也可以在F12的JavaScript控制台里使用<code>example2.greet()</code>直接调用方法。</p>
<h3 id="内联处理器中的方法">内联处理器中的方法</h3>
<p>除了直接绑定到一个方法，也可以在内联JavaScript语句中调用方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;example-3&quot;&gt;</span><br><span class="line">    &lt;button v-on:click=&quot;say(&#x27;hi&#x27;)&quot;&gt;Say hi&lt;/button&gt;</span><br><span class="line">    &lt;button v-on:click=&quot;say(&#x27;what&#x27;)&quot;&gt;Say what&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">    el:&#x27;#example-3&#x27;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        say:function(message)&#123;</span><br><span class="line">            alert(message)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<p><img src="/2022/11/04/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E4%B8%89%EF%BC%89/10.png"></p>
<p>若需要在内联语句处理器中访问原始的DOM事件，可以使用特殊变量<code>$event</code>把它传入方法中：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;example-3&quot;&gt;</span><br><span class="line">    &lt;button v-on:click=&quot;warn(&#x27;Form cannot be submitted yet.&#x27;,$event)&quot;&gt; </span><br><span class="line">        Submit&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">    el:&#x27;#example-3&#x27;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        warn:function(message, event)&#123;</span><br><span class="line">            //现在可以访问原生事件对象</span><br><span class="line">            if(event)&#123;</span><br><span class="line">                event.preventDefault()</span><br><span class="line">            &#125;</span><br><span class="line">            alert(message)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<p><img src="/2022/11/04/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E4%B8%89%EF%BC%89/11.png"></p>
<h3 id="事件修饰符">事件修饰符</h3>
<p>比在事件处理程序中调用<code>event.preventDefault()</code>或<code>event.stopPropagation()</code>更好的方式是：方法只有纯粹的数据逻辑，而不是去处理DOM事件细节。</p>
<p>Vue.js为<code>v-on</code>提供了事件修饰符，修饰符由点开头的指令后缀来表示：</p>
<ul>
<li><code>.stop</code>：阻止事件向上级DOM元素传递</li>
<li><code>.prevent</code>：阻止默认事件的发生</li>
<li><code>.capture</code>：添加事件侦听器时使用事件捕获模式</li>
<li><code>.self</code>：将事件绑定到自身，只有自身才能触发</li>
<li><code>.once</code>：设置事件只能触发一次</li>
<li><code>.passive</code>：启动被动监听器，默认行为会立即触发。添加了<code>.passive</code> 表示不会在监听函数里添加 <code>preventDefault()</code>来阻止默认行为。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 阻止单击事件继续传播 --&gt;</span><br><span class="line">&lt;a v-on:click.stop=&quot;doThis&quot;&gt;&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 提交事件不再重载页面 --&gt;</span><br><span class="line">&lt;form v-on:submit.prevent=&quot;onSubmit&quot;&gt;&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 修饰符可以串联 --&gt;</span><br><span class="line">&lt;a v-on:click.stop.prevent=&quot;doThat&quot;&gt;&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 只有修饰符 --&gt;</span><br><span class="line">&lt;form v-on:submit.prevent&gt;&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 添加事件监听器时使用事件捕获模式 --&gt;</span><br><span class="line">&lt;!-- 即内部元素触发的事件先在此处理，然后才交由内部元素进行处理 --&gt;</span><br><span class="line">&lt;div v-on:click.capture=&quot;doThis&quot;&gt;...&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 只当在event.target是当前元素自身时触发处理函数 --&gt;</span><br><span class="line">&lt;!-- 即事件不是从内部元素触发的 --&gt;</span><br><span class="line">&lt;div v-on:click.self=&quot;doThat&quot;&gt;...&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--点击事件将只会触发一次--&gt;</span><br><span class="line">&lt;a v-on:click.once=&quot;doThis&quot;&gt;&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--滚动事件的默认行为将会立即触发，而不会等待onScroll完成--&gt;</span><br><span class="line">&lt;div v-on:scroll.passive=&quot;onScroll&quot;&gt;...&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>使用修饰符时要注意顺序，<strong>相应的代码会以同样的顺序产生</strong>。因此用<code>v-on:click.prevent.self</code><strong>会阻止所有的点击</strong>，而<code>v-on:click.self.prevent</code><strong>只会阻止对元素本身的点击。</strong></p>
<p>不像其他只能对原生的DOM事件起作用的修饰符，<code>.once</code>修饰符还能被用到<strong>自定义的组件事件</strong>上。</p>
<p><strong>注意：</strong>不要把<code>.passive</code>和<code>.prevent</code>一起使用，因为<code>.prevent</code>将会被忽略，同时浏览器可能会展示一个警告。<code>.passive</code>会告诉浏览器不阻止事件的默认行为。</p>
<h3 id="按键修饰符">按键修饰符</h3>
<p>在监听键盘事件时，经常需要检查详细的按键。Vue允许为<code>v-on</code>在监听键盘事件时添加按键修饰符：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--处理函数vm.submit()只会在$event.key被Enter时（即按下回车键）被调用--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.enter</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>也可以直接将<code>KeyboardEvent.key</code>暴露的任意有效按键名转换为kebab-case来作为修饰符：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--处理函数只会在$event.key等于PageDown时被调用--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.page-down</span>=<span class="string">&quot;onPageDown&quot;</span></span></span><br></pre></td></tr></table></figure>
<h4 id="按键码">按键码</h4>
<p>注：<strong>keyCode的事件用法已经被废弃了，可能不会被最新的浏览器支持。</strong></p>
<p>使用<code>keyCode</code>attribute的形式如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.13</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>为了在必要的情况下支持旧浏览器，Vue提供了绝大多数常用的按键码别名：</p>
<ul>
<li>回车：<code>.enter</code></li>
<li>换行：<code>.tab</code></li>
<li>删除：<code>.delete</code>（捕获删除和退格键）</li>
<li>退出：<code>.esc</code></li>
<li>空格：<code>.space</code></li>
<li>上：<code>.up</code></li>
<li>下：<code>.down</code></li>
<li>左：<code>.left</code></li>
<li>右：<code>.right</code></li>
</ul>
<p>有一些按键（如<code>.esc</code>以及所有的方向键）在IE9中有不同的<code>key</code>值。若想要支持IE9，首选这些内置的别名。</p>
<p>除此之外，还可以通过全局<code>config.keyCodes</code>对象自定义按键修饰符别名：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//可以使用v-on:keyup.f1</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">keyCodes</span>.<span class="property">f1</span>=<span class="number">112</span></span><br></pre></td></tr></table></figure>
<h3 id="系统修饰键">系统修饰键</h3>
<p>可以用如下修饰符来实现仅在按下相应按键时才触发鼠标或键盘事件的监听器：</p>
<ul>
<li><code>.ctrl</code></li>
<li><code>.alt</code></li>
<li><code>.shift</code></li>
<li><code>.meta</code></li>
</ul>
<p>注意：在注意：在 Mac 系统键盘上，meta 对应 command 键 (⌘)。在 Windows 系统键盘 meta 对应 Windows 徽标键 (⊞)。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Alt+C --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.alt.76</span>=<span class="string">&quot;clear&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Ctrl+Click --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.ctrl</span>=<span class="string">&quot;doSomething&quot;</span>&gt;</span>Do something<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>修饰键与常规按键不同，在和<code>keyup</code>事件一起用时，事件触发时修饰键必须处于按下状态。即只有在按住<code>ctrl</code>的情况下释放其他按键，才会触发<code>keyup.ctrl</code>。而单单释放<code>ctrl</code>也不会触发事件。若想这样做，请为<code>ctrl</code>换用<code>keyCode:keyup.17</code>。</p>
<h4 id="exact修饰符"><code>.exact</code>修饰符</h4>
<p>使用<code>.exact</code>修饰符可以精确地控制由系统修饰符组合触发的事件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 非ctrl独有，即使是Alt和Shift一起按下时，也会触发 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click.ctrl</span>=<span class="string">&quot;onClick&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 当且仅当Ctrl被按下时才触发 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click.ctrl.exact</span>=<span class="string">&quot;onCtrlClick&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 没有任何系统修饰符被按下时才触发 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click.exact</span>=<span class="string">&quot;onClick&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="鼠标按钮修饰符">鼠标按钮修饰符</h4>
<p>以下修饰符会限制处理函数仅响应特定的鼠标按钮：</p>
<ul>
<li>鼠标左键：<code>.left</code></li>
<li>鼠标右键：<code>.right</code></li>
<li>鼠标中键：<code>.middle</code></li>
</ul>
<h2 id="表单输入绑定">表单输入绑定</h2>
<h3 id="v-model基础用法"><code>v-model</code>基础用法</h3>
<p>可以使用<code>v-model</code>指令在表单<code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code>及<code>&lt;select&gt;</code>元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。<code>v-model</code>还可以在自定义的输入组件中使用。</p>
<p><code>v-model</code>指令本质上是语法糖，负责监听用户的输入事件以更新数据，并对一些极端场景进行特殊处理。</p>
<p><code>v-model</code>会<strong>忽略所有表单元素的<code>value</code>、<code>checked</code>、<code>selected</code> attribute 的初始值，并将Vue示例的数据作为数据来源。</strong>不过可以通过在JavaScript在组件的<code>data</code>选项中声明初始值。</p>
<p><code>v-model</code>在内部为不同的输入元素使用不同的preperty并抛出不同的事件：</p>
<ul>
<li>text和textarea元素使用<code>value</code> property和<code>input</code>事件</li>
<li>checkbox和radio使用<code>checked</code> property和<code>change</code>事件</li>
<li>select字段将<code>value</code>作为prop并将<code>change</code>作为事件</li>
</ul>
<p>注意：<code>v-model</code>不会在输入法组合文字过程中得到更新。若想处理这个过程，可以使用<code>input</code>事件处理。</p>
<h4 id="文本">文本</h4>
<p><code>v-model</code>用于表单中输入文本并绑定值时：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&quot;example&quot;&gt;</span><br><span class="line">    &lt;input v-model=&quot;message&quot; placeholder=&quot;edit me&quot;&gt;</span><br><span class="line">    &lt;p&gt;Message is:&#123;&#123;message&#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">    el:&#x27;#example&#x27;,</span><br><span class="line">    data:&#123;</span><br><span class="line">        message:&#x27;&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<p><img src="/2022/11/04/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E4%B8%89%EF%BC%89/12.png"></p>
<h4 id="多行文本">多行文本</h4>
<p><code>v-model</code>用于表单中输入多行文本textarea并绑定值时：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&quot;example&quot;&gt;</span><br><span class="line">    &lt;span&gt;Multiline message is :&lt;/span&gt;</span><br><span class="line">    &lt;p style=&quot;white-space:pre-line;&quot;&gt;&#123;&#123;message&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;br /&gt;</span><br><span class="line">    &lt;textarea v-model=&quot;message&quot; placeholder=&quot;add multiple lines&quot;&gt;&lt;/textarea&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">    el:&#x27;#example&#x27;,</span><br><span class="line">    data:&#123;</span><br><span class="line">        message:&#x27;&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<p><img src="/2022/11/04/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E4%B8%89%EF%BC%89/13.png"></p>
<p>注意：在文本区域插值(<code>&lt;textarea&gt;&#123;&#123;text&#125;&#125;&lt;/textarea&gt;</code>)并不会生效，要用<code>v-model</code>来代替。</p>
<h4 id="复选框">复选框</h4>
<p>单个复选框，将值绑定到布尔值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&quot;example&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;checkbox&quot; id=&quot;checkbox&quot; v-model=&quot;checked&quot;&gt;</span><br><span class="line">    &lt;label for=&quot;checkbox&quot;&gt;&#123;&#123;checked&#125;&#125;&lt;/label&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">    el:&#x27;#example&#x27;,</span><br><span class="line">    data:&#123;</span><br><span class="line">        checked:&#x27;&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<p><img src="/2022/11/04/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E4%B8%89%EF%BC%89/14.png"></p>
<p>多个复选框，将值绑定到同一个数组：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&quot;example&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;checkbox&quot; id=&quot;jack&quot; value=&quot;Jack&quot; v-model=&quot;checkedNames&quot;&gt;</span><br><span class="line">    &lt;label for=&quot;jack&quot;&gt;Jack&lt;/label&gt;</span><br><span class="line">    &lt;input type=&quot;checkbox&quot; id=&quot;john&quot; value=&quot;John&quot; v-model=&quot;checkedNames&quot;&gt;</span><br><span class="line">    &lt;label for=&quot;john&quot;&gt;John&lt;/label&gt;</span><br><span class="line">    &lt;input type=&quot;checkbox&quot; id=&quot;mike&quot; value=&quot;Mike&quot; v-model=&quot;checkedNames&quot;&gt;</span><br><span class="line">    &lt;label for=&quot;mike&quot;&gt;Mike&lt;/label&gt;</span><br><span class="line">    &lt;br /&gt;</span><br><span class="line">    &lt;span&gt;Checked names:&#123;&#123;checkedNames&#125;&#125;&lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">    el:&#x27;#example&#x27;,</span><br><span class="line">    data:&#123;</span><br><span class="line">        checkedNames:[]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<p><img src="/2022/11/04/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E4%B8%89%EF%BC%89/15.png"></p>
<h4 id="单选按钮">单选按钮</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&quot;example&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;radio&quot; id=&quot;one&quot; value=&quot;one&quot; v-model=&quot;picked&quot;&gt;</span><br><span class="line">    &lt;label for=&quot;one&quot;&gt;One&lt;/label&gt;</span><br><span class="line">    &lt;br /&gt;</span><br><span class="line">    &lt;input type=&quot;radio&quot; id=&quot;two&quot; value=&quot;Two&quot; v-model=&quot;picked&quot;&gt;</span><br><span class="line">    &lt;label for=&quot;two&quot;&gt;Two&lt;/label&gt;</span><br><span class="line">    &lt;br /&gt;</span><br><span class="line">    &lt;span&gt;Picked:&#123;&#123;picked&#125;&#125;&lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">    el:&#x27;#example&#x27;,</span><br><span class="line">    data:&#123;</span><br><span class="line">        picked:&#x27;&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<p><img src="/2022/11/04/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E4%B8%89%EF%BC%89/16.png"></p>
<h4 id="选择框">选择框</h4>
<p>需要单选时代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&quot;example&quot;&gt;</span><br><span class="line">    &lt;select v-model=&quot;selected&quot;&gt;</span><br><span class="line">      &lt;option disabled value=&quot;&quot;&gt;请选择&lt;/option&gt;</span><br><span class="line">      &lt;option&gt;A&lt;/option&gt;</span><br><span class="line">      &lt;option&gt;B&lt;/option&gt;</span><br><span class="line">      &lt;option&gt;C&lt;/option&gt;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    &lt;span&gt;Selected:&#123;&#123;selected&#125;&#125;&lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">    el:&#x27;#example&#x27;,</span><br><span class="line">    data:&#123;</span><br><span class="line">        selected:&#x27;&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<p><img src="/2022/11/04/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E4%B8%89%EF%BC%89/17.png"></p>
<p><strong>若<code>v-model</code>表达式的初始值未能匹配任何选项，<code>&lt;select&gt;</code>元素将被渲染为未选中的状态。</strong>在iOS中这会使用户无法选择第一个选项。因此<strong>推荐提供一个值为空的禁用选项。</strong></p>
<p>多选时即将值绑定到一个数组中：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&quot;example&quot;&gt;</span><br><span class="line">    &lt;select v-model=&quot;selected&quot; multiple style=&quot;width:50px;&quot;&gt;</span><br><span class="line">      &lt;option&gt;A&lt;/option&gt;</span><br><span class="line">      &lt;option&gt;B&lt;/option&gt;</span><br><span class="line">      &lt;option&gt;C&lt;/option&gt;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    &lt;span&gt;Selected:&#123;&#123;selected&#125;&#125;&lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">    el:&#x27;#example&#x27;,</span><br><span class="line">    data:&#123;</span><br><span class="line">        selected:[]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<p><img src="/2022/11/04/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E4%B8%89%EF%BC%89/18.png"></p>
<p>配合<code>v-for</code>渲染的动态选项，其代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&quot;example&quot;&gt;</span><br><span class="line">    &lt;select v-model=&quot;selected&quot;&gt;</span><br><span class="line">      &lt;option v-for=&quot;option in options&quot; v-bind:value=&quot;option.value&quot;&gt; </span><br><span class="line">        &#123;&#123;option.text&#125;&#125;</span><br><span class="line">      &lt;/option&gt; </span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    &lt;span&gt;Selected:&#123;&#123;selected&#125;&#125;&lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">    el:&#x27;#example&#x27;,</span><br><span class="line">    data:&#123;</span><br><span class="line">        selected:&#x27;A&#x27;,</span><br><span class="line">        options:[</span><br><span class="line">            &#123;text:&#x27;One&#x27;,value:&#x27;A&#x27;&#125;,</span><br><span class="line">            &#123;text:&#x27;Two&#x27;,value:&#x27;B&#x27;&#125;,</span><br><span class="line">            &#123;text:&#x27;Three&#x27;,value:&#x27;C&#x27;&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<p><img src="/2022/11/04/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E4%B8%89%EF%BC%89/19.png"></p>
<h3 id="值绑定">值绑定</h3>
<p>对于单选按钮、复选框及选择框的选项，<code>v-model</code>绑定的值通常是静态字符串（对于复选框来说是布尔值）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 当选中时，picked字符串为a --&gt;</span><br><span class="line">&lt;input type=&quot;radio&quot; v-model=&quot;picked&quot; value=&quot;a&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- toggle为true或false --&gt;</span><br><span class="line">&lt;input type=&quot;checkbox&quot; v-model=&quot;toggle&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 当选中第一个选项时，selected为字符串abc --&gt;</span><br><span class="line">&lt;select v-model=&quot;selected&quot;&gt;</span><br><span class="line">  &lt;option value=&quot;abc&quot;&gt;ABC&lt;/option&gt;    </span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>
<p>当想把值绑定到Vue实例的一个动态property上时，可以使用<code>v-bind</code>实现，且这个property的值可以不是字符串。</p>
<h4 id="复选框-1">复选框</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;checkbox&quot; v-model=&quot;toggle&quot; true-value=&quot;yes&quot; false-value=&quot;no&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 当选中时 --&gt;</span><br><span class="line">vm.toggle===&#x27;yes&#x27;</span><br><span class="line">&lt;!-- 当没有选中时 --&gt;</span><br><span class="line">vm.toggle===&#x27;no&#x27;</span><br></pre></td></tr></table></figure>
<p>由于浏览器在提交表单时并不会包含未被选中的复选框，因此这里的<code>true-value</code>和<code>false-value</code> attribute并不会影响输入控件的<code>value</code> attribute。若要确保表单中这两个值中的一个能够被提交，则要换用单选按钮。</p>
<h4 id="单选按钮-1">单选按钮</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;radio&quot; v-model=&quot;pick&quot; v-bind:value=&quot;a&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 当选中时 --&gt;</span><br><span class="line">vm.pick===vm.a</span><br></pre></td></tr></table></figure>
<h4 id="选择框的选项">选择框的选项</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;select v-model=&quot;selected&quot;&gt;</span><br><span class="line">  &lt;option v-bind:value=&quot;&#123;number:123&#125;&quot;&gt;123&lt;/option&gt;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 当选中时 --&gt;</span><br><span class="line">typeof vm.selected</span><br><span class="line">&lt;!-- vm.selected的类型为object--&gt;</span><br><span class="line">vm.selected.number</span><br><span class="line">&lt;!-- selected.number的值为123--&gt;</span><br></pre></td></tr></table></figure>
<h3 id="修饰符">修饰符</h3>
<h4 id="lazy"><code>.lazy</code></h4>
<p>在默认情况下，<code>v-model</code>在每次<code>input</code>事件触发后将输入框的值与数据进行同步。若将其转为在<code>change</code>事件之后进行同步，可以添加<code>.lazy</code>修饰符：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--在change时更新，而不是在input时--&gt;</span><br><span class="line">&lt;input v-model.lazy=&quot;msg&quot;&gt;</span><br></pre></td></tr></table></figure>
<h4 id="number"><code>.number</code></h4>
<p>即使在<code>type="number"</code>时，HTML输入元素的值也总会返回字符串。若这个值无法被<code>parseFloat()</code>解析，则会返回原始的值。</p>
<p>若想自动将用户的输入值转为数值类型，可以给<code>v-model</code>添加<code>number</code>修饰符：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input v-model.number=&quot;age&quot; type=&quot;number&quot;&gt;</span><br></pre></td></tr></table></figure>
<h4 id="trim"><code>.trim</code></h4>
<p>若想要自动过滤用户输入的首尾空白字符，可以给<code>v-model</code>添加<code>trim</code>修饰符：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input v-model.trim=&quot;msg&quot;&gt;</span><br></pre></td></tr></table></figure>
<h2 id="组件基础">组件基础</h2>
<h3 id="基本实例">基本实例</h3>
<p>一个Vue组件的实例如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&quot;example&quot;&gt;</span><br><span class="line">    &lt;button-counter&gt;&lt;/button-counter&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">//定义了一个名为button-counter的新组件    </span><br><span class="line">Vue.component(&#x27;button-counter&#x27;,&#123;</span><br><span class="line">    data:function()&#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            count:0</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    template:&#x27;&lt;button v-on:click=&quot;count++&quot;&gt;You clicked me &#123;&#123;count&#125;&#125; times.&lt;/button&gt;&#x27;</span><br><span class="line">&#125;)</span><br><span class="line">new Vue(&#123;</span><br><span class="line">    el:&#x27;#example&#x27;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>因为组件是可复用的Vue实例，所有它与<code>new Vue</code>接收相同的选项，如<code>data</code>、<code>computed</code>、<code>watch</code>、<code>methods</code>以及生命周期钩子等，像<code>el</code>这种根特例特有的选项除外。</p>
<h3 id="组件的复用">组件的复用</h3>
<p>组件可以进行任意次数的复用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&quot;example&quot;&gt;</span><br><span class="line">    &lt;button-counter&gt;&lt;/button-counter&gt;</span><br><span class="line">    &lt;button-counter&gt;&lt;/button-counter&gt;</span><br><span class="line">    &lt;button-counter&gt;&lt;/button-counter&gt;</span><br><span class="line">    &lt;button-counter&gt;&lt;/button-counter&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<p>由于每用一次组件，就由一个组件的新实例被创建，因此当点击按钮时，每个组件都会各自独立维护自己的<code>count</code>。</p>
<h4 id="data必须是一个函数">data必须是一个函数</h4>
<p>在定义组件的过程中，data并不是直接提供一个对象或是变量的值。组件的data选项必须是一个函数，因此每个实例可以维护一份独立的被返回的拷贝：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">data</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">count</span>:<span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="组件的组织">组件的组织</h3>
<p>通常一个应用会以一颗嵌套的组件树的形式来组织，一个应用由各类组件组成。</p>
<p>为了能在模板中使用，这些组件必须先注册以便Vue能够识别。</p>
<p>组件的注册类型有两种：全局注册和局部注册。</p>
<p>组件通过<code>Vue.component</code>来进行全局注册：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;component-name&#x27;</span>,&#123;</span><br><span class="line">  <span class="comment">//options</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>全局注册的组件可以用在其被注册之后的任何通过<code>new Vue</code>新创建的Vue根实例，包括其组件树种的左右子组件的模板。</p>
<h3 id="通过prop向子组件传递数据">通过Prop向子组件传递数据</h3>
<p>通过Prop可以在组件上注册一些自定义attribute。当一个值传递给一个prop attribute时会变成那个组件实例的一个property。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&quot;example&quot;&gt;</span><br><span class="line">    &lt;post-counter title=&quot;Blogging with Vue&quot;&gt;&lt;/post-counter&gt;</span><br><span class="line">    &lt;post-counter title=&quot;Hello world&quot;&gt;&lt;/post-counter&gt;</span><br><span class="line">    &lt;post-counter title=&quot;Zhangsan&quot;&gt;&lt;/post-counter&gt;</span><br><span class="line">    &lt;post-counter title=&quot;My journey with Vue&quot;&gt;&lt;/post-counter&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">Vue.component(&#x27;post-counter&#x27;,&#123;</span><br><span class="line">    props:[&#x27;title&#x27;],</span><br><span class="line">    template:&#x27;&lt;h3&gt;&#123;&#123;title&#125;&#125;&lt;/h3&gt;&#x27;</span><br><span class="line">&#125;)</span><br><span class="line">new Vue(&#123;</span><br><span class="line">    el:&#x27;#example&#x27;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>一个组件默认可以拥有任意数量的prop，任何值都可以传递给任何prop。</p>
<p>一个prop被注册后，就可以把数据作为一个自定义attribute传递到子组件中。</p>
<p>与此同时，也可以使用<code>v-bind</code>来动态传递prop：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&quot;example&quot;&gt;</span><br><span class="line">    &lt;post-counter v-for=&quot;post in posts&quot; v-bind:key=&quot;post.id&quot; v-bind:title=&quot;post.title&quot;&gt;&lt;/post-counter&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">Vue.component(&#x27;post-counter&#x27;,&#123;</span><br><span class="line">    props:[&#x27;title&#x27;],</span><br><span class="line">    template:&#x27;&lt;h3&gt;&#123;&#123;title&#125;&#125;&lt;/h3&gt;&#x27;</span><br><span class="line">&#125;)</span><br><span class="line">new Vue(&#123;</span><br><span class="line">    el:&#x27;#example&#x27;,</span><br><span class="line">    data:&#123;</span><br><span class="line">        posts:[</span><br><span class="line">            &#123;id:1,title:&#x27;Blogging with Vue&#x27;&#125;,</span><br><span class="line">            &#123;id:2,title:&#x27;Hello world&#x27;&#125;,</span><br><span class="line">            &#123;id:3,title:&#x27;Zhangsan&#x27;&#125;,</span><br><span class="line">            &#123;id:4,title:&#x27;My journey with Vue&#x27;&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h3 id="单个根元素">单个根元素</h3>
<p>当构建一个<code>post-counter</code>组件时，模板里最终包含的东西远不止一个标题信息，至少会包含正文的信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;h3&gt;&#123;&#123;title&#125;&#125;&lt;/h3&gt;</span><br><span class="line">&lt;div v-html=&quot;content&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>但在模板中这样写时，Vue会显示一个错误说每个组件必须只有一个根元素。因此需要将模板中的内容包裹在一个父元素<code>&lt;div&gt;</code>内，如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;post-counter&quot;&gt;</span><br><span class="line">  &lt;h3&gt;&#123;&#123;title&#125;&#125;&lt;/h3&gt;</span><br><span class="line">  &lt;div v-html=&quot;content&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>当不满足于标题和内容信息时，组件会变得越来越复杂。此时为每个相关的信息都定义一个prop会变得很麻烦。故此时需要重构组件，让组件变成接收一个单独的<code>post</code> prop：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&quot;example&quot;&gt;</span><br><span class="line">    &lt;post-counter </span><br><span class="line">      v-for=&quot;post in posts&quot; </span><br><span class="line">      v-bind:key=&quot;post.id&quot; </span><br><span class="line">      v-bind:post=&quot;post&quot;&gt;&lt;/post-counter&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">Vue.component(&#x27;post-counter&#x27;,&#123;</span><br><span class="line">    props:[&#x27;post&#x27;],</span><br><span class="line">    template:`</span><br><span class="line">      &lt;div class=&quot;post-counter&quot;&gt;  </span><br><span class="line">        &lt;h3&gt;&#123;&#123;post.title&#125;&#125;&lt;/h3&gt;</span><br><span class="line">        &lt;div v-html=&quot;post.content&quot;&gt;&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;  `</span><br><span class="line">&#125;)</span><br><span class="line">new Vue(&#123;</span><br><span class="line">    el:&#x27;#example&#x27;,</span><br><span class="line">    data:&#123;</span><br><span class="line">        posts:[</span><br><span class="line">            &#123;id:1,title:&#x27;Blogging with Vue&#x27;&#125;,</span><br><span class="line">            &#123;id:2,title:&#x27;Hello world&#x27;&#125;,</span><br><span class="line">            &#123;id:3,title:&#x27;Zhangsan&#x27;&#125;,</span><br><span class="line">            &#123;id:4,title:&#x27;My journey with Vue&#x27;&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>无论何时为post对象添加新的property，都能自动地在重构后的组件内可用。</p>
<h3 id="监听子组件事件">监听子组件事件</h3>
<p>在开发组件时，其一些功能可能要求和父级组件进行沟通。如引入一个辅助功能来放大博文部分的字号，同时让页面的其他部分保持默认的字号。</p>
<p>则可以在父组件中添加一个<code>postFontSize</code>数据 property：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&quot;example&quot;&gt;</span><br><span class="line">    &lt;!-- 在模板中用来控制所有博文的字号 --&gt;</span><br><span class="line">    &lt;div :style=&quot;&#123;fontSize:postFontSize+&#x27;em&#x27;&#125;&quot;&gt;</span><br><span class="line">      &lt;!-- 增加监听器，父级组件可通过v-on监听子组件实例的事件，可接收该事件并刷新对应的值 --&gt;</span><br><span class="line">      &lt;post-counter </span><br><span class="line">      v-for=&quot;post in posts&quot; </span><br><span class="line">      v-bind:key=&quot;post.id&quot; </span><br><span class="line">      v-bind:post=&quot;post&quot;</span><br><span class="line">      v-on:enlarge-text=&quot;postFontSize+=0.1&quot;</span><br><span class="line">    &gt;&lt;/post-counter&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;  </span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">Vue.component(&#x27;post-counter&#x27;,&#123;</span><br><span class="line">    props:[&#x27;post&#x27;],</span><br><span class="line">    //添加一个放大字号的按钮,通过调用$emit方法并传入事件名称类触发一个事件</span><br><span class="line">    template:`</span><br><span class="line">      &lt;div class=&quot;post-counter&quot;&gt;  </span><br><span class="line">        &lt;h3&gt;&#123;&#123;post.title&#125;&#125;&lt;/h3&gt;</span><br><span class="line">        &lt;button v-on:click=&quot;$emit(&#x27;enlarge-text&#x27;)&quot;&gt;</span><br><span class="line">            Enlarge text</span><br><span class="line">        &lt;/button&gt;    </span><br><span class="line">        &lt;div v-html=&quot;post.content&quot;&gt;&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;  `</span><br><span class="line">&#125;)</span><br><span class="line">new Vue(&#123;</span><br><span class="line">    el:&#x27;#example&#x27;,</span><br><span class="line">    data:&#123;</span><br><span class="line">        posts:[</span><br><span class="line">            &#123;id:1,title:&#x27;Blogging with Vue&#x27;&#125;,</span><br><span class="line">            &#123;id:2,title:&#x27;Hello world&#x27;&#125;,</span><br><span class="line">            &#123;id:3,title:&#x27;Zhangsan&#x27;&#125;,</span><br><span class="line">            &#123;id:4,title:&#x27;My journey with Vue&#x27;&#125;</span><br><span class="line">        ],</span><br><span class="line">        postFontSize:1//添加postFontSize数据property</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h4 id="使用事件抛出一个值">使用事件抛出一个值</h4>
<p>用一个事件来抛出一个特定的值是非常实用的。如上面例子中，想让<code>post-counter</code>组件自行决定它的文本要放大多少，就是使用<code>$emit</code>的第二个参数来提供这个值：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;$emit(&#x27;enlarge-text&#x27;)&quot;</span>&gt;</span></span><br><span class="line">    Enlarge text</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span>  </span><br></pre></td></tr></table></figure>
<p>当父级组件监听这个事件时，可以通过<code>$emit</code>访问到被抛出的这个值：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">v-on:enlarge-text=&quot;postFontSize+=$event&quot;</span><br></pre></td></tr></table></figure>
<p>若事件处理函数是一个方法，则这个值将会作为第一个参数传入这个方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;post-counter </span><br><span class="line">  v-for=&quot;post in posts&quot; </span><br><span class="line">  v-bind:key=&quot;post.id&quot; </span><br><span class="line">  v-bind:post=&quot;post&quot;</span><br><span class="line">  v-on:enlarge-text=&quot;onEnlargeText&quot;</span><br><span class="line">&gt;&lt;/post-counter&gt;</span><br><span class="line"></span><br><span class="line">methods:&#123;</span><br><span class="line">    onEnlargeText:function(enlargeAmount)&#123;</span><br><span class="line">        this.postFontSize+=enlargeAmount</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="在组件上使用v-model">在组件上使用<code>v-model</code></h4>
<p>自定义事件也可以用于创建支持<code>v-model</code>的自定义输入组件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input v-model=&quot;searchText&quot;&gt;</span><br><span class="line">&lt;!-- 等价于 --&gt;</span><br><span class="line">&lt;input </span><br><span class="line">  v-bind:value=&quot;searchText&quot;</span><br><span class="line">  v-on:input=&quot;searchText=$event.target.value&quot;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
<p>当用在组件上时，<code>v-model</code>则会变成这样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;custom-input </span><br><span class="line">  v-bind:value=&quot;searchText&quot;</span><br><span class="line">  v-on:input=&quot;searchText=$event&quot;</span><br><span class="line">&gt;&lt;/custom-input&gt;</span><br></pre></td></tr></table></figure>
<p>为了使<code>v-model</code>能够正常工作，这个组件内的<code>&lt;input&gt;</code>必须将其<code>value</code> attribute绑定到名叫<code>value</code>的prop上，并在其<code>input</code>事件被触发时，将新的值通过自定义的<code>input</code>事件抛出，即：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!--调用组件--&gt;</span><br><span class="line">    &lt;custom-input v-model=&quot;searchText&quot;&gt;&lt;/custom-input&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">Vue.component(&#x27;custom-input&#x27;,&#123;</span><br><span class="line">    props:[&#x27;value&#x27;],</span><br><span class="line">    template:`</span><br><span class="line">      &lt;input</span><br><span class="line">        v-bind:value=&quot;value&quot;</span><br><span class="line">        v-on:input=&quot;$emit(&#x27;input&#x27;,$event.target.value)&quot;</span><br><span class="line">      &gt;  </span><br><span class="line">    `</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h3 id="通过插槽分发内容">通过插槽分发内容</h3>
<p>Vue自定义的<code>&lt;slot&gt;</code>元素可以向一个组件传递内容，只要在需要的地方加入插槽就行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Vue.component(&#x27;alert-box&#x27;,&#123;</span><br><span class="line">    template:`</span><br><span class="line">      &lt;div class=&quot;demo-alert-box&quot;&gt;</span><br><span class="line">        &lt;strong&gt;Error!&lt;/strong&gt;</span><br><span class="line">        &lt;slot&gt;&lt;/slot&gt;  </span><br><span class="line">	  &lt;/div&gt;  </span><br><span class="line">    `</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="动态组件">动态组件</h3>
<p>可以通过Vue的<code>&lt;component&gt;</code>元素加一个特殊的<code>is</code> attribute实现<strong>在不同组件之间进行动态切换</strong>，如在一个多标签的页面里实现无跳转切换标签：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 组件会在currentTabComponent改变时改变 --&gt;</span><br><span class="line">&lt;component v-bind:is=&quot;currentTabComponent&quot;&gt;&lt;/component&gt;</span><br></pre></td></tr></table></figure>
<p>其中，<code>currentTabComponent</code>可以包括已注册组件的名字或是一个组件的选项对象。</p>
<p>这个attribute可以用于常规HTML元素，但这些元素将被视为组件，即所有的attribute都会作为DOM attribute被绑定。若想让其正常工作，则需要使用<code>.prop</code>修饰器。</p>
<h3 id="解析dom模板时的注意事项">解析DOM模板时的注意事项</h3>
<p>对于一些HTML元素如<code>&lt;ul&gt;</code>、<code>&lt;ol&gt;</code>、<code>&lt;table&gt;</code>和<code>&lt;select&gt;</code>，哪些可以出现在其内部是由严格限制的。而另一些HTML元素如<code>&lt;li&gt;</code>、<code>&lt;tr&gt;</code>和<code>&lt;option&gt;</code>，只能出现在其其他某些特定的元素内部。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--自定义组件blog-post-row会被作为无效内容--&gt;</span><br><span class="line">&lt;table&gt;</span><br><span class="line">  &lt;blog-post-row&gt;&lt;/blog-post-row&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--使用is attribute可以让自定义组件不会被作为无效内容--&gt;</span><br><span class="line">&lt;table&gt;</span><br><span class="line">  &lt;tr is=&quot;blog-post-row&quot;&gt;&lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure>
<p>若是从以下来源使用模板则没有这个限制：</p>
<ul>
<li>字符串</li>
<li>单文件组件（<code>.vue</code>）</li>
<li><code>&lt;script type="text/x-template"&gt;</code></li>
</ul>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>前端</category>
        <category>前端框架</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>前端框架之Vue.js（二）</title>
    <url>/2022/11/04/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h1 id="vue.js基础">Vue.js基础</h1>
<h2 id="模板语法">模板语法</h2>
<p>Vue.js使用了基于HTML的模板语法，允许开发者声明式地将DOM绑定至底层Vue实例的数据。所有的Vue.js模板都是合法的HTML。</p>
<h3 id="插值">插值</h3>
<h4 id="文本">文本</h4>
<p>数据绑定最常见的形式就是使用"Mustache"语法（双大括号）的文本插值：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>message:&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> app=<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>:&#123;</span><br><span class="line">        <span class="attr">message</span>:<span class="string">&#x27;Hello Vue!&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>Mustache标签将会被替代为对应数据对象上<code>msg</code> property的值。当绑定的数据对象上<code>msg</code> property发生了改变，插值的内容都会更新。</p>
<p>使用<code>v-once</code>指令，可以执行一次性地插值。当数据改变时，插值处的内容不会更新，但这会影响到该节点上的其他数据绑定：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-once</span>&gt;</span>本句话将不会改变：&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>    </span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="property">message</span>=<span class="string">&#x27;nihao&#x27;</span></span><br></pre></td></tr></table></figure>
<h4 id="原始html">原始HTML</h4>
<p>双大括号会将数据解释为普通文本，并非是HTML代码。使用<code>v-html</code>指令可以输出HTML代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Using mushaches:&#123;&#123;rewHtml&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Using v-html directive:<span class="tag">&lt;<span class="name">span</span> <span class="attr">v-html</span>=<span class="string">&quot;rewHtml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> app=<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>:&#123;</span><br><span class="line">        <span class="attr">message</span>:<span class="string">&#x27;Hello Vue!&#x27;</span>,</span><br><span class="line">        <span class="attr">rewHtml</span>:<span class="string">&#x27;&lt;span style=&quot;color:red&quot;&gt;This should be red.&lt;/span&gt;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>这个<code>span</code>的内容将会被替换成为property值<code>rawHtml</code>，忽略解析property值中的数据绑定后，直接作为HTML。<strong>注意不能使用<code>v-html</code>来复合局部模板。</strong></p>
<p>在站点上动态渲染任意的HTML可能会非常危险，其很容易导致XSS攻击。因此要只对可信内容使用HTML插值，不要对用户提供的内容使用插值。</p>
<h4 id="attribute">Attribute</h4>
<p>Mustache语法不能作用在HTML attribute上，此时应该使用<code>v-bind</code>指令：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">&quot;dynamicId&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-bind:disabled</span>=<span class="string">&quot;isButtonDisabled&quot;</span>&gt;</span>Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> app=<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&#x27;#dynamicId&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>:&#123;</span><br><span class="line">        <span class="attr">isButtonDisabled</span>:<span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>若<code>isButtonDisabled</code>的值是<code>null</code>、<code>undefined</code>或<code>false</code>，则<code>disable</code>attribute是不会被包含在渲染出来的<code>&lt;button&gt;</code>元素中。</p>
<h4 id="使用javascript表达式">使用JavaScript表达式</h4>
<p>对于所有的数据绑定，Vue.js提供了完全的JavaScript表达式支持。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;p&gt;number:&#123;&#123;number+1&#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;ok:&#123;&#123;ok?&#x27;YES&#x27;:&#x27;NO&#x27;&#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;&#123;&#123;message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;)&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var app=new Vue(&#123;</span><br><span class="line">        el:&#x27;#app&#x27;,</span><br><span class="line">        data:&#123;</span><br><span class="line">            number:123,</span><br><span class="line">            ok:&#x27;1&gt;2&#x27;,</span><br><span class="line">            message:&#x27;hello&#x27;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;xxxxxxxxxx17 1&lt;body&gt;2    &lt;div id=&quot;app&quot;&gt;3        &lt;p&gt;number:&#123;&#123;number+1&#125;&#125;&lt;/p&gt;4        &lt;p&gt;ok:&#123;&#123;ok?&#x27;YES&#x27;:&#x27;NO&#x27;&#125;&#125;&lt;/p&gt;5        &lt;p&gt;&#123;&#123;message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;)&#125;&#125;&lt;/p&gt;6    &lt;/div&gt;7&lt;/body&gt;8&lt;script&gt;9    var app=new Vue(&#123;10        el:&#x27;#app&#x27;,11        data:&#123;12            number:123,13            ok:&#x27;1&gt;2&#x27;,14            message:&#x27;hello&#x27;,15        &#125;16    &#125;)17&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>上述表达式会在所属Vue实例的数据作用域下作为JavaScript被解析。注意：每个绑定都只能包含单个表达式。因此下面的例子不会生效：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--这是语句，不是表达式--&gt;</span><br><span class="line">&#123;&#123;var a=1&#125;&#125;</span><br><span class="line">&lt;!--流控制也不会生效，请使用三元表达式--&gt;</span><br><span class="line">&#123;&#123;if (ok)&#123; return message &#125;&#125;&#125;</span><br></pre></td></tr></table></figure>
<p><strong>模板表达式</strong>都被放在沙盒中，<strong>只能访问全局变量的一个白名单</strong>，如Math和Date。不要在模板表达式中视图访问用户定义的全局变量。</p>
<h3 id="指令">指令</h3>
<p>指令是带有<code>v-</code>前缀的特殊attribute。指令attribute的值预期是<strong>单个JavaScript表达式</strong>（<code>v-for</code>除外）指令的职责是，当表达式的值改变时，将其产生的连带影响，响应式地作用于DOM，如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;seen&quot;</span>&gt;</span>现在可以看到我<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在这里，<code>v-if</code>指令将根据表达式<code>seen</code>值的真假来插入/移除<code>&lt;p&gt;</code>元素。</p>
<h4 id="参数">参数</h4>
<p>一些指令能够接收一个“参数”，在指令名称之后以冒号表示。如<code>v-bind</code>指令可以用于响应式地更新HTML attribute:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在这里，<code>href</code>是参数，告知<code>v-bind</code>指令将该元素的<code>href</code> attribute与表达式<code>url</code>的值绑定。</p>
<p>另一个<code>v-on</code>指令可用于监听DOM事件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click</span>=<span class="string">&quot;doSomething&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在这里参数是监听的事件名。</p>
<h4 id="动态参数">动态参数</h4>
<p>从Vue2.6.0开始，可以用方括号括起来的JavaScript表达式作为一个指令的参数：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:</span>[<span class="attr">attributeName</span>]=<span class="string">&quot;url&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这里的<code>attributeName</code>会被作为一个JavaScript表达式进行动态求值，求得的值将会作为最终的参数来使用。如，若Vue实例中有一个名为<code>attributeName</code>的<code>data</code>property，其值为<code>href</code>，则上面的语句等价于<code>v-bind:href="url"</code>。</p>
<p>动态参数可以为一个动态的事件名绑定处理函数：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:</span>[<span class="attr">eventName</span>]=<span class="string">&quot;doSomething&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在这里，当<code>eventName</code>的值为<code>"focus"</code>时，<code>v-on:&#123;eventName&#125;</code>将等价于<code>v-on:focus</code>。</p>
<p><strong>对动态参数值的约束</strong>：</p>
<p>动态函数预期会求出一个字符串，异常情况下值为<code>null</code>。这个特殊的<code>null</code>值可以被显性地用于移除绑定。任何其它非字符串类型的值都将会触发一个警告。</p>
<p><strong>对动态参数表达式的约束：</strong></p>
<p>动态参数表达式有一些语法约束，如空格和引号，放在HTML attribute名里是无效的。因此使用没有空格或引号的表达式，或使用计算属性来替代这种复杂表达式。</p>
<p>在DOM中使用模板时（即直接在HTML文件里撰写模板），由于浏览器会把attribute名全部强制转为小写，还要避免使用大写字符来命名键名。</p>
<h4 id="修饰符">修饰符</h4>
<p>修饰符是以半角句号<code>.</code>指明的特殊后缀，用于指出一个指令应该以特殊方式绑定。如<code>.prevent</code>修饰符告诉<code>v-on</code>指令对于触发的事件调用<code>event.preventDefault()</code>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>=<span class="string">&quot;onSubmit&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="缩写">缩写</h3>
<p><code>v-</code>前缀作为一种视觉提示，用来识别模板中Vue特定的attribute。<code>v-</code>前缀有助于为现有标签添加动态行为，但在一些频繁用到的指令以及构建由Vue管理所有模板的单页面应用程序里，<code>v-</code>前缀的作用不大。</p>
<h4 id="v-bind缩写"><code>v-bind</code>缩写</h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 完整语法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 缩写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 动态参数的缩写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:</span>[<span class="attr">key</span>]=<span class="string">&quot;url&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a:</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="v-on缩写"><code>v-on</code>缩写</h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 完整语法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click</span>=<span class="string">&quot;doSomething&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 缩写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">&quot;doSomething&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 动态参数的缩写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> @[<span class="attr">event</span>]=<span class="string">&quot;doSomething&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a:</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="计算属性和侦听器">计算属性和侦听器</h2>
<h3 id="计算属性">计算属性</h3>
<p>对于任何复杂逻辑，应当使用计算属性。</p>
<h4 id="基础例子">基础例子</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;example&quot;&gt;</span><br><span class="line">        &lt;p&gt;Original message:&quot;&#123;&#123;message&#125;&#125;&quot;&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;Computed reversed message:&quot;&#123;&#123;reversedMessage&#125;&#125;&quot;&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var vm=new Vue(&#123;</span><br><span class="line">        el:&#x27;#example&#x27;,</span><br><span class="line">        data:&#123;</span><br><span class="line">            message:&#x27;Hello&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        computed:&#123;</span><br><span class="line">            reversedMessage:function()&#123;</span><br><span class="line">                return this.message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>在这里声明了一个计算属性<code>reversedMessage</code>，提供的函数将用作property<code>vm.reversedMessage</code>的getter函数。</p>
<p>打开F12中的JavaScript控制台，输入以下JavaScript代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(vm.<span class="property">reversedMessage</span>)</span><br><span class="line"><span class="comment">//返回olleH</span></span><br><span class="line">vm.<span class="property">message</span>=<span class="string">&#x27;Goodbye&#x27;</span></span><br><span class="line"><span class="comment">//返回&#x27;Goodbye&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(vm.<span class="property">reversedMessage</span>)</span><br><span class="line"><span class="comment">//返回eybdooG</span></span><br></pre></td></tr></table></figure>
<p>可以看到，<code>vm.reversedMessage</code>的值始终取决于<code>vm.message</code>的值。</p>
<p><code>vm.reversedMessage</code>依赖于<code>vm.message</code>，因此当<code>vm.message</code>发生改变时，所有依赖<code>vm.reversedMessage</code>的绑定也会更新。由于已经以声明的方式创建了这种依赖关系，因此计算属性的getter函数是没有副作用的。</p>
<h4 id="计算属性缓存-vs-方法">计算属性缓存 vs 方法</h4>
<p>通过在表达式中调用方法也可以达到与基础例子同样的效果，将同一函数定义为一个方法而不是一个计算属性：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;example&quot;&gt;</span><br><span class="line">        &lt;p&gt;Reverssed message:&quot;&#123;&#123;reversedMessage()&#125;&#125;&quot;&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var vm=new Vue(&#123;</span><br><span class="line">        el:&#x27;#example&#x27;,</span><br><span class="line">        data:&#123;</span><br><span class="line">            message:&#x27;hello&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            reversedMessage:function()&#123;</span><br><span class="line">                return this.message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>打开F12中的JavaScript控制台，输入以下JavaScript代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(vm.<span class="title function_">reversedMessage</span>())</span><br><span class="line"><span class="comment">//返回olleh</span></span><br><span class="line">vm.<span class="property">message</span>=<span class="string">&#x27;exam&#x27;</span></span><br><span class="line"><span class="comment">//返回&#x27;exam&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(vm.<span class="title function_">reversedMessage</span>())</span><br><span class="line"><span class="comment">//返回maxe</span></span><br></pre></td></tr></table></figure>
<p>可以看到这两种方式的最终结果是相同的。不同的是<strong>计算属性是基于响应式依赖进行缓存的。</strong>只在相关响应式依赖发生改变时它们才会重新求值。也就是说，只要<code>message</code>还没有发生改变，多次访问<code>reversedMessage</code>计算属性会立即返回之前的计算结果，而不必再次执行函数。但这也意味着下面的计算属性将不再更新，因为其不是响应式依赖：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">computed</span>:&#123;</span><br><span class="line">    <span class="attr">now</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>而每次触发重新渲染时，调用方法总会再次执行函数。</p>
<h4 id="计算属性-vs-侦听属性">计算属性 vs 侦听属性</h4>
<p>Vue的侦听属性可以用来观察和响应Vue实例上的数据变动。当有一些数据需要随着其他数据变动而变动时，很容易会滥用<code>watch</code>。通常更好的做法是使用计算数学而不是命令是的<code>watch</code>回调。</p>
<p><code>watch</code>回调版本的代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;demo&quot;&gt;</span><br><span class="line">        &#123;&#123;fullName&#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var vm=new Vue(&#123;</span><br><span class="line">        el:&#x27;#demo&#x27;,</span><br><span class="line">        data:&#123;</span><br><span class="line">            firstName:&#x27;Foo&#x27;,</span><br><span class="line">            lastName:&#x27;Bar&#x27;,</span><br><span class="line">            fullName:&#x27;Foo Bar&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        watch:&#123;</span><br><span class="line">            firstName:function(val)&#123;</span><br><span class="line">                this.fullName=val+&#x27; &#x27;+this.lastName</span><br><span class="line">            &#125;,</span><br><span class="line">            lastName:function(val)&#123;</span><br><span class="line">                this.fullName=this.firstName+&#x27; &#x27;+val</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>计算属性版本的代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;demo&quot;&gt;</span><br><span class="line">        &#123;&#123;fullName&#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var vm=new Vue(&#123;</span><br><span class="line">        el:&#x27;#demo&#x27;,</span><br><span class="line">        data:&#123;</span><br><span class="line">            firstName:&#x27;Foo&#x27;,</span><br><span class="line">            lastName:&#x27;Bar&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        computed:&#123;</span><br><span class="line">            fullName:function()&#123;</span><br><span class="line">                return this.fullName=this.firstName+&#x27; &#x27;+this.lastName</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>由此可见计算属性版本的代码比<code>watch</code>回调版本的代码好多了。</p>
<h4 id="计算属性的setter">计算属性的setter</h4>
<p>计算属性默认只有getter，但在需要时也可以提供一个setter：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">computed</span>:&#123;</span><br><span class="line">    <span class="attr">fullName</span>:&#123;</span><br><span class="line">        <span class="comment">//getter</span></span><br><span class="line">        <span class="attr">get</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span>+<span class="string">&#x27; &#x27;</span>+<span class="variable language_">this</span>.<span class="property">lastName</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//setter</span></span><br><span class="line">        <span class="attr">set</span>:<span class="keyword">function</span>(<span class="params">newValue</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> names=newValue.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">firstName</span>=names[<span class="number">0</span>]</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">lastName</span>=names[names.<span class="property">length</span>-<span class="number">1</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打开F12中的JavaScript控制台，运行<code>vm.fullName='zhangsan'</code>时，setter会被调用，<code>vm.firstName</code>和<code>vm.lastName</code>也会随之更新。</p>
<h3 id="侦听器">侦听器</h3>
<p>虽然计算属性在大多数情况下更合适，但有时也需要一个自定义的侦听器。<strong>当需要在数据变化时执行异步或开销较大的操作时，自定义侦听器的方式是最有用的。</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;   </span><br><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/axios@0.12.0/dist/axios.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/lodash@4.13.1/lodash.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;watch-example&quot;&gt;</span><br><span class="line">        &lt;p&gt;Ask a yes/no question:</span><br><span class="line">            &lt;input v-model=&quot;question&quot;&gt;</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">        &lt;p&gt;&#123;&#123;answer&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var watchExampleVM=new Vue(&#123;</span><br><span class="line">        el:&#x27;#watch-example&#x27;,</span><br><span class="line">        data:&#123;</span><br><span class="line">            question:&#x27;&#x27;,</span><br><span class="line">            answer:&#x27;I cannot give you an answer until you ask a question!&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        watch:&#123;</span><br><span class="line">            question:function(newQuestion,oldQuestion)&#123;</span><br><span class="line">                this.answer=&#x27;Waiting for you to stop typing...&#x27;</span><br><span class="line">                this.debouncedGetAnswer()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        created:function()&#123;</span><br><span class="line">            this.debouncedGetAnswer=_.debounce(this.getAnswer,500)</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            getAnswer:function()&#123;</span><br><span class="line">                if(this.question.indexOf(&#x27;?&#x27;)===-1)&#123;</span><br><span class="line">                    this.answer=&#x27;Questions usually contain a question mark. ;-)&#x27;</span><br><span class="line">                    return</span><br><span class="line">                &#125;</span><br><span class="line">                this.answer=&#x27;Thinking...&#x27;</span><br><span class="line">                var vm=this</span><br><span class="line">                axios.get(&#x27;https://yesno.wtf/api&#x27;)</span><br><span class="line">                    .then(function(response)&#123;</span><br><span class="line">                        vm.answer=_.capitalize(response.data.answer)</span><br><span class="line">                    &#125;)</span><br><span class="line">                    .catch(function(error)&#123;</span><br><span class="line">                        vm.answer=&#x27;Error! Could not reach the API. &#x27;+error</span><br><span class="line">                    &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>在这个示例中，<strong>使用<code>watch</code>选项执行异步操作（访问一个API），限制执行该操作的频率，并在得到最终结果前，设置中间状态</strong>。这些都是计算属性无法做到的。</p>
<h2 id="class与style绑定">Class与Style绑定</h2>
<p>操作元素的class列表和内联样式是数据绑定的常见需求。由于它们都是attribute，因此可以用<code>v-bind</code>来处理它们。将<code>v-bind</code>用于<code>class</code>和<code>style</code>时，表达式结果的类型除了字符串之外，还可以是对象或数组。</p>
<h3 id="绑定html-class">绑定HTML Class</h3>
<h4 id="对象语法">对象语法</h4>
<p>动态地切换class可以传给<code>v-bind:class</code>一个对象：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;&#123;active:isActive&#125;&quot;</span>&gt;</span>Hello Vue!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>上面的代码表示<code>active</code>这个class存在与否将取决于数据property <code>isActive</code>的truthiness。</p>
<p>可以在对象中传入更多字段来动态切换多个class。<code>v-bind:class</code>指令也可以与普通的class attribute共存：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div </span><br><span class="line">    class=&#x27;static&#x27;</span><br><span class="line">    v-bind:class=&quot;&#123;active:isActive,&#x27;text-danger&#x27;:hasError&#125;&quot;</span><br><span class="line">    &gt;Hello Vue!&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var tes=new Vue(&#123;</span><br><span class="line">    data:&#123;</span><br><span class="line">        isActive:true,</span><br><span class="line">        hasError:false</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>渲染后就等价于</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;static active&#x27;</span>&gt;</span>Hello Vue!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>当<code>isActive</code>或者<code>hasError</code>变化时，class列表将相应地更新。若<code>hasError</code>的值为<code>true</code>，则class列表将变为<code>class='static active text-danger'</code>。</p>
<p>绑定的数据对象不必内联定义在模板里：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div v-bind:class=&quot;classObject&quot;&gt;Hello Vue!&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var tes=new Vue(&#123;</span><br><span class="line">        data:&#123;</span><br><span class="line">            classObject:&#123;</span><br><span class="line">                active:true,</span><br><span class="line">                &#x27;text-danger&#x27;:false</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>其渲染结果和上面是一样的。也可以在这里绑定一个返回对象的计算属性，这是一个常用的模式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&#x27;test&#x27; v-bind:class=&quot;classObject&quot;&gt;Hello Vue!&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var tes=new Vue(&#123;</span><br><span class="line">        data:&#123;</span><br><span class="line">            isActive:true,</span><br><span class="line">            error:null</span><br><span class="line">        &#125;,</span><br><span class="line">        computed:&#123;</span><br><span class="line">            classObject:function()&#123;</span><br><span class="line">                return &#123;</span><br><span class="line">                    active:this.isActive &amp;&amp; !this.error,</span><br><span class="line">                    &#x27;text-danger&#x27;:this.error &amp;&amp; this.error.type===&#x27;fatal&#x27;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h4 id="数组语法">数组语法</h4>
<p>应用一个class列表可以把一个数组传给<code>v-bind:class</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div v-bind:class=&quot;[activeClass, errorClass]&quot;&gt;Hello Vue!&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var tes=new Vue(&#123;</span><br><span class="line">        data:&#123;</span><br><span class="line">            activeClass:&#x27;active&#x27;,</span><br><span class="line">            errorClass:&#x27;text-danger&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>渲染后就等价于</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;active text-danger&#x27;</span>&gt;</span>Hello Vue!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>若想根据条件切换列表中的class，可以用三元表达式：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;[isActive ? activeClass:&#x27;&#x27;,errorClass]&quot;</span>&gt;</span>Hello Vue!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这样便是始终添加<code>errorClass</code>，但只有在<code>isActive</code>是truthy时才添加<code>activeClass</code>。</p>
<p><strong>注意：</strong>truthy是指再布尔值上下文中，转换后的值为<code>'true'</code>，其不是true。</p>
<p>当有多个条件class时这样写有些繁琐，因此在数组语法中也可以使用对象语法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;[&#123;active:isActive&#125;,errorClass]&quot;</span>&gt;</span>Hello Vue!</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="用在组件上">用在组件上</h4>
<p>当在一个自定义组件上使用<code>class</code> property时，这些class将被追加到该组件的根元素上面，已存在的class不会被覆盖。</p>
<p>若这有一组件声明如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span> <span class="title function_">component</span>(<span class="string">&#x27;my-component&#x27;</span>,&#123;</span><br><span class="line">    <span class="attr">template</span>:<span class="string">&#x27;&lt;p class=&quot;foo bar&quot;&gt;Hi&lt;/p&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>使用它时添加一些class：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>HTML将被渲染为：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;foo bar text&quot;</span>&gt;</span></span><br><span class="line">    Hi</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>对于带数据绑定的class也同样适用：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;&#123;active:isActive&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--当isActive为truthy时，HTML将被渲染为--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;foo far active&quot;</span>&gt;</span></span><br><span class="line">    Hi</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="绑定内联样式">绑定内联样式</h3>
<h4 id="对象语法-1">对象语法</h4>
<p><code>v-bind:style</code>的对象语法看起来非常像CSS，但实际上是个JavaScript对象。CSS property名可以用驼峰式（camelCase）或短横线分隔（kebab-case，记得用括号括起来）来命名：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&#x27;test&#x27; v-bind:style=&quot;&#123;color:activeColor,fontSize:fontSize+&#x27;px&#x27;&#125;&quot;&gt;Hello Vue!&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var tes=new Vue(&#123;</span><br><span class="line">        el:&#x27;#test&#x27;,</span><br><span class="line">        data:&#123;</span><br><span class="line">            activeColor:&#x27;red&#x27;,</span><br><span class="line">            fontSize:30</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>
<p>通常直接绑定到一个样式对象，让模板更清晰：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&#x27;test&#x27; v-bind:style=&quot;styleObject&quot;&gt;Hello Vue!&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var tes=new Vue(&#123;</span><br><span class="line">        el:&#x27;#test&#x27;,</span><br><span class="line">        data:&#123;</span><br><span class="line">            styleObject:&#123;</span><br><span class="line">                color:&#x27;red&#x27;,</span><br><span class="line">                fontSize:&#x27;13px&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>对象语法常会结合返回对象的计算熟悉使用。</p>
<h4 id="数组语法-1">数组语法</h4>
<p><code>v-bind:style</code>的数组书法可以将多个样式对象应用到同一个元素上：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;test&#x27;</span> <span class="attr">v-bind:style</span>=<span class="string">&quot;[baseStyles,overridingStyles]&quot;</span>&gt;</span>Hello Vue!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="自动添加前缀">自动添加前缀</h4>
<p>当<code>v-bind:style</code>需要使用添加浏览器引擎前缀的CSS property时，如<code>tranform</code>，<strong>Vue.js会自动侦测并添加相应的前缀。</strong></p>
<h4 id="多重值">多重值</h4>
<p>从Vue2.3.0版本起，可以为<code>style</code>绑定中的property提供一个包含多个值的数组，常用于提供多个带前缀的值：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;display:[&#x27;-webkit-box&#x27;,&#x27;-ms-flexbox&#x27;,&#x27;flex&#x27;]&#125;&quot;</span>&gt;</span>Helo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>上述代码只会渲染数组中最后一个被浏览器支持的值。若浏览器支持不带浏览器前缀的flexbox，那么就只会渲染<code>display:flex</code>。</p>
<h2 id="条件渲染">条件渲染</h2>
<h3 id="v-if"><code>v-if</code></h3>
<p><code>v-if</code>指令用于条件性地渲染一块内容。这块内容只会再指令的表达式返回truthy值时被渲染：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;awesome&quot;</span>&gt;</span>Vue is awesome!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>也可以用<code>v-else</code>添加一个<code>"else"</code>块：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;awesome&quot;</span>&gt;</span>Vue is awesome!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>Oh no!!!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="在template元素上使用v-if条件渲染分组">在<code>&lt;template&gt;</code>元素上使用<code>v-if</code>条件渲染分组</h4>
<p>由于<code>v-if</code>是一个指令，所以必须将它添加到一个元素上。若想要切换多个元素时，可以把一个<code>&lt;template&gt;</code>元素当作不可见的包裹元素并在<code>&lt;template&gt;</code>元素上使用<code>v-if</code>，最终的渲染结果将不包含<code>&lt;template&gt;</code>。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">&quot;ok&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Paragraph 1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>paragraph 2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="v-else"><code>v-else</code></h4>
<p>可以用<code>v-else</code>指令来表示<code>v-if</code>的<code>"else"</code>块：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;test&quot;&gt;</span><br><span class="line">    &lt;div v-if=&quot;Math.random()&gt;0.5&quot;&gt;</span><br><span class="line">        Now you see me!</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div v-else&gt;</span><br><span class="line">        Now you can not see me!</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var tes=new Vue(&#123;</span><br><span class="line">        el:&#x27;#test&#x27;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p><code>v-else</code>元素必须紧跟在带<code>v-if</code>或<code>v-else-if</code>的元素后面，否则它将不会被之别。</p>
<h4 id="v-else-if"><code>v-else-if</code></h4>
<p><code>v-else-if</code>指令表示<code>v-if</code>的<code>"else-if"</code>块，可以连续使用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;test&quot;&gt;</span><br><span class="line">    &lt;div v-if=&quot;type===&#x27;A&#x27;&quot;&gt;A&lt;/div&gt;</span><br><span class="line">    &lt;div v-else-if=&quot;type===&#x27;B&#x27;&quot;&gt;B&lt;/div&gt;</span><br><span class="line">    &lt;div v-else-if=&quot;type===&#x27;c&#x27;&quot;&gt;C&lt;/div&gt;</span><br><span class="line">    &lt;div v-else&gt;Not A/B/c&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var tes=new Vue(&#123;</span><br><span class="line">        el:&#x27;#test&#x27;,</span><br><span class="line">        data:&#123;</span><br><span class="line">            type:&#x27;D&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>类似于<code>v-else</code>，<code>v-else-if</code>也必须紧跟在带<code>v-if</code>或<code>v-else-if</code>的元素之后。</p>
<h4 id="用key管理可复用的元素">用<code>key</code>管理可复用的元素</h4>
<p>Vue通常会复用已有元素而不是从头开始渲染。这样除了让Vue变得非常快之外，还有其他一些好处。如允许用户在不同的登录方式之间切换：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;test&quot;&gt;</span><br><span class="line">    &lt;template v-if=&quot;loginType===&#x27;username&#x27;&quot;&gt;</span><br><span class="line">        &lt;label&gt;Username&lt;/label&gt;</span><br><span class="line">        &lt;input placeholder=&quot;Enter your username&quot; &gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">    &lt;template v-else&gt;</span><br><span class="line">        &lt;label&gt;Email&lt;/label&gt;</span><br><span class="line">        &lt;input placeholder=&quot;Enter your email address&quot; &gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">    &lt;button v-on:click=&quot;changeMessage&quot;&gt;Toggle login type&lt;/button&gt;    </span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var tes=new Vue(&#123;</span><br><span class="line">        el:&#x27;#test&#x27;,</span><br><span class="line">        data:&#123;</span><br><span class="line">            loginType:&#x27;zhangsan&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            changeMessage:function()&#123;</span><br><span class="line">                return this.loginType=this.loginType===&#x27;username&#x27;?&#x27;eamil&#x27;:&#x27;username&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<p><img src="/2022/11/04/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E4%BA%8C%EF%BC%89/1.png"></p>
<p>在输入框输入一些文本，然后按下切换按钮。可以看到用户输入在输入框的内容是不变的。</p>
<p>这意味着在上面的代码中切换<code>loginType</code>将不会清除用户已经输入的内容。因为两个模板使用了相同的元素，<code>&lt;input&gt;</code>不会被替换掉，仅只是替换了它的<code>placeholder</code>。</p>
<p>Vue还提供一种方式来表达“这两个元素是完全独立的，不要复用它们”，只需要添加一个具有唯一值的<code>key</code> attribute即可：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;test&quot;&gt;</span><br><span class="line">    &lt;template v-if=&quot;loginType===&#x27;username&#x27;&quot;&gt;</span><br><span class="line">        &lt;label&gt;Username&lt;/label&gt;</span><br><span class="line">        &lt;input placeholder=&quot;Enter your username&quot; key=&quot;username-input&quot;&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">    &lt;template v-else&gt;</span><br><span class="line">        &lt;label&gt;Email&lt;/label&gt;</span><br><span class="line">        &lt;input placeholder=&quot;Enter your email address&quot; key=&quot;email-input&quot;&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">    &lt;button v-on:click=&quot;changeMessage&quot;&gt;Toggle login type&lt;/button&gt;    </span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var tes=new Vue(&#123;</span><br><span class="line">        el:&#x27;#test&#x27;,</span><br><span class="line">        data:&#123;</span><br><span class="line">            loginType:&#x27;zhangsan&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            changeMessage:function()&#123;</span><br><span class="line">                return this.loginType=this.loginType===&#x27;username&#x27;?&#x27;eamil&#x27;:&#x27;username&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>运行代码后，再次在输入框输入一些文本，然后按下切换按钮。可以看到每次切换时，输入框都将被重新渲染。</p>
<p>需要注意的是：这里的<code>&lt;label&gt;</code>仍然会被高效得复用，因为它们没有添加<code>key</code>attribute。</p>
<h3 id="v-show"><code>v-show</code></h3>
<p>另一个用于根据条件展示元素的选项是<code>v-show</code>指令：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;ok&quot;</span>&gt;</span>Hello!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>与<code>v-if</code>不同的是，<code>v-show</code>的元素始终会被渲染并保留在DOM中，其只是简单地切换元素的CSS property <code>display</code>。</p>
<p>注意：<strong><code>v-show</code>不支持<code>&lt;template&gt;</code>元素，也不支持`<code>v-else</code></strong>。</p>
<h3 id="v-if-vs-v-show"><code>v-if</code> VS <code>v-show</code></h3>
<ul>
<li><p><code>v-if</code> 是真正的条件渲染，它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。</p></li>
<li><p><code>v-if</code> 是惰性的：<strong>若在初始渲染时条件为假，则什么也不做。直至条件第一次变为真时，才会开始渲染条件块。</strong></p></li>
<li><p>而<code>v-show</code><strong>不管初始条件是什么，元素总是会被渲染，并且只是简单地基于CSS进行切换。</strong></p></li>
</ul>
<p>一般来说，<code>v-if</code> 有更高的切换开销，<code>v-show</code>有更高的初始渲染开销。<strong>因此若需要非常频繁地切换，则使用<code>v-show</code>；若在运行时条件很少改变，则使用<code>v-if</code> 。</strong></p>
<h3 id="v-if-与v-for一起使用"><code>v-if</code> 与<code>v-for</code>一起使用</h3>
<p>不推荐同时使用<code>v-if</code> 和<code>v-for</code>。</p>
<p>当<code>v-if</code> 和<code>v-for</code>一起使用时，<code>v-for</code> 具有比<code>v-if</code> 更高的优先级。这意味着<code>v-if</code>将分别重复运行于每个<code>v-for</code>循环中。当只想为部分项渲染节点时，这种优先节点十分有用：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;todo in todos&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;!todo.isComplete&quot;</span>&gt;</span>&#123;&#123;todo&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>上面的代码只渲染未完成的todo。</p>
<p>而若是想要有条件地跳过循环的执行，则可以将<code>v-if</code>置于外层元素（或<code>&lt;template&gt;</code>）上：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">v-if</span>=<span class="string">&quot;todos.length&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;todo in todos&quot;</span>&gt;</span>&#123;&#123;todo&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else</span>&gt;</span>No todos left!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>前端</category>
        <category>前端框架</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>前端框架之Vue.js（五）</title>
    <url>/2022/11/10/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E4%BA%94%EF%BC%89/</url>
    <content><![CDATA[<h1 id="深入了解组件">深入了解组件</h1>
<h2 id="动态组件异步组件">动态组件&amp;异步组件</h2>
<h3 id="在动态组件上使用keep-alive">在动态组件上使用keep-alive</h3>
<p>之前曾在一个多标签的页面使用<code>is</code> attribute来切换不同的组件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">component</span> <span class="attr">v-bind:is</span>=<span class="string">&quot;currentTabComponent&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>当这些组件之间来回切换时，会发现原来点击的内容被销毁了，由于 每次切换新标签时，Vue都创建了一个新实例，因此切回去时是不会保留之前选择的选项的。</p>
<p>若想把那些标签的组件实例能够被在它们第一次被创建时缓存下来，可以使用<code>&lt;keep-alive&gt;</code>元素把动态组件包裹起来，如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 失活的组件将会被缓存 --&gt;</span><br><span class="line">&lt;keep-alive&gt;</span><br><span class="line">  &lt;component v-bind:is=&quot;currentTabComponent&quot;&gt;&lt;/component&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br></pre></td></tr></table></figure>
<p>动态组件及使用keep-alive的例子如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&quot;example&quot; class=&quot;demo&quot;&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;button </span><br><span class="line">      v-for=&quot;tab in tabs&quot; </span><br><span class="line">      v-bind:key=&quot;tab&quot; </span><br><span class="line">      v-on:click=&quot;currentTab=tab&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &#123;&#123;tab&#125;&#125;</span><br><span class="line">    &lt;/button&gt;</span><br><span class="line">    &lt;!-- &lt;component v-bind:is=&quot;currentTabComponent&quot;&gt;&lt;/component&gt; --&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!-- 失活的组件将会被缓存 --&gt;</span><br><span class="line">    &lt;keep-alive&gt;</span><br><span class="line">      &lt;component v-bind:is=&quot;currentTabComponent&quot;&gt;&lt;/component&gt;</span><br><span class="line">    &lt;/keep-alive&gt;</span><br><span class="line">  &lt;/div&gt;  </span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var postOne=&#123;</span><br><span class="line">  id:1,</span><br><span class="line">  title:&#x27;Cat Ipsum&#x27;,</span><br><span class="line">  content:&#x27;&lt;p&gt;That is a content of Cat Ipsum &lt;/p&gt;&#x27;</span><br><span class="line">&#125;;</span><br><span class="line">var postTwo=&#123;</span><br><span class="line">  id:2,</span><br><span class="line">  title:&#x27;Hipster Ipsum&#x27;,</span><br><span class="line">  content:&#x27;&lt;p&gt;That is a content of Hipster Ipsum &lt;/p&gt;&#x27; </span><br><span class="line">&#125;;</span><br><span class="line">var postThree=&#123;</span><br><span class="line">  id:3,</span><br><span class="line">  title:&#x27;Cupcake Ipsum&#x27;,</span><br><span class="line">  content:&#x27;&lt;p&gt;That is a content of Cupcake Ipsum &lt;/p&gt;&#x27;</span><br><span class="line">&#125;;</span><br><span class="line">Vue.component(&#x27;tab-posts&#x27;,&#123;</span><br><span class="line">  data:function()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">      posts:[postOne,postTwo,postThree],</span><br><span class="line">      selectedPost:null</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  template:`</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;ul&gt;</span><br><span class="line">        &lt;li </span><br><span class="line">          v-for=&quot;post in posts&quot; </span><br><span class="line">          v-bind:key=&quot;post.id&quot;</span><br><span class="line">          v-on:click=&quot;selectedPost=post&quot;</span><br><span class="line">        &gt;</span><br><span class="line">          &#123;&#123;post.title&#125;&#125;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;div v-if=&quot;selectedPost&quot;&gt;</span><br><span class="line">          &lt;div v-html=&quot;selectedPost.content&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;strong v-else&gt;</span><br><span class="line">          Click on a blog title to the left to view it.</span><br><span class="line">        &lt;/strong&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  `        </span><br><span class="line">&#125;)</span><br><span class="line">Vue.component(&#x27;tab-archive&#x27;,&#123;</span><br><span class="line">  template:&#x27;&lt;div&gt;Archive component&lt;/div&gt;&#x27;</span><br><span class="line">&#125;)</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el:&#x27;#example&#x27;,</span><br><span class="line">  data:&#123;</span><br><span class="line">    currentTab:&#x27;Posts&#x27;,</span><br><span class="line">    tabs:[&#x27;Posts&#x27;,&#x27;Archive&#x27;]</span><br><span class="line">  &#125;,</span><br><span class="line">  computed:&#123;</span><br><span class="line">    currentTabComponent:function()&#123;</span><br><span class="line">      return &#x27;tab-&#x27;+this.currentTab.toLowerCase()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p><code>&lt;keep-alive&gt;</code>包裹动态组件时，会缓存不活动的组件实例，而不是销毁它们。</p>
<p>若使用v-if也想保留组件内容，可以用<code>&lt;keep-alive&gt;</code>包裹：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;keep-alive&gt;</span><br><span class="line">  &lt;component-a v-if=&quot;a&gt;1&quot;&gt;&lt;/component-a&gt;</span><br><span class="line">  &lt;component-b v-else&gt;&lt;/component-b&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br></pre></td></tr></table></figure>
<p>若想使用<code>include&amp;exclude</code>属性也保存组件内容，也能用<code>&lt;keep-alive&gt;</code>包裹。其中，<strong>与include的值匹配的路由/组件会被缓存，不匹配的不会被缓存</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;keep-alive include=&quot;tab-archive&quot;&gt;</span><br><span class="line">  &lt;component v-bind:is=&quot;currentTabComponent&quot;&gt;&lt;/component&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br></pre></td></tr></table></figure>
<p>可以通过逗号分隔的字符串形式、正则形式、数组形式进行匹配：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">include</span>=<span class="string">&quot;[&#x27;tab-archive&#x27;,&#x27;tab-posts&#x27;]&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">v-bind:is</span>=<span class="string">&quot;currentTabComponent&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>还可以利用<code>&lt;keep-alive&gt;</code>来设计最多可以缓存多少组件实例，一旦这个数字达到了，则在新实例被创建之前，<strong>已缓存组件中最久没有被访问的实例会被销毁</strong>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">max</span>=<span class="string">&quot;10&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">v-bind:is</span>=<span class="string">&quot;currentTabComponent&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="异步组件">异步组件</h3>
<p>在大型应用中，可能需要将应用分割成小一些的代码块，并且只在需要时才从服务器加载一个模块。</p>
<p>为了简化，Vue允许以一个工厂函数的方式定义组件，这个工厂函数会异步解析组件的定义，只在这个组件需要被渲染时才会触发该工厂函数，并把结果缓存起来供后续重渲染。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;async-example&#x27;</span>,<span class="keyword">function</span>(<span class="params">resolve,reject</span>)&#123;</span><br><span class="line">  <span class="title function_">seTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//向resolve回调传递组件定义</span></span><br><span class="line">    <span class="title function_">resolve</span>(&#123;</span><br><span class="line">      <span class="attr">template</span>:<span class="string">&#x27;&lt;div&gt; I am async! &lt;/div&gt;&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>上述代码的工厂函数会收到一个<code>resolve</code>回调，这个回调函数会在从服务器得到组件定义时被调用，也可以调用<code>reject(reason)</code>来表示加载失败。</p>
<p>将异步组件和webpack的code-splitting功能一起配合使用时，可以自动将所构建的代码切割成多个包，这些包会通过Ajax请求加载：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;async-webpack-example&#x27;</span>,<span class="keyword">function</span>(<span class="params">resolve</span>)&#123;</span><br><span class="line">  <span class="comment">//告诉webpack自动切割构建代码</span></span><br><span class="line">  <span class="built_in">require</span>([<span class="string">&#x27;./my-async-component&#x27;</span>],resolve)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>将webpack 2和ES2015语法结合使用动态导入时，可以在工厂中返回一个<code>Promise</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(</span><br><span class="line">  <span class="string">&#x27;async-webpack-example&#x27;</span>,</span><br><span class="line">  <span class="comment">//这个动态导入会返回一个Promise对象</span></span><br><span class="line">  <span class="function">()=&gt;</span><span class="keyword">import</span>(<span class="string">&#x27;./my-async-component&#x27;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>当使用局部注册时，也可以直接提供一个返回<code>Promise</code>的函数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">components</span>:&#123;</span><br><span class="line">    <span class="string">&#x27;my-component&#x27;</span>:<span class="function">()=&gt;</span><span class="keyword">import</span>(<span class="string">&#x27;./my-async-component&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="处理加载状态">处理加载状态</h4>
<p>异步组件工厂函数也可以返回一个如下格式的对象：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">AsyncComponent</span>=(<span class="params"></span>)=&gt;(&#123;</span><br><span class="line">  <span class="attr">component</span>:<span class="keyword">import</span>(<span class="string">&#x27;./MyComponent.vue&#x27;</span>),<span class="comment">//需要加载的组件，返回一个promise对象</span></span><br><span class="line">  <span class="attr">loading</span>:<span class="title class_">LoadingComponent</span>,<span class="comment">//异步组件加载时使用的组件</span></span><br><span class="line">  <span class="attr">error</span>:<span class="title class_">ErrorComponent</span>,<span class="comment">//加载失败时使用的组件</span></span><br><span class="line">  <span class="attr">delay</span>:<span class="number">200</span>,<span class="comment">//展示加载时组件的延时时间，默认值是200毫秒</span></span><br><span class="line">  <span class="attr">timeout</span>:<span class="number">3000</span><span class="comment">//若提供了超时时间且组件也加载超时了，则使用加载失败时使用的组件。默认值是infinity</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="处理边界情况">处理边界情况</h2>
<h3 id="访问元素组件">访问元素&amp;组件</h3>
<h4 id="访问根实例">访问根实例</h4>
<p>在每个<code>new Vue</code>实例的子组件中，其根示例可以通过<code>$root</code> property进行访问，如<code>this.$root.data</code>。</p>
<h4 id="访问父级组件实例">访问父级组件实例</h4>
<p>可以通过<code>$parent</code> property来从一个子组件访问父组件的实例，如<code>this.$parent.getData</code>。</p>
<h4 id="访问子组件实例或子元素">访问子组件实例或子元素</h4>
<p>在JavaScript里直接访问一个子组件，可以先通过<code>ref</code> attribute为子组件赋予一个ID引用：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">base-input</span> <span class="attr">ref</span>=<span class="string">&quot;usernameInput&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">base-input</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后便可以使用<code>this.$refs.usernameInput</code>来访问这个<code>&lt;base-input&gt;</code>实例。</p>
<p><strong>注意：</strong>当<code>ref</code>和<code>v-for</code>一起使用时，得到的ref将会是一个包含了对应数据源的子组件数组。</p>
<p><code>$refs</code>只会在组件渲染完成后生效，且它们不是响应式的，因此应该避免在模板或计算属性中访问<code>$refs</code>。</p>
<h4 id="依赖注入">依赖注入</h4>
<p>依赖注入可以将子组件的共用方法拓展到更深层级的嵌套组件上，使得任意后代组件中都能访问该方法，且不需要暴露该组件实例。</p>
<p>依赖注入用到了两个实例选项：<code>provide</code>和<code>inject</code>。</p>
<p><code>provide</code>选项允许指定想要提供给后代组件的数据/方法。</p>
<p><code>inject</code>选项用于接收指定的想要添加在实例上的property。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">provide</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span>&#123;</span><br><span class="line">    <span class="attr">getMap</span>:<span class="variable language_">this</span>.<span class="property">getMap</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">inject</span>:[<span class="string">&#x27;getMap&#x27;</span>]</span><br></pre></td></tr></table></figure>
<h3 id="程序化的事件侦听器">程序化的事件侦听器</h3>
<p>处理可以被<code>v-on</code>侦听的<code>$emit</code>外，Vue实例还同时在其事件接口提供了其他的方法：</p>
<ul>
<li><code>$on(eventName,eventHandler)</code>：侦听一个事件</li>
<li><code>$once(eventName,eventHandler)</code>：一次性侦听一个事件</li>
<li><code>$off(eventName,eventHandler)</code>：停止侦听一个事件</li>
</ul>
<h3 id="循环引用">循环引用</h3>
<h4 id="递归组件">递归组件</h4>
<p>组件可以通过<code>name</code>选项在自己的模板中调用自身。当使用<code>Vue.component</code>全局注册一个组件时，全局的ID会自动设置为该组件的<code>name</code>选项。</p>
<h4 id="组件之间的循环引用">组件之间的循环引用</h4>
<p>有两个组件A和组件B，A依赖B，B又依赖A，两者之间反复进行循环引用，模块系统不知道要如果不经过其中一个组件而完全解析另一个组件而报错。</p>
<p>为了解决这个问题，需要把其中一个组件设为一个点，如将<code>&lt;tree-folder&gt;</code>组件设为哪个点，另一个子组件为<code>&lt;tree-folder-contents&gt;</code>，此时会等到生命周期钩子<code>beforeCreate</code>时去注册它：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">beforeCreate</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$options</span>.<span class="property">components</span>.<span class="property">TreeFolderContents</span>=<span class="built_in">require</span>(<span class="string">&#x27;./tree-folder-contents.vue&#x27;</span>).<span class="property">default</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>或者在本地注册组件时，用webpack的异步import来解决:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">components</span>:&#123;</span><br><span class="line">  <span class="title class_">TreeFolderContents</span>:<span class="function">()=&gt;</span><span class="keyword">import</span>(<span class="string">&#x27;./tree-folder-contents.vue&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="模板定义的替代品">模板定义的替代品</h3>
<h4 id="内联模板">内联模板</h4>
<p>当子组件中出现<code>inline-template</code> attribute时，这个组件将会使用其里面的内容作为模板，而不是作为被分发的内容：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">inline-template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>123<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>内联模板需定义在Vue所属的DOM元素内。</p>
<h4 id="x-template">X-Template</h4>
<p>另一个定义模板的方式是在一个<code>&lt;script&gt;</code>元素中，并为其带上<code>text/x-template</code>的类型，然后通过一个id将模板引用过去：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/x-template&quot;</span> <span class="attr">id</span>=<span class="string">&quot;hello-world-template&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello world <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="控制更新">控制更新</h3>
<h4 id="强制更新">强制更新</h4>
<p>可以使用<code>$forceUpdate</code>来进行强制更新。</p>
<h4 id="通过v-once创建低开销的静态组件">通过<code>v-once</code>创建低开销的静态组件</h4>
<p>在包括了大量静态内容的组件里，可以在其根元素上添加<code>v-once</code> attribute来确保这些内容只计算一次后缓存起来。</p>
<h1 id="过渡动画">过渡&amp;动画</h1>
<h2 id="进入离开列表过渡">进入/离开&amp;列表过渡</h2>
<h3 id="单元素组件的过渡">单元素/组件的过渡</h3>
<p>Vue提供了<code>transition</code>封装组件，在以下情形中，可以给任何元素和组件添加进入/离开过渡：</p>
<ul>
<li>条件渲染（使用<code>v-if</code>）</li>
<li>条件展示（使用<code>v-show</code>）</li>
<li>动态组件</li>
<li>组件根节点</li>
</ul>
<p>例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;show=!show&quot;</span>&gt;</span>Toggle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;fade&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;show&quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">el</span>:<span class="string">&#x27;#demo&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">show</span>:<span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.fade-enter-active</span>,<span class="selector-class">.fade-leave-active</span>&#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">transition</span>:opacity .<span class="number">5s</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.fade-enter</span>,<span class="selector-class">.fade-leave-to</span>&#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>当插入或删除包含在transition组件中的元素时，Vue将会做以下处理：</p>
<ol type="1">
<li>自动嗅探目标元素是否应用了CSS过渡或动画，若是，在恰当的时机添加/删除CSS类名</li>
<li>若过渡组件提供了JavaScript钩子函数，这些钩子函数将在恰当的时机被调用</li>
<li>若没有找到JavaScript钩子函数，也没有检测到CSS过渡/动画，DOM操作（插入/删除）在下一帧中立即执行</li>
</ol>
<h4 id="过渡的类名">过渡的类名</h4>
<p>在进入/离开的过渡中，会有6个class切换：</p>
<ul>
<li><code>v-enter-active</code>：定义进入过渡生效时的状态。在整个进入过渡的阶段中应用，在元素被插入之前生效，在过渡/动画完成之后移除。这个类可以被用来定义进入过渡的过程时间、延迟和曲线函数。
<ul>
<li><code>v-enter</code>：定义进入过渡的开始状态。在元素被插入之前生效，在元素被插入之后的下一帧移除</li>
<li><code>v-enter-to</code>：定义进入过渡的结束状态。在元素被插入之后下一帧生效，在过渡/动画完成之后移除</li>
</ul></li>
<li><code>v-leave-active</code>：定义离开过渡生效时的状态。在整个离开过渡的阶段中应用，在离开过渡被触发时立刻生效，在过渡/动画完成之后移除。这个类可以被用来定义离开过渡的过程时间、延迟和曲线函数。
<ul>
<li><code>v-leave</code>：定义离开过渡的开始状态。在离开过渡被触发时立刻生效，下一帧被移除</li>
<li><code>v-leave-to</code>：定义离开过渡的结束状态。在离开过渡被触发之后下一帧生效，在过渡/动画完成之后移除</li>
</ul></li>
</ul>
<p>对于在过渡切换的来命名来说，若使用的是没有名字的<code>&lt;transition&gt;</code>，则<code>v-</code>是这些类名的默认前缀。若使用了<code>&lt;transition name="my-transition"&gt;</code>，那么<code>v-enter</code>会替换成<code>my-transition-enter</code></p>
<h4 id="css过渡">CSS过渡</h4>
<p>常用的过渡都是使用CSS过渡。</p>
<p>例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;show=!show&quot;</span>&gt;</span>Toggle render<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;slide-fade&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;show&quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">el</span>:<span class="string">&#x27;#demo&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">show</span>:<span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.slide-fade-enter-active</span>&#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">transition</span>:all .<span class="number">3s</span> ease;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.slide-fade-leave-active</span>&#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">transition</span>:all .<span class="number">8s</span> <span class="built_in">cubic-bezier</span>(<span class="number">1.0</span>,<span class="number">0.5</span>,<span class="number">0.8</span>,<span class="number">1.0</span>);</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.slide-fade-enter</span>,<span class="selector-class">.slide-fade-leave-to</span>&#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">10px</span>);</span></span><br><span class="line"><span class="language-css">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="css动画">CSS动画</h4>
<p>CSS动画用法与CSS过渡相同，其区别是在动画中<code>v-enter</code>类名在节点插入DOM后不会立即删除，而是在<code>animationend</code>时间触发时删除。</p>
<p>例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;show=!show&quot;</span>&gt;</span>Toggle show<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;bounce&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;show&quot;</span>&gt;</span>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris facilisis enim libero, at lacinia diam fermentum id. Pellentesque habitant morbi tristique senectus et netus.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">el</span>:<span class="string">&#x27;#demo&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">show</span>:<span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.bounce-enter-active</span>&#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">animation</span>: bounce-in .<span class="number">5s</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.bounce-leave-active</span>&#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">animation</span>: bounce-in .<span class="number">5s</span> reverse;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="keyword">@keyframes</span> bounce-in&#123;</span></span><br><span class="line"><span class="language-css">  <span class="number">0%</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0</span>);</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="number">50%</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.5</span>);</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="number">100%</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1</span>);</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="自定义过渡的类名">自定义过渡的类名</h4>
<p>可以通过以下attribute来自定义过渡类名：</p>
<ul>
<li><code>enter-active-class</code></li>
<li><code>enter-class</code></li>
<li><code>enter-to-class</code></li>
<li><code>leave-active-class</code></li>
<li><code>leave-class</code></li>
<li><code>leave-to-class</code></li>
</ul>
<p>这些attribute的优先级高于普通的类名，这对Vue的过渡系统和其他第三方CSS动画库的使用十分有用。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;show=!show&quot;</span>&gt;</span>Toggle render<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">name</span>=<span class="string">&quot;custom-classes-transition&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">enter-active-class</span>=<span class="string">&quot;animated data&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">leave-active-class</span>=<span class="string">&quot;animated bounceOutRight&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;show&quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">el</span>:<span class="string">&#x27;#demo&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">show</span>:<span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="同时使用过渡和动画">同时使用过渡和动画</h4>
<p>Vue为了知道过渡的完成，必须设置相应的事件监听器。其可以是<code>transitionend</code>或<code>animationend</code>，这取决于给元素应用的CSS规则，若使用其中任何一种，Vue能自动识别类型并设置监听。</p>
<p>若给同一种元素同时设置两种过渡动效时，需要使用<code>type</code> attribute来设置<code>animationend</code>或<code>transitionend</code>来明确声明需要Vue监听的类型。</p>
<h4 id="显性的过渡持续时间">显性的过渡持续时间</h4>
<p>大多数情况下，Vue可以自动得出过渡效果的完成时机。默认情况下，Vue会等待其在过渡效果根元素的第一个<code>transitionend</code>或<code>animationend</code>时间。</p>
<p>也可以使用<code>transition</code>组件上的<code>duration</code> prop来定制一个显性的过渡持续时间（以毫秒为单位）：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">:duration</span>=<span class="string">&quot;1000&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">transition</span>&gt;</span>   </span><br><span class="line"><span class="comment">&lt;!-- 也可以定制进入和移除的持续时间 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">:duration</span>=<span class="string">&quot;&#123;enter:500,leave:800&#125;&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">transition</span>&gt;</span>  </span><br></pre></td></tr></table></figure>
<h4 id="javascript钩子">JavaScript钩子</h4>
<p>可以在attribute中声明JavaScript钩子：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;show=!show&quot;</span>&gt;</span>Toggle render<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">v-on:before-enter</span>=<span class="string">&quot;beforeEnter&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-on:enter</span>=<span class="string">&quot;enter&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-on:after-enter</span>=<span class="string">&quot;afterEnter&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-on:enter-cancelled</span>=<span class="string">&quot;enterCancelled&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">      <span class="attr">v-on:before-leave</span>=<span class="string">&quot;beforeLeave&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-on:leave</span>=<span class="string">&quot;leave&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-on:after-leave</span>=<span class="string">&quot;afterLeave&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-on:leave-cancelled</span>=<span class="string">&quot;leaveCancelled&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;show&quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">el</span>:<span class="string">&#x27;#demo&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">show</span>:<span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//进入中</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">beforeEnter</span>:<span class="keyword">function</span>(<span class="params">el</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//...</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">     <span class="comment">//当与CSS结合使用时，回调函数done是可选的</span></span></span><br><span class="line"><span class="language-javascript">     <span class="attr">enter</span>:<span class="keyword">function</span>(<span class="params">el,done</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//...</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">done</span>()</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">     <span class="attr">afterEnter</span>:<span class="keyword">function</span>(<span class="params">el</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//...</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">enterCancelled</span>:<span class="keyword">function</span>(<span class="params">el</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//...</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//离开时</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">beforeLeave</span>:<span class="keyword">function</span>(<span class="params">el</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//...</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">     <span class="comment">//当与CSS结合使用时，回调函数done是可选的</span></span></span><br><span class="line"><span class="language-javascript">     <span class="attr">leave</span>:<span class="keyword">function</span>(<span class="params">el,done</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//...</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">done</span>()</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">afterLeave</span>:<span class="keyword">function</span>(<span class="params">el</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//...</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">leaveCancelled</span>:<span class="keyword">function</span>(<span class="params">el</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//...</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这些钩子函数可以结合CSS <code>transitions/animations</code>使用，也可以单独使用。</p>
<p>当只用JavaScript过渡时，在<code>enter</code>和<code>leave</code>中必须使用<code>done</code>进行回调，否则两者将被同步调用，过渡会立即完成。</p>
<p>对于仅使用JavaScript过渡的元素添加<code>v-bind:css="false"</code>,Vue会跳过CSS的检测。这可以避免过渡过程中CSS的影响。</p>
<h3 id="初始渲染的过渡">初始渲染的过渡</h3>
<p>可以通过<code>appear</code> attribute来设置节点在初始渲染的过渡：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- 可以自定义CSS类名，也可以自定义JavaScript钩子 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">transition</span></span></span><br><span class="line"><span class="tag"> <span class="attr">appear</span></span></span><br><span class="line"><span class="tag"> <span class="attr">appear-class</span>=<span class="string">&quot;custom-appear-class&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">appear-to-class</span>=<span class="string">&quot;custom-appear-to-class&quot;</span>(<span class="attr">2.1.8</span>)</span></span><br><span class="line"><span class="tag"> <span class="attr">appear-active-class</span>=<span class="string">&quot;custom-appear-active-class&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">v-on:before-appear</span>=<span class="string">&quot;customBeforeAppearHook&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">v-on:appear</span>=<span class="string">&quot;customAppearHook&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="多个元素的过渡">多个元素的过渡</h3>
<p>对于原生标签可以使用<code>v-if</code>/<code>v-else</code>来实现多个组件的过渡，最常见的多标签过渡是一个列表和描述这个列表为空消息的元素：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 当有相同标签名的元素切换时，需要通过key attribute来设置唯一的值来标记 --&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">buttion</span> <span class="attr">v-if</span>=<span class="string">&quot;isEditing&quot;</span> <span class="attr">key</span>=<span class="string">&quot;save&quot;</span>&gt;</span>Save<span class="tag">&lt;/<span class="name">buttion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">buttion</span> <span class="attr">v-else</span> <span class="attr">key</span>=<span class="string">&quot;edit&quot;</span>&gt;</span>Edit<span class="tag">&lt;/<span class="name">buttion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在一些场景中，也可以通过给同一个元素的<code>key</code> attribute设置不同的状态来代替<code>v-if</code>和<code>v-else</code>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">buttion</span> <span class="attr">v-bind:key</span>=<span class="string">&quot;isEditing&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;isEdting?&quot;Save&quot;:&quot;Edit&quot;&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">buttion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>使用多个<code>v-if</code>的多个元素过渡，可以重写为绑定了动态property的单个元素过渡，如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">buttion</span> <span class="attr">v-if</span>=<span class="string">&quot;docState===&#x27;saved&#x27;&quot;</span> <span class="attr">key</span>=<span class="string">&quot;saved&quot;</span>&gt;</span>Edit<span class="tag">&lt;/<span class="name">buttion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">buttion</span> <span class="attr">v-if</span>=<span class="string">&quot;docState===&#x27;edited&#x27;&quot;</span> <span class="attr">key</span>=<span class="string">&quot;edited&quot;</span>&gt;</span>Save<span class="tag">&lt;/<span class="name">buttion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">buttion</span> <span class="attr">v-if</span>=<span class="string">&quot;docState===&#x27;editing&#x27;&quot;</span> <span class="attr">key</span>=<span class="string">&quot;editing&quot;</span>&gt;</span>Cancel<span class="tag">&lt;/<span class="name">buttion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">buttion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>可以重写为：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-bind:key</span>=<span class="string">&quot;docState&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;buttonMessage&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//...</span></span></span><br><span class="line"><span class="language-javascript"><span class="attr">computed</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">buttonMessage</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">switch</span>(<span class="variable language_">this</span>.<span class="property">docSate</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">case</span> <span class="string">&#x27;saved&#x27;</span>:<span class="keyword">return</span> <span class="string">&#x27;Edit&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">case</span> <span class="string">&#x27;edited&#x27;</span>:<span class="keyword">return</span> <span class="string">&#x27;Save&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">case</span> <span class="string">&#x27;editing&#x27;</span>:<span class="keyword">return</span> <span class="string">&#x27;Cancel&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;    </span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="过渡模式">过渡模式</h4>
<p>由于同时生效的进入和离开的过渡不能满足所有要求，因此Vue提供了过渡模式：</p>
<ul>
<li><code>in-out</code>：新元素先进行过渡，完成之后当前元素过渡离开</li>
<li><code>out-in</code>：当前元素先进行过渡，完成之后新元素过渡进入</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;fade&quot;</span> <span class="attr">mode</span>=<span class="string">&quot;out-in&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="多个组件的过渡">多个组件的过渡</h3>
<p>只需要使用动态组件便可以使用<code>key</code> attribute：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;view=&#x27;v-a&#x27;&quot;</span> <span class="attr">name</span>=<span class="string">&quot;view&quot;</span> <span class="attr">checked</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;a&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;view=&#x27;v-b&#x27;&quot;</span> <span class="attr">name</span>=<span class="string">&quot;view&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;b&quot;</span>&gt;</span>B<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;component-fade&quot;</span> <span class="attr">mode</span>=<span class="string">&quot;out-in&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">component</span> <span class="attr">v-bind:is</span>=<span class="string">&quot;view&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">el</span>:<span class="string">&#x27;#demo&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">view</span>:<span class="string">&#x27;v-a&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&#x27;v-a&#x27;</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">template</span>:<span class="string">&#x27;&lt;div&gt;Component A&lt;/div&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&#x27;v-b&#x27;</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">template</span>:<span class="string">&#x27;&lt;div&gt;Component B&lt;/div&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.component-fade-enter-active</span>,<span class="selector-class">.component-fade-leave-active</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">transition</span>:opacity .<span class="number">3s</span> ease;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.component-fade-enter</span>,<span class="selector-class">.component-fade-leave-to</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="列表过渡">列表过渡</h3>
<p>需要同时渲染整个列表时，使用<code>&lt;transition-group&gt;</code>组件，这个组件的特点如下：</p>
<ul>
<li>不同于<code>&lt;transition&gt;</code>，它会以一个真实元素呈现：默认为一个<code>&lt;span&gt;</code>，也可以通过<code>tag</code> attribute更换为其他元素</li>
<li><strong>过渡模式不可用</strong></li>
<li>内部元素总是需要提供一个<strong>唯一的<code>key</code> attribute</strong></li>
<li><strong>CSS过渡的类将会应用在内部的元素中</strong>，而不是这个组/容器本身。</li>
</ul>
<h4 id="列表的进入离开过渡">列表的进入/离开过渡</h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;list-demo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>Add<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;remove&quot;</span>&gt;</span>Remove<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition-group</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span> <span class="attr">tag</span>=<span class="string">&quot;p&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span> <span class="attr">v-bind:key</span>=<span class="string">&quot;item&quot;</span> <span class="attr">class</span>=<span class="string">&quot;list-item&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123;item&#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transition-group</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">el</span>:<span class="string">&#x27;#list-demo&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">items</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>],</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">nextNum</span>:<span class="number">10</span></span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">randomIndex</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="variable language_">this</span>.<span class="property">items</span>.<span class="property">length</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">add</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">splice</span>(<span class="variable language_">this</span>.<span class="title function_">randomIndex</span>(),<span class="number">0</span>,<span class="variable language_">this</span>.<span class="property">nextNum</span>++)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">remove</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">splice</span>(<span class="variable language_">this</span>.<span class="title function_">randomIndex</span>(),<span class="number">1</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.list-item</span>&#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.list-enter-active</span>,<span class="selector-class">.list-leave-active</span>&#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">transition</span>: all <span class="number">1s</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.list-enter</span>,<span class="selector-class">.list-leave-to</span>&#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">30px</span>);</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="列表的排序过渡">列表的排序过渡</h4>
<p><code>&lt;transition-group&gt;</code>组件不仅可以进入和离开动画，还可以使用<code>v-model</code> class改变定位。对于<code>v-model</code> class，可以通过<code>name</code> attribute来自定义前缀，也可以通过<code>move-class</code> attribute手动设置。</p>
<p><code>v-model</code> class对于设置过渡的切换时机和过渡曲线非常有用，以下例子使用了一个FLIP的简单动画队列，使用transforms将元素从之前的位置平滑过渡到新位置中：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.14.1/lodash.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;flip-list-demo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;shuffle&quot;</span>&gt;</span>Shuffle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition-group</span> <span class="attr">name</span>=<span class="string">&quot;flip-list&quot;</span> <span class="attr">tag</span>=<span class="string">&quot;ul&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span> <span class="attr">v-bind:key</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123;item&#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transition-group</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">el</span>:<span class="string">&#x27;#flip-list-demo&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">items</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>],</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">shuffle</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">items</span>=_.<span class="title function_">shuffle</span>(<span class="variable language_">this</span>.<span class="property">items</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.flip-list-move</span>&#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">transition</span>: transform <span class="number">1s</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>将上述代码与列表进入/离开过渡的例子结合，可式列表的一切变动都会有动画过渡：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.14.1/lodash.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;list-complete-demo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;shuffle&quot;</span>&gt;</span>Shuffle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>Add<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;remove&quot;</span>&gt;</span>Remove<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition-group</span> <span class="attr">name</span>=<span class="string">&quot;list-complete&quot;</span> <span class="attr">tag</span>=<span class="string">&quot;p&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span> <span class="attr">v-bind:key</span>=<span class="string">&quot;item&quot;</span> <span class="attr">class</span>=<span class="string">&quot;list-complete-item&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123;item&#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transition-group</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">el</span>:<span class="string">&#x27;#list-complete-demo&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">items</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>],</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">nextNum</span>:<span class="number">10</span></span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">randomIndex</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="variable language_">this</span>.<span class="property">items</span>.<span class="property">length</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">add</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">splice</span>(<span class="variable language_">this</span>.<span class="title function_">randomIndex</span>(),<span class="number">0</span>,<span class="variable language_">this</span>.<span class="property">nextNum</span>++)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">remove</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">splice</span>(<span class="variable language_">this</span>.<span class="title function_">randomIndex</span>(),<span class="number">1</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">shuffle</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">items</span>=_.<span class="title function_">shuffle</span>(<span class="variable language_">this</span>.<span class="property">items</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.list-complete-item</span>&#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">transition</span>: all <span class="number">1s</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.list-complete-leave-active</span>&#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.list-complete-enter</span>,<span class="selector-class">.list-complete-leave-to</span>&#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">30px</span>);</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong>使用FLIP过渡的元素不能设置为<code>display:inline</code>，可以设为<code>display:inline-block</code>或者放置于flex中。</p>
<h4 id="列表的交错过渡">列表的交错过渡</h4>
<p>通过data attribute与JavaScript通信，可以实现列表的交错过渡：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/velocity/1.2.3/velocity.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;staggered-list-demo&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;query&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition-group</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">name</span>=<span class="string">&quot;staggered-fade&quot;</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">tag</span>=<span class="string">&quot;ul&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-bind:css</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-on:before-enter</span>=<span class="string">&quot;beforeEnter&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-on:enter</span>=<span class="string">&quot;enter&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-on:leave</span>=<span class="string">&quot;leave&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in computedList&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-bind:key</span>=<span class="string">&quot;item.msg&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-bind:data-index</span>=<span class="string">&quot;index&quot;</span></span></span><br><span class="line"><span class="tag">      &gt;</span>&#123;&#123;item.msg&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transition-group</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">el</span>:<span class="string">&#x27;#staggered-list-demo&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">query</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">list</span>:[</span></span><br><span class="line"><span class="language-javascript">      &#123;<span class="attr">msg</span>:<span class="string">&#x27;Bruce Lee&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">      &#123;<span class="attr">msg</span>:<span class="string">&#x27;Jackie Chan&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">      &#123;<span class="attr">msg</span>:<span class="string">&#x27;Chuck Norris&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">      &#123;<span class="attr">msg</span>:<span class="string">&#x27;Jet Li&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">      &#123;<span class="attr">msg</span>:<span class="string">&#x27;Kung Fury&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">    ]</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">computed</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">computedList</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> vm=<span class="variable language_">this</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">list</span>.<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">item</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> item.<span class="property">msg</span>.<span class="title function_">toLowerCase</span>().<span class="title function_">indexOf</span>(vm.<span class="property">query</span>.<span class="title function_">toLowerCase</span>())!==-<span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">beforeEnter</span>:<span class="keyword">function</span>(<span class="params">el</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      el.<span class="property">style</span>.<span class="property">opacity</span>=<span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">      el.<span class="property">style</span>.<span class="property">height</span>=<span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">enter</span>:<span class="keyword">function</span>(<span class="params">el,done</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> delay=el.<span class="property">dataset</span>.<span class="property">index</span>*<span class="number">150</span></span></span><br><span class="line"><span class="language-javascript">      <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Velocity</span>(</span></span><br><span class="line"><span class="language-javascript">          el,</span></span><br><span class="line"><span class="language-javascript">          &#123;<span class="attr">opacity</span>:<span class="number">1</span>,<span class="attr">height</span>:<span class="string">&#x27;1.6em&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">          &#123;<span class="attr">complete</span>:done&#125;</span></span><br><span class="line"><span class="language-javascript">        )</span></span><br><span class="line"><span class="language-javascript">      &#125;,delay)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">leave</span>:<span class="keyword">function</span>(<span class="params">el,done</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> delay=el.<span class="property">dataset</span>.<span class="property">index</span>*<span class="number">150</span></span></span><br><span class="line"><span class="language-javascript">      <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Velocity</span>(</span></span><br><span class="line"><span class="language-javascript">          el,</span></span><br><span class="line"><span class="language-javascript">          &#123;<span class="attr">opacity</span>:<span class="number">0</span>,<span class="attr">height</span>:<span class="number">0</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">          &#123;<span class="attr">complete</span>:done&#125;</span></span><br><span class="line"><span class="language-javascript">        )</span></span><br><span class="line"><span class="language-javascript">      &#125;,delay)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="可复用的过渡">可复用的过渡</h3>
<p>过渡可以通过Vue的组件系统实现复用。创建一个可复用过渡组件，只需将<code>&lt;transition&gt;</code>或<code>&lt;transition-group&gt;</code>作为根组件，然后将任何子组件放置在其中即可：</p>
<h3 id="动态过渡">动态过渡</h3>
<p>在Vue中即使是过渡也是数据驱动的，通过<code>name</code> attribute来绑定动态之是动态过渡最基本的例子：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">v-bind:name</span>=<span class="string">&quot;transitionName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>使用Vue的过渡系统来定义CSS过渡/动画在不同过渡间切换会非常有用。</p>
<p>所有过渡attribute都可以动态绑定，不仅只有attribute可以利用，还可以通过事件钩子获取上下文中的所有数据，即可实现根据组件状态不同，JavaScript过渡也会有不同的表现。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/velocity/1.2.3/velocity.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;dynamic-fade-demo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">    Fade In:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;range&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;fadeInDuration&quot;</span> <span class="attr">min</span>=<span class="string">&quot;0&quot;</span> <span class="attr">v-bind:max</span>=<span class="string">&quot;maxFadeDuration&quot;</span>&gt;</span></span><br><span class="line">    Fade Out:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;range&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;fadeOutDuration&quot;</span> <span class="attr">min</span>=<span class="string">&quot;0&quot;</span> <span class="attr">v-bind:max</span>=<span class="string">&quot;maxFadeDuration&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-bind:css</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-on:before-enter</span>=<span class="string">&quot;beforeEnter&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-on:enter</span>=<span class="string">&quot;enter&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-on:leave</span>=<span class="string">&quot;leave&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;show&quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-if</span>=<span class="string">&quot;stop&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-on:click</span>=<span class="string">&quot;stop=false;show=false&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span>Start animating<span class="tag">&lt;/<span class="name">button</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-else</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-on:click</span>=<span class="string">&quot;stop=true&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span>Stop it!<span class="tag">&lt;/<span class="name">button</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">el</span>:<span class="string">&#x27;#dynamic-fade-demo&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">show</span>:<span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">fadeInDuration</span>:<span class="number">1000</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">fadeOutDuration</span>:<span class="number">1000</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">maxFadeDuration</span>:<span class="number">1500</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">stop</span>:<span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">mounted</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">show</span>=<span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">beforeEnter</span>:<span class="keyword">function</span>(<span class="params">el</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      el.<span class="property">style</span>.<span class="property">opacity</span>=<span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">enter</span>:<span class="keyword">function</span>(<span class="params">el,done</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> vm=<span class="variable language_">this</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">Velocity</span>(el,</span></span><br><span class="line"><span class="language-javascript">          &#123;<span class="attr">opacity</span>:<span class="number">1</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">          &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">duration</span>:<span class="variable language_">this</span>.<span class="property">fadeInDuration</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">complete</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="title function_">done</span>()</span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">if</span>(!vm.<span class="property">stop</span>) vm.<span class="property">show</span>=<span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        )</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">leave</span>:<span class="keyword">function</span>(<span class="params">el,done</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> vm=<span class="variable language_">this</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">Velocity</span>(el,</span></span><br><span class="line"><span class="language-javascript">          &#123;<span class="attr">opacity</span>:<span class="number">0</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">          &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">duration</span>:<span class="variable language_">this</span>.<span class="property">fadeOutDuration</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">complete</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="title function_">done</span>()</span></span><br><span class="line"><span class="language-javascript">              vm.<span class="property">show</span>=<span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        )</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>创建动态过渡的最终方案是组件通过接收props来动态修改之前的过渡。</p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>前端</category>
        <category>前端框架</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>前端框架之Vue.js（四）</title>
    <url>/2022/11/09/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
    <content><![CDATA[<h1 id="深入了解组件">深入了解组件</h1>
<h2 id="组件注册">组件注册</h2>
<h3 id="组件名">组件名</h3>
<p>注册一个组件时，要给组件起名，如在全局注册中，组件名就是<code>Vue.component</code>的第一个参数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span> <span class="title function_">component</span>(<span class="string">&#x27;my-component-name&#x27;</span>,&#123;&#125;)</span><br></pre></td></tr></table></figure>
<p>组件名应当遵守W3C规范中的自定义组件名（字母全小写且必须包含一个连字符）</p>
<h4 id="组件名大小写">组件名大小写</h4>
<p>定义组件名的方式由两种：</p>
<ul>
<li>使用短横线分隔命名:my-component-name</li>
<li>使用首字母大写命名：MyComponentName</li>
</ul>
<p>两种命名法都可以使用，但需注意的是，直接在DOM（即非字符串的模板）中使用时，只有短横线分隔命名是有效的。</p>
<h3 id="全局注册">全局注册</h3>
<p>使用全局注册的组件，在它们注册之后可以用在任何新创建的Vue根实例的模板中，在子组件的内部也可以相互使用。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span> <span class="title function_">component</span>(<span class="string">&#x27;my-component-name&#x27;</span>,&#123;&#125;)</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;<span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="局部注册">局部注册</h3>
<p>若使用webpack这个的构建系统，全局注册所有的组件便意味着即使不再使用这个组件了，它仍然会被包含在最终的构建结果中。此时，可以将组件局部注册：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过一个普通的JavaScript对象来定义组件</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">ComponentA</span>=&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">ComponentB</span>=&#123;&#125;</span><br><span class="line"><span class="comment">// 在component中定义要使用的组件</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">components</span>:&#123;</span><br><span class="line">    <span class="string">&#x27;components-a&#x27;</span>:<span class="title class_">ComponentA</span>,</span><br><span class="line">    <span class="string">&#x27;components-b&#x27;</span>:<span class="title class_">ComponentB</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>对于<code>components</code>对象中的每个property来说，其property名就是自定义元素的名字，其property值就是这个组件的选项对象。</p>
<p><strong>局部注册的组件在其子组件中不可用。</strong>所希望上述代码中的<code>ComponentA</code>在<code>ComponentB</code>中可用，则要写成：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">ComponentA</span>=&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">ComponentB</span>=&#123;</span><br><span class="line">  <span class="attr">components</span>:&#123;</span><br><span class="line">    <span class="string">&#x27;components-a&#x27;</span>:<span class="title class_">ComponentA</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="模块系统">模块系统</h3>
<h4 id="在模块系统中局部注册">在模块系统中局部注册</h4>
<p>若使用了注入Babel和webpack的模块系统，需要创建一个<code>components</code>目录，并将每个组件放置在其各自的文件中，然后在局部注册之前导入每个想使用的组件。如在一个<code>ComponentB.vue</code>文件中使用<code>ComponentA</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">ComponentA</span> <span class="keyword">from</span> <span class="string">&#x27;./ComponentA.vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">  <span class="attr">components</span>:&#123;</span><br><span class="line">    <span class="title class_">ComponentA</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在ES2015+中，在对象中放一个类似<code>ComponentA</code>的变量名便是<code>'ComponentsA':ComponentA</code>的缩写，即这个变量名同时是用在模板中的自定义元素的名称，也包含了这个组件选项的变量名。</p>
<h4 id="基础组件的自动化全局注册">基础组件的自动化全局注册</h4>
<p>当组件中只是包裹了一个输入框或按钮之类的通用元素时，将其称之为基础组件，它们会在各个组件中被频繁地用到。</p>
<p>这往往会导致组件里都会由一个包含基础组件的长列表，但用于模板中的仅是一小部分组件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&quot;example&quot;&gt;</span><br><span class="line">    &lt;BaseInput v-model=&quot;searchText&quot; @keydown.enter=&quot;search&quot; /&gt;</span><br><span class="line">    &lt;BaseButton @click=&quot;search&quot;&gt;</span><br><span class="line">      &lt;BaseIcon name=&quot;search&quot; /&gt;</span><br><span class="line">    &lt;/BaseButton&gt;</span><br><span class="line">  &lt;/div&gt;  </span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import BaseButton from &#x27;./BaseButton.vue&#x27;</span><br><span class="line">import BaseIcon from &#x27;./BaseIcon.vue&#x27;</span><br><span class="line">import BaseInput from &#x27;./BaseInput.vue&#x27;</span><br><span class="line"></span><br><span class="line">export default&#123;</span><br><span class="line">  components:&#123;</span><br><span class="line">    BaseButton,</span><br><span class="line">    BaseIcon,</span><br><span class="line">    BaseInput</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>若使用webpack（或在内部使用了webpack的Vue CLI 3+），则可以使用<code>require.context</code>只全局注册这些通用的基础组件。如在应用入口文件（如<code>src/main.js</code>）中全局导入基础组件的代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&quot;example&quot;&gt;</span><br><span class="line">    &lt;BaseInput v-model=&quot;searchText&quot; @keydown.enter=&quot;search&quot; /&gt;</span><br><span class="line">    &lt;BaseButton @click=&quot;search&quot;&gt;</span><br><span class="line">      &lt;BaseIcon name=&quot;search&quot; /&gt;</span><br><span class="line">    &lt;/BaseButton&gt;</span><br><span class="line">  &lt;/div&gt;  </span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line">import upperFirst from &#x27;lodash/upperFirst&#x27;</span><br><span class="line">import camelCase from &#x27;lodash/camelCase&#x27;</span><br><span class="line"></span><br><span class="line">const requireComponent=require.context(</span><br><span class="line">  &#x27;./components&#x27;,//组件目录的相对路径</span><br><span class="line">  false,//是否查询其子目录</span><br><span class="line">  //匹配基础组件文件名的正则表达式</span><br><span class="line">  /Base[A-Z]\w+\.(vue|js)$/</span><br><span class="line">)</span><br><span class="line">requireComponent.keys().forEach(fileName=&gt;&#123;</span><br><span class="line">  const componentConfig=requireComponent(fileName)//获取组件配置</span><br><span class="line">  const componentName=upperFirst(//获取组件的PascalCase命名</span><br><span class="line">    camelCase(</span><br><span class="line">      fileName//获取和目录深度无关的文件名</span><br><span class="line">      .split(&#x27;/&#x27;)</span><br><span class="line">      .pop()</span><br><span class="line">      .replace(/\.\w+$/,&#x27;&#x27;)</span><br><span class="line">    )</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  //全局注册组件</span><br><span class="line">  Vue.component(</span><br><span class="line">    componentName,</span><br><span class="line">    // 若这个组件选项是通过export default导出的，就优先使用.default，否则回退到使用模块的根</span><br><span class="line">    componentConfig.default||componentConfig</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h2 id="prop">Prop</h2>
<h3 id="prop的大小写">Prop的大小写</h3>
<p>HTML中的attribute名是大小写不敏感的，浏览器会把所有大写字符解释为小写字符。这意味着在使用DOM模板时，驼峰命名的prop名需要使用其等价的短横线分隔来命名：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Vue.component(&#x27;blog-post&#x27;,&#123;</span><br><span class="line">  //在JavaScript中是驼峰命名</span><br><span class="line">  props:&#123;&#x27;postTitle&#x27;&#125;,</span><br><span class="line">  template:&#x27;&lt;h3&gt;&#123;&#123;postTitle&#125;&#125;&lt;/h3&gt;&#x27;</span><br><span class="line">&#125;)</span><br><span class="line">// 在HTML中是短横线分隔命名</span><br><span class="line">&lt;blog-post post-title=&quot;hello!&quot;&gt;&lt;/blog-post&gt;</span><br></pre></td></tr></table></figure>
<p>而在字符串模板中便不存在这个限制。</p>
<h3 id="prop类型">Prop类型</h3>
<p>Prop的类型有以下八种：</p>
<ul>
<li>String</li>
<li>Number</li>
<li>Boolean</li>
<li>Array</li>
<li>Object</li>
<li>Date</li>
<li>Function</li>
<li>Symbol</li>
</ul>
<p>props的写法（无默认值）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">props:&#123;</span><br><span class="line">  title:String,</span><br><span class="line">  likes:Number,</span><br><span class="line">  isPublished:Boolean,</span><br><span class="line">  commentIds:Array,</span><br><span class="line">  author:Object,</span><br><span class="line">  callback:Function,</span><br><span class="line">  contactsPromise:promise</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="传递静态或动态prop">传递静态或动态Prop</h3>
<p>任何类型的值都可以传给一个prop，不仅能传入静态的值，还能通过<code>v-bind</code>动态赋值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 给prop传入静态的值</span><br><span class="line">&lt;blog-post title=&quot;My journey with Vue&quot;&gt;&lt;/blog-post&gt;</span><br><span class="line"></span><br><span class="line">// 通过v-bind动态赋予一个变量的值</span><br><span class="line">&lt;blog-post v-bind:title=&quot;post.title&quot;&gt;&lt;/blog-post&gt;</span><br><span class="line"></span><br><span class="line">// 通过v-bind动态赋予一个复杂表达式的值</span><br><span class="line">&lt;blog-post v-bind:title=&quot;post.title+&#x27;by&#x27;+post.author.name&quot;&gt;&lt;/blog-post&gt;</span><br></pre></td></tr></table></figure>
<h4 id="传入一个数字">传入一个数字</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 即使42是静态的，但仍需v-bind来告诉Vue</span><br><span class="line">// 这是一个JavaScript表达式而不是一个字符串</span><br><span class="line">&lt;blog-post v-bind:likes=&quot;42&quot;&gt;&lt;/blog-post&gt;</span><br><span class="line"></span><br><span class="line">// 通过v-bind动态赋予一个变量的值</span><br><span class="line">&lt;blog-post v-bind:likes=&quot;post.likes&quot;&gt;&lt;/blog-post&gt;</span><br></pre></td></tr></table></figure>
<h4 id="传入一个布尔值">传入一个布尔值</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 即使prop没有值，结果都是true</span><br><span class="line">&lt;blog-post is-published&gt;&lt;/blog-post&gt;</span><br><span class="line"></span><br><span class="line">// 即使false是静态的，但仍需v-bind来告诉Vue</span><br><span class="line">// 这是一个JavaScript表达式而不是一个字符串</span><br><span class="line">&lt;blog-post v-bind:is-published=&quot;false&quot;&gt;&lt;/blog-post&gt;</span><br><span class="line"></span><br><span class="line">// 通过v-bind动态赋予一个变量的值</span><br><span class="line">&lt;blog-post v-bind:is-published=&quot;post.isPublished&quot;&gt;&lt;/blog-post&gt;</span><br></pre></td></tr></table></figure>
<h4 id="传入一个数组">传入一个数组</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 即使数组是静态的，但仍需v-bind来告诉Vue</span><br><span class="line">// 这是一个JavaScript表达式而不是一个字符串</span><br><span class="line">&lt;blog-post v-bind:comment-ids=&quot;[234,266,273]&quot;&gt;&lt;/blog-post&gt;</span><br><span class="line"></span><br><span class="line">// 通过v-bind动态赋予一个变量的值</span><br><span class="line">&lt;blog-post v-bind:comment-ids=&quot;post.commentIds&quot;&gt;&lt;/blog-post&gt;</span><br></pre></td></tr></table></figure>
<h4 id="传入一个对象">传入一个对象</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 即使对象是静态的，但仍需v-bind来告诉Vue</span><br><span class="line">// 这是一个JavaScript表达式而不是一个字符串</span><br><span class="line">&lt;blog-post v-bind:author=&quot;&#123;</span><br><span class="line">  name:&#x27;Veronica&#x27;,</span><br><span class="line">  company:&#x27;Veridian Dynamics&#x27;</span><br><span class="line">  &#125;&quot;</span><br><span class="line">&gt;&lt;/blog-post&gt;</span><br><span class="line"></span><br><span class="line">// 通过v-bind动态赋予一个变量的值</span><br><span class="line">&lt;blog-post v-bind:author=&quot;post.author&quot;&gt;&lt;/blog-post&gt;</span><br></pre></td></tr></table></figure>
<h4 id="传入一个对象的所有property">传入一个对象的所有property</h4>
<p>若要将一个对象的所有property都作为prop传入，可以使用不带参数的<code>v-bind</code>来取代<code>v-bind:prop-name</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//给定的对象post</span><br><span class="line">post:&#123;</span><br><span class="line">  id:1,</span><br><span class="line">  title:&#x27;My Journey with Vue&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 通过v-bind动态赋予一个变量的值</span><br><span class="line">&lt;blog-post v-bind=&quot;post&quot;&gt;&lt;/blog-post&gt;</span><br><span class="line"></span><br><span class="line">//等价于</span><br><span class="line">&lt;blog-post </span><br><span class="line">  v-bind:id=&quot;post.id&quot;</span><br><span class="line">  v-bind:title=&quot;post.title&quot;</span><br><span class="line">&gt;&lt;/blog-post&gt;</span><br></pre></td></tr></table></figure>
<h3 id="单向数据流">单向数据流</h3>
<p>所有的prop都使得其父子prop之间形成了一个单向下行绑定：<strong>父级prop的更新会向下流动到子组件中</strong>，但反过来则不行，这样防止了从子组件意外变更父级组件的状态。</p>
<p><strong>每次父级组件发生变更时，子组件中所有的prop都将会刷新为最新的值</strong>，因此不应在一个子组件内部改变prop。</p>
<p>若要变更一个prop，可通过以下方法进行变更：</p>
<ol type="1">
<li><p>这样prop用来传递一个初始值，子组件希望将其作为一个本地的prop数据来使用。此时最好定义一个本地的data property并将这个prop用作其初始值：</p>
<p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">props</span>:[<span class="string">&#x27;initialCounter&#x27;</span>],</span><br><span class="line"><span class="attr">data</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">counter</span>:<span class="variable language_">this</span>.<span class="property">initialCounter</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li>
<li><p>这个prop以一种原始的值传入且需要进行转化。此时最好使用这个prop的值来定义一个计算属性：</p>
<p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">props</span>:[<span class="string">&#x27;size&#x27;</span>],</span><br><span class="line"><span class="attr">computed</span>:&#123;</span><br><span class="line">  <span class="attr">normalizeSize</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">size</span>.<span class="title function_">trim</span>().<span class="title function_">toLowerCase</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li>
</ol>
<p><strong>注意：</strong>在JavaScript中对象和数组是通过引用传入的，所以对于一个数组或对象类型的prop来说，在子组件中改变变更这个对象或数组本身将会影响到父组件的状态。</p>
<h3 id="prop验证">Prop验证</h3>
<p>可以通过在<code>props</code>中的值提供一个带有验证需求的对象，从而指定组件的prop验证方式。即为<code>props</code>设定默认值如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">props:&#123;</span><br><span class="line">  propA:Number,//基础的类型检查</span><br><span class="line">  propB:[String,Number],//多个可能的类型</span><br><span class="line">  //必填的字符串</span><br><span class="line">  propC:&#123;</span><br><span class="line">    type:String,</span><br><span class="line">    required:true</span><br><span class="line">  &#125;,</span><br><span class="line">  // 带有默认值的数字</span><br><span class="line">  propD:&#123;</span><br><span class="line">    type:Number,</span><br><span class="line">    default:100</span><br><span class="line">  &#125;,</span><br><span class="line">  // 带有默认值的对象</span><br><span class="line">  propE:&#123;</span><br><span class="line">    type:Object,</span><br><span class="line">    // 对象或数组默认值必须从一个工厂函数获取</span><br><span class="line">    default:function()&#123;</span><br><span class="line">      return &#123;message:&#x27;hello&#x27;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  // 自定义验证函数</span><br><span class="line">  propF:&#123;</span><br><span class="line">    validator:function(value)&#123;</span><br><span class="line">      // 这个值必须匹配下列字符串中的一个</span><br><span class="line">      return [&#x27;success&#x27;,&#x27;warning&#x27;,&#x27;danger&#x27;].indexOf(value)!==-1</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当prop验证失败时，Vue将会产生一个控制台的警告。</p>
<p>prop会在组件实例创建之前进行验证，因此实例的property（如<code>data</code>、<code>computed</code>等）在<code>default</code>或<code>validator</code>函数中是不可用的。</p>
<h4 id="类型检查">类型检查</h4>
<p>prop类型除了可以是八种原生类型之外，还可以是自定义的构造函数，并且通过<code>instanceof</code>来进行检查确认：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//给定构造函数Person</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span> (firstName,lastName)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">firstName</span>=firstName</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">lastName</span>=lastName</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//验证 author prop的值是否是通过new Person创建的</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;blog-post&#x27;</span>,&#123;</span><br><span class="line">  <span class="attr">props</span>:&#123;</span><br><span class="line">    <span class="attr">author</span>:<span class="title class_">Person</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="非prop的attribute">非Prop的Attribute</h3>
<p>传向一个组件，但组件中没有相应prop定义的attribute称之为非prop的attribute。显式定义的prop适用于向一个子组件传入信息。组件可以接收任意的attribute，而这些attribute会被添加到这个组件的根元素上。</p>
<h4 id="替换合并已有的attribute">替换/合并已有的Attribute</h4>
<p>现有一个Bootstrap插件里使用了第三方组件<code>&lt;bootstrap-date-input&gt;</code>，其模板如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;data&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>若要为这个插件定制一个主体，则需要添加一个特别的类名如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bootstrap-date-input</span></span></span><br><span class="line"><span class="tag">  <span class="attr">data-date-picker</span>=<span class="string">&quot;activated&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">&quot;date-picker-theme-dark&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">bootstrap-date-input</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在这种情况下共定义了两个不同的class值：</p>
<ul>
<li><code>form-control</code>：组件模板内设置好的class</li>
<li><code>date-picker-theme-dark</code>：从组件父级传入的</li>
</ul>
<p>对于绝大多数attribute来说，从外部提供给组件的值会替换掉组件内部设置好的值，<strong>因此若直接传入<code>type="text"</code>就会替换掉<code>type="date"</code>并将其破坏掉。</strong>而<strong><code>class</code>和<code>style</code> attribute会将两边的值合起来</strong>，从而得到最终值：<code>form-control date-picker-theme-dark</code>。</p>
<h4 id="禁用attribute继承">禁用Attribute继承</h4>
<p>若不希望组件的根元素继承attribute，可以在组件的选项中设置<code>inheritAttris:false</code>，配合实例的<code>$attrs</code> property使用，便可以手动决定这些attribute会被赋予哪个元素，<strong>常用于撰写基础组件中</strong>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;base-input&#x27;</span>,&#123;</span><br><span class="line">  <span class="attr">inheritAttrs</span>:<span class="literal">false</span>,</span><br><span class="line">  <span class="attr">props</span>:[<span class="string">&#x27;label&#x27;</span>,<span class="string">&#x27;value&#x27;</span>],</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;label&gt;</span></span><br><span class="line"><span class="string">      &#123;&#123;label&#125;&#125;</span></span><br><span class="line"><span class="string">      &lt;input</span></span><br><span class="line"><span class="string">        v-bind=&quot;$attrs&quot;</span></span><br><span class="line"><span class="string">        v-bind:value=&quot;value&quot;</span></span><br><span class="line"><span class="string">        v-on:input=&quot;$emit(&#x27;input&#x27;,$event.target.value)&quot;</span></span><br><span class="line"><span class="string">      &gt;</span></span><br><span class="line"><span class="string">    &lt;/label&gt;</span></span><br><span class="line"><span class="string">  `</span>    </span><br><span class="line">&#125;)xxxxxxxxxx16 1Vue.<span class="title function_">component</span>(<span class="string">&#x27;base-input&#x27;</span>,&#123;<span class="number">2</span>  <span class="attr">inheritAttrs</span>:<span class="literal">false</span>,<span class="number">3</span>  <span class="attr">props</span>:[<span class="string">&#x27;label&#x27;</span>,<span class="string">&#x27;value&#x27;</span>],<span class="number">4</span>  <span class="attr">template</span>: <span class="string">`5    &lt;label&gt;6      &#123;&#123;label&#125;&#125;7      &lt;input8        v-bind=&quot;$attrs&quot;9        v-bind:value=&quot;value&quot;10        v-on:input=&quot;$emit(&#x27;input&#x27;,$event.target.value)&quot;11      &gt;12    &lt;/label&gt;13  `</span>    <span class="number">14</span>&#125;)<span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;my-component&#x27;</span>,&#123;<span class="number">15</span>  <span class="attr">inheritAttrs</span>:<span class="literal">false</span>,<span class="number">16</span>&#125;)</span><br></pre></td></tr></table></figure>
<p>其中，<strong><code>inheritAttris:false</code>选项不会影响<code>style</code>和<code>class</code>的绑定。</strong></p>
<p>这个模式允许在使用基础组件时更像是使用原始的HTML元素，而不用担心哪个元素才是真正的根元素。</p>
<h2 id="自定义事件">自定义事件</h2>
<h3 id="事件名">事件名</h3>
<p>不同于组件和prop，事件名不存在任何自动化的大小写转化，<strong>触发的事件名需要完全匹配监听这个事件所用的名称</strong>。如触发事件名是驼峰式命名的，则监听该名字的短横线分隔命名版本是不会有任何效果的。</p>
<p>不同于组件和prop，事件名不会被用作一个JavaScript变量名或property名，因此不会使用驼峰命名或首字母大写命名。且<code>v-on</code>事件监听器在DOM模板中会被自动转换为全小写，因此<strong>推荐事件名使用短横线分隔命名</strong>。</p>
<h3 id="自定义组件的v-model">自定义组件的<code>v-model</code></h3>
<p>一个组件上的<code>v-model</code>默认会利用名为<code>value</code>的prop和名为<code>input</code>的事件。但像单选框、复选框等类型的输入控件可能会将<code>value</code> attribute用于不同的目的，为避免冲突，可使用<code>model</code>选项：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&quot;example&quot;&gt;</span><br><span class="line">    &lt;!-- lovingVue的值将会传如名为checked的prop --&gt;</span><br><span class="line">    &lt;!-- 当&lt;base-checkbox&gt;触发一个change事件并附带一个新值时，lovingVue的property将会被更新 --&gt;</span><br><span class="line">    &lt;base-checkbox v-model=&quot;lovingVue&quot;&gt;&lt;/base-checkbox&gt;</span><br><span class="line">  &lt;/div&gt;  </span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">Vue.component(&#x27;base-checkbox&#x27;,&#123;</span><br><span class="line">  model:&#123;</span><br><span class="line">    prop:&#x27;checked&#x27;,</span><br><span class="line">    event:&#x27;change&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  props:&#123;</span><br><span class="line">    checked:Boolean//props里仍需要声明checked这个prop</span><br><span class="line">  &#125;,</span><br><span class="line">  template:`</span><br><span class="line">    &lt;input </span><br><span class="line">      type=&quot;checkbox&quot;</span><br><span class="line">      v-bind:checked=&quot;checked&quot;</span><br><span class="line">      v-on:change=&quot;$emit(&#x27;change&#x27;,$event.target.checked)&quot;</span><br><span class="line">    &gt;</span><br><span class="line">  `    </span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h3 id="将原生事件绑定到组件">将原生事件绑定到组件</h3>
<p>若要在一个组件的根元素上直接监听一个原生事件，可以使用<code>v-on</code>的<code>.native</code>修饰符：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">base-input</span> <span class="attr">v-on:focus.native</span>=<span class="string">&quot;onFocus&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">base-input</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>当监听一个类似<code>&lt;input&gt;</code>的特定元素时，父级的<code>.native</code>监听器将会静默失败，其不会产生任何报错，但<code>onFocus</code>处理函数也不会被调用。</p>
<p>Vue提供了一个<code>$listeners</code> property来解决这一问题，它是一个对象，里面包含了作用在这个组件上的所有监听器，如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">focus</span>:<span class="keyword">function</span>(<span class="params">event</span>)&#123;&#125;,</span><br><span class="line">  <span class="attr">input</span>:<span class="keyword">function</span>(<span class="params">event</span>)&#123;&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>有了<code>$listeners</code> property，再配合<code>v-on=$listeners</code>便可以将所有的事件监听器指向这个组件的某个特定的子元素。</p>
<p>对于希望<code>&lt;input&gt;</code>也能配合<code>v-model</code>工作的组件，应为这些监听器创建一个<code>inputListeners</code>计算属性如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">Vue.component(&#x27;base-input&#x27;,&#123;</span><br><span class="line">  inheritAttrs:false,</span><br><span class="line">  props:[&#x27;label&#x27;,&#x27;value&#x27;],</span><br><span class="line">  computed:&#123;</span><br><span class="line">    inputListeners:function()&#123;</span><br><span class="line">      var vm=this</span><br><span class="line">      return Object.assign(&#123;&#125;,</span><br><span class="line">        this.$listeners,</span><br><span class="line">        &#123;</span><br><span class="line">          input:function(event)&#123;</span><br><span class="line">            vm.$emit(&#x27;input&#x27;,event.target.value)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  template: `</span><br><span class="line">    &lt;label&gt;</span><br><span class="line">      &#123;&#123;label&#125;&#125;</span><br><span class="line">      &lt;input</span><br><span class="line">        v-bind=&quot;$attrs&quot;</span><br><span class="line">        v-bind:value=&quot;value&quot;</span><br><span class="line">        v-on=&quot;inputListeners&quot;</span><br><span class="line">      &gt;</span><br><span class="line">    &lt;/label&gt;</span><br><span class="line">  `      </span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>此时<code>&lt;base-input&gt;</code>组件是一个完全透明的包裹器了，即它可以像一个普通的<code>&lt;input&gt;</code>元素一样使用。所有跟<code>&lt;base-input&gt;</code>组件相同的attribute和监听器都可以工作，不必再使用<code>.native</code>监听器来监听事件。</p>
<h3 id="sync修饰符"><code>.sync</code>修饰符</h3>
<p>若需要对一个prop进行”双向绑定“时，可以用<code>update:myPropName</code>的模式触发事件来处理。</p>
<p>如在一个包含<code>title</code> prop的组件中：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">Vue.component(&#x27;text-document&#x27;,&#123;</span><br><span class="line">  props:[&#x27;title&#x27;],</span><br><span class="line">  template: `</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      我是子节点</span><br><span class="line">      &lt;button @click=&quot;handleClick&quot;&gt;点击我改变父级Title&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  `,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    handleClick()&#123;</span><br><span class="line">      this.count+=1;</span><br><span class="line">      newTitle=this.title+this.count;//对title赋新值</span><br><span class="line">      this.$emit(&#x27;update:childTitle&#x27;,newTitle)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  data()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">      count:0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">const app=new Vue(&#123;</span><br><span class="line">  el:&#x27;#example&#x27;,</span><br><span class="line">  data:&#123;</span><br><span class="line">    parentTitle:&quot;我是父级title&quot;,</span><br><span class="line">  &#125;,</span><br><span class="line">    //父组件可以监听那个事件并根据需要更新一个本地的数据property</span><br><span class="line">  template: `</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      我是父级节点</span><br><span class="line">      &lt;text-document </span><br><span class="line">        v-bind:title=&quot;parentTitle&quot; </span><br><span class="line">        v-on:update:title=&quot;parentTitle=$event&quot;</span><br><span class="line">      &gt;&lt;/text-document&gt;</span><br><span class="line">        &#123;&#123;parentTitle&#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  `    </span><br><span class="line">  //上述代码可用.sync修饰符缩写为</span><br><span class="line">  //&lt;text-document :title=&quot;parentTitle&quot; :title.sync=&quot;parentTitle&quot;&gt;&lt;/text-document&gt;  </span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>注意带有<code>.sync</code>修饰符的<code>v-bind</code>不能和表达式一起使用（如<code>v-bind:title.sync="doc.title+'!'"</code>是无效的），只能提供想绑定的property名，如<code>v-model</code>。</p>
<p>当用一个对象同时设置多个prop时，也可以将<code>.sync</code>修饰符和<code>v-bind</code>配合使用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;text-document v-bind.sync=&quot;doc&quot;&gt;&lt;/text-document&gt;</span><br></pre></td></tr></table></figure>
<p>这样会把<code>doc</code>对象中的每个property都作为一个独立的prop传进去，然后各自添加用于更新的<code>v-on</code>监听器。</p>
<p><strong>注意：</strong>将<code>v-bind.sync</code>用在一个字面量的对象上（如整数、浮点数及字符串等）时是无法正常工作的，如<code>v-bind.sync="&#123;title:doc.title&#125;"</code>。</p>
<h2 id="插槽">插槽</h2>
<p>在Vue2.6.0版本中引入了具名插槽和作用域插槽的因语法<code>v-slot</code>指令，它取代了<code>slot</code>和<code>slot-scope</code>这两个已被废除但未被移除的attribute。</p>
<h3 id="插槽内容">插槽内容</h3>
<p>Vue实现了一套内容分发的API，其将<code>&lt;slot&gt;</code>元素作为承载分发内容的出口。</p>
<p>它允许像这样合成组件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">navigation-link</span> <span class="attr">url</span>=<span class="string">&quot;/profile&quot;</span>&gt;</span></span><br><span class="line">  Your Profile</span><br><span class="line"><span class="tag">&lt;/<span class="name">navigation-link</span>&gt;</span> </span><br></pre></td></tr></table></figure>
<p>其中，<code>&lt;/navigation-link&gt;</code>的模板如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;url&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nav-link&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span> </span><br></pre></td></tr></table></figure>
<p>当组件渲染时，<code>&lt;slot&gt;&lt;/slot&gt;</code>将会被替换为Your Profile的内容。插槽内可以包含任何模板代码，包括HTML或是它的组件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;navigation-link url=&quot;/profile&quot;&gt;</span><br><span class="line">  &lt;!-- 添加一个Font Awesome图标 --&gt;</span><br><span class="line">  &lt;span class=&quot;fa fa-user&quot;&gt;&lt;/span&gt;</span><br><span class="line">    Your Profile</span><br><span class="line">&lt;/navigation-link&gt; </span><br><span class="line"></span><br><span class="line">&lt;navigation-link url=&quot;/profile&quot;&gt;</span><br><span class="line">  &lt;!-- 添加一个图标的组件 --&gt;</span><br><span class="line">  &lt;font-awesome-icon name=&quot;user&quot;&gt;&lt;/font-awesome-icon&gt;</span><br><span class="line">    Your Profile</span><br><span class="line">&lt;/navigation-link&gt;</span><br></pre></td></tr></table></figure>
<p>若<code>&lt;navigation-link&gt;</code>的<code>template</code>中没有包含一个<code>&lt;slot&gt;</code>元素，则该组件起始标签和结束标签之间的内容都会被抛弃。</p>
<h3 id="编译作用域">编译作用域</h3>
<p>当想在一个插槽中使用数据时，<strong>该插槽跟模板其他地方一样可以访问相同的实例property，而不能访问<code>&lt;navigation-link&gt;</code>的作用域</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;navigation-link url=&quot;/profile&quot;&gt;</span><br><span class="line">  &lt;!-- user.name的数据能正常访问 --&gt;</span><br><span class="line">  Logged in as &#123;&#123;user.name&#125;&#125;</span><br><span class="line">  &lt;!-- 这里的url的值是undefined --&gt;</span><br><span class="line">  &lt;!-- 因为该插槽的内容是传递给&lt;navigation-link&gt;的而不是在其组件内部定义的 --&gt;</span><br><span class="line">  Clicking here will send you to:&#123;&#123;url&#125;&#125;</span><br><span class="line">&lt;/navigation-link&gt; </span><br></pre></td></tr></table></figure>
<p><strong>父级模板里的所有内容都是在父级作用域中编译的，子模板里的所有内容都是在子作用域中编译的。</strong></p>
<h3 id="后备内容">后备内容</h3>
<p>为一个插槽设置具体的后备内容（即默认内容）是很有必要的，它只会在没有提供内容的时候被渲染。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;button type=&quot;submit&quot;&gt;</span><br><span class="line">  &lt;!-- button绝大多数都渲染文本Submit --&gt;</span><br><span class="line">  &lt;slot&gt;Submit&lt;/slot&gt;</span><br><span class="line">&lt;/button&gt;</span><br></pre></td></tr></table></figure>
<p>此时若在父级组件中使用<code>&lt;submit-button&gt;</code>且不提供任何插槽内容时，后备内容“Submit”将会被渲染；若提供内容时，在这个提供的内容将会取代后备内容被渲染</p>
<h3 id="具名插槽">具名插槽</h3>
<p>有时在一个模板里需要多个插槽时，可以使用<code>&lt;slot&gt;</code>元素中的<code>name</code> attribute，其可以用来定义额外的插槽：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;container&quot;&gt;</span><br><span class="line">  &lt;header&gt;</span><br><span class="line">    &lt;slot name=&quot;header&quot;&gt;&lt;/slot&gt;</span><br><span class="line">  &lt;/header&gt;</span><br><span class="line">  &lt;main&gt;</span><br><span class="line">    &lt;!-- 不带name的&lt;slot&gt;，会默认带有一个隐含的名字default --&gt;</span><br><span class="line">    &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">  &lt;/main&gt;</span><br><span class="line">  &lt;footer&gt;</span><br><span class="line">    &lt;slot name=&quot;footer&quot;&gt;&lt;/slot&gt;</span><br><span class="line">  &lt;/footer&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>在向具名插槽提供内容时，可以在一个<code>&lt;template&gt;</code>元素上使用<code>v-slot</code>指令，并以<code>v-slot</code>参数的形式提供其名称：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;base-layout&gt;</span><br><span class="line">  &lt;template v-slot:header&gt;</span><br><span class="line">    &lt;h1&gt;Here might be a page title&lt;/h1&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">    </span><br><span class="line">  &lt;p&gt;A paragraph for the main content.&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;And another one.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">  &lt;template v-slot:footer&gt;</span><br><span class="line">    &lt;p&gt;Here&#x27;s some contact info&lt;/p&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">&lt;/base-layout&gt;</span><br></pre></td></tr></table></figure>
<p>现在<code>&lt;template&gt;</code>元素中的所有内容都将会被传入相应的插槽，任何没有被包裹在带有<code>v-slot</code>的<code>&lt;template&gt;</code>中的内容都会被视为默认插槽的内容。</p>
<p>即上述代码等价于：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;base-layout&gt;</span><br><span class="line">  &lt;template v-slot:header&gt;</span><br><span class="line">    &lt;h1&gt;Here might be a page title&lt;/h1&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">  &lt;template v-slot:default&gt;</span><br><span class="line">    &lt;p&gt;A paragraph for the main content.&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;And another one.&lt;/p&gt;</span><br><span class="line">  &lt;/template&gt; </span><br><span class="line">  </span><br><span class="line">  &lt;template v-slot:footer&gt;</span><br><span class="line">    &lt;p&gt;Here&#x27;s some contact info&lt;/p&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">&lt;/base-layout&gt;</span><br></pre></td></tr></table></figure>
<p><strong>注意：<code>v-slot</code>只能添加在<code>&lt;template&gt;</code>上。</strong></p>
<h3 id="作用域插槽">作用域插槽</h3>
<p>有时会让插槽内容能够访问子组件中才有的数据。如这里有个组件<code>&lt;current-user&gt;</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;span&gt;</span><br><span class="line">  &lt;slot&gt;&#123;&#123;user.lastName&#125;&#125;&lt;/slot&gt;</span><br><span class="line">&lt;/span&gt;</span><br></pre></td></tr></table></figure>
<p>若想换掉备用内容，用名来显示，直接将组件中的<code>user.lastName</code>换成<code>user.firstName</code>是不行的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;current-user&gt;</span><br><span class="line">  &#123;&#123;user.firstName&#125;&#125;</span><br><span class="line">&lt;/current-user&gt;</span><br></pre></td></tr></table></figure>
<p>由于只有<code>&lt;current-user&gt;</code>组件可以访问到<code>user</code>，而所提供的内容是在父级渲染的。因此为了让<code>user</code>在父级的插槽内容中可用，<strong>将<code>user</code>作为<code>&lt;slot&gt;</code>元素的一个attribute绑定上去</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;span&gt;</span><br><span class="line">  &lt;slot v-bind:user=&quot;user&quot;&gt;&#123;&#123;user.lastName&#125;&#125;&lt;/slot&gt;</span><br><span class="line">&lt;/span&gt;</span><br></pre></td></tr></table></figure>
<p>绑定在<code>&lt;slot&gt;</code>元素上的attribute被称为插槽prop。在父级作用域中，可以使用带值的<code>v-slot</code>来定义所提供插槽prop的名字：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;current-user&gt;</span><br><span class="line">  &lt;!-- slotProps为包含所有插槽prop的对象 --&gt;</span><br><span class="line">  &lt;template v-slot:default=&quot;slotProps&quot;&gt;</span><br><span class="line">    &#123;&#123;slotProps.user.firstName&#125;&#125;</span><br><span class="line">  &lt;/template&gt;  </span><br><span class="line">&lt;/current-user&gt;</span><br></pre></td></tr></table></figure>
<h4 id="独占默认插槽的缩写语法">独占默认插槽的缩写语法</h4>
<p><strong>当被提供的内容只有默认插槽时，组件的标签才可以被当作插槽的模板来使用。</strong>此时可以把<code>v-slot</code>直接用在组件上：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;current-user v-slot:default=&quot;slotProps&quot;&gt;</span><br><span class="line">  &#123;&#123;slotProps.user.firstName&#125;&#125; </span><br><span class="line">&lt;/current-user&gt;</span><br></pre></td></tr></table></figure>
<p>由于不带参数的<code>v-slot</code>被假定为对应默认的插槽，因此还有更简化的写法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;current-user v-slot=&quot;slotProps&quot;&gt;</span><br><span class="line">  &#123;&#123;slotProps.user.firstName&#125;&#125; </span><br><span class="line">&lt;/current-user&gt;</span><br></pre></td></tr></table></figure>
<p><strong>默认插槽的缩写写法不能和具名插槽混用，这会导致作用域不明确。</strong></p>
<p>只要出现多个插槽，则始终要为所有的插槽使用完整的基于<code>&lt;template&gt;</code>的语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;current-user&gt;</span><br><span class="line">  &lt;template v-slot:default=&quot;slotProps&quot;&gt;</span><br><span class="line">    &#123;&#123;slotProps.user.firstName&#125;&#125;</span><br><span class="line">  &lt;/template&gt;  </span><br><span class="line"></span><br><span class="line">  &lt;template v-slot:other=&quot;otherSlotProps&quot;&gt;</span><br><span class="line">    ...</span><br><span class="line">  &lt;/template&gt;  </span><br><span class="line">&lt;/current-user&gt;</span><br></pre></td></tr></table></figure>
<h4 id="解析插槽prop">解析插槽Prop</h4>
<p>作用域插槽的内部工作原理是将插槽内容包裹在一个拥有单个参数的函数里：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>(<span class="params">slotProps</span>)&#123;</span><br><span class="line">  <span class="comment">//插槽内容</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这意味着<code>v-slot</code>的值实际上可以是任何能够作为函数定义中参数的JavaScript表达式。因此在支持的环境下（单文件组件或现代浏览器），也可以使用ES2015解构来传入具体的插槽prop：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;current-user v-slot=&quot;&#123;user&#125;&quot;&gt;</span><br><span class="line">  &#123;&#123;user.firstName&#125;&#125; </span><br><span class="line">&lt;/current-user&gt;</span><br></pre></td></tr></table></figure>
<p>这样可以在该插槽提供了多个prop时让代码更简洁。它同样开启了prop重命名等功能，如把<code>user</code>重命名为<code>person</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;current-user v-slot=&quot;&#123;user:person&#125;&quot;&gt;</span><br><span class="line">  &#123;&#123;person.firstName&#125;&#125; </span><br><span class="line">&lt;/current-user&gt;</span><br></pre></td></tr></table></figure>
<p>还可以定义后备内容，用于插槽prop是undefined的情形：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;current-user v-slot=&quot;&#123;user=&#123;firstName:&#x27;Guest&#x27;&#125;&#125;&quot;&gt;</span><br><span class="line">  &#123;&#123;user.firstName&#125;&#125; </span><br><span class="line">&lt;/current-user&gt;</span><br></pre></td></tr></table></figure>
<h3 id="动态插槽名">动态插槽名</h3>
<p>动态指令参数也可以用在<code>v-slot</code>上，来定义动态的插槽名：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;base-layout&gt;</span><br><span class="line">  &lt;template v-slot:[dynamicSlotName]&gt;</span><br><span class="line">    ...</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">&lt;/base-layout&gt;</span><br></pre></td></tr></table></figure>
<h3 id="具名插槽的缩写">具名插槽的缩写</h3>
<p>与<code>v-on</code>和<code>v-bind</code>一样，<code>v-slot</code>也有缩写，即把参数之前的所有内容（<code>v-slot:</code>）替换为字符<code>#</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;base-layout&gt;</span><br><span class="line">  &lt;template #header&gt;</span><br><span class="line">    &lt;h1&gt;Here might be a page title&lt;/h1&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">    </span><br><span class="line">  &lt;p&gt;A paragraph for the main content.&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;And another one.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">  &lt;template #footer&gt;</span><br><span class="line">    &lt;p&gt;Here&#x27;s some contact info&lt;/p&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">&lt;/base-layout&gt;</span><br></pre></td></tr></table></figure>
<p>与其他指令相同，该缩写只在其有参数时才可用。若希望无参数时也能使用缩写的话，就必须始终明确插槽名：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;current-user #default=&quot;&#123;user&#125;&quot;&gt;</span><br><span class="line">    &#123;&#123;user.firstName&#125;&#125; </span><br><span class="line">&lt;/current-user&gt;</span><br></pre></td></tr></table></figure>
<h3 id="其他实例">其他实例</h3>
<p>插槽prop允许将插槽转换为可复用的模板，这些模板可以基于输入的prop渲染出不同的内容。这在设<strong>计封装数据逻辑的同时允许父级组件自定义部分布局的可复用组件</strong>是最有用的。</p>
<p>如要实现一个<code>&lt;todo-list&gt;</code>组件，它是一个列表且包含布局和过滤逻辑：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li</span><br><span class="line">    v-for=&quot;todo in filteredTodos&quot;</span><br><span class="line">    v-bind:key=&quot;todo.id&quot;</span><br><span class="line">  &gt;</span><br><span class="line">    &#123;&#123;todo.text&#125;&#125;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>
<p>可以考虑将每个todo作为父级组件的插槽，以此通过父级组件对其进行控制，然后将<code>todo</code>作为一个插槽prop进行绑定：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li</span><br><span class="line">    v-for=&quot;todo in filteredTodos&quot;</span><br><span class="line">    v-bind:key=&quot;todo.id&quot;</span><br><span class="line">  &gt;</span><br><span class="line">    &lt;!-- 为每个todo准备了插槽，将todo对象作为一个插槽的prop传入 --&gt;</span><br><span class="line">    &lt;slot name=&quot;todo&quot; v-bind:todo=&quot;todo&quot;&gt;</span><br><span class="line">      &#123;&#123;todo.text&#125;&#125;</span><br><span class="line">    &lt;/slot&gt;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>
<p>现在使用<code>&lt;itodo-list&gt;</code>组件时，可以选择为todo定义一个不一样的<code>&lt;template&gt;</code>作为替代方案，并且可以从子组件中获取数据：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;todo-list v-bind:todo=&quot;todos&quot;&gt;</span><br><span class="line">  &lt;template v-slot:todo=&quot;&#123;todo&#125;&quot;&gt;</span><br><span class="line">    &lt;span v-if=&quot;todo.isComplete&quot;&gt;&lt;/span&gt;</span><br><span class="line">    &#123;&#123;todo.text&#125;&#125;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">&lt;/todo-list&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>前端</category>
        <category>前端框架</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>结构性思维笔记</title>
    <url>/2022/08/07/%E7%BB%93%E6%9E%84%E6%80%A7%E6%80%9D%E7%BB%B4%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="结构性思维笔记">结构性思维笔记</h1>
<p>以思维导图的格式记录结构性思维课程的笔记，顺便练习一下Markdown的无序列表语法。</p>
<h2 id="思维导图">思维导图</h2>
<p><img src="/2022/08/07/%E7%BB%93%E6%9E%84%E6%80%A7%E6%80%9D%E7%BB%B4%E7%AC%94%E8%AE%B0/1.png"></p>
<h2 id="笔记内容">笔记内容</h2>
<ul>
<li><p>课程导入</p>
<ul>
<li><p>结构与思维的力量</p>
<ul>
<li><p>结构的定义:组成整体的各部分的搭配和安排</p></li>
<li><p>结构性思维的训练目的:想清楚、说明白</p></li>
</ul></li>
</ul></li>
<li><p>两个核心训练原则</p>
<ul>
<li><p>利他性原则</p>
<ul>
<li><p>从TA的角度思考表达（即随时发问"我讲明白了吗？"）</p></li>
<li><p>TA决定我是否清楚结构</p></li>
</ul></li>
<li><p>讲理性原则</p>
<ul>
<li><p>从感性到理性</p></li>
<li><p>从隐性到显性</p></li>
</ul></li>
</ul></li>
<li><p>构建结构性思维</p>
<ul>
<li><p>结构性思维的四个基本特点</p>
<ul>
<li><p>结论先行</p>
<ul>
<li><p>时间紧</p></li>
<li><p>他需要</p></li>
<li><p>信息多</p></li>
</ul></li>
<li><p>上下对应</p></li>
<li><p>分类清晰</p></li>
<li><p>排列逻辑</p></li>
</ul></li>
<li><p>结构性思维接收信息</p>
<ul>
<li>不带任何主观色彩的去接收别人信息的传递</li>
</ul></li>
<li><p>第一步:识别</p>
<ul>
<li>识别信息中的事实与个人观念或判断</li>
</ul></li>
<li><p>第二步:对应</p>
<ul>
<li>找到事实与观点之间的对应关系</li>
</ul></li>
<li><p>第三步:结构</p>
<ul>
<li>画出结构性关系图</li>
</ul></li>
<li><p>第四步:表达</p>
<ul>
<li>用语言表达信息的主要含义</li>
</ul></li>
</ul></li>
<li><p>纵向的问答/概括式结构</p>
<ul>
<li><p>自上而下的疑问回答式</p>
<ul>
<li><p>第一步:设定场景</p></li>
<li><p>第二步:确定主题</p></li>
<li><p>第三步:设想问题</p></li>
<li><p>第四步:回答问题</p></li>
<li><p>要问到多深？</p>
<ul>
<li>最后回答中都是公理、定理为止</li>
</ul></li>
<li><p>要问到多宽？</p>
<ul>
<li>直到主题句中所有关键词都被问到</li>
</ul></li>
</ul></li>
<li><p>自下而上的概括总结式</p>
<ul>
<li>找到论点中的共性，所概括出来的主题需要囊括所有论点的观点</li>
</ul></li>
</ul></li>
<li><p>横向的演绎与归纳逻辑结构</p>
<ul>
<li><p>演绎论证结构（从一般到特殊）</p>
<ul>
<li><p>演绎论证的定义</p>
<ul>
<li>从普遍性的理论知识出发，去认识个别的、特殊的现象的一种论证推理方法</li>
</ul></li>
<li><p>演绎的两种形式</p>
<ul>
<li>标准式 三段论
<ul>
<li>大前提→小前提→结论</li>
</ul></li>
<li>常见式
<ul>
<li>现象→原因→解决方案</li>
</ul></li>
</ul></li>
</ul></li>
<li><p>归纳论证结构（从特殊到一般）</p>
<ul>
<li>归纳论证的定义
<ul>
<li>从许多个别的事物中概括出一般性概念、原则或结论的推理方法</li>
</ul></li>
</ul></li>
<li><p>排序的三种形式</p>
<ul>
<li>时间顺序
<ul>
<li>时间的先后顺序，事件彼此可能存在因果，可能不 存在因果</li>
</ul></li>
<li>结构性顺序
<ul>
<li>将整体分为部分，例如顺时针、从上到下等</li>
</ul></li>
<li>重要性顺序
<ul>
<li>将事物按重要性或非重要性分组</li>
</ul></li>
</ul></li>
<li><p>分类的MECE原则</p>
<ul>
<li><p>MECE原则</p>
<ul>
<li><p>相互独立</p></li>
<li><p>完全穷尽</p></li>
<li><p>互不交叉</p></li>
<li><p>应有尽有</p></li>
<li><p>不重不漏</p></li>
<li><p>分清分净</p></li>
<li><p>MECE原则使用前提</p>
<ul>
<li>界定范围</li>
<li>明确标准</li>
</ul></li>
</ul></li>
<li><p>常见分类</p>
<ul>
<li>二分法
<ul>
<li>如内外;左右;男女;收支;专业和业余</li>
</ul></li>
<li>过程法
<ul>
<li>如日程表，解决问题的6个步骤，达成目标的3个阶段</li>
</ul></li>
<li>要素法
<ul>
<li>优秀员工的7种品质，公司的组织架构图</li>
</ul></li>
<li>公式法
<ul>
<li>销售额＝单价*数量</li>
</ul></li>
<li>矩阵法
<ul>
<li>重要紧急象限图;swot分析</li>
</ul></li>
<li>市场战略3C模型
<ul>
<li>公司、顾客、竞争对手</li>
</ul></li>
<li>市场营销决策4P模型
<ul>
<li>产品、价格、渠道、促销</li>
</ul></li>
<li>目标制定的SMART原则
<ul>
<li>S:具体的</li>
<li>M:可衡量的</li>
<li>A:可达成的</li>
<li>R:相关的</li>
<li>T:可实现的</li>
</ul></li>
</ul></li>
</ul></li>
</ul></li>
<li><p>序言的讲故事结构</p>
<ul>
<li>序言结构的基本要素
<ul>
<li>S:背景</li>
<li>C:冲突</li>
<li>Q:疑问</li>
<li>A:回答</li>
</ul></li>
<li>常见的序言模式
<ul>
<li>标准式
<ul>
<li>S→C→Q→A</li>
</ul></li>
<li>开门见山式
<ul>
<li>A→S→C</li>
</ul></li>
<li>突出忧虑式
<ul>
<li>C→S→Q→A</li>
</ul></li>
<li>突出信心式
<ul>
<li>Q→S→C→A</li>
</ul></li>
</ul></li>
</ul></li>
</ul>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>结构性思维</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次XAMPP的报错实例</title>
    <url>/2020/02/11/%E8%AE%B0%E4%B8%80%E6%AC%A1XAMPP%E7%9A%84%E6%8A%A5%E9%94%99%E5%AE%9E%E4%BE%8B/</url>
    <content><![CDATA[<h1 id="记一次-xampp-的报错实例">记一次 XAMPP 的报错实例</h1>
<p>昨天在用服务器构建网页时，使用到了XAMPP，但在访问服务器本身的IP时，却出现了如下的报错：</p>
<p><strong><em>Uncaught error with message ‘[db.WindConnection.init] SQLSTATE[HY000] [1045] Access denied for user ‘root’@’localhost’ (using password: YES)’</em></strong></p>
<p><strong><em>The server encountered an internal error and failed to process your request. Please try again later. If this error is temporary, reloading the page might resolve the problem.<br>
If you are able to contact the administrator report this error message(<a href="http://www.windframework.com/" class="uri">http://www.windframework.com/</a>)</em></strong></p>
<p>内容大体上是说，权限不够或密码错误，于是我重新看了一下 <strong>phpasmin</strong> 里的账号密码</p>
<p>图中可以看到 <strong>root</strong> 的三个账户的密码都是无且授权为是<br>
So后面我根据百度的方法一顿操作</p>
<p><img src="/2020/02/11/%E8%AE%B0%E4%B8%80%E6%AC%A1XAMPP%E7%9A%84%E6%8A%A5%E9%94%99%E5%AE%9E%E4%BE%8B/2.png"></p>
<p>完了发现又多了其他问题，最严重的一个是– <strong>Mysql服务无法启动</strong></p>
<p><img src="/2020/02/11/%E8%AE%B0%E4%B8%80%E6%AC%A1XAMPP%E7%9A%84%E6%8A%A5%E9%94%99%E5%AE%9E%E4%BE%8B/3.png"><br>
可以看到下图中XAPMM的Mysql以及无法启动且报一大堆的错</p>
<p><img src="/2020/02/11/%E8%AE%B0%E4%B8%80%E6%AC%A1XAMPP%E7%9A%84%E6%8A%A5%E9%94%99%E5%AE%9E%E4%BE%8B/4.png"></p>
<p><img src="/2020/02/11/%E8%AE%B0%E4%B8%80%E6%AC%A1XAMPP%E7%9A%84%E6%8A%A5%E9%94%99%E5%AE%9E%E4%BE%8B/5.png"></p>
<h2 id="ok现在开始第一次尝试">OK,现在开始第一次尝试：</h2>
<p>在Mysql目录bin里下找到<code>my.ini</code>文件用记事本打开，查找<code>[mysqld]</code>并在下面增加一行代码<code>innodb_force_recovery =4</code></p>
<p><img src="/2020/02/11/%E8%AE%B0%E4%B8%80%E6%AC%A1XAMPP%E7%9A%84%E6%8A%A5%E9%94%99%E5%AE%9E%E4%BE%8B/6.png"></p>
<p>结果XAMPP报错：</p>
<p><img src="/2020/02/11/%E8%AE%B0%E4%B8%80%E6%AC%A1XAMPP%E7%9A%84%E6%8A%A5%E9%94%99%E5%AE%9E%E4%BE%8B/7.png"></p>
<h2 id="第二次尝试">第二次尝试：</h2>
<p>看日志最后几行发现是3306端口被占用，既然3306不能用</p>
<p><img src="/2020/02/11/%E8%AE%B0%E4%B8%80%E6%AC%A1XAMPP%E7%9A%84%E6%8A%A5%E9%94%99%E5%AE%9E%E4%BE%8B/8.png"><br>
那我就换一个端口呗<br>
修改Mysql目录里bin中的<code>my.ini</code>文件的端口如下：<br>
<img src="/2020/02/11/%E8%AE%B0%E4%B8%80%E6%AC%A1XAMPP%E7%9A%84%E6%8A%A5%E9%94%99%E5%AE%9E%E4%BE%8B/9.png"></p>
<p>顺便修改了 <strong>默认ip地址</strong> ：<br>
<img src="/2020/02/11/%E8%AE%B0%E4%B8%80%E6%AC%A1XAMPP%E7%9A%84%E6%8A%A5%E9%94%99%E5%AE%9E%E4%BE%8B/10.png"></p>
<p>结果还是不行：</p>
<p><img src="/2020/02/11/%E8%AE%B0%E4%B8%80%E6%AC%A1XAMPP%E7%9A%84%E6%8A%A5%E9%94%99%E5%AE%9E%E4%BE%8B/11.png"></p>
<p>10+小时过去了，试了各种办法都没法启动Mysql服务，于是，我直接 <strong>重装XAMPP</strong><br>
<img src="/2020/02/11/%E8%AE%B0%E4%B8%80%E6%AC%A1XAMPP%E7%9A%84%E6%8A%A5%E9%94%99%E5%AE%9E%E4%BE%8B/13.png"></p>
<h2 id="文章后面为xampp对apache的初始化">文章后面为XAMPP对Apache的初始化</h2>
<p>在XAMPP中选择配置</p>
<p><img src="/2020/02/11/%E8%AE%B0%E4%B8%80%E6%AC%A1XAMPP%E7%9A%84%E6%8A%A5%E9%94%99%E5%AE%9E%E4%BE%8B/14.png"><br>
更改<code>Apache</code>的端口</p>
<p><img src="/2020/02/11/%E8%AE%B0%E4%B8%80%E6%AC%A1XAMPP%E7%9A%84%E6%8A%A5%E9%94%99%E5%AE%9E%E4%BE%8B/15.png"></p>
<p>确保画 <strong>蓝圈</strong> 的地方是选择<code>Apache</code>的，更改画 <strong>黄线</strong> 里的端口值（在数字后面加个零即可）。记住原来的两个值，这里我原来的值分别是80和443</p>
<p><img src="/2020/02/11/%E8%AE%B0%E4%B8%80%E6%AC%A1XAMPP%E7%9A%84%E6%8A%A5%E9%94%99%E5%AE%9E%E4%BE%8B/16.png"></p>
<p>然后在XAMPP中找到Apache里conf目录的<code>httpd.conf</code>文件，用记事本打开并查找未更改端口前的第一个数值，将其改成更改后的端口值。如我这里是将80改为800，Ctrl+S保存</p>
<p><img src="/2020/02/11/%E8%AE%B0%E4%B8%80%E6%AC%A1XAMPP%E7%9A%84%E6%8A%A5%E9%94%99%E5%AE%9E%E4%BE%8B/17.png"></p>
<p>再在conf目录里的extra中找到<code>httpd- ssl.conf</code>文件，用记事本打开并查找未更改端口前的第二个数值，将其改成更改后的端口值。如我这里是将443改为4430 ， <strong>Ctrl+S</strong> 保存</p>
<p><img src="/2020/02/11/%E8%AE%B0%E4%B8%80%E6%AC%A1XAMPP%E7%9A%84%E6%8A%A5%E9%94%99%E5%AE%9E%E4%BE%8B/18.png"></p>
<p>现在回到XAMPP，点击 <strong>Apache</strong> 中的 <strong>Start</strong> ,看到Apache和Mysql底色是绿色即完成;</p>
<p><img src="/2020/02/11/%E8%AE%B0%E4%B8%80%E6%AC%A1XAMPP%E7%9A%84%E6%8A%A5%E9%94%99%E5%AE%9E%E4%BE%8B/19.png"></p>
]]></content>
      <categories>
        <category>XAMPP</category>
      </categories>
      <tags>
        <tag>XAMPP</tag>
        <tag>报错</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式的学习（一）</title>
    <url>/2022/07/27/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="设计模式">设计模式</h1>
<p>设计模式为软件开发人员在开发过程中面临一般问题时的解决方案，共有33种，可将其分为四大类：创建型模式、结构型模式、行为型模式和J2EE模式。</p>
<h2 id="创建型模式">创建型模式</h2>
<p>创建型模式致力于将对象的创建与使用分离，着重于如何创建对象。</p>
<p>该分类下的设计模式有5种：工厂模式、抽象工厂模式、单例模式、建造者模式和原型模式。</p>
<h2 id="结构型模式">结构型模式</h2>
<p>结构型模式关注于类的继承和组合，着重于简化结构并识别类与对象之间的关系。</p>
<p>该分类下的设计模式有8种：适配器模式、桥接模式、过滤器模式、组合模式、装饰器模式、外观模式、享元模式和代理模式。</p>
<h2 id="行为型模式">行为型模式</h2>
<p>行为型模式关注于对象之间的交互以及彼此之间的响应性，着重于算法与对象间的职责分配。</p>
<p>该分类下的设计模式有12种：责任链模式、命令模式、解释器模式、迭代器模式、中介者模式、备忘录模式、观察者模式、状态模式、空对象模式、策略模式、模板模式和访问者模式。</p>
<h2 id="j2ee模式">J2EE模式</h2>
<p>J2EE模式是为了开发基于Web的企业引用程序而构建的，特别关注表示层。</p>
<p>该分类下的设计模式有8种：MVC模式、业务代表模式、组合实体模式、数据访问对象模式、前端控制器模式、拦截过滤器模式、服务定位器模式和传输对象模式。</p>
<h1 id="设计模式的六大原则solid">设计模式的六大原则（SOLID）</h1>
<h2 id="单一职责原则single-responsibility-principle">单一职责原则（Single Responsibility Principle）</h2>
<p>不要存在多于一个导致类变更的原因。即每个类都应只实现单一的职责。</p>
<h2 id="开放封闭原则open-closed-principle">开放封闭原则（Open Closed Principle）</h2>
<p>对扩展开放，对修改关闭。即在程序需要进行扩展时，不能去修改原有的代码，而是去扩展原有的代码。该原则的关键步骤是将代码抽象化。</p>
<h2 id="里氏代换原则liskov-substitution-principle">里氏代换原则（Liskov Substitution Principle）</h2>
<p>任何基类可以出现的地方，子类一定可以出现。该原则是继承复用的基石，只有当派生类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而派生类也能够在基类的基础上增加新的行为。</p>
<p>该原则作为面向对象设计的基本原则之一，是对开闭原则的补充，是对实现抽象化的具体步骤的规范。</p>
<h2 id="迪米特原则又称最少知道原则law-of-demeter">迪米特原则，又称最少知道原则(Law of Demeter)</h2>
<p>一个类对自己依赖的类知道的越少越好。即无论被依赖的类复杂度有多高，都应将其逻辑封装在方法的内部后，在通过public方法提供给外部。使得当被依赖的类变化时，该类受到的影响最小。</p>
<h2 id="接口隔离原则interface-segregation-principle">接口隔离原则（Interface Segregation Principle）</h2>
<p>每个接口不应存在子类用不到却必须实现的方法，若存在这种情况，应将接口拆分。为降低类之间的耦合度，使用多个隔离的接口比只使用单个接口要好。</p>
<h2 id="依赖倒置原则dependence-inversion-principle">依赖倒置原则（Dependence Inversion Principle）</h2>
<p>针对接口编程，依赖于抽象而不依赖于具体。即用到具体类时，不与具体类交互，而与该具体类的上层接口交互。</p>
<p>该原则是开闭原则的基础。</p>
<p>本文中主要讲解最常用的设计模式之一：策略模式。</p>
<h1 id="策略模式">策略模式</h1>
<p>策略模式定义了一系列的算法，并将每个算法都封装了起来，使得算法之间可以相互替换，且算法的改变不会影响使用算法的用户。策略模式属于对象行为型模式，其通过对算法进行封装，把使用算法的责任和算法的实现分割开来，并委派给不同的对象对这些算法进行管理。</p>
<h2 id="策略模式的优点"><strong>策略模式的优点</strong></h2>
<p>1、可避免使用多重条件语句，如多个<code>if...else</code>条件分支、<code>switch...case</code>语句。</p>
<p>2、提供了一系列可供重用的算法组，适当使用继承可以将算法族的公共代码转移到父类里，从而避免重复的代码。</p>
<p>3、可提供相同行为的不同实现，用户可根据不同时间或空间选择不同的实现方式。</p>
<p>4、可在不修改源代码的前提下，灵活增加新算法。</p>
<p>5、将算法的使用放到环境类中，算法的实现移到具体策略类中，实现了二者的分离。</p>
<h2 id="策略模式的缺点"><strong>策略模式的缺点</strong></h2>
<p>1、客户端必须理解所有策略算法的区别，以便于选择恰当的算法类。</p>
<p>2、策略类较多时，维护难度较大。</p>
<h2 id="策略模式的使用举例">策略模式的使用举例</h2>
<p>例如这是伪代码优化前的大致逻辑，如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="type">int</span> worknum;<span class="comment">//工号</span></span><br><span class="line">    <span class="type">int</span> age;<span class="comment">//年龄</span></span><br><span class="line">    <span class="type">int</span> reqNum;<span class="comment">//查询数量</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果是学生类型</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isStudent</span><span class="params">(Person pto)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pto.type == <span class="string">&#x27;student&#x27;</span>)&#123;</span><br><span class="line">       </span><br><span class="line">       <span class="comment">//开关关闭不请求</span></span><br><span class="line">       <span class="keyword">if</span>(isstudentSwitchClose)&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>;           </span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">        <span class="comment">//请求只有一条记录</span></span><br><span class="line">        <span class="keyword">if</span>(pto.reqNum==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> singleRemoteEOIinvoke(pto);<span class="comment">//调用学生数据的点查接口</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">//请求超过一条</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(pto.reqNum&gt;<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> batchRemoteEOIinvoke(pto);<span class="comment">//调用学生数据的批量接口</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//如果是教师类型</span></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(pto.type==<span class="string">&#x27;teacher&#x27;</span>)&#123;</span><br><span class="line">    </span><br><span class="line">      <span class="comment">//开关关闭不请求</span></span><br><span class="line">       <span class="keyword">if</span>(isteacherSwitchClose)&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>;           </span><br><span class="line">       &#125;</span><br><span class="line">        <span class="comment">//请求只有一条记录</span></span><br><span class="line">        <span class="keyword">if</span>(pto.reqNum==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> singleRemoteMarketinvoke(pto);<span class="comment">//调用教师数据的点查接口</span></span><br><span class="line">           </span><br><span class="line">          <span class="comment">//请求超过一条</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(pto.reqNum&gt;<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> batchRemoteMarketinvoke(pto);<span class="comment">//调用教师数据的批量接口</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>例子中的代码存在较多的if分支，若使用策略模式来优化，代码将变成下面这样：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">GroupLabel</span> &#123;</span><br><span class="line">  <span class="type">boolean</span> <span class="title function_">processBiz</span><span class="params">(Person pto)</span>;<span class="comment">//该方法对应策略实现类的具体实现</span></span><br><span class="line">  String <span class="title function_">getType</span><span class="params">()</span>;<span class="comment">//该方法是策略类的类型，对应着```if...else```条件判断的类型</span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//学生类型的策略实现类</span></span><br><span class="line">studentGroupLablel <span class="keyword">implements</span> <span class="title class_">GroupLabel</span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//对应学生类型的条件分支里的实现</span></span><br><span class="line">  <span class="type">boolean</span> <span class="title function_">processBiz</span><span class="params">(Person pto)</span>&#123;</span><br><span class="line">  </span><br><span class="line">       <span class="comment">//开关关闭不请求</span></span><br><span class="line">     <span class="keyword">if</span>(isstudentSwitchClose)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;           </span><br><span class="line">     &#125;</span><br><span class="line">    </span><br><span class="line">      <span class="comment">//请求只有一条记录</span></span><br><span class="line">      <span class="keyword">if</span>(pto.reqNum==<span class="number">1</span>)&#123;</span><br><span class="line">          <span class="keyword">return</span> singleRemoteEOIinvoke(pto);<span class="comment">//调用学生数据点查接口 </span></span><br><span class="line">          </span><br><span class="line">          <span class="comment">//请求超过一条</span></span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span>(pto.reqNum&gt;<span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">return</span> batchRemoteEOIinvoke(pto);<span class="comment">//调用远程大数据批量接口    </span></span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">  <span class="comment">//对应学生类型</span></span><br><span class="line">  String <span class="title function_">getType</span><span class="params">()</span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="string">&quot;student&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//教师类型的策略实现类</span></span><br><span class="line">teacherGroupLablel <span class="keyword">implements</span> <span class="title class_">GroupLabel</span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//对应教师类型的条件分支里的实现</span></span><br><span class="line">   <span class="type">boolean</span> <span class="title function_">processBiz</span><span class="params">(Person pto)</span>&#123;</span><br><span class="line">   </span><br><span class="line">     <span class="comment">//开关关闭不请求</span></span><br><span class="line">     <span class="keyword">if</span>(isteacherSwitchClose)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;           </span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">      <span class="comment">//请求只有一条记录</span></span><br><span class="line">      <span class="keyword">if</span>(pto.reqNum==<span class="number">1</span>)&#123;</span><br><span class="line">          <span class="keyword">return</span> singleRemoteMarketinvoke(pto);<span class="comment">//调用教师数据的点查接口  </span></span><br><span class="line">         </span><br><span class="line">        <span class="comment">//请求超过一条</span></span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span>(pto.reqNum&gt;<span class="number">1</span>)&#123;</span><br><span class="line">          <span class="keyword">return</span> batchRemoteMarketinvoke(pto);<span class="comment">//调用教师数据的批量接口    </span></span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">   <span class="comment">//对应教师类型</span></span><br><span class="line">    String <span class="title function_">getType</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;teacher&quot;</span>;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>前端框架之Vue.js（六）</title>
    <url>/2022/11/11/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BVue.js%EF%BC%88%E5%85%AD%EF%BC%89/</url>
    <content><![CDATA[<h1 id="可复用性组合">可复用性&amp;组合</h1>
<h2 id="混入">混入</h2>
<h3 id="基础">基础</h3>
<p>混入用于分发Vue组件中是可复用功能。一个混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被“混合”进入该组件本身的选项。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义一个混入对象</span></span><br><span class="line"><span class="keyword">var</span> myMixin=&#123;</span><br><span class="line">  <span class="attr">created</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">hello</span>()</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="attr">hello</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello from mixin!&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义一个使用混入对象的组件</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Component</span>=<span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span><br><span class="line">  <span class="attr">mixins</span>:[myMixin]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">var</span> component=<span class="keyword">new</span> <span class="title class_">Component</span>()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h3 id="选项合并">选项合并</h3>
<p>当组件和混入对象含有同名选项时，这些选项将以恰当的方式进行合并。如数据对象在内部会进行递归合并，并在发生冲突时会以组件数据为优先：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myMixin=&#123;</span><br><span class="line">  <span class="attr">data</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">      <span class="attr">message</span>:<span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line">      <span class="attr">foo</span>:<span class="string">&#x27;abc&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">mixins</span>:[myMixin],</span><br><span class="line">  <span class="attr">data</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">      <span class="attr">message</span>:<span class="string">&#x27;goodbye&#x27;</span>,</span><br><span class="line">      <span class="attr">bar</span>:<span class="string">&#x27;def&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">created</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$data</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">/*合并结果为:</span></span><br><span class="line"><span class="comment">&#123; message: &quot;goodbye&quot;, foo: &quot;abc&quot;, bar: &quot;def&quot; &#125;*/</span></span><br></pre></td></tr></table></figure>
<p>同名钩子函数将合并为一个数组，因此都将被调用。<strong>混入对象的钩子将在组件自身钩子之前被调用。</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myMixin=&#123;</span><br><span class="line">  <span class="attr">created</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;混入对象的钩子被调用&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">mixins</span>:[myMixin],</span><br><span class="line">  <span class="attr">created</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;组件钩子被调用&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">created</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$data</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">/*合并结果为：</span></span><br><span class="line"><span class="comment">混入对象的钩子被调用</span></span><br><span class="line"><span class="comment">组件钩子被调用*/</span></span><br></pre></td></tr></table></figure>
<p>值为对象的选项如<code>methods</code>、<code>components</code>和<code>directives</code>，将被合并为同一个对象。两个对象键名冲突时，取组件对象的键值对：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mixin=&#123;</span><br><span class="line">  <span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="attr">foo</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">conflicting</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;from mixin&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> vm=<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">mixins</span>:[mixin],</span><br><span class="line">  <span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="attr">bar</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;bar&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">conflicting</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;from self&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">vm.<span class="title function_">foo</span>()</span><br><span class="line">vm.<span class="title function_">bar</span>()</span><br><span class="line">vm.<span class="title function_">conflicting</span>()</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">foo</span></span><br><span class="line"><span class="comment">bar</span></span><br><span class="line"><span class="comment">from self*/</span></span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong><code>Vue.extend()</code>也使用同样的策略进行合并</p>
<h3 id="全局混入">全局混入</h3>
<p>混入也可以进行全局注册。一旦使用全局混入，它将影响每一个之后创建的Vue实例。<strong>恰当使用时</strong>，可以用来为自定义选项注入处理逻辑。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//为自定义的选项myOption注入一个处理器</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">mixin</span>(&#123;</span><br><span class="line"> <span class="attr">created</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> myOption=<span class="variable language_">this</span>.<span class="property">$options</span>.<span class="property">myOption</span></span><br><span class="line">  <span class="keyword">if</span>(myOption)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(myOption)</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">myOption</span>:<span class="string">&#x27;hello!&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">/*运行结果如下：</span></span><br><span class="line"><span class="comment">hello!*/</span></span><br></pre></td></tr></table></figure>
<h3 id="自定义选项合并策略">自定义选项合并策略</h3>
<p>自定义选项合并将使用默认策略，即简单地覆盖已有值。若想让自定义选项以自定义逻辑合并，可以向<code>Vue.config.optionMergeStrategies</code>添加一个函数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">optionMergeStrategies</span>.<span class="property">myOption</span>=<span class="keyword">function</span>(<span class="params">toVal,fromVal</span>)&#123;</span><br><span class="line">  <span class="comment">//返回合并后的值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对于多数值为对象的选项，可以使用与<code>methods</code>相同的合并策略：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> strategies=<span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">optionMergeStrategies</span></span><br><span class="line">strategies.<span class="property">myOption</span>=strategies.<span class="property">methods</span></span><br></pre></td></tr></table></figure>
<h2 id="过滤器">过滤器</h2>
<p>Vue.js允许自定义过滤器，可被用于一些常见的文本格式化。<strong>过滤器可以用在两个地方：双花括号插值和<code>v-bind</code>表达式。</strong>过滤器应该被添加在JavaScript表达式的尾部，由“管道符号”表示：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在双花括号中 --&gt;</span></span><br><span class="line">&#123;&#123;message | capitalize&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 在v-bind中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">&quot;rawId | formatId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>可以在一个组件的选项中定义本地的过滤器：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">filters</span>:&#123;</span><br><span class="line">  <span class="attr">capitalize</span>:<span class="keyword">function</span>(<span class="params">value</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!value) <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    value=value.<span class="title function_">toString</span>()</span><br><span class="line">    <span class="keyword">return</span> value.<span class="title function_">charAt</span>(<span class="number">0</span>).<span class="title function_">toUpperCase</span>()+value.<span class="title function_">slice</span>(<span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>也可以在创建Vue实例之前全局定义过滤器：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">filters</span>(<span class="string">&#x27;capitalize&#x27;</span>,<span class="keyword">function</span>(<span class="params">value</span>)&#123;</span><br><span class="line">  <span class="keyword">if</span>(!value) <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  value=value.<span class="title function_">toString</span>()</span><br><span class="line">  <span class="keyword">return</span> value.<span class="title function_">charAt</span>(<span class="number">0</span>).<span class="title function_">toUpperCase</span>()+value.<span class="title function_">slice</span>(<span class="number">1</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>当全局过滤器和局部过滤器重名时，会采用局部过滤器。</p>
<p>过滤器函数总接收表达式的值作为第一个参数。如上述代码中，<code>capitalize</code>过滤器函数将会收到<code>message</code>的值作为第一个参数。</p>
<p>过滤器可以串联：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;&#123;message&#125;&#125; | filterA | filterB&#125;&#125;</span><br><span class="line"><span class="comment">&lt;!-- filterA为接收单个参数的过滤器参数，message值将作为参数传入到filterA中</span></span><br><span class="line"><span class="comment">然后调用fliterB，将filterA的结果传递到fliterB中 --&gt;</span></span><br></pre></td></tr></table></figure>
<p>过滤器是JavaScript函数，因此可以接收参数：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;&#123;message&#125;&#125; | filterA(&#x27;arg1&#x27;,arg2)&#125;&#125;</span><br><span class="line"><span class="comment">&lt;!-- filterA为接收三个参数的过滤器参数</span></span><br><span class="line"><span class="comment">message值将作为第一个参数，普通字符串arg1作为第二个参数，表达式arg2的值作为第三个参数 --&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="从零开始简单的路由">从零开始简单的路由</h1>
<p>若只需要非常简单的路由而不想引入一个功能完整的路由库，可以想这样动态渲染一个页面级的组件，结合HTML5 History API，便可以搭建一个客户端路由：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">NotFound</span>=&#123;<span class="attr">template</span>:<span class="string">&#x27;&lt;p&gt;Page not found&lt;/p&gt;&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Home</span>=&#123;<span class="attr">template</span>:<span class="string">&#x27;&lt;p&gt;Home Page&lt;/p&gt;&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">About</span>=&#123;<span class="attr">template</span>:<span class="string">&#x27;&lt;p&gt;About Page&lt;/p&gt;&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes=&#123;</span><br><span class="line">  <span class="string">&#x27;/&#x27;</span>:<span class="title class_">Home</span>,</span><br><span class="line">  <span class="string">&#x27;/about&#x27;</span>:<span class="title class_">About</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>:&#123;</span><br><span class="line">    <span class="attr">currentRoute</span>:<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">pathname</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">computed</span>:&#123;</span><br><span class="line">    <span class="title class_">ViewComponent</span>()&#123;</span><br><span class="line">      <span class="keyword">return</span> routes[<span class="variable language_">this</span>.<span class="property">crruentRoute</span>]||<span class="title class_">NotFound</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">render</span>(<span class="params">h</span>)&#123;<span class="keyword">return</span> <span class="title function_">h</span>(<span class="variable language_">this</span>.<span class="property">ViewComponent</span>)&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h1 id="vue-router路由基础">vue-router路由基础</h1>
<p>对于大多数单页面应用，推荐使用官方支持的vue-router库。</p>
<h2 id="下载安装">下载安装</h2>
<p>使用npm下载vue-router库：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install vue-router@4</span><br></pre></td></tr></table></figure>
<h2 id="rounter-link"><code>rounter-link</code></h2>
<p>在vue-router里，不是使用常规的<code>&lt;a&gt;</code>标签，而是使用一个自定义组件<code>rounter-link</code>来创建链接。这样Vue Router可以在不重新加载页面的情况下更改URL，处理URL的生成及编码。</p>
<h2 id="rounter-view"><code>rounter-view</code></h2>
<p><code>rounter-view</code>将显示与URL对应的组件，可以将其放在任何地方。</p>
<p>使用Vue Router创建单页应用例子：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue-router@4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello App！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用router-link组件进行导航 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 通过传递to来指定连接 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;rounter-link&gt;将呈现以一个带有正确href属性的&lt;a&gt;标签 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>Go to Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>Go to About<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 路由出口 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 路由匹配到的组件将渲染在这里 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//定义路由组件,也可以从其他文件中导入</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title class_">Home</span>=&#123;<span class="attr">template</span>:<span class="string">&#x27;&lt;div&gt;Home&lt;/div&gt;&#x27;</span>&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title class_">About</span>=&#123;<span class="attr">template</span>:<span class="string">&#x27;&lt;div&gt;About&lt;/div&gt;&#x27;</span>&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//定义一些路由.每个路由都需要映射到一个组件中</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> routes=[</span></span><br><span class="line"><span class="language-javascript">  &#123;<span class="attr">path</span>:<span class="string">&#x27;/&#x27;</span>,<span class="attr">component</span>:<span class="title class_">Home</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">  &#123;<span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,<span class="attr">component</span>:<span class="title class_">About</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">]</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 创建路由实例并传递routes配置</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> router=<span class="title class_">VueRouter</span>.<span class="title function_">createRouter</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 内部提供了history模式的实现,为了简便,这里使用hash模式</span></span></span><br><span class="line"><span class="language-javascript">  <span class="attr">history</span>:<span class="title class_">VueRouter</span>.<span class="title function_">createWebHashHistory</span>(),</span></span><br><span class="line"><span class="language-javascript">  routes,<span class="comment">//这句为routes:routes的缩写</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 创建并挂载根示例</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> app=<span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 确保user路由实例使整个应用支持路由</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 在任意组件中能以this.$router的形式访问它,且能以this.$route的形式访问当前路由</span></span></span><br><span class="line"><span class="language-javascript">app.<span class="title function_">use</span>(router)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 启动应用</span></span></span><br><span class="line"><span class="language-javascript">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>通过调用<code>app.use(router)</code>，可以在任意组件中以<code>this.$router</code>的形式访问它,且能以<code>this.$route</code>的形式访问当前路由：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Home.vue文件中</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">  <span class="attr">computed</span>:&#123;</span><br><span class="line">    <span class="title function_">username</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">params</span>.<span class="property">username</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="title function_">goToDashboard</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="keyword">if</span>(isAuthenticated)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&#x27;/dashboard&#x27;</span>)</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&#x27;/login&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>要在<code>setup</code>函数中访问路由，则可以调用<code>useRouter</code>或<code>useRoute</code>函数。</p>
<h2 id="动态路由匹配">动态路由匹配</h2>
<h3 id="带参数的动态路由匹配">带参数的动态路由匹配</h3>
<p>很多时候需要将给定匹配模式的路由映射到同一个组件中。例如有一个<code>User</code>组件，它应该对所有用户进行渲染，但用户ID不同。在Vue Router中，可以在路径中使用一个动态字段来实现，该字段称之为路径参数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">User</span>=&#123;</span><br><span class="line">  <span class="attr">template</span>:<span class="string">&#x27;&lt;div&gt;User&lt;/div&gt;&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这些都会传递给createRouter</span></span><br><span class="line"><span class="keyword">const</span> routes=[</span><br><span class="line">  <span class="comment">//动态字段以冒号开始</span></span><br><span class="line">  &#123;<span class="attr">path</span>:<span class="string">&#x27;/users/:id&#x27;</span>,<span class="attr">component</span>:<span class="title class_">User</span>&#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>这样不同用户的URL都会映射到同一个路由上。</p>
<p>路径参数用冒号<code>:</code>表示。当一个路由被匹配时，它的<code>params</code>的值将在每个组件中以<code>this.$route.params</code>的形式暴露出来。因此可以通过更新<code>User</code>的模板来呈现当前的用户ID：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">User</span>=&#123;</span><br><span class="line">    <span class="attr">template</span>:<span class="string">&#x27;&lt;div&gt;User&#123;&#123;$route.params.id&#125;&#125;&lt;/div&gt;&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以在同一个路由中设置有多个路径参数，它们会映射到<code>$route.params</code>上的相应字段上。</p>
<table>
<colgroup>
<col style="width: 31%">
<col style="width: 25%">
<col style="width: 42%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">匹配模式</th>
<th>匹配路径</th>
<th style="text-align: left;">$route.params</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">/users/:username</td>
<td>/users/eduardo</td>
<td style="text-align: left;"><code>&#123; username: 'eduardo' &#125;</code></td>
</tr>
<tr class="even">
<td style="text-align: left;">/users/:username/posts/:postId</td>
<td>/users/eduardo/posts/123</td>
<td style="text-align: left;"><code>&#123; username: 'eduardo', postId: '123' &#125;</code></td>
</tr>
</tbody>
</table>
<p>除了<code>$route.params</code>之外，<code>route</code>对象还公开了其他有用的信息，如<code>route.query</code>（若URL中存在参数）、<code>$route.hash</code>等。</p>
<h3 id="相应路由参数的变化">相应路由参数的变化</h3>
<p>使用带有参数的路由时需要注意的时，当用户从<code>/users/johnny</code>导航到<code>/users/jolyne</code>时，<strong>相同的组件实例将会被重复使用，这也意味着组件的生命周期钩子不会被调用。</strong></p>
<p>要对同一个组件中参数的变化做出相应，可以用watch <code>$route</code>对象上的任意属性，如下列代码中是<code>$route.params</code>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">User</span>=&#123;</span><br><span class="line">  <span class="attr">template</span>:<span class="string">&#x27;...&#x27;</span>,</span><br><span class="line">  <span class="title function_">created</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.$watch(</span><br><span class="line">      <span class="function">()=&gt;</span><span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">params</span>,</span><br><span class="line">      <span class="function">(<span class="params">toParams,previousParams</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//对路由变化做出响应</span></span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>或使用<code>beforeRouteUpdate</code>导航守卫，也可以取消导航：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">User</span>=&#123;</span><br><span class="line">  <span class="attr">template</span>:<span class="string">&#x27;...&#x27;</span>,</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">beforeRouteUpdate</span>(<span class="params">to,<span class="keyword">from</span></span>)&#123;</span><br><span class="line">    <span class="comment">//对路由变化做出响应</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">userData</span>=<span class="keyword">await</span> <span class="title function_">fetchUser</span>(to,params.<span class="property">id</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="捕获所有路由或404-not-found路由">捕获所有路由或404 Not found路由</h3>
<p>常规参数只匹配url片段之间的字符，用<code>/</code>分隔。若想匹配任意路径，可使用自定义的路径参数正则表达式，在路径参数后面的括号中加入正则表达式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes=[</span><br><span class="line">  <span class="comment">//将匹配所有内容并将其放在$route.params.pathMatch下</span></span><br><span class="line">  <span class="comment">//pathMatch标记为可选可重复,可以在需要时将path拆分成数组,直接导航到路由</span></span><br><span class="line">  &#123;<span class="attr">path</span>:<span class="string">&#x27;/:pathMatch(.*)*&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;NotFound&#x27;</span>,<span class="attr">component</span>:<span class="title class_">NotFound</span>&#125;,</span><br><span class="line">  <span class="comment">//将匹配以/user-开头的所有内容并将其放在$route.params.afterUser下</span></span><br><span class="line">  &#123;<span class="attr">path</span>:<span class="string">&#x27;/user-:afterUser(.*)&#x27;</span>,<span class="attr">component</span>:<span class="title class_">UserGeneric</span>&#125;,</span><br><span class="line">]</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;NotFound&#x27;</span>,</span><br><span class="line">  <span class="comment">//保留当前路径并删除第一个字符,以避免目标URL以//开头</span></span><br><span class="line">  <span class="attr">params</span>:&#123;<span class="attr">pathMatch</span>:<span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">path</span>.<span class="title function_">substring</span>(<span class="number">1</span>).<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>)&#125;,</span><br><span class="line">  <span class="comment">//保留现有的查询和hash值</span></span><br><span class="line">  <span class="attr">query</span>:<span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">query</span>,</span><br><span class="line">  <span class="attr">hash</span>:<span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">hash</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="高级匹配模式">高级匹配模式</h3>
<p>Vue Router使用自己的路径匹配语法，它支持许多高级匹配模式，如可选的参数，零或多个/一个或多个，甚至是自定义的正则匹配规则。</p>
<h2 id="路由的匹配语法">路由的匹配语法</h2>
<h3 id="在参数中自定义正则">在参数中自定义正则</h3>
<p>当定义像<code>:userId</code>这样的参数时，在内部使用以下正则<code>([^/]+)</code>（至少有一个字符不是斜杠<code>/</code>）来从URL中提取参数。这个方法很好用，除非是需要根据参数的内容来区分两个路由，此时最简单的方法是在路径中添加一个静态部分来区分它们：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes=[</span><br><span class="line">  <span class="comment">//匹配/0/3549</span></span><br><span class="line">  &#123;<span class="attr">path</span>:<span class="string">&#x27;/o/:orderId&#x27;</span>&#125;,</span><br><span class="line">  <span class="comment">//匹配/p/books</span></span><br><span class="line">  &#123;<span class="attr">path</span>:<span class="string">&#x27;/p/:productName&#x27;</span>&#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>但在一些情况下，并不想添加静态的<code>/o</code>、<code>/p</code>部分。由于<code>orderId</code>总是一个数字，而<code>productName</code>可以是任何东西，因此可以在括号中为参数指定一个自定义的正则：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes=[</span><br><span class="line">  <span class="comment">// /:orderId只匹配数字</span></span><br><span class="line">  <span class="comment">//&#x27;\\dd&#x27;是为了确保反斜杠能被转义出来</span></span><br><span class="line">  &#123;<span class="attr">path</span>:<span class="string">&#x27;/:orderId(\\d+)&#x27;</span>&#125;,</span><br><span class="line">  <span class="comment">// /:productName匹配其他任何内容</span></span><br><span class="line">  &#123;<span class="attr">path</span>:<span class="string">&#x27;/:productName&#x27;</span>&#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h3 id="可重复的参数">可重复的参数</h3>
<p>若需要匹配具有多个部分的路由，如<code>/first/second/third</code>，则应该使用<code>*</code>（0个或多个）和<code>+</code>（1个或多个）将参数标记为可重复：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes=[</span><br><span class="line">  <span class="comment">//匹配1个以上的参数,如/one,/one/two,/one/two/three等</span></span><br><span class="line">  &#123;<span class="attr">path</span>:<span class="string">&#x27;/:chapters+&#x27;</span>&#125;,</span><br><span class="line">  <span class="comment">//匹配0个以上的参数,如/,/one,/one/two,/one/two/three等</span></span><br><span class="line">  &#123;<span class="attr">path</span>:<span class="string">&#x27;/:chapters*&#x27;</span>&#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>这将是提供一个参数数组而不是一个字符串，并且在使用命名路由时也需要传递一个数组：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//给定&#123;path:&#x27;/:chapters*&#x27;,name:&#x27;chapters&#x27;&#125;,</span></span><br><span class="line">router.<span class="title function_">resolve</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;chapters&#x27;</span>,<span class="attr">params</span>:&#123;<span class="attr">chapters</span>:[]&#125;&#125;).<span class="property">href</span><span class="comment">//产生路由/</span></span><br><span class="line">router.<span class="title function_">resolve</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;chapters&#x27;</span>,<span class="attr">params</span>:&#123;<span class="attr">chapters</span>:[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>]&#125;&#125;).<span class="property">href</span><span class="comment">//产生路由/a/b</span></span><br><span class="line"><span class="comment">//给定&#123;path:&#x27;/:chapters+&#x27;,name:&#x27;chapters&#x27;&#125;,</span></span><br><span class="line">router.<span class="title function_">resolve</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;chapters&#x27;</span>,<span class="attr">params</span>:&#123;<span class="attr">chapters</span>:[]&#125;&#125;).<span class="property">href</span><span class="comment">//chapters为空,抛出错误</span></span><br></pre></td></tr></table></figure>
<p>这些也可以通过右括号后添加它们与自定义正则结合使用：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes=[</span><br><span class="line">  <span class="comment">//只匹配1个以上的数字,如/1,/1/2,/1/2/3等</span></span><br><span class="line">  &#123;<span class="attr">path</span>:<span class="string">&#x27;/:chapters(\\d+)+&#x27;</span>&#125;,</span><br><span class="line">  <span class="comment">//匹配0个以上的数字,如/,/1,/1/2,/1/2/3等</span></span><br><span class="line">  &#123;<span class="attr">path</span>:<span class="string">&#x27;/:chapters(\\d+)*&#x27;</span>&#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h3 id="sensitive与strict路由配置">Sensitive与strict路由配置</h3>
<p>默认情况下，所有路由是不区分大小写的，且能匹配带有或不带有尾部斜线的路由。这种行为可以通过<code>sensitive</code>和<code>strict</code>选项来修改，它们既可以应用在整个全局路由上，又可以应用在当前路由上：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router=<span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>:<span class="title function_">createWebHistory</span>(),</span><br><span class="line">  <span class="attr">routes</span>:[</span><br><span class="line">    <span class="comment">//匹配/users/zhangsan</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    当strict:true时,不匹配/users/zhangsan/</span></span><br><span class="line"><span class="comment">    当sensitive:true时,不匹配/Users/zhangsan</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">&#x27;/users/:id&#x27;</span>,<span class="attr">sensitive</span>:<span class="literal">true</span>&#125;,</span><br><span class="line">    <span class="comment">//匹配/users,/Users,以及/users/42,不匹配/users/或users/42/</span></span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">&#x27;/users/:id?&#x27;</span>&#125;,</span><br><span class="line">  ]</span><br><span class="line">  <span class="attr">strict</span>:<span class="literal">true</span>,<span class="comment">//应用于所有路由</span></span><br><span class="line">  <span class="attr">sensitive</span>:<span class="literal">true</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="可选参数">可选参数</h3>
<p>也可以通过使用<code>?</code>修饰符（0个或1个）将一个参数标记为可选：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routers=[</span><br><span class="line">  <span class="comment">//匹配/users和/users/zhangsan</span></span><br><span class="line">  &#123;<span class="attr">path</span>:<span class="string">&#x27;/users/:userId?&#x27;</span>&#125;,</span><br><span class="line">  <span class="comment">//匹配/users和/users/42</span></span><br><span class="line">  &#123;<span class="attr">path</span>:<span class="string">&#x27;/users/:userID(\\d)?&#x27;</span>&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h2 id="命名路由">命名路由</h2>
<p>除了<code>path</code>外，还可以为任何路由提供<code>name</code>。命名路由有以下优点：</p>
<ul>
<li>没有硬编码的URL</li>
<li><code>params</code>的自动编码/解码</li>
<li>防止在URL中出现打字错误</li>
<li>绕过路径排序（如显示1个）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> route=[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/user/:username&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="title class_">User</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>链接一个命名路由，可以向<code>router-link</code>组件的<code>to</code>属性传递一个对象：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;name:&#x27;user&#x27;,params:&#123;username:&#x27;lisi&#x27;&#125;&#125;&quot;</span>&gt;</span>User<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 等价于 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  router.<span class="title function_">push</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;user&#x27;</span>,<span class="attr">params</span>:&#123;<span class="attr">username</span>:<span class="string">&#x27;lisi&#x27;</span>&#125;&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 两种方法路由都将导航到路径/user/lisi中 --&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="嵌套路由">嵌套路由</h3>
<p>通过Vue Router可以使用嵌套路由配置来对于应用程序的多层嵌套组件结构：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 这是一个顶层的router-view,其渲染顶层路由匹配的组件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title class_">User</span>=&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//被渲染的组件中包含自己嵌套的router-view</span></span></span><br><span class="line"><span class="language-javascript">  <span class="attr">template</span>:<span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">    &lt;div class=&quot;User&quot;&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">      &lt;h2&gt;User&#123;&#123;$route.params.id&#125;&#125;&lt;/h2&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">      &lt;router-view&gt;&lt;/router-view&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">    &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">      `</span>,</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//这些传递给createRouter</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> routes=[</span></span><br><span class="line"><span class="language-javascript">  &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//当/user/:id/profile匹配成功时,UserProfile将被渲染到User的router-view内部</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">path</span>:<span class="string">&#x27;/user/:id&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">component</span>:<span class="title class_">User</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//将组件渲染到嵌套的router-view中  </span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">children</span>:[</span></span><br><span class="line"><span class="language-javascript">      &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">path</span>:<span class="string">&#x27;profile&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">component</span>:<span class="title class_">UserProfile</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//当/user/:id/posts匹配成功时,UserPosts将被渲染到User的router-view内部</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">path</span>:<span class="string">&#x27;posts&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">component</span>:<span class="title class_">UserPosts</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">    ],</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">]</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>注意：以<code>/</code>开头的嵌套路径将被视为根路径，这便允许利用组件嵌套而不必使用嵌套URL。</strong></p>
<p>上述代码中<code>children</code>的配置只是另一个路由数组。因此可以根据需要，不断地嵌套视图。</p>
<p>由于没有匹配到嵌套路由，当访问<code>/user/eduardo</code>时，在<code>User</code>的<code>router-view</code>里什么都不会呈现。若想在那里渲染一些东西，可以提供一个空的嵌套路径：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes=[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/user/:id&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="title class_">User</span>,</span><br><span class="line">    <span class="attr">children</span>:[</span><br><span class="line">      &#123; <span class="comment">//当/user/:id匹配成功时,UserHome将被渲染到User的router-view内部</span></span><br><span class="line">        <span class="attr">path</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>:<span class="title class_">UserHome</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">//其他子路由</span></span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h3 id="嵌套命名路由">嵌套命名路由</h3>
<p>在处理命名路由时，通常会给子路由命名如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes=[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/user/:id&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="title class_">User</span>,</span><br><span class="line">    <span class="attr">children</span>:[</span><br><span class="line">      &#123; <span class="comment">//只有子路由具有名称</span></span><br><span class="line">        <span class="attr">path</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>:<span class="title class_">UserHome</span></span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>这将确保导航到<code>/user/:id</code>时始终显示嵌套路由。</p>
<p>若希望<strong>导航到命名路由而不导航到嵌套路由</strong>，还可以<strong>命名父路由</strong>，但要<strong>注意重新加载页面将始终显示嵌套的子路由</strong>，这是以为它被指向路径<code>/users/:id</code>的导航，而不是命名路由：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes=[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/user/:id&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;user-parent&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="title class_">User</span>,</span><br><span class="line">    <span class="attr">children</span>:[</span><br><span class="line">      &#123; </span><br><span class="line">        <span class="attr">path</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>:<span class="title class_">UserHome</span></span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h2 id="命名视图">命名视图</h2>
<p>命名视图可以同时展示多个视图而不是嵌套展示。一个界面中可以拥有多个单独命名的视图，而不是只有一个单独的出口。若<code>router-view</code>没有设置名字，则默认为<code>default</code>。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-view</span> <span class="attr">class</span>=<span class="string">&quot;view left-sidebar&quot;</span> <span class="attr">name</span>=<span class="string">&quot;LeftSidevar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span> <span class="attr">class</span>=<span class="string">&quot;view main-content&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span> <span class="attr">class</span>=<span class="string">&quot;view right-sidebar&quot;</span> <span class="attr">name</span>=<span class="string">&quot;RightSidebar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>一个视图使用一个组件渲染。因此在同一个路由下，多个视图就需要多个组件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router=<span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>:<span class="title function_">createWebHashHistory</span>(),</span><br><span class="line">  <span class="attr">routes</span>:[</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>:<span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">      <span class="attr">components</span>:&#123;</span><br><span class="line">        <span class="attr">default</span>:<span class="title class_">Home</span>,</span><br><span class="line">        <span class="comment">//LeftSidebar:LeftSidebar的缩写</span></span><br><span class="line">        <span class="title class_">LeftSidebar</span>,</span><br><span class="line">        <span class="comment">//与&lt;router-view&gt;上的name属性相匹配</span></span><br><span class="line">        <span class="title class_">RightSidebar</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="嵌套命名视图">嵌套命名视图</h3>
<p>当要实现切换路由的同时，其页面下的视图也要从一个<code>UserEmailsSubscriptions</code>切换成两个<code>UserProfile</code>和<code>UserProfilePreview</code>，便应使用命名视图来创建嵌套视图的布局：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/settings/emails                                       /settings/profile</span><br><span class="line">+-----------------------------------+                  +------------------------------+</span><br><span class="line">| UserSettings                      |                  | UserSettings                 |</span><br><span class="line">| +-----+-------------------------+ |                  | +-----+--------------------+ |</span><br><span class="line">| | Nav | UserEmailsSubscriptions | |  +------------&gt;  | | Nav | UserProfile        | |</span><br><span class="line">| |     +-------------------------+ |                  | |     +--------------------+ |</span><br><span class="line">| |     |                         | |                  | |     | UserProfilePreview | |</span><br><span class="line">| +-----+-------------------------+ |                  | +-----+--------------------+ |</span><br><span class="line">+-----------------------------------+                  +------------------------------+</span><br></pre></td></tr></table></figure>
<ul>
<li><code>Nav</code> 是一个常规组件</li>
<li><code>UserSettings</code> 是一个视图组件</li>
<li><code>UserEmailsSubscriptions</code>、<code>UserProfile</code>、<code>UserProfilePreview</code> 是嵌套的视图组件</li>
</ul>
<p><code>UserSetting</code>组件的<code>&lt;template&gt;</code>部分大致如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>User Settings<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">NavVar</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">&quot;helper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>通过这个路由配置来实现上述布局：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router=<span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>:[</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>:<span class="string">&#x27;/settings&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>:<span class="title class_">UserSettings</span>,</span><br><span class="line">      <span class="attr">children</span>:[&#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&#x27;emails&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>:<span class="title class_">UserEmailsSubscriptions</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>:<span class="string">&#x27;profile&#x27;</span>,</span><br><span class="line">      <span class="attr">components</span>:&#123;</span><br><span class="line">        <span class="attr">default</span>:<span class="title class_">UserProfile</span>,</span><br><span class="line">        <span class="attr">helper</span>:<span class="title class_">UserProfilePreview</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="编程式导航">编程式导航</h2>
<h3 id="使用router.push导航到不同的位置">使用<code>router.push</code>导航到不同的位置</h3>
<p>若想要导航到不同的URL，可以使用<code>router.push</code>方法向history栈添加一个新的记录，当用户点击浏览器后退按钮时，会回到之前的URL。</p>
<p>当点击<code>&lt;router-link&gt;</code>时，内部会调用<code>router.push</code>这个方法。因此点击<code>&lt;router-link :to="..."&gt;</code>便相当于调用<code>router.push(...)</code>：</p>
<table>
<thead>
<tr class="header">
<th>声明式</th>
<th>编程式</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>&lt;router-link :to="..."&gt;</code></td>
<td><code>router.push(...)</code></td>
</tr>
</tbody>
</table>
<p><strong>注意：</strong>在Vue实例中，可以通过<code>$router</code>访问路由实例，因此也可以在实例中调用<code>this.$router.push</code>。</p>
<p><code>router.push</code>方法的参数可以时一个字符串路径，或者一个描述地址的对象：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 字符串路径</span></span><br><span class="line">router.<span class="title function_">push</span>(<span class="string">&#x27;/users/zhangsan&#x27;</span>)</span><br><span class="line"><span class="comment">// 带有路径的对象</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123;<span class="attr">path</span>:<span class="string">&#x27;/users/zhangsan&#x27;</span>&#125;)</span><br><span class="line"><span class="comment">// 命名的路由，并加上参数，让路由建立url</span></span><br><span class="line"><span class="comment">// 注意params不能与path一起使用，若提供了path,params会被忽略，而query不会</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;user&#x27;</span>,<span class="attr">params</span>:&#123;<span class="attr">username</span>:<span class="string">&#x27;zhangsan&#x27;</span>&#125;&#125;)</span><br><span class="line"><span class="comment">// 带查询参数，其结果是/register?plan=private</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123;<span class="attr">path</span>:<span class="string">&#x27;/register&#x27;</span>,<span class="attr">query</span>:&#123;<span class="attr">plan</span>:<span class="string">&#x27;private&#x27;</span>&#125;&#125;)</span><br><span class="line"><span class="comment">// 带hash，其结果是/about#team</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123;<span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,<span class="attr">hash</span>:<span class="string">&#x27;#team&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> username=<span class="string">&#x27;zhangsan&#x27;</span></span><br><span class="line"><span class="comment">// 可以手动建立url，但必须自己处理编码</span></span><br><span class="line">router.<span class="title function_">push</span>(<span class="string">`/user/<span class="subst">$&#123;username&#125;</span>`</span>)<span class="comment">//其结果为/user/zhangsan</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123;<span class="attr">path</span>:<span class="string">`/user/<span class="subst">$&#123;username&#125;</span>`</span>&#125;)<span class="comment">//其结果为/user/zhangsan</span></span><br><span class="line"><span class="comment">// 使用name和params从自动url编码中获益</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;user&#x27;</span>,<span class="attr">params</span>:&#123;username&#125;&#125;)<span class="comment">//其结果为/user/zhangsan</span></span><br><span class="line"><span class="comment">//params不能与path一起使用</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123;<span class="attr">path</span>:<span class="string">&#x27;/user&#x27;</span>,<span class="attr">params</span>:&#123;username&#125;&#125;)<span class="comment">//其结果为/user</span></span><br></pre></td></tr></table></figure>
<p>当指定<code>params</code>时，可提供<code>string</code>或<code>number</code>参数（或对于可重复从参数可以提供一个数组）。任何其他类型（如<code>undefined</code>、<code>false</code>等）都将被自动字符串化。对于可选参数，可以提供一个空字符串(<code>""</code>)来跳过它。</p>
<p>由于属性<code>to</code>与<code>router.push</code>接收的对象种类相同，一次你两者的规则相同。</p>
<p><code>router.push</code>和所有其他导航方法都会返回一个Promise，等到导航完成后才知道是成功还是失败。</p>
<h3 id="使用router.replace替换当前位置">使用<code>router.replace</code>替换当前位置</h3>
<p><code>router.replace</code>与<code>router.push</code>不同的是，<code>router.replace</code>在导航时不会向history添加新记录，它直接取代了当前的条目。</p>
<table>
<thead>
<tr class="header">
<th>声明式</th>
<th>编程式</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>&lt;router-link :to="..." replace&gt;</code></td>
<td><code>router.replace(...)</code></td>
</tr>
</tbody>
</table>
<p>可以直接使用<code>router.replace</code>，也可以在传递给<code>router.push</code>的<code>routeLocation</code>中增加一个属性<code>replace:true</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router.<span class="title function_">replace</span>(&#123;<span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>&#125;)</span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123;<span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,<span class="attr">replace</span>:<span class="literal">true</span>&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="使用router.go横跨历史">使用<code>router.go</code>横跨历史</h3>
<p><code>router.go</code>采用一个整数作为参数，表示在历史堆栈中前进或后退多少步：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 向前移动1条记录，与router.forward()作用相同</span></span><br><span class="line">router.<span class="title function_">go</span>(<span class="number">1</span>)</span><br><span class="line"><span class="comment">// 向后移动1条记录，与router.back()作用相同</span></span><br><span class="line">router.<span class="title function_">go</span>(-<span class="number">1</span>)</span><br><span class="line"><span class="comment">// 前进3条记录</span></span><br><span class="line">router.<span class="title function_">go</span>(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 若没有那么多记录，静默失败，即不执行也不报错</span></span><br><span class="line">router.<span class="title function_">go</span>(-<span class="number">100</span>)</span><br><span class="line">router.<span class="title function_">gi</span>(<span class="number">100</span>)</span><br></pre></td></tr></table></figure>
<h2 id="重定向和别名">重定向和别名</h2>
<h3 id="通过redirect属性实现重定向">通过<code>redirect</code>属性实现重定向</h3>
<p>通过<code>routes</code>实现重定向：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将/home重定向到/</span></span><br><span class="line"><span class="keyword">const</span> routes=[&#123;<span class="attr">path</span>:<span class="string">&#x27;home&#x27;</span>,<span class="attr">redirect</span>:<span class="string">&#x27;/&#x27;</span>&#125;]</span><br><span class="line"><span class="comment">// 重定向的目标也可以是一个命名的路由</span></span><br><span class="line"><span class="keyword">const</span> routes=[&#123;<span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,<span class="attr">redirect</span>:&#123;<span class="attr">name</span>:<span class="string">&#x27;homepage&#x27;</span>&#125;&#125;]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重定向的目标还可以是一个方法，动态返回重定向目标</span></span><br><span class="line"><span class="keyword">const</span> routes=[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// 将/search/screens重定向到/search?q=screens</span></span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;search/:searchText&#x27;</span>,</span><br><span class="line">    <span class="attr">redirect</span>: <span class="function"><span class="params">to</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="comment">//方法接收目标路由作为参数</span></span><br><span class="line">      <span class="comment">//return 重定向的字符串路径/路径对象</span></span><br><span class="line">      <span class="keyword">return</span> &#123;<span class="attr">path</span>:<span class="string">&#x27;/search&#x27;</span>,<span class="attr">query</span>:&#123;<span class="attr">q</span>:to.<span class="property">parpams</span>.<span class="property">searchText</span>&#125;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/search&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p><strong>在写<code>redirect</code>时，可以省略component配置。</strong>由于组件从来没有被直接渲染过，因此没有组件要渲染，<strong>嵌套路由除外</strong>。若一个路由有<code>children</code>和<code>redirect</code>属性，那么它也应该有<code>component</code>属性。</p>
<p>导航守卫没有应用在跳转路由上，仅应用在其目标上。在上述代码中，在<code>/home</code>路由中添加<code>beforeEnter</code>守卫也不会有任何效果。</p>
<h3 id="相对重定向">相对重定向</h3>
<p>即重定向到相对位置：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes=[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// 将/users/123/posts重定向到/users/123/profile</span></span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;users/:id/posts&#x27;</span>,</span><br><span class="line">    <span class="attr">redirect</span>: <span class="function"><span class="params">to</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="comment">//方法接收目标路由作为参数</span></span><br><span class="line">      <span class="comment">//相对位置不以/开头</span></span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;profile&#x27;</span></span><br><span class="line">      <span class="comment">//或是return &#123;path:&#x27;profile&#x27;&#125;</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h3 id="使用alias设置别名">使用alias设置别名</h3>
<p>将<code>/</code>别名为<code>/home</code>，便意味着当用户访问<code>/home</code>时，URL仍然是<code>/home</code>，但会被匹配为用户正在访问<code>/</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes=[&#123;<span class="attr">path</span>:<span class="string">&#x27;/&#x27;</span>,<span class="attr">component</span>:<span class="title class_">Homepage</span>,<span class="attr">alias</span>:<span class="string">&#x27;/home&#x27;</span>&#125;]</span><br></pre></td></tr></table></figure>
<p>通过别名可以自由地将UI结构映射到一个任意的URL，而不受配置的嵌套结构的限制。</p>
<p>别名以<code>/</code>开头，以使嵌套路径中的路径成为绝对路径，也可以用一个数组来提供多个别名：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes=[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/users&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="title class_">UsersLayout</span>,</span><br><span class="line">    <span class="attr">children</span>:[</span><br><span class="line">      <span class="comment">//为/users、/users/list、/people这3个URL呈现UserList</span></span><br><span class="line">      &#123;<span class="attr">path</span>:<span class="string">&#x27;&#x27;</span>,<span class="attr">component</span>:<span class="title class_">UserList</span>,<span class="attr">alias</span>:[<span class="string">&#x27;/people&#x27;</span>,<span class="string">&#x27;list&#x27;</span>]&#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>若路由有参数，则要确保在任何绝对别名中包含它们：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes=[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/users:id&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="title class_">UsersByIdLayout</span>,</span><br><span class="line">    <span class="attr">children</span>:[</span><br><span class="line">      <span class="comment">//为/users/123、/users/123/profile、/123这3个URL呈现UserDetails</span></span><br><span class="line">      &#123;<span class="attr">path</span>:<span class="string">&#x27;profile&#x27;</span>,<span class="attr">component</span>:<span class="title class_">UserDetails</span>,<span class="attr">alias</span>:[<span class="string">&#x27;/:id&#x27;</span>,<span class="string">&#x27;&#x27;</span>]&#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p><strong>关于SEO的注意事项：使用别名是，一定要定义规范链接</strong></p>
<h2 id="路由组件传参">路由组件传参</h2>
<h3 id="将props传递给路由组件">将props传递给路由组件</h3>
<p>在组件中使用<code>$route</code>会与路由紧密耦合，由于它只能用于特定的URL，这将限制了组件的灵活性。通过配置<code>props</code>来解除这种行为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">User</span>=&#123;</span><br><span class="line">  <span class="attr">template</span>:<span class="string">&#x27;&lt;div&gt;User&#123;&#123;$route.params.id&#125;&#125;&lt;/div&gt;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> routes=[&#123;<span class="attr">path</span>:<span class="string">&#x27;/user/:id&#x27;</span>,<span class="attr">component</span>:<span class="title class_">User</span>&#125;]</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以通过配置props将代码替换成如下所示</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">User</span>=&#123;</span><br><span class="line">  <span class="comment">//添加一个与路由参数完全相同的prop名</span></span><br><span class="line">  <span class="attr">props</span>:[<span class="string">&#x27;id&#x27;</span>],</span><br><span class="line">  <span class="attr">template</span>:<span class="string">&#x27;&lt;div&gt;User&#123;&#123;id&#125;&#125;&lt;/div&gt;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> routes=[&#123;<span class="attr">path</span>:<span class="string">&#x27;/user/:id&#x27;</span>,<span class="attr">component</span>:<span class="title class_">User</span>,<span class="attr">props</span>:<span class="literal">true</span>&#125;]</span><br></pre></td></tr></table></figure>
<p>这允许在任何地方使用该组件，使得该组件更容易重用和测试。</p>
<h3 id="布尔模式">布尔模式</h3>
<p>当<code>props</code>设置为<code>true</code>时，<code>route.params</code>将被设置为组件的props。</p>
<h3 id="命名视图-1">命名视图</h3>
<p>对于有命名视图的路由，则必须为每个命名视图定义<code>props</code>配置：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes=[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/user/:id&#x27;</span>,</span><br><span class="line">    <span class="attr">components</span>:&#123;<span class="attr">default</span>:<span class="title class_">User</span>,<span class="attr">sidebar</span>:<span class="title class_">Sidebar</span>&#125;,</span><br><span class="line">    <span class="attr">props</span>:&#123;<span class="attr">default</span>:<span class="literal">true</span>,<span class="attr">sidebar</span>:<span class="literal">false</span>&#125;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h3 id="对象模式">对象模式</h3>
<p>当<code>props</code>是一个对象时，它将原样设置为组件props。当组件props是静态时很有用：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes=[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/promotion/from-newsletter&#x27;</span>,</span><br><span class="line">    <span class="attr">components</span>:<span class="title class_">Promotion</span>,</span><br><span class="line">    <span class="attr">props</span>:&#123;<span class="attr">newsletterPopup</span>:<span class="literal">false</span>&#125;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h3 id="函数模式">函数模式</h3>
<p>创建一个返回props的函数，可以将参数转换为其他类型，将静态值与基于路由的值相结合等：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes=[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/search&#x27;</span>,</span><br><span class="line">    <span class="attr">components</span>:<span class="title class_">SearchUser</span>,</span><br><span class="line">    <span class="attr">props</span>:<span class="function"><span class="params">route</span>=&gt;</span>(&#123;<span class="attr">query</span>:route.<span class="property">query</span>.<span class="property">q</span>&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>URL<code>/search?q=vue</code>将传递<code>&#123;query:'vue'&#125;</code>作为props传给<code>SearchUser</code>组件。</p>
<p>尽可能保持props函数为无状态的，因此它只会在路由发生变化时起作用。若需要状态来定义props，建议使用包装组件。</p>
<h2 id="不同的历史记录模式">不同的历史记录模式</h2>
<p>创建路由实例时，允许在不同的历史模式中选中<code>history</code>配置。</p>
<h3 id="hash模式">Hash模式</h3>
<p>hash模式是用<code>createWebHashHistory()</code>创建的：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>&#123;createRouter,createWebHashHistory&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router=<span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>:<span class="title function_">createWebHashHistory</span>(),</span><br><span class="line">  <span class="attr">routes</span>:[</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  ],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>它在内部传递的实际URL之前使用了一个哈希字符（<code>#</code>）。由于这部分URL从未被发送到服务器中，因此不需要再服务器上进行任何特殊处理。<strong>不过它在SEO中确实有不会的影响。若担心这个问题，可以使用HTML5模式。</strong></p>
<h3 id="html5模式">HTML5模式</h3>
<p>用<code>createWebHistory()</code>创建HTML5模式，推荐使用这个模式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>&#123;createRouter,createWebHistory&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router=<span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>:<span class="title function_">createWebHistory</span>(),</span><br><span class="line">  <span class="attr">routes</span>:[</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  ],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>当应用是单页的客户端应用时，若没有适当的服务器配置，用户在浏览器中直接访问URL会得到一个404错误。</p>
<p>要想解决这个问题，便是要在服务器上添加一个简单的回退路由。URL不匹配任何静态资源，则应提供与应用程序中<code>index.html</code>相同的页面。</p>
<h3 id="服务器配置实例">服务器配置实例</h3>
<p>假设正在从根目录提供服务。若要部署到子目录中，则应使用Vue CLI的<code>publicPath</code>配置和相关路由的<code>base</code>属性。除此之外还需要调整服务端，使其使用子目录而不是根目录。</p>
<p>如在原生Node.js中，应调整为如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http=<span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> fs=<span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> httpPort=<span class="number">80</span></span><br><span class="line"></span><br><span class="line">http</span><br><span class="line">  .<span class="title function_">createServer</span>(<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    fs.<span class="title function_">readFile</span>(<span class="string">&#x27;index.html&#x27;</span>,<span class="string">&#x27;utf-8&#x27;</span>,<span class="function">(<span class="params">err,content</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;We cannot open &quot;index.html&quot; file.&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      res.<span class="title function_">writeHead</span>(<span class="number">200</span>,&#123;</span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>:<span class="string">&#x27;text/html;charset=utf-8&#x27;</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">      res.<span class="title function_">end</span>(content)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">listen</span>(httpPort,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Server listening on:http://localhost:%s&#x27;</span>,httpPort)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>
<p>配置完成后，所有未找到的路径都会显示<code>index.html</code>文件，因此应该在Vue应用程序中实现一个万能路由来显示404页面：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router=<span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>:<span class="title function_">createWebHistory</span>(),</span><br><span class="line">  <span class="attr">routes</span>:[&#123;<span class="attr">path</span>:<span class="string">&#x27;/:pathMatch(.*)&#x27;</span>,<span class="attr">component</span>:<span class="title class_">NotFoundComponent</span>&#125;],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>若使用的是Node.js服务器，则可以通过在服务器端使用路由来匹配URL，若没有匹配到路由，则用404来回应，从而实现回退。</p>
<h1 id="内在">内在</h1>
<h2 id="深入响应式原理">深入响应式原理</h2>
<p>Vue最独特的特性之一是其非侵入性的响应式系统。数据模型仅仅是普通的JavaScript对象。当修改它们时，视图会进行更新。</p>
<h3 id="如何追踪变化">如何追踪变化</h3>
<p>当一个普通的JavaScript对象传入Vue实例作为<code>data</code>选项式，Vue将遍历此对象的所有property并使用<code>Object.defineProperty</code>把这些property全部转为<strong>getter/setter</strong>。这些getter/setter对用户来说是不可见的。但在内部它们能够让Vue追踪依赖，并在property被访问和修改是同时变更。</p>
<p>需要注意的是，不同浏览器在控制台打印数据对象时，对getter/setter的格式化也不同。</p>
<p>每个组件实例都对应一个watcher实例，它会在组件渲染时把“接触”过的数据property记录为依赖，随后依赖项的setter触发时会通知watcher，从而使它关联的组件重新渲染。</p>
<h3 id="检测变化的注意事项">检测变化的注意事项</h3>
<p>由于JavaScript的限制，Vue不能检测数组和对象的变化。但也还是有一些方法来回避这些限制并保证它们的响应性。</p>
<h4 id="对于对象">对于对象</h4>
<p>Vue无法检测property的添加或移除。由于Vue会在初始化实例时对property执行getter/setter转化，因此property必须在<code>data</code>对象上存在，才能让Vue将他转换为响应式的。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> vm=<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">data</span>:&#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//vm.a是响应式的</span></span><br><span class="line"></span><br><span class="line">vm.<span class="property">b</span>=<span class="number">2</span></span><br><span class="line"><span class="comment">//vm.b是非响应式的</span></span><br></pre></td></tr></table></figure>
<p>对于已经创建的实例，Vue不允许动态添加根级别的响应式property，但可以使用<code>Vue.set(Object,propertName,value)</code>方法向嵌套对象添加响应式property，如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">set</span>(vm.<span class="property">someObject</span>,<span class="string">&#x27;b&#x27;</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<p>除此之外还可以使用<code>vm.$set</code>实例方法，也是全局<code>Vue.set</code>方法的别名：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.$set(<span class="variable language_">this</span>.<span class="property">someObject</span>,<span class="string">&#x27;b&#x27;</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<p>有时需要为已有对象赋值多个新property，若使用<code>Object.assign()</code>或<code>_.extend()</code>，则它们添加到对象上的新property不会触发更新。此时应该用原对象与要混合进入对象的property一起创建一个新的对象：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 代替Object.assign(this.someObject,&#123;a:1,b:2&#125;)</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">someObject</span>=<span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;,<span class="variable language_">this</span>.<span class="property">someObject</span>,&#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="对于数组">对于数组</h4>
<p>Vue不能检测以下数组的变动：</p>
<ol type="1">
<li>利用索引直接设置一个数组项，如<code>vm.items[indexOfItem]=newValue</code></li>
<li>修改数组长度，如<code>vm.items.length=newLength</code></li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> vm=<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">data</span>:&#123;</span><br><span class="line">    <span class="attr">items</span>:[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 非响应式的</span></span><br><span class="line">vm.<span class="property">items</span>[<span class="number">1</span>]=<span class="string">&#x27;x&#x27;</span></span><br><span class="line">vm.<span class="property">items</span>.<span class="property">length</span>=<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应式的</span></span><br><span class="line"><span class="comment">//Vue.set方法设置数组项</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">set</span>(vm.<span class="property">items</span>,indexOfItem,newValue)</span><br><span class="line"><span class="comment">//vm.$set实例方法设置数组项，是Vue.set方法的一个别名</span></span><br><span class="line">vm.$set(vm.<span class="property">items</span>,indexOfItem,newValue)</span><br><span class="line"><span class="comment">//Array.prototype.splice方法设置数组项</span></span><br><span class="line">vm.<span class="property">items</span>.<span class="title function_">splice</span>(indexOfItem,<span class="number">1</span>,newValue)</span><br><span class="line"></span><br><span class="line"><span class="comment">//splice方法设置数组长度</span></span><br><span class="line">vm.<span class="property">items</span>.<span class="title function_">splice</span>(newLength)</span><br></pre></td></tr></table></figure>
<h3 id="声明响应式property">声明响应式property</h3>
<p>由于Vue不允许动态添加根级响应式property，因此<strong>必须要在初始化实例之前声明所有根级响应式property，包括空值</strong>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> vm=<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">data</span>:&#123;</span><br><span class="line">    <span class="comment">//声明message为一个空值字符串</span></span><br><span class="line">    <span class="attr">message</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">template</span>:<span class="string">&#x27;&lt;div&gt;&#123;&#123;message&#125;&#125;&lt;/div&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 给message赋值</span></span><br><span class="line">vm.<span class="property">message</span>=<span class="string">&#x27;Hello!&#x27;</span></span><br></pre></td></tr></table></figure>
<p>若未在<code>data</code>选项中声明<code>message</code>，Vue将警告渲染函数正在视图访问不存在的property。</p>
<h3 id="异步更新队列">异步更新队列</h3>
<p>Vue在更新DOM时是异步执行的。只要侦听到数据变化，Vue将开启一个队列，并缓冲在同一事件循环中发生的所有数据变更。若同一个watcher被多次触发，其也只会被推入到队列中一次。</p>
<p>Vue在缓冲时去除重复数据避免了不必要的计算和DOM操作。然后在下一个事件循环的“tick”中，Vue刷新队列并执行实际（已去重后的）工作。Vue在内部对异步队列尝试使用原生的<code>Promise.then</code>、<code>MutationObserver</code>和<code>setImmediate</code>。若执行环境不支持，则会采用<code>setTimeout(fn,0)</code>代替。</p>
<p>为了在数据变化之后等待Vue完成更新DOM，可以在数据变化之后立即使用<code>Vue.nextTick(callback)</code>，这样回调函数将在DOM更新完成后被调用：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;example&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123;message&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> vm=<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">el</span>:<span class="string">&#x27;#example&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">message</span>:<span class="string">&#x27;123&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript">vm.<span class="property">message</span>=<span class="string">&#x27;new message&#x27;</span><span class="comment">//更改数据</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(vm.<span class="property">$el</span>.<span class="property">textContent</span>)<span class="comment">//返回123</span></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="title function_">nextTick</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(vm.<span class="property">$el</span>.<span class="property">textContent</span>)<span class="comment">//返回new message</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br></pre></td></tr></table></figure>
<p>在组件内使用<code>vm.$nextTick()</code>实例特别方便，因此它不需要全局<code>Vue</code>，且回调函数中的<code>this</code>将自动绑定在当前的Vue实例上：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;example&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">example-oi</span>&gt;</span><span class="tag">&lt;/<span class="name">example-oi</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;example-oi&#x27;</span>,&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">data</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">message</span>:<span class="string">&#x27;未更新&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,  </span></span><br><span class="line"><span class="language-javascript">  <span class="attr">template</span>:<span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">    &lt;div&gt;  </span></span></span><br><span class="line"><span class="string"><span class="language-javascript">      &lt;button v-on:click=&quot;updateMessage&quot;&gt;点击我更新文字&lt;/button&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">      &lt;span&gt;&#123;&#123;message&#125;&#125;&lt;/span&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">    &lt;/div&gt;  </span></span></span><br><span class="line"><span class="string"><span class="language-javascript">  `</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">updateMessage</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">message</span>=<span class="string">&#x27;已更新&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$el</span>.<span class="property">textContent</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.$nextTick(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$el</span>.<span class="property">textContent</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">el</span>:<span class="string">&#x27;#example&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>因为<code>$nextTick()</code>返回一个<code>Promise</code>对象，因此可以使用新的ES2017 async/await 语法来完成相同的事情：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">  <span class="attr">updateMessage</span>:<span class="keyword">async</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">message</span>=<span class="string">&#x27;已更新&#x27;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$el</span>.<span class="property">textContent</span>)</span><br><span class="line">    <span class="keyword">await</span> <span class="variable language_">this</span>.$nextTick()</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$el</span>.<span class="property">textContent</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="vue-router路由进阶">vue-router路由进阶</h1>
<h2 id="导航守卫">导航守卫</h2>
<p>vue-router提供的导航守卫主要通过跳转或取消的方式来守卫导航。</p>
<h3 id="全局前置守卫">全局前置守卫</h3>
<p>可以使用<code>router.beforeEach</code>注册一个全局前置守卫：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router=<span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;)</span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span></span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  <span class="comment">//返回false以取消导航</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>当一个导航触发时，全局前置守卫按照创建顺序调用。守卫是异步解析执行，此时导航在所有守卫resolve完之前，一直处于等待中。</p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>前端</category>
        <category>前端框架</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/baidu_verify_code-8gDDgBH4x7.html</url>
    <content><![CDATA[layout:false
701d7ecfb72299010fa6c733b074a57e]]></content>
  </entry>
  <entry>
    <title>About</title>
    <url>/about/index.html</url>
    <content><![CDATA[<p><img src="https://rishavanand.github.io/static/images/greetings.gif"></p>
<h1 id="嗨欢迎访问唐抉的个人博客">👋 嗨！欢迎访问唐抉的个人博客</h1>
<p>这里主要用作在学习技术过程中的记录、随缘分享一些好物以及会写一些琐碎的想法🐱</p>
<ul>
<li>今年的一个小target🚩：年底完成40篇笔记的书写☑️</li>
</ul>
<h1 id="我是谁">🐱 我是谁</h1>
<ul>
<li>「整顿职场的00后」，大学位于广西中一所依山傍水适合没事就修修仙的高校，专业是「信息与计算科学」🐈</li>
<li>「懒癌晚期」，学了很多东西但就是懒得记录下来😑</li>
<li>「整活能手」，喜欢研究脚本、酷爱各种整活😃</li>
</ul>
<h1 id="技能树">🛠️ 技能树</h1>
<table>
<tr>
<td valign="top" align="center" width="20%">
<h2 id="深度学习">深度学习</h2>
<div data-align="center">
<p><img src="https://img.shields.io/badge/TensorFlow-FF6F00?style=for-the-badge&amp;logo=tensorflow&amp;logoColor=white"><img src="https://img.shields.io/badge/Kaggle-20BEFF?style=for-the-badge&amp;logo=Kaggle&amp;logoColor=white" alt="Kaggle"></p>
</div>
</td>
<td valign="top" width="27%">
<h2 id="前端">前端</h2>
<div data-align="center">
<p><img src="https://img.shields.io/badge/HTML5-E34F26?style=for-the-badge&amp;logo=html5&amp;logoColor=white" alt="HTML5"><img src="https://img.shields.io/badge/CSS3-1572B6?style=for-the-badge&amp;logo=css3&amp;logoColor=white" alt="CSS3"> <img src="https://img.shields.io/badge/JavaScript-323330?style=for-the-badge&amp;logo=javascript&amp;logoColor=F7DF1E&amp;color=olive" alt="JavaScript"><img src="https://img.shields.io/badge/Markdown-000000?style=for-the-badge&amp;logo=markdown&amp;logoColor=white" alt="Markdown"></p>
<p><img src="https://img.shields.io/badge/Node.js-43853D?style=for-the-badge&amp;logo=node.js&amp;logoColor=white" alt="Nodejs"><img src="https://img.shields.io/badge/Vue.js-35495E?style=for-the-badge&amp;logo=vue.js&amp;logoColor=4FC08D" alt="Vue.js"></p>
<p><img src="https://img.shields.io/badge/Bootstrap-563D7C?style=for-the-badge&amp;logo=bootstrap&amp;logoColor=white" alt="bootstrap"><img src="https://img.shields.io/badge/-Nginx-bfcfcf.svg?logo=nginx&amp;style=for-the-badge&amp;color=forestgreen" alt="nginx"></p>
</div>
</td>
<td valign="top" width="33%">
<h2 id="后端">后端</h2>
<div data-align="center">
<p><img src="https://img.shields.io/badge/C-00599C?style=for-the-badge&amp;logo=c&amp;logoColor=white" alt="C"><img src="https://img.shields.io/badge/C%2B%2B-00599C?style=for-the-badge&amp;logo=c%2B%2B&amp;logoColor=white" alt="C++"> <img src="https://img.shields.io/badge/Java-ED8B00?style=for-the-badge&amp;logo=java&amp;logoColor=white" alt="Java"><img src="https://img.shields.io/badge/Python-3776AB?style=for-the-badge&amp;logo=python&amp;logoColor=white" alt="Python"> <img src="https://img.shields.io/badge/PostgreSQL-316192?style=for-the-badge&amp;logo=postgresql&amp;logoColor=white" alt="postgresql"><img src="https://img.shields.io/badge/MySQL-005C84?style=for-the-badge&amp;logo=mysql&amp;logoColor=white" alt="MySQL"> <img src="https://img.shields.io/badge/Flask-000000?style=for-the-badge&amp;logo=flask&amp;logoColor=white" alt="Flask"><img src="https://img.shields.io/badge/-Docker-FCC624?style=for-the-badge&amp;logo=docker&amp;color=gainsboro" alt="Docker"> <img src="https://img.shields.io/badge/redis-%23DD0031.svg?&amp;style=for-the-badge&amp;logo=redis&amp;logoColor=white" alt="Redis"><img src="https://img.shields.io/badge/SQLite-07405E?style=for-the-badge&amp;logo=sqlite&amp;logoColor=white" alt="SQLite"></p>
</div>
</td>
<td valign="top" width="20%">
<h2 id="常用工具">常用工具</h2>
<div data-align="center">
<p><img src="https://img.shields.io/badge/Linux-FCC624?style=for-the-badge&amp;logo=linux&amp;logoColor=black" alt="Linux"><img src="https://img.shields.io/badge/Visual_Studio_Code-0078D4?style=for-the-badge&amp;logo=visual%20studio%20code&amp;logoColor=white" alt="Visual Studio Code"> <img src="https://img.shields.io/badge/GIT-E44C30?style=for-the-badge&amp;logo=git&amp;logoColor=white" alt="Git"><img src="https://img.shields.io/badge/GitHub-100000?style=for-the-badge&amp;logo=github&amp;logoColor=white" alt="GitHub"></p>
<p><img src="https://img.shields.io/badge/-Apache-D22128.svg?logo=apache&amp;style=for-the-badge" alt="apache"><img src="https://img.shields.io/badge/GitLab-330F63?style=for-the-badge&amp;logo=gitlab&amp;logoColor=white"></p>
<p><img src="https://img.shields.io/badge/Eclipse-2C2255?style=for-the-badge&amp;logo=eclipse&amp;logoColor=white" alt="Eclipse"><img src="https://img.shields.io/badge/PyCharm-000000.svg?&amp;style=for-the-badge&amp;logo=PyCharm&amp;logoColor=white" alt="PyCharm"></p>
</div>
</td>
</tr>
</table>
<h1 id="关于博客">🤔 关于博客</h1>
<p>由 <a href="https://hexo.io/">Hexo</a> 驱动，使用的主题是 <a href="https://github.com/fi3ework/hexo-theme-archer">Archer</a> ，通过livere来添加评论区模块。</p>
]]></content>
  </entry>
  <entry>
    <title>search</title>
    <url>/search/index.html</url>
    <content><![CDATA[
]]></content>
  </entry>
</search>

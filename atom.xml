<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>唐抉的个人博客</title>
  
  
  <link href="http://tangmenjue.top/atom.xml" rel="self"/>
  
  <link href="http://tangmenjue.top/"/>
  <updated>2025-04-12T06:21:44.000Z</updated>
  <id>http://tangmenjue.top/</id>
  
  <author>
    <name>唐抉</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hexo博客迁移</title>
    <link href="http://tangmenjue.top/2025/04/12/Hexo%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/"/>
    <id>http://tangmenjue.top/2025/04/12/Hexo%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/</id>
    <published>2025-04-12T06:21:44.000Z</published>
    <updated>2025-04-12T06:21:44.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="迁移博客文件到新电脑"><a href="#迁移博客文件到新电脑" class="headerlink" title="迁移博客文件到新电脑"></a>迁移博客文件到新电脑</h1><p>将旧电脑里blog文件夹下所有文件拷贝到新电脑中，这个过程持续时间比较长，所以先做。</p><p>如果想要加快拷贝速度的话，可以把node_modules文件夹删除，在新电脑里通过<code>npm install</code>的命令重新下载回来</p><h1 id="配置新电脑基础环境"><a href="#配置新电脑基础环境" class="headerlink" title="配置新电脑基础环境"></a>配置新电脑基础环境</h1><h2 id="Git安装-amp-配置"><a href="#Git安装-amp-配置" class="headerlink" title="Git安装&amp;配置"></a>Git安装&amp;配置</h2><p>由于我使用的是window系统，去官网下载Git客户端安装<a href="https://git-scm.com/downloads/win">Git - Downloading Package</a></p><ul><li>安装完成后，在桌面右键单击，看到菜单有git相关的选项即为安装成功。</li></ul><p><img src="/2025/04/12/Hexo%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/4.png" alt></p><ul><li><p>点击选择 <code>Open Git Bash here</code>打开git终端，输入以下命令将git配置的用户名邮箱设置成github上的用户名与邮箱</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#配置GitHub的用户名与邮箱git config --global user.name 用户名git config --global user.email 邮箱#查看config确认是否配置成功git config --list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="SSH生成-amp-amp-配置"><a href="#SSH生成-amp-amp-配置" class="headerlink" title="SSH生成&amp;&amp;配置"></a>SSH生成&amp;&amp;配置</h2><ul><li>如果本机没有这个邮箱相关的ssh密钥，输入以下命令生成密钥：</li></ul>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#输入命令后一直按回车键，直到生成密钥ssh-keygen -t rsa -C 邮箱#显示密钥信息，复制，下一步要用cat ~&#x2F;.ssh&#x2F;id_rsa.pub<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>进入Github的个人设置页面，找到<code>SSH and GPG Keys</code> 选项：</p><p><img src="/2025/04/12/Hexo%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/1.png" alt></p><p><img src="/2025/04/12/Hexo%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/2.png" alt></p></li><li><p>新建SSH key，把刚刚复制的ssh key粘贴在Key处，设定key的名字后，点击<code>Add SSH key</code> 。</p><p><img src="/2025/04/12/Hexo%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/3.png" alt></p></li></ul><h2 id="安装node"><a href="#安装node" class="headerlink" title="安装node"></a>安装node</h2><ul><li><p>去官网上下载node<a href="https://link.zhihu.com/?target=https%3A//nodejs.org/en">nodejs.org/en</a></p></li><li><p>安装完成后，打开cmd，输入<code>npm -v</code>，看到显示版本号，即表示安装成功</p></li><li><p>输入以下命令给npm更换镜像源：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#换成淘宝源npm config set registry https:&#x2F;&#x2F;registry.npmmirror.com#检查镜像源是否更换成功npm config get registry<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>待博客文件都迁移完成后，进入到博客文件夹里，鼠标右键后点击选择 <code>Open Git Bash here</code>打开git终端，输入以下命令安装Hexo：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm install hexo-cli -gnpm install hexo-deployer-git --save# 如果文件迁移时删除了node_modules文件，这里需要再多执行一个命令： npm install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>至此，博客已完成了迁移，可以在新电脑上使用hexo相关命令正常上传博文了</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#清理缓存hexo clean#生成文件hexo g#预览博客hexo s#推送博客hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">记录一下换电脑后，将旧电脑里的本地hexo博客迁移过程</summary>
    
    
    
    <category term="Hexo" scheme="http://tangmenjue.top/categories/Hexo/"/>
    
    
    <category term="Hexo" scheme="http://tangmenjue.top/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Prompt设计技巧</title>
    <link href="http://tangmenjue.top/2025/04/06/Prompt%E8%AE%BE%E8%AE%A1%E6%8A%80%E5%B7%A7/"/>
    <id>http://tangmenjue.top/2025/04/06/Prompt%E8%AE%BE%E8%AE%A1%E6%8A%80%E5%B7%A7/</id>
    <published>2025-04-06T14:47:06.000Z</published>
    <updated>2025-04-06T14:47:06.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>通常我们在使用大语言模型（LLM）时，都是通过输入指令的形式，让LLM完成指定的任务。</p><p>在用户指令输入后，LLM首先会将文本指令做分词处理（以BPE分词为例）：</p><ul><li><strong>LLM训练阶段</strong>：会将数据集中的文本拆分成一个个小的子词单元（即Token），然后通过统计每个词出现频率来构建词汇表。然后合并频率最高的词汇形成新的词汇，反复迭代后就形成词汇表。</li><li><strong>用户输入阶段</strong>：LLM用训练阶段生成的词汇表对输入的指令进行分词，将文本转换为模型可识别的子词单元（即Token），然后把这些Token作为模型的输入</li><li><strong>模型输出阶段</strong>：模型将每个Token转化为一个固定长度的向量，然后通过Transformer架构做上下文处理后，生成输出对应的文案。</li></ul><p>因此<strong>数据集和分词的质量</strong>直接影响到模型对输入文本的理解和处理效果。如果数据集中没有对应的知识，或者说数据集的知识是错的，LLM生成的结果就容易不符合预期。</p><p><strong>示例：</strong></p><p>这是一个简单的Prompt:</p><pre class="line-numbers language-none"><code class="language-none">让AI补充以下词汇，原（）（）动：<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>AI一般的回答都是：<strong>原（封）（不）动</strong>、<strong>原（始）（冲）动</strong></p><p>如果给他一个背景呢？</p><pre class="line-numbers language-none"><code class="language-none">你是一名原神玩家，请补充以下词汇，原（）（）动：<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这时AI的回答就是：<strong>原（神）（启）动</strong></p><h1 id="什么是Prompt？"><a href="#什么是Prompt？" class="headerlink" title="什么是Prompt？"></a>什么是Prompt？</h1><p>提示词（Prompt）一种是给大模型（LLM）的文本指令，引导大模型解决指定的问题或完成指定的任务。也就是说，大语言模型通过<strong><code>提示词+用户输入</code></strong>的方式来理解用户需求并生成准确答案。因此 prompt 的好坏，直接决定了大模型生成结果是否符合预期。</p><p>举个例子，这是一个简单的Prompt:</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">请介绍大语言模型，字数控制在100个字符以内<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>AI就会基于这个提示词，通过特定的算法模型生成下面的内容：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">大语言模型是基于海量文本训练的人工智能系统，能理解并生成自然语言文本，广泛应用于写作、翻译、问答等领域，为人们提供高效便捷的语言处理服务，推动人工智能发展。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="Prompt设计的陷阱及优化"><a href="#Prompt设计的陷阱及优化" class="headerlink" title="Prompt设计的陷阱及优化"></a>Prompt设计的陷阱及优化</h1><p>针对不同业务场景设计不同Prompt时，经常踩到各种各样的坑里，下面是对一些遇到的坑进行归纳总结：</p><h2 id="AI产生幻觉"><a href="#AI产生幻觉" class="headerlink" title="AI产生幻觉"></a>AI产生幻觉</h2><p>AI生成与事实不符的信息或凭空捏造不存在内容等胡编乱造的行为，称之为“AI幻觉”。</p><p>示例Prompt：</p><pre class="line-numbers language-none"><code class="language-none">请告诉我中国第一位女性宇航员的名字。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>AI乱答：</p><pre class="line-numbers language-none"><code class="language-none">中国第一位女性宇航员是李娜，她在 2008 年乘坐神舟七号进入太空。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="优化：要求AI说明信息来源"><a href="#优化：要求AI说明信息来源" class="headerlink" title="优化：要求AI说明信息来源"></a>优化：要求AI说明信息来源</h3><p>当 AI 被要求提供信息来源时，它会更加谨慎地筛选数据，因为需要对信息的出处负责。</p><p>优化后的Prompt：</p><pre class="line-numbers language-none"><code class="language-none">请告诉我中国第一位女性宇航员的名字，并说明数据来源。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>AI回答：</p><pre class="line-numbers language-none"><code class="language-none">中国第一位女性宇航员是刘洋，她于2012年6月16日成功进入太空。这一信息来源于百度百科，该页面详细介绍了刘洋的生平、教育背景、工作经历以及她成为宇航员的过程<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="优化：使用限定词，引导AI仅在已知信息范围内作答"><a href="#优化：使用限定词，引导AI仅在已知信息范围内作答" class="headerlink" title="优化：使用限定词，引导AI仅在已知信息范围内作答"></a>优化：使用限定词，引导AI仅在已知信息范围内作答</h3><p>在Prompt加上这一句：</p><pre class="line-numbers language-none"><code class="language-none">如果你不确定答案，请回答 “我不知道”，而不要编造信息。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这一策略能有效避免 AI 在知识盲区随意编造答案。让 AI 没有确切把握回答时回复 “我不知道”，而不是给出错误引导，保障用户获取信息的准确性。</p><h3 id="优化：让AI以多种方式验证答案"><a href="#优化：让AI以多种方式验证答案" class="headerlink" title="优化：让AI以多种方式验证答案"></a>优化：让AI以多种方式验证答案</h3><p>在Prompt加上这一句：</p><pre class="line-numbers language-none"><code class="language-none">请提供你刚才回答的三个独立信息来源，并进行交叉验证。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>AI 可能会通过多个数据库、书籍以及他人观点等多个渠道验证信息来源，进而确保信息的准确性。</p><h3 id="优化：使用反向Prompt让AI质疑自己的回答"><a href="#优化：使用反向Prompt让AI质疑自己的回答" class="headerlink" title="优化：使用反向Prompt让AI质疑自己的回答"></a>优化：使用反向Prompt让AI质疑自己的回答</h3><p>在Prompt加上这一句：</p><pre class="line-numbers language-none"><code class="language-none">你刚才的回答可能有错误。请重新检查，并说明你为何认为这个答案是正确的。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>促使 AI 重新审视答案，避免因初始判断失误而给出错误信息。</p><h2 id="信息可信度低"><a href="#信息可信度低" class="headerlink" title="信息可信度低"></a>信息可信度低</h2><h3 id="优化：按特定格式输出答案"><a href="#优化：按特定格式输出答案" class="headerlink" title="优化：按特定格式输出答案"></a>优化：按特定格式输出答案</h3><p>为方便用户快速评估信息质量与可靠性，可以让AI采用结构化格式输出答案</p><p>例如：</p><pre class="line-numbers language-none"><code class="language-none">请按照以下格式回答：问题：答案：数据来源：可信度（1-10）：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当用户问题为“中国第一位女性宇航员是谁”时，AI输出如下：</p><pre class="line-numbers language-none"><code class="language-none">问题：中国第一位女性宇航员是谁？答案：刘洋，她于 2012 年随神舟九号进入太空。数据来源：新华社、百度百科可信度：9&#x2F;10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="优化：限制回答范围"><a href="#优化：限制回答范围" class="headerlink" title="优化：限制回答范围"></a>优化：限制回答范围</h3><p>如果问题涉及复杂领域，可以让AI只回答它有信心的内容。</p><p>例如，在Prompt加上这一句：</p><pre class="line-numbers language-none"><code class="language-none">你只能基于 2023 年的数据回答问题，不要使用推测信息。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这种方式可以减少 AI 乱编数据的情况，确保信息的可信度。</p><h2 id="AI自带偏见"><a href="#AI自带偏见" class="headerlink" title="AI自带偏见"></a>AI自带偏见</h2><p>AI可能会因为训练数据的刻板印象而带有偏见，例如：</p><ul><li>性别偏见：“医生通常是男性，护士通常是女性。”</li><li>文化偏见：“成功的企业家通常来自发达国家。”</li><li>政治偏见</li><li>其他偏见：如数据计算、常识判断等，例如9.11比9.9大、3个月按半年算等经典问题</li></ul><h3 id="优化：要求使用中立语言"><a href="#优化：要求使用中立语言" class="headerlink" title="优化：要求使用中立语言"></a>优化：要求使用中立语言</h3><p>在Prompt加上这一句：</p><pre class="line-numbers language-none"><code class="language-none">请提供多个不同角度的观点，并保持中立态度。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>让AI使用中立语言客观分析，避免因倾向性语言导致片面结论。</p><h3 id="优化：避免出现暗示性字眼"><a href="#优化：避免出现暗示性字眼" class="headerlink" title="优化：避免出现暗示性字眼"></a>优化：避免出现暗示性字眼</h3><p>检查设计的Prompt中是否带有“…比…更好”、“…优于…”的字眼</p><h3 id="优化：让AI自己检查偏见"><a href="#优化：让AI自己检查偏见" class="headerlink" title="优化：让AI自己检查偏见"></a>优化：让AI自己检查偏见</h3><p>在Prompt加上这一句：</p><pre class="line-numbers language-none"><code class="language-none">你的回答是否可能包含性别、种族或文化偏见？请重新检查并调整。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>让AI 通过自我检查修正潜在偏见，确保不出现误解或偏见性描述</p><h3 id="优化：适当补充示例"><a href="#优化：适当补充示例" class="headerlink" title="优化：适当补充示例"></a>优化：适当补充示例</h3><p>在Prompt中补充对结果影响比较大的其他偏见示例，例如加上以下示例语句：</p><pre class="line-numbers language-none"><code class="language-none">示例1、某AI统计工龄时，认为3个月&#x3D;半年：用户工作了5年2个月，其中的2个月没有超过6个月，不能按半年计算，所以其工龄应该是5年示例2、AI认为9.11比9.9大：比较小数大小时，先比较小数的整数部分，将小数点后的位数转换为相同的位数后，再去比较小数点后的位数。如9.11和9.9的整数部分都是9，将两个数转换为相同位数后，9.9可以写成9.90，此时和9.11比较，显然是9.90比9.11大。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="回答前后矛盾"><a href="#回答前后矛盾" class="headerlink" title="回答前后矛盾"></a>回答前后矛盾</h2><p>在多轮对话中，如果AI没有启用记忆功能，用户先问“畅享卡有哪些套餐”，再接着问“你确定吗？”。就可能会因为没有保持上下文一致性或者是在不同轮次调用了不同的数据集从而得到不同的回复。</p><h3 id="优化：强制AI记住上下文"><a href="#优化：强制AI记住上下文" class="headerlink" title="优化：强制AI记住上下文"></a>优化：强制AI记住上下文</h3><p>强制AI记住上下文，在Prompt加上这一句：</p><pre class="line-numbers language-none"><code class="language-none">请确保后续回答与之前保持一致。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="优化：让-AI-复述自己的回答"><a href="#优化：让-AI-复述自己的回答" class="headerlink" title="优化：让 AI 复述自己的回答"></a>优化：让 AI 复述自己的回答</h3><p>在Prompt加上这一句：</p><pre class="line-numbers language-none"><code class="language-none">你能用不同的表述方式重复你的答案吗？<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="优化：固定输出格式"><a href="#优化：固定输出格式" class="headerlink" title="优化：固定输出格式"></a>优化：固定输出格式</h3><p>在Prompt加上这一句：</p><pre class="line-numbers language-none"><code class="language-none">你需要始终按照“事实+证据”的格式回答问题。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="无法控制AI生成的内容长度"><a href="#无法控制AI生成的内容长度" class="headerlink" title="无法控制AI生成的内容长度"></a>无法控制AI生成的内容长度</h2><h3 id="优化：回答过于简略，需要限制最少字数"><a href="#优化：回答过于简略，需要限制最少字数" class="headerlink" title="优化：回答过于简略，需要限制最少字数"></a>优化：回答过于简略，需要限制最少字数</h3><p>Prompt里限制最少字数及其要点</p><pre class="line-numbers language-none"><code class="language-none">你的回答必须至少包含 50 个字，并提供具体理由。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="优化：避免回答过于冗长，需要限制最多字数"><a href="#优化：避免回答过于冗长，需要限制最多字数" class="headerlink" title="优化：避免回答过于冗长，需要限制最多字数"></a>优化：避免回答过于冗长，需要限制最多字数</h3><p>Prompt里限制最多字数及其要点</p><pre class="line-numbers language-none"><code class="language-none">你的回答不能超过3句话，并且要直截了当<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="Prompt结构化模板"><a href="#Prompt结构化模板" class="headerlink" title="Prompt结构化模板"></a>Prompt结构化模板</h1><p>尽管 AI 具备强大的语言理解能力，但其输出质量仍然受到 Prompt 设计的影响。如果 Prompt 过于模糊或不够具体，AI 可能会给出偏差较大的答案。因此，优化 Prompt 是提升 AI 交互体验的关键。</p><h2 id="常用的-Prompt-文字模板"><a href="#常用的-Prompt-文字模板" class="headerlink" title="常用的 Prompt 文字模板"></a>常用的 Prompt 文字模板</h2><h3 id="关键点"><a href="#关键点" class="headerlink" title="关键点"></a>关键点</h3><p>常用的Prompt模板通常包含以下几个关键点：</p><ul><li>背景信息：提供相关背景信息，让AI可以更准确地理解问题含义</li><li>任务说明：明确清晰地告诉AI需要完成什么任务</li><li>约束条件：限制AI的输出，包括且不限于格式、字数、风格等</li><li>示例参考：通过具体示例引导AI产生符合预期的输出，例子数量不能太多，控制在1-2个即可</li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>举个例子，这是一个普通的Prompt：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">你是一位健身教练，介绍一款热门的健身APP。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>根据上面的Prompt，AI生成以下结果：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">这款健身APP非常受欢迎，它提供了多种健身课程，包括瑜伽、力量训练和有氧运动。用户可以根据自己的目标选择合适的课程，比如减脂、增肌或提高柔韧性。APP还支持自定义训练计划，用户可以设置自己的健身目标和时间，APP会生成个性化的训练方案。此外，它还有社区功能，用户可以分享自己的健身成果，互相激励。总的来说，这款APP功能强大，界面友好，适合各种水平的健身爱好者。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但如果我用了Prompt模板后再去实现同一功能呢？下面是套用模板后的Prompt：</p><pre class="line-numbers language-none"><code class="language-none">背景信息&amp;&amp;约束条件：你是一位健身教练，需要为你的客户介绍一款热门的健身APP。请根据提供的APP名称和功能描述，撰写一段详细的介绍文本。确保介绍内容包括APP的主要功能、特色、适用人群以及使用建议。这款健身APP必须是一个真实存在的应用，应用的介绍内容需是真实有效的，不得自行编造。任务说明：1. 首先，简要介绍APP的名称和主要功能。2. 接着，详细描述APP的特色功能，如个性化训练计划、饮食建议、社区互动等。3. 然后，说明这款APP适合哪些人群使用，例如初学者、进阶者或特定健身目标的人群。4. 最后，给出使用这款APP的一些建议，比如如何开始使用、如何设置目标等。5. 确保输出内容流畅、专业，能够吸引并帮助目标用户。示例参考1：APP名称: Keep功能描述: Keep是一款提供个性化训练计划、饮食建议和社区互动的健身APP。Keep是一款非常受欢迎的健身APP，它提供了个性化的训练计划，帮助用户根据自己的健身目标制定合适的锻炼方案。此外，Keep还提供了丰富的饮食建议，帮助用户更好地控制饮食，达到理想的健身效果。对于喜欢社交互动的用户，Keep还设有社区功能，用户可以在这里分享自己的健身成果，互相鼓励，共同进步。这款APP适合所有健身水平的人群使用，无论是初学者还是进阶者，都能在这里找到适合自己的训练计划。建议用户在开始使用Keep之前，先设定一个明确的健身目标，这样可以更有针对性地选择训练计划和饮食建议。示例参考2：APP名称: Nike Training Club功能描述: Nike Training Club是一款提供专业训练视频、个性化训练计划和社区互动的健身APP。Nike Training Club是一款由耐克公司推出的健身APP，它提供了大量的专业训练视频，涵盖了从基础到高级的各种训练课程。用户可以根据自己的健身水平和目标选择合适的训练视频进行学习和练习。此外，Nike Training Club还提供了个性化的训练计划，帮助用户制定科学的锻炼方案。对于喜欢社交互动的用户，这款APP还设有社区功能，用户可以在这里分享自己的训练成果，与其他用户交流心得。Nike Training Club适合所有健身水平的人群使用，无论是初学者还是进阶者，都能在这里找到适合自己的训练课程。建议用户在开始使用Nike Training Club之前，先设定一个明确的健身目标，这样可以更有针对性地选择训练计划和饮食建议。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据这个的Prompt，AI生成以下结果：<img src="/2025/04/06/Prompt%E8%AE%BE%E8%AE%A1%E6%8A%80%E5%B7%A7/3.png" alt></p><h2 id="常用的-Prompt-XML模板-在dify中使用最佳"><a href="#常用的-Prompt-XML模板-在dify中使用最佳" class="headerlink" title="常用的 Prompt XML模板(在dify中使用最佳)"></a>常用的 Prompt XML模板(在dify中使用最佳)</h2><p>在编写Prompt时，使用 XML 标签可以保证Prompt的清晰度、准确性、灵活性及可解析性。其不仅能帮助更好地组织和结构化信息，还能提高 AI 模型的理解能力和响应质量。</p><h3 id="常用XML标签"><a href="#常用XML标签" class="headerlink" title="常用XML标签"></a>常用XML标签</h3><h4 id="lt-instruction-gt"><a href="#lt-instruction-gt" class="headerlink" title="&lt;instruction&gt;"></a><strong><code>&lt;instruction&gt;</code></strong></h4><ul><li><p><strong>用途：</strong>提供给AI的具体指令，明确模型需要执行的任务。</p></li><li><p><strong>示例：</strong></p></li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>instructions</span><span class="token punctuation">></span></span>  请将以下文本翻译成西班牙语。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>instructions</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="lt-context-gt"><a href="#lt-context-gt" class="headerlink" title="&lt;context&gt;"></a><strong><code>&lt;context&gt;</code></strong></h4><ul><li><strong>用途</strong>：提供任务的背景信息或上下文，帮助 AI 更好地理解指令。</li><li><strong>示例</strong>：</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context</span><span class="token punctuation">></span></span>  这段文本摘自一本关于机器学习的书籍，用于展示基础概念。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="lt-examples-gt"><a href="#lt-examples-gt" class="headerlink" title="&lt;examples&gt;"></a><strong><code>&lt;examples&gt;</code></strong></h4><ul><li><strong>用途</strong>：提供示例来指导 AI 的响应风格和格式。多个示例可以帮助模型更好地理解指令意图。</li><li><strong>示例</strong>：</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>examples</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>example</span><span class="token punctuation">></span></span>    英文: Hello    西班牙语: Hola  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>example</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>example</span><span class="token punctuation">></span></span>    英文: Thank you    西班牙语: Gracias  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>example</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>examples</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="lt-user-input-gt"><a href="#lt-user-input-gt" class="headerlink" title="&lt;user_input&gt;"></a><strong><code>&lt;user_input&gt;</code></strong></h4><ul><li><strong>用途</strong>：包含用户输入的内容，通常用作提示的动态部分。</li><li><strong>示例</strong>：</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user_input</span><span class="token punctuation">></span></span>  请输入您想翻译的内容。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user_input</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="lt-output-gt"><a href="#lt-output-gt" class="headerlink" title="&lt;output&gt;"></a><strong><code>&lt;output&gt;</code></strong></h4><ul><li><strong>用途</strong>：指定 AI 应该生成的输出格式或样式，确保输出内容与预期一致。</li><li><strong>示例</strong>：</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>output</span><span class="token punctuation">></span></span>  生成的翻译应为西班牙语，并保持语法正确性。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>output</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="标签顺序"><a href="#标签顺序" class="headerlink" title="标签顺序"></a>标签顺序</h3><p>标签的位置和先后顺序能够显著提升AI模型对提示的解析效果，进而提高其响应质量。</p><p>推荐的标签顺序如下：</p><ol><li><code>&lt;instructions&gt;</code>: 描述AI应遵循的具体指令。</li><li><code>&lt;context&gt;</code>: 提供任务背景信息，便于AI理解上下文。</li><li><code>&lt;examples&gt;</code>: 通过示例引导AI如何准确生成响应。</li><li><code>&lt;user_input&gt;</code>: 包含用户的输入内容。</li><li><code>&lt;output&gt;</code>: 定义AI应该输出的格式或样式。</li></ol><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li><strong>标签名称的一致性</strong>：XML 标签区分大小写，因此请确保标签字母大小写的一致性，如 <code>&lt;Tag&gt;</code> 与 <code>&lt;tag&gt;</code> 是不同的元素。</li><li><strong>格式正确性</strong>：确保 XML 文档格式正确，所有标签都必须闭合，且标签间的嵌套关系需符合 XML 规范。</li><li><strong>安全性考虑</strong>：当提示中包含用户输入时，建议对用户输入进行转义处理，以防止潜在的安全问题，例如代码注入或无效的标签解析。</li></ul><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><p>将常用的Prompt文字模板例子中的Prompt使用xml模板将改写成以下格式：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">``xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>instruction</span><span class="token punctuation">></span></span>你是一位健身教练，需要为你的客户介绍一款热门的健身APP。请根据提供的APP名称和功能描述，撰写一段详细的介绍文本。确保介绍内容包括APP的主要功能、特色、适用人群以及使用建议。这款健身APP必须是一个真实存在的应用，应用的介绍内容需是真实有效的，不得自行编造。1. 首先，简要介绍APP的名称和主要功能。2. 接着，详细描述APP的特色功能，如个性化训练计划、饮食建议、社区互动等。3. 然后，说明这款APP适合哪些人群使用，例如初学者、进阶者或特定健身目标的人群。4. 最后，给出使用这款APP的一些建议，比如如何开始使用、如何设置目标等。5. 确保输出内容流畅、专业，能够吸引并帮助目标用户。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>instruction</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>examples</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>example</span><span class="token punctuation">></span></span>APP名称: Keep功能描述: Keep是一款提供个性化训练计划、饮食建议和社区互动的健身APP。输出:Keep是一款非常受欢迎的健身APP，它提供了个性化的训练计划，帮助用户根据自己的健身目标制定合适的锻炼方案。此外，Keep还提供了丰富的饮食建议，帮助用户更好地控制饮食，达到理想的健身效果。对于喜欢社交互动的用户，Keep还设有社区功能，用户可以在这里分享自己的健身成果，互相鼓励，共同进步。这款APP适合所有健身水平的人群使用，无论是初学者还是进阶者，都能在这里找到适合自己的训练计划。建议用户在开始使用Keep之前，先设定一个明确的健身目标，这样可以更有针对性地选择训练计划和饮食建议。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>example</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>example</span><span class="token punctuation">></span></span>APP名称: Nike Training Club功能描述: Nike Training Club是一款提供专业训练视频、个性化训练计划和社区互动的健身APP。输出:Nike Training Club是一款由耐克公司推出的健身APP，它提供了大量的专业训练视频，涵盖了从基础到高级的各种训练课程。用户可以根据自己的健身水平和目标选择合适的训练视频进行学习和练习。此外，Nike Training Club还提供了个性化的训练计划，帮助用户制定科学的锻炼方案。对于喜欢社交互动的用户，这款APP还设有社区功能，用户可以在这里分享自己的训练成果，与其他用户交流心得。Nike Training Club适合所有健身水平的人群使用，无论是初学者还是进阶者，都能在这里找到适合自己的训练课程。建议用户在开始使用Nike Training Club之前，先设定一个明确的健身目标，这样可以更有针对性地选择训练计划和饮食建议。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>example</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>examples</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据这个的Prompt，AI生成以下结果：</p><p><img src="/2025/04/06/Prompt%E8%AE%BE%E8%AE%A1%E6%8A%80%E5%B7%A7/4.png" alt></p><h2 id="编写Prompt工具推荐"><a href="#编写Prompt工具推荐" class="headerlink" title="编写Prompt工具推荐"></a>编写Prompt工具推荐</h2><ul><li><p><strong>使用dify自带的提示词优化器</strong>：输入具体的需求可以一键生成xml格式的prompt</p><p><img src="/2025/04/06/Prompt%E8%AE%BE%E8%AE%A1%E6%8A%80%E5%B7%A7/1.png" alt></p><p><img src="/2025/04/06/Prompt%E8%AE%BE%E8%AE%A1%E6%8A%80%E5%B7%A7/2.png" alt></p></li><li><p><strong>让AI帮忙优化</strong>：使用kimi、豆包、腾讯元宝、通义千问等AI工具，输入<code>请参照常用的prompt模板，帮我优化以下prompt：具体的需求</code>就能生成较为规范的prompt</p></li><li><p><strong>提示词优化器</strong>：<a href="https://prompt.always200.com/">提示词优化器</a> 输入自己写好的prompt后，使用优化器进行优化（需要配模型api）</p></li></ul><h1 id="高阶Prompt设计技巧"><a href="#高阶Prompt设计技巧" class="headerlink" title="高阶Prompt设计技巧"></a>高阶Prompt设计技巧</h1><h2 id="示例驱动Prompt"><a href="#示例驱动Prompt" class="headerlink" title="示例驱动Prompt"></a>示例驱动Prompt</h2><p>示例驱动Prompt通过提供示例，引导AI按照特定风格或格式输出结果。</p><p>示例1，生成一个关于冒险的故事：</p><pre class="line-numbers language-none"><code class="language-none">请生成一个关于冒险的故事。  示例：  在蒙德城的酒馆里，旅行者听到了一个关于“风龙废墟”的传说。据说废墟深处藏有巴巴托斯遗留的风元素神瞳。旅行者与派蒙一同前往探索，途中遇到了丘丘人设下的陷阱，还与风魔龙瓦格纳展开了激战。最终，他们解开了机关，获得了神瞳，并发现了巴巴托斯的古老笔记，记录着提瓦特大陆的隐秘历史。  现在，请生成一个类似的故事。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>那么AI会参照示例里的格式输出：</p><pre class="line-numbers language-none"><code class="language-none">在璃月的清泉镇，旅行者得知了“归乡之玉”的传说。这块玉器据说能指引失散的亲人重逢。旅行者与钟离一同前往玉京台遗迹，在途中遭遇了愚人众执行官的阻挠，还解开了岩元素机关唤醒了守护灵猴。最终，他们找到了归乡之玉，却发现它与旅行者失散的亲人有着神秘的联系……  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>示例2，编写一个计算角色伤害的函数：</p><pre class="line-numbers language-none"><code class="language-none">请编写一个计算角色伤害的函数。  **示例**：  输入：旅行者攻击力为1000，敌人防御力为200，元素反应为“超载”（伤害提升50%）。  输出：总伤害 &#x3D; (1000 - 200) * 1.5 &#x3D; 1200  **现在，请编写这个函数。**  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么AI会参照示例里的格式输出：</p><pre class="line-numbers language-none"><code class="language-none">def calculate_damage(atk, defense, elemental_reaction&#x3D;None):      base_damage &#x3D; max(1, atk - defense)  # 基础伤害      if elemental_reaction &#x3D;&#x3D; &quot;超载&quot;:          return base_damage * 1.5      elif elemental_reaction &#x3D;&#x3D; &quot;融化&quot;:          return base_damage * 2.0      else:          return base_damage  # 测试示例  print(calculate_damage(1000, 200, &quot;超载&quot;))  # 输出：1200  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>该技巧的适用场景如下：</strong></p><ul><li>根据指定格式生成文案</li><li>故事创作：提供角色、地点和任务框架</li><li>信息提取：明确输入输出格式</li><li>代码实现：通过示例设定逻辑规则</li></ul><h2 id="链式思维Prompt"><a href="#链式思维Prompt" class="headerlink" title="链式思维Prompt"></a>链式思维Prompt</h2><p>链式思维Prompt是指，通过逐步引导模型进行推理和探索，将复杂任务分解为多个步骤，逐步完善输出，特别适合需要逻辑推理和逐步深入的场景。</p><p>一般Prompt可能会让AI直接给出答案，而链式思维Prompt会要求AI详细推理出答案的过程。就像是qwen模型和deepseek模型回答问题的区别。</p><p>例如，在计算数学问题时，可以要求AI按步骤计算，而不是直接给出答案。</p><p>示例1，一般Prompt计算25*48：</p><pre class="line-numbers language-none"><code class="language-none">计算25*48的结果*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>AI会直接回答：<code>1200</code></p><p>使用链式思维Prompt：</p><pre class="line-numbers language-none"><code class="language-none">计算25*48的结果，请逐步拆解计算过程，并给出最终答案<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>AI会则会回答：</p><pre class="line-numbers language-none"><code class="language-none">25 × 48 &#x3D; 25 × (50 - 2)&#x3D; (25 × 50) - (25 × 2)&#x3D; 1250 - 50&#x3D; 1200<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>示例2，生成一个关于冒险的故事：</p><p>单轮的Prompt：</p><pre class="line-numbers language-none"><code class="language-none">请为我规划一次提瓦特大陆的旅行，包括主要景点和活动。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用链式思维Prompt：</p><pre class="line-numbers language-none"><code class="language-none">确定主题：请为我规划一次提瓦特大陆的旅行，包括主要景点和活动。选择地点：如果旅行主题是冒险，你会推荐哪些地点？细化活动：每个地点有哪些具体的冒险活动？安全提示：旅行中需要注意哪些安全事项？<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>该技巧的适用场景如下：</strong></p><ul><li>数学计算</li><li>复杂逻辑推理</li><li>代码调试与优化</li><li>业务决策分析</li><li>逐步推理与验证</li></ul><h2 id="反向Prompt"><a href="#反向Prompt" class="headerlink" title="反向Prompt"></a>反向Prompt</h2><p>反向Prompt就是通过提供错误或不理想的示例，引导模型避免这些错误并输出更符合预期结果。</p><p>示例1，让AI生成一个关于冒险的故事 ：</p><pre class="line-numbers language-none"><code class="language-none">请生成一个关于《原神》的冒险故事，确保包含具体角色、地点和冲突。反向示例：以下是一个模糊的冒险故事：从前有一个冒险家，他踏上了一段旅程，经历了许多困难，最终找到了宝藏。问题：这个故事过于笼统，没有具体细节和角色背景。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例2，让AI生成计算角色伤害的函数：</p><pre class="line-numbers language-none"><code class="language-none">请编写一个计算《原神》角色伤害的函数，确保包含元素反应的加成逻辑。反向示例：以下是一个过于简单的实现：def calculate_damage(atk, defense):return atk * (1 - defense &#x2F; 100)问题：这个函数忽略了元素反应的加成效果。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>该技巧的适用场景如下：</strong></p><ul><li>修正模糊输出</li><li>修正不完整信息</li><li>修正逻辑错误</li></ul><h2 id="多轮交互Prompt"><a href="#多轮交互Prompt" class="headerlink" title="多轮交互Prompt"></a>多轮交互Prompt</h2><p>多轮交互Prompt是指，通过多轮对话逐步引导模型输出更精准的内容，适合需要逐步细化的场景。在某些情况下，一次性提供完整的Prompt不一定能得到最佳答案，这时候就需要通过多轮的交互来优化AI的响应。</p><p>示例1，一般Prompt：</p><pre class="line-numbers language-none"><code class="language-none">请写一篇关于人工智能的文章。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>AI会直接给出一篇关于人工智能的文章。</p><p>使用多轮交互Prompt：</p><pre class="line-numbers language-none"><code class="language-none">用户：我想写一篇关于人工智能的文章，你能帮我吗？AI：当然！请问你希望文章的重点是什么？是介绍 AI 的基本概念，还是探讨 AI 的未来发展？用户：主要是 AI 在医疗领域的应用。AI：好的，我会围绕 AI 在医疗诊断、药物研发、手术辅助等方面的应用展开。请问你希望文章的风格是学术性还是通俗易懂？用户：通俗易懂，并举一些实际案例。AI：以下是一篇关于人工智能在医疗领域应用的文章，重点突出通俗易懂的风格，并结合了实际案例：人工智能：医疗领域的“超级助手”在当今的医疗领域，人工智能（AI）正像一位神奇的“超级助手”，悄然改变着医疗服务的方方面面。它不仅让医生的工作变得更加高效，也让患者享受到了更精准、更便捷的医疗服务。下面，就让我们一起走进人工智能在医疗领域的奇妙世界，看看它都发挥了哪些重要作用。一、精准诊断：让疾病无处遁形在传统的医疗诊断中，医生主要依靠自己的经验和对检查结果的解读来判断病情，但这种方式难免会受到主观因素的影响，有时会出现误诊或漏诊的情况。而人工智能的出现，就像为医生配备了一双“火眼金睛”，能够更精准地发现疾病。（一）医学影像分析医学影像（如X光、CT、MRI等）是医生诊断疾病的重要依据之一。人工智能通过深度学习技术，可以对这些影像进行快速且精准的分析。比如，DeepMind开发的AI系统能够自动检测乳腺X射线图像中的潜在癌症病变，将漏诊率降低了5.7%，诊断准确率超过了传统放射科医生。在北京协和医院，部署的AI系统可以秒级识别肺结节，敏感度高达97%。这意味着，那些微小的、容易被忽略的病灶，很难逃过AI的“法眼”，从而帮助医生更早地发现疾病，提高患者的治愈率。（二）病理切片识别病理切片是诊断疾病的重要手段，但传统的病理分析需要病理学家花费大量时间和精力进行观察和判断。现在，上海瑞金医院发布的“瑞智病理大模型”能够实现百万级数字切片的自动化分析，准确率超过98%。这不仅大大提高了工作效率，还减少了人为因素导致的误差，让病理诊断更加准确可靠。......(省略后续的n个字)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例2，我想要让AI为我规划一次提瓦特大陆的旅行：</p><pre class="line-numbers language-none"><code class="language-none">用户：请为我规划一次提瓦特大陆的旅行。AI：好的！以下是一份详细的提瓦特大陆旅行规划，涵盖蒙德、璃月、稻妻、须弥、枫丹、纳塔、至冬等主要区域的主要景点和活动，希望对你有所帮助！一、蒙德主要景点蒙德城：蒙德的中心区域，有冒险家协会等重要机构。城内建筑风格独特，充满欧式风情，可以在这里感受蒙德的历史与文化。风起地：全蒙德唯一一处地势较平坦的原野，中央有棵庞大的橡树。鹰翔海滩：可以闲逛欣赏风景。低语森林：安柏非常熟悉的地方。明冠峡：风景秀丽的峡谷。龙脊雪山：蒙德的著名地标之一，景色壮观，但需注意保暖和安全。特色活动风花节：蒙德的特色节日，有各种浪漫的活动，如放风筝、制作花饰等。探索与解谜：在蒙德的各个角落寻找隐藏的宝藏和解谜元素，如开启风神瞳等。美食之旅：品尝蒙德的特色美食，如风神杂烩汤等。......(省略后续的n个字)用户：如果旅行主题是冒险，你会推荐哪些地点？AI：如果旅行主题是冒险，提瓦特大陆上有许多充满挑战和神秘的地方，以下是一些推荐的冒险地点：一、蒙德龙脊雪山：冒险亮点：雪山环境恶劣，有极寒天气和暴风雪，需要携带抗寒装备。雪山中有许多隐藏的宝藏和解谜元素，如古老的遗迹、冰封的洞穴等。挑战：雪山中有强大的怪物，如冰元素的丘丘人、冰史莱姆等。此外，还需要小心雪崩和冰裂缝等自然危险。奖励：开启雪山中的风神瞳可以获得丰厚的奖励，还能找到珍贵的材料和宝藏。深林之底：冒险亮点：位于蒙德的森林深处，环境幽暗且充满危险。这里有古老的遗迹和神秘的力量，适合喜欢探险的旅行者。挑战：森林中有许多危险的生物，如风龙特瓦林的遗迹和强大的风元素怪物。此外，森林中迷雾重重，容易迷路。奖励：探索深林之底可以获得稀有的风元素材料和宝藏，还能解锁隐藏的剧情。......(省略后续的n个字)用户：每个地点有哪些具体的冒险活动？AI：以下是一份以冒险为主题的提瓦特大陆旅行规划，涵盖各地区的具体冒险活动：蒙德龙脊雪山：冒险活动：雪山大勘测：与NPC艾斯特尔对话后，前往雪山各处寻找特定物品，解开雪山的谜团。雪山迷踪：与乔尔交谈，探索雪山深处的遗迹，解开隐藏的机关。低温预警：进入雪山的严寒区域，帮助玉霞研究低温现象，应对恶劣环境。冒险亮点：雪山环境恶劣，有极寒天气和暴风雪，需要携带抗寒装备，同时应对强大的冰元素怪物。达达乌帕谷：冒险活动：探索剑冢封印：找到利文斯通博士，解开剑冢的封印，探索其中的秘密。冒险亮点：剑冢封印区域有强大的敌人和复杂的机关，需要智慧和勇气。......(省略后续的n个字)用户：旅行中需要注意哪些安全事项？AI：在提瓦特大陆的冒险旅行中，安全至关重要。以下是一些需要注意的安全事项，确保你的旅程既刺激又安全：一、环境安全恶劣天气：龙脊雪山：雪山环境恶劣，有极寒天气和暴风雪。建议携带抗寒装备，如抗寒药剂、保暖衣物等。在暴风雪中，尽量避免长时间暴露在外，寻找避风处。稻妻：稻妻经常有雷暴天气，建议携带抗雷装备，如抗雷药剂、绝缘手套等。在雷暴中，尽量避免站在高处或靠近金属物体。层岩巨渊：地下区域可能有塌方和落石的危险，建议携带照明工具和防塌方装备，如矿工头盔等。地形危险：绝云间：地形复杂，有悬崖和深谷，建议小心行走，避免失足。攀爬时要确保装备牢固。清籁岛：地形多变，有沼泽和险峻的山地，建议携带防滑鞋和探路工具。层岩巨渊：地下区域有复杂的洞穴和狭窄的通道，建议携带地图和指南针，避免迷路。......(省略后续的n个字)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>该技巧的适用场景如下：</strong></p><ul><li>产品设计</li><li>内容创作</li><li>心理咨询</li></ul><h2 id="层级Prompt"><a href="#层级Prompt" class="headerlink" title="层级Prompt"></a>层级Prompt</h2><p>层级Prompt是指通过分层结构逐步引导模型输出，适合需要分步骤完成的复杂任务。在处理复杂问题时，将问题分解成多个子问题，让AI逐步回答。</p><p>示例1，我想要让AI为我规划一次提瓦特大陆的旅行。应用层级Prompt的用例如下：</p><pre class="line-numbers language-none"><code class="language-none">顶层Prompt(第一次提问)：请为我规划一次提瓦特大陆的旅行，包括主要景点和活动。子层级Prompt（AI拆解问题后发出第二次提问）：如果旅行主题是冒险，你会推荐哪些地点？每个地点有哪些具体的冒险活动？旅行中需要注意哪些安全事项？<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>AI最终生成的回答如下：</p><pre class="line-numbers language-none"><code class="language-none">旅行主题：冒险探索  推荐地点与活动：  1. 龙脊雪山：     活动：攀登雪山，寻找被冰封的遗迹，挑战冰龙瓦格纳。     注意事项：携带保暖装备，小心雪崩和低温陷阱。  2. 清泉镇（璃月）：     活动：探索“归乡之玉”遗迹，与守护灵猴互动。     注意事项：避开愚人众巡逻队，携带岩元素武器破解机关。  3. 稻妻踏鞴砂：     活动：挑战“影打刀”试炼，收集雷元素神瞳。     注意事项：注意雷暴天气，避免被雷龙袭击。  旅行建议：  提前与当地冒险家协会联系获取最新情报。  准备足够的治疗道具和元素反应材料。  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例2，我想要让AI生成一个关于 2024 年全球新能源市场趋势的分析报告。应用层级Prompt的用例如下：</p><pre class="line-numbers language-none"><code class="language-none">顶层Prompt(第一次提问)：我需要一个关于 2024 年全球新能源市场趋势的分析报告，请从市场规模、技术发展、政策影响、竞争格局四个方面分别分析，并提供数据支持。子层级Prompt（AI拆解问题后发出第二次提问）：市场规模：全球新能源市场的增长率、市场份额等数据。技术发展：当前主流新能源技术及其突破点。政策影响：各国政府的新能源补贴政策、环保法规等。竞争格局：主要新能源企业的市场占有率、竞争策略等。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>AI让将这个复杂的问题拆分成4个小的问题，逐步分析解答，最后再汇总。</p><p><strong>该技巧的适用场景如下：</strong></p><ul><li>报告撰写</li><li>系统设计</li><li>商业分析</li><li>语料生成</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><strong>链式思维Prompt</strong>：逐步推理和探索，适合复杂任务分解。</li><li><strong>示例驱动Prompt</strong>：通过示例引导风格和格式，适合个性化输出。</li><li><strong>反向Prompt</strong>：通过错误示例避免常见问题，适合修正错误。</li><li><strong>多轮交互Prompt</strong>：通过多轮对话逐步细化输出，适合逐步细化的任务。</li><li><strong>层级Prompt</strong>：通过分层结构逐步引导输出，适合复杂任务分解。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;通常我们在使用大语言模型（LLM）时，都是通过输入指令的形式，让LLM完成指定的任务。&lt;/p&gt;
&lt;p&gt;在用户指令输入后，LLM首先会将文本指</summary>
      
    
    
    
    <category term="LLM" scheme="http://tangmenjue.top/categories/LLM/"/>
    
    <category term="人工智能" scheme="http://tangmenjue.top/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
    <category term="LLM" scheme="http://tangmenjue.top/tags/LLM/"/>
    
    <category term="人工智能" scheme="http://tangmenjue.top/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>MinIO 配置及使用</title>
    <link href="http://tangmenjue.top/2024/07/01/MinIO%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
    <id>http://tangmenjue.top/2024/07/01/MinIO%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%BD%BF%E7%94%A8/</id>
    <published>2024-07-01T09:35:47.000Z</published>
    <updated>2024-07-01T09:35:47.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>MinIO是一个对象存储系统，它适合用于存储大容量非结构化的数据。</p><p>对象存储对比传统文件存储方式的<strong>优点</strong>：</p><ul><li><strong>可扩展性和灵活性高</strong>:基于分布式架构设计，可以轻松地水平扩展存储容量，无需担心容量限制问题，适合数据量快速增长的场景</li><li><strong>高耐用性与容错性</strong>:通过数据复制或分布式冗余存储策略，提供高数据持久性和故障恢复能力</li><li>简易管理:对象存储<strong>通过API接口</strong>访问，简化了数据的管理和访问过程，无需关心文件系统的层级结构</li><li>支持元数据:每个对象都可以携带丰富的元数据信息，便于进行标签化管理和搜索</li></ul><p>对象存储对比传统文件存储方式的<strong>缺点</strong>：</p><ul><li><strong>访问延迟较高</strong>:主要通过http协议读写，相比直接挂载的文件系统，对象存储的读写操作会有更高的延迟</li><li>不支持文件系统语义:如文件锁定、目录级权限控制等传统文件系统特性，在对象存储中不直接提供</li><li><strong>不适合低延迟、高I/o操作</strong>:对于需要频繁修改和随机访问的应用场景，对象存储不是最佳选择，比如系统日志之类</li></ul><p><strong>适用场景</strong>:</p><ul><li>大数据存储与分析:面对PB级乃至EB级的数据存储需求，如<strong>历史日志存储</strong>、数据分析、机器学习训练数据等</li><li>内容分发网络(CDN)与媒体存储:<strong>视频、图片等多媒体文件的存储与快速分发</strong></li><li><strong>备份与归档</strong>:数据备份、灾难恢复和长期数据归档</li><li>Web应用与移动应用:特别是那些需要在全球范围内<strong>快速访问静态资源</strong>的应用</li><li>云原生应用:微服务架构、容器化应用中，<strong>作为无状态服务的数据存储层</strong></li></ul><h1 id="配置MinIO"><a href="#配置MinIO" class="headerlink" title="配置MinIO"></a>配置MinIO</h1><p>本机可以通过地址+端口直接访问MinIO console管理页面</p><ul><li><p>登录管理页面，创建存储桶（create Bucket）<img src="/2024/07/01/MinIO%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%BD%BF%E7%94%A8/1.png" alt></p></li><li><p>进入桶内，点击<code>Access Policy</code>，将存储桶的设置为私有（Private）<img src="/2024/07/01/MinIO%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%BD%BF%E7%94%A8/2.png" alt><img src="/2024/07/01/MinIO%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%BD%BF%E7%94%A8/3.png" alt></p></li><li><p>点击侧栏的Policies，点击<code>Create Policy</code>新建一个策略<img src="/2024/07/01/MinIO%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%BD%BF%E7%94%A8/4.png" alt><img src="/2024/07/01/MinIO%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%BD%BF%E7%94%A8/5.png" alt>，例如这里的策略名叫<code>testPolicy</code>，具体的策略配置如下，只需要将<code>testPolicy</code>更换成对应的策略名即可：</p>  <pre class="line-numbers language-none"><code class="language-none">&#123;    &quot;Version&quot;: &quot;2012-10-17&quot;,    &quot;Statement&quot;: [        &#123;            &quot;Effect&quot;: &quot;Allow&quot;,            &quot;Action&quot;: [                &quot;s3:*&quot;            ],            &quot;Resource&quot;: [                &quot;arn:aws:s3:::test&quot;            ]        &#125;,        &#123;            &quot;Effect&quot;: &quot;Allow&quot;,            &quot;Action&quot;: [                &quot;s3:*&quot;            ],            &quot;Resource&quot;: [                &quot;arn:aws:s3:::test&#x2F;*&quot;            ]        &#125;    ]&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li>设置好管理策略后，设置ak（access_key）和sk（secret_key）。<img src="/2024/07/01/MinIO%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%BD%BF%E7%94%A8/6.png" alt>请记下这里的buckey_name，ak和sk，后续在<code>config.yml</code>里会用到这一部分信息：<img src="/2024/07/01/MinIO%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%BD%BF%E7%94%A8/7.png" alt></li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">minio:  buckey_name: 自定义的桶名称  endpoint: minio地址  access_key: 创建的ak  secret_key: 根据ak自动生成的sk<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>在后端项目终端中输入<code>pip install minio</code>下载所需依赖</p></li><li><p>在后端框架的<code>services</code>目录下创建<code>fileUploader.py</code>文件，完成Minio的基础配置：</p>  <pre class="line-numbers language-python" data-language="python"><code class="language-python">from config import configfrom minio import Minio__all__ &#x3D; [  &#39;minioClient&#39;,]minioClient&#x3D;Minio(config[&#39;minio&#39;][&#39;endpoint&#39;],                  access_key&#x3D;config[&#39;minio&#39;][&#39;access_key&#39;],                  secret_key&#x3D;config[&#39;minio&#39;][&#39;secret_key&#39;],                  secure&#x3D;False,                  cert_check&#x3D;False                  )<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>完成这个配置后，若需要用到该模块，只需要输入以下语句引用即可</p>  <pre class="line-numbers language-python" data-language="python"><code class="language-python">from services.fileUploader import minioClient<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h1 id="MinIO用法"><a href="#MinIO用法" class="headerlink" title="MinIO用法"></a>MinIO用法</h1><p>下面以几个常用语法为例，讲解MinIO语法的使用，除了下文列出来的函数，更多的MinIO语法请参照MinIO SDK文档：<a href="https://www.bookstack.cn/read/miniocookbookzh/24.md#Python Client API文档">Minio SDKs - Python Client API文档 - 《Minio Cookbook 中文版》 - 书栈网 · BookStack</a></p><p><strong>注意：MinIO使用文件名作为文件的唯一标识，上传同名文件时是直接覆盖文件而不是加后缀区分，因此在上传文件时，尽量使用uuid生成唯一的文件名。</strong></p><h2 id="put-object-将文件以二进制的形式上传到指定存储桶中-适用于请求次数较少的情况"><a href="#put-object-将文件以二进制的形式上传到指定存储桶中-适用于请求次数较少的情况" class="headerlink" title="put_object:将文件以二进制的形式上传到指定存储桶中-适用于请求次数较少的情况"></a>put_object:将文件以二进制的形式上传到指定存储桶中-适用于请求次数较少的情况</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">  minioClient.put_object(bucket_name&#x3D;config.config[&#39;minio&#39;][&#39;buckey_name&#39;], object_name&#x3D;object_name, data&#x3D;data,length&#x3D;length)# 参数详情如下：# bucket_name：存储桶名称-（一般固定不变），string类型# object_name：上传文件的名称，string类型（注：如果需要将文件上传到文件夹里，这里的文件名称可以填写 “文件夹名&#x2F;文件名称”）# data：文件的二进制数据，string类型。python中可以取request.files[&#39;file&#39;].stream的值# length：对象的总长度，int类型，如len(file.read())# content_type：对象的content_type（选填，默认为&quot;application&#x2F;octet-stream&quot;），string类型# metadata：其他元数据（选填，默认为None），dict类型<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="fput-object-将本地文件上传到指定存储桶中-适用于请求次数较多、多并发的情况"><a href="#fput-object-将本地文件上传到指定存储桶中-适用于请求次数较多、多并发的情况" class="headerlink" title="fput_object:将本地文件上传到指定存储桶中-适用于请求次数较多、多并发的情况"></a>fput_object:将本地文件上传到指定存储桶中-适用于请求次数较多、多并发的情况</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">  minioClient.fput_object(bucket_name&#x3D;config.config[&#39;minio&#39;][&#39;buckey_name&#39;], object_name&#x3D;object_name, file_path&#x3D;file_path)# 参数详情如下：# bucket_name：存储桶名称-（一般固定不变），string类型# object_name：上传文件的名称，string类型（注：如果需要将文件上传到文件夹里，这里的文件名称可以填写 “文件夹名&#x2F;文件名称”）# file_path：上传文件所在的路径，string类型# content_type：对象的content_type（选填，默认为&quot;application&#x2F;octet-stream&quot;），string类型# metadata：其他元数据（选填，默认为None），dict类型<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="get-object：从指定存储桶中下载文件-适用于请求次数较少的情况"><a href="#get-object：从指定存储桶中下载文件-适用于请求次数较少的情况" class="headerlink" title="get_object：从指定存储桶中下载文件-适用于请求次数较少的情况"></a>get_object：从指定存储桶中下载文件-适用于请求次数较少的情况</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">minioClient.get_object(bucket_name&#x3D;config.config[&#39;minio&#39;][&#39;buckey_name&#39;], object_name&#x3D;object_name)# 参数详情如下：# bucket_name：存储桶名称-（一般固定不变），string类型# object_name：下载文件的名称，string类型。（注：如果需要从文件夹里下载文件，这里的文件名称可以填写 “文件夹名&#x2F;文件名称”）# request_headers: 额外的请求头信息（选填，默认为None），dict类型<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="fget-object：从指定存储桶中下载文件并保存到本地-适用于请求次数较多、多并发的情况"><a href="#fget-object：从指定存储桶中下载文件并保存到本地-适用于请求次数较多、多并发的情况" class="headerlink" title="fget_object：从指定存储桶中下载文件并保存到本地-适用于请求次数较多、多并发的情况"></a>fget_object：从指定存储桶中下载文件并保存到本地-适用于请求次数较多、多并发的情况</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">minioClient.fget_object(bucket_name&#x3D;config.config[&#39;minio&#39;][&#39;buckey_name&#39;], object_name&#x3D;object_name, file_path&#x3D;file_path)# 参数详情如下：# bucket_name：存储桶名称-（一般固定不变），string类型# object_name：下载文件的名称，string类型（注：如果需要从文件夹里下载文件，这里的文件名称可以填写 “文件夹名&#x2F;文件名称”）# file_path：下载文件保存到本地的路径，string类型# request_headers: 额外的请求头信息（选填，默认为None），dict类型<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="list-objects：列出指定存储桶中所有文件"><a href="#list-objects：列出指定存储桶中所有文件" class="headerlink" title="list_objects：列出指定存储桶中所有文件"></a>list_objects：列出指定存储桶中所有文件</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">minioClient.list_objects(bucket_name&#x3D;config[&#39;minio&#39;][&#39;buckey_name&#39;])# 参数详情如下：# bucket_name：存储桶名称-（一般固定不变），string类型# prefix: 用来过滤的文件名前缀，默认为None，string类型# recursive：是否递归查找，（选填，默认值为False），bool类型（True代表递归查找，False代表类似文件夹查找，以&#39;&#x2F;&#39;分隔，不查子文件夹。）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="remove-object：删除指定文件"><a href="#remove-object：删除指定文件" class="headerlink" title="remove_object：删除指定文件"></a>remove_object：删除指定文件</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">minioClient.remove_object(bucket_name&#x3D;config[&#39;minio&#39;][&#39;buckey_name&#39;],object_name&#x3D;object_name)# 参数详情如下：# bucket_name：存储桶名称-（一般固定不变），string类型# object_name：需要删除文件的名称，string类型（注：如果需要从文件夹里删除文件，这里的文件名称可以填写 “文件夹名&#x2F;文件名称”）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="remove-objects：删除存储桶中的多个文件"><a href="#remove-objects：删除存储桶中的多个文件" class="headerlink" title="remove_objects：删除存储桶中的多个文件"></a>remove_objects：删除存储桶中的多个文件</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">minioClient.remove_objects(bucket_name&#x3D;config[&#39;minio&#39;][&#39;buckey_name&#39;],objects_iter)# 参数详情如下：# bucket_name：存储桶名称-（一般固定不变），string类型# objects_iter：多个对象名称的列表数据，list, tuple or iterator类型<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="list-objects-amp-remove-objects-组合：删除指定目录"><a href="#list-objects-amp-remove-objects-组合：删除指定目录" class="headerlink" title="list_objects &amp; remove_objects 组合：删除指定目录"></a>list_objects &amp; remove_objects 组合：删除指定目录</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"># 导入DeleteObject类，用来表示在执行批量删除对象操作时单个对象删除的请求，包含了对象的key和版本id信息from minio.deleteobjects import DeleteObjectdelete_object_list &#x3D; [DeleteObject(x.object_name) for x in minioClient.list_objects(bucket_name&#x3D;config[&#39;minio&#39;][&#39;buckey_name&#39;], prefix&#x3D;prefix, recursive&#x3D;True)]minioClientt.remove_objects(bucket_name&#x3D;config[&#39;minio&#39;][&#39;buckey_name&#39;], delete_object_list)# 参数详情如下：# bucket_name：存储桶名称-（一般固定不变），string类型# prefix: 用来过滤的文件名前缀，默认为None，string类型# recursive：是否递归查找，（选填，默认值为False），bool类型（True代表递归查找，False代表类似文件夹查找，以&#39;&#x2F;&#39;分隔，不查子文件夹。）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="copy-object-amp-remove-object-组合：移动文件"><a href="#copy-object-amp-remove-object-组合：移动文件" class="headerlink" title="copy_object &amp; remove_object 组合：移动文件"></a>copy_object &amp; remove_object 组合：移动文件</h2><p>copy_object的作用是从存储桶A中复制指定文件到存储桶B里，通过先将文件复制到存储桶B，再把存储桶A中的文件删除，以达到在不同存储桶内迁移文件的目的</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">minioClient.copy_object(bucket_name&#x3D;config[&#39;minio&#39;][&#39;buckey_nameB&#39;],object_name&#x3D;object_name,object_source&#x3D;object_source,copy_conditions&#x3D;copy_conditions)minioClient.remove_object(bucket_name&#x3D;config[&#39;minio&#39;][&#39;buckey_nameA&#39;],object_name&#x3D;object_name)# copy_object中的参数详情如下：# bucket_name：存储桶名称B-（一般固定不变），string类型# object_name：文件粘贴到存储桶B后的名字，string类型（注：如果需要将文件粘贴到文件夹里，这里的文件名称可以填写 “文件夹名&#x2F;文件名称”）# object_source：需要复制的文件所在存储桶名称A+需要复制的文件名，string类型# copy_conditions：复制文件操作时所应当满足的条件（选填，默认为None）# remove_object中的参数详情如下：# bucket_name：存储桶名称A-（一般固定不变），string类型# object_name：需要删除的文件名，string类型（注：如果需要从文件夹里删除文件，这里的文件名称可以填写 “文件夹名&#x2F;文件名称”）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="文件上传示例"><a href="#文件上传示例" class="headerlink" title="文件上传示例"></a>文件上传示例</h1><p><strong>put_object：文件以二进制的形式上传</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">import osimport uuidfrom io import BytesIOfile &#x3D; request.files.get(&#39;file&#39;)file_id&#x3D;uuid.uuid1().hexsuffix&#x3D;os.path.splitext(file.filename)[1].lower()file_content&#x3D;file.read()file_size &#x3D; len(file_content)file_stream&#x3D;BytesIO(file_content)with file_stream as stream:  minioClient.put_object(bucket_name&#x3D;config.config[&#39;minio&#39;][&#39;buckey_name&#39;], object_name&#x3D;file_id+suffix, data&#x3D;stream,length&#x3D;file_size)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>fput_object：上传本地文件</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">import osfrom flask import request# 文件保存在&#x2F;files的路径下path &#x3D; os.path.join(os.path.dirname(os.getcwd()),&#39;files&#39;)file &#x3D; request.files.get(&#39;file&#39;)origin_name &#x3D; file.filenamefile_abolutepath &#x3D; os.path.join(path, filename)minipath &#x3D; &#39;images&#x2F;public&#x2F;&#39;+filenameminioClient.fput_object(bucket_name&#x3D;config.config[&#39;minio&#39;][&#39;buckey_name&#39;], object_name&#x3D;minipath, file_path&#x3D;file_abolutepath)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">在现有python框架下，配置MinIO上传、下载文件</summary>
    
    
    
    <category term="MinIO" scheme="http://tangmenjue.top/categories/MinIO/"/>
    
    
    <category term="MinIO" scheme="http://tangmenjue.top/tags/MinIO/"/>
    
  </entry>
  
  <entry>
    <title>自动化接口测试：（一）Postman</title>
    <link href="http://tangmenjue.top/2024/06/14/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%EF%BC%9A%EF%BC%88%E4%B8%80%EF%BC%89Postman/"/>
    <id>http://tangmenjue.top/2024/06/14/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%EF%BC%9A%EF%BC%88%E4%B8%80%EF%BC%89Postman/</id>
    <published>2024-06-14T02:24:47.000Z</published>
    <updated>2024-06-14T02:24:47.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在开发过程中，开发完一个功能后，若是手动一个个取测试新旧功能接口是否正常的操作会比较重复乏味，因此学会对接口自动化测试，一键对新旧接口进行测试可以大大提升功能测试的速度，减少线上出bug的频率。</p><p>本文默认读者已掌握Postman基本用法，即已经会使用Postman进行模拟请求的操作。</p><p>本文的软件版本如下，不同版本页面的UI和部分功能位置可能会有点不同：</p><ul><li>window10 64位</li><li>Postman for Windows 11.2.1</li></ul><p>下面将从四点讲述自动化接口测试过程：</p><ul><li>接口结果判断：接口是否请求成功</li><li>接口批量测试</li><li>接口定期测试</li><li>接口数据依赖</li></ul><h1 id="接口结果判断"><a href="#接口结果判断" class="headerlink" title="接口结果判断"></a>接口结果判断</h1><p>接口返回结果主要有两个部分组成：请求返回的<code>code</code>和内容<code>data</code>。</p><p>因此在使用Postman测试时，主要从两个方面来判断接口结果是否正确：</p><ul><li>请求返回的code是否符合预期</li><li>请求返回的内容中是否包含预期的内容或关键字</li></ul><p><strong>旧版本</strong>的Postman功能区在最显眼的地方点击<strong><code>Tests</code></strong>字样，将会切换到接口测试功能，可以在当前面板中编写测试脚本，点击字样，将会切换到预请求脚本的编写页面，可以编写请求运行之前所要执行的JavaScript。</p><p><img src="/2024/06/14/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%EF%BC%9A%EF%BC%88%E4%B8%80%EF%BC%89Postman/1.png" alt></p><p><strong>新版本</strong>的Postman将预请求脚本和测试脚本合并为一个功能区<strong><code>Scripts</code></strong>，其中在<strong><code>Pre-req</code></strong>面板编写预请求脚本，在<strong><code>Post-res</code></strong>面板里编写测试脚本</p><p><img src="/2024/06/14/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%EF%BC%9A%EF%BC%88%E4%B8%80%EF%BC%89Postman/2.png" alt></p><p>注意：在面板中只需要书写结果逻辑判断的代码块，<strong>脚本语言只支持<code>JavaScript</code></strong>。在面板右侧的<strong><code>Snippets</code></strong>功能区中，Postman也提供了一些常用的代码模板，利用模板就能处理大部分的情况。</p><p>注意：在Postman for Windows 11.2.1中tests、responseBody对象已弃用，因此需要使用断言。如以下代码无法在新版本里生效：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//检查response body中是否包含某个string</span>tests<span class="token punctuation">[</span><span class="token string">"Body matches string"</span><span class="token punctuation">]</span> <span class="token operator">=</span> responseBody<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">"string_you_want_to_search"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>具体的代码模板及其注释将附在文末的附录中，有需要的可去文章末尾了解</p><h1 id="接口批量测试"><a href="#接口批量测试" class="headerlink" title="接口批量测试"></a>接口批量测试</h1><h2 id="批量管理"><a href="#批量管理" class="headerlink" title="批量管理"></a>批量管理</h2><p>若想要对接口进行批量测试、统一管理，需要将所有带测试接口全部保存到同一个集合<code>Collections</code>中，这样就可以对接口进行统一管理了。</p><p>例如下图中点击save按钮或者按下<code>ctrl+s</code>将<code>test</code>接口保存到test的集合中<img src="/2024/06/14/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%EF%BC%9A%EF%BC%88%E4%B8%80%EF%BC%89Postman/3.png" alt></p><p><img src="/2024/06/14/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%EF%BC%9A%EF%BC%88%E4%B8%80%EF%BC%89Postman/4.png" alt></p><p>点击集合名称<code>test</code>打开集合页面，选择<strong><code>Scripts</code></strong>功能区，便可打开集合详情页面</p><p><img src="/2024/06/14/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%EF%BC%9A%EF%BC%88%E4%B8%80%EF%BC%89Postman/5.png" alt></p><p>其中<code>Overview</code>为集合概况页；</p><p>切换到<code>Authorization</code>可设置接口验证类型；</p><p>切换到<code>Scripts</code>可设置接口的测试脚本；</p><p>切换到<code>Variables</code>可添加用于编写接口测试脚本的参数变量；</p><p>切换到<code>Runs</code>可设置测试任务中接口运行次数、时间间隔、定期运行等状态，并执行测试任务；</p><h2 id="向接口传递动参"><a href="#向接口传递动参" class="headerlink" title="向接口传递动参"></a>向接口传递动参</h2><p>若想要向接口传入动态变化的参数，可按照下述步骤操作：</p><ul><li>对于GET请求，可以在Patams的<code>Value</code>中设置动参引用。如key中输入<code>name</code>， Value中输入<code>&#123;&#123;name&#125;&#125;</code><img src="/2024/06/14/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%EF%BC%9A%EF%BC%88%E4%B8%80%EF%BC%89Postman/6.png" alt></li><li>对于POST请求，可以将参数输入切换到Body的<code>x-www-form-urlencoded</code>类型，然后在<code>Value</code>中设置动参引用。如key中输入<code>name</code>， Value中输入<code>&#123;&#123;name&#125;&#125;</code><img src="/2024/06/14/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%EF%BC%9A%EF%BC%88%E4%B8%80%EF%BC%89Postman/7.png" alt></li></ul><p>此处设置好Value后，暂无法使用，需要在预请求脚本中或导入数据集给变量赋值后才能正常使用。</p><p><strong>注意：设置好数据集的请求，会将数据集中的数据遍历完成后才视作该接口已完成请求。</strong></p><h3 id="预请求给变量赋值"><a href="#预请求给变量赋值" class="headerlink" title="预请求给变量赋值"></a>预请求给变量赋值</h3><p>点击Scripts功能区的Pre-request模块，即可编写预请求脚本，页面右方提供了一些常用代码模板可供使用，可以在这里参照代码模板给刚刚设定的动参赋值。</p><p>如下图功能为将name变量的值设为’test’并获取name变量的值，<img src="/2024/06/14/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%EF%BC%9A%EF%BC%88%E4%B8%80%EF%BC%89Postman/8.png" alt></p><h3 id="导入数据集批量赋值"><a href="#导入数据集批量赋值" class="headerlink" title="导入数据集批量赋值"></a>导入数据集批量赋值</h3><p>首先点击集合名称-Runs功能区-Preformance页面，点击<code>Run Performance Test</code>按钮创建测试任务（任务触发方式默认为手动触发）。</p><p>在新弹出的页面中，找到Data File模块，即可在这里上传测试数据文件来实现动参赋值。目前仅支持上传<code>CSV</code>或<code>JSON</code>文件.</p><ul><li><p>CSV文件数据格式要求如下：<img src="/2024/06/14/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%EF%BC%9A%EF%BC%88%E4%B8%80%EF%BC%89Postman/11.png" alt></p></li><li><p>JSON文件数据格式要求如下：</p>  <pre class="line-numbers language-json" data-language="json"><code class="language-json">[  &#123;    &quot;name&quot;: &quot;zhangsan&quot;,    &quot;number&quot;: &quot;123&quot;  &#125;,  &#123;    &quot;name&quot;: &quot;lisi&quot;,    &quot;number&quot;: &quot;456&quot;  &#125;,  &#123;    &quot;name&quot;: &quot;wangwu&quot;,    &quot;number&quot;: &quot;789&quot;  &#125;,  &#123;    &quot;name&quot;: &quot;zhaoliu&quot;,    &quot;number&quot;: &quot;012&quot;  &#125;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>上传文件后看到点击continue按钮即可成功导入数据集<img src="/2024/06/14/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%EF%BC%9A%EF%BC%88%E4%B8%80%EF%BC%89Postman/12.png" alt></p><p>点击Run即可读取测试集里的数据，进行一次接口测试。</p><h1 id="接口定期测试"><a href="#接口定期测试" class="headerlink" title="接口定期测试"></a>接口定期测试</h1><p>Postman提供了Schedule runs的功能，支持提交一个按照定时器运行的测试任务。</p><p>点击集合名称-Runs功能区-Preformance页面，点击<code>Run Performance Test</code>按钮创建测试任务，切换Functional功能区，选择Schedule runs定时运行，设置好定时器参数便可以点击末尾的<code>Schedule Run</code>按钮定时跑测试任务了。</p><p><img src="/2024/06/14/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%EF%BC%9A%EF%BC%88%E4%B8%80%EF%BC%89Postman/13.png" alt></p><h1 id="接口数据依赖"><a href="#接口数据依赖" class="headerlink" title="接口数据依赖"></a>接口数据依赖</h1><p>在日常开发中，经常会遇到依赖请求的情况。例如从接口A中查询出记录id，接口B、C、D根据这个id进行一些增删改查的操作。这一过程中，需要处理以下问题：</p><ul><li>接口调用顺序</li><li>将接口A返回的数据传递给后续的接口B、C、D</li></ul><h2 id="接口调用顺序"><a href="#接口调用顺序" class="headerlink" title="接口调用顺序"></a>接口调用顺序</h2><h3 id="默认调用顺序"><a href="#默认调用顺序" class="headerlink" title="默认调用顺序"></a>默认调用顺序</h3><p>集合中接口的默认调用顺序是按照页面左边的目录顺序从上到下执行的（即test-&gt;test1-&gt;test2），因此只需要将优先执行的接口放前面即可固定接口的调用顺序.<img src="/2024/06/14/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%EF%BC%9A%EF%BC%88%E4%B8%80%EF%BC%89Postman/14.png" alt></p><h3 id="自定义调用顺序"><a href="#自定义调用顺序" class="headerlink" title="自定义调用顺序"></a>自定义调用顺序</h3><p>Postman提供了一个函数<code>setNextRequest()</code>支持跳转到指定接口继续执行；旧版本Postman中该函数的语句为<code>postman.setNextRequest(要跳转的接口名)</code>。</p><p><strong>注意：</strong></p><ul><li><p>该函数只在运行集合测试时生效，单独接口<code>send</code>时该函数不起作用</p></li><li><p>运行接口从接口A跳到接口C后，若C后面还有接口DEF，则后面的即可仍会按照默认顺序执行，即DEF仍会被执行</p></li><li>指定的跳转接口必须同属于一个集合中</li><li>该函数不管是在何处被调用，都只在当前脚本的最后才会执行</li></ul><p>在功能区<strong><code>Scripts</code></strong>，<strong><code>Post-res</code></strong>面板里编写如下代码，可以实现test接口运行成功后跳到test2中继续运行。</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">&#x2F;&#x2F;test接口运行成功后跳到test2中pm.test(&quot;Status code is 200&quot;, function () &#123;    pm.response.to.have.status(200);    pm.execution.setNextRequest(&#39;localhost&#x2F;test&#x2F;api&#x2F;test2&#39;)&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数据传递"><a href="#数据传递" class="headerlink" title="数据传递"></a>数据传递</h2><p>点击侧边栏的<code>Environments</code>，可以创建不同的变量环境，如下图中创建了测试和线上2个环境<img src="/2024/06/14/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%EF%BC%9A%EF%BC%88%E4%B8%80%EF%BC%89Postman/15.png" alt></p><p>通过右边的勾选，可以通过切换不同的环境来设置不同的值<img src="/2024/06/14/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%EF%BC%9A%EF%BC%88%E4%B8%80%EF%BC%89Postman/16.png" alt></p><p><img src="/2024/06/14/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%EF%BC%9A%EF%BC%88%E4%B8%80%EF%BC%89Postman/17.png" alt></p><p>通过设置当前环境的参数集中的参数，可以实现不同接口之间的参数传递。例如在功能区<strong><code>Scripts</code></strong>，<strong><code>Post-res</code></strong>面板里编写如下代码，可以实现test接口运行成功后取其返回name的值作为后续接口的参数<code>res_name</code>。</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">&#x2F;&#x2F;注意，这个参数res_name的值只会添加在当前选择环境的参数集中pm.test(&quot;Status code is 200&quot;, function () &#123;    pm.response.to.have.status(200);    var jsonData &#x3D; pm.response.json();    pm.environment.set(&quot;res_name&quot;, jsonData[&#39;name&#39;]);&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><h2 id="附录一：旧版本测试模板（直接取值）"><a href="#附录一：旧版本测试模板（直接取值）" class="headerlink" title="附录一：旧版本测试模板（直接取值）"></a>附录一：旧版本测试模板（直接取值）</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//检查response body中是否包含某个string,注意："value"为自定义命名，但需唯一。</span>tests<span class="token punctuation">[</span><span class="token string">"value"</span><span class="token punctuation">]</span> <span class="token operator">=</span> responseBody<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">"test_value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//检测JSON中的某个值是否等于预期的值</span><span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>responseBody<span class="token punctuation">)</span><span class="token punctuation">;</span>tests<span class="token punctuation">[</span><span class="token string">"value2"</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">.</span>value <span class="token operator">===</span> <span class="token number">100</span><span class="token punctuation">;</span>tests<span class="token punctuation">[</span><span class="token string">"value3"</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">.</span>programs<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token comment">//转换XML body为JSON对象</span><span class="token keyword">var</span> jsonObject <span class="token operator">=</span> <span class="token function">xml2Json</span><span class="token punctuation">(</span>responseBody<span class="token punctuation">)</span><span class="token punctuation">;</span>tests<span class="token punctuation">[</span><span class="token string">"value4"</span><span class="token punctuation">]</span> <span class="token operator">=</span> responseBody <span class="token operator">===</span> <span class="token string">"response_body_string"</span><span class="token punctuation">;</span><span class="token comment">//测试response Headers中的某个元素是否存在(如:Content-Type),不区分大小写</span>tests<span class="token punctuation">[</span><span class="token string">"value5"</span><span class="token punctuation">]</span> <span class="token operator">=</span> postman<span class="token punctuation">.</span><span class="token function">getResponseHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//测试response Headers中的某个元素是否存在(如:Content-Type),区分大小写</span>tests<span class="token punctuation">[</span><span class="token string">"value6"</span><span class="token punctuation">]</span> <span class="token operator">=</span> responseHeaders<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//验证Status code的值</span>tests<span class="token punctuation">[</span><span class="token string">"value7"</span><span class="token punctuation">]</span> <span class="token operator">=</span> responseCode<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">;</span><span class="token comment">//验证Response time是否小于某个值</span>tests<span class="token punctuation">[</span><span class="token string">"value8"</span><span class="token punctuation">]</span> <span class="token operator">=</span> responseTime <span class="token operator">&lt;</span> <span class="token number">200</span><span class="token punctuation">;</span><span class="token comment">//name是否包含某个值</span>tests<span class="token punctuation">[</span><span class="token string">"value9"</span><span class="token punctuation">]</span> <span class="token operator">=</span> responseCode<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">"Created"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//POST请求的状态响应码是否是某个值</span>tests<span class="token punctuation">[</span><span class="token string">"value10"</span><span class="token punctuation">]</span> <span class="token operator">=</span> response<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="附录二：新旧版本测试模板（通用断言语句）："><a href="#附录二：新旧版本测试模板（通用断言语句）：" class="headerlink" title="附录二：新旧版本测试模板（通用断言语句）："></a>附录二：新旧版本测试模板（通用断言语句）：</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//校验响应状态码</span>pm<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"Status is 200"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    pm<span class="token punctuation">.</span>response<span class="token punctuation">.</span>to<span class="token punctuation">.</span>have<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//断言状态码200-202区间</span>pm<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"Successful GET request"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   pm<span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span>pm<span class="token punctuation">.</span>response<span class="token punctuation">.</span>code<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>be<span class="token punctuation">.</span><span class="token function">oneOf</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">202</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//校验接口返回状态</span>pm<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"接口返回状态status "</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> jsonData <span class="token operator">=</span> pm<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> status1 <span class="token operator">=</span>jsonData<span class="token punctuation">.</span>status    pm<span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span>status1<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span><span class="token function">eql</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"status1 is :"</span> <span class="token operator">+</span>status1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//断言响应时间小于200ms</span>pm<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"Response time is less than 300ms"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   pm<span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span>pm<span class="token punctuation">.</span>response<span class="token punctuation">.</span>responseTime<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>be<span class="token punctuation">.</span><span class="token function">below</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//断言响应中包含某个字符串</span>pm<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"Body matches string"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   pm<span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span>pm<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span><span class="token function">include</span><span class="token punctuation">(</span><span class="token string">"FRM"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//断言响应中的字段等于某个值</span>pm<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"message test"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">var</span> jsonData <span class="token operator">=</span> pm<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   pm<span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span>jsonData<span class="token punctuation">[</span><span class="token string">"message"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span><span class="token function">eql</span><span class="token punctuation">(</span><span class="token string">"请求成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//断言响应中的字段不等于某个值</span><span class="token keyword">var</span> jsonData <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>responseBody<span class="token punctuation">)</span><span class="token punctuation">;</span>tests<span class="token punctuation">[</span><span class="token string">"message不为failed"</span><span class="token punctuation">]</span> <span class="token operator">=</span> jsonData<span class="token punctuation">[</span><span class="token string">"message"</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">"failed"</span><span class="token punctuation">;</span><span class="token comment">//断言响应中"list"的字段长度</span>pm<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"data list test"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> jsonData <span class="token operator">=</span> pm<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pm<span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span>jsonData<span class="token punctuation">[</span><span class="token string">"data"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span><span class="token function">eql</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//断言响应中"list 0的"的time字段的值</span>pm<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"data list 0 test"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">var</span> jsonData <span class="token operator">=</span> pm<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   pm<span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span>jsonData<span class="token punctuation">[</span><span class="token string">"data"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"time"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span><span class="token function">eql</span><span class="token punctuation">(</span><span class="token string">"2018-11-28 17:27:41"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//测试解析json数据</span>pm<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"Your test name"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> jsonData <span class="token operator">=</span> pm<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pm<span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span>jsonData<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span><span class="token function">eql</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//检查header</span>pm<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"Content-Type is present"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    pm<span class="token punctuation">.</span>response<span class="token punctuation">.</span>to<span class="token punctuation">.</span>have<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//测试是否等于某个字段</span>pm<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"Body is correct"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    pm<span class="token punctuation">.</span>response<span class="token punctuation">.</span>to<span class="token punctuation">.</span>have<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token string">"response_body_string"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//请求时间校验</span>pm<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"Response time is less than 200ms"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    pm<span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span>pm<span class="token punctuation">.</span>response<span class="token punctuation">.</span>responseTime<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>be<span class="token punctuation">.</span><span class="token function">below</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//返回值在某个区间</span>pm<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"Status code name has string"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    pm<span class="token punctuation">.</span>response<span class="token punctuation">.</span>to<span class="token punctuation">.</span>have<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token string">"Created"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//使用json schema 校验结果</span><span class="token keyword">var</span> schema <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token string">"items"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token string">"type"</span><span class="token operator">:</span> <span class="token string">"boolean"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> data1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> data2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">]</span><span class="token punctuation">;</span>pm<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'Schema is valid'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  pm<span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span>tv4<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span>data1<span class="token punctuation">,</span> schema<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>be<span class="token punctuation">.</span><span class="token boolean">true</span><span class="token punctuation">;</span>  pm<span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span>tv4<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span>data2<span class="token punctuation">,</span> schema<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>be<span class="token punctuation">.</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">学会用Postman对REST API接口进行自动化测试</summary>
    
    
    
    <category term="自动化测试" scheme="http://tangmenjue.top/categories/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="自动化测试" scheme="http://tangmenjue.top/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>CSS3动画详解</title>
    <link href="http://tangmenjue.top/2023/12/25/CSS3%E5%8A%A8%E7%94%BB%E8%AF%A6%E8%A7%A3/"/>
    <id>http://tangmenjue.top/2023/12/25/CSS3%E5%8A%A8%E7%94%BB%E8%AF%A6%E8%A7%A3/</id>
    <published>2023-12-25T02:24:47.000Z</published>
    <updated>2023-12-25T02:24:47.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>css中有两种形式实现动画效果：过渡动画<code>transition</code>和自定义动画<code>animation</code>。其中，animation动画可以循环多次执行，而过渡动画transition只执行一遍。</p><h1 id="transition"><a href="#transition" class="headerlink" title="transition"></a>transition</h1><p>若通过用户的交互直接改变css样式，呈现的形式是立即转变。若希望这个变化是有过渡效果的，便需要使用到过渡动画<code>transition</code>。使用transition的例子如下：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;    &lt;button @click&#x3D;&quot;toggleVisibility&quot;&gt;切换元素&lt;&#x2F;button&gt;    &lt;transition name&#x3D;&quot;fade&quot;&gt;      &lt;div v-if&#x3D;&quot;isVisible&quot; key&#x3D;&quot;myElement&quot; class&#x3D;&quot;fade-element&quot;&gt;        这是一个会淡入淡出的元素      &lt;&#x2F;div&gt;    &lt;&#x2F;transition&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;export default &#123;  data() &#123;    return &#123;      isVisible: true,    &#125;;  &#125;,  methods: &#123;    toggleVisibility() &#123;      this.isVisible &#x3D; !this.isVisible;    &#125;,  &#125;,&#125;;&lt;&#x2F;script&gt;&lt;style&gt;.fade-enter-active, .fade-leave-active &#123;  transition: opacity 0.5s;&#125;.fade-enter, .fade-leave-to &#123;  opacity: 0;&#125;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="transition简写方式"><a href="#transition简写方式" class="headerlink" title="transition简写方式"></a>transition简写方式</h2><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">transition</span><span class="token punctuation">:</span> 使用过渡效果的属性名称  过渡时间 过渡方式<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="常见属性"><a href="#常见属性" class="headerlink" title="常见属性"></a>常见属性</h2><h3 id="transition-property：指定使用过渡效果的css属性"><a href="#transition-property：指定使用过渡效果的css属性" class="headerlink" title="transition-property：指定使用过渡效果的css属性"></a>transition-property：指定使用过渡效果的css属性</h3><p>默认值为all，即<strong>所有能够被transition支持的属性都会有过渡效果</strong>。在实际使用时最好<strong>指定具体生效的属性</strong>，如只改变字体大小便设置为<code>transition-property：font-size</code>。</p><p><strong>目前transition不支持的过渡项有：<code>z-index</code>、<code>display</code></strong>。</p><h3 id="transition-duration：动画过渡时间"><a href="#transition-duration：动画过渡时间" class="headerlink" title="transition-duration：动画过渡时间"></a>transition-duration：动画过渡时间</h3><p>定义动画过渡时间，<strong>默认为0秒</strong></p><h3 id="transition-timing-function：动画过渡方式"><a href="#transition-timing-function：动画过渡方式" class="headerlink" title="transition-timing-function：动画过渡方式"></a>transition-timing-function：动画过渡方式</h3><p>定义动画的事件函数，控制动画速度，可以配置动画随时间变化的运动速率和轨迹。</p><p>可选值：</p><ul><li>linear：动画的速度从头到尾都是相同的</li><li>ease（缓解）：默认是动画从低速开始，然后加快，在结束前变慢</li><li>ease-in：动画以低速开始</li><li>ease-out：动画以低速结束</li><li>ease-in-out：动画以低速开始和结束</li><li>cubic-bezier(n,n,n,n)：贝塞尔曲线（自定义数组），可到<a href="https://cubic-bezier.com/#.17,.67,.83,.67">网站 cubic-bezier.com</a>进行可视化配置</li></ul><h3 id="transition-delay：-动画延迟时间"><a href="#transition-delay：-动画延迟时间" class="headerlink" title="transition-delay： 动画延迟时间"></a><strong>transition-delay：</strong> 动画延迟时间</h3><p>设置动画延时时间，单位为秒。</p><p>若想要立即触发动画，只在恢复时延迟过渡，可以在动画触发时重新设置<code>transition-delay：0s</code>。这样动画一旦触发就会应用对应的样式表，动画执行完毕后延时0秒恢复原样式。</p><p>当同时使用多个动画时，可依次定义每个动画的延迟执行时间，依次来区分每一个动画。</p><h3 id="多属性累加"><a href="#多属性累加" class="headerlink" title="多属性累加"></a>多属性累加</h3><p>需要对每个属性的过渡效果分别设置时，可以使用逗号<code>,</code>来分隔开。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">transition-property</span><span class="token punctuation">:</span> width<span class="token punctuation">,</span> heitht<span class="token punctuation">,</span> color <span class="token punctuation">;</span><span class="token property">trnasition-duration</span><span class="token punctuation">:</span> 1s<span class="token punctuation">,</span> 1.5s<span class="token punctuation">,</span> 2s <span class="token punctuation">;</span><span class="token property">transition-timing-function</span><span class="token punctuation">:</span> ease<span class="token punctuation">,</span> linear<span class="token punctuation">,</span> ease-in-out <span class="token punctuation">;</span><span class="token property">transition-delay</span><span class="token punctuation">:</span> 0s<span class="token punctuation">,</span> 1s<span class="token punctuation">,</span> 0s <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>以上代码也可以使用<strong>简写方式</strong>来分隔，如：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">transition</span><span class="token punctuation">:</span> width 1s ease <span class="token punctuation">,</span>heitht 1.5s linear 1s<span class="token punctuation">,</span> color 2s ease-in-out <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="animation"><a href="#animation" class="headerlink" title="animation"></a>animation</h1><p>自定义动画通过<code>@keyframes</code>来设置关键帧动画。可以对每一帧动画进行设置动画名称、时长、缓动函数、循环函数等信息。其语法如下：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@keyframes</span> animationName</span> <span class="token punctuation">&#123;</span>  <span class="token selector">0%</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/* 样式定义 */</span>    <span class="token property">width</span><span class="token punctuation">:</span>50px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span>50px<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>  <span class="token selector">50%</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/* 样式定义 */</span>    <span class="token property">width</span><span class="token punctuation">:</span>100px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span>100px<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>  <span class="token selector">100%</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/* 样式定义 */</span>    <span class="token property">width</span><span class="token punctuation">:</span>50px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span>50px<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 应用动画 */</span><span class="token selector">.element</span> <span class="token punctuation">&#123;</span>  <span class="token property">animation</span><span class="token punctuation">:</span> animationName 3s ease-in-out infinite<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，使用百分比来<code>%</code>指定变化时的状态，<code>0%</code>和<code>100%</code>代表首尾帧，也可分别使用<code>from</code>和<code>to</code>来替代。</p><p><strong>注意</strong>：若自定义<strong>动画没有自定义首尾帧</strong>，首尾帧将会应用<strong>元素原有的样式</strong>。</p><p>例如：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@keyframes</span> animationName</span> <span class="token punctuation">&#123;</span>  <span class="token selector">from</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/* 样式定义 */</span>    <span class="token property">width</span><span class="token punctuation">:</span>50px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span>50px<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">50%</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/* 样式定义 */</span>    <span class="token property">width</span><span class="token punctuation">:</span>100px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span>100px<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>  <span class="token selector">to</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/* 样式定义 */</span>    <span class="token property">width</span><span class="token punctuation">:</span>50px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span>50px<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 将动画应用到元素上 */</span><span class="token selector">.element</span> <span class="token punctuation">&#123;</span>  <span class="token property">animation</span><span class="token punctuation">:</span> animationName 3s ease-in-out infinite<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="animation简写方式"><a href="#animation简写方式" class="headerlink" title="animation简写方式"></a>animation简写方式</h2><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">animation</span><span class="token punctuation">:</span> 动画持续时间  延迟时间 执行关键帧名称 运动方式 循环次数 结束状态 动画执行顺序<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>最简方式：</strong>（其中执行时间和延迟时间顺序不可调整）</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">animation</span><span class="token punctuation">:</span> 动画执行时间 执行关键帧名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="常见属性-1"><a href="#常见属性-1" class="headerlink" title="常见属性"></a>常见属性</h2><h3 id="animation-name-指定使用的-keyframes-名称"><a href="#animation-name-指定使用的-keyframes-名称" class="headerlink" title="animation-name:指定使用的 @keyframes 名称"></a>animation-name:指定使用的 <code>@keyframes</code> 名称</h3><p>若元素想要使用对应名称的动画，则需要配置animation-name。</p><h3 id="animation-duration：-动画持续时间"><a href="#animation-duration：-动画持续时间" class="headerlink" title="animation-duration： 动画持续时间"></a><strong>animation-duration：</strong> 动画持续时间</h3><p>定义动画持续时间，<strong>默认为0秒</strong></p><h3 id="animation-iteration-count：-动画循环次数"><a href="#animation-iteration-count：-动画循环次数" class="headerlink" title="animation-iteration-count： 动画循环次数"></a><strong>animation-iteration-count：</strong> 动画循环次数</h3><p>定义动画迭代次数/执行次数，<strong>默认为1次</strong></p><h3 id="animation-timing-function：-动画运动方式"><a href="#animation-timing-function：-动画运动方式" class="headerlink" title="animation-timing-function： 动画运动方式"></a><strong>animation-timing-function：</strong> 动画运动方式</h3><p>定义动画的缓动函数，控制动画速度，可以配置动画随时间变化的运动速率和轨迹。</p><p>可选值：</p><ul><li>linear：动画的速度从头到尾都是相同的</li><li>ease（缓解）：默认是动画从低速开始，然后加快，在结束前变慢</li><li>ease-in：动画以低速开始</li><li>ease-out：动画以低速结束</li><li>ease-in-out：动画以低速开始和结束</li><li>cubic-bezier(n,n,n,n)：贝塞尔曲线（自定义数组），可到<a href="https://cubic-bezier.com/#.17,.67,.83,.67">网站 cubic-bezier.com</a>进行可视化配置</li></ul><h3 id="animation-delay：-动画延迟时间"><a href="#animation-delay：-动画延迟时间" class="headerlink" title="animation-delay： 动画延迟时间"></a><strong>animation-delay：</strong> 动画延迟时间</h3><p>设置动画延时时间，单位为秒。</p><p>当同时使用多个动画时，可依次定义每个动画的延迟执行时间，依次来区分每一个动画。</p><h3 id="animation-direction：-动画执行顺序（播放方向）"><a href="#animation-direction：-动画执行顺序（播放方向）" class="headerlink" title="animation-direction： 动画执行顺序（播放方向）"></a><strong>animation-direction：</strong> 动画执行顺序（播放方向）</h3><p>设置动画执行的方向。</p><p>可选值：</p><ul><li>normal：默认值，动画按正常播放</li><li>reverse：动画反向播放</li><li>alternate(交替的)：动画正反（正向-&gt;反向）交替执行</li><li>alternate-reverse：动画反正（反向-&gt;正向）交替执行</li><li>inherit：从父元素继承该属性</li></ul><h3 id="animation-fill-mode：动画结束状态"><a href="#animation-fill-mode：动画结束状态" class="headerlink" title="animation-fill-mode：动画结束状态"></a>animation-fill-mode：动画结束状态</h3><p>设置动画的填充模式</p><p>可选值：</p><ul><li>none：默认值，动画在动画执行前后，不会应用任何样式到目标元素。</li><li>forwards：在动画结束后（<strong>由 animation-iteration-count 决定</strong>），目标元素将保持应用<strong>最后帧</strong>动画。</li><li>backwards：在动画结束后（<strong>由 animation-iteration-count 决定</strong>），目标元素将保持应用<strong>起始帧</strong>动画。</li></ul><h3 id="animation-play-state：动画执行状态"><a href="#animation-play-state：动画执行状态" class="headerlink" title="animation-play-state：动画执行状态"></a>animation-play-state：动画执行状态</h3><p>设置动画的执行状态</p><p>可选值：</p><ul><li>running：允许</li><li>paused：暂停。动画将停止执行</li></ul><h3 id="多动画累加"><a href="#多动画累加" class="headerlink" title="多动画累加"></a>多动画累加</h3><p>若元素应用多个动画时，可以通过给animation属性分别不同值来分别控制各个动画的属性。各个值之间使用逗号<code>,</code>来分隔开。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">animation-name</span><span class="token punctuation">:</span> bgcolor<span class="token punctuation">,</span> bodera<span class="token punctuation">,</span> rotat<span class="token punctuation">;</span><span class="token property">animation-duration</span><span class="token punctuation">:</span> 2s<span class="token punctuation">,</span> 2s<span class="token punctuation">,</span> 3s<span class="token punctuation">;</span><span class="token property">animation-iteration-count</span><span class="token punctuation">:</span> 2<span class="token punctuation">,</span> 2<span class="token punctuation">,</span> 1<span class="token punctuation">;</span><span class="token property">animation-direction</span><span class="token punctuation">:</span> reverse<span class="token punctuation">,</span> normal<span class="token punctuation">,</span> normal<span class="token punctuation">;</span><span class="token property">animation-fill-mode</span><span class="token punctuation">:</span> forwards<span class="token punctuation">,</span> forwards<span class="token punctuation">,</span> forwards<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>应用多个动画时，所有动画是并发执行的，因此<strong>计算动画结束事件只需要知道执行时间最长的动画</strong>即可，<strong>执行时间 x 单次执行时间=动画总时间</strong>。因此上述代码的最大时间=max(2x2,2x2,3x1=4s。</p><h2 id="animation用法示例"><a href="#animation用法示例" class="headerlink" title="animation用法示例"></a>animation用法示例</h2><p>播放时长为2秒的浮动动画的Vue代码示例如下：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">&lt;template>  &lt;div :class="&#123; 'custom-animation': isAnimating &#125;">&lt;/div>&lt;/template>&lt;script>export default</span> <span class="token punctuation">&#123;</span>  <span class="token selector">data()</span> <span class="token punctuation">&#123;</span>    <span class="token selector">return</span> <span class="token punctuation">&#123;</span>      <span class="token property">isAnimating</span><span class="token punctuation">:</span> true<span class="token punctuation">,</span> // 根据需要设置是否启用动画    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>&lt;/script>&lt;style><span class="token atrule"><span class="token rule">@keyframes</span> customAnimation</span> <span class="token punctuation">&#123;</span>  <span class="token selector">0%, 100%</span> <span class="token punctuation">&#123;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">50%</span> <span class="token punctuation">&#123;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-30px<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token selector">.custom-animation</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>  <span class="token property">animation</span><span class="token punctuation">:</span> customAnimation 2s ease-in-out infinite<span class="token punctuation">;</span> <span class="token comment">/* 设置动画名称、时长、缓动函数和循环次数 */</span><span class="token punctuation">&#125;</span>&lt;/style><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="常见错误及解决方案"><a href="#常见错误及解决方案" class="headerlink" title="常见错误及解决方案"></a>常见错误及解决方案</h2><h3 id="keyframes不能实现突变的状态变化"><a href="#keyframes不能实现突变的状态变化" class="headerlink" title="@keyframes不能实现突变的状态变化"></a><code>@keyframes</code>不能实现突变的状态变化</h3><p><code>@keyframes</code>是将样式从一个状态慢慢转变为另一个状态，因此不能实现突变的状态，例如：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">div</span> <span class="token punctuation">&#123;</span>    <span class="token property">animation</span><span class="token punctuation">:</span> appear 2s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token atrule"><span class="token rule">@keyframes</span> appear</span> <span class="token punctuation">&#123;</span>    <span class="token selector">from</span> <span class="token punctuation">&#123;</span> <span class="token property">display</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token selector">to</span>   <span class="token punctuation">&#123;</span> <span class="token property">display</span><span class="token punctuation">:</span>block<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述代码中<code>display:none;</code>是将div不占空间地隐藏，而<code>display:block;</code>是显示div并占用空间。这里从<code>display:none;</code>到<code>display:block;</code>的状态是突变的，因此<code>@keyframes</code>无法实现上述的状态变化</p><p><strong>替代方法：</strong></p><ul><li><p>占据空间的隐藏：使用visibility来代替display。</p>  <pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">div</span> <span class="token punctuation">&#123;</span>    <span class="token property">animation</span><span class="token punctuation">:</span> appear 2s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token atrule"><span class="token rule">@keyframes</span> appear</span> <span class="token punctuation">&#123;</span>    <span class="token selector">from</span> <span class="token punctuation">&#123;</span>         <span class="token property">opacity</span><span class="token punctuation">:</span>1<span class="token punctuation">;</span>        <span class="token property">visibility</span><span class="token punctuation">:</span>visible<span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>    <span class="token selector">to</span>   <span class="token punctuation">&#123;</span>         <span class="token property">opacity</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>        <span class="token property">visibility</span><span class="token punctuation">:</span>hidden<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>不占据空间地隐藏：使用绝对定位+visibility组合，其中绝对定位使元素脱离文档流，搭配z-index层级关系来使他出现或消失。</p>  <pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">div</span> <span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span>absolute<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>    <span class="token property">animation</span><span class="token punctuation">:</span> appear 2s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token atrule"><span class="token rule">@keyframes</span> appear</span> <span class="token punctuation">&#123;</span>    <span class="token selector">from</span> <span class="token punctuation">&#123;</span>         <span class="token property">opacity</span><span class="token punctuation">:</span>1<span class="token punctuation">;</span>        <span class="token property">visibility</span><span class="token punctuation">:</span>visible<span class="token punctuation">;</span>         <span class="token property">z-index</span><span class="token punctuation">:</span>10<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">to</span>   <span class="token punctuation">&#123;</span>         <span class="token property">opacity</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>        <span class="token property">visibility</span><span class="token punctuation">:</span>hidden<span class="token punctuation">;</span>         <span class="token property">z-index</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>消失前占据空间但消失后不占空间：使用setTimeout和visibility组合。</p>  <pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;    &lt;button @click&#x3D;&quot;hideElement&quot;&gt;隐藏元素&lt;&#x2F;button&gt;    &lt;div :class&#x3D;&quot;&#123; &#39;fade-out&#39;: isVisible, &#39;hidden&#39;: !isVisible &#125;&quot;&gt;      这是一个会消失的元素    &lt;&#x2F;div&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;export default &#123;  data() &#123;    return &#123;      isVisible: true,    &#125;;  &#125;,  methods: &#123;    hideElement() &#123;      this.isVisible &#x3D; false;      &#x2F;&#x2F; 使用 setTimeout 设置一定的延迟，确保元素在消失前渲染一段时间      setTimeout(() &#x3D;&gt; &#123;        this.isVisible &#x3D; true;      &#125;, 500); &#x2F;&#x2F; 设置的时间可以根据需要调整    &#125;,  &#125;,&#125;;&lt;&#x2F;script&gt;&lt;style&gt;.fade-out &#123;  visibility: visible;  opacity: 1;  transition: opacity 0.5s ease-in-out;&#125;.hidden &#123;  visibility: hidden;  opacity: 0;&#125;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="keyframes会增添-覆盖属性"><a href="#keyframes会增添-覆盖属性" class="headerlink" title="@keyframes会增添/覆盖属性"></a><code>@keyframes</code>会增添/覆盖属性</h3><p>以下为覆盖属性的例子：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/** div 在2s内下移200px*/</span><span class="token selector">div</span> <span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span>absolute<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span>0px<span class="token punctuation">;</span>    <span class="token property">animation</span><span class="token punctuation">:</span> move 2s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token atrule"><span class="token rule">@keyframes</span> move</span> <span class="token punctuation">&#123;</span>    <span class="token selector">from</span> <span class="token punctuation">&#123;</span> <span class="token property">top</span><span class="token punctuation">:</span>20px<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token selector">to</span>   <span class="token punctuation">&#123;</span> <span class="token property">top</span><span class="token punctuation">:</span>200px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在例子里，div的初始状态是 <code>top:0px;</code>，在动画启动前，<code>@keyframes</code>先用<code>top:20px;</code>覆盖原属性，然后再开始播放动画</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h1&gt;&lt;p&gt;css中有两种形式实现动画效果：过渡动画&lt;code&gt;transition&lt;/code&gt;和自定义动画&lt;code&gt;animati</summary>
      
    
    
    
    <category term="CSS3" scheme="http://tangmenjue.top/categories/CSS3/"/>
    
    <category term="大屏设计" scheme="http://tangmenjue.top/categories/%E5%A4%A7%E5%B1%8F%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="CSS3" scheme="http://tangmenjue.top/tags/CSS3/"/>
    
  </entry>
  
  <entry>
    <title>可视化大屏设计：制作不变形的图片边框</title>
    <link href="http://tangmenjue.top/2023/12/25/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F%E8%AE%BE%E8%AE%A1%EF%BC%9A%E5%88%B6%E4%BD%9C%E4%B8%8D%E5%8F%98%E5%BD%A2%E7%9A%84%E5%9B%BE%E7%89%87%E8%BE%B9%E6%A1%86/"/>
    <id>http://tangmenjue.top/2023/12/25/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F%E8%AE%BE%E8%AE%A1%EF%BC%9A%E5%88%B6%E4%BD%9C%E4%B8%8D%E5%8F%98%E5%BD%A2%E7%9A%84%E5%9B%BE%E7%89%87%E8%BE%B9%E6%A1%86/</id>
    <published>2023-12-25T02:24:47.000Z</published>
    <updated>2023-12-25T02:24:47.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在制作可视化大屏的过程中，边框制作是不可避免的。根据制作方法不同，可以把边框为两种：一种是将图片作为背景，主视觉效果在图片里体现，这里将其称之为图片边框；另一种是用纯css进行制作，主视觉效果依赖于css动画来体现。</p><p>在制作图片边框时，曾遇到这样的问题：图片作为背景插入到容器后，当容器大小超过图片大小时，会引起图片的变形。</p><p>比如有以下图片，当容器大小没有超过图片大小时，边框是完整没有拉伸的：<img src="/2023/12/25/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F%E8%AE%BE%E8%AE%A1%EF%BC%9A%E5%88%B6%E4%BD%9C%E4%B8%8D%E5%8F%98%E5%BD%A2%E7%9A%84%E5%9B%BE%E7%89%87%E8%BE%B9%E6%A1%86/1.png" alt></p><p>当容器的高度超过图片的高度时，图片会被拉伸变形：<img src="/2023/12/25/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F%E8%AE%BE%E8%AE%A1%EF%BC%9A%E5%88%B6%E4%BD%9C%E4%B8%8D%E5%8F%98%E5%BD%A2%E7%9A%84%E5%9B%BE%E7%89%87%E8%BE%B9%E6%A1%86/2.png" alt></p><p>而利用点九图，可以解决图片拉伸变形的问题</p><h1 id="点九图"><a href="#点九图" class="headerlink" title="点九图"></a>点九图</h1><p>点九图，是Android开发中会用到的一种特殊切图格式。</p>]]></content>
    
    
    <summary type="html">利用点九图原理切图，以达到拉伸图片部分区域，其他部分保持比例不变形的效果</summary>
    
    
    
    <category term="CSS3" scheme="http://tangmenjue.top/categories/CSS3/"/>
    
    <category term="大屏设计" scheme="http://tangmenjue.top/categories/%E5%A4%A7%E5%B1%8F%E8%AE%BE%E8%AE%A1/"/>
    
    <category term="可视化" scheme="http://tangmenjue.top/categories/%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
    
    <category term="CSS3" scheme="http://tangmenjue.top/tags/CSS3/"/>
    
    <category term="可视化" scheme="http://tangmenjue.top/tags/%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
    <category term="大屏设计" scheme="http://tangmenjue.top/tags/%E5%A4%A7%E5%B1%8F%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>Lottie动效设计指南：（一）Bodymovin插件的安装及初步使用</title>
    <link href="http://tangmenjue.top/2023/11/30/Lottie%E5%8A%A8%E6%95%88%E8%AE%BE%E8%AE%A1%E6%8C%87%E5%8D%97%EF%BC%9A%EF%BC%88%E4%B8%80%EF%BC%89Bodymovin%E6%8F%92%E4%BB%B6%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E5%88%9D%E6%AD%A5%E4%BD%BF%E7%94%A8/"/>
    <id>http://tangmenjue.top/2023/11/30/Lottie%E5%8A%A8%E6%95%88%E8%AE%BE%E8%AE%A1%E6%8C%87%E5%8D%97%EF%BC%9A%EF%BC%88%E4%B8%80%EF%BC%89Bodymovin%E6%8F%92%E4%BB%B6%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E5%88%9D%E6%AD%A5%E4%BD%BF%E7%94%A8/</id>
    <published>2023-11-30T09:14:32.000Z</published>
    <updated>2023-11-30T09:14:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Lottie是什么"><a href="#Lottie是什么" class="headerlink" title="Lottie是什么"></a>Lottie是什么</h1><p>Lottie是Airbnb开源的一个动画渲染库，同时支持Android、iOS、React Native平台。Lottie支持渲染播放AE动画。通过AE插件bodymovie导出json文件作为动画数据。Airbnb的开发者打造了一个社区<a href="https://github.com/lottiefiles">LottieFiles · GitHub</a>来与设计师、开发者进行交流。</p><p><strong>Lottie应用场景与原理</strong></p><ul><li>loading动画</li><li>动态图标</li><li>加载动画</li><li>动态banner</li></ul><p><strong>Lottie支持的AE属性</strong></p><p>Lottie虽然能够满足多种场景的需要，但并非支持所有的AE效果。因此在设计动效时，需要考虑该效果是否被Lottie支持。否则会导致出错或所使用的效果无效。<img src="/2023/11/30/Lottie%E5%8A%A8%E6%95%88%E8%AE%BE%E8%AE%A1%E6%8C%87%E5%8D%97%EF%BC%9A%EF%BC%88%E4%B8%80%EF%BC%89Bodymovin%E6%8F%92%E4%BB%B6%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E5%88%9D%E6%AD%A5%E4%BD%BF%E7%94%A8/1.webp" alt></p><h1 id="Lottie动效制作准备"><a href="#Lottie动效制作准备" class="headerlink" title="Lottie动效制作准备"></a>Lottie动效制作准备</h1><h2 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h2><ul><li><p>下载AE 2020，从本文中下载的AE 2020直接按提示安装即可直接使用。下载链接如下：<a href="https://pan.baidu.com/s/1dKbqVgQXFqbwTqYr-j0tzg?pwd=ke69">Adobe_After_Effects_2020破解版下载</a></p><ul><li>AE全套插件一键安装包，有需要的可以下载。下载链接如下：<a href="https://pan.baidu.com/s/1lfL9rF5ZYNA59UDZZVreIw?pwd=weya">AE 2020 全套插件一键安装包</a></li></ul></li><li><p>下载并安装ZXP Installer软件，用于将ZXP文件安装到AE，下载链接如下：<a href="https://aescripts.com/learn/zxp-installer/">ZXP Installer 官网下载</a></p></li><li><p>下载Bodymovin插件，将动画输出成json文件。该插件版本非常多，由于前端使用的Bodymovin解析包可能无法解析用最新版Bodymovin插件输出的json文件，因此要<strong>注意Bodymovin插件版本和所使用的lottie版本相对应</strong>。插件各版本的地址如下：<a href="https://github.com/airbnb/lottie-web/tags">airbnb/lottie-web</a></p><p>  <strong>寻找Bodymovin插件和所使用的lottie版本对应操作示例</strong></p><p>  比如vue2中使用使用1.2.1版本的<code>lottie-web-vue</code>库来渲染lottie动画，操作如下：</p><ul><li>打开<code>lottie-web-vue</code>库的源代码查看<code>package.json</code>文件中<code>lottie-web</code>的版本号<a href="https://github.com/garbit/lottie-web-vue/blob/v1.2.1/package.json">lottie-web-vue/package.json at v1.2.1</a></li><li>找到<code>lottie-web</code>的版本号为5.7.4。<img src="/2023/11/30/Lottie%E5%8A%A8%E6%95%88%E8%AE%BE%E8%AE%A1%E6%8C%87%E5%8D%97%EF%BC%9A%EF%BC%88%E4%B8%80%EF%BC%89Bodymovin%E6%8F%92%E4%BB%B6%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E5%88%9D%E6%AD%A5%E4%BD%BF%E7%94%A8/2.png" alt></li><li>转到Bodymovin插件下载页面，找到与<code>lottie-web</code>版本号匹配的版本下载<a href="https://github.com/airbnb/lottie-web/releases/tag/v5.7.4">Release v5.7.4 · airbnb/lottie-web · GitHub</a></li></ul></li></ul><h2 id="AE插件安装步骤"><a href="#AE插件安装步骤" class="headerlink" title="AE插件安装步骤"></a>AE插件安装步骤</h2><ul><li><p>Bodymovin插件下载后解压，在解压文件夹的<code>lottie-web-5.7.4\build\extension</code>目录下找到<code>bodymovin.zxp</code>文件，记下文件路径<img src="/2023/11/30/Lottie%E5%8A%A8%E6%95%88%E8%AE%BE%E8%AE%A1%E6%8C%87%E5%8D%97%EF%BC%9A%EF%BC%88%E4%B8%80%EF%BC%89Bodymovin%E6%8F%92%E4%BB%B6%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E5%88%9D%E6%AD%A5%E4%BD%BF%E7%94%A8/5.png" alt></p><ul><li>打开ZXP Installer软件，点击file-open菜单项，通过上述的文件路径选择<code>bodymovin.zxp</code>文件来载入插件包，ZXP installer会自动开始安装。安装完成后的软件主页面如下图所示。<img src="/2023/11/30/Lottie%E5%8A%A8%E6%95%88%E8%AE%BE%E8%AE%A1%E6%8C%87%E5%8D%97%EF%BC%9A%EF%BC%88%E4%B8%80%EF%BC%89Bodymovin%E6%8F%92%E4%BB%B6%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E5%88%9D%E6%AD%A5%E4%BD%BF%E7%94%A8/6.png" alt></li></ul></li><li><p>打开AE，在编辑-首选项-常规-脚本和表达式中选中允许脚本写入文件和访问网络，点击确定。<img src="/2023/11/30/Lottie%E5%8A%A8%E6%95%88%E8%AE%BE%E8%AE%A1%E6%8C%87%E5%8D%97%EF%BC%9A%EF%BC%88%E4%B8%80%EF%BC%89Bodymovin%E6%8F%92%E4%BB%B6%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E5%88%9D%E6%AD%A5%E4%BD%BF%E7%94%A8/7.png" alt></p></li><li>点击窗口-扩展，可以看到导入的插件，点击插件名就能打开指定的插件界面使用插件了。<img src="/2023/11/30/Lottie%E5%8A%A8%E6%95%88%E8%AE%BE%E8%AE%A1%E6%8C%87%E5%8D%97%EF%BC%9A%EF%BC%88%E4%B8%80%EF%BC%89Bodymovin%E6%8F%92%E4%BB%B6%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E5%88%9D%E6%AD%A5%E4%BD%BF%E7%94%A8/8.png" alt><img src="/2023/11/30/Lottie%E5%8A%A8%E6%95%88%E8%AE%BE%E8%AE%A1%E6%8C%87%E5%8D%97%EF%BC%9A%EF%BC%88%E4%B8%80%EF%BC%89Bodymovin%E6%8F%92%E4%BB%B6%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E5%88%9D%E6%AD%A5%E4%BD%BF%E7%94%A8/9.png" alt></li></ul><h1 id="AE插件的初步使用"><a href="#AE插件的初步使用" class="headerlink" title="AE插件的初步使用"></a>AE插件的初步使用</h1><ul><li>在一个新的项目中，新建一个名为<code>test</code>的合成，并制作一段简单的动画：<img src="/2023/11/30/Lottie%E5%8A%A8%E6%95%88%E8%AE%BE%E8%AE%A1%E6%8C%87%E5%8D%97%EF%BC%9A%EF%BC%88%E4%B8%80%EF%BC%89Bodymovin%E6%8F%92%E4%BB%B6%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E5%88%9D%E6%AD%A5%E4%BD%BF%E7%94%A8/10.png" alt></li><li>打开Bodymovin插件窗口，可以发现<code>test</code>出现在了下面的列表中。<img src="/2023/11/30/Lottie%E5%8A%A8%E6%95%88%E8%AE%BE%E8%AE%A1%E6%8C%87%E5%8D%97%EF%BC%9A%EF%BC%88%E4%B8%80%EF%BC%89Bodymovin%E6%8F%92%E4%BB%B6%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E5%88%9D%E6%AD%A5%E4%BD%BF%E7%94%A8/11.png" alt></li><li>选中<code>test</code>，设置好json文件输出位置，点击Render。<img src="/2023/11/30/Lottie%E5%8A%A8%E6%95%88%E8%AE%BE%E8%AE%A1%E6%8C%87%E5%8D%97%EF%BC%9A%EF%BC%88%E4%B8%80%EF%BC%89Bodymovin%E6%8F%92%E4%BB%B6%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E5%88%9D%E6%AD%A5%E4%BD%BF%E7%94%A8/12.png" alt></li><li><p>显示以下界面则表示json文件生成完成，点击红框处的按钮，可以预览json文件导出的动画。<img src="/2023/11/30/Lottie%E5%8A%A8%E6%95%88%E8%AE%BE%E8%AE%A1%E6%8C%87%E5%8D%97%EF%BC%9A%EF%BC%88%E4%B8%80%EF%BC%89Bodymovin%E6%8F%92%E4%BB%B6%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E5%88%9D%E6%AD%A5%E4%BD%BF%E7%94%A8/13.png" alt><img src="/2023/11/30/Lottie%E5%8A%A8%E6%95%88%E8%AE%BE%E8%AE%A1%E6%8C%87%E5%8D%97%EF%BC%9A%EF%BC%88%E4%B8%80%EF%BC%89Bodymovin%E6%8F%92%E4%BB%B6%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E5%88%9D%E6%AD%A5%E4%BD%BF%E7%94%A8/14.png" alt></p></li><li><p>将生成的json复制到vue2项目中即可在vue2项目里使用刚刚制作的Lotttie动画。</p></li></ul>]]></content>
    
    
    <summary type="html">Lottie动效设计指南：（一）Bodymovin插件的安装及初步使用</summary>
    
    
    
    <category term="大屏设计" scheme="http://tangmenjue.top/categories/%E5%A4%A7%E5%B1%8F%E8%AE%BE%E8%AE%A1/"/>
    
    <category term="可视化" scheme="http://tangmenjue.top/categories/%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
    <category term="Lottie" scheme="http://tangmenjue.top/categories/Lottie/"/>
    
    
    <category term="可视化" scheme="http://tangmenjue.top/tags/%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
    <category term="大屏设计" scheme="http://tangmenjue.top/tags/%E5%A4%A7%E5%B1%8F%E8%AE%BE%E8%AE%A1/"/>
    
    <category term="Lottie" scheme="http://tangmenjue.top/tags/Lottie/"/>
    
  </entry>
  
  <entry>
    <title>可视化大屏设计入门指南</title>
    <link href="http://tangmenjue.top/2023/11/29/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F%E8%AE%BE%E8%AE%A1%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/"/>
    <id>http://tangmenjue.top/2023/11/29/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F%E8%AE%BE%E8%AE%A1%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/</id>
    <published>2023-11-29T03:48:30.000Z</published>
    <updated>2023-11-29T03:48:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>数据可视化就是把一些相对复杂、抽象的、看不懂的数据通过可视化的方式，运用图形化的手段清晰有效地将数据信息进行解读和传达，帮助发现其中的规律和特征，挖掘数据背后价值的过程。</p><p>随着行业的发展，可视化大屏大致有以下类别：</p><ul><li>行业可视化（如交通、医疗、金融、军警部队、农业、工厂、化工等）</li><li>智能终端系统类（如定制化终端产品）</li><li>演示demo（如数据演示、展览展示、数据看板）</li><li>可视化分析系统（如交通预警平台、天气监控平台等）</li></ul><p>随着可视化需求的增多，各大厂商也逐渐整合可视化资源来实现低代码平台，国内比较知名的可视化厂商有：光启元（Ray design）、Data V、优诺科技（森工厂）、袋鼠云（Easy V）、数字冰雹、图扑等。他们将一些可视化效果组件化集成在平台，通过拖拉拽就能实现一些不错的效果。</p><p>可视化设计不仅仅是只做完效果图就行的，他是一个结合<strong>硬件设备、UI设计、三维建模、三维渲染、动态设计、数据可视化、图形技术、GIS数据、渲染引擎、交互技术</strong>等综合类的交叉学科。<img src="/2023/11/29/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F%E8%AE%BE%E8%AE%A1%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/1.PNG" alt></p><h1 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h1><h2 id="硬件设备"><a href="#硬件设备" class="headerlink" title="硬件设备"></a>硬件设备</h2><p>了解硬件设备信息是做大屏的开始，先了解物理屏的尺寸、比例、屏幕种类（拼接屏、LED屏）、投影方式等信息，以方便后续的设计工作。</p><p>下图为一些常见的屏幕拼接方式，确认好屏幕的拼接方式便能计算整个大屏的物理分辨率。下图中最后一个屏幕的拼接方式为横向3块、竖向2块屏幕，他们每块屏幕分辨率为1920x1080，那么这块3x2的拼接屏幕尺寸就应该是<code>1920*3x1080*2</code>即5760x2160<img src="/2023/11/29/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F%E8%AE%BE%E8%AE%A1%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/2.PNG" alt></p><h3 id="大屏设计尺寸"><a href="#大屏设计尺寸" class="headerlink" title="大屏设计尺寸"></a>大屏设计尺寸</h3><p>大屏的投射方式大致分为三种：</p><ol><li>电脑屏幕1比1等比例投屏</li><li>通过主机直接输出给拼接屏（常用于一些自定义比例屏幕和分辨率超大的情况下）</li><li>投影仪投射</li></ol><p>由于大屏的物理屏幕分辨率大小不一，因此<strong>设计尺寸是建议按照输出分辨率设计</strong>，采用输出分辨率作为最终的设计尺寸。<strong>针对硬件设备设计</strong>时要关注以下几点：屏幕拼接方式、单屏幕像素及拼接后像素、输出像素等这些决定设计尺寸、内容排布、规避拼接缝等问题。</p><h2 id="GIS数据"><a href="#GIS数据" class="headerlink" title="GIS数据"></a>GIS数据</h2><p>通常应用于参数化建模，比如通过一些地理位置高程数据生成3D模型。</p><p>常见的一些格式有：</p><ul><li>Openstreetmap（多用于生成模型）</li><li>Shapefile（多用于生成模型）</li><li>Geojson（多用于基于Web的映射）</li><li>TIFF（多用于贴图处理）</li></ul><p>常用的工具有：</p><ul><li>Qgis</li><li>Arcgis</li><li>Google mapper</li></ul><h2 id="三维建模"><a href="#三维建模" class="headerlink" title="三维建模"></a>三维建模</h2><p>在可视化设计中，一般会结合生成<strong>参数化模型+定制化手工模型</strong>的方式处理整体效果。这么处理的目的：一是设计上能突出主体，增加画面的层次感；二是在性能上能很好地优化，提高整体性能。</p><p>下图为设计侧到开发侧对接流程：<img src="/2023/11/29/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F%E8%AE%BE%E8%AE%A1%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/3.PNG" alt></p><h2 id="动效设计"><a href="#动效设计" class="headerlink" title="动效设计"></a>动效设计</h2><p>常见的一些动效对接格式为：GIF、MP4、APNG、Lottie、序列帧。<img src="/2023/11/29/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F%E8%AE%BE%E8%AE%A1%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/4.PNG" alt></p><h2 id="图形技术"><a href="#图形技术" class="headerlink" title="图形技术"></a>图形技术</h2><p>图形成像，是由一个个的粒子点生成的画面。<img src="/2023/11/29/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F%E8%AE%BE%E8%AE%A1%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/5.PNG" alt></p><p>下图是由一个50x100的粒子组成的平面，每个粒子都会对应他的xy轴的坐标位置，通过控制粒子的<strong>透明度、大小、颜色、位置、旋转</strong>等参数呈现不同的视觉效果。<img src="/2023/11/29/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F%E8%AE%BE%E8%AE%A1%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/6.JPG" alt></p><p>常见的粒子世界地图就是通过控制粒子黑白X粒子大小叠加出来的，通过一张贴图去控制黑白嘟，海洋是黑色的就不显示粒子，陆地为白色显示白色粒子，最终便呈现了一个粒子地球的效果。<img src="/2023/11/29/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F%E8%AE%BE%E8%AE%A1%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/7.PNG" alt></p><h2 id="渲染引擎的技术架构"><a href="#渲染引擎的技术架构" class="headerlink" title="渲染引擎的技术架构"></a>渲染引擎的技术架构</h2><p>市面上可视化落地都是基于Unity3D、虚拟引擎（UE4）、Ventuz、threejs等工具实现的。它们的底层都是由BS（Browser-Server）和CS（Client-Server）架构组成的。</p><p><strong>BS架构与CS架构特点：</strong></p><ul><li>BS：浏览器/服务器模式，优点是使用便捷、数据实时更新、跨平台。缺点是渲染效果较差、大场景支持差。框架有WebGL。</li><li>CS：客户端/服务器模式，优点是整体渲染视觉效果棒、大场景支持好。缺点是必须安装客户端、对电脑性能要求高、 不同平台需要不同文件。框架有Unreal Engine、Unity3D、Ventuz。</li></ul><h1 id="可视化大屏UI"><a href="#可视化大屏UI" class="headerlink" title="可视化大屏UI"></a>可视化大屏UI</h1><p>大屏UI设计中，需要对大屏的布局、风格、主视觉、信息图表、字体、规范、动效等方面综合考虑，从而推导出设计方案。</p><ul><li><strong>设计前</strong>：需要<strong>充分分析和理解用户需求</strong>，要了解大屏的<strong>展示场景</strong>、设计<strong>分辨率</strong>及大屏的<strong>拼接方法</strong>，要清楚需要<strong>展示的数据具体有哪些内容</strong>，同时探明<strong>每部分数据对实时性的要求</strong>，确定好数据对应的可视化元素后，再考虑<strong>实现的工具与方法</strong>。</li><li><strong>设计中</strong>：<strong>构思布局</strong>时可以在纸上简单画一下。根据业务需求抽取关键性指标，提取主要信息来进行设计的提炼与分析，方便自己找参考。<strong>大屏背景颜色要以深色为主，数据可以采用亮色</strong>，有一定的对比关系，便于业务信息传达。<strong>字体上可以采用系统默认字体，数字可以采用系统默认的等宽字体<code>Monaco</code></strong>。图表选择恰当的展示形式，同时要保证视觉上的统一（分清页面的主次关系，图表的展示切莫设计过度，容易造成抢主体）</li><li>设计后：再次<strong>校验</strong>信息层级、文字大小、图表等各层级间的对比关系是否传达准确并评估技术的实现性。最后开发完成后要拿演示demo去现场测试，看下整体展示效果，测试输出是否有问题，有无拉伸问题，拼接缝与内容有无穿插，完成校验工作后，才算是设计的最终完成。</li></ul><p>下面针对可视化设计中布局、风格、主视觉、信息图表、字体、规范、动效等7个方向进行讲解。</p><h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><p>通过硬件设备信息可以得到可视化的设计尺寸，基于尺寸新建设计画布，第一件事就需考虑页面的整体布局。常见的大屏布局：居中结构、左右结构两种常见的布局形式以常规的16:9模板为例，下面列举的一些常见的布局形式。</p><h3 id="居中结构"><a href="#居中结构" class="headerlink" title="居中结构"></a>居中结构</h3><p><img src="/2023/11/29/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F%E8%AE%BE%E8%AE%A1%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/8.jpg" alt></p><p><img src="/2023/11/29/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F%E8%AE%BE%E8%AE%A1%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/9.jpg" alt></p><p>异形超宽拼接屏幕</p><p><img src="/2023/11/29/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F%E8%AE%BE%E8%AE%A1%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/10.jpg" alt></p><h3 id="左右结构"><a href="#左右结构" class="headerlink" title="左右结构"></a>左右结构</h3><p><img src="/2023/11/29/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F%E8%AE%BE%E8%AE%A1%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/11.jpg" alt><img src="/2023/11/29/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F%E8%AE%BE%E8%AE%A1%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/12.jpg" alt></p><p>布局的原则是主次一定要分明，根据业务需求抽取关键性指标，提取主要信息。可以在纸上大概画一下，然后在软件里具体细化布局。避免次要信息的面积过大、喧宾夺主，影响整体的视觉效果。</p><h2 id="风格"><a href="#风格" class="headerlink" title="风格"></a>风格</h2><p><strong>定义设计风格</strong>：一般会基于业务需求场景去定义几个设计关键词，根据关键词去找一些参考图，推导出贴合业务的设计风格。              </p><p><img src="/2023/11/29/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F%E8%AE%BE%E8%AE%A1%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/13.jpg" alt></p><p>通过调整颜色、装饰细节、主视觉、字体等一些细节点控制区分不同的设计风。以图表举例，只需要调整卡片和标题的装饰，就能展现出不同的设计风格。</p><p><img src="/2023/11/29/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F%E8%AE%BE%E8%AE%A1%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/14.jpg" alt></p><h2 id="主视觉"><a href="#主视觉" class="headerlink" title="主视觉"></a>主视觉</h2><p>主视觉部分大致分为：地球、地图、智慧城市、行业类业务展示等。目前比较容易出效果的都会采用三维模型的处理方式。</p><p><strong>地球：</strong>粒子地球、地球贴图、地球模型。</p><p><img src="/2023/11/29/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F%E8%AE%BE%E8%AE%A1%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/15.gif" alt></p><p><img src="/2023/11/29/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F%E8%AE%BE%E8%AE%A1%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/16.jpg" alt></p><p><strong>地图：</strong>第三方在线地图（百度、高德、腾讯、谷歌）基于地图开发平台进行个性化配置。或者通过地理位置数据建模：如全国和各个省份的轮廓模型。</p><p><img src="/2023/11/29/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F%E8%AE%BE%E8%AE%A1%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/17.jpg" alt></p><p><strong>智慧城市：</strong>GIS参数化生成建模和重点楼宇定制化建模<img src="/2023/11/29/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F%E8%AE%BE%E8%AE%A1%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/18.gif" alt></p><p><strong>行业类：</strong>多数为定制化建模。如工业类、医疗类、能源类、园区、学校、港口、工厂、仓储库房、零售、工程、安防、国防军工等。<img src="/2023/11/29/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F%E8%AE%BE%E8%AE%A1%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/19.jpg" alt></p><h2 id="信息图表"><a href="#信息图表" class="headerlink" title="信息图表"></a>信息图表</h2><p>图表的设计原则是易理解、可实现，能够准确表达数据意图，给用户传达明确信息。下图通过使用常见可分为比较、联系、构成、分布四个维度解释图表的不同属性类别。在做可视化大屏设计时可参照下图，选择对应的数据图表。更详细的图表释义可在这里查看：<a href="https://antv-2018.alipay.com/zh-cn/vis/chart/index.html">图表用法 - AntV (alipay.com)</a></p><p><img src="/2023/11/29/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F%E8%AE%BE%E8%AE%A1%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/20.jpg" alt></p><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p>可视化大屏设计中字体的运用原理跟网页app的逻辑基本一致。在字体选择上会基于业务需求选择对应的字体与设计风格结合。要注意字体有无衬线、字重、字距等。</p><p>大屏设计中，中文字体一般会采用浏览器默认字体（微软雅黑、思源黑体、苹方等）页面中标题会采用特殊字体处理。常用的字体有：优设标题黑、旁门正道标题体、时尚中黑简体、方正正中黑体等。</p><p>英文数字字体推荐：Din、Monaco、DS-Digtal、Bebas、Acens、DS-DIGIB、Roboto等。</p><h3 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h3><p>建立规范的主要目的是：保证设计的一致性、提高开发效率和还原度以方便迭代。可视化设计中规范一般会分为：色彩、文字、图表、标题控件等，跟网页端规范同理。</p><h3 id="动效"><a href="#动效" class="headerlink" title="动效"></a>动效</h3><p>大数据可视化大屏设计少不了动效，动效是可视化重要的组成部分，他能增加观感体验、凸显关键产品内容、强调功能信息关联，帮助用户理解产品、情感化互动。但过分的动效极其容易喧宾夺主，影响用户阅读，反而弱化了数据的展示。</p><p>动效的设计原则如下图所示:</p><p><img src="/2023/11/29/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F%E8%AE%BE%E8%AE%A1%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/21.jpg" alt></p><p>动效应优先满足核心内容、故事线。常见的大屏动效-展示类，用于突出产品核心功能和特点。界面信息按照一定的规律呈现，引导用户的视觉流向。好的大屏设计在数据展示模块上动效最好不要过多，要有一定的主次关系变化。动效也有结合数据变化，考虑极端情况的展示效果，最终输出一套完整的动效方案。</p>]]></content>
    
    
    <summary type="html">可视化大屏设计入门指南</summary>
    
    
    
    <category term="大屏设计" scheme="http://tangmenjue.top/categories/%E5%A4%A7%E5%B1%8F%E8%AE%BE%E8%AE%A1/"/>
    
    <category term="可视化" scheme="http://tangmenjue.top/categories/%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
    
    <category term="可视化" scheme="http://tangmenjue.top/tags/%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
    <category term="大屏设计" scheme="http://tangmenjue.top/tags/%E5%A4%A7%E5%B1%8F%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>在Vue中使用el-editor编辑器</title>
    <link href="http://tangmenjue.top/2023/11/21/%E5%9C%A8Vue%E4%B8%AD%E4%BD%BF%E7%94%A8el-editor%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    <id>http://tangmenjue.top/2023/11/21/%E5%9C%A8Vue%E4%B8%AD%E4%BD%BF%E7%94%A8el-editor%E7%BC%96%E8%BE%91%E5%99%A8/</id>
    <published>2023-11-21T01:11:59.000Z</published>
    <updated>2023-11-21T01:11:59.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>实际项目中，多处使用到富文本编辑器，每次都配置会比较麻烦，故将要用到的功能封装到一起，需要时可直接调用，故发布了el-editor编辑器。</p><h1 id="富文本编辑器v1-0-1"><a href="#富文本编辑器v1-0-1" class="headerlink" title="富文本编辑器v1.0.1"></a>富文本编辑器v1.0.1</h1><p><img src="/2023/11/21/%E5%9C%A8Vue%E4%B8%AD%E4%BD%BF%E7%94%A8el-editor%E7%BC%96%E8%BE%91%E5%99%A8/editor.png" alt></p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul><li>编辑器基于vue-quill-editor和element封装，目前版本仅支持vue2</li><li>与其他编辑器相比，本编辑器支持秀米编辑器、135编辑器样式的粘贴复制</li><li>注意，当前编辑器仅提供前端代码，编辑器默认不转存秀米图表，若需要开启这一功能，需要向<code>handlePic</code>参数传真值<code>true</code>，然后编写一个后端接口来实现秀米图片的转存，接口名默认为<code>editor/get_xiumi_pic</code>，可通过参数<code>picURL</code>自行修改</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="下载组件"><a href="#下载组件" class="headerlink" title="下载组件"></a>下载组件</h3><p>方法一：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">npm install el-editor@1.0.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>方法二：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">yarn add el-editor@1.0.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="下载html文件并放到public目录下"><a href="#下载html文件并放到public目录下" class="headerlink" title="下载html文件并放到public目录下"></a>下载html文件并放到public目录下</h3><p>文件地址：<a href="https://tangjue.lanzouw.com/iLXdy1fgwbja">https://tangjue.lanzouw.com/iLXdy1fgwbja</a></p><h2 id="引入富文本编辑器："><a href="#引入富文本编辑器：" class="headerlink" title="引入富文本编辑器："></a>引入富文本编辑器：</h2><p>在main.js中引入组件：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> editor <span class="token keyword">from</span> <span class="token string">"el-editor"</span><span class="token keyword">import</span> <span class="token string">"../node_modules/el-editor/el-editor.css"</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>editor<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在需要用到的页面直接使用组件：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>quill_editor <span class="token operator">:</span>content<span class="token operator">=</span><span class="token string">"content"</span> ：picURL<span class="token operator">=</span><span class="token string">"editor/get_xiumi_pic"</span><span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>参数详情：</strong></p><div class="table-container"><table><thead><tr><th>参数名称</th><th>参数含义</th><th>默认值</th><th>该参数是否必填</th></tr></thead><tbody><tr><td>content</td><td>编辑器的内容</td><td>null</td><td>是</td></tr><tr><td>disabled</td><td>是否禁用编辑器</td><td>false</td><td>否</td></tr><tr><td>disabledStyle</td><td>设置编辑器被禁用时的样式</td><td>{background: “#f5f7fa”,color: “#c0c4cc”,cursor: “not-allowed”,borderRadius: “4px”,border: “1px solid #dcdfe6”}</td><td>否</td></tr><tr><td>editorStyle</td><td>设置编辑器的样式</td><td>minHeight: ‘180px’,即最小高度180px</td><td>否</td></tr><tr><td>handlePic</td><td>设置是否开启秀米图片转存</td><td>false</td><td>否</td></tr><tr><td>hidetool</td><td>是否隐藏所有的工具栏</td><td>false</td><td>否</td></tr><tr><td>options</td><td>工具栏配置参数，可通过这一参数自定义定制工具栏</td><td>{},为一个空对象</td><td>否</td></tr><tr><td>picURL</td><td>秀米图片转存后端接口路径</td><td>默认路径为”editor/get_xiumi_pic”，接口参数为一个名叫urlList的列表</td><td>否</td></tr><tr><td>placeholder</td><td>编辑器提示输入的文字</td><td>“请输入内容”</td><td>否</td></tr></tbody></table></div><h2 id="展示编辑器输入的内容"><a href="#展示编辑器输入的内容" class="headerlink" title="展示编辑器输入的内容"></a>展示编辑器输入的内容</h2><p>通过v-html可将输入到编辑器中的内容展示出来：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;div v-html&#x3D;&quot;content&quot; class&#x3D;&quot;ql-editor&quot; &gt;&#123;&#123; content &#125;&#125;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">el-editor编辑器是将Vue-quill-editor与秀米、135编辑器集成封装，以便使用</summary>
    
    
    
    <category term="Vue" scheme="http://tangmenjue.top/categories/Vue/"/>
    
    
    <category term="Vue" scheme="http://tangmenjue.top/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue 将组件打包并发布到npm仓库</title>
    <link href="http://tangmenjue.top/2023/11/20/Vue%20%E5%B0%86%E7%BB%84%E4%BB%B6%E6%89%93%E5%8C%85%E5%B9%B6%E5%8F%91%E5%B8%83%E5%88%B0npm%E4%BB%93%E5%BA%93/"/>
    <id>http://tangmenjue.top/2023/11/20/Vue%20%E5%B0%86%E7%BB%84%E4%BB%B6%E6%89%93%E5%8C%85%E5%B9%B6%E5%8F%91%E5%B8%83%E5%88%B0npm%E4%BB%93%E5%BA%93/</id>
    <published>2023-11-20T03:25:39.000Z</published>
    <updated>2023-11-20T03:25:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>在项目中遇到需要反复使用的代码时，通常会将其封装起来以待下一次的调用。若想要在不同项目里也能使用这些代码时，比较难在众多代码中找到需要的代码。而将组件打包并发布到npm库中，只需要记住相应的包名，便可从npm下载直接安装使用。</p><h1 id="全局注册组件"><a href="#全局注册组件" class="headerlink" title="全局注册组件"></a>全局注册组件</h1><ul><li><p>在完成对应组件<code>editor.vue</code>的封装后，在组件存放目录下（这里默认为<code>components</code>)新建一个index.js文件用于将封装好的组件注册为全局组件，内容如下：</p>  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> editor <span class="token keyword">from</span> <span class="token string">'./editor.vue'</span><span class="token keyword">const</span> components <span class="token operator">=</span> <span class="token punctuation">[</span>  editor<span class="token punctuation">]</span><span class="token comment">// 定义 install 方法，接收 Vue 作为参数。如果使用 use 注册插件，则所有的组件都将被注册</span><span class="token keyword">const</span> <span class="token function-variable function">install</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">Vue</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// 遍历注册全局组件</span>  components<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">component</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span>component<span class="token punctuation">.</span>name<span class="token punctuation">,</span> component<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment">// 判断是否是直接引入文件,如果是，就不用调用 Vue.use()</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> window <span class="token operator">!==</span> <span class="token string">'undefined'</span> <span class="token operator">&amp;&amp;</span> window<span class="token punctuation">.</span>Vue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">install</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>Vue<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 导出的对象必须具有 install，才能被 Vue.use() 方法安装</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  install<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  index.js文件存放位置如图所示：<img src="/2023/11/20/Vue%20%E5%B0%86%E7%BB%84%E4%BB%B6%E6%89%93%E5%8C%85%E5%B9%B6%E5%8F%91%E5%B8%83%E5%88%B0npm%E4%BB%93%E5%BA%93/1.png" alt></p></li></ul><h1 id="打包组件"><a href="#打包组件" class="headerlink" title="打包组件"></a>打包组件</h1><ul><li><p>修改项目中的<code>package.json</code>文件<code>scripts</code>属性中的内容，增加一条<code>package</code>属性，配置打包命令：</p>  <pre class="line-numbers language-json" data-language="json"><code class="language-json">&quot;scripts&quot;: &#123;    &quot;serve&quot;: &quot;vue-cli-service serve&quot;,    &quot;build&quot;: &quot;vue-cli-service build&quot;,    &quot;lint&quot;: &quot;vue-cli-service lint&quot;,    &quot;package&quot;: &quot;vue-cli-service build --target lib .&#x2F;src&#x2F;components&#x2F;index.js --name 组件名称 --dest 组件名称&quot;  &#125;,&#x2F;&#x2F; package参数详情&#x2F;&#x2F; 设置--target lib 参数来指定打包的目录&#x2F;&#x2F; 设置--name 参数来指定打包后的文件名字&#x2F;&#x2F; 设置--dest 参数来指定打包后的文件夹名称<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在终端命令行的项目目录处（如<code>F:\el-editor&gt;</code>）执行命令来打包组件：</p>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm run package<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p>​        打包完成后可以看到新生成的文件夹（这里为<code>el-editor</code>）<img src="/2023/11/20/Vue%20%E5%B0%86%E7%BB%84%E4%BB%B6%E6%89%93%E5%8C%85%E5%B9%B6%E5%8F%91%E5%B8%83%E5%88%B0npm%E4%BB%93%E5%BA%93/2.png" alt></p><h1 id="发布到npm"><a href="#发布到npm" class="headerlink" title="发布到npm"></a>发布到npm</h1><ul><li><p>到<a href="https://www.npmjs.com/">npm官网</a>上注册一个账号，记下用户名和密码，若已经有账号可以跳过该步骤</p></li><li><p>终端进入打包后的文件夹（<code>el-editor</code>），执行以下命令来初始化一个<code>package.json</code>文件：</p>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cd el-editornpm init -y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>将npm源设为官方源：</p>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm config set registry&#x3D;https:&#x2F;&#x2F;registry.npmjs.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>输入以下命令添加npm用户，若之前添加过可以跳过该步骤</p>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm adduser&#x2F;&#x2F;这里会让填写用户名和密码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>输入以下命令发布组件包</p>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm publish<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  如果发布失败可能是名字重复了，改名后重新发布即可。</p></li></ul><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ul><li><p>删除npm上的包，需要隔天才能重新用同样的名字发布</p></li><li><p>发布包后要注意组件中静态资源<code>public</code>、<code>assets</code>、<code>public</code>的路径是否正确</p></li><li><p>更新包版本时，可以直接更改版本号，也通过以下命令，将1.0.0版本改为1.0.1版本：</p>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm version patch -m &#39;[patch]&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul>]]></content>
    
    
    <summary type="html">Vue 将组件打包并发布到npm仓库</summary>
    
    
    
    <category term="Vue" scheme="http://tangmenjue.top/categories/Vue/"/>
    
    
    <category term="Vue" scheme="http://tangmenjue.top/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>js文件调用vue内的方法并传值</title>
    <link href="http://tangmenjue.top/2023/11/02/js%E6%96%87%E4%BB%B6%E8%B0%83%E7%94%A8vue%E5%86%85%E7%9A%84%E6%96%B9%E6%B3%95%E5%B9%B6%E4%BC%A0%E5%80%BC/"/>
    <id>http://tangmenjue.top/2023/11/02/js%E6%96%87%E4%BB%B6%E8%B0%83%E7%94%A8vue%E5%86%85%E7%9A%84%E6%96%B9%E6%B3%95%E5%B9%B6%E4%BC%A0%E5%80%BC/</id>
    <published>2023-11-02T03:25:39.000Z</published>
    <updated>2023-11-02T03:25:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>在js文件中编写功能函数时，常常要调用vue文件内的方法并传值，下面记录js传值的方法：</p><ul><li><p>首先在vue页面的<code>mounted</code>模块将要调用的方法注册到window对象上，并引入对应的js文件后：</p>  <pre class="line-numbers language-json" data-language="json"><code class="language-json">mounted()&#123;  window.exampleFunction&#x3D;this.exampleFunction&#125;,method:&#123;    exampleFunction(data)&#123;        console.log(&#39;收到方法调用&#39;)        console.log(data,&#39;data&#39;)    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>然后在该js文件里直接通过window调用vue的方法</p>  <pre class="line-numbers language-json" data-language="json"><code class="language-json">export function exampleJsFunction()&#123;    let data&#x3D;&#39;textData&#39;            window.exampleFunction(data)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>完成上述步骤即可实现在js文件内调用vue内的方法并传值的操作，比在Vue中调用不同组件的方法简单。</p></li></ul>]]></content>
    
    
    <summary type="html">js文件调用vue文件内的方法并传值</summary>
    
    
    
    <category term="Vue" scheme="http://tangmenjue.top/categories/Vue/"/>
    
    <category term="JavaScript" scheme="http://tangmenjue.top/categories/JavaScript/"/>
    
    
    <category term="Vue" scheme="http://tangmenjue.top/tags/Vue/"/>
    
    <category term="JavaScript" scheme="http://tangmenjue.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>python异步多线程下载文件</title>
    <link href="http://tangmenjue.top/2023/11/01/python%E5%BC%82%E6%AD%A5%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/"/>
    <id>http://tangmenjue.top/2023/11/01/python%E5%BC%82%E6%AD%A5%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/</id>
    <published>2023-11-01T02:59:23.000Z</published>
    <updated>2023-11-01T02:59:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>在实际项目中，难免会有短时间下载文件的需要。正常的批量下载文件要等前一个文件下载完成后才进行下一个文件的下载工作，下载速度较慢。而通过异步来下载可以实现多个文件同时下载的多线程操作。下面为异步下载文件的实现方法：</p><ul><li><p>首先需要通过<code>pip install aiohttp</code>下载<code>aiohttp</code>模块。</p></li><li><p>引入相关模块如下：</p>  <pre class="line-numbers language-python" data-language="python"><code class="language-python">import requestsimport aiohttpimport asyncioimport osimport uuidimport configfrom services import dbcfrom utils.response_helper import make_respfrom models.auth import *<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>定义函数<code>batch_download</code>用于批量下载：</p>  <pre class="line-numbers language-python" data-language="python"><code class="language-python">async def batch_download(url_list):  async with aiohttp.ClientSession() as session:    tasks&#x3D;[]    result&#x3D;[]    for i in range(len(url_list)):      tasks.append(save_file(session, url_list[i]))    finished, unfinished &#x3D; await asyncio.wait(tasks)    result&#x3D;[r.result() for r in finished]    return result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>定义函数<code>save_file</code>用于保存文件：</p>  <pre class="line-numbers language-python" data-language="python"><code class="language-python">async def save_file(session,url):  name&#x3D;os.path.basename(url)  path &#x3D; os.path.join(os.path.dirname(os.getcwd()), &#39;test&#39;, &#39;images&#39;) # 拼接文件保存的相对路径  if not os.path.exists(path):        os.mkdir(path)  file&#x3D;await session.get(url)  suffix&#x3D;name[name.rfind(&#39;.&#39;):] # 截取文件后缀  filename &#x3D; uuid.uuid1().hex  file_abolutepath &#x3D; os.path.join(path, filename+suffix)# 拼接文件保存的绝对路径  file_code&#x3D;await file.read()  with open(file_abolutepath,&#39;wb&#39;) as f:    f.write(file_code)  return str(filename)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>通过<code>asyncio.run</code>方法调用批量下载函数<code>batch_download</code>：</p>  <pre class="line-numbers language-python" data-language="python"><code class="language-python">asyncio.run(batch_download(urlList))#其中urlList的数据格式为[url1,url2]，url1和url2是需要下载的文件地址,例如urlList&#x3D;[&#39;http:&#x2F;&#x2F;www.baidu.com&#39;,&#39;http:&#x2F;&#x2F;tangmenjue.top&#39;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>通过以上方法即可实现异步下载文件</p></li></ul>]]></content>
    
    
    <summary type="html">使用aiohttp和asyncio实现python异步批量下载文件</summary>
    
    
    
    <category term="python" scheme="http://tangmenjue.top/categories/python/"/>
    
    <category term="异步IO" scheme="http://tangmenjue.top/categories/%E5%BC%82%E6%AD%A5IO/"/>
    
    
    <category term="python" scheme="http://tangmenjue.top/tags/python/"/>
    
    <category term="异步IO" scheme="http://tangmenjue.top/tags/%E5%BC%82%E6%AD%A5IO/"/>
    
  </entry>
  
  <entry>
    <title>Vue axios接口异步请求数据并同步返回</title>
    <link href="http://tangmenjue.top/2023/10/16/Vue%20axios%E6%8E%A5%E5%8F%A3%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE%E5%B9%B6%E5%90%8C%E6%AD%A5%E8%BF%94%E5%9B%9E/"/>
    <id>http://tangmenjue.top/2023/10/16/Vue%20axios%E6%8E%A5%E5%8F%A3%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE%E5%B9%B6%E5%90%8C%E6%AD%A5%E8%BF%94%E5%9B%9E/</id>
    <published>2023-10-16T04:03:40.000Z</published>
    <updated>2023-10-16T04:03:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>在实际项目开发中，经常要使用<code>axios</code>来请求数据。</p><p><code>axios</code>可以通过<code>async/await</code>来实现同步请求。</p><p>其中<code>async</code>用来修饰方法，其声明的方法为异步请求的方法，<code>await</code>只能在异步方法中使用，用于等待指定方法执行完成；<code>await</code>修饰的方法执行完成后，才会执行后续的代码。</p><p><code>axios</code>的<code>.then</code>模块前把this赋值给一个变量并在<code>.then</code>中代替<code>this</code>来使用，可以防止<code>this</code>指针发生变化导致引用全局变量无效的问题，如：</p><ul><li><p>```json<br>  getData() {      </p><pre><code>  var _this=this  axios.get(`https://tangmenjue.top`)  .then(res =&gt; &#123;  _this.data = res.data      &#125;)  &#125;,</code></pre>  <pre class="line-numbers language-none"><code class="language-none">下面将介绍使用**&#96;axios&#96;异步请求数据不同步返回**时的处理方法：- 定义&#96;getData&#96;方法来发送axois请求，将请求返回值赋值给&#96;this.data&#96;，其中：使用&#96;async&#96;修饰&#96;getData&#96;方法，使用&#96;await&#96;修饰&#96;axios&#96;方法：&#96;&#96;&#96;jsonasync getData() &#123;          var _this&#x3D;this    await axios.get(&#96;https:&#x2F;&#x2F;tangmenjue.top&#96;).then(res &#x3D;&gt; &#123;    _this.data &#x3D; res.data        &#125;)    &#125;,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>定义调用<code>getData</code>的方法<code>handleData</code>，其中：使用<code>async</code>修饰<code>handleData</code>方法，使用<code>await</code>修饰调用的<code>this.getData</code>方法：：</p>  <pre class="line-numbers language-json" data-language="json"><code class="language-json">async handleData() &#123;          await this.getData()&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>根据上述步骤即可实现将<code>axios</code>请求的数据同步传递给全局变量<code>this.data</code>。</p></li></ul>]]></content>
    
    
    <summary type="html">使用async/await解决axios异步请求数据不同步返回的问题。应用场景：axios异步请求数据并需要在.then回调函数里将返回值传到全局变量中</summary>
    
    
    
    <category term="Vue" scheme="http://tangmenjue.top/categories/Vue/"/>
    
    
    <category term="Vue" scheme="http://tangmenjue.top/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue 监听兄弟组件数据变化并实时更新数据</title>
    <link href="http://tangmenjue.top/2023/07/18/Vue%20%E7%9B%91%E5%90%AC%E5%85%84%E5%BC%9F%E7%BB%84%E4%BB%B6%E6%95%B0%E6%8D%AE%E5%8F%98%E5%8C%96%E5%B9%B6%E5%AE%9E%E6%97%B6%E6%9B%B4%E6%96%B0%E6%95%B0%E6%8D%AE/"/>
    <id>http://tangmenjue.top/2023/07/18/Vue%20%E7%9B%91%E5%90%AC%E5%85%84%E5%BC%9F%E7%BB%84%E4%BB%B6%E6%95%B0%E6%8D%AE%E5%8F%98%E5%8C%96%E5%B9%B6%E5%AE%9E%E6%97%B6%E6%9B%B4%E6%96%B0%E6%95%B0%E6%8D%AE/</id>
    <published>2023-07-18T03:21:40.000Z</published>
    <updated>2023-07-18T03:21:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>在实际项目开发中，有时会遇到组件B需要监听兄弟组件A的数据是否有改动，并根据兄弟组件A的改动来更新自身数据或执行一定操作的需求。下面将介绍实现这一过程的方法：</p><ul><li><p>在Vue项目的<code>main.js</code>中 添加下面语句：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">Vue.prototype.$eventBus &#x3D; new Vue()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在兄弟组件A中所要监听的事件中添加如下自定义事件的代码<code>this.$eventBus.$emit(&#39;SyncData&#39;)</code>。如需要监听<code>addDataA</code>事件的变化，则组件A中<code>script</code>模块的代码如下所示：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"> methods: &#123;  addDataA() &#123;&#x2F;&#x2F;函数内容可自行替换    axios.post(&#39;testA&#39;)      .then((res) &#x3D;&gt; &#123;        console.log(res.data)        this.$eventBus.$emit(&#39;SyncData&#39;)&#x2F;&#x2F;SyncData为自定义事件名，可修改      &#125;)      .catch((err) &#x3D;&gt; &#123;        console.log(err)      &#125;)  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在需要实时更新的组件B中添加监听方法的变化，就可以实现实时更新数据。在组件B的<code>script</code>模块中添加以下代码：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">mounted()&#123;  this.$eventBus.$on(&quot;SyncData&quot;,()&#x3D;&gt;&#123;&#x2F;&#x2F;监听自定义事件是否被触发    this.onLoadDataB()&#x2F;&#x2F;自定义事件被触发时执行该函数  &#125;)&#125;,methods: &#123;  onLoadDataB() &#123;&#x2F;&#x2F;函数内容可自行替换    axios.get(&#39;testB&#39;)      .then((res) &#x3D;&gt; &#123;       console.log(res.data)      &#125;)      .catch((err) &#x3D;&gt; &#123;        console.log(err)      &#125;)  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>为防止叠加调用<code>EventBus</code>，在组件B的<code>beforDestroy</code>生命钩子中，添加以下代码：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">beforDestroy()&#123;       this.$eventBus.$off(&quot;SyncData&quot;);  &#x2F;&#x2F;当这个组件销毁的时候bus也跟着一起销毁   &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>至此，当兄弟组件A触发<code>addDataA</code>事件添加数据时，组件B便会触发事件<code>onLoadDataB</code>来加载数据。从而达到组件B随着兄弟组件A数据变化进行实时更新的目的。</p></li></ul><hr><h1 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h1><p>使用EventBus的好处在于：</p><ul><li>可全局使用</li><li>灵活性高，哪里需要放哪里，代码量少</li><li>跨组件通信，无需使用缓存</li></ul><p>相较于vuex，使用EventBus的缺点有：</p><ul><li><code>$EventBus.$emit</code>和<code>$eventBus.$on</code>必须成对出现</li><li>由于高灵活性，事件多了后，难以维护事件</li><li>在<code>$eventBus.$on</code>的组件里必须手动销毁<code>$eventBus</code>，否则会引发多次执行</li><li>复用性较差，需要在多个地方重复写逻辑</li></ul><p>综合优弊端分析可知：中大型项目不推荐用EventBus，建议用vuex做状态管理以便日后维护；若为小型项目，尤其是涉及多处跨组件通信时推荐使用EventBus</p>]]></content>
    
    
    <summary type="html">Vue 监听兄弟组件数据变化并实时更新数据</summary>
    
    
    
    <category term="Vue" scheme="http://tangmenjue.top/categories/Vue/"/>
    
    
    <category term="Vue" scheme="http://tangmenjue.top/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue 水印自适应窗口方法</title>
    <link href="http://tangmenjue.top/2023/07/12/Vue%E6%B0%B4%E5%8D%B0%E8%87%AA%E9%80%82%E5%BA%94%E7%AA%97%E5%8F%A3%E6%96%B9%E6%B3%95/"/>
    <id>http://tangmenjue.top/2023/07/12/Vue%E6%B0%B4%E5%8D%B0%E8%87%AA%E9%80%82%E5%BA%94%E7%AA%97%E5%8F%A3%E6%96%B9%E6%B3%95/</id>
    <published>2023-07-12T02:13:34.000Z</published>
    <updated>2023-07-12T02:13:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>通过使用Vue的生命周期钩子函数和window对象的resize事件来实现水印根据窗口大小适配的功能：</p><ol><li><p>在Vue文件的<code>script</code>模块中 引入水印组件：</p> <pre class="line-numbers language-json" data-language="json"><code class="language-json">import watermark from &#39;@zsit&#x2F;watermark&#39;;  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在<code>script</code>模块的<code>export default</code>里，通过钩子函数<code>mounted</code>监听窗口大小的变化，并在销毁组件前移除事件监听器：</p> <pre class="line-numbers language-json" data-language="json"><code class="language-json">mounted()&#123;  window.addEventListener(&#39;resize&#39;,this.handleResize)&#125;,beforeDestroy()&#123;  window.removeEventListener(&#39;resize&#39;,this.handleResize)&#125;,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在<code>script</code>模块的里，定义<code>handleResize</code>方法来调用水印：</p> <pre class="line-numbers language-json" data-language="json"><code class="language-json">methods: &#123;    handleResize()&#123;          watermark(&#123;                    watermark_txt: this.watermark_txt,&#x2F;&#x2F;水印内容                    watermark_y:80,&#x2F;&#x2F;水印y轴初始位置                    watermark_y_space: 60,                    watermark_fontsize: &quot;12px&quot;,                    watermark_width: 60,                    watermark_height: 60,                  &#125;);        &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 至此，所生成的水印可根据窗口的变化而覆盖整个窗口。</p></li></ol>]]></content>
    
    
    <summary type="html">Vue 水印自适应窗口方法</summary>
    
    
    
    <category term="Vue" scheme="http://tangmenjue.top/categories/Vue/"/>
    
    
    <category term="Vue" scheme="http://tangmenjue.top/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>DBeaver Enterprise Edition 22.0 企业版破解方法</title>
    <link href="http://tangmenjue.top/2023/05/08/DBeaver%20Enterprise%20Edition%2022.0%20%E4%BC%81%E4%B8%9A%E7%89%88%E7%A0%B4%E8%A7%A3%E6%96%B9%E6%B3%95/"/>
    <id>http://tangmenjue.top/2023/05/08/DBeaver%20Enterprise%20Edition%2022.0%20%E4%BC%81%E4%B8%9A%E7%89%88%E7%A0%B4%E8%A7%A3%E6%96%B9%E6%B3%95/</id>
    <published>2023-05-08T09:40:44.000Z</published>
    <updated>2023-05-08T09:40:44.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="下载方式二选一"><a href="#下载方式二选一" class="headerlink" title="下载方式二选一"></a>下载方式二选一</h1><h2 id="百度云网盘-所有文件一齐下载"><a href="#百度云网盘-所有文件一齐下载" class="headerlink" title="百度云网盘:所有文件一齐下载"></a>百度云网盘:所有文件一齐下载</h2><p>链接：<a href="https://pan.baidu.com/s/1b9XilYsxIL40Uk9_27unFA?pwd=2023">https://pan.baidu.com/s/1b9XilYsxIL40Uk9_27unFA?pwd=2023</a><br>提取码：2023 </p><h2 id="官网下载"><a href="#官网下载" class="headerlink" title="官网下载"></a>官网下载</h2><h3 id="1、DBeaver-EE-22-0"><a href="#1、DBeaver-EE-22-0" class="headerlink" title="1、DBeaver EE 22.0"></a>1、DBeaver EE 22.0</h3><p>DBeaver EE官网地址：<a href="https://dbeaver.com/download/enterprise/">Download Dbeaver Enterprise Edition</a></p><h3 id="2、JDK11"><a href="#2、JDK11" class="headerlink" title="2、JDK11"></a>2、JDK11</h3><p>JDK11官网地址：<a href="https://www.oracle.com/java/technologies/downloads/#java11-windows">Download JDK11</a></p><h3 id="3、javaagent"><a href="#3、javaagent" class="headerlink" title="3、javaagent"></a>3、javaagent</h3><p>百度云网盘下载：</p><p>链接：<a href="https://pan.baidu.com/s/1WVyatIk08D_F-BhBh2zfwA?pwd=2023">https://pan.baidu.com/s/1WVyatIk08D_F-BhBh2zfwA?pwd=2023</a><br>提取码：2023 </p><h2 id="破解步骤"><a href="#破解步骤" class="headerlink" title="破解步骤"></a>破解步骤</h2><p>1、安装DBeaver Enterprise Edition，并记下安装路径</p><p>2、安装JDK11，并记下安装路径</p><p>3、设置JDK11环境变量，具体操作步骤为：此电脑-右键-属性-高级系统设置-环境变量-在系统变量出找到Path变量双击-点击新建-将JDK11安装目录路径粘贴上去（具体到<code>/bin</code>的位置），参考路径如下：<img src="/2023/05/08/DBeaver%20Enterprise%20Edition%2022.0%20%E4%BC%81%E4%B8%9A%E7%89%88%E7%A0%B4%E8%A7%A3%E6%96%B9%E6%B3%95/1.png" alt></p><p>4、以管理员身份运行cmd，并切换到JDK11安装目录，如本文中JDK11安装目录为<code>E:\Java\jdk-11\bin</code>中，执行下面命令生成jar包：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">jlink.exe --module-path jmods --add-modules java.desktop --output jre<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>5、打开JDK11安装目录<code>E:\Java\jdk-11\bin</code>，复制生成的jar包，打开DBeaver EE软件安装目录，删除目录中的jre文件夹，并粘贴刚刚生成的jre文件夹；将网盘中下载的<code>dbeaver-agent.jar</code>破解包粘贴到DBeaver EE软件安装目录中</p><p><img src="/2023/05/08/DBeaver%20Enterprise%20Edition%2022.0%20%E4%BC%81%E4%B8%9A%E7%89%88%E7%A0%B4%E8%A7%A3%E6%96%B9%E6%B3%95/2.png" alt></p><p>6、在DBeaver EE软件安装目录中，使用记事本打开<code>dbeaver.ini</code>文件，添加jdk11和dbeaver-agent.jar路径如下：</p><p><img src="/2023/05/08/DBeaver%20Enterprise%20Edition%2022.0%20%E4%BC%81%E4%B8%9A%E7%89%88%E7%A0%B4%E8%A7%A3%E6%96%B9%E6%B3%95/3.png" alt></p><p>至此，DBeaver Enterprise Edition 22.0 企业版破解已成功激活，可以正常开始使用了</p>]]></content>
    
    
    <summary type="html">DBeaver Enterprise Edition 22.0 企业版破解方法</summary>
    
    
    
    <category term="数据库工具" scheme="http://tangmenjue.top/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="数据库工具" scheme="http://tangmenjue.top/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes实践：从yaml创建工作负载</title>
    <link href="http://tangmenjue.top/2023/03/31/Kubernetes%E5%AE%9E%E8%B7%B5%EF%BC%9A%E4%BB%8Eyaml%E5%88%9B%E5%BB%BA%E5%B7%A5%E4%BD%9C%E8%B4%9F%E8%BD%BD/"/>
    <id>http://tangmenjue.top/2023/03/31/Kubernetes%E5%AE%9E%E8%B7%B5%EF%BC%9A%E4%BB%8Eyaml%E5%88%9B%E5%BB%BA%E5%B7%A5%E4%BD%9C%E8%B4%9F%E8%BD%BD/</id>
    <published>2023-03-31T09:40:12.000Z</published>
    <updated>2023-03-31T09:40:12.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Pod"><a href="#Pod" class="headerlink" title="Pod"></a>Pod</h1><p>Pod是Kubernetes中的基本单位。容器本身不会直接分配到主机上，而会封装到名为Pod的对象中。Kubernetes以Pod为最小单位进行调度、伸缩并共享资源、管理生命周期。</p><p>Pod通常表示单个应用程序，由一个或多个关系紧密的容器构成，这些容器拥有同样的生命周期，作为一个整体一起编排到Node上。这些容器共享环境、存储卷（volume）和IP空间。尽管Pod基于一个或多个容器，但应将Pod视作一个单一的整体、单独的应用程序。</p><h1 id="Pod模板"><a href="#Pod模板" class="headerlink" title="Pod模板"></a>Pod模板</h1><p>在创建Pod时，需要定义一个模板文件（.yml文件），并将其称为Pod模板。可以用Pod模板来定义资源，以下是Pod模板的主要内容及对应说明：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">---apiVersion: v1 # 使用的API版本，V1表示使用 Kubernetes API的稳定版本kind: Pod # 要创建的资源对象，这里为关键字Podmetadata: # 表示该资源对象的元数据，一个资源对象可拥有多个元数据。表示资源的标识信息  name: String # 元数据，必填，Pod的名字  namespace: String # 元数据，Pod的命名空间  labels: # 元数据，标签列表    - key: value # 元数据，可定义多个标签的键值对   annotations: # 元数据，自定义注解列表    - key: value # 元数据，可定义多个标签的键值对 spec: # 该资源对象的具体设置，Pod中容器的详细配置，必填  containers: # Pod中的容器列表，必填，可以有多个容器  - name: String # 要创建的容器名称，必填                    image: String # 容器的镜像地址，必填    imagePullPolicy: [Always|Never|IfNotPresent] # 镜像的下载策略，支持3种模式    command: [String] # 容器的启动命令列表（不配置则使用镜像内部的命令）    args: [String] # 启动参数列表    workingDir: String # 容器的工作目录    volumeMounts: # 挂载到容器内部的存储卷设置    - name: String # 为了引用Pod定义的共享存储卷名称，要用volumes[]部分定义的卷名      mountPath: String # 存储卷在容器内挂载的绝对路径，应少于512个字符      readOnly: Boolean # 是否为只读模式    ports: # 容器需要暴露的端口号列表    - name: String # 端口名称      containerPort: int # 容器要暴露的端口      hostPost: int # 容器所在主机监听的端口（把容器暴露的端口映射到宿主机的端口）      protocol: String # 端口协议，支持TCP和UDP，默认为TCP    env: # 容器运行前要设置的环境变量列表    - name: String # 环境变量名称      value: String # 环境变量值    resources: # 资源限制和请求的设置      limits: # 资源限制的设置        cpu: String # cpu限制，单位为CPU内核数，也可以使用小数，如0.1，0.1等价于表达式100m，表示100milicpu        memory: String # 内存限制，单位可以为MiB&#x2F;GiB&#x2F;MB&#x2F;GB (1MB&#x3D;1024x1024B&#x3D;1024x1024x1000x1000B)。      requests: # 资源请求的设置        cpu: String # cpu请求，容器启动时的初始可用数量        memory: String # 内存请求，容器启动时的初始可用数量      livenessProbe: # Pod内容器健康检查的设置，当探测几次无响应后将自动重启该容器。      # 检查方法有exec、httpGet、tcpSocket，对一个容器只要设置一种方法即可        exec: # 通过exec方式来检查Pod内各容器的健康情况          command: [String] # exec方式需要指定的命令或脚本        httpGet: # 通过httpGet方式来检查Pod内各容器的健康情况，需要指定path、port          path: String          port: number          host: String          scheme: String          httpHeaders:           - name: String            value: String        tcpSocket: # 通过tcpSocket方式来检查Pod内各容器的健康情况          port: number            initialDelaySeconds: 0 # 容器启动完成后，首次探测的时间（单位为秒）        timeoutSeconds: 0 # 对容器进行健康检查时探测等待响应的超时时间（单位为秒，默认为1s）        periodSeconds: 0 # 对容器监控检查的定期探测时间设置（单位为秒，默认10s一次）        successThreshold: 0         failureThreshold: 0          securityContext: # 安全配置          privileged: false      restartPolicy: [Always|Never|OnFailure] # Pod的重启策略，有三种可以选         nodeSelector: # 节点选择，设置nodeSelector表示将该Pod调度到包含这个标签的节点上      - key: value       imagePullSecrets: # 拉取镜像时使用的secret名称      - name: String      hostNetwork: false # 是否使用主机网络模式，默认为false    volumes: # 在该Pod上定义的共享存储卷列表    - name: String # 共享存储卷名称      emptyDir: &#123;&#125; # 类型为emptyDir的存储卷，与Pod有相同生命周期的一个临时目录，为空值      hostPath: # 类型为hostPathr的存储卷，将会挂载Pod所在宿主机的目录        path: String      secret: #类型为secret的存储卷，在容器内部挂载集群中预定义的secret对象        secretName: String        items:         - key: String          path: String        configMap: #类型为secret的存储卷，挂载预定义的configMap对象到容器内部          name: String          items:          - key: String            path: String    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="控制器——Pod的管理"><a href="#控制器——Pod的管理" class="headerlink" title="控制器——Pod的管理"></a>控制器——Pod的管理</h1><p>一般来说，用户不会直接创建Pod，而是创建控制器，让控制器来管理Pod。在控制器中定义Pod的部署方式，如有多少个副本、需要在哪种Node上运行等。根据不同的业务场景，Kubernetes提供了多种控制器。</p><h2 id="Deployment-控制器（部署）"><a href="#Deployment-控制器（部署）" class="headerlink" title="Deployment 控制器（部署）"></a>Deployment 控制器（部署）</h2><p>Deployment控制器是最常用的工作负载对象之一。</p><p>在使用Kubernetes时，通常要管理由多个相同Pod所组成的Pod集合，而不是单个Pod。通过Deployment控制器，可以定义Pod模板，并设置相应控制参数以实现水平伸缩，以调节正在运行的相同Pod数。</p><p>Deployment控制器保证在集群中部署的Pod数量和配置中的Pod数量一致。若Pod或主机出现故障，则会自动启用新的Pod进行补充。</p><p>创建Deployment 控制器也需要定义一个模板文件（.yml文件）。可以用Deployment控制器的模板来定义资源，以下是模板的主要内容及对应说明：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">---apiVersion: apps&#x2F;v1 # 使用的API版本，V1表示使用稳定版本kind: Deployment # 要创建的资源对象，这里为关键字Deploymentmetadata: # 表示该资源对象的元数据，一个资源对象可拥有多个元数据。表示资源的标识信息  name: String # 元数据，必填，Deployment控制器的名字  namespace: String # 元数据，Deployment控制器的命名空间  labels: # 元数据，标签列表    - key: value # 元数据，可定义多个标签的键值对   annotations: # 元数据，自定义注解列表    - key: value # 元数据，可定义多个标签的键值对 spec:   selector: # 必填，用于指定Deployment控制器针对的Pod的标签选择器，需要与template中的标签匹配    matchLabels:  # 定义需要匹配的标签集合      key: value # 需要匹配的标签，可定义多个标签的键值对  template: [PodTemplate] # 必填，Pod模板，它与Pod具有完全相同的结构，不过他是嵌套的，且不需要带apiVersion或kind字段  replicas: int # 指定所需Pod的数量，默认为1  strategy: # 更新时替换旧Pod的策略    type: Recreate&#x2F;RollingUpdate # Recreate表示现有的Pod都会在创建新的Pod之前被终止，RollingUpdate表示以滚动更新方式更新Pod    rollingUpdate:      maxSurge: int&#x2F;int% # 在滚动更新时，在所需数量的Pod上允许创建的最大Pod数，也可用百分比形式      maxUnavailable: int&#x2F;int% # 在滚动更新时，同时存在最大不可用Pod数，也可用百分比形式  progressDeadlineseconds: int # Deployment控制器处于进行状态时的等待秒数，超过这个时间将会变为失败  minReadySeconds: int # 指定新创建的Pod应该在没有任何容器崩溃的情况下准备好的最短秒数  revisionHistoryLimit: int # 指定要保留的允许回滚的旧ReplicaSet数量  paused: boolean # 默认为false，用于暂停和恢复部署，当暂停部署时，Pod模板中spec属性的任何更改都不会触发新的部署<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="DaemonSet-控制器（有状态副本集）"><a href="#DaemonSet-控制器（有状态副本集）" class="headerlink" title="DaemonSet 控制器（有状态副本集）"></a>DaemonSet 控制器（有状态副本集）</h2><p>DaemonSet 控制器是一种特殊的Pod控制器，会在集群中的各个节点上运行单一的Pod副本。它非常适合部署那些为节点本身提供服务或执行维护的Pod。如对于日志收集和转发、监控以及运行以增加节点本身功能为目的的服务都使用DaemonSet 控制器。</p><p>DaemonSet 控制器的一些典型用法包括但不限于以下几种：</p><ul><li>运行集群存储Daemon控制器，如在每个Node上运行glusterd、ceph。</li><li>在每个Node上运行日志收集Daemon控制器，如Fluentd、logstash。</li><li>在每个Node上运行监控Daemon控制器，如Prometheus Node Exporter、collectd、Datadog代理、New Relic代理或Ganglia gmond。</li></ul><p>创建DaemonSet 控制器的模板与Deployment控制器的模板相同</p><h2 id="Job与CronJob控制器"><a href="#Job与CronJob控制器" class="headerlink" title="Job与CronJob控制器"></a>Job与CronJob控制器</h2><h3 id="Job工作负载"><a href="#Job工作负载" class="headerlink" title="Job工作负载"></a>Job工作负载</h3><p>Job的工作负载对象基于某一特定任务而运行，当运行任务的容器完成工作后，就会成功退出。若需要执行一次性任务，而非提供连续的服务，则适合创建job工作负载。</p><p>Job控制器可以执行3种类型的任务：</p><ul><li><p>一次性任务：通常只会启动一个Pod（除非Pod失败）。一旦Pod成功终止，Job就算完成了。其模板如下：</p>  <pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">---apiVersion: batch&#x2F;v1 # 使用的API版本，V1表示使用稳定版本kind: Job # 要创建的资源对象，这里为关键字Jobmetadata: # 表示该资源对象的元数据，一个资源对象可拥有多个元数据。表示资源的标识信息  name: String # 元数据，必填，Job工作负载的名字spec:   template:  # 必填，Pod模板，它与Pod具有完全相同的结构，不过他是嵌套的，且不需要带apiVersion或kind字段    spec:      activeDeadlineSeconds: int # 指定执行任务的上限时间（单位为秒），超时时任务将强制终止并删除      ttlSecondsAfterFinished: int # 用于确定在所有任务执行完成后，需要等待多少秒才可删除Job，默认关闭      restartPolicy: [Never|OnFailure]       containers:      - name: String        image: String        imagePullPolicy:         command: [String]          - --feature-gates&#x3D;TTLSecondsAfterFinished&#x3D;true # 手动开启自动删除Job功能        args: [String] <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>串行式任务：连续、多次地执行某一任务。当上一个任务完成时，接着执行下一个任务，直到全部任务执行完，可以通过spec.completions属性指定执行次数。其模板如下：</p>  <pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">---apiVersion: batch&#x2F;v1 # 使用的API版本，V1表示使用稳定版本kind: Job # 要创建的资源对象，这里为关键字Jobmetadata: # 表示该资源对象的元数据，一个资源对象可拥有多个元数据。表示资源的标识信息  name: String # 元数据，必填，Job工作负载的名字spec:   activeDeadlineSeconds: int # 指定执行任务的上限时间（单位为秒），超时时任务将强制终止并删除  completions: int # 设置任务执行次数  template:  # 必填，Pod模板，它与Pod具有完全相同的结构，不过他是嵌套的，且不需要带apiVersion或kind字段    spec:      restartPolicy: [Never|OnFailure]       containers:      - name: String        image: String        imagePullPolicy:         command: [String]         args: [String]   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>并行式任务：同一时间并发多次执行任务。可以通过spec.parallelism属性指定并发数，也可以配合spec.completions属性指定总任务的执行次数。其模板如下：</p>  <pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">---apiVersion: batch&#x2F;v1 # 使用的API版本，V1表示使用稳定版本kind: Job # 要创建的资源对象，这里为关键字Jobmetadata: # 表示该资源对象的元数据，一个资源对象可拥有多个元数据。表示资源的标识信息  name: String # 元数据，必填，Job工作负载的名字spec:   activeDeadlineSeconds: int # 指定执行任务的上限时间（单位为秒），超时时任务将强制终止并删除  completions: int # 设置任务执行次数  parallelism: int # 设置任务并行数   template:  # 必填，Pod模板，它与Pod具有完全相同的结构，不过他是嵌套的，且不需要带apiVersion或kind字段    spec:      restartPolicy: [Never|OnFailure]       containers:      - name: String        image: String        imagePullPolicy:         command: [String]         args: [String]   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="CronJob控制器"><a href="#CronJob控制器" class="headerlink" title="CronJob控制器"></a>CronJob控制器</h3><p>CronJob控制器是在Job的基础上增加了时间调度，可以在给定的时间点运行一个任务，也可以定期地运行。</p><p>通过CronJob控制器，可以实现以下类型的Job：</p><ul><li>在未来的某个指定时间执行一次Job，例如某项临时任务</li><li>周期性地运行Job，例如，定期备份，发送邮件等</li></ul><p>CronJob控制器的模板如下所示：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">---apiVersion: batch&#x2F;v1betal # CronJob控制器目前只存在betal版本中kind: CronJob # 要创建的资源对象，这里为关键字CronJobmetadata: # 表示该资源对象的元数据，一个资源对象可拥有多个元数据。表示资源的标识信息  name: String # 元数据，必填，CronJob控制器的名字  namespace: String # 元数据，CronJob控制器的命名空间  labels: # 元数据，标签列表    - key: value # 元数据，可定义多个标签的键值对   annotations: # 元数据，自定义注解列表    - key: value # 元数据，可定义多个标签的键值对 spec:   schedule: String # 必填，指定任务运行周期，格式同Cron  jobTemplate: [JobTemplate] # 必填，Job模板  startingDeadlineSeconds: int # 启动Job的期限（秒）。若执行时间超时，Job将被任务是失败的。若没有指定，则没有期限  concurrencyPolicy: [Allow|Forbid|Replace]  # 若上一个周期的Job没执行完，而下一个周期已开始，在这种并发场景下默认采用Allow策略，允许并发运行Job  # Forbid表示禁止并发运行，若上一个周期的Job没执行完，则下一个周期会被忽略并不再执行  # Replace表示取消当前正在运行的Job，用一个新的来替换  suspend: boolean # 若设置为true，而上一个周期的Job没执行完，而下一个周期已开始，则后续所有执行都会被挂起  successfulJobsHistoryLimit: int # 保留多少条执行成功的Job记录，默认为3  failedJobsHistoryLimit: int # 保留多少条执行失败的Job记录，默认为1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">Kubernetes实践：从yaml创建工作负载</summary>
    
    
    
    <category term="Kubernetes" scheme="http://tangmenjue.top/categories/Kubernetes/"/>
    
    
    <category term="Kubernetes" scheme="http://tangmenjue.top/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>docker-compose一键部署Elasticsearch Logstash Kibana</title>
    <link href="http://tangmenjue.top/2023/03/07/docker-compose%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2Elasticsearch%20Logstash%20elasticsearch-head/"/>
    <id>http://tangmenjue.top/2023/03/07/docker-compose%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2Elasticsearch%20Logstash%20elasticsearch-head/</id>
    <published>2023-03-07T02:16:08.000Z</published>
    <updated>2023-03-07T02:16:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>在使用Elasticsearch进行全文搜索时，会使用到Elasticsearch（搜索引擎）、Logstash（数据同步）、Kibana（数据可视化）这三个中间件。在开发或测试环境中部署项目时，常使用docker-compose一键部署项目所需的环境，因此本文记录使用docker-compose一键部署Elasticsearch、Logstash和Kibana的过程。</p><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><h2 id="端口说明"><a href="#端口说明" class="headerlink" title="端口说明"></a>端口说明</h2><ul><li>Elasticsearch：9200（HTTP通信）和9300（TCP通信）</li><li>Logstash：5044和9600（TCP通信）</li><li>Kibana：5601</li></ul><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><h3 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a><code>docker-compose.yml</code></h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">version: &#39;3&#39;services:  elasticsearch:    image: docker.elastic.co&#x2F;elasticsearch&#x2F;elasticsearch:7.16.2    container_name: elasticsearch_server    restart: unless-stopped    environment:      - discovery.type&#x3D;single-node      - discovery.zen.minimum_master_nodes&#x3D;1      - ES_JAVA_OPTS&#x3D;-Xms3g -Xmx3g    volumes:      - &quot;&#x2F;home&#x2F;docker_data&#x2F;myproj&#x2F;elasticsearch&#x2F;data:&#x2F;data&quot;    ports:      - 9200:9200      - 9300:9300     networks:      default:     # 指定使用的网络      common:        aliases:          - elasticsearch     # 该容器的别名，在 elk_net 网络中的其他容器可以通过别名 elasticsearch 来访问到该容器  kibana:    image: docker.elastic.co&#x2F;kibana&#x2F;kibana:7.16.2    depends_on:      - elasticsearch        container_name: kibana_server    restart: unless-stopped        environment:      - ELASTICSEARCH_URL&#x3D;http:&#x2F;&#x2F;elasticsearch:9200      - SERVER_NAME&#x3D;kibana        # 如需具体配置，可以创建.&#x2F;config&#x2F;kibana.yml，并映射    volumes:      - &quot;&#x2F;home&#x2F;docker_data&#x2F;myproj&#x2F;config&#x2F;kibana.yml:&#x2F;config&#x2F;kibana.yml&quot;          ports:      - &quot;5601:5601&quot;    networks:      default:      common:        aliases:          - kibana  logstash:    image: docker.elastic.co&#x2F;logstash&#x2F;logstash:7.16.2    depends_on:      - elasticsearch        container_name: logstash_server    restart: unless-stopped     environment:      - LS_JAVA_OPTS&#x3D;-Xmx256m -Xms256m    volumes:      - &quot;&#x2F;home&#x2F;docker_data&#x2F;myproj&#x2F;config&#x2F;logstash.conf:&#x2F;config&#x2F;logstash.conf&quot;          networks:      default:      common:        aliases:          - logstash    entrypoint:      - logstash      - -f      - &#x2F;config&#x2F;logstash.conf    logging:      driver: &quot;json-file&quot;      options:        max-size: &quot;200m&quot;        max-file: &quot;3&quot;networks: common:  external:   name: nginx-bridge<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="elasticsearch-yml"><a href="#elasticsearch-yml" class="headerlink" title="elasticsearch.yml"></a><code>elasticsearch.yml</code></h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">cluster.name: &quot;es-server&quot;network.host: 0.0.0.0http.cors.enabled: truehttp.cors.allow-origin: &quot;*&quot;http.cors.allow-headers: Authorizationxpack.security.enabled: truexpack.security.transport.ssl.enabled: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="kibana-yml"><a href="#kibana-yml" class="headerlink" title="kibana.yml"></a><code>kibana.yml</code></h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">server.host: &quot;0.0.0.0&quot;server.shutdownTimeout: &quot;5s&quot;elasticsearch.hosts: [ &quot;http:&#x2F;&#x2F;elasticsearch:9200&quot; ]monitoring.ui.container.elasticsearch.enabled: trueelasticsearch.username: &quot;elastic&quot;elasticsearch.password: &quot;123456&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="logstash-yml"><a href="#logstash-yml" class="headerlink" title="logstash.yml"></a><code>logstash.yml</code></h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">http.host: &quot;0.0.0.0&quot;xpack.monitoring.elasticsearch.hosts: [ &quot;http:&#x2F;&#x2F;elasticsearch:9200&quot; ]xpack.monitoring.enabled: truexpack.monitoring.elasticsearch.username: logstash_systemxpack.monitoring.elasticsearch.password: 123456<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="logstash-conf"><a href="#logstash-conf" class="headerlink" title="logstash.conf"></a><code>logstash.conf</code></h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">input &#123;    stdin &#123;    &#125;    jdbc &#123;      # 数据库连接地址      jdbc_connection_string &#x3D;&gt; &quot;jdbc:postgresql:&#x2F;&#x2F;127.0.0.1:5432&#x2F;postgres&quot;      # 数据库连接账号密码：      jdbc_user &#x3D;&gt; &quot;postgres&quot;      jdbc_password &#x3D;&gt; &quot;123456&quot;      # Pg依赖包路径      jdbc_driver_library &#x3D;&gt; &quot;pgsql\postgresql-42.5.1.jar&quot;      jdbc_driver_class &#x3D;&gt; &quot;org.postgresql.Driver&quot;      # 开启分页查询，默认为false      jdbc_paging_enabled &#x3D;&gt; &quot;true&quot;      # 单次分页查询条数（默认100000，若字段较多且更新频率较高，则建议调低此值）      jdbc_page_size &#x3D;&gt; &quot;300000&quot;      use_column_value &#x3D;&gt; &quot;true&quot;      tracking_column &#x3D;&gt; &quot;id&quot; #根据id字段更新      # statement为查询数据sql，若sql较复杂，建议通过statement_filepath 配置sql文件的存放路径；      # statement &#x3D;&gt; &quot;SELECT * FROM public.SystemName&quot;      statement_filepath &#x3D;&gt; &quot;pgsql\logstash-pgsql1.sql&quot;  #这是要操作的sql 表，下面会提供          # 同步频率（分时天月年），全*默认为每分钟同步一次。现设置每天凌晨4点执行          schedule &#x3D;&gt; &quot;* 4 * * *&quot;          # 多表同步时，表类型区分，建议命名为“库名_表名”，每个jdbc模块需对应一个type；          type &#x3D;&gt; &quot;postgres_SystemName&quot;          jdbc_default_timezone &#x3D;&gt;&quot;Asia&#x2F;Shanghai&quot;    &#125;    jdbc &#123;      # 数据库连接地址      jdbc_connection_string &#x3D;&gt; &quot;jdbc:postgresql:&#x2F;&#x2F;127.0.0.1:5432&#x2F;postgres&quot;      # 数据库连接账号密码：      jdbc_user &#x3D;&gt; &quot;postgres&quot;      jdbc_password &#x3D;&gt; &quot;123456&quot;      # Pg依赖包路径      jdbc_driver_library &#x3D;&gt; &quot;pgsql\postgresql-42.5.1.jar&quot;      jdbc_driver_class &#x3D;&gt; &quot;org.postgresql.Driver&quot;      # 开启分页查询，默认为false      jdbc_paging_enabled &#x3D;&gt; &quot;true&quot;      # 单次分页查询条数（默认100000，若字段较多且更新频率较高，则建议调低此值）      jdbc_page_size &#x3D;&gt; &quot;300000&quot;      use_column_value &#x3D;&gt; &quot;true&quot;      tracking_column &#x3D;&gt; &quot;id&quot; #根据id字段更新      # statement为查询数据sql，若sql较复杂，建议通过statement_filepath 配置sql文件的存放路径；      # statement &#x3D;&gt; &quot;SELECT * FROM public.&quot;SystemDetail&quot;&quot;      statement_filepath &#x3D;&gt; &quot;pgsql\logstash-pgsql2.sql&quot;  #这是要操作的sql 表，下面会提供          # 同步频率（分时天月年），默认为每分钟同步一次          schedule &#x3D;&gt; &quot;* 4 * * *&quot;          # 多表同步时，表类型区分，建议命名为“库名_表名”，每个jdbc模块需对应一个type；          type &#x3D;&gt; &quot;postgres_SystemDetail&quot;          jdbc_default_timezone &#x3D;&gt;&quot;Asia&#x2F;Shanghai&quot;    &#125;    jdbc &#123;      # 数据库连接地址      jdbc_connection_string &#x3D;&gt; &quot;jdbc:postgresql:&#x2F;&#x2F;127.0.0.1:5432&#x2F;postgres&quot;      # 数据库连接账号密码：      jdbc_user &#x3D;&gt; &quot;postgres&quot;      jdbc_password &#x3D;&gt; &quot;123456&quot;      # Pg依赖包路径      jdbc_driver_library &#x3D;&gt; &quot;pgsql\postgresql-42.5.1.jar&quot;      jdbc_driver_class &#x3D;&gt; &quot;org.postgresql.Driver&quot;      # 开启分页查询，默认为false      jdbc_paging_enabled &#x3D;&gt; &quot;true&quot;      # 单次分页查询条数（默认100000，若字段较多且更新频率较高，则建议调低此值）      jdbc_page_size &#x3D;&gt; &quot;300000&quot;      use_column_value &#x3D;&gt; &quot;true&quot;      tracking_column &#x3D;&gt; &quot;id&quot; #根据id字段更新      # statement为查询数据sql，若sql较复杂，建议通过statement_filepath 配置sql文件的存放路径；      # statement &#x3D;&gt; &quot;SELECT * FROM public.&quot;ProblemList&quot;&quot;      statement_filepath &#x3D;&gt; &quot;pgsql\logstash-pgsql3.sql&quot;  #这是要操作的sql 表，下面会提供          # 同步频率（分时天月年），默认为每分钟同步一次          schedule &#x3D;&gt; &quot;* 4 * * *&quot;          # 多表同步时，表类型区分，建议命名为“库名_表名”，每个jdbc模块需对应一个type；          type &#x3D;&gt; &quot;postgres_ProblemList&quot;          jdbc_default_timezone &#x3D;&gt;&quot;Asia&#x2F;Shanghai&quot;    &#125;&#125;filter &#123;    json &#123;        source &#x3D;&gt; &quot;message&quot;        remove_field &#x3D;&gt; [&quot;message&quot;]    &#125;&#125;output &#123;    # output模块的type需和jdbc模块的type一致    if [type] &#x3D;&#x3D; &quot;postgres_SystemName&quot;&#123;        elasticsearch &#123;            # 配置es集群的地址            hosts &#x3D;&gt; [&quot;localhost:9200&quot;]            # 索引名称，必须小写            index &#x3D;&gt; &quot;test&quot;            # 模板地址                  template &#x3D;&gt; &quot;pgsql\es-template.json&quot;   #es 索引模板，可不定义                  template_name &#x3D;&gt; &quot;t-statistic-out-logstash&quot;                  template_overwrite &#x3D;&gt; true                  document_type &#x3D;&gt; &quot;text&quot;            # 数据唯一索引            document_id &#x3D;&gt; &quot;%&#123;id&#125;&quot;        &#125;    &#125;    if [type] &#x3D;&#x3D; &quot;postgres_SystemDetail&quot;&#123;        elasticsearch &#123;            # 配置es集群的地址            hosts &#x3D;&gt; [&quot;localhost:9200&quot;]            # 索引名称，必须小写            index &#x3D;&gt; &quot;test&quot;            # 模板地址                  template &#x3D;&gt; &quot;pgsql\es-template.json&quot;   #es 索引模板，可不定义                  template_name &#x3D;&gt; &quot;t-statistic-out-logstash&quot;                  template_overwrite &#x3D;&gt; true                  document_type &#x3D;&gt; &quot;text&quot;            # 数据唯一索引            document_id &#x3D;&gt; &quot;%&#123;id&#125;&quot;        &#125;    &#125;    if [type] &#x3D;&#x3D; &quot;postgres_ProblemList&quot;&#123;        elasticsearch &#123;            # 配置es集群的地址            hosts &#x3D;&gt; [&quot;localhost:9200&quot;]            # 索引名称，必须小写            index &#x3D;&gt; &quot;test&quot;            # 模板地址                  template &#x3D;&gt; &quot;pgsql\es-template.json&quot;   #es 索引模板，可不定义                  template_name &#x3D;&gt; &quot;t-statistic-out-logstash&quot;                  template_overwrite &#x3D;&gt; true                  document_type &#x3D;&gt; &quot;text&quot;            # 数据唯一索引            document_id &#x3D;&gt; &quot;%&#123;id&#125;&quot;        &#125;    &#125;    stdout &#123;        codec &#x3D;&gt; json_lines    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="设置-amp-配置密码"><a href="#设置-amp-配置密码" class="headerlink" title="设置&amp;配置密码"></a>设置&amp;配置密码</h2><h3 id="elasticsearch"><a href="#elasticsearch" class="headerlink" title="elasticsearch"></a>elasticsearch</h3><p>使用上述配置创建容器后，进入容器中执行以下命令，可配置elastic、kibana、logstash_system等账号的密码：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">elasticsearch-setup-passwords interactive<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>设置完成后，登录kibana的账号名是kibana，elasticsearch的账户名为elastic。</p><h1 id="一键部署"><a href="#一键部署" class="headerlink" title="一键部署"></a>一键部署</h1><p>梳理好部署目录并创建好对应文件后，执行以下命令启动容器<code>docker-compose up -d</code>。</p><p>在内网使用Elasticsearch、Logstash时，可以不设置密码，但kibana需要设置。</p>]]></content>
    
    
    <summary type="html">使用docker-compose一键部署Elasticsearch Logstash Kibana</summary>
    
    
    
    <category term="Docker" scheme="http://tangmenjue.top/categories/Docker/"/>
    
    <category term="Elasticsearch" scheme="http://tangmenjue.top/categories/Elasticsearch/"/>
    
    
    <category term="Docker" scheme="http://tangmenjue.top/tags/Docker/"/>
    
    <category term="应用部署" scheme="http://tangmenjue.top/tags/%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2/"/>
    
    <category term="Elasticsearch" scheme="http://tangmenjue.top/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>初探vue-quill-editor</title>
    <link href="http://tangmenjue.top/2023/02/23/%E5%88%9D%E6%8E%A2vue-quill-editor/"/>
    <id>http://tangmenjue.top/2023/02/23/%E5%88%9D%E6%8E%A2vue-quill-editor/</id>
    <published>2023-02-23T09:34:16.000Z</published>
    <updated>2023-02-23T09:34:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="富文本编辑器：vue-quill-editor"><a href="#富文本编辑器：vue-quill-editor" class="headerlink" title="富文本编辑器：vue-quill-editor"></a>富文本编辑器：vue-quill-editor</h1><p>vue-quill-editor是一款可适配PC端和移动端富文本编辑器，具有可设置自定义配置项、外观简洁且轻量的优点。</p><p>PC端效果图如下：<img src="/2023/02/23/%E5%88%9D%E6%8E%A2vue-quill-editor/1.png" alt></p><p>移动端的效果图如下：<img src="/2023/02/23/%E5%88%9D%E6%8E%A2vue-quill-editor/2.png" alt></p><h1 id="vue-quill-editor配置"><a href="#vue-quill-editor配置" class="headerlink" title="vue-quill-editor配置"></a>vue-quill-editor配置</h1><ul><li><p>在项目目录下载vue-quill-editor：</p>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm i vue-quill-editor -S<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在Vue页面的script模块中引入vue-quill-editor：</p>  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> Quill <span class="token keyword">from</span> <span class="token string">"quill"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> quillEditor <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vue-quill-editor"</span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token string">'quill/dist/quill.core.css'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'quill/dist/quill.snow.css'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'quill/dist/quill.bubble.css'</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>quillEditor<span class="token punctuation">)</span><span class="token comment">//注册组件的方式之一</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在Vue页面的template模块中引入组件：</p>  <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>quill-editor</span>     <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span>     <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myQuillEditor<span class="token punctuation">"</span></span>     <span class="token attr-name">:options</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>editorOption<span class="token punctuation">"</span></span>     <span class="token attr-name">@blur</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onEditorBlur($event)<span class="token punctuation">"</span></span>     <span class="token attr-name">@focus</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onEditorFocus($event)<span class="token punctuation">"</span></span>    <span class="token attr-name">@change</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onEditorChange($event)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>quill-editor</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在Vue页面的scripts模块中完善组件的设置，完整的scripts模块代码如下：</p>  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> Quill <span class="token keyword">from</span> <span class="token string">"quill"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> quillEditor <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vue-quill-editor"</span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token string">'quill/dist/quill.core.css'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'quill/dist/quill.snow.css'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'quill/dist/quill.bubble.css'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  components<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    quillEditor<span class="token punctuation">,</span><span class="token comment">//另一种组件注册方式</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      content<span class="token operator">:</span><span class="token string">''</span><span class="token punctuation">,</span>      str<span class="token operator">:</span><span class="token string">''</span><span class="token punctuation">,</span>      editorOption<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        placeholder<span class="token operator">:</span> <span class="token string">"请在这里输入"</span><span class="token punctuation">,</span>        modules<span class="token operator">:</span><span class="token punctuation">&#123;</span>          toolbar<span class="token operator">:</span><span class="token punctuation">[</span>            <span class="token punctuation">[</span><span class="token string">'bold'</span><span class="token punctuation">,</span> <span class="token string">'italic'</span><span class="token punctuation">,</span> <span class="token string">'underline'</span><span class="token punctuation">,</span> <span class="token string">'strike'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment">//加粗，斜体，下划线，删除线</span>            <span class="token punctuation">[</span><span class="token string">'blockquote'</span><span class="token punctuation">,</span> <span class="token string">'code-block'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token comment">//引用，代码块</span>            <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> <span class="token string">'header'</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token string">'header'</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token comment">// 标题，键值对的形式；1、2表示字体大小</span>            <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> <span class="token string">'list'</span><span class="token operator">:</span> <span class="token string">'ordered'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token string">'list'</span><span class="token operator">:</span> <span class="token string">'bullet'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token comment">//列表</span>            <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> <span class="token string">'script'</span><span class="token operator">:</span> <span class="token string">'sub'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token string">'script'</span><span class="token operator">:</span> <span class="token string">'super'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token comment">// 上下标</span>            <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> <span class="token string">'indent'</span><span class="token operator">:</span> <span class="token string">'-1'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token string">'indent'</span><span class="token operator">:</span> <span class="token string">'+1'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token comment">// 缩进</span>            <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> <span class="token string">'direction'</span><span class="token operator">:</span> <span class="token string">'rtl'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 文本方向</span>            <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> <span class="token string">'header'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token comment">//几级标题</span>            <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> <span class="token string">'color'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token string">'background'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token comment">// 字体颜色，字体背景颜色</span>            <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> <span class="token string">'font'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string">'align'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment">//对齐方式</span>            <span class="token punctuation">[</span><span class="token string">'clean'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment">//清除字体样式</span>            <span class="token punctuation">[</span><span class="token string">'image'</span><span class="token punctuation">,</span><span class="token string">'video'</span><span class="token punctuation">]</span>    <span class="token comment">//上传图片、上传视频</span>          <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>         <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token function">onEditorReady</span><span class="token punctuation">(</span><span class="token parameter">editor</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token comment">// 准备编辑器</span>      <span class="token function">onEditorBlur</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// 失去焦点事件</span>      <span class="token function">onEditorFocus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// 获得焦点事件</span>      <span class="token comment">// 内容改变事件--给父组件传值</span>      <span class="token function">onEditorChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>       <span class="token comment">// 转码</span>      <span class="token function">escapeStringHTML</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&amp;lt;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token string">'&lt;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&amp;gt;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token string">'>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> str<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  computed<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token function">editor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>myQuillEditor<span class="token punctuation">.</span>quill<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> content <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>  <span class="token comment">// 请求后台返回的内容字符串</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>str <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">escapeStringHTML</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>至此便可以使用富文本了。需要注意的是，该富文本编辑器的所编辑的内容，在存储数据时会按照html的格式存储，例如：</p>  <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">输入内容为123时，存储到后台的实际文本为<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>123<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>因此要从后台读取数据时，需要使用<code>v-html</code>的方式来解析数据，在需要让存储数据显示的Vue页面里，添加如下代码即可：</p>  <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-html</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.answer<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ql-editor<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>  &#123;&#123;content&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>--其中content为存储vue-quill-editor内容的参数--</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>使用<code>v-html</code>解析数据时，会出现所展示的图片尺寸异常的情况，若想让图片显示出正常的大小，只需在样式style中添加以下CSS代码即可：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.ql-editor img</span><span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="调整图片尺寸-amp-图片拖拽上传（PC端）"><a href="#调整图片尺寸-amp-图片拖拽上传（PC端）" class="headerlink" title="调整图片尺寸&amp;图片拖拽上传（PC端）"></a>调整图片尺寸&amp;图片拖拽上传（PC端）</h1><p>直接使用vue-quill-editor上传图片时，图片是不能实现调整图片尺寸和图片拖拽上传的，若想要实现这些功能，则需要下载插件<code>quill-image-resize-module</code>和<code>quill-image-drop-module</code>。</p><h2 id="插件配置"><a href="#插件配置" class="headerlink" title="插件配置"></a>插件配置</h2><ul><li><p>首先需要下载插件：</p>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm i quill-image-drop-module -Snpm i quill-image-resize-module -S<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>然后在Vue页面的script模块中引入这两个插件：</p>  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ImageDrop <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'quill-image-drop-module'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ImageResize <span class="token keyword">from</span> <span class="token string">'quill-image-resize-module'</span><span class="token punctuation">;</span>Quill<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">'modules/imageDrop'</span><span class="token punctuation">,</span>ImageDrop<span class="token punctuation">)</span><span class="token punctuation">;</span>Quill<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">'modules/imageResize'</span><span class="token punctuation">,</span> ImageResize<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>然后在<code>data return</code> 中引入插件的配置如下：</p>  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">editorOption<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  modules<span class="token operator">:</span><span class="token punctuation">&#123;</span>                   imageDrop<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>    imageResize<span class="token operator">:</span><span class="token punctuation">&#123;</span>      displaySize<span class="token operator">:</span><span class="token punctuation">&#123;</span>        backgroundColor<span class="token operator">:</span> <span class="token string">"black"</span><span class="token punctuation">,</span>        border<span class="token operator">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span>        color<span class="token operator">:</span> <span class="token string">"white"</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      modules<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'Resize'</span><span class="token punctuation">,</span><span class="token string">'DisplaySize'</span><span class="token punctuation">,</span><span class="token string">'Toolbar'</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置引入后，在<code>vue.config.js</code>文件中引入一下配置：</p>  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  configureWebpack<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    plugins<span class="token operator">:</span><span class="token punctuation">[</span>      <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>ProvidePlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token string">'window.Quill'</span><span class="token operator">:</span><span class="token string">'quill/dist/quill.js'</span><span class="token punctuation">,</span>        <span class="token string">'Quill'</span><span class="token operator">:</span><span class="token string">'quill/dist/quill.js'</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>重启vue-cli后，便可在PC端实现调整图片尺寸和图片拖拽上传的功能</p></li></ul>]]></content>
    
    
    <summary type="html">富文本编辑器vue-quill-editor的使用</summary>
    
    
    
    <category term="前端" scheme="http://tangmenjue.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Vue.js" scheme="http://tangmenjue.top/tags/Vue-js/"/>
    
    <category term="前端" scheme="http://tangmenjue.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Oracle Sql语句查库</title>
    <link href="http://tangmenjue.top/2023/02/21/Oracle%20Sql%E8%AF%AD%E5%8F%A5%E6%9F%A5%E5%BA%93/"/>
    <id>http://tangmenjue.top/2023/02/21/Oracle%20Sql%E8%AF%AD%E5%8F%A5%E6%9F%A5%E5%BA%93/</id>
    <published>2023-02-21T04:00:45.000Z</published>
    <updated>2023-02-21T04:00:45.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据库连接工具：DBeaver"><a href="#数据库连接工具：DBeaver" class="headerlink" title="数据库连接工具：DBeaver"></a>数据库连接工具：DBeaver</h1><p>本文中使用的数据库连接工具是DBeaver，其是一款免费且跨平台的数据库连接工具。其优势是会在首次链接数据库时，下载所需驱动，解决了数据库版本不兼容的问题。</p><p>该工具的下载地址为：<a href="https://dbeaver.io/download/">Download | DBeaver Community</a>，直接根据安装指示点击下一步即可完成安装。</p><p>安装好后打开软件，点击左上角的图标新建连接：<img src="/2023/02/21/Oracle%20Sql%E8%AF%AD%E5%8F%A5%E6%9F%A5%E5%BA%93/1.png" alt></p><p>在弹出的窗口里选择Oracle，填好相应的信息后，点击完成。然后会弹出下载驱动文件的页面，点击下载驱动：<img src="/2023/02/21/Oracle%20Sql%E8%AF%AD%E5%8F%A5%E6%9F%A5%E5%BA%93/2.png" alt></p><p>在左方便可看到已连接的数据库，右键数据库名字-SQL编辑器-SQL编辑器便可打开一个可以编写sql语句的脚本编辑器，其他模块的使用方法与pgAdmin 、Navicat等工具的相同。</p><h1 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h1><p>查询test_table表中名字含有“张三”的数据：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">select * from test_tableWHERE name like &#39;%张三%&#39;-- %张三，表示匹配结尾为张三的数据-- 张三%，表示匹配开头为张三的数据-- %张三%，表示匹配任意位置含有张三的数据<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="查询语句中含有变量"><a href="#查询语句中含有变量" class="headerlink" title="查询语句中含有变量"></a>查询语句中含有变量</h1><p>查询test_table表中年龄等于参数year值的数据，其中year参数的值在运行sql语句时输入：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">select * from test_table aWHERE a.old&#x3D;:year-- test_table a，即设置表格test_table的别名为a，后续可用a来代替表格test_table-- :year，表示变量year<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>查询test_table表中名字含有参数search值的数据，其中search参数的值在运行sql语句时输入：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">select * from test_tableWHERE name like &#39;%&#39;||:search||&#39;%&#39;-- :search，表示变量search-- ||:search||中，||为连接符，类似于Python中print里的+号，即&#39;%&#39;||:search||&#39;%&#39;等价于Python中的print里的(&#39;%&#39;+search+&#39;%&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>查询test_table表中学号为参数num值的名字，其中num参数的值在运行sql语句时输入:</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">select distinct name from test_table aWHERE a.snum&#x3D;to_char(:num)-- to_char函数用来将数组转为字符串-- distinct参数用来去除重复数据<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>查询test_table表中名字为参数search值的数据，所查询的结果中含有参数值的数据排在前面：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">select  * from test_tableWHERE name like &#39;%&#39;||:search||&#39;%&#39;order by (case when name like &#39;%&#39;||:search||&#39;%&#39; then 0 end)-- case 条件 then 0 end，表示满足条件的数据排在第0位，即满足条件的数据优先显示<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="左连接查询"><a href="#左连接查询" class="headerlink" title="左连接查询"></a>左连接查询</h1><p>进行左连接(Left join)时，查询将左边表格T1中的每一行都与右边表格T2中的行进行比较，返回的结果会有以下三种情况：</p><ul><li>若T1中的某条记录在T2中刚好只有一条记录可以匹配，则返回的结果中会生成一个新的行</li><li>若T1中的某条记录在T2中有N条记录可以匹配，则返回的结果中也会生成N个新的行，这些行所包含的T1的字段值是重复的</li><li>若T1中的某条记录在T2中没有可以匹配的记录，则返回的结果中会生成一个新的行，该行所包含的T2的字段值是NULL</li></ul><p>例如，左表为T1，其有如下数据：<img src="/2023/02/21/Oracle%20Sql%E8%AF%AD%E5%8F%A5%E6%9F%A5%E5%BA%93/3.png" alt>右表为T2，其有如下数据：<img src="/2023/02/21/Oracle%20Sql%E8%AF%AD%E5%8F%A5%E6%9F%A5%E5%BA%93/4.png" alt></p><p>将两者进行左连接查询，即需要返回左表中所有行的数据以及右表中包含number行的数据：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">select * from T1 left join T2 on T1.num&#x3D;T2.number-- T1的num列引用T2表中的number列。其中num列的部分值是无效的-- 若要过滤掉所有name为NULL的记录，可以增加以下where子句where number is not null<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查询结果如下：<img src="/2023/02/21/Oracle%20Sql%E8%AF%AD%E5%8F%A5%E6%9F%A5%E5%BA%93/5.png" alt></p><p>去除NULL记录后的查询结果如下：<img src="/2023/02/21/Oracle%20Sql%E8%AF%AD%E5%8F%A5%E6%9F%A5%E5%BA%93/6.png" alt></p>]]></content>
    
    
    <summary type="html">使用Oracle Sql语句查库</summary>
    
    
    
    <category term="数据库" scheme="http://tangmenjue.top/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="数据库" scheme="http://tangmenjue.top/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
</feed>
